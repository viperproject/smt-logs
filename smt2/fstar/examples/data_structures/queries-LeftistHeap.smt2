
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for interface FStar.Sealed


; <Start encoding val FStar.Sealed.sealed>

(declare-fun FStar.Sealed.sealed (Term) Term)

(declare-fun FStar.Sealed.sealed@tok () Term)

; </end encoding val FStar.Sealed.sealed>


; <Start encoding val FStar.Sealed.sealed_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.sealed_singl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.sealed_singl@tok () Term)

; </end encoding val FStar.Sealed.sealed_singl>


; <Start encoding val FStar.Sealed.seal>

(declare-fun FStar.Sealed.seal (Term Term) Term)
(declare-fun Tm_arrow_202c0385508095b22536f7b176783182 () Term)
(declare-fun FStar.Sealed.seal@tok () Term)

; </end encoding val FStar.Sealed.seal>


; <Start encoding val FStar.Sealed.map_seal>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Sealed.map_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_8ae919a1b422d31df5f3a30011fa6e98 () Term)
(declare-fun FStar.Sealed.map_seal@tok () Term)

; </end encoding val FStar.Sealed.map_seal>


; <Start encoding val FStar.Sealed.bind_seal>

(declare-fun Tm_arrow_5dc851dfbcbc38067d4415ede8f88e9f (Term Term) Term)
(declare-fun FStar.Sealed.bind_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_4d90a5e6583ddd9ddbd451cbed0e9d01 () Term)
(declare-fun FStar.Sealed.bind_seal@tok () Term)

; </end encoding val FStar.Sealed.bind_seal>


; End Externals for interface FStar.Sealed


; Externals for interface FStar.Range


; <Start encoding val FStar.Range.__range>

(declare-fun FStar.Range.__range () Term)

; </end encoding val FStar.Range.__range>


; <Start encoding let range>

(declare-fun FStar.Range.range () Term)

; </end encoding let range>


; <Start encoding val FStar.Range.__range_0>

(declare-fun FStar.Range.__range_0 (Dummy_sort) Term)

; </end encoding val FStar.Range.__range_0>


; <Start encoding let range_0>

(declare-fun FStar.Range.range_0 (Dummy_sort) Term)

; </end encoding let range_0>


; <Start encoding val FStar.Range.__mk_range>

(declare-fun FStar.Range.__mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_692aa0ebe01353db00b5203de7da6785 () Term)
(declare-fun FStar.Range.__mk_range@tok () Term)

; </end encoding val FStar.Range.__mk_range>


; <Start encoding val FStar.Range.mk_range>

(declare-fun FStar.Range.mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2d3d853349c0a35c0e0c8d13086384ea () Term)
(declare-fun FStar.Range.mk_range@tok () Term)

; </end encoding val FStar.Range.mk_range>


; <Start encoding val FStar.Range.join_range>

(declare-fun FStar.Range.join_range (Term Term) Term)
(declare-fun Tm_arrow_6eaaa31f2d36a5c7cca7eb998962a7fa () Term)
(declare-fun FStar.Range.join_range@tok () Term)

; </end encoding val FStar.Range.join_range>


; <Start encoding let labeled>

(declare-fun FStar.Range.labeled (Term Term Term) Term)
(declare-fun Tm_arrow_ab5899212fc4c148181589be7fd78af1 () Term)
(declare-fun FStar.Range.labeled@tok () Term)

; </end encoding let labeled>


; <Start encoding val FStar.Range.explode>

(declare-fun FStar.Range.explode (Term) Term)
(declare-fun Tm_arrow_f9315f3207257087f0bf3975f13024e3 () Term)
(declare-fun FStar.Range.explode@tok () Term)

; </end encoding val FStar.Range.explode>


; End Externals for interface FStar.Range


; Externals for module FStar.Preorder


; <Start encoding let relation>

(declare-fun FStar.Preorder.relation (Term) Term)

(declare-fun FStar.Preorder.relation@tok () Term)
(declare-fun Tm_arrow_a19f9d49348d4e0038f0ded87d87802f (Term) Term)

; </end encoding let relation>


; <Start encoding let predicate>

(declare-fun FStar.Preorder.predicate (Term) Term)

(declare-fun FStar.Preorder.predicate@tok () Term)


; </end encoding let predicate>


; <Start encoding let reflexive>

(declare-fun FStar.Preorder.reflexive (Term Term) Term)
(declare-fun Tm_arrow_8e677a33afbeb812aa3779b7bdd0131c () Term)
(declare-fun FStar.Preorder.reflexive@tok () Term)

; </end encoding let reflexive>


; <Start encoding let transitive>

(declare-fun FStar.Preorder.transitive (Term Term) Term)

(declare-fun FStar.Preorder.transitive@tok () Term)

; </end encoding let transitive>


; <Start encoding let preorder_rel>

(declare-fun FStar.Preorder.preorder_rel (Term Term) Term)

(declare-fun FStar.Preorder.preorder_rel@tok () Term)

; </end encoding let preorder_rel>


; <Start encoding let preorder>

(declare-fun FStar.Preorder.preorder (Term) Term)

(declare-fun FStar.Preorder.preorder@tok () Term)
(declare-fun Tm_refine_bd10f09297e0e7dc08314f7d9211801c (Term) Term)

; </end encoding let preorder>


; <Start encoding let stable>


(declare-fun FStar.Preorder.stable (Term Term Term) Term)

(declare-fun Tm_arrow_88036d0811eee3361efd6229bae2556d () Term)
(declare-fun FStar.Preorder.stable@tok () Term)


; </end encoding let stable>


; End Externals for module FStar.Preorder


; Externals for interface FStar.Calc


; <Start encoding val FStar.Calc.calc_chain>

(declare-fun FStar.Calc.calc_chain (Term Term Term Term) Term)
(declare-fun Tm_arrow_10ae2c328e1918eb5ddde4274ac6d32a () Term)
(declare-fun FStar.Calc.calc_chain@tok () Term)

; </end encoding val FStar.Calc.calc_chain>


; <Start encoding let rec calc_chain_related>

(declare-fun FStar.Calc.calc_chain_related (Term Term Term Term) Term)

(declare-fun FStar.Calc.calc_chain_related@tok () Term)

; </end encoding let rec calc_chain_related>


; <Start encoding let calc_chain_compatible>

(declare-fun FStar.Calc.calc_chain_compatible (Term Term Term) Term)
(declare-fun Tm_arrow_5d25af94b872513cc464e94bbc6a8348 () Term)
(declare-fun FStar.Calc.calc_chain_compatible@tok () Term)

; </end encoding let calc_chain_compatible>


; <Start encoding let calc_pack>

(declare-fun FStar.Calc.calc_pack (Term Term Term Term) Term)

(declare-fun FStar.Calc.calc_pack@tok () Term)

; </end encoding let calc_pack>


; <Start encoding val FStar.Calc.calc_init>

(declare-fun FStar.Calc.calc_init (Term Term) Term)
(declare-fun Tm_arrow_f5787f683bb2167ab433229a103fa97e () Term)
(declare-fun FStar.Calc.calc_init@tok () Term)

; </end encoding val FStar.Calc.calc_init>


; <Start encoding val FStar.Calc.calc_step>

(declare-fun Tm_arrow_cfbfcb3d713af6cfef9741902fbd7eae (Term Term Term Term) Term)
(declare-fun Tm_arrow_924fe8a596e8d1052263cdb50ea0b3f9 (Term Term Term) Term)
(declare-fun FStar.Calc.calc_step (Term Term Term Term Term Term Term Term) Term)


(declare-fun Tm_arrow_c19042f2eb54c518b0ae4e8fbbb1b795 () Term)
(declare-fun FStar.Calc.calc_step@tok () Term)

; </end encoding val FStar.Calc.calc_step>


; <Start encoding val FStar.Calc.calc_finish>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Calc.calc_finish (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Calc.calc_finish@tok () Term)

; </end encoding val FStar.Calc.calc_finish>


; <Start encoding val FStar.Calc.calc_push_impl>

(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)
(declare-fun FStar.Calc.calc_push_impl (Term Term Term) Term)

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_8e288ee6e01162bc0e93f91b1d4ccf81 () Term)
(declare-fun FStar.Calc.calc_push_impl@tok () Term)


; </end encoding val FStar.Calc.calc_push_impl>


; End Externals for interface FStar.Calc


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>


(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)


(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for interface FStar.Stubs.Reflection.Types


; <Start encoding val FStar.Stubs.Reflection.Types.namedv>

(declare-fun FStar.Stubs.Reflection.Types.namedv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.namedv>


; <Start encoding val FStar.Stubs.Reflection.Types.bv>

(declare-fun FStar.Stubs.Reflection.Types.bv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.bv>


; <Start encoding val FStar.Stubs.Reflection.Types.binder>

(declare-fun FStar.Stubs.Reflection.Types.binder () Term)

; </end encoding val FStar.Stubs.Reflection.Types.binder>


; <Start encoding val FStar.Stubs.Reflection.Types.term>

(declare-fun FStar.Stubs.Reflection.Types.term () Term)

; </end encoding val FStar.Stubs.Reflection.Types.term>


; <Start encoding val FStar.Stubs.Reflection.Types.env>

(declare-fun FStar.Stubs.Reflection.Types.env () Term)

; </end encoding val FStar.Stubs.Reflection.Types.env>


; <Start encoding val FStar.Stubs.Reflection.Types.fv>

(declare-fun FStar.Stubs.Reflection.Types.fv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.fv>


; <Start encoding val FStar.Stubs.Reflection.Types.comp>

(declare-fun FStar.Stubs.Reflection.Types.comp () Term)

; </end encoding val FStar.Stubs.Reflection.Types.comp>


; <Start encoding val FStar.Stubs.Reflection.Types.sigelt>

(declare-fun FStar.Stubs.Reflection.Types.sigelt () Term)

; </end encoding val FStar.Stubs.Reflection.Types.sigelt>


; <Start encoding val FStar.Stubs.Reflection.Types.ctx_uvar_and_subst>

(declare-fun FStar.Stubs.Reflection.Types.ctx_uvar_and_subst () Term)

; </end encoding val FStar.Stubs.Reflection.Types.ctx_uvar_and_subst>


; <Start encoding val FStar.Stubs.Reflection.Types.letbinding>

(declare-fun FStar.Stubs.Reflection.Types.letbinding () Term)

; </end encoding val FStar.Stubs.Reflection.Types.letbinding>


; <Start encoding val FStar.Stubs.Reflection.Types.ident>

(declare-fun FStar.Stubs.Reflection.Types.ident () Term)

; </end encoding val FStar.Stubs.Reflection.Types.ident>


; <Start encoding val FStar.Stubs.Reflection.Types.universe_uvar>

(declare-fun FStar.Stubs.Reflection.Types.universe_uvar () Term)

; </end encoding val FStar.Stubs.Reflection.Types.universe_uvar>


; <Start encoding val FStar.Stubs.Reflection.Types.universe>

(declare-fun FStar.Stubs.Reflection.Types.universe () Term)

; </end encoding val FStar.Stubs.Reflection.Types.universe>


; <Start encoding let name>

(declare-fun FStar.Stubs.Reflection.Types.name (Dummy_sort) Term)

; </end encoding let name>


; <Start encoding let univ_name>

(declare-fun FStar.Stubs.Reflection.Types.univ_name () Term)

; </end encoding let univ_name>


; <Start encoding let typ>

(declare-fun FStar.Stubs.Reflection.Types.typ () Term)

; </end encoding let typ>


; <Start encoding let binders>

(declare-fun FStar.Stubs.Reflection.Types.binders () Term)

; </end encoding let binders>


; <Start encoding let decls>

(declare-fun FStar.Stubs.Reflection.Types.decls () Term)

; </end encoding let decls>


; End Externals for interface FStar.Stubs.Reflection.Types


; Externals for interface FStar.Float


; <Start encoding val FStar.Float.float>

(declare-fun FStar.Float.float () Term)

; </end encoding val FStar.Float.float>


; <Start encoding let double>

(declare-fun FStar.Float.double () Term)

; </end encoding let double>


; End Externals for interface FStar.Float


; Externals for module FStar.Mul


; <Start encoding let op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding let op_Star>


; End Externals for module FStar.Mul


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>


(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; Externals for interface FStar.Seq.Base


; <Start encoding val FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding val FStar.Seq.Base.seq>


; <Start encoding val FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding val FStar.Seq.Base.length>


; <Start encoding val FStar.Seq.Base.seq_to_list>

(declare-fun FStar.Seq.Base.seq_to_list (Term Term) Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)
(declare-fun FStar.Seq.Base.seq_to_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_to_list>


; <Start encoding val FStar.Seq.Base.seq_of_list>

(declare-fun FStar.Seq.Base.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Base.seq_of_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_of_list>


; <Start encoding val FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding val FStar.Seq.Base.index>


; <Start encoding val FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding val FStar.Seq.Base.create>


; <Start encoding val FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux>


; <Start encoding val FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding val FStar.Seq.Base.init>


; <Start encoding val FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux_ghost>


; <Start encoding val FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost>


; <Start encoding val FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding val FStar.Seq.Base.empty>


; <Start encoding let createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding let createEmpty>


; <Start encoding val FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_empty>


; <Start encoding val FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding val FStar.Seq.Base.upd>


; <Start encoding val FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding val FStar.Seq.Base.append>


; <Start encoding let cons>

(declare-fun FStar.Seq.Base.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Base.cons@tok () Term)

; </end encoding let cons>


; <Start encoding let op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding let op_At_Bar>


; <Start encoding val FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding val FStar.Seq.Base.slice>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_create_len>


; <Start encoding val FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_len>


; <Start encoding val FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_len_upd>


; <Start encoding val FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_len_append>


; <Start encoding val FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_len_slice>


; <Start encoding val FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_create>


; <Start encoding val FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_upd1>


; <Start encoding val FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_upd2>


; <Start encoding val FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_app1>


; <Start encoding val FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_app2>


; <Start encoding val FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_slice>


; <Start encoding val FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding val FStar.Seq.Base.hasEq_lemma>


; <Start encoding val FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding val FStar.Seq.Base.equal>


; <Start encoding val FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding val FStar.Seq.Base.eq_i>


; <Start encoding val FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding val FStar.Seq.Base.eq>


; <Start encoding val FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_eq_intro>


; <Start encoding val FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_refl>


; <Start encoding val FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_elim>


; <Start encoding val FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding val FStar.Seq.Base.append_assoc>


; <Start encoding val FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_l>


; <Start encoding val FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_r>


; <Start encoding val FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_index>


; <Start encoding val FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_index_>


; <Start encoding val FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost_index>


; <Start encoding val FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_ghost_index_>


; <Start encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; Externals for interface FStar.Math.Lemmas


; <Start encoding val FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_div_axiom>


; <Start encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Start encoding val FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_cancel_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_right>


; <Start encoding val FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_left>


; <Start encoding val FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_right>


; <Start encoding val FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_left>


; <Start encoding val FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_right>


; <Start encoding val FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding val FStar.Math.Lemmas.addition_is_associative>


; <Start encoding val FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding val FStar.Math.Lemmas.subtraction_is_distributive>


; <Start encoding val FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_add_plus_minus>


; <Start encoding val FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_left>


; <Start encoding val FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_right>


; <Start encoding val FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_neg_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_right>


; <Start encoding val FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_binds_tighter>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_bound>


; <Start encoding val FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_ineq1>


; <Start encoding val FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding val FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Start encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Start encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_sum>


; <Start encoding val FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_mult>


; <Start encoding val FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_lt_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_le_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_plus>


; <Start encoding val FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_minus>


; <Start encoding val FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiply_fractions>


; <Start encoding val FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_lt>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt_nat>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt>


; <Start encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Start encoding val FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_div>


; <Start encoding val FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_mod>


; <Start encoding val FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding val FStar.Math.Lemmas.lt_multiple_is_equal>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod_plus>


; <Start encoding val FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.sub_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_div>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_add_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_0>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_1>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_injective>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_exact>


; <Start encoding val FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.div_exact_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec2>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mod>


; <Start encoding val FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_division_definition>


; <Start encoding val FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_range_lemma>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiplication_order_lemma>


; <Start encoding val FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_propriety>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_1>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_2>


; <Start encoding val FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition>


; <Start encoding val FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_division_lemma>


; <Start encoding val FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_distributivity>


; <Start encoding val FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_le>


; <Start encoding val FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_sub_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Start encoding val FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub>


; <Start encoding val FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mult_exact>


; <Start encoding val FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mul_div_exact>


; <Start encoding val FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_pow2_div2>


; <Start encoding val FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_multiplication_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_division_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_add>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_twice>


; <Start encoding val FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub>


; <Start encoding val FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_add_both>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Start encoding val FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for interface FStar.Math.Lemmas


; Externals for interface FStar.BitVector


; <Start encoding let bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding let bv_t>


; <Start encoding let zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding let zero_vec>


; <Start encoding let elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding let elem_vec>


; <Start encoding let ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding let ones_vec>


; <Start encoding let rec logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)

; </end encoding let rec logand_vec>


; <Start encoding val FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logand_vec_definition>


; <Start encoding let rec logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)


; </end encoding let rec logxor_vec>


; <Start encoding val FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logxor_vec_definition>


; <Start encoding let rec logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)


; </end encoding let rec logor_vec>


; <Start encoding val FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logor_vec_definition>


; <Start encoding let rec lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)

; </end encoding let rec lognot_vec>


; <Start encoding val FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.lognot_vec_definition>


; <Start encoding val FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding val FStar.BitVector.lemma_xor_bounded>


; <Start encoding let is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

; </end encoding let is_subset_vec>


; <Start encoding let is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

; </end encoding let is_superset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding let shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding let shift_left_vec>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding let shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding let shift_right_vec>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding let shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding let shift_arithmetic_right_vec>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for interface FStar.BitVector


; Externals for interface FStar.UInt


; <Start encoding val FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)

; </end encoding val FStar.UInt.pow2_values>


; <Start encoding let max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)

; </end encoding let max_int>


; <Start encoding let min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)

; </end encoding let min_int>


; <Start encoding let fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)

; </end encoding let fits>


; <Start encoding let size>

(declare-fun FStar.UInt.size (Term Term) Term)
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)

; </end encoding let size>


; <Start encoding let uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)

; </end encoding let uint_t>


; <Start encoding let zero>

(declare-fun FStar.UInt.zero (Term) Term)
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding let zero>


; <Start encoding let pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding let pow2_n>


; <Start encoding let one>

(declare-fun FStar.UInt.one (Term) Term)
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding let one>


; <Start encoding let ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding let ones>


; <Start encoding let incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding let incr>


; <Start encoding let decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding let decr>


; <Start encoding val FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding val FStar.UInt.incr_underspec>


; <Start encoding val FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding val FStar.UInt.decr_underspec>


; <Start encoding let incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding let incr_mod>


; <Start encoding let decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding let decr_mod>


; <Start encoding let add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding let add>


; <Start encoding val FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding val FStar.UInt.add_underspec>


; <Start encoding let add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding let add_mod>


; <Start encoding let sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding let sub>


; <Start encoding val FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding val FStar.UInt.sub_underspec>


; <Start encoding let sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding let sub_mod>


; <Start encoding let mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding let mul>


; <Start encoding val FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding val FStar.UInt.mul_underspec>


; <Start encoding let mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding let mul_mod>


; <Start encoding val FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding val FStar.UInt.lt_square_div_lt>


; <Skipped #push-options "--fuel 0 --ifuel 0"/>


; <Start encoding let mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding let mul_div>


; <Skipped #pop-options/>


; <Start encoding let div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding let div>


; <Start encoding val FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding val FStar.UInt.div_underspec>


; <Start encoding val FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding val FStar.UInt.div_size>


; <Start encoding let udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding let udiv>


; <Start encoding let mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding let mod>


; <Start encoding let eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding let to_uint_t>


; <Start encoding let rec to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)

; </end encoding let rec to_vec>


; <Start encoding let rec from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)

; </end encoding let rec from_vec>


; <Start encoding val FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_1>


; <Start encoding val FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_2>


; <Start encoding val FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding val FStar.UInt.inverse_aux>


; <Start encoding val FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_vec_lemma>


; <Start encoding val FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_num_lemma>


; <Start encoding val FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_1>


; <Start encoding val FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_2>


; <Start encoding val FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding val FStar.UInt.from_vec_aux>


; <Start encoding val FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding val FStar.UInt.seq_slice_lemma>


; <Start encoding val FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding val FStar.UInt.from_vec_propriety>


; <Start encoding val FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding val FStar.UInt.append_lemma>


; <Start encoding val FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_left_lemma>


; <Start encoding val FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_right_lemma>


; <Start encoding val FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_to_vec_lemma>


; <Start encoding val FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.zero_from_vec_lemma>


; <Start encoding val FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.one_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.pow2_from_vec_lemma>


; <Start encoding val FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_to_vec_lemma>


; <Start encoding val FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.ones_from_vec_lemma>


; <Start encoding let nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding let nth>


; <Start encoding val FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding val FStar.UInt.nth_lemma>


; <Start encoding val FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_nth_lemma>


; <Start encoding val FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_nth_lemma>


; <Start encoding val FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.one_nth_lemma>


; <Start encoding val FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_nth_lemma>


; <Start encoding let logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding let logor>


; <Start encoding let lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding let lognot>


; <Start encoding val FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding val FStar.UInt.logand_definition>


; <Start encoding val FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding val FStar.UInt.logxor_definition>


; <Start encoding val FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding val FStar.UInt.logor_definition>


; <Start encoding val FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding val FStar.UInt.lognot_definition>


; <Start encoding let minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding let minus>


; <Start encoding val FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding val FStar.UInt.logand_commutative>


; <Start encoding val FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding val FStar.UInt.logand_associative>


; <Start encoding val FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding val FStar.UInt.logand_self>


; <Start encoding val FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_1>


; <Start encoding val FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_2>


; <Start encoding val FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding val FStar.UInt.subset_vec_le_lemma>


; <Start encoding val FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding val FStar.UInt.logand_le>


; <Start encoding val FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding val FStar.UInt.logxor_commutative>


; <Start encoding val FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding val FStar.UInt.logxor_associative>


; <Start encoding val FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding val FStar.UInt.logxor_self>


; <Start encoding val FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_1>


; <Start encoding val FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_2>


; <Start encoding let xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding let xor>


; <Start encoding val FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding val FStar.UInt.xor_lemma>


; <Start encoding val FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding val FStar.UInt.logxor_inv>


; <Start encoding val FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding val FStar.UInt.logxor_neq_nonzero>


; <Start encoding val FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding val FStar.UInt.logor_commutative>


; <Start encoding val FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding val FStar.UInt.logor_associative>


; <Start encoding val FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding val FStar.UInt.logor_self>


; <Start encoding val FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_1>


; <Start encoding val FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_2>


; <Start encoding val FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding val FStar.UInt.superset_vec_ge_lemma>


; <Start encoding val FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding val FStar.UInt.logor_ge>


; <Start encoding val FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding val FStar.UInt.lognot_self>


; <Start encoding val FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding val FStar.UInt.lognot_lemma_1>


; <Start encoding val FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding val FStar.UInt.index_to_vec_ones>


; <Start encoding val FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding val FStar.UInt.logor_disjoint>


; <Start encoding val FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding val FStar.UInt.logand_mask>


; <Start encoding let shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding let shift_left>


; <Start encoding let shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding let shift_right>


; <Start encoding val FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_1>


; <Start encoding val FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_2>


; <Start encoding val FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_1>


; <Start encoding val FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_2>


; <Start encoding val FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logand_lemma>


; <Start encoding val FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logand_lemma>


; <Start encoding val FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logxor_lemma>


; <Start encoding val FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logxor_lemma>


; <Start encoding val FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logor_lemma>


; <Start encoding val FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logor_lemma>


; <Start encoding val FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_1>


; <Start encoding val FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_2>


; <Start encoding val FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_3>


; <Start encoding val FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_lemma>


; <Start encoding val FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_1>


; <Start encoding val FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_2>


; <Start encoding val FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_3>


; <Start encoding val FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_lemma>


; <Start encoding let msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding let msb>


; <Start encoding val FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_pow2>


; <Start encoding val FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_zero>


; <Start encoding val FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_gte>


; <Start encoding val FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_uint_mod>


; <Start encoding val FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_add_sub_cancel>


; <Start encoding val FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding val FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding val FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_sub_add_cancel>


; <Start encoding let zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding let zero_extend_vec>


; <Start encoding let one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding let one_extend_vec>


; <Start encoding let zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding let zero_extend>


; <Start encoding let one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding let one_extend>


; <Start encoding val FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding val FStar.UInt.lemma_zero_extend>


; <Start encoding val FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding val FStar.UInt.lemma_one_extend>


; <Start encoding val FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding val FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_one_ext>


; <Start encoding val FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_mod>


; <Start encoding val FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_zero>


; <Start encoding val FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_one_mod_pow2>


; <Start encoding val FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding val FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value>


; <Start encoding val FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; Externals for interface FStar.UInt32


; <Start encoding let n>

(declare-fun FStar.UInt32.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt32.t>

(declare-fun FStar.UInt32.t (Dummy_sort) Term)

; </end encoding val FStar.UInt32.t>


; <Start encoding val FStar.UInt32.v>

(declare-fun FStar.UInt32.v (Term) Term)
(declare-fun Tm_arrow_33a06d9a3ec1c77524ab958d37ae1453 () Term)
(declare-fun FStar.UInt32.v@tok () Term)

; </end encoding val FStar.UInt32.v>


; <Start encoding val FStar.UInt32.uint_to_t>

(declare-fun FStar.UInt32.uint_to_t (Term) Term)
(declare-fun Tm_refine_0ea1fba779ad5718e28476faeef94d56 (Term) Term)
(declare-fun Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674 () Term)
(declare-fun FStar.UInt32.uint_to_t@tok () Term)


; </end encoding val FStar.UInt32.uint_to_t>


; <Start encoding val FStar.UInt32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.uv_inv@tok () Term)

; </end encoding val FStar.UInt32.uv_inv>


; <Start encoding val FStar.UInt32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.vu_inv@tok () Term)

; </end encoding val FStar.UInt32.vu_inv>


; <Start encoding val FStar.UInt32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.v_inj@tok () Term)

; </end encoding val FStar.UInt32.v_inj>


; <Start encoding val FStar.UInt32.zero>

(declare-fun FStar.UInt32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_7cfa0141116db910fdee890408ebbaf1 () Term)


; </end encoding val FStar.UInt32.zero>


; <Start encoding val FStar.UInt32.one>

(declare-fun FStar.UInt32.one (Dummy_sort) Term)
(declare-fun Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2 () Term)


; </end encoding val FStar.UInt32.one>


; <Start encoding val FStar.UInt32.add>

(declare-fun FStar.UInt32.add (Term Term) Term)
(declare-fun Tm_refine_709aff84c75b0fff77dcbf3b529649dd (Term Term) Term)
(declare-fun Tm_arrow_5558b72197031b1efc1a0f8298859a47 () Term)
(declare-fun FStar.UInt32.add@tok () Term)


; </end encoding val FStar.UInt32.add>


; <Start encoding val FStar.UInt32.add_underspec>

(declare-fun FStar.UInt32.add_underspec (Term Term) Term)
(declare-fun Tm_refine_57eacb083aaa8f3c6200eef2872d40a9 (Term Term) Term)
(declare-fun Tm_arrow_2aa4a786718187783c350fff98c0276d () Term)
(declare-fun FStar.UInt32.add_underspec@tok () Term)


; </end encoding val FStar.UInt32.add_underspec>


; <Start encoding val FStar.UInt32.add_mod>

(declare-fun FStar.UInt32.add_mod (Term Term) Term)
(declare-fun Tm_refine_edc8fb7e909853d860d4ab445ef31337 (Term Term) Term)
(declare-fun Tm_arrow_edbd649f4b12a343efa6ef46e7961890 () Term)
(declare-fun FStar.UInt32.add_mod@tok () Term)


; </end encoding val FStar.UInt32.add_mod>


; <Start encoding val FStar.UInt32.sub>

(declare-fun FStar.UInt32.sub (Term Term) Term)
(declare-fun Tm_refine_aa4b3d268075d84252df525db1f85524 (Term Term) Term)
(declare-fun Tm_arrow_ac932fe6124478fcfd5be99d334122e8 () Term)
(declare-fun FStar.UInt32.sub@tok () Term)


; </end encoding val FStar.UInt32.sub>


; <Start encoding val FStar.UInt32.sub_underspec>

(declare-fun FStar.UInt32.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_01926286fa04b785df0ea0da544f2001 (Term Term) Term)
(declare-fun Tm_arrow_a0c271942b2fe7be43f6ae297698cd0b () Term)
(declare-fun FStar.UInt32.sub_underspec@tok () Term)


; </end encoding val FStar.UInt32.sub_underspec>


; <Start encoding val FStar.UInt32.sub_mod>

(declare-fun FStar.UInt32.sub_mod (Term Term) Term)
(declare-fun Tm_refine_ace23c600fbe87b65e5fc333816f74de (Term Term) Term)
(declare-fun Tm_arrow_4a8c4b67b5977a746f1eeda7c310346f () Term)
(declare-fun FStar.UInt32.sub_mod@tok () Term)


; </end encoding val FStar.UInt32.sub_mod>


; <Start encoding val FStar.UInt32.mul>

(declare-fun FStar.UInt32.mul (Term Term) Term)
(declare-fun Tm_refine_1ccfb21903aa30ace8832f7a4d067d9b (Term Term) Term)
(declare-fun Tm_arrow_f261941925861d12451675f7409141e5 () Term)
(declare-fun FStar.UInt32.mul@tok () Term)


; </end encoding val FStar.UInt32.mul>


; <Start encoding val FStar.UInt32.mul_underspec>

(declare-fun FStar.UInt32.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb4ffd3222952e9ac95fc72e8f9913c6 (Term Term) Term)
(declare-fun Tm_arrow_54623a1c9ed03c94751f7d25d259da67 () Term)
(declare-fun FStar.UInt32.mul_underspec@tok () Term)


; </end encoding val FStar.UInt32.mul_underspec>


; <Start encoding val FStar.UInt32.mul_mod>

(declare-fun FStar.UInt32.mul_mod (Term Term) Term)
(declare-fun Tm_refine_8618df86656cf4c2bc98614452120307 (Term Term) Term)
(declare-fun Tm_arrow_b9ba4f3f3f0a1ea3202a99cc97238a0d () Term)
(declare-fun FStar.UInt32.mul_mod@tok () Term)


; </end encoding val FStar.UInt32.mul_mod>


; <Start encoding val FStar.UInt32.div>

(declare-fun Tm_refine_0941c9ff95557f2d53bc8f8179ab793e () Term)
(declare-fun FStar.UInt32.div (Term Term) Term)

(declare-fun Tm_refine_74d1ae07763cf2ce5f26906c9df0d2cc (Term Term) Term)
(declare-fun Tm_arrow_61dc5944349c0fd1e6ccd916a51fdfe8 () Term)
(declare-fun FStar.UInt32.div@tok () Term)


; </end encoding val FStar.UInt32.div>


; <Start encoding val FStar.UInt32.rem>


(declare-fun FStar.UInt32.rem (Term Term) Term)

(declare-fun Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 (Term Term) Term)
(declare-fun Tm_arrow_a00bbce6d7d4a1d495177d4f11116643 () Term)
(declare-fun FStar.UInt32.rem@tok () Term)


; </end encoding val FStar.UInt32.rem>


; <Start encoding val FStar.UInt32.logand>

(declare-fun FStar.UInt32.logand (Term Term) Term)
(declare-fun Tm_refine_7afd5b0ca8e77c7f6870883658e19d63 (Term Term) Term)
(declare-fun Tm_arrow_eff0426e7af51f8d330de4f569da9534 () Term)
(declare-fun FStar.UInt32.logand@tok () Term)


; </end encoding val FStar.UInt32.logand>


; <Start encoding val FStar.UInt32.logxor>

(declare-fun FStar.UInt32.logxor (Term Term) Term)
(declare-fun Tm_refine_2b25e5c3b25bc06167200cbfa5d36b3e (Term Term) Term)
(declare-fun Tm_arrow_07d2eb0ad8dc47fa48b862c24603f207 () Term)
(declare-fun FStar.UInt32.logxor@tok () Term)


; </end encoding val FStar.UInt32.logxor>


; <Start encoding val FStar.UInt32.logor>

(declare-fun FStar.UInt32.logor (Term Term) Term)
(declare-fun Tm_refine_39cb18a1d289e559096741772432b24f (Term Term) Term)
(declare-fun Tm_arrow_f4c0c09b0ba22212b54bc6a7fb947fac () Term)
(declare-fun FStar.UInt32.logor@tok () Term)


; </end encoding val FStar.UInt32.logor>


; <Start encoding val FStar.UInt32.lognot>

(declare-fun FStar.UInt32.lognot (Term) Term)
(declare-fun Tm_refine_d5743ca0a8d5f3ceec748bdcb132b14f (Term) Term)
(declare-fun Tm_arrow_b6548dae703a0f26a4185c51dee5464b () Term)
(declare-fun FStar.UInt32.lognot@tok () Term)


; </end encoding val FStar.UInt32.lognot>


; <Start encoding val FStar.UInt32.shift_right>

(declare-fun FStar.UInt32.shift_right (Term Term) Term)
(declare-fun Tm_refine_59202c8b625f4b04caf2081d6778d9e7 (Term Term) Term)
(declare-fun Tm_arrow_13c7acc70a3dd34a798f691f2cee4104 () Term)
(declare-fun FStar.UInt32.shift_right@tok () Term)


; </end encoding val FStar.UInt32.shift_right>


; <Start encoding val FStar.UInt32.shift_left>

(declare-fun FStar.UInt32.shift_left (Term Term) Term)
(declare-fun Tm_refine_c642c4de19ebed0b1a9b5f85d40989c0 (Term Term) Term)
(declare-fun Tm_arrow_0709d575329517627fac117b134f4462 () Term)
(declare-fun FStar.UInt32.shift_left@tok () Term)


; </end encoding val FStar.UInt32.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt32.eq (Term Term) Term)
(declare-fun Tm_arrow_6de09abf9de7977da03ee416904d3039 () Term)
(declare-fun FStar.UInt32.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt32.gt (Term Term) Term)

(declare-fun FStar.UInt32.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt32.gte (Term Term) Term)

(declare-fun FStar.UInt32.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt32.lt (Term Term) Term)

(declare-fun FStar.UInt32.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt32.lte (Term Term) Term)

(declare-fun FStar.UInt32.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt32.minus (Term) Term)
(declare-fun Tm_arrow_c4b70260248a2080020c883b42aa875d () Term)
(declare-fun FStar.UInt32.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt32.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt32.eq_mask (Term Term) Term)
(declare-fun Tm_refine_09d9a189c8c7a3bf3fc28db14e6689cd (Term Term) Term)
(declare-fun Tm_arrow_472ed8b8700983a2f5b417531368b430 () Term)
(declare-fun FStar.UInt32.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt32.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt32.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt32.gte_mask (Term Term) Term)
(declare-fun Tm_refine_83df857506788e94d25c8be97271668a (Term Term) Term)
(declare-fun Tm_arrow_a9de8133430dc71a337d9373e485c8b4 () Term)
(declare-fun FStar.UInt32.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt32.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt32.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt32.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt32.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt32.to_string>

(declare-fun FStar.UInt32.to_string (Term) Term)
(declare-fun Tm_arrow_bde0326394a5877aafa8a9dfb4adb318 () Term)
(declare-fun FStar.UInt32.to_string@tok () Term)

; </end encoding val FStar.UInt32.to_string>


; <Start encoding val FStar.UInt32.to_string_hex>

(declare-fun FStar.UInt32.to_string_hex (Term) Term)

(declare-fun FStar.UInt32.to_string_hex@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex>


; <Start encoding val FStar.UInt32.to_string_hex_pad>

(declare-fun FStar.UInt32.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt32.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex_pad>


; <Start encoding val FStar.UInt32.of_string>

(declare-fun FStar.UInt32.of_string (Term) Term)
(declare-fun Tm_arrow_564534749090ea8f842e229c3182e762 () Term)
(declare-fun FStar.UInt32.of_string@tok () Term)

; </end encoding val FStar.UInt32.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt32.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_67ad727682511dd92ce30d8d55620a8e () Term)
(declare-fun FStar.UInt32.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt32


; Externals for interface FStar.Char


; <Start encoding val FStar.Char.char>

(declare-fun FStar.Char.char (Dummy_sort) Term)

; </end encoding val FStar.Char.char>


; <Start encoding let char_code>

(declare-fun FStar.Char.char_code () Term)
(declare-fun Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c () Term)

; </end encoding let char_code>


; <Start encoding val FStar.Char.u32_of_char>

(declare-fun FStar.Char.u32_of_char (Term) Term)
(declare-fun Tm_arrow_09ae08f23212b3776b47464ac075ff69 () Term)
(declare-fun FStar.Char.u32_of_char@tok () Term)

; </end encoding val FStar.Char.u32_of_char>


; <Start encoding val FStar.Char.char_of_u32>

(declare-fun FStar.Char.char_of_u32 (Term) Term)
(declare-fun Tm_arrow_6b2de8c9d183197e10fa8623c8ed0069 () Term)
(declare-fun FStar.Char.char_of_u32@tok () Term)

; </end encoding val FStar.Char.char_of_u32>


; <Start encoding val FStar.Char.char_of_u32_of_char>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Char.char_of_u32_of_char (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Char.char_of_u32_of_char@tok () Term)

; </end encoding val FStar.Char.char_of_u32_of_char>


; <Start encoding val FStar.Char.u32_of_char_of_u32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Char.u32_of_char_of_u32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Char.u32_of_char_of_u32@tok () Term)

; </end encoding val FStar.Char.u32_of_char_of_u32>


; <Start encoding let int_of_char>

(declare-fun FStar.Char.int_of_char (Term) Term)
(declare-fun Tm_arrow_edb4339633bae2b96af63b0dbac8e538 () Term)
(declare-fun FStar.Char.int_of_char@tok () Term)

; </end encoding let int_of_char>


; <Start encoding let char_of_int>

(declare-fun Tm_refine_41bb1fe33d2856748d537571528d32a1 () Term)
(declare-fun FStar.Char.char_of_int (Term) Term)

(declare-fun Tm_arrow_efb6c29a20da126570b0d74fa1074537 () Term)
(declare-fun FStar.Char.char_of_int@tok () Term)


; </end encoding let char_of_int>


; <Start encoding val FStar.Char.lowercase>

(declare-fun FStar.Char.lowercase (Term) Term)
(declare-fun Tm_arrow_410c308158a4312d1307cd758f94e691 () Term)
(declare-fun FStar.Char.lowercase@tok () Term)

; </end encoding val FStar.Char.lowercase>


; <Start encoding val FStar.Char.uppercase>

(declare-fun FStar.Char.uppercase (Term) Term)

(declare-fun FStar.Char.uppercase@tok () Term)

; </end encoding val FStar.Char.uppercase>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __char_of_int>

(declare-fun FStar.Char.__char_of_int (Term) Term)
(declare-fun Tm_arrow_269aaec28d3e769b82922feb9fbb0224 () Term)
(declare-fun FStar.Char.__char_of_int@tok () Term)

; </end encoding let __char_of_int>


; <Skipped #reset-options/>


; End Externals for interface FStar.Char


; Externals for interface FStar.Pprint


; <Start encoding val FStar.Pprint.document>

(declare-fun FStar.Pprint.document () Term)

; </end encoding val FStar.Pprint.document>


; <Start encoding val FStar.Pprint.empty>

(declare-fun FStar.Pprint.empty (Dummy_sort) Term)

; </end encoding val FStar.Pprint.empty>


; <Start encoding val FStar.Pprint.doc_of_char>

(declare-fun FStar.Pprint.doc_of_char (Term) Term)
(declare-fun Tm_arrow_a4acb59fbf005290ad49955f91c28b03 () Term)
(declare-fun FStar.Pprint.doc_of_char@tok () Term)

; </end encoding val FStar.Pprint.doc_of_char>


; <Start encoding val FStar.Pprint.doc_of_string>

(declare-fun FStar.Pprint.doc_of_string (Term) Term)
(declare-fun Tm_arrow_997c5f5d4977b2f7fdf48b0cb622aac1 () Term)
(declare-fun FStar.Pprint.doc_of_string@tok () Term)

; </end encoding val FStar.Pprint.doc_of_string>


; <Start encoding val FStar.Pprint.doc_of_bool>

(declare-fun FStar.Pprint.doc_of_bool (Term) Term)
(declare-fun Tm_arrow_c297ae71bcb61f857565593f192b0ba9 () Term)
(declare-fun FStar.Pprint.doc_of_bool@tok () Term)

; </end encoding val FStar.Pprint.doc_of_bool>


; <Start encoding val FStar.Pprint.substring>

(declare-fun FStar.Pprint.substring (Term Term Term) Term)
(declare-fun Tm_arrow_57d4df6e3bb2ca47134bbb9d1fc71584 () Term)
(declare-fun FStar.Pprint.substring@tok () Term)

; </end encoding val FStar.Pprint.substring>


; <Start encoding val FStar.Pprint.fancystring>

(declare-fun FStar.Pprint.fancystring (Term Term) Term)
(declare-fun Tm_arrow_32174abe6c67513e28543abb3662b06a () Term)
(declare-fun FStar.Pprint.fancystring@tok () Term)

; </end encoding val FStar.Pprint.fancystring>


; <Start encoding val FStar.Pprint.fancysubstring>

(declare-fun FStar.Pprint.fancysubstring (Term Term Term Term) Term)
(declare-fun Tm_arrow_095d1e6b4118e7c85dbeb61c88636be5 () Term)
(declare-fun FStar.Pprint.fancysubstring@tok () Term)

; </end encoding val FStar.Pprint.fancysubstring>


; <Start encoding val FStar.Pprint.utf8string>

(declare-fun FStar.Pprint.utf8string (Term) Term)

(declare-fun FStar.Pprint.utf8string@tok () Term)

; </end encoding val FStar.Pprint.utf8string>


; <Start encoding val FStar.Pprint.hardline>

(declare-fun FStar.Pprint.hardline (Dummy_sort) Term)

; </end encoding val FStar.Pprint.hardline>


; <Start encoding val FStar.Pprint.blank>

(declare-fun FStar.Pprint.blank (Term) Term)
(declare-fun Tm_arrow_75ab32078fe02c79ad1d360245f44dfb () Term)
(declare-fun FStar.Pprint.blank@tok () Term)

; </end encoding val FStar.Pprint.blank>


; <Start encoding val FStar.Pprint.break_>

(declare-fun FStar.Pprint.break_ (Term) Term)

(declare-fun FStar.Pprint.break_@tok () Term)

; </end encoding val FStar.Pprint.break_>


; <Start encoding val FStar.Pprint.op_Hat_Hat>

(declare-fun FStar.Pprint.op_Hat_Hat (Term Term) Term)
(declare-fun Tm_arrow_19abf1e35346678de614defb45741110 () Term)
(declare-fun FStar.Pprint.op_Hat_Hat@tok () Term)

; </end encoding val FStar.Pprint.op_Hat_Hat>


; <Start encoding val FStar.Pprint.op_Hat_Slash_Hat>

(declare-fun FStar.Pprint.op_Hat_Slash_Hat (Term Term) Term)

(declare-fun FStar.Pprint.op_Hat_Slash_Hat@tok () Term)

; </end encoding val FStar.Pprint.op_Hat_Slash_Hat>


; <Start encoding val FStar.Pprint.nest>

(declare-fun FStar.Pprint.nest (Term Term) Term)
(declare-fun Tm_arrow_a087a683fcb5153393871c9b94d28ffc () Term)
(declare-fun FStar.Pprint.nest@tok () Term)

; </end encoding val FStar.Pprint.nest>


; <Start encoding val FStar.Pprint.group>

(declare-fun FStar.Pprint.group (Term) Term)
(declare-fun Tm_arrow_bbc0c5be3085d9d37fef1938353ffda9 () Term)
(declare-fun FStar.Pprint.group@tok () Term)

; </end encoding val FStar.Pprint.group>


; <Start encoding val FStar.Pprint.ifflat>

(declare-fun FStar.Pprint.ifflat (Term Term) Term)

(declare-fun FStar.Pprint.ifflat@tok () Term)

; </end encoding val FStar.Pprint.ifflat>


; <Start encoding val FStar.Pprint.lparen>

(declare-fun FStar.Pprint.lparen (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lparen>


; <Start encoding val FStar.Pprint.rparen>

(declare-fun FStar.Pprint.rparen (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rparen>


; <Start encoding val FStar.Pprint.langle>

(declare-fun FStar.Pprint.langle (Dummy_sort) Term)

; </end encoding val FStar.Pprint.langle>


; <Start encoding val FStar.Pprint.rangle>

(declare-fun FStar.Pprint.rangle (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rangle>


; <Start encoding val FStar.Pprint.lbrace>

(declare-fun FStar.Pprint.lbrace (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lbrace>


; <Start encoding val FStar.Pprint.rbrace>

(declare-fun FStar.Pprint.rbrace (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rbrace>


; <Start encoding val FStar.Pprint.lbracket>

(declare-fun FStar.Pprint.lbracket (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lbracket>


; <Start encoding val FStar.Pprint.rbracket>

(declare-fun FStar.Pprint.rbracket (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rbracket>


; <Start encoding val FStar.Pprint.squote>

(declare-fun FStar.Pprint.squote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.squote>


; <Start encoding val FStar.Pprint.dquote>

(declare-fun FStar.Pprint.dquote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dquote>


; <Start encoding val FStar.Pprint.bquote>

(declare-fun FStar.Pprint.bquote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bquote>


; <Start encoding val FStar.Pprint.semi>

(declare-fun FStar.Pprint.semi (Dummy_sort) Term)

; </end encoding val FStar.Pprint.semi>


; <Start encoding val FStar.Pprint.colon>

(declare-fun FStar.Pprint.colon (Dummy_sort) Term)

; </end encoding val FStar.Pprint.colon>


; <Start encoding val FStar.Pprint.comma>

(declare-fun FStar.Pprint.comma (Dummy_sort) Term)

; </end encoding val FStar.Pprint.comma>


; <Start encoding val FStar.Pprint.space>

(declare-fun FStar.Pprint.space (Dummy_sort) Term)

; </end encoding val FStar.Pprint.space>


; <Start encoding val FStar.Pprint.dot>

(declare-fun FStar.Pprint.dot (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dot>


; <Start encoding val FStar.Pprint.sharp>

(declare-fun FStar.Pprint.sharp (Dummy_sort) Term)

; </end encoding val FStar.Pprint.sharp>


; <Start encoding val FStar.Pprint.slash>

(declare-fun FStar.Pprint.slash (Dummy_sort) Term)

; </end encoding val FStar.Pprint.slash>


; <Start encoding val FStar.Pprint.backslash>

(declare-fun FStar.Pprint.backslash (Dummy_sort) Term)

; </end encoding val FStar.Pprint.backslash>


; <Start encoding val FStar.Pprint.equals>

(declare-fun FStar.Pprint.equals (Dummy_sort) Term)

; </end encoding val FStar.Pprint.equals>


; <Start encoding val FStar.Pprint.qmark>

(declare-fun FStar.Pprint.qmark (Dummy_sort) Term)

; </end encoding val FStar.Pprint.qmark>


; <Start encoding val FStar.Pprint.tilde>

(declare-fun FStar.Pprint.tilde (Dummy_sort) Term)

; </end encoding val FStar.Pprint.tilde>


; <Start encoding val FStar.Pprint.at>

(declare-fun FStar.Pprint.at (Dummy_sort) Term)

; </end encoding val FStar.Pprint.at>


; <Start encoding val FStar.Pprint.percent>

(declare-fun FStar.Pprint.percent (Dummy_sort) Term)

; </end encoding val FStar.Pprint.percent>


; <Start encoding val FStar.Pprint.dollar>

(declare-fun FStar.Pprint.dollar (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dollar>


; <Start encoding val FStar.Pprint.caret>

(declare-fun FStar.Pprint.caret (Dummy_sort) Term)

; </end encoding val FStar.Pprint.caret>


; <Start encoding val FStar.Pprint.ampersand>

(declare-fun FStar.Pprint.ampersand (Dummy_sort) Term)

; </end encoding val FStar.Pprint.ampersand>


; <Start encoding val FStar.Pprint.star>

(declare-fun FStar.Pprint.star (Dummy_sort) Term)

; </end encoding val FStar.Pprint.star>


; <Start encoding val FStar.Pprint.plus>

(declare-fun FStar.Pprint.plus (Dummy_sort) Term)

; </end encoding val FStar.Pprint.plus>


; <Start encoding val FStar.Pprint.minus>

(declare-fun FStar.Pprint.minus (Dummy_sort) Term)

; </end encoding val FStar.Pprint.minus>


; <Start encoding val FStar.Pprint.underscore>

(declare-fun FStar.Pprint.underscore (Dummy_sort) Term)

; </end encoding val FStar.Pprint.underscore>


; <Start encoding val FStar.Pprint.bang>

(declare-fun FStar.Pprint.bang (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bang>


; <Start encoding val FStar.Pprint.bar>

(declare-fun FStar.Pprint.bar (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bar>


; <Start encoding val FStar.Pprint.rarrow>

(declare-fun FStar.Pprint.rarrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rarrow>


; <Start encoding val FStar.Pprint.long_left_arrow>

(declare-fun FStar.Pprint.long_left_arrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.long_left_arrow>


; <Start encoding val FStar.Pprint.larrow>

(declare-fun FStar.Pprint.larrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.larrow>


; <Start encoding val FStar.Pprint.precede>

(declare-fun FStar.Pprint.precede (Term Term) Term)

(declare-fun FStar.Pprint.precede@tok () Term)

; </end encoding val FStar.Pprint.precede>


; <Start encoding val FStar.Pprint.terminate>

(declare-fun FStar.Pprint.terminate (Term Term) Term)

(declare-fun FStar.Pprint.terminate@tok () Term)

; </end encoding val FStar.Pprint.terminate>


; <Start encoding val FStar.Pprint.enclose>

(declare-fun FStar.Pprint.enclose (Term Term Term) Term)
(declare-fun Tm_arrow_f04dd2286d7e3e9f9bc2795066272a5d () Term)
(declare-fun FStar.Pprint.enclose@tok () Term)

; </end encoding val FStar.Pprint.enclose>


; <Start encoding val FStar.Pprint.squotes>

(declare-fun FStar.Pprint.squotes (Term) Term)

(declare-fun FStar.Pprint.squotes@tok () Term)

; </end encoding val FStar.Pprint.squotes>


; <Start encoding val FStar.Pprint.dquotes>

(declare-fun FStar.Pprint.dquotes (Term) Term)

(declare-fun FStar.Pprint.dquotes@tok () Term)

; </end encoding val FStar.Pprint.dquotes>


; <Start encoding val FStar.Pprint.bquotes>

(declare-fun FStar.Pprint.bquotes (Term) Term)

(declare-fun FStar.Pprint.bquotes@tok () Term)

; </end encoding val FStar.Pprint.bquotes>


; <Start encoding val FStar.Pprint.braces>

(declare-fun FStar.Pprint.braces (Term) Term)

(declare-fun FStar.Pprint.braces@tok () Term)

; </end encoding val FStar.Pprint.braces>


; <Start encoding val FStar.Pprint.parens>

(declare-fun FStar.Pprint.parens (Term) Term)

(declare-fun FStar.Pprint.parens@tok () Term)

; </end encoding val FStar.Pprint.parens>


; <Start encoding val FStar.Pprint.angles>

(declare-fun FStar.Pprint.angles (Term) Term)

(declare-fun FStar.Pprint.angles@tok () Term)

; </end encoding val FStar.Pprint.angles>


; <Start encoding val FStar.Pprint.brackets>

(declare-fun FStar.Pprint.brackets (Term) Term)

(declare-fun FStar.Pprint.brackets@tok () Term)

; </end encoding val FStar.Pprint.brackets>


; <Start encoding val FStar.Pprint.twice>

(declare-fun FStar.Pprint.twice (Term) Term)

(declare-fun FStar.Pprint.twice@tok () Term)

; </end encoding val FStar.Pprint.twice>


; <Start encoding val FStar.Pprint.repeat>

(declare-fun FStar.Pprint.repeat (Term Term) Term)

(declare-fun FStar.Pprint.repeat@tok () Term)

; </end encoding val FStar.Pprint.repeat>


; <Start encoding val FStar.Pprint.concat>

(declare-fun FStar.Pprint.concat (Term) Term)
(declare-fun Tm_arrow_0cbe92f45919c1d7e0f9e026093c317f () Term)
(declare-fun FStar.Pprint.concat@tok () Term)

; </end encoding val FStar.Pprint.concat>


; <Start encoding val FStar.Pprint.separate>

(declare-fun FStar.Pprint.separate (Term Term) Term)
(declare-fun Tm_arrow_eb90f8920e90546abfd27f57e97c7422 () Term)
(declare-fun FStar.Pprint.separate@tok () Term)

; </end encoding val FStar.Pprint.separate>


; <Start encoding val FStar.Pprint.concat_map>

(declare-fun Tm_arrow_ba485b08fe7f6ea3427f366967eb61bb (Term) Term)
(declare-fun FStar.Pprint.concat_map (Term Term Term) Term)

(declare-fun Tm_arrow_9027965ae68389afcb8ffd313ed8431e () Term)
(declare-fun FStar.Pprint.concat_map@tok () Term)

; </end encoding val FStar.Pprint.concat_map>


; <Start encoding val FStar.Pprint.separate_map>


(declare-fun FStar.Pprint.separate_map (Term Term Term Term) Term)

(declare-fun Tm_arrow_afa71873ada30b88e86746ba0816c698 () Term)
(declare-fun FStar.Pprint.separate_map@tok () Term)

; </end encoding val FStar.Pprint.separate_map>


; <Start encoding val FStar.Pprint.separate2>

(declare-fun FStar.Pprint.separate2 (Term Term Term) Term)
(declare-fun Tm_arrow_8d6af16eebdcd806abb4f18d1fad7f62 () Term)
(declare-fun FStar.Pprint.separate2@tok () Term)

; </end encoding val FStar.Pprint.separate2>


; <Start encoding val FStar.Pprint.optional>


(declare-fun FStar.Pprint.optional (Term Term Term) Term)

(declare-fun Tm_arrow_f99776764fec33728f01eff9910545c0 () Term)
(declare-fun FStar.Pprint.optional@tok () Term)

; </end encoding val FStar.Pprint.optional>


; <Start encoding val FStar.Pprint.lines>

(declare-fun FStar.Pprint.lines (Term) Term)
(declare-fun Tm_arrow_800f7873155a13cf11bfde311d66b27a () Term)
(declare-fun FStar.Pprint.lines@tok () Term)

; </end encoding val FStar.Pprint.lines>


; <Start encoding val FStar.Pprint.arbitrary_string>

(declare-fun FStar.Pprint.arbitrary_string (Term) Term)

(declare-fun FStar.Pprint.arbitrary_string@tok () Term)

; </end encoding val FStar.Pprint.arbitrary_string>


; <Start encoding val FStar.Pprint.words>

(declare-fun FStar.Pprint.words (Term) Term)

(declare-fun FStar.Pprint.words@tok () Term)

; </end encoding val FStar.Pprint.words>


; <Start encoding val FStar.Pprint.split>

(declare-fun Tm_arrow_fc1554671c39653ed371206100dcafd3 () Term)
(declare-fun FStar.Pprint.split (Term Term) Term)

(declare-fun Tm_arrow_89c390c93eb8654101fd8617085f3c1d () Term)
(declare-fun FStar.Pprint.split@tok () Term)

; </end encoding val FStar.Pprint.split>


; <Start encoding val FStar.Pprint.flow>

(declare-fun FStar.Pprint.flow (Term Term) Term)

(declare-fun FStar.Pprint.flow@tok () Term)

; </end encoding val FStar.Pprint.flow>


; <Start encoding val FStar.Pprint.flow_map>


(declare-fun FStar.Pprint.flow_map (Term Term Term Term) Term)


(declare-fun FStar.Pprint.flow_map@tok () Term)

; </end encoding val FStar.Pprint.flow_map>


; <Start encoding val FStar.Pprint.url>

(declare-fun FStar.Pprint.url (Term) Term)

(declare-fun FStar.Pprint.url@tok () Term)

; </end encoding val FStar.Pprint.url>


; <Start encoding val FStar.Pprint.align>

(declare-fun FStar.Pprint.align (Term) Term)

(declare-fun FStar.Pprint.align@tok () Term)

; </end encoding val FStar.Pprint.align>


; <Start encoding val FStar.Pprint.hang>

(declare-fun FStar.Pprint.hang (Term Term) Term)

(declare-fun FStar.Pprint.hang@tok () Term)

; </end encoding val FStar.Pprint.hang>


; <Start encoding val FStar.Pprint.prefix>

(declare-fun FStar.Pprint.prefix (Term Term Term Term) Term)
(declare-fun Tm_arrow_8515fd4d138effa981387c8407102abb () Term)
(declare-fun FStar.Pprint.prefix@tok () Term)

; </end encoding val FStar.Pprint.prefix>


; <Start encoding val FStar.Pprint.jump>

(declare-fun FStar.Pprint.jump (Term Term Term) Term)
(declare-fun Tm_arrow_e0d9f0929460140427c016e9e80b19b9 () Term)
(declare-fun FStar.Pprint.jump@tok () Term)

; </end encoding val FStar.Pprint.jump>


; <Start encoding val FStar.Pprint.infix>

(declare-fun FStar.Pprint.infix (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b075afedf9e7cab5a543fb6eb3bed20f () Term)
(declare-fun FStar.Pprint.infix@tok () Term)

; </end encoding val FStar.Pprint.infix>


; <Start encoding val FStar.Pprint.surround>

(declare-fun FStar.Pprint.surround (Term Term Term Term Term) Term)

(declare-fun FStar.Pprint.surround@tok () Term)

; </end encoding val FStar.Pprint.surround>


; <Start encoding val FStar.Pprint.soft_surround>

(declare-fun FStar.Pprint.soft_surround (Term Term Term Term Term) Term)

(declare-fun FStar.Pprint.soft_surround@tok () Term)

; </end encoding val FStar.Pprint.soft_surround>


; <Start encoding val FStar.Pprint.surround_separate>

(declare-fun FStar.Pprint.surround_separate (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5438415d36bec335d2df2e0f427a0374 () Term)
(declare-fun FStar.Pprint.surround_separate@tok () Term)

; </end encoding val FStar.Pprint.surround_separate>


; <Start encoding val FStar.Pprint.surround_separate_map>


(declare-fun FStar.Pprint.surround_separate_map (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_424c593564ee6d82472d4c43a6d0feee () Term)
(declare-fun FStar.Pprint.surround_separate_map@tok () Term)

; </end encoding val FStar.Pprint.surround_separate_map>


; <Start encoding val FStar.Pprint.pretty_string>

(declare-fun FStar.Pprint.pretty_string (Term Term Term) Term)
(declare-fun Tm_arrow_eaf070b7b90e17b9d3a7caa0761705b8 () Term)
(declare-fun FStar.Pprint.pretty_string@tok () Term)

; </end encoding val FStar.Pprint.pretty_string>


; <Start encoding val FStar.Pprint.render>

(declare-fun FStar.Pprint.render (Term) Term)
(declare-fun Tm_arrow_672e94f64f75b66d98089d9b8a8bdd46 () Term)
(declare-fun FStar.Pprint.render@tok () Term)

; </end encoding val FStar.Pprint.render>


; End Externals for interface FStar.Pprint


; Externals for interface FStar.Issue


; <Start encoding val FStar.Issue.issue>

(declare-fun FStar.Issue.issue () Term)

; </end encoding val FStar.Issue.issue>


; <Start encoding let issue_level_string>

(declare-fun FStar.Issue.issue_level_string () Term)
(declare-fun Tm_refine_aa8eedc0ecb86da30f7a24511f57030f () Term)

; </end encoding let issue_level_string>


; <Start encoding val FStar.Issue.message_of_issue>

(declare-fun FStar.Issue.message_of_issue (Term) Term)
(declare-fun Tm_arrow_93ee704a450339197db22b6850c14119 () Term)
(declare-fun FStar.Issue.message_of_issue@tok () Term)

; </end encoding val FStar.Issue.message_of_issue>


; <Start encoding val FStar.Issue.level_of_issue>

(declare-fun FStar.Issue.level_of_issue (Term) Term)
(declare-fun Tm_arrow_baa5bfeaffb7436a922fcee810b3f6e5 () Term)
(declare-fun FStar.Issue.level_of_issue@tok () Term)

; </end encoding val FStar.Issue.level_of_issue>


; <Start encoding val FStar.Issue.number_of_issue>

(declare-fun FStar.Issue.number_of_issue (Term) Term)
(declare-fun Tm_arrow_78394d1c43ffc2ecdd350b139696c115 () Term)
(declare-fun FStar.Issue.number_of_issue@tok () Term)

; </end encoding val FStar.Issue.number_of_issue>


; <Start encoding val FStar.Issue.range_of_issue>

(declare-fun FStar.Issue.range_of_issue (Term) Term)
(declare-fun Tm_arrow_72e8882c08b4ea92dd32d41519ff957b () Term)
(declare-fun FStar.Issue.range_of_issue@tok () Term)

; </end encoding val FStar.Issue.range_of_issue>


; <Start encoding val FStar.Issue.context_of_issue>

(declare-fun FStar.Issue.context_of_issue (Term) Term)
(declare-fun Tm_arrow_546b620b9af82be043f5b40b81574a85 () Term)
(declare-fun FStar.Issue.context_of_issue@tok () Term)

; </end encoding val FStar.Issue.context_of_issue>


; <Start encoding val FStar.Issue.render_issue>

(declare-fun FStar.Issue.render_issue (Term) Term)
(declare-fun Tm_arrow_ac5151aeda0379e1d6b8d444cd3f0526 () Term)
(declare-fun FStar.Issue.render_issue@tok () Term)

; </end encoding val FStar.Issue.render_issue>


; <Start encoding val FStar.Issue.mk_issue_doc>

(declare-fun FStar.Issue.mk_issue_doc (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4a4df377687a551395a6d537c2452cc1 () Term)
(declare-fun FStar.Issue.mk_issue_doc@tok () Term)

; </end encoding val FStar.Issue.mk_issue_doc>


; <Start encoding let mk_issue>

(declare-fun FStar.Issue.mk_issue (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a1628df8c9319e78aab0e01f400423ed () Term)
(declare-fun FStar.Issue.mk_issue@tok () Term)

; </end encoding let mk_issue>


; End Externals for interface FStar.Issue


; Externals for interface FStar.Stubs.TypeChecker.Core


; <Start encoding type FStar.Stubs.TypeChecker.Core.tot_or_ghost>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.tot_or_ghost () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.E_Total () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.E_Total
(declare-fun FStar.Stubs.TypeChecker.Core.E_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.E_Ghost () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.E_Ghost
(declare-fun FStar.Stubs.TypeChecker.Core.E_Ghost@tok () Term)

; <start constructor FStar.Stubs.TypeChecker.Core.tot_or_ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.tot_or_ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.TypeChecker.Core.tot_or_ghost)))

; </end constructor FStar.Stubs.TypeChecker.Core.tot_or_ghost>


; <start constructor FStar.Stubs.TypeChecker.Core.E_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.E_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
FStar.Stubs.TypeChecker.Core.E_Total)))

; </end constructor FStar.Stubs.TypeChecker.Core.E_Total>


; <start constructor FStar.Stubs.TypeChecker.Core.E_Ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.E_Ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Stubs.TypeChecker.Core.E_Ghost)))

; </end constructor FStar.Stubs.TypeChecker.Core.E_Ghost>


; </end encoding type FStar.Stubs.TypeChecker.Core.tot_or_ghost>


; <Start encoding assume FStar.Stubs.TypeChecker.Core.tot_or_ghost__uu___haseq>


; </end encoding assume FStar.Stubs.TypeChecker.Core.tot_or_ghost__uu___haseq>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Total>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Total (Term) Term)
(declare-fun Tm_arrow_28feb685f85e27d6180cee53571913aa () Term)
(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Total@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Total>


; <Skipped let uu___is_E_Total/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost>


; <Skipped let uu___is_E_Ghost/>


; <Start encoding type FStar.Stubs.TypeChecker.Core.unfold_side>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.unfold_side () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Left () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Left
(declare-fun FStar.Stubs.TypeChecker.Core.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Right () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Right
(declare-fun FStar.Stubs.TypeChecker.Core.Right@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Both () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Both
(declare-fun FStar.Stubs.TypeChecker.Core.Both@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Neither () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Neither
(declare-fun FStar.Stubs.TypeChecker.Core.Neither@tok () Term)

; <start constructor FStar.Stubs.TypeChecker.Core.unfold_side>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.unfold_side ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
FStar.Stubs.TypeChecker.Core.unfold_side)))

; </end constructor FStar.Stubs.TypeChecker.Core.unfold_side>


; <start constructor FStar.Stubs.TypeChecker.Core.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
FStar.Stubs.TypeChecker.Core.Left)))

; </end constructor FStar.Stubs.TypeChecker.Core.Left>


; <start constructor FStar.Stubs.TypeChecker.Core.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
FStar.Stubs.TypeChecker.Core.Right)))

; </end constructor FStar.Stubs.TypeChecker.Core.Right>


; <start constructor FStar.Stubs.TypeChecker.Core.Both>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Both ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
124)
(= __@x0
FStar.Stubs.TypeChecker.Core.Both)))

; </end constructor FStar.Stubs.TypeChecker.Core.Both>


; <start constructor FStar.Stubs.TypeChecker.Core.Neither>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Neither ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
126)
(= __@x0
FStar.Stubs.TypeChecker.Core.Neither)))

; </end constructor FStar.Stubs.TypeChecker.Core.Neither>


; </end encoding type FStar.Stubs.TypeChecker.Core.unfold_side>


; <Start encoding assume FStar.Stubs.TypeChecker.Core.unfold_side__uu___haseq>


; </end encoding assume FStar.Stubs.TypeChecker.Core.unfold_side__uu___haseq>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Left>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Left (Term) Term)
(declare-fun Tm_arrow_8ad3479bac3300a48f898c294856a452 () Term)
(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Left@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Left>


; <Skipped let uu___is_Left/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Right>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Right (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Right@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Right>


; <Skipped let uu___is_Right/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Both>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Both (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Both@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Both>


; <Skipped let uu___is_Both/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Neither>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Neither (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Neither@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Neither>


; <Skipped let uu___is_Neither/>


; End Externals for interface FStar.Stubs.TypeChecker.Core


; Externals for interface FStar.Stubs.Errors.Msg


; <Start encoding let error_message>

(declare-fun FStar.Stubs.Errors.Msg.error_message () Term)

; </end encoding let error_message>


; <Start encoding val FStar.Stubs.Errors.Msg.text>

(declare-fun FStar.Stubs.Errors.Msg.text (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.text@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.text>


; <Start encoding val FStar.Stubs.Errors.Msg.sublist>

(declare-fun FStar.Stubs.Errors.Msg.sublist (Term Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.sublist@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.sublist>


; <Start encoding val FStar.Stubs.Errors.Msg.bulleted>

(declare-fun FStar.Stubs.Errors.Msg.bulleted (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.bulleted@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.bulleted>


; <Start encoding val FStar.Stubs.Errors.Msg.mkmsg>

(declare-fun FStar.Stubs.Errors.Msg.mkmsg (Term) Term)
(declare-fun Tm_arrow_742ceb0b6d43128379fa1800142a023c () Term)
(declare-fun FStar.Stubs.Errors.Msg.mkmsg@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.mkmsg>


; <Start encoding val FStar.Stubs.Errors.Msg.subdoc>

(declare-fun FStar.Stubs.Errors.Msg.subdoc (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.subdoc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.subdoc>


; <Start encoding val FStar.Stubs.Errors.Msg.renderdoc>

(declare-fun FStar.Stubs.Errors.Msg.renderdoc (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.renderdoc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.renderdoc>


; <Start encoding val FStar.Stubs.Errors.Msg.backtrace_doc>

(declare-fun FStar.Stubs.Errors.Msg.backtrace_doc (Term) Term)
(declare-fun Tm_arrow_4b1e31e13fd2dbfa31c2cce1a0d2083d () Term)
(declare-fun FStar.Stubs.Errors.Msg.backtrace_doc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.backtrace_doc>


; <Start encoding val FStar.Stubs.Errors.Msg.rendermsg>

(declare-fun FStar.Stubs.Errors.Msg.rendermsg (Term) Term)
(declare-fun Tm_arrow_0f8aa7390110b002d33168ab1d29eb5e () Term)
(declare-fun FStar.Stubs.Errors.Msg.rendermsg@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.rendermsg>


; End Externals for interface FStar.Stubs.Errors.Msg


; Externals for interface FStar.Stubs.Tactics.Common


; <Start encoding datacon FStar.Stubs.Tactics.Common.NotAListLiteral for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.NotAListLiteral
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral@tok () Term)

; <start constructor FStar.Stubs.Tactics.Common.NotAListLiteral>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.NotAListLiteral ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
102)
(= __@x0
FStar.Stubs.Tactics.Common.NotAListLiteral)))

; </end constructor FStar.Stubs.Tactics.Common.NotAListLiteral>


; </end encoding datacon FStar.Stubs.Tactics.Common.NotAListLiteral for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral (Term) Term)
(declare-fun Tm_arrow_81ab3356926b82578fcb92e97b412345 () Term)
(declare-fun FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral>


; <Skipped let uu___is_NotAListLiteral/>


; <Start encoding datacon FStar.Stubs.Tactics.Common.TacticFailure for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure_uu___ (Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure@base (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.TacticFailure
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure@tok () Term)
(declare-fun Tm_arrow_10aa3b654b3fa877084793298bd2c1fc () Term)

; <start constructor FStar.Stubs.Tactics.Common.TacticFailure>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.TacticFailure ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
106)
(= __@x0
(FStar.Stubs.Tactics.Common.TacticFailure (FStar.Stubs.Tactics.Common.TacticFailure_uu___ __@x0)))))

; </end constructor FStar.Stubs.Tactics.Common.TacticFailure>


; </end encoding datacon FStar.Stubs.Tactics.Common.TacticFailure for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_TacticFailure>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_TacticFailure (Term) Term)

(declare-fun FStar.Stubs.Tactics.Common.uu___is_TacticFailure@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_TacticFailure>


; <Skipped let uu___is_TacticFailure/>


; <Start encoding val FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___>

(declare-fun Tm_refine_30f8904aa237d24acf9aace65cbaa40d () Term)
(declare-fun FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___ (Term) Term)

(declare-fun Tm_arrow_7eb6bd8f5fc49d52c2c9c8f2dd3c567a () Term)
(declare-fun FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___>


; <Skipped let __proj__TacticFailure__item__uu___/>


; <Start encoding datacon FStar.Stubs.Tactics.Common.SKIP for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.SKIP () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.SKIP@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.SKIP
(declare-fun FStar.Stubs.Tactics.Common.SKIP@tok () Term)

; <start constructor FStar.Stubs.Tactics.Common.SKIP>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.SKIP ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
FStar.Stubs.Tactics.Common.SKIP)))

; </end constructor FStar.Stubs.Tactics.Common.SKIP>


; </end encoding datacon FStar.Stubs.Tactics.Common.SKIP for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_SKIP>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_SKIP (Term) Term)

(declare-fun FStar.Stubs.Tactics.Common.uu___is_SKIP@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_SKIP>


; <Skipped let uu___is_SKIP/>


; End Externals for interface FStar.Stubs.Tactics.Common


; Externals for interface FStar.Stubs.Tactics.Types


; <Start encoding val FStar.Stubs.Tactics.Types.goal>

(declare-fun FStar.Stubs.Tactics.Types.goal () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal>


; <Start encoding val FStar.Stubs.Tactics.Types.proofstate>

(declare-fun FStar.Stubs.Tactics.Types.proofstate () Term)

; </end encoding val FStar.Stubs.Tactics.Types.proofstate>


; <Start encoding val FStar.Stubs.Tactics.Types.goals_of>

(declare-fun FStar.Stubs.Tactics.Types.goals_of (Term) Term)
(declare-fun Tm_arrow_fdfe159a02c2f6afefc6bf5885e11604 () Term)
(declare-fun FStar.Stubs.Tactics.Types.goals_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goals_of>


; <Start encoding val FStar.Stubs.Tactics.Types.smt_goals_of>

(declare-fun FStar.Stubs.Tactics.Types.smt_goals_of (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.smt_goals_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.smt_goals_of>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_env>

(declare-fun FStar.Stubs.Tactics.Types.goal_env (Term) Term)
(declare-fun Tm_arrow_31141c9dd83193809f05a8c783c41d68 () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_env>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_type>

(declare-fun FStar.Stubs.Tactics.Types.goal_type (Term) Term)
(declare-fun Tm_arrow_09c0f5bd92f653a857ae8e8f78bcd3dc () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_type>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_witness>

(declare-fun FStar.Stubs.Tactics.Types.goal_witness (Term) Term)
(declare-fun Tm_arrow_6cd27210e27c05ff825968bc6bf2188a () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_witness@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_witness>


; <Start encoding val FStar.Stubs.Tactics.Types.is_guard>

(declare-fun FStar.Stubs.Tactics.Types.is_guard (Term) Term)
(declare-fun Tm_arrow_b9f4ed4f47608d8a57b28b62e7620cd6 () Term)
(declare-fun FStar.Stubs.Tactics.Types.is_guard@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.is_guard>


; <Start encoding val FStar.Stubs.Tactics.Types.get_label>

(declare-fun FStar.Stubs.Tactics.Types.get_label (Term) Term)
(declare-fun Tm_arrow_6f90bcff42642c2f6126e1856dbbb24e () Term)
(declare-fun FStar.Stubs.Tactics.Types.get_label@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.get_label>


; <Start encoding val FStar.Stubs.Tactics.Types.set_label>

(declare-fun FStar.Stubs.Tactics.Types.set_label (Term Term) Term)
(declare-fun Tm_arrow_8bcd15f0cfa61565564f083268fce719 () Term)
(declare-fun FStar.Stubs.Tactics.Types.set_label@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.set_label>


; <Start encoding val FStar.Stubs.Tactics.Types.incr_depth>

(declare-fun FStar.Stubs.Tactics.Types.incr_depth (Term) Term)
(declare-fun Tm_arrow_4baa9e22a8426ddb7c829d77e2a29c7f () Term)
(declare-fun FStar.Stubs.Tactics.Types.incr_depth@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.incr_depth>


; <Start encoding val FStar.Stubs.Tactics.Types.decr_depth>

(declare-fun FStar.Stubs.Tactics.Types.decr_depth (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.decr_depth@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.decr_depth>


; <Start encoding val FStar.Stubs.Tactics.Types.tracepoint>

(declare-fun FStar.Stubs.Tactics.Types.tracepoint (Term) Term)
(declare-fun Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f () Term)
(declare-fun Tm_arrow_c0fb9ba582b3414d839b2e294db9292c () Term)
(declare-fun FStar.Stubs.Tactics.Types.tracepoint@tok () Term)


; </end encoding val FStar.Stubs.Tactics.Types.tracepoint>


; <Start encoding val FStar.Stubs.Tactics.Types.set_proofstate_range>

(declare-fun FStar.Stubs.Tactics.Types.set_proofstate_range (Term Term) Term)
(declare-fun Tm_arrow_37afb34f073ac2915b6c2d174d9265a7 () Term)
(declare-fun FStar.Stubs.Tactics.Types.set_proofstate_range@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.set_proofstate_range>


; <Start encoding type FStar.Stubs.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.direction () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.TopDown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.TopDown
(declare-fun FStar.Stubs.Tactics.Types.TopDown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.BottomUp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.BottomUp
(declare-fun FStar.Stubs.Tactics.Types.BottomUp@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.direction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
133)
(= __@x0
FStar.Stubs.Tactics.Types.direction)))

; </end constructor FStar.Stubs.Tactics.Types.direction>


; <start constructor FStar.Stubs.Tactics.Types.TopDown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.TopDown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
139)
(= __@x0
FStar.Stubs.Tactics.Types.TopDown)))

; </end constructor FStar.Stubs.Tactics.Types.TopDown>


; <start constructor FStar.Stubs.Tactics.Types.BottomUp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.BottomUp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
FStar.Stubs.Tactics.Types.BottomUp)))

; </end constructor FStar.Stubs.Tactics.Types.BottomUp>


; </end encoding type FStar.Stubs.Tactics.Types.direction>


; <Start encoding assume FStar.Stubs.Tactics.Types.direction__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.direction__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_TopDown>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_TopDown (Term) Term)
(declare-fun Tm_arrow_9035aafb0268cd6540e6eeb00e64f81e () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_TopDown@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_TopDown>


; <Skipped let uu___is_TopDown/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_BottomUp>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_BottomUp (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_BottomUp@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_BottomUp>


; <Skipped let uu___is_BottomUp/>


; <Start encoding type FStar.Stubs.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.ctrl_flag () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Continue () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Continue
(declare-fun FStar.Stubs.Tactics.Types.Continue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Skip () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Skip
(declare-fun FStar.Stubs.Tactics.Types.Skip@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Abort () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Abort
(declare-fun FStar.Stubs.Tactics.Types.Abort@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.ctrl_flag ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(= __@x0
FStar.Stubs.Tactics.Types.ctrl_flag)))

; </end constructor FStar.Stubs.Tactics.Types.ctrl_flag>


; <start constructor FStar.Stubs.Tactics.Types.Continue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Continue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
FStar.Stubs.Tactics.Types.Continue)))

; </end constructor FStar.Stubs.Tactics.Types.Continue>


; <start constructor FStar.Stubs.Tactics.Types.Skip>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Skip ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(= __@x0
FStar.Stubs.Tactics.Types.Skip)))

; </end constructor FStar.Stubs.Tactics.Types.Skip>


; <start constructor FStar.Stubs.Tactics.Types.Abort>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Abort ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
156)
(= __@x0
FStar.Stubs.Tactics.Types.Abort)))

; </end constructor FStar.Stubs.Tactics.Types.Abort>


; </end encoding type FStar.Stubs.Tactics.Types.ctrl_flag>


; <Start encoding assume FStar.Stubs.Tactics.Types.ctrl_flag__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.ctrl_flag__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Continue>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Continue (Term) Term)
(declare-fun Tm_arrow_e3dfe006e0bb26f56aa3f73f9ed8eb62 () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_Continue@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Continue>


; <Skipped let uu___is_Continue/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Skip>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Skip (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Skip@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Skip>


; <Skipped let uu___is_Skip/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Abort>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Abort (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Abort@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Abort>


; <Skipped let uu___is_Abort/>


; <Start encoding type FStar.Stubs.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.guard_policy () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Goal () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Goal
(declare-fun FStar.Stubs.Tactics.Types.Goal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.SMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.SMT
(declare-fun FStar.Stubs.Tactics.Types.SMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.SMTSync () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.SMTSync
(declare-fun FStar.Stubs.Tactics.Types.SMTSync@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Force () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Force
(declare-fun FStar.Stubs.Tactics.Types.Force@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.ForceSMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.ForceSMT
(declare-fun FStar.Stubs.Tactics.Types.ForceSMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Drop () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Drop
(declare-fun FStar.Stubs.Tactics.Types.Drop@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.guard_policy ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
163)
(= __@x0
FStar.Stubs.Tactics.Types.guard_policy)))

; </end constructor FStar.Stubs.Tactics.Types.guard_policy>


; <start constructor FStar.Stubs.Tactics.Types.Goal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Goal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(= __@x0
FStar.Stubs.Tactics.Types.Goal)))

; </end constructor FStar.Stubs.Tactics.Types.Goal>


; <start constructor FStar.Stubs.Tactics.Types.SMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.SMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
171)
(= __@x0
FStar.Stubs.Tactics.Types.SMT)))

; </end constructor FStar.Stubs.Tactics.Types.SMT>


; <start constructor FStar.Stubs.Tactics.Types.SMTSync>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.SMTSync ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
173)
(= __@x0
FStar.Stubs.Tactics.Types.SMTSync)))

; </end constructor FStar.Stubs.Tactics.Types.SMTSync>


; <start constructor FStar.Stubs.Tactics.Types.Force>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Force ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
175)
(= __@x0
FStar.Stubs.Tactics.Types.Force)))

; </end constructor FStar.Stubs.Tactics.Types.Force>


; <start constructor FStar.Stubs.Tactics.Types.ForceSMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.ForceSMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
177)
(= __@x0
FStar.Stubs.Tactics.Types.ForceSMT)))

; </end constructor FStar.Stubs.Tactics.Types.ForceSMT>


; <start constructor FStar.Stubs.Tactics.Types.Drop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Drop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
FStar.Stubs.Tactics.Types.Drop)))

; </end constructor FStar.Stubs.Tactics.Types.Drop>


; </end encoding type FStar.Stubs.Tactics.Types.guard_policy>


; <Start encoding assume FStar.Stubs.Tactics.Types.guard_policy__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.guard_policy__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Goal>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Goal (Term) Term)
(declare-fun Tm_arrow_6ed889b98ff192e7f7ad79278b84f018 () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_Goal@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Goal>


; <Skipped let uu___is_Goal/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_SMT>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMT (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMT@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_SMT>


; <Skipped let uu___is_SMT/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_SMTSync>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMTSync (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMTSync@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_SMTSync>


; <Skipped let uu___is_SMTSync/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Force>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Force (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Force@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Force>


; <Skipped let uu___is_Force/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_ForceSMT>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_ForceSMT (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_ForceSMT@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_ForceSMT>


; <Skipped let uu___is_ForceSMT/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Drop>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Drop (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Drop@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Drop>


; <Skipped let uu___is_Drop/>


; <Start encoding val FStar.Stubs.Tactics.Types.non_informative_token>

(declare-fun FStar.Stubs.Tactics.Types.non_informative_token (Term Term) Term)
(declare-fun Tm_arrow_db2142966eaa849f2844e5e64560e291 () Term)
(declare-fun FStar.Stubs.Tactics.Types.non_informative_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.non_informative_token>


; <Start encoding val FStar.Stubs.Tactics.Types.subtyping_token>

(declare-fun FStar.Stubs.Tactics.Types.subtyping_token (Term Term Term) Term)
(declare-fun Tm_arrow_39f91d5aec75d4006e489b79c2d6c16c () Term)
(declare-fun FStar.Stubs.Tactics.Types.subtyping_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.subtyping_token>


; <Start encoding val FStar.Stubs.Tactics.Types.equiv_token>

(declare-fun FStar.Stubs.Tactics.Types.equiv_token (Term Term Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.equiv_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.equiv_token>


; <Start encoding val FStar.Stubs.Tactics.Types.typing_token>

(declare-fun FStar.Stubs.Tactics.Types.typing_token (Term Term Term) Term)
(declare-fun Tm_arrow_b82abfd864fd916809031a4e19332165 () Term)
(declare-fun FStar.Stubs.Tactics.Types.typing_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.typing_token>


; <Start encoding let issues>

(declare-fun FStar.Stubs.Tactics.Types.issues () Term)

; </end encoding let issues>


; <Start encoding val FStar.Stubs.Tactics.Types.tref>

(declare-fun FStar.Stubs.Tactics.Types.tref (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.tref@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.tref>


; End Externals for interface FStar.Stubs.Tactics.Types


; Externals for interface FStar.Stubs.Tactics.Result


; <Start encoding type FStar.Stubs.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.__result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Stubs.Tactics.Result.__result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.Success (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Result.Success
(declare-fun FStar.Stubs.Tactics.Result.Success@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.Failed (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_exn (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Result.Failed
(declare-fun FStar.Stubs.Tactics.Result.Failed@tok () Term)
(declare-fun Tm_arrow_b4f72aad67a83b7651f6cbeabda293bd () Term)
(declare-fun Tm_arrow_ed23e62103a6322a76c850acc838838e () Term)

; <start constructor FStar.Stubs.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.__result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Stubs.Tactics.Result.__result @x0))
 
;;no pats
:qid is-FStar.Stubs.Tactics.Result.__result))))

; </end constructor FStar.Stubs.Tactics.Result.__result>


; <start constructor FStar.Stubs.Tactics.Result.Success>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.Success ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Stubs.Tactics.Result.Success (FStar.Stubs.Tactics.Result.Success_a __@x0)
(FStar.Stubs.Tactics.Result.Success_v __@x0)
(FStar.Stubs.Tactics.Result.Success_ps __@x0)))))

; </end constructor FStar.Stubs.Tactics.Result.Success>


; <start constructor FStar.Stubs.Tactics.Result.Failed>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.Failed ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Stubs.Tactics.Result.Failed (FStar.Stubs.Tactics.Result.Failed_a __@x0)
(FStar.Stubs.Tactics.Result.Failed_exn __@x0)
(FStar.Stubs.Tactics.Result.Failed_ps __@x0)))))

; </end constructor FStar.Stubs.Tactics.Result.Failed>


; </end encoding type FStar.Stubs.Tactics.Result.__result>


; <Start encoding val FStar.Stubs.Tactics.Result.uu___is_Success>

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Success (Term Term) Term)
(declare-fun Tm_arrow_6645d4122074ac8044bb1b5f135eaee8 () Term)
(declare-fun FStar.Stubs.Tactics.Result.uu___is_Success@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.uu___is_Success>


; <Skipped let uu___is_Success/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__v>

(declare-fun Tm_refine_b4c1e6949a3a57698645ab5be039dc6f (Term) Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__v (Term Term) Term)

(declare-fun Tm_arrow_a778adeae3b2f20803ce4aae6d3d3c6d () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__v@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__v>


; <Skipped let __proj__Success__item__v/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__ps>


(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__ps (Term Term) Term)

(declare-fun Tm_arrow_a7938cd808916b4560d42e6706c15631 () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__ps@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__ps>


; <Skipped let __proj__Success__item__ps/>


; <Start encoding val FStar.Stubs.Tactics.Result.uu___is_Failed>

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Failed (Term Term) Term)

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Failed@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.uu___is_Failed>


; <Skipped let uu___is_Failed/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__exn>

(declare-fun Tm_refine_3e8cae0c9d54f7b2657be55ddd0643d7 (Term) Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__exn (Term Term) Term)

(declare-fun Tm_arrow_343463ac2c43a023370797ff20c81cf5 () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__exn@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__exn>


; <Skipped let __proj__Failed__item__exn/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__ps>


(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__ps (Term Term) Term)

(declare-fun Tm_arrow_2747a76e1f36cdc1944263efc5937cdb () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__ps@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__ps>


; <Skipped let __proj__Failed__item__ps/>


; End Externals for interface FStar.Stubs.Tactics.Result


; Externals for module FStar.Monotonic.Pure


; <Start encoding let is_monotonic>

(declare-fun FStar.Monotonic.Pure.is_monotonic (Term Term) Term)

(declare-fun FStar.Monotonic.Pure.is_monotonic@tok () Term)

; </end encoding let is_monotonic>


; <Start encoding let elim_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity@tok () Term)

; </end encoding let elim_pure_wp_monotonicity>


; <Start encoding let elim_pure_wp_monotonicity_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall@tok () Term)

; </end encoding let elim_pure_wp_monotonicity_forall>


; <Start encoding let intro_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity@tok () Term)

; </end encoding let intro_pure_wp_monotonicity>


; <Start encoding let as_pure_wp>

(declare-fun FStar.Monotonic.Pure.as_pure_wp (Term Term) Term)
(declare-fun Tm_refine_5578b11cc349512589a3d2a8bfe37c29 (Term Term) Term)
(declare-fun Tm_arrow_169997680175178f95069b947929b45b () Term)
(declare-fun FStar.Monotonic.Pure.as_pure_wp@tok () Term)


; </end encoding let as_pure_wp>


; <Start encoding let elim_pure>



(declare-fun Tm_arrow_61bb9550f39772f18eaab129c43c3788 (Term) Term)
(declare-fun Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 (Term Term) Term)
(declare-fun Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 (Term Term) Term)



(declare-fun Tm_abs_735bfa0400a12573ed48312f042e45e7 (Term) Term)
(declare-fun Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd (Term Term) Term)
(declare-fun FStar.Monotonic.Pure.elim_pure (Term Term Term Term) Term)











(declare-fun Tm_arrow_08f6df717f4cfecbf9659e86cd16d49b () Term)
(declare-fun FStar.Monotonic.Pure.elim_pure@tok () Term)












; </end encoding let elim_pure>


; End Externals for module FStar.Monotonic.Pure


; Externals for interface FStar.Tactics.Effect


; <Start encoding let tac_wp_t0>

(declare-fun FStar.Tactics.Effect.tac_wp_t0 (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t0@tok () Term)
(declare-fun Tm_arrow_79c32bf125dc2af78993da96357547a4 (Term) Term)
(declare-fun Tm_arrow_6b294f3db0bcad9bb190c1392ab01385 (Term) Term)

; </end encoding let tac_wp_t0>


; <Start encoding let tac_wp_monotonic>

(declare-fun FStar.Tactics.Effect.tac_wp_monotonic (Term Term) Term)
(declare-fun Tm_arrow_586e511512340cebc0763f51dd24e52e () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_monotonic@tok () Term)



; </end encoding let tac_wp_monotonic>


; <Start encoding let tac_wp_t>

(declare-fun FStar.Tactics.Effect.tac_wp_t (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t@tok () Term)


(declare-fun Tm_refine_afae78805025dbab8b8be62e7a11c687 (Term) Term)

; </end encoding let tac_wp_t>


; <Start encoding let tac_repr>

(declare-fun FStar.Tactics.Effect.tac_repr (Term Term) Term)
(declare-fun Tm_arrow_3f33249eca490ba8c990fff289934593 () Term)
(declare-fun FStar.Tactics.Effect.tac_repr@tok () Term)
(declare-fun Non_total_Tm_arrow_ef31cf121fb3836b1822f35578f3a2c7 (Term Term) Term)

; </end encoding let tac_repr>


; <Start encoding let tac_return_wp>

(declare-fun FStar.Tactics.Effect.tac_return_wp (Term Term) Term)
(declare-fun Tm_arrow_d45e4c1a61d444b0cb436be42fdd8fff () Term)
(declare-fun FStar.Tactics.Effect.tac_return_wp@tok () Term)



(declare-fun Tm_abs_62c5eb272101ce5d3f5f190695a8c978 (Term Term) Term)

; </end encoding let tac_return_wp>


; <Start encoding let tac_return>

(declare-fun FStar.Tactics.Effect.tac_return (Term Term) Term)




(declare-fun Tm_arrow_57311ad25591b2a0d4e7a881591571c4 () Term)
(declare-fun FStar.Tactics.Effect.tac_return@tok () Term)




;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_144 (Term Term) Term)

; </end encoding let tac_return>


; <Start encoding let tac_bind_wp>

(declare-fun Tm_arrow_615c284bf702a1fbef85424e39380642 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_8fd6de47bf2be2d2417a26df2df3e1fa () Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp@tok () Term)



(declare-fun Tm_abs_79f810e0804f4454fdd99bc6bd3319e9 (Term Term Term Term) Term)


(declare-fun Tm_abs_18350866457823edafacef426e439b94 (Term Term Term Term) Term)

; </end encoding let tac_bind_wp>


; <Start encoding let tac_wp_compact>

(declare-fun FStar.Tactics.Effect.tac_wp_compact (Term Term) Term)
(declare-fun Tm_arrow_d630ba03ac64e20998a0b33887db7f1d () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_compact@tok () Term)
(declare-fun Tm_arrow_1a36c778c34fcf235893cf9fa8e22d86 (Term) Term)



(declare-fun Tm_abs_0ba06e1220483cb697e09fd9eb53fda1 (Term Term Term) Term)

(declare-fun Tm_arrow_03e2759b21e31a5318d40a743e5bbb54 (Term) Term)
(declare-fun Tm_abs_817a13da54c634f81e0b2bf0c6db2fd9 (Term Term Term Term) Term)


(declare-fun Tm_arrow_c4594856dbe7e5b386d54cadda720877 (Term) Term)
(declare-fun Tm_abs_bee6b44d62d7b15a7c1a999c08dbdaa1 (Term Term) Term)

; </end encoding let tac_wp_compact>


; <Start encoding val FStar.Tactics.Effect.tac_bind_interleave_begin>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_begin (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Effect.tac_bind_interleave_begin>


; <Skipped #push-options "--admit_smt_queries true"/>


; <Start encoding let tac_bind>


(declare-fun Tm_arrow_73ffef9431728db285f9b23266829750 (Term Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind (Term Term Term Term Term Term Term Term) Term)












(declare-fun Tm_abs_38525ace133de22e8b3b3636397a13cd (Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_afd910fd71261e3939048d0e1004fda1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_cbc1739ca78054f7e441cea306012951 () Term)
(declare-fun FStar.Tactics.Effect.tac_bind@tok () Term)




















;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_239 (Term Term Term Term Term Term) Term)

; </end encoding let tac_bind>


; <Skipped #pop-options/>


; <Start encoding val FStar.Tactics.Effect.tac_bind_interleave_end>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_end (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Effect.tac_bind_interleave_end>


; <Start encoding let tac_if_then_else_wp>

(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp (Term Term Term Term) Term)
(declare-fun Tm_arrow_0d888f0d0310e06a23a044b7487ca9a3 () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp@tok () Term)


(declare-fun Tm_arrow_2bfa429e0c444d45072542e413efc1c1 (Term) Term)
(declare-fun Tm_abs_86d5c2428199615bc3f8f5172ed82af4 (Term Term Term Term) Term)

; </end encoding let tac_if_then_else_wp>


; <Start encoding let tac_if_then_else>

(declare-fun FStar.Tactics.Effect.tac_if_then_else (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_36fb4b5a399369ef643849e96611ebec () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else@tok () Term)








(declare-fun Tm_abs_2fda180fbbce3bc00549b67fc601e0be (Term Term Term Term Term Term) Term)



(declare-fun Tm_abs_6ed68232224ac13a4995196b297d1f2b (Term Term Term Term) Term)

; </end encoding let tac_if_then_else>


; <Start encoding let tac_subcomp>


(declare-fun FStar.Tactics.Effect.tac_subcomp (Term Term Term Term) Term)
(declare-fun Tm_refine_9688035851d5c5523a806a1df19cb706 (Term Term) Term)

(declare-fun Tm_arrow_dc8ee65b5b33b14f497b382af4ab7512 () Term)
(declare-fun FStar.Tactics.Effect.tac_subcomp@tok () Term)


; </end encoding let tac_subcomp>


; <Start encoding let tac_close>



(declare-fun FStar.Tactics.Effect.tac_close (Term Term Term Term) Term)


(declare-fun Tm_arrow_ddae682ca2e9bd4cfa6e582c3cbda6bf () Term)
(declare-fun FStar.Tactics.Effect.tac_close@tok () Term)




(declare-fun Tm_abs_bd152fc5c12cc6aa125ccf543aa53813 (Term Term Term Term) Term)


(declare-fun Tm_abs_4a490b6642ec805995acda79bfbd79eb (Term Term Term) Term)

; </end encoding let tac_close>


; <Skipped layered_effect { TAC ... }/>


; <Skipped effect TacH a pre post = FStar.Tactics.Effect.TAC a/>


; <Skipped effect Tac a = FStar.Tactics.Effect.TacH a/>


; <Skipped effect TacS a = FStar.Tactics.Effect.TacH a/>


; <Skipped effect TacF a = FStar.Tactics.Effect.TacH a/>


; <Start encoding let lift_div_tac_wp>

(declare-fun FStar.Tactics.Effect.lift_div_tac_wp (Term Term) Term)
(declare-fun Tm_arrow_756b2c443a872ea2d839224a3f915862 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac_wp@tok () Term)


(declare-fun Tm_abs_d19ed2c1cbcc251803f55dea9449b934 (Term Term Term) Term)

(declare-fun Tm_arrow_298f7ec24f68dbe551035ce3db5b5bdd (Term) Term)
(declare-fun Tm_abs_9c642aa783aefa5494cf2caad21c4825 (Term Term) Term)

; </end encoding let lift_div_tac_wp>


; <Start encoding let lift_div_tac>

(declare-fun Non_total_Tm_arrow_da9712c41bd4800828fa87c1bc605521 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac (Term Term Term) Term)







(declare-fun Tm_arrow_69a366f788903d83a59a723310249405 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac@tok () Term)







;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_326 (Term Term) Term)

; </end encoding let lift_div_tac>


; <Skipped sub_effect DIV ~> TAC/>


; <Start encoding let get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.get@tok () Term)

; </end encoding let get>


; <Start encoding let raise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.raise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.raise@tok () Term)

; </end encoding let raise>


; <Start encoding val FStar.Tactics.Effect.with_tactic>

(declare-fun Non_total_Tm_arrow_0df358455d9ffa69782d20c171a72c48 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic (Term Term) Term)

(declare-fun Tm_arrow_0f1a7b132563c41331d8b63d877642f4 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.with_tactic>


; <Start encoding val FStar.Tactics.Effect.rewrite_with_tactic>


(declare-fun FStar.Tactics.Effect.rewrite_with_tactic (Term Term Term) Term)

(declare-fun Tm_arrow_f63ee5eb2c336987d9ae8086208589c0 () Term)
(declare-fun FStar.Tactics.Effect.rewrite_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.rewrite_with_tactic>


; <Start encoding val FStar.Tactics.Effect.synth_by_tactic>


(declare-fun FStar.Tactics.Effect.synth_by_tactic (Term Term) Term)

(declare-fun Tm_arrow_8f10558f8b36216eec81f2c618b5024b () Term)
(declare-fun FStar.Tactics.Effect.synth_by_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.synth_by_tactic>


; <Start encoding val FStar.Tactics.Effect.assert_by_tactic>


(declare-fun FStar.Tactics.Effect.assert_by_tactic (Term Term) Term)


(declare-fun Tm_arrow_62294304586082aabc8d32a2cb34b258 () Term)
(declare-fun FStar.Tactics.Effect.assert_by_tactic@tok () Term)


; </end encoding val FStar.Tactics.Effect.assert_by_tactic>


; <Start encoding val FStar.Tactics.Effect.by_tactic_seman>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman@tok () Term)

; </end encoding val FStar.Tactics.Effect.by_tactic_seman>


; <Start encoding let assume_safe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.assume_safe (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.assume_safe@tok () Term)

; </end encoding let assume_safe>


; <Start encoding let tac>

(declare-fun FStar.Tactics.Effect.tac (Term Term) Term)

(declare-fun FStar.Tactics.Effect.tac@tok () Term)
(declare-fun Non_total_Tm_arrow_d7d295746bb03506a91beb076c0c54c2 (Term Term) Term)

; </end encoding let tac>


; <Start encoding let tactic>

(declare-fun FStar.Tactics.Effect.tactic (Term) Term)

(declare-fun FStar.Tactics.Effect.tactic@tok () Term)

; </end encoding let tactic>


; <Start encoding val FStar.Tactics.Effect.preprocess_with>

(declare-fun Non_total_Tm_arrow_489c5cd52ce0bd6c500497b6a9d25763 () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with (Term) Term)

(declare-fun Tm_arrow_11f5dabe45aec598b26a74d4ae177cec () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.preprocess_with>


; <Start encoding val FStar.Tactics.Effect.postprocess_with>


(declare-fun FStar.Tactics.Effect.postprocess_with (Term) Term)

(declare-fun Tm_arrow_71902d217cf156a1346c71f86a0ea184 () Term)
(declare-fun FStar.Tactics.Effect.postprocess_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.postprocess_with>


; <Start encoding val FStar.Tactics.Effect.postprocess_for_extraction_with>


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with (Term) Term)


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.postprocess_for_extraction_with>


; <Skipped #set-options "--no_tactics"/>


; <Start encoding val FStar.Tactics.Effect.unfold_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.unfold_with_tactic>


; <Start encoding val FStar.Tactics.Effect.unfold_rewrite_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.unfold_rewrite_with_tactic>


; End Externals for interface FStar.Tactics.Effect


; Externals for interface FStar.Tactics.Typeclasses


; <Start encoding val FStar.Tactics.Typeclasses.tcclass>

(declare-fun FStar.Tactics.Typeclasses.tcclass (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.tcclass>


; <Start encoding val FStar.Tactics.Typeclasses.tcinstance>

(declare-fun FStar.Tactics.Typeclasses.tcinstance (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.tcinstance>


; <Start encoding val FStar.Tactics.Typeclasses.fundeps>

(declare-fun FStar.Tactics.Typeclasses.fundeps (Term) Term)

(declare-fun FStar.Tactics.Typeclasses.fundeps@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.fundeps>


; <Start encoding val FStar.Tactics.Typeclasses.no_method>

(declare-fun FStar.Tactics.Typeclasses.no_method (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.no_method>


; <Start encoding val FStar.Tactics.Typeclasses.tcresolve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.tcresolve>


; <Start encoding val FStar.Tactics.Typeclasses.mk_class>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.mk_class>


; <Start encoding let solve>

(declare-fun FStar.Tactics.Typeclasses.solve (Term Term) Term)

(declare-fun FStar.Tactics.Typeclasses.solve@tok () Term)

; </end encoding let solve>


; End Externals for interface FStar.Tactics.Typeclasses

(push) ;; push{1

; Internals for LeftistHeap


; encoding sigelt type LeftistHeap.ordered


; <Start encoding type LeftistHeap.ordered>

;;;;;;;;;;;;;;;;Constructor
(declare-fun LeftistHeap.ordered (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun LeftistHeap.ordered@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun LeftistHeap.Mkordered (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Mkordered_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Mkordered_leq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Mkordered_properties (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: LeftistHeap.Mkordered
(declare-fun LeftistHeap.Mkordered@tok () Term)

(declare-fun Tm_refine_c9b66413736764e5892d9b3a8d972edc (Term Term) Term)


;;;;;;;;;;;;;;;;leq: (_: a -> _: a -> Prims.bool) ->     [@@@ FStar.Tactics.Typeclasses.no_method]properties:       Prims.squash ((forall (x: a). leq x x) /\           (forall (a: a) (b: a) (c: a). leq a b /\ leq b c ==> leq a c) /\           (forall (a: a) (b: a). leq a b /\ leq b a ==> a = b) /\           (forall (a: a) (b: a). leq a b \/ leq b a))   -> ordered a
(declare-fun Tm_arrow_c7f492a98f5e1785329f084b3996e5c6 () Term)

; <start constructor LeftistHeap.ordered>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LeftistHeap.ordered ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
104)
(exists ((@x0 Term))
 (! (= __@x0
(LeftistHeap.ordered @x0))
 
;;no pats
:qid is-LeftistHeap.ordered))))

; </end constructor LeftistHeap.ordered>


; <start constructor LeftistHeap.Mkordered>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LeftistHeap.Mkordered ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
(LeftistHeap.Mkordered (LeftistHeap.Mkordered_a __@x0)
(LeftistHeap.Mkordered_leq __@x0)
(LeftistHeap.Mkordered_properties __@x0)))))

; </end constructor LeftistHeap.Mkordered>


; </end encoding type LeftistHeap.ordered>


; encoding sigelt val LeftistHeap.__proj__Mkordered__item__leq


; <Start encoding val LeftistHeap.__proj__Mkordered__item__leq>

(declare-fun LeftistHeap.__proj__Mkordered__item__leq (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: ordered a -> _: a -> _: a -> Prims.bool
(declare-fun Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c () Term)
(declare-fun LeftistHeap.__proj__Mkordered__item__leq@tok () Term)


; </end encoding val LeftistHeap.__proj__Mkordered__item__leq>


; encoding sigelt let __proj__Mkordered__item__leq


; <Skipped let __proj__Mkordered__item__leq/>


; encoding sigelt val LeftistHeap.__proj__Mkordered__item__properties


; <Start encoding val LeftistHeap.__proj__Mkordered__item__properties>

(declare-fun LeftistHeap.__proj__Mkordered__item__properties (Term Term) Term)







(declare-fun Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ordered a   -> Prims.squash ((forall (x: a). projectee.leq x x) /\         (forall (a: a) (b: a) (c: a). projectee.leq a b /\ projectee.leq b c ==> projectee.leq a c) /\         (forall (a: a) (b: a). projectee.leq a b /\ projectee.leq b a ==> a = b) /\         (forall (a: a) (b: a). projectee.leq a b \/ projectee.leq b a))
(declare-fun Tm_arrow_94d0013e3362d63260450bde49f5a361 () Term)
(declare-fun LeftistHeap.__proj__Mkordered__item__properties@tok () Term)










; </end encoding val LeftistHeap.__proj__Mkordered__item__properties>


; encoding sigelt let __proj__Mkordered__item__properties


; <Skipped let __proj__Mkordered__item__properties/>


; encoding sigelt let leq


; <Start encoding let leq>

(declare-fun LeftistHeap.leq (Term) Term)

;;;;;;;;;;;;;;;;_: a -> _: a -> Prims.bool
(declare-fun Tm_arrow_649a0684309abaa78e673cf48ebf1183 (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: ordered a |} -> _: a -> _: a -> Prims.bool
(declare-fun Tm_arrow_089277bcc8728a014da8692bd17241b8 (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: ordered a |} -> _: a -> _: a -> Prims.bool
(declare-fun Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0 () Term)
(declare-fun LeftistHeap.leq@tok () Term)






(declare-fun Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b (Term) Term)

; </end encoding let leq>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;Range_const typing
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (HasTypeZ (Range_const 1)
FStar.Range.range)
:named typing_range_const))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.NotAListLiteral; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.NotAListLiteral FStar.Stubs.Tactics.Common.NotAListLiteral)
(= FStar.Stubs.Tactics.Common.NotAListLiteral
FStar.Stubs.Tactics.Common.NotAListLiteral@base))
:named constructor_base_FStar.Stubs.Tactics.Common.NotAListLiteral))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.SKIP; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.SKIP FStar.Stubs.Tactics.Common.SKIP)
(= FStar.Stubs.Tactics.Common.SKIP
FStar.Stubs.Tactics.Common.SKIP@base))
:named constructor_base_FStar.Stubs.Tactics.Common.SKIP))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;typing_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(18,2-18,5); use=LeftistHeap.fsti(18,2-18,5)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b @x0)
(Tm_arrow_089277bcc8728a014da8692bd17241b8 @x0))
 

:pattern ((Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b @x0))
:qid typing_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b))

:named typing_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Nil @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid typing_Prims.uu___is_Nil))

:named typing_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Cons @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid typing_Prims.uu___is_Cons))

:named typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(HasType (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid typing_Prims.op_Equals_Equals_Equals))

:named typing_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (LeftistHeap.leq @x0)
(Tm_arrow_089277bcc8728a014da8692bd17241b8 @x0)))
 

:pattern ((LeftistHeap.leq @x0))
:qid typing_LeftistHeap.leq))
:named typing_LeftistHeap.leq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=FStar.Pervasives.Native.fst(59,33-59,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= (ApplyTT Prims.list@tok
@x0)
(Prims.list @x0))
 

:pattern ((ApplyTT Prims.list@tok
@x0))

:pattern ((Prims.list @x0))
:qid token_correspondence_Prims.list@tok))

:named token_correspondence_Prims.list@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@x0 Term))
 (! (= (ApplyTT LeftistHeap.ordered@tok
@x0)
(LeftistHeap.ordered @x0))
 

:pattern ((ApplyTT LeftistHeap.ordered@tok
@x0))

:pattern ((LeftistHeap.ordered @x0))
:qid token_correspondence_LeftistHeap.ordered@tok))

:named token_correspondence_LeftistHeap.ordered@tok))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! (forall ((@x0 Term))
 (! (= (ApplyTT LeftistHeap.leq@tok
@x0)
(LeftistHeap.leq @x0))
 

:pattern ((ApplyTT LeftistHeap.leq@tok
@x0))
:qid token_correspondence_LeftistHeap.leq))
:named token_correspondence_LeftistHeap.leq))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Prims.Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid subterm_ordering_Prims.Cons))

:named subterm_ordering_Prims.Cons))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(LeftistHeap.Mkordered @x1
@x2
@x3)
(LeftistHeap.ordered @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(LeftistHeap.Mkordered @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(LeftistHeap.Mkordered @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(LeftistHeap.Mkordered @x1
@x2
@x3)
(LeftistHeap.ordered @x4)))
:qid subterm_ordering_LeftistHeap.Mkordered))

:named subterm_ordering_LeftistHeap.Mkordered))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(20,22-25,3); use=LeftistHeap.fsti(20,22-25,3)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_c9b66413736764e5892d9b3a8d972edc @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_c9b66413736764e5892d9b3a8d972edc @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_c9b66413736764e5892d9b3a8d972edc))

:named refinement_kinding_Tm_refine_c9b66413736764e5892d9b3a8d972edc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (HasType Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
Tm_type)
:named refinement_kinding_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(20,22-25,3); use=LeftistHeap.fsti(20,22-25,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c9b66413736764e5892d9b3a8d972edc @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fsti(21,4-21,23); use=LeftistHeap.fsti(21,4-21,23)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x2)

;; def=LeftistHeap.fsti(21,15-21,22); use=LeftistHeap.fsti(21,15-21,22)
(BoxBool_proj_0 (ApplyTT (ApplyTT @x3
@x4)
@x4))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc.1))


;; def=LeftistHeap.fsti(22,4-22,52); use=LeftistHeap.fsti(22,4-22,52)
(forall ((@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x4
@x2)
(HasType @x5
@x2)
(HasType @x6
@x2)

;; def=LeftistHeap.fsti(22,20-22,27); use=LeftistHeap.fsti(22,20-22,27)
(BoxBool_proj_0 (ApplyTT (ApplyTT @x3
@x4)
@x5))


;; def=LeftistHeap.fsti(22,31-22,38); use=LeftistHeap.fsti(22,31-22,38)
(BoxBool_proj_0 (ApplyTT (ApplyTT @x3
@x5)
@x6))
)

;; def=LeftistHeap.fsti(22,44-22,51); use=LeftistHeap.fsti(22,44-22,51)
(BoxBool_proj_0 (ApplyTT (ApplyTT @x3
@x4)
@x6))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc.2))


;; def=LeftistHeap.fsti(23,4-23,48); use=LeftistHeap.fsti(23,4-23,48)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
@x2)
(HasType @x5
@x2)

;; def=LeftistHeap.fsti(23,18-23,25); use=LeftistHeap.fsti(23,18-23,25)
(BoxBool_proj_0 (ApplyTT (ApplyTT @x3
@x4)
@x5))


;; def=LeftistHeap.fsti(23,29-23,36); use=LeftistHeap.fsti(23,29-23,36)
(BoxBool_proj_0 (ApplyTT (ApplyTT @x3
@x5)
@x4))
)

;; def=LeftistHeap.fsti(23,42-23,47); use=LeftistHeap.fsti(23,42-23,47)
(= @x4
@x5)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc.3))


;; def=LeftistHeap.fsti(24,4-24,36); use=LeftistHeap.fsti(24,4-24,36)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
@x2)
(HasType @x5
@x2))

;; def=LeftistHeap.fsti(24,17-24,35); use=LeftistHeap.fsti(24,17-24,35)
(or 
;; def=LeftistHeap.fsti(24,17-24,24); use=LeftistHeap.fsti(24,17-24,24)
(BoxBool_proj_0 (ApplyTT (ApplyTT @x3
@x4)
@x5))


;; def=LeftistHeap.fsti(24,28-24,35); use=LeftistHeap.fsti(24,28-24,35)
(BoxBool_proj_0 (ApplyTT (ApplyTT @x3
@x5)
@x4))
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc.4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c9b66413736764e5892d9b3a8d972edc @x2
@x3)))
:qid refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc))

:named refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! 
;; def=FStar.Stubs.Tactics.Types.fsti(44,31-44,48); use=FStar.Stubs.Tactics.Types.fsti(44,31-44,48)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f)
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=FStar.Stubs.Tactics.Types.fsti(44,38-44,47); use=FStar.Stubs.Tactics.Types.fsti(44,38-44,47)
(= @x1
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
:qid refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))

:named refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= (Prims.Nil_a (Prims.Nil @x0))
@x0)
 

:pattern ((Prims.Nil @x0))
:qid projection_inverse_Prims.Nil_a))

:named projection_inverse_Prims.Nil_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_tl (Prims.Cons @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_tl))

:named projection_inverse_Prims.Cons_tl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_hd (Prims.Cons @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_hd))

:named projection_inverse_Prims.Cons_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_a (Prims.Cons @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_a))

:named projection_inverse_Prims.Cons_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.Mkordered_properties (LeftistHeap.Mkordered @x0
@x1
@x2))
@x2)
 

:pattern ((LeftistHeap.Mkordered @x0
@x1
@x2))
:qid projection_inverse_LeftistHeap.Mkordered_properties))

:named projection_inverse_LeftistHeap.Mkordered_properties))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.Mkordered_leq (LeftistHeap.Mkordered @x0
@x1
@x2))
@x1)
 

:pattern ((LeftistHeap.Mkordered @x0
@x1
@x2))
:qid projection_inverse_LeftistHeap.Mkordered_leq))

:named projection_inverse_LeftistHeap.Mkordered_leq))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.Mkordered_a (LeftistHeap.Mkordered @x0
@x1
@x2))
@x0)
 

:pattern ((LeftistHeap.Mkordered @x0
@x1
@x2))
:qid projection_inverse_LeftistHeap.Mkordered_a))

:named projection_inverse_LeftistHeap.Mkordered_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__2))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=FStar.Pervasives.Native.fst(59,33-59,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__1 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__1))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.list@tok))
:named pre_kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! (is-Tm_arrow (PreType LeftistHeap.ordered@tok))
:named pre_kinding_LeftistHeap.ordered@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e
;;; Fact-ids: Name FStar.List.Tot.Base.compare_of_bool; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(509,23-509,54); use=FStar.List.Tot.Base.fst(509,36-510,19)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x0)
Tm_type))
:qid kinding_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e))

:named kinding_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_84543425b818e2d10a976186b8e8c250
;;; Fact-ids: Name FStar.List.Tot.Base.existsb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(253,22-256,18); use=FStar.List.Tot.Base.fst(256,8-256,18)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_84543425b818e2d10a976186b8e8c250 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_84543425b818e2d10a976186b8e8c250 @x0)
Tm_type))
:qid kinding_Tm_arrow_84543425b818e2d10a976186b8e8c250))

:named kinding_Tm_arrow_84543425b818e2d10a976186b8e8c250))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_649a0684309abaa78e673cf48ebf1183
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_649a0684309abaa78e673cf48ebf1183 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_649a0684309abaa78e673cf48ebf1183 @x0)
Tm_type))
:qid kinding_Tm_arrow_649a0684309abaa78e673cf48ebf1183))

:named kinding_Tm_arrow_649a0684309abaa78e673cf48ebf1183))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! (HasType Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0
Tm_type)
:named kinding_Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_089277bcc8728a014da8692bd17241b8
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_089277bcc8728a014da8692bd17241b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_089277bcc8728a014da8692bd17241b8 @x0)
Tm_type))
:qid kinding_Tm_arrow_089277bcc8728a014da8692bd17241b8))

:named kinding_Tm_arrow_089277bcc8728a014da8692bd17241b8))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (and (IsTotFun Prims.list@tok)

;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.list @x0)
Tm_type))
 

:pattern ((Prims.list @x0))
:qid kinding_Prims.list@tok))
)
:named kinding_Prims.list@tok))
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! (and (IsTotFun LeftistHeap.ordered@tok)

;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (LeftistHeap.ordered @x0)
Tm_type))
 

:pattern ((LeftistHeap.ordered @x0))
:qid kinding_LeftistHeap.ordered@tok))
)
:named kinding_LeftistHeap.ordered@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple2@tok)

;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))


;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok.1))
)
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(18,2-18,5); use=LeftistHeap.fsti(18,2-18,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b @x1)
@x0)
(let ((@lb2 @x0))
(LeftistHeap.Mkordered_leq @lb2)))
 

:pattern ((ApplyTT (Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b @x1)
@x0))
:qid interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b))

:named interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c9b66413736764e5892d9b3a8d972edc
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(20,22-25,3); use=LeftistHeap.fsti(20,22-25,3)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c9b66413736764e5892d9b3a8d972edc @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c9b66413736764e5892d9b3a8d972edc @x0
@x1))))
:qid haseqTm_refine_c9b66413736764e5892d9b3a8d972edc))

:named haseqTm_refine_c9b66413736764e5892d9b3a8d972edc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
(Valid (Prims.hasEq Prims.bool)))
:named haseqTm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! (forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.leq@tok
Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0))
(forall ((@x1 Term))
 (! (= (ApplyTT LeftistHeap.leq@tok
@x1)
(LeftistHeap.leq @x1))
 

:pattern ((LeftistHeap.leq @x1))
:qid function_token_typing_LeftistHeap.leq.1)))
 

:pattern ((ApplyTT @x0
LeftistHeap.leq@tok))
:qid function_token_typing_LeftistHeap.leq))
:named function_token_typing_LeftistHeap.leq))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2))
(or (and (is-Prims.Nil @x1)
(= @x2
(Prims.Nil_a @x1)))
(and (is-Prims.Cons @x1)
(= @x2
(Prims.Cons_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2)))
:qid fuel_guarded_inversion_Prims.list))

:named fuel_guarded_inversion_Prims.list))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(LeftistHeap.ordered @x2))
(and (is-LeftistHeap.Mkordered @x1)
(= @x2
(LeftistHeap.Mkordered_a @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(LeftistHeap.ordered @x2)))
:qid fuel_guarded_inversion_LeftistHeap.ordered))

:named fuel_guarded_inversion_LeftistHeap.ordered))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 319
(Term_constr_id Prims.list@tok))
:named fresh_token_Prims.list@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! (= 105
(Term_constr_id LeftistHeap.ordered@tok))
:named fresh_token_LeftistHeap.ordered@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 126
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))

;; def=Prims.fst(498,52-498,68); use=Prims.fst(498,52-498,68)
(and 
;; def=Prims.fst(498,52-498,58); use=Prims.fst(498,52-498,58)
(= @x0
@x1)


;; def=Prims.fst(498,62-498,68); use=Prims.fst(498,62-498,68)
(= @x2
@x3)
)
)
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid equation_Prims.op_Equals_Equals_Equals))

:named equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.leq
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! (forall ((@x0 Term))
 (! (= (LeftistHeap.leq @x0)
(Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b @x0))
 

:pattern ((LeftistHeap.leq @x0))
:qid equation_LeftistHeap.leq))
:named equation_LeftistHeap.leq))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Nil @x0
@x1)
(BoxBool (is-Prims.Nil @x1)))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid disc_equation_Prims.Nil))

:named disc_equation_Prims.Nil))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Cons @x0
@x1)
(BoxBool (is-Prims.Cons @x1)))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid disc_equation_Prims.Cons))

:named disc_equation_Prims.Cons))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Prop-typing for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(Valid (Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_Prims.op_Equals_Equals_Equals))

:named defn_equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Nil@tok))

:named data_typing_intro_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1)))
(HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Cons@tok))

:named data_typing_intro_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.eqtype)
(HasTypeFuel @u0
@x2
(Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x1))
(HasTypeFuel @u0
@x3
(Tm_refine_c9b66413736764e5892d9b3a8d972edc @x1
@x2)))
(HasTypeFuel @u0
(LeftistHeap.Mkordered @x1
@x2
@x3)
(LeftistHeap.ordered @x1)))
 

:pattern ((HasTypeFuel @u0
(LeftistHeap.Mkordered @x1
@x2
@x3)
(LeftistHeap.ordered @x1)))
:qid data_typing_intro_LeftistHeap.Mkordered@tok))

:named data_typing_intro_LeftistHeap.Mkordered@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2)))
:qid data_elim_Prims.Nil))

:named data_elim_Prims.Nil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
(Prims.list @x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid data_elim_Prims.Cons))

:named data_elim_Prims.Cons))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(LeftistHeap.Mkordered @x1
@x2
@x3)
(LeftistHeap.ordered @x4))
(and (HasTypeFuel @u0
@x4
Prims.eqtype)
(HasTypeFuel @u0
@x2
(Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x4))
(HasTypeFuel @u0
@x3
(Tm_refine_c9b66413736764e5892d9b3a8d972edc @x4
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(LeftistHeap.Mkordered @x1
@x2
@x3)
(LeftistHeap.ordered @x4)))
:qid data_elim_LeftistHeap.Mkordered))

:named data_elim_LeftistHeap.Mkordered))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))

:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= 318
(Term_constr_id (Prims.list @x0)))
 

:pattern ((Prims.list @x0))
:qid constructor_distinct_Prims.list))

:named constructor_distinct_Prims.list))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= 325
(Term_constr_id (Prims.Nil @x0)))
 

:pattern ((Prims.Nil @x0))
:qid constructor_distinct_Prims.Nil))

:named constructor_distinct_Prims.Nil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 330
(Term_constr_id (Prims.Cons @x0
@x1
@x2)))
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid constructor_distinct_Prims.Cons))

:named constructor_distinct_Prims.Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@x0 Term))
 (! (= 104
(Term_constr_id (LeftistHeap.ordered @x0)))
 

:pattern ((LeftistHeap.ordered @x0))
:qid constructor_distinct_LeftistHeap.ordered))

:named constructor_distinct_LeftistHeap.ordered))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 114
(Term_constr_id (LeftistHeap.Mkordered @x0
@x1
@x2)))
 

:pattern ((LeftistHeap.Mkordered @x0
@x1
@x2))
:qid constructor_distinct_LeftistHeap.Mkordered))

:named constructor_distinct_LeftistHeap.Mkordered))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 125
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))

:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 132
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;Assumption: Prims.list__uu___haseq
;;; Fact-ids: Name Prims.list__uu___haseq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Prims.hasEq (Prims.list @x0)))
:qid assumption_Prims.list__uu___haseq))
:named assumption_Prims.list__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple2__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.list @x2))
(= (Prims.list @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.list @x2)))
:qid Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))

:named Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name LeftistHeap.ordered; Namespace LeftistHeap; Name LeftistHeap.Mkordered; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,6-16,13)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(LeftistHeap.ordered @x2))
(= (LeftistHeap.ordered @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(LeftistHeap.ordered @x2)))
:qid LeftistHeap_pretyping_53012d5c8ba6b1cd2a3e53ca4700f5de))

:named LeftistHeap_pretyping_53012d5c8ba6b1cd2a3e53ca4700f5de))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_649a0684309abaa78e673cf48ebf1183 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_649a0684309abaa78e673cf48ebf1183 @x2)))
:qid LeftistHeap_pre_typing_Tm_arrow_649a0684309abaa78e673cf48ebf1183))

:named LeftistHeap_pre_typing_Tm_arrow_649a0684309abaa78e673cf48ebf1183))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,23); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0))
:qid LeftistHeap_pre_typing_Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0))

:named LeftistHeap_pre_typing_Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_089277bcc8728a014da8692bd17241b8 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_089277bcc8728a014da8692bd17241b8 @x2)))
:qid LeftistHeap_pre_typing_Tm_arrow_089277bcc8728a014da8692bd17241b8))

:named LeftistHeap_pre_typing_Tm_arrow_089277bcc8728a014da8692bd17241b8))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_649a0684309abaa78e673cf48ebf1183
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_649a0684309abaa78e673cf48ebf1183 @x1))
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
(Tm_arrow_84543425b818e2d10a976186b8e8c250 @x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid LeftistHeap_interpretation_Tm_arrow_649a0684309abaa78e673cf48ebf1183.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_649a0684309abaa78e673cf48ebf1183 @x1)))
:qid LeftistHeap_interpretation_Tm_arrow_649a0684309abaa78e673cf48ebf1183))

:named LeftistHeap_interpretation_Tm_arrow_649a0684309abaa78e673cf48ebf1183))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,23); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0)
(and 
;; def=LeftistHeap.fsti(16,6-16,23); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(HasType (ApplyTT @x0
@x1)
(Tm_arrow_089277bcc8728a014da8692bd17241b8 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0))
:qid LeftistHeap_interpretation_Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0))

:named LeftistHeap_interpretation_Tm_arrow_21c0bc900266b3010072f1a92e9ee5b0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_089277bcc8728a014da8692bd17241b8
;;; Fact-ids: Name LeftistHeap.leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_089277bcc8728a014da8692bd17241b8 @x1))
(and 
;; def=LeftistHeap.fsti(16,6-16,13); use=LeftistHeap.fsti(16,15-18,5)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.ordered @x1))
(HasType (ApplyTT @x0
@x2)
(Tm_arrow_649a0684309abaa78e673cf48ebf1183 @x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid LeftistHeap_interpretation_Tm_arrow_089277bcc8728a014da8692bd17241b8.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_089277bcc8728a014da8692bd17241b8 @x1)))
:qid LeftistHeap_interpretation_Tm_arrow_089277bcc8728a014da8692bd17241b8))

:named LeftistHeap_interpretation_Tm_arrow_089277bcc8728a014da8692bd17241b8))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.List.Tot.Base.compare_of_bool; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(509,23-509,54); use=FStar.List.Tot.Base.fst(509,36-510,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x2)))
:qid FStar.List.Tot.Base_pre_typing_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e))

:named FStar.List.Tot.Base_pre_typing_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.List.Tot.Base.existsb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(253,22-256,18); use=FStar.List.Tot.Base.fst(256,8-256,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_84543425b818e2d10a976186b8e8c250 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_84543425b818e2d10a976186b8e8c250 @x2)))
:qid FStar.List.Tot.Base_pre_typing_Tm_arrow_84543425b818e2d10a976186b8e8c250))

:named FStar.List.Tot.Base_pre_typing_Tm_arrow_84543425b818e2d10a976186b8e8c250))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e
;;; Fact-ids: Name FStar.List.Tot.Base.compare_of_bool; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(509,23-509,54); use=FStar.List.Tot.Base.fst(509,36-510,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x1))
(and 
;; def=FStar.List.Tot.Base.fst(509,23-509,54); use=FStar.List.Tot.Base.fst(509,36-510,19)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e.1))

(IsTotFun @x0)

;; def=FStar.List.Tot.Base.fst(509,23-509,54); use=FStar.List.Tot.Base.fst(509,36-510,19)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x1)))
:qid FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e))

:named FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_84543425b818e2d10a976186b8e8c250
;;; Fact-ids: Name FStar.List.Tot.Base.existsb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(253,22-256,18); use=FStar.List.Tot.Base.fst(256,8-256,18)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_84543425b818e2d10a976186b8e8c250 @x1))
(and 
;; def=FStar.List.Tot.Base.fst(253,22-256,18); use=FStar.List.Tot.Base.fst(256,8-256,18)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Prims.bool))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.List.Tot.Base_interpretation_Tm_arrow_84543425b818e2d10a976186b8e8c250.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_84543425b818e2d10a976186b8e8c250 @x1)))
:qid FStar.List.Tot.Base_interpretation_Tm_arrow_84543425b818e2d10a976186b8e8c250))

:named FStar.List.Tot.Base_interpretation_Tm_arrow_84543425b818e2d10a976186b8e8c250))
(push) ;; push{2

; Starting query at LeftistHeap.fsti(29,2-32,84)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___32 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
(declare-fun Tm_refine_9ec86b9728738e84940b32a3391cb7ea (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(28,15-32,84); use=LeftistHeap.fsti(28,15-32,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_9ec86b9728738e84940b32a3391cb7ea @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_9ec86b9728738e84940b32a3391cb7ea @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_9ec86b9728738e84940b32a3391cb7ea))

:named refinement_kinding_Tm_refine_9ec86b9728738e84940b32a3391cb7ea))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(28,15-32,84); use=LeftistHeap.fsti(28,15-32,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9ec86b9728738e84940b32a3391cb7ea @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=LeftistHeap.fsti(28,15-32,84); use=LeftistHeap.fsti(28,15-32,84)

;; def=LeftistHeap.fsti(28,15-32,84); use=LeftistHeap.fsti(28,15-32,84)
(or 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(29,2-32,84)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(29,2-32,84)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fsti(28,15-32,84); use=LeftistHeap.fsti(28,15-32,84)
(and 
;; def=LeftistHeap.fsti(28,15-28,16); use=LeftistHeap.fsti(28,15-28,16)
(Valid 
;; def=LeftistHeap.fsti(28,15-28,16); use=LeftistHeap.fsti(28,15-28,16)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fsti(28,20-32,84); use=LeftistHeap.fsti(28,20-32,84)
(or 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(29,2-32,84)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(29,2-32,84)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fsti(28,20-32,84); use=LeftistHeap.fsti(28,20-32,84)
(and 
;; def=LeftistHeap.fsti(28,20-28,21); use=LeftistHeap.fsti(28,20-28,21)
(Valid 
;; def=LeftistHeap.fsti(28,20-28,21); use=LeftistHeap.fsti(28,20-28,21)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fsti(28,37-32,84); use=LeftistHeap.fsti(28,37-32,84)
(or 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(29,2-32,84)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(29,2-32,84)
(Prims.precedes (Prims.list @x2)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fsti(28,37-32,84); use=LeftistHeap.fsti(28,37-32,84)
(and 
;; def=LeftistHeap.fsti(28,37-28,38); use=LeftistHeap.fsti(28,37-28,38)
(Valid 
;; def=LeftistHeap.fsti(28,37-28,38); use=LeftistHeap.fsti(28,37-28,38)
(Prims.op_Equals_Equals_Equals (Prims.list @x2)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(29,2-32,84)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(29,2-32,84)
(Prims.precedes (Prims.list @x2)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x1
x_374b44ccfcb77ed85d505dbc44265913_3)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9ec86b9728738e84940b32a3391cb7ea @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_9ec86b9728738e84940b32a3391cb7ea))

:named refinement_interpretation_Tm_refine_9ec86b9728738e84940b32a3391cb7ea))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9ec86b9728738e84940b32a3391cb7ea
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(28,15-32,84); use=LeftistHeap.fsti(28,15-32,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9ec86b9728738e84940b32a3391cb7ea @x0
@x1
@x2)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9ec86b9728738e84940b32a3391cb7ea @x0
@x1
@x2))))
:qid haseqTm_refine_9ec86b9728738e84940b32a3391cb7ea))

:named haseqTm_refine_9ec86b9728738e84940b32a3391cb7ea))
(declare-fun LeftistHeap.merge (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;{| _: ordered t |} ->     a: Prims.list t ->     b: Prims.list t {t << t \/ t === t /\ (_ << _ \/ _ === _ /\ (a << a \/ a === a /\ b << b))}   -> Prims.GTot (Prims.list t)
(declare-fun Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef
Tm_type)
:named kinding_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(16,17-32,84); use=LeftistHeap.fsti(28,15-32,84)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(16,17-32,84); use=LeftistHeap.fsti(28,15-32,84)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef)
(and 
;; def=LeftistHeap.fsti(16,17-32,84); use=LeftistHeap.fsti(28,15-32,84)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Prims.list @x1))
(HasType @x4
(Tm_refine_9ec86b9728738e84940b32a3391cb7ea @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(Prims.list @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef.1))

(IsTotFun @x0)

;; def=LeftistHeap.fsti(16,17-32,84); use=LeftistHeap.fsti(28,15-32,84)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef.2))


;; def=LeftistHeap.fsti(16,17-32,84); use=LeftistHeap.fsti(28,15-32,84)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef.3))
))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef))

:named LeftistHeap_interpretation_Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef))
(declare-fun LeftistHeap.merge@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.merge@tok
@x0)
@x1)
@x2)
@x3)
(LeftistHeap.merge @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.merge@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_LeftistHeap.merge))

:named token_correspondence_LeftistHeap.merge))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.merge@tok
Tm_ghost_arrow_bc820ffd679468ecb279d9e9bc12e2ef))

;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.merge@tok
@x1)
@x2)
@x3)
@x4)
(LeftistHeap.merge @x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.merge @x1
@x2
@x3
@x4))
:qid function_token_typing_LeftistHeap.merge.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.merge@tok))
:qid function_token_typing_LeftistHeap.merge))

:named function_token_typing_LeftistHeap.merge))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Prims.list @x0))
(HasType @x3
(Tm_refine_9ec86b9728738e84940b32a3391cb7ea @x0
@x1
@x2)))
(HasType (LeftistHeap.merge @x0
@x1
@x2
@x3)
(Prims.list @x0)))
 

:pattern ((LeftistHeap.merge @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.merge))

:named typing_LeftistHeap.merge))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
LeftistHeap.leq@tok))
:named @kick_partial_app_7004eb7be991b188ac8a74165bf7488f))



; Encoding query formula : forall (k: Prims.pure_post (Prims.list t)).
;   (forall (x: Prims.list t). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Nil? (a, b)._1) /\ ~(Nil? (a, b)._2) /\ ~(Cons? (a, b)._1 && Cons? (a, b)._2) ==> Prims.l_False
;   ) /\
;   (~(Nil? (a, b)._1) ==>
;     ~(Nil? (a, b)._2) ==>
;     (forall (b: t) (b: Prims.list t) (b: t) (b: Prims.list t).
;         (a, b) == (b :: b, b :: b) ==>
;         (forall (k: Prims.pure_post (Prims.list t)).
;             (forall (x: Prims.list t). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;             (LeftistHeap.leq b b == true ==> t << t \/ (_ << _ \/ (b << a \/ b === a /\ b << b))) /\
;             (~(LeftistHeap.leq b b = true) ==>
;               (forall (b: Prims.bool).
;                   LeftistHeap.leq b b == b ==> t << t \/ (_ << _ \/ (a << a \/ b << b)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec merge`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fsti(29,2-32,84)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fsti(29,2-32,84)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fsti(29,2-32,84)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fsti(29,2-32,84)
(and (implies 
;; def=LeftistHeap.fsti(30,4-32,18); use=LeftistHeap.fsti(30,4-32,18)
(and 
;; def=LeftistHeap.fsti(30,4-30,9); use=LeftistHeap.fsti(30,4-30,9)
(not 
;; def=LeftistHeap.fsti(30,4-30,9); use=LeftistHeap.fsti(30,4-30,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
)


;; def=LeftistHeap.fsti(31,4-31,9); use=LeftistHeap.fsti(31,4-31,9)
(not 
;; def=LeftistHeap.fsti(31,4-31,9); use=LeftistHeap.fsti(31,4-31,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
)


;; def=LeftistHeap.fsti(32,4-32,18); use=LeftistHeap.fsti(32,4-32,18)
(not 
;; def=LeftistHeap.fsti(32,4-32,18); use=LeftistHeap.fsti(32,4-32,18)
(and (BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)))))
)
)

label_1)
(implies 
;; def=Prims.fst(389,18-389,39); use=LeftistHeap.fsti(29,2-32,84)
(and 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fsti(29,2-32,84)
(not 
;; def=LeftistHeap.fsti(30,4-30,9); use=LeftistHeap.fsti(30,4-30,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
)


;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fsti(29,2-32,84)
(not 
;; def=LeftistHeap.fsti(31,4-31,9); use=LeftistHeap.fsti(31,4-31,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
)
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fsti(29,2-32,84)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fsti(29,2-32,84)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fsti(29,2-32,84)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fsti(29,2-32,84)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fsti(29,8-32,18); use=LeftistHeap.fsti(29,8-32,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
@x2)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x3
@x4)))
)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fsti(29,2-32,84)
(forall ((@x6 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fsti(29,2-32,84)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fsti(29,2-32,84)
(ApplyTT @x5
@x6)
)

 

:pattern ((ApplyTT @x5
@x6))
:qid @query.7))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fsti(29,2-32,84)
(and (implies 
;; def=LeftistHeap.fsti(32,25-32,36); use=LeftistHeap.fsti(32,25-32,36)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x1)
@x3)
(BoxBool true))


;; def=LeftistHeap.fsti(28,15-32,84); use=LeftistHeap.fsti(32,58-32,59)
(or label_2

;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,58-32,59)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,58-32,59)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,58-32,59)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,58-32,59)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,58-32,59)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,58-32,59)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fsti(28,37-32,84); use=LeftistHeap.fsti(32,58-32,59)
(and 
;; def=LeftistHeap.fsti(28,37-28,38); use=LeftistHeap.fsti(32,58-32,59)
(Valid 
;; def=LeftistHeap.fsti(28,37-28,38); use=LeftistHeap.fsti(32,58-32,59)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,58-32,59)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,58-32,59)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_3
x_374b44ccfcb77ed85d505dbc44265913_3)
)
)
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fsti(29,2-32,84)
(not 
;; def=LeftistHeap.fsti(32,25-32,36); use=LeftistHeap.fsti(32,25-32,36)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x1)
@x3)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fsti(29,2-32,84)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=LeftistHeap.fsti(32,25-32,84); use=LeftistHeap.fsti(32,25-32,84)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x1)
@x3)
@x6)
)

;; def=LeftistHeap.fsti(28,15-32,84); use=LeftistHeap.fsti(32,81-32,83)
(or label_3

;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,81-32,83)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,81-32,83)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,81-32,83)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,81-32,83)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,81-32,83)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,81-32,83)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,81-32,83)
(Valid 
;; def=LeftistHeap.fsti(29,2-32,84); use=LeftistHeap.fsti(32,81-32,83)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_374b44ccfcb77ed85d505dbc44265913_3)
)
)
)
 
;;no pats
:qid @query.8))
))
)
 
;;no pats
:qid @query.6)))
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.merge, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_374b44ccfcb77ed85d505dbc44265913_3, disc_equation_Prims.Cons, disc_equation_Prims.Nil, fuel_guarded_inversion_Prims.list, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec merge


; <Start encoding let rec merge>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.merge.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.merge.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.merge (Term Term Term Term) Term)
(declare-fun LeftistHeap.merge@tok () Term)
;;;;;;;;;;;;;;;;{| _: ordered t |} -> a: Prims.list t -> b: Prims.list t -> Prims.GTot (Prims.list t)
(declare-fun Tm_ghost_arrow_1c11931a959175c03dd0d36dd7049f1a () Term)

; </end encoding let rec merge>

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name LeftistHeap.merge; Namespace LeftistHeap
(assert (! (Valid (ApplyTT __uu__PartialApp
LeftistHeap.leq@tok))
:named @kick_partial_app_7004eb7be991b188ac8a74165bf7488f))
(push) ;; push{2

; Starting query at LeftistHeap.fsti(35,2-37,13)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___33 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;l : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
(declare-fun Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(34,16-37,13); use=LeftistHeap.fsti(34,16-37,13)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_113f601fbed1e4131f7b2fc47e5fca04))

:named refinement_kinding_Tm_refine_113f601fbed1e4131f7b2fc47e5fca04))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(34,16-37,13); use=LeftistHeap.fsti(34,16-37,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=LeftistHeap.fsti(34,16-37,13); use=LeftistHeap.fsti(34,16-37,13)

;; def=LeftistHeap.fsti(34,16-37,13); use=LeftistHeap.fsti(34,16-37,13)
(or 
;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(35,2-37,13)
(Valid 
;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(35,2-37,13)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fsti(34,16-37,13); use=LeftistHeap.fsti(34,16-37,13)
(and 
;; def=LeftistHeap.fsti(34,16-34,17); use=LeftistHeap.fsti(34,16-34,17)
(Valid 
;; def=LeftistHeap.fsti(34,16-34,17); use=LeftistHeap.fsti(34,16-34,17)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fsti(34,21-37,13); use=LeftistHeap.fsti(34,21-37,13)
(or 
;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(35,2-37,13)
(Valid 
;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(35,2-37,13)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fsti(34,21-37,13); use=LeftistHeap.fsti(34,21-37,13)
(and 
;; def=LeftistHeap.fsti(34,21-34,22); use=LeftistHeap.fsti(34,21-34,22)
(Valid 
;; def=LeftistHeap.fsti(34,21-34,22); use=LeftistHeap.fsti(34,21-34,22)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(35,2-37,13)
(Valid 
;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(35,2-37,13)
(Prims.precedes (Prims.list @x2)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x1
x_374b44ccfcb77ed85d505dbc44265913_2)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_113f601fbed1e4131f7b2fc47e5fca04))

:named refinement_interpretation_Tm_refine_113f601fbed1e4131f7b2fc47e5fca04))
;;;;;;;;;;;;;;;;haseq for Tm_refine_113f601fbed1e4131f7b2fc47e5fca04
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(34,16-37,13); use=LeftistHeap.fsti(34,16-37,13)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 @x0
@x1)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 @x0
@x1))))
:qid haseqTm_refine_113f601fbed1e4131f7b2fc47e5fca04))

:named haseqTm_refine_113f601fbed1e4131f7b2fc47e5fca04))
(declare-fun LeftistHeap.sorted (Term Term Term) Term)

;;;;;;;;;;;;;;;;{| _: ordered t |} -> l: Prims.list t {t << t \/ t === t /\ (_ << _ \/ _ === _ /\ l << l)}   -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_2631b544e3b541b438295d86058401a8 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_2631b544e3b541b438295d86058401a8
Tm_type)
:named kinding_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(16,17-37,13); use=LeftistHeap.fsti(34,16-37,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_2631b544e3b541b438295d86058401a8)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_2631b544e3b541b438295d86058401a8))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(16,17-37,13); use=LeftistHeap.fsti(34,16-37,13)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_2631b544e3b541b438295d86058401a8)
(and 
;; def=LeftistHeap.fsti(16,17-37,13); use=LeftistHeap.fsti(34,16-37,13)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8.1))

(IsTotFun @x0)

;; def=LeftistHeap.fsti(16,17-37,13); use=LeftistHeap.fsti(34,16-37,13)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8.2))
))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_2631b544e3b541b438295d86058401a8))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8))

:named LeftistHeap_interpretation_Tm_ghost_arrow_2631b544e3b541b438295d86058401a8))
(declare-fun LeftistHeap.sorted@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT LeftistHeap.sorted@tok
@x0)
@x1)
@x2)
(LeftistHeap.sorted @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT LeftistHeap.sorted@tok
@x0)
@x1)
@x2))
:qid token_correspondence_LeftistHeap.sorted))

:named token_correspondence_LeftistHeap.sorted))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.sorted@tok
Tm_ghost_arrow_2631b544e3b541b438295d86058401a8))

;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT LeftistHeap.sorted@tok
@x1)
@x2)
@x3)
(LeftistHeap.sorted @x1
@x2
@x3))
 

:pattern ((LeftistHeap.sorted @x1
@x2
@x3))
:qid function_token_typing_LeftistHeap.sorted.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.sorted@tok))
:qid function_token_typing_LeftistHeap.sorted))

:named function_token_typing_LeftistHeap.sorted))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Tm_refine_113f601fbed1e4131f7b2fc47e5fca04 @x0
@x1)))
(HasType (LeftistHeap.sorted @x0
@x1
@x2)
Prims.bool))
 

:pattern ((LeftistHeap.sorted @x0
@x1
@x2))
:qid typing_LeftistHeap.sorted))

:named typing_LeftistHeap.sorted))
(declare-fun label_1 () Bool)


; Encoding query formula : forall (k: Prims.pure_post Prims.bool).
;   (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (forall (b: t) (b: t) (b: Prims.list t).
;       l == b :: b :: b ==>
;       (forall (k: Prims.pure_post Prims.bool).
;           (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;           LeftistHeap.leq b b == true ==> t << t \/ (_ << _ \/ b :: b << l)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fsti(35,2-37,13)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fsti(35,2-37,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fsti(35,2-37,13)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fsti(35,2-37,13)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fsti(35,2-37,13)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fsti(35,2-37,13)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fsti(34,37-36,11); use=LeftistHeap.fsti(35,8-36,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)))
)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fsti(35,2-37,13)
(forall ((@x5 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fsti(35,2-37,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fsti(35,2-37,13)
(ApplyTT @x4
@x5)
)

 

:pattern ((ApplyTT @x4
@x5))
:qid @query.6))


;; def=LeftistHeap.fsti(36,18-36,25); use=LeftistHeap.fsti(36,18-36,25)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x1)
@x2)
(BoxBool true))
)

;; def=LeftistHeap.fsti(34,16-37,13); use=LeftistHeap.fsti(36,38-36,44)
(or label_1

;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(36,38-36,44)
(Valid 
;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(36,38-36,44)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(36,38-36,44)
(Valid 
;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(36,38-36,44)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(36,38-36,44)
(Valid 
;; def=LeftistHeap.fsti(35,2-37,13); use=LeftistHeap.fsti(36,38-36,44)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
x_374b44ccfcb77ed85d505dbc44265913_2)
)
)
)
 
;;no pats
:qid @query.5)))
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.sorted, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_2, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec sorted


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.sorted.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.sorted.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.sorted (Term Term Term) Term)
(declare-fun LeftistHeap.sorted@tok () Term)
;;;;;;;;;;;;;;;;{| _: ordered t |} -> l: Prims.list t -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_f1ad1d74d6b487dd76630e8eb493dc2e () Term)


; </end encoding let rec sorted>


; encoding sigelt let gt


; <Start encoding let gt>

(declare-fun LeftistHeap.gt (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered t |} -> a: t -> b: t -> Prims.bool
(declare-fun Tm_arrow_026fc1598c02588fd92e0033c9596b70 () Term)
(declare-fun LeftistHeap.gt@tok () Term)


; </end encoding let gt>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(18,2-18,5); use=LeftistHeap.fsti(18,2-18,5)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0)))
(HasType (LeftistHeap.__proj__Mkordered__item__leq @x0
@x1)
(Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x0)))
 

:pattern ((LeftistHeap.__proj__Mkordered__item__leq @x0
@x1))
:qid typing_LeftistHeap.__proj__Mkordered__item__leq))

:named typing_LeftistHeap.__proj__Mkordered__item__leq))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(18,2-18,5); use=LeftistHeap.fsti(18,2-18,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x0)
@x1)
(LeftistHeap.__proj__Mkordered__item__leq @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x0)
@x1))
:qid token_correspondence_LeftistHeap.__proj__Mkordered__item__leq))

:named token_correspondence_LeftistHeap.__proj__Mkordered__item__leq))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__properties; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(20,22-25,3); use=LeftistHeap.fsti(20,22-25,3)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419))

:named refinement_kinding_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__properties; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(20,22-25,3); use=LeftistHeap.fsti(20,22-25,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fsti(21,4-21,23); use=LeftistHeap.fsti(21,4-21,23)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x2)

;; def=LeftistHeap.fsti(21,15-21,22); use=LeftistHeap.fsti(21,15-21,22)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x2)
@x3)
@x4)
@x4))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419.1))


;; def=LeftistHeap.fsti(22,4-22,52); use=LeftistHeap.fsti(22,4-22,52)
(forall ((@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x4
@x2)
(HasType @x5
@x2)
(HasType @x6
@x2)

;; def=LeftistHeap.fsti(22,20-22,27); use=LeftistHeap.fsti(22,20-22,27)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x2)
@x3)
@x4)
@x5))


;; def=LeftistHeap.fsti(22,31-22,38); use=LeftistHeap.fsti(22,31-22,38)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x2)
@x3)
@x5)
@x6))
)

;; def=LeftistHeap.fsti(22,44-22,51); use=LeftistHeap.fsti(22,44-22,51)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x2)
@x3)
@x4)
@x6))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419.2))


;; def=LeftistHeap.fsti(23,4-23,48); use=LeftistHeap.fsti(23,4-23,48)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
@x2)
(HasType @x5
@x2)

;; def=LeftistHeap.fsti(23,18-23,25); use=LeftistHeap.fsti(23,18-23,25)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x2)
@x3)
@x4)
@x5))


;; def=LeftistHeap.fsti(23,29-23,36); use=LeftistHeap.fsti(23,29-23,36)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x2)
@x3)
@x5)
@x4))
)

;; def=LeftistHeap.fsti(23,42-23,47); use=LeftistHeap.fsti(23,42-23,47)
(= @x4
@x5)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419.3))


;; def=LeftistHeap.fsti(24,4-24,36); use=LeftistHeap.fsti(24,4-24,36)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
@x2)
(HasType @x5
@x2))

;; def=LeftistHeap.fsti(24,17-24,35); use=LeftistHeap.fsti(24,17-24,35)
(or 
;; def=LeftistHeap.fsti(24,17-24,24); use=LeftistHeap.fsti(24,17-24,24)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x2)
@x3)
@x4)
@x5))


;; def=LeftistHeap.fsti(24,28-24,35); use=LeftistHeap.fsti(24,28-24,35)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x2)
@x3)
@x5)
@x4))
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419.4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419))

:named refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(18,2-18,5); use=LeftistHeap.fsti(18,2-18,5)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.__proj__Mkordered__item__leq @x0
@x1)
(LeftistHeap.Mkordered_leq @x1))
 

:pattern ((LeftistHeap.__proj__Mkordered__item__leq @x0
@x1))
:qid proj_equation_LeftistHeap.Mkordered_leq))

:named proj_equation_LeftistHeap.Mkordered_leq))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__leq; Namespace LeftistHeap
(assert (! (HasType Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c
Tm_type)
:named kinding_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__properties; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(20,22-25,3); use=LeftistHeap.fsti(20,22-25,3)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))))
:qid haseqTm_refine_7bf9d09a4c3fcf2fa2aa782655db3419))

:named haseqTm_refine_7bf9d09a4c3fcf2fa2aa782655db3419))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(18,2-18,5); use=LeftistHeap.fsti(18,2-18,5)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.__proj__Mkordered__item__leq@tok
Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c))

;; def=LeftistHeap.fsti(18,2-18,5); use=LeftistHeap.fsti(18,2-18,5)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.__proj__Mkordered__item__leq@tok
@x1)
@x2)
(LeftistHeap.__proj__Mkordered__item__leq @x1
@x2))
 

:pattern ((LeftistHeap.__proj__Mkordered__item__leq @x1
@x2))
:qid function_token_typing_LeftistHeap.__proj__Mkordered__item__leq.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.__proj__Mkordered__item__leq@tok))
:qid function_token_typing_LeftistHeap.__proj__Mkordered__item__leq))

:named function_token_typing_LeftistHeap.__proj__Mkordered__item__leq))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-18,22); use=LeftistHeap.fsti(16,6-18,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c))
:qid LeftistHeap_pre_typing_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c))

:named LeftistHeap_pre_typing_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__leq; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(16,6-18,22); use=LeftistHeap.fsti(16,6-18,22)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c)
(and 
;; def=LeftistHeap.fsti(16,6-18,22); use=LeftistHeap.fsti(16,6-18,22)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c.1))

(IsTotFun @x0)

;; def=LeftistHeap.fsti(16,6-18,22); use=LeftistHeap.fsti(16,6-18,22)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c))
:qid LeftistHeap_interpretation_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c))

:named LeftistHeap_interpretation_Tm_arrow_f695d11dfe22fb2f5893ec96c4b8005c))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name LeftistHeap.__proj__Mkordered__item__properties; Namespace LeftistHeap
(assert (! (Valid (ApplyTT __uu__PartialApp
LeftistHeap.__proj__Mkordered__item__leq@tok))
:named @kick_partial_app_71e331054afabca03909367c818a6e48))
(push) ;; push{2

; Starting query at LeftistHeap.fst(26,2-26,14)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)






















; Encoding query formula : forall (a: Prims.eqtype) (p: LeftistHeap.ordered a) (x: a) (y: a) (z: a).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     LeftistHeap.leq x y /\ LeftistHeap.leq y z /\
;     (forall (pure_result: Prims.unit). LeftistHeap.leq x z ==> p pure_result) ==>
;     (forall (b:
;         Prims.squash ((forall (x: a). p.leq x x) /\
;             (forall (a: a) (b: a) (c: a). p.leq a b /\ p.leq b c ==> p.leq a c) /\
;             (forall (a: a) (b: a). p.leq a b /\ p.leq b a ==> a = b) /\
;             (forall (a: a) (b: a). p.leq a b \/ p.leq b a)))
;         (any_result:
;         Prims.squash ((forall (x: a). p.leq x x) /\
;             (forall (a: a) (b: a) (c: a). p.leq a b /\ p.leq b c ==> p.leq a c) /\
;             (forall (a: a) (b: a). p.leq a b /\ p.leq b a ==> a = b) /\
;             (forall (a: a) (b: a). p.leq a b \/ p.leq b a))).
;         p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let transitivity`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0)
(HasType @x3
@x0)
(HasType @x4
@x0))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(24,18-24,25); use=LeftistHeap.fst(26,2-26,14)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x2)
@x3))


;; def=LeftistHeap.fst(24,29-24,36); use=LeftistHeap.fst(26,2-26,14)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x3)
@x4))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(26,2-26,14)
(forall ((@x6 Term))
 (! (implies (and (or label_1
(HasType @x6
Prims.unit))

;; def=LeftistHeap.fst(25,11-25,18); use=LeftistHeap.fst(26,2-26,14)
(or label_2

;; def=LeftistHeap.fst(25,11-25,18); use=LeftistHeap.fst(26,2-26,14)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x2)
@x4))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(26,2-26,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(26,2-26,14)
(ApplyTT @x5
@x6)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(26,2-26,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(26,2-26,14)
(ApplyTT @x5
@x6)
)
)
:qid @query.2))
)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(26,2-26,14)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(26,2-26,14)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(26,2-26,14)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(26,2-26,14)
(ApplyTT @x5
@x7)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.transitivity, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_LeftistHeap.Mkordered, equation_LeftistHeap.leq, fuel_guarded_inversion_LeftistHeap.ordered, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.leq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let transitivity


; <Start encoding let transitivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.transitivity (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.transitivity@tok () Term)

; </end encoding let transitivity>

(push) ;; push{2

; Starting query at LeftistHeap.fst(30,2-30,14)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




















; Encoding query formula : forall (a: Prims.eqtype) (p: LeftistHeap.ordered a) (x: a).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit). LeftistHeap.leq x x ==> p pure_result) ==>
;     (forall (b:
;         Prims.squash ((forall (x: a). p.leq x x) /\
;             (forall (a: a) (b: a) (c: a). p.leq a b /\ p.leq b c ==> p.leq a c) /\
;             (forall (a: a) (b: a). p.leq a b /\ p.leq b a ==> a = b) /\
;             (forall (a: a) (b: a). p.leq a b \/ p.leq b a)))
;         (any_result:
;         Prims.squash ((forall (x: a). p.leq x x) /\
;             (forall (a: a) (b: a) (c: a). p.leq a b /\ p.leq b c ==> p.leq a c) /\
;             (forall (a: a) (b: a). p.leq a b /\ p.leq b a ==> a = b) /\
;             (forall (a: a) (b: a). p.leq a b \/ p.leq b a))).
;         p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let reflexivity`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(30,2-30,14)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=LeftistHeap.fst(29,17-29,24); use=LeftistHeap.fst(30,2-30,14)
(or label_2

;; def=LeftistHeap.fst(29,17-29,24); use=LeftistHeap.fst(30,2-30,14)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x2)
@x2))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(30,2-30,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(30,2-30,14)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(30,2-30,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(30,2-30,14)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(30,2-30,14)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(30,2-30,14)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(30,2-30,14)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(30,2-30,14)
(ApplyTT @x3
@x5)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.reflexivity, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_LeftistHeap.leq, fuel_guarded_inversion_LeftistHeap.ordered, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, proj_equation_LeftistHeap.Mkordered_leq, refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419, token_correspondence_LeftistHeap.__proj__Mkordered__item__leq, token_correspondence_LeftistHeap.leq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let reflexivity


; <Start encoding let reflexivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.reflexivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.reflexivity@tok () Term)

; </end encoding let reflexivity>

(push) ;; push{2

; Starting query at LeftistHeap.fst(34,2-34,14)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)





















; Encoding query formula : forall (a: Prims.eqtype) (p: LeftistHeap.ordered a) (x: a) (y: a).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     LeftistHeap.leq x y /\ LeftistHeap.leq y x /\
;     (forall (pure_result: Prims.unit). x = y ==> p pure_result) ==>
;     (forall (b:
;         Prims.squash ((forall (x: a). p.leq x x) /\
;             (forall (a: a) (b: a) (c: a). p.leq a b /\ p.leq b c ==> p.leq a c) /\
;             (forall (a: a) (b: a). p.leq a b /\ p.leq b a ==> a = b) /\
;             (forall (a: a) (b: a). p.leq a b \/ p.leq b a)))
;         (any_result:
;         Prims.squash ((forall (x: a). p.leq x x) /\
;             (forall (a: a) (b: a) (c: a). p.leq a b /\ p.leq b c ==> p.leq a c) /\
;             (forall (a: a) (b: a). p.leq a b /\ p.leq b a ==> a = b) /\
;             (forall (a: a) (b: a). p.leq a b \/ p.leq b a))).
;         p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let antisymmetry`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0)
(HasType @x3
@x0))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(33,18-33,25); use=LeftistHeap.fst(34,2-34,14)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x2)
@x3))


;; def=LeftistHeap.fst(33,29-33,36); use=LeftistHeap.fst(34,2-34,14)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x3)
@x2))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(34,2-34,14)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=LeftistHeap.fst(33,47-33,52); use=LeftistHeap.fst(34,2-34,14)
(or label_2

;; def=LeftistHeap.fst(33,47-33,52); use=LeftistHeap.fst(34,2-34,14)
(= @x2
@x3)
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(34,2-34,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(34,2-34,14)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(34,2-34,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(34,2-34,14)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(34,2-34,14)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(34,2-34,14)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(34,2-34,14)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(34,2-34,14)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.antisymmetry, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_LeftistHeap.Mkordered, equation_LeftistHeap.leq, fuel_guarded_inversion_LeftistHeap.ordered, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.leq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let antisymmetry


; <Start encoding let antisymmetry>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.antisymmetry (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.antisymmetry@tok () Term)

; </end encoding let antisymmetry>

(push) ;; push{2

; Starting query at LeftistHeap.fst(38,2-38,14)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)





















; Encoding query formula : forall (a: Prims.eqtype) (p: LeftistHeap.ordered a) (x: a) (y: a).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit). LeftistHeap.leq x y \/ LeftistHeap.leq y x ==> p pure_result) ==>
;     (forall (b:
;         Prims.squash ((forall (x: a). p.leq x x) /\
;             (forall (a: a) (b: a) (c: a). p.leq a b /\ p.leq b c ==> p.leq a c) /\
;             (forall (a: a) (b: a). p.leq a b /\ p.leq b a ==> a = b) /\
;             (forall (a: a) (b: a). p.leq a b \/ p.leq b a)))
;         (any_result:
;         Prims.squash ((forall (x: a). p.leq x x) /\
;             (forall (a: a) (b: a) (c: a). p.leq a b /\ p.leq b c ==> p.leq a c) /\
;             (forall (a: a) (b: a). p.leq a b /\ p.leq b a ==> a = b) /\
;             (forall (a: a) (b: a). p.leq a b \/ p.leq b a))).
;         p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let total_order`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0)
(HasType @x3
@x0))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(38,2-38,14)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=LeftistHeap.fst(37,17-37,35); use=LeftistHeap.fst(38,2-38,14)
(or label_2

;; def=LeftistHeap.fst(37,17-37,24); use=LeftistHeap.fst(38,2-38,14)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x2)
@x3))


;; def=LeftistHeap.fst(37,28-37,35); use=LeftistHeap.fst(38,2-38,14)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x3)
@x2))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(38,2-38,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(38,2-38,14)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(38,2-38,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(38,2-38,14)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(38,2-38,14)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(38,2-38,14)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419 @x0
@x1))

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(38,2-38,14)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(38,2-38,14)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.total_order, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_LeftistHeap.Mkordered, equation_LeftistHeap.leq, fuel_guarded_inversion_LeftistHeap.ordered, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, proj_equation_LeftistHeap.Mkordered_leq, refinement_interpretation_Tm_refine_7bf9d09a4c3fcf2fa2aa782655db3419, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.__proj__Mkordered__item__leq, token_correspondence_LeftistHeap.leq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let total_order


; <Start encoding let total_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.total_order (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.total_order@tok () Term)

; </end encoding let total_order>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
(push) ;; push{2

; Starting query at LeftistHeap.fst(40,0-44,1)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : (forall (x: Prims.int). x <= x) /\
; (forall (a: Prims.int) (b: Prims.int) (c: Prims.int). a <= b /\ b <= c ==> a <= c) /\
; (forall (a: Prims.int) (b: Prims.int). a <= b /\ b <= a ==> a = b) /\
; (forall (a: Prims.int) (b: Prims.int). a <= b \/ b <= a)


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let ints_leq`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fsti(20,22-25,3); use=LeftistHeap.fst(43,15-43,17)
(and 
;; def=LeftistHeap.fsti(21,4-21,23); use=LeftistHeap.fst(43,15-43,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.int)

;; def=LeftistHeap.fsti(21,15-21,22); use=LeftistHeap.fst(43,15-43,17)
(or label_1

;; def=LeftistHeap.fsti(21,15-21,22); use=LeftistHeap.fst(43,15-43,17)
(<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x0))
)
)
 
;;no pats
:qid @query))


;; def=LeftistHeap.fsti(22,4-22,52); use=LeftistHeap.fst(43,15-43,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int)
(HasType @x2
Prims.int)

;; def=LeftistHeap.fsti(22,20-22,27); use=LeftistHeap.fst(43,15-43,17)
(<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))


;; def=LeftistHeap.fsti(22,31-22,38); use=LeftistHeap.fst(43,15-43,17)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
)

;; def=LeftistHeap.fsti(22,44-22,51); use=LeftistHeap.fst(43,15-43,17)
(or label_2

;; def=LeftistHeap.fsti(22,44-22,51); use=LeftistHeap.fst(43,15-43,17)
(<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x2))
)
)
 
;;no pats
:qid @query.1))


;; def=LeftistHeap.fsti(23,4-23,48); use=LeftistHeap.fst(43,15-43,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int)

;; def=LeftistHeap.fsti(23,18-23,25); use=LeftistHeap.fst(43,15-43,17)
(<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))


;; def=LeftistHeap.fsti(23,29-23,36); use=LeftistHeap.fst(43,15-43,17)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x0))
)

;; def=LeftistHeap.fsti(23,42-23,47); use=LeftistHeap.fst(43,15-43,17)
(or label_3

;; def=LeftistHeap.fsti(23,42-23,47); use=LeftistHeap.fst(43,15-43,17)
(= @x0
@x1)
)
)
 
;;no pats
:qid @query.2))


;; def=LeftistHeap.fsti(24,4-24,36); use=LeftistHeap.fst(43,15-43,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))

;; def=LeftistHeap.fsti(24,17-24,35); use=LeftistHeap.fst(43,15-43,17)
(or label_4

;; def=LeftistHeap.fsti(24,17-24,24); use=LeftistHeap.fst(43,15-43,17)
(<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))


;; def=LeftistHeap.fsti(24,28-24,35); use=LeftistHeap.fst(43,15-43,17)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x0))
)
)
 
;;no pats
:qid @query.3))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.ints_leq, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, int_inversion

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let ints_leq


; <Start encoding let ints_leq>

(declare-fun LeftistHeap.ints_leq (Dummy_sort) Term)

; </end encoding let ints_leq>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! (HasType Tm_refine_41bb1fe33d2856748d537571528d32a1
Tm_type)
:named refinement_kinding_Tm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! 
;; def=FStar.Char.fsti(57,16-57,70); use=FStar.Char.fsti(57,16-57,70)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_41bb1fe33d2856748d537571528d32a1)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Char.fsti(57,24-57,68); use=FStar.Char.fsti(57,24-57,68)
(or 
;; def=FStar.Char.fsti(57,24-57,34); use=FStar.Char.fsti(57,24-57,34)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 55295)))


;; def=FStar.Char.fsti(57,38-57,68); use=FStar.Char.fsti(57,38-57,68)
(and 
;; def=FStar.Char.fsti(57,39-57,50); use=FStar.Char.fsti(57,39-57,50)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 57344)))


;; def=FStar.Char.fsti(57,54-57,67); use=FStar.Char.fsti(57,54-57,67)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 1114111)))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_41bb1fe33d2856748d537571528d32a1))
:qid refinement_interpretation_Tm_refine_41bb1fe33d2856748d537571528d32a1))

:named refinement_interpretation_Tm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_41bb1fe33d2856748d537571528d32a1
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! (iff (Valid (Prims.hasEq Tm_refine_41bb1fe33d2856748d537571528d32a1))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
(push) ;; push{2

; Starting query at LeftistHeap.fst(46,0-50,1)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : Prims.hasEq Prims.nat /\
; (forall (any_result: Type0).
;     Prims.nat == any_result ==>
;     (forall (x: Prims.nat). x <= x) /\
;     (forall (a: Prims.nat) (b: Prims.nat) (c: Prims.nat). a <= b /\ b <= c ==> a <= c) /\
;     (forall (a: Prims.nat) (b: Prims.nat). a <= b /\ b <= a ==> a = b) /\
;     (forall (a: Prims.nat) (b: Prims.nat). a <= b \/ b <= a))


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let nats_leq`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(48,2-49,17)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(48,2-49,17)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(48,2-49,17)
(Prims.hasEq Prims.nat)
)
)


;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)

;; def=LeftistHeap.fsti(16,15-16,16); use=LeftistHeap.fsti(16,15-16,16)
(= Prims.nat
@x0)
)

;; def=LeftistHeap.fsti(20,22-25,3); use=LeftistHeap.fst(49,15-49,17)
(and 
;; def=LeftistHeap.fsti(21,4-21,23); use=LeftistHeap.fst(49,15-49,17)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)

;; def=LeftistHeap.fsti(21,15-21,22); use=LeftistHeap.fst(49,15-49,17)
(or label_2

;; def=LeftistHeap.fsti(21,15-21,22); use=LeftistHeap.fst(49,15-49,17)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x1))
)
)
 
;;no pats
:qid @query.1))


;; def=LeftistHeap.fsti(22,4-22,52); use=LeftistHeap.fst(49,15-49,17)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Prims.nat)
(HasType @x3
Prims.nat)

;; def=LeftistHeap.fsti(22,20-22,27); use=LeftistHeap.fst(49,15-49,17)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))


;; def=LeftistHeap.fsti(22,31-22,38); use=LeftistHeap.fst(49,15-49,17)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x3))
)

;; def=LeftistHeap.fsti(22,44-22,51); use=LeftistHeap.fst(49,15-49,17)
(or label_3

;; def=LeftistHeap.fsti(22,44-22,51); use=LeftistHeap.fst(49,15-49,17)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x3))
)
)
 
;;no pats
:qid @query.2))


;; def=LeftistHeap.fsti(23,4-23,48); use=LeftistHeap.fst(49,15-49,17)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Prims.nat)

;; def=LeftistHeap.fsti(23,18-23,25); use=LeftistHeap.fst(49,15-49,17)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))


;; def=LeftistHeap.fsti(23,29-23,36); use=LeftistHeap.fst(49,15-49,17)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))
)

;; def=LeftistHeap.fsti(23,42-23,47); use=LeftistHeap.fst(49,15-49,17)
(or label_4

;; def=LeftistHeap.fsti(23,42-23,47); use=LeftistHeap.fst(49,15-49,17)
(= @x1
@x2)
)
)
 
;;no pats
:qid @query.3))


;; def=LeftistHeap.fsti(24,4-24,36); use=LeftistHeap.fst(49,15-49,17)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Prims.nat))

;; def=LeftistHeap.fsti(24,17-24,35); use=LeftistHeap.fst(49,15-49,17)
(or label_5

;; def=LeftistHeap.fsti(24,17-24,24); use=LeftistHeap.fst(49,15-49,17)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))


;; def=LeftistHeap.fsti(24,28-24,35); use=LeftistHeap.fst(49,15-49,17)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.nats_leq, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let nats_leq


; <Start encoding let nats_leq>

(declare-fun LeftistHeap.nats_leq (Dummy_sort) Term)


; </end encoding let nats_leq>


; encoding sigelt let delta


; <Start encoding let delta>

(declare-fun LeftistHeap.delta (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> y: a -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_fc5d44711c239212d28f531d5ce974e5 () Term)
(declare-fun LeftistHeap.delta@tok () Term)

; </end encoding let delta>

;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.delta; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(56,4-56,9); use=LeftistHeap.fst(56,4-56,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (LeftistHeap.delta @x0
@x1
@x2)
Prims.int))
 

:pattern ((LeftistHeap.delta @x0
@x1
@x2))
:qid typing_LeftistHeap.delta))

:named typing_LeftistHeap.delta))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.delta
;;; Fact-ids: Name LeftistHeap.delta; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(56,4-56,9); use=LeftistHeap.fst(56,4-56,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.delta @x0
@x1
@x2)
(let ((@lb3 (Prims.op_Equality @x0
@x1
@x2)))
(ite (= @lb3
(BoxBool true))
(BoxInt 1)
(BoxInt 0))))
 

:pattern ((LeftistHeap.delta @x0
@x1
@x2))
:qid equation_LeftistHeap.delta))

:named equation_LeftistHeap.delta))
(push) ;; push{2

; Starting query at LeftistHeap.fst(59,2-61,33)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;l : Prims.list a (Prims.list a)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_1 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_1
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_1
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_1))
;;;;;;;;;;;;;;;;y : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_2 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_2
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_2
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_2))
(declare-fun Tm_refine_c122ba2f0e763399af2de82b84fb19ce (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_c122ba2f0e763399af2de82b84fb19ce @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_c122ba2f0e763399af2de82b84fb19ce @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_c122ba2f0e763399af2de82b84fb19ce))

:named refinement_kinding_Tm_refine_c122ba2f0e763399af2de82b84fb19ce))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c122ba2f0e763399af2de82b84fb19ce @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)

;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(or 
;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(59,2-61,33)
(Valid 
;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(59,2-61,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(and 
;; def=LeftistHeap.fst(58,16-58,17); use=LeftistHeap.fst(58,16-58,17)
(Valid 
;; def=LeftistHeap.fst(58,16-58,17); use=LeftistHeap.fst(58,16-58,17)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(58,28-61,33); use=LeftistHeap.fst(58,28-61,33)
(or 
;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(59,2-61,33)
(Valid 
;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(59,2-61,33)
(Prims.precedes (Prims.list @x2)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_1)
)


;; def=LeftistHeap.fst(58,28-61,33); use=LeftistHeap.fst(58,28-61,33)
(and 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(58,28-58,29)
(Valid 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(58,28-58,29)
(Prims.op_Equals_Equals_Equals (Prims.list @x2)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_1)
)


;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(59,2-61,33)
(Valid 
;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(59,2-61,33)
(Prims.precedes @x2
x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_2)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c122ba2f0e763399af2de82b84fb19ce @x2
@x3)))
:qid refinement_interpretation_Tm_refine_c122ba2f0e763399af2de82b84fb19ce))

:named refinement_interpretation_Tm_refine_c122ba2f0e763399af2de82b84fb19ce))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c122ba2f0e763399af2de82b84fb19ce
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c122ba2f0e763399af2de82b84fb19ce @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c122ba2f0e763399af2de82b84fb19ce @x0
@x1))))
:qid haseqTm_refine_c122ba2f0e763399af2de82b84fb19ce))

:named haseqTm_refine_c122ba2f0e763399af2de82b84fb19ce))
(declare-fun LeftistHeap.count (Term Term Term) Term)

;;;;;;;;;;;;;;;;l: Prims.list a -> y: a{a << a \/ a === a /\ (l << l \/ l === l /\ y << y)} -> Prims.GTot Prims.nat
(declare-fun Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87
Tm_type)
:named kinding_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87)
(and 
;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(Prims.list @x1))
(HasType @x3
(Tm_refine_c122ba2f0e763399af2de82b84fb19ce @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Prims.nat))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87.1))

(IsTotFun @x0)

;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(58,16-61,33)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87.2))
))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87))

:named LeftistHeap_interpretation_Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87))
(declare-fun LeftistHeap.count@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT LeftistHeap.count@tok
@x0)
@x1)
@x2)
(LeftistHeap.count @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT LeftistHeap.count@tok
@x0)
@x1)
@x2))
:qid token_correspondence_LeftistHeap.count))

:named token_correspondence_LeftistHeap.count))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.count@tok
Tm_ghost_arrow_3e66d46811ad3aa77469590003927a87))

;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT LeftistHeap.count@tok
@x1)
@x2)
@x3)
(LeftistHeap.count @x1
@x2
@x3))
 

:pattern ((LeftistHeap.count @x1
@x2
@x3))
:qid function_token_typing_LeftistHeap.count.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.count@tok))
:qid function_token_typing_LeftistHeap.count))

:named function_token_typing_LeftistHeap.count))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Tm_refine_c122ba2f0e763399af2de82b84fb19ce @x0
@x1)))
(HasType (LeftistHeap.count @x0
@x1
@x2)
Prims.nat))
 

:pattern ((LeftistHeap.count @x0
@x1
@x2))
:qid typing_LeftistHeap.count))

:named typing_LeftistHeap.count))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.nat).
;   (forall (x: Prims.nat). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;   (~(Nil? l) ==>
;     (forall (b: a) (b: Prims.list a).
;         l == b :: b ==>
;         (forall (any_result: Prims.int).
;             LeftistHeap.delta b y == any_result ==>
;             (a << a \/ (b << l \/ b === l /\ y << y)) /\
;             (forall (any_result: a).
;                 y == any_result ==>
;                 (forall (any_result: Prims.nat).
;                     LeftistHeap.count b y == any_result ==>
;                     (forall (return_val: Prims.nat).
;                         return_val == LeftistHeap.count b y ==>
;                         LeftistHeap.count b y == return_val ==>
;                         (forall (any_result: Prims.int).
;                             LeftistHeap.delta b y + LeftistHeap.count b y == any_result ==>
;                             LeftistHeap.delta b y + LeftistHeap.count b y >= 0)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec count`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.nat))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(59,2-61,33)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(59,2-61,33)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(59,2-61,33)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(59,2-61,33)
(and (implies 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(59,8-59,9)
(and 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(59,8-59,9)
(not 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(59,8-59,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_1))
)


;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(59,8-59,9)
(not 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(59,8-59,9)
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_1))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(59,2-61,33)
(not 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(59,8-59,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_1))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(59,2-61,33)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(59,2-61,33)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(58,28-61,8); use=LeftistHeap.fst(59,8-61,8)
(= x_374b44ccfcb77ed85d505dbc44265913_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
@x2))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(59,2-61,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.int)

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(59,2-61,33)
(= (LeftistHeap.delta x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_2)
@x3)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(59,2-61,33)
(and 
;; def=LeftistHeap.fst(58,16-61,33); use=LeftistHeap.fst(61,32-61,33)
(or label_2

;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(61,32-61,33)
(Valid 
;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(61,32-61,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(61,32-61,33)
(Valid 
;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(61,32-61,33)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_374b44ccfcb77ed85d505dbc44265913_1)
)


;; def=LeftistHeap.fst(58,28-61,33); use=LeftistHeap.fst(61,32-61,33)
(and 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(61,32-61,33)
(Valid 
;; def=LeftistHeap.fst(58,28-58,29); use=LeftistHeap.fst(61,32-61,33)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_374b44ccfcb77ed85d505dbc44265913_1)
)


;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(61,32-61,33)
(Valid 
;; def=LeftistHeap.fst(59,2-61,33); use=LeftistHeap.fst(61,32-61,33)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_2
x_157b99e815dc43d99415725267e9c452_2)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(59,2-61,33)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(58,39-58,40); use=LeftistHeap.fst(59,2-61,33)
(= x_157b99e815dc43d99415725267e9c452_2
@x4)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(59,2-61,33)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=LeftistHeap.fst(58,47-61,33); use=LeftistHeap.fst(61,24-61,33)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_2)
@x5)
)

;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(59,2-61,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(59,2-61,33)
(= @x6
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_2))


;; def=dummy(0,0-0,0); use=LeftistHeap.fst(59,2-61,33)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_2)
@x6)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(59,2-61,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.int)

;; def=LeftistHeap.fst(58,47-61,33); use=LeftistHeap.fst(59,2-61,33)
(= (Prims.op_Addition (LeftistHeap.delta x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_2)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_2))
@x7)
)

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(61,12-61,33)
(or label_3

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(61,12-61,33)
(>= (BoxInt_proj_0 (Prims.op_Addition (LeftistHeap.delta x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_2)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_2)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.count, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_1, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_LeftistHeap.delta, equation_Prims.nat, fuel_guarded_inversion_Prims.list, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec count


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.count.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.count (Term Term Term) Term)
(declare-fun LeftistHeap.count@tok () Term)
;;;;;;;;;;;;;;;;l: Prims.list a -> y: a -> Prims.GTot Prims.nat
(declare-fun Tm_ghost_arrow_fd0fcd7f14c7e9355e7b313a7d83dd22 () Term)

; </end encoding let rec count>

(push) ;; push{2

; Starting query at LeftistHeap.fst(64,2-66,40)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___1 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;l : Prims.list a (Prims.list a)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;m : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_3 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_3
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_3
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_3))
(declare-fun Tm_refine_e416ac7d3c994da66ed10009dcad86dc (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_e416ac7d3c994da66ed10009dcad86dc @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_e416ac7d3c994da66ed10009dcad86dc @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_e416ac7d3c994da66ed10009dcad86dc))

:named refinement_kinding_Tm_refine_e416ac7d3c994da66ed10009dcad86dc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e416ac7d3c994da66ed10009dcad86dc @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)

;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(or 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(64,2-66,40)
(Valid 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(64,2-66,40)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(and 
;; def=LeftistHeap.fst(63,23-63,24); use=LeftistHeap.fst(63,23-63,24)
(Valid 
;; def=LeftistHeap.fst(63,23-63,24); use=LeftistHeap.fst(63,23-63,24)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(63,28-66,40); use=LeftistHeap.fst(63,28-66,40)
(or 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(64,2-66,40)
(Valid 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(64,2-66,40)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(63,28-66,40); use=LeftistHeap.fst(63,28-66,40)
(and 
;; def=LeftistHeap.fst(63,28-63,29); use=LeftistHeap.fst(63,28-63,29)
(Valid 
;; def=LeftistHeap.fst(63,28-63,29); use=LeftistHeap.fst(63,28-63,29)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(63,46-66,40); use=LeftistHeap.fst(63,46-66,40)
(or 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(64,2-66,40)
(Valid 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(64,2-66,40)
(Prims.precedes (Prims.list @x2)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(63,46-66,40); use=LeftistHeap.fst(63,46-66,40)
(and 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(63,46-63,47)
(Valid 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(63,46-63,47)
(Prims.op_Equals_Equals_Equals (Prims.list @x2)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(64,2-66,40)
(Valid 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(64,2-66,40)
(Prims.precedes @x2
x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e416ac7d3c994da66ed10009dcad86dc @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_e416ac7d3c994da66ed10009dcad86dc))

:named refinement_interpretation_Tm_refine_e416ac7d3c994da66ed10009dcad86dc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e416ac7d3c994da66ed10009dcad86dc
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e416ac7d3c994da66ed10009dcad86dc @x0
@x1
@x2)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e416ac7d3c994da66ed10009dcad86dc @x0
@x1
@x2))))
:qid haseqTm_refine_e416ac7d3c994da66ed10009dcad86dc))

:named haseqTm_refine_e416ac7d3c994da66ed10009dcad86dc))
(declare-fun LeftistHeap.lower_bounded (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;{| _: ordered a |} ->     l: Prims.list a ->     m: a{a << a \/ a === a /\ (_ << _ \/ _ === _ /\ (l << l \/ l === l /\ m << m))}   -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3
Tm_type)
:named kinding_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3)
(and 
;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Prims.list @x1))
(HasType @x4
(Tm_refine_e416ac7d3c994da66ed10009dcad86dc @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3.1))

(IsTotFun @x0)

;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3.2))


;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(63,23-66,40)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3.3))
))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3))

:named LeftistHeap_interpretation_Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3))
(declare-fun LeftistHeap.lower_bounded@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.lower_bounded@tok
@x0)
@x1)
@x2)
@x3)
(LeftistHeap.lower_bounded @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.lower_bounded@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_LeftistHeap.lower_bounded))

:named token_correspondence_LeftistHeap.lower_bounded))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.lower_bounded@tok
Tm_ghost_arrow_55a6cbbb5c99c0ea75e69e30c7b13be3))

;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.lower_bounded@tok
@x1)
@x2)
@x3)
@x4)
(LeftistHeap.lower_bounded @x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.lower_bounded @x1
@x2
@x3
@x4))
:qid function_token_typing_LeftistHeap.lower_bounded.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.lower_bounded@tok))
:qid function_token_typing_LeftistHeap.lower_bounded))

:named function_token_typing_LeftistHeap.lower_bounded))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Prims.list @x0))
(HasType @x3
(Tm_refine_e416ac7d3c994da66ed10009dcad86dc @x0
@x1
@x2)))
(HasType (LeftistHeap.lower_bounded @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((LeftistHeap.lower_bounded @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.lower_bounded))

:named typing_LeftistHeap.lower_bounded))
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (k: Prims.pure_post Prims.bool).
;   (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;   (~(Nil? l) ==>
;     (forall (b: a) (b: Prims.list a).
;         l == b :: b ==> LeftistHeap.leq m b ==> a << a \/ (_ << _ \/ (b << l \/ b === l /\ m << m)))
;   )


; Context: While encoding a query
; While typechecking the top-level declaration `let rec lower_bounded`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(64,2-66,40)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(64,2-66,40)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(64,2-66,40)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(64,2-66,40)
(and (implies 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(64,8-64,9)
(and 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(64,8-64,9)
(not 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(64,8-64,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)


;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(64,8-64,9)
(not 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(64,8-64,9)
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(64,2-66,40)
(not 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(64,8-64,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(64,2-66,40)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(64,2-66,40)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(63,46-66,8); use=LeftistHeap.fst(64,8-66,8)
(= x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
@x2))


;; def=LeftistHeap.fst(66,12-66,19); use=LeftistHeap.fst(66,12-66,19)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_3)
@x1))
)

;; def=LeftistHeap.fst(63,23-66,40); use=LeftistHeap.fst(66,39-66,40)
(or label_2

;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(66,39-66,40)
(Valid 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(66,39-66,40)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(66,39-66,40)
(Valid 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(66,39-66,40)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(66,39-66,40)
(Valid 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(66,39-66,40)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(63,46-66,40); use=LeftistHeap.fst(66,39-66,40)
(and 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(66,39-66,40)
(Valid 
;; def=LeftistHeap.fst(63,46-63,47); use=LeftistHeap.fst(66,39-66,40)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(66,39-66,40)
(Valid 
;; def=LeftistHeap.fst(64,2-66,40); use=LeftistHeap.fst(66,39-66,40)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_3
x_157b99e815dc43d99415725267e9c452_3)
)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.lower_bounded, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_f0062e810d23900aea914a963397c69a_1, disc_equation_Prims.Cons, disc_equation_Prims.Nil, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec lower_bounded


; <Start encoding let rec lower_bounded>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.lower_bounded.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.lower_bounded.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.lower_bounded (Term Term Term Term) Term)
(declare-fun LeftistHeap.lower_bounded@tok () Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> l: Prims.list a -> m: a -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_3f11dd17c4edbe891667cef1af2c67bd () Term)


; </end encoding let rec lower_bounded>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.lower_bounded; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Prims.list @x0))
(HasType @x3
@x0))
(HasType (LeftistHeap.lower_bounded @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((LeftistHeap.lower_bounded @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.lower_bounded))

:named typing_LeftistHeap.lower_bounded))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.lower_bounded; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Prims.list @x1))
(HasType @x4
@x1))
(HasType (LeftistHeap.lower_bounded.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
Prims.bool))
 

:pattern ((LeftistHeap.lower_bounded.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_LeftistHeap.lower_bounded.fuel_instrumented))

:named token_correspondence_LeftistHeap.lower_bounded.fuel_instrumented))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.lower_bounded
;;; Fact-ids: Name LeftistHeap.lower_bounded; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Prims.list @x1))
(HasType @x4
@x1))
(= (LeftistHeap.lower_bounded.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 @x3))
(ite (is-Prims.Nil @lb5)
(BoxBool true)
(ite (is-Prims.Cons @lb5)
(Prims.op_AmpAmp (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x1)
@x2)
@x4)
(Prims.Cons_hd @lb5))
(LeftistHeap.lower_bounded.fuel_instrumented @u0
@x1
@x2
(Prims.Cons_tl @lb5)
@x4))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.lower_bounded.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_LeftistHeap.lower_bounded.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.lower_bounded.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.lower_bounded; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.lower_bounded.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(LeftistHeap.lower_bounded.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.lower_bounded.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_LeftistHeap.lower_bounded.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.lower_bounded.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.lower_bounded; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(63,8-63,21); use=LeftistHeap.fst(63,8-63,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.lower_bounded @x0
@x1
@x2
@x3)
(LeftistHeap.lower_bounded.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.lower_bounded @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(70,2-72,63)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___2 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;l : Prims.list a (Prims.list a)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;m1 : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_3 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_3
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_3
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_3))
;;;;;;;;;;;;;;;;m2 : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_4 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_4
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_4
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.lower_bounded_trans (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.lower_bounded_trans@tok () Term)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)






; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.lower_bounded l m1 /\ LeftistHeap.leq m2 m1 /\
;   (forall (pure_result: Prims.unit). LeftistHeap.lower_bounded l m2 ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: a) (b: Prims.list a).
;             l == b :: b ==>
;             LeftistHeap.leq m2 m1 /\ LeftistHeap.leq m1 b /\
;             (forall (pure_result: Prims.unit).
;                 LeftistHeap.leq m2 b ==>
;                 (a << a \/ (_ << _ \/ (b << l \/ b === l /\ (m1 << m1 \/ m2 << m2)))) /\
;                 (forall (any_result: a).
;                     m2 == any_result ==>
;                     LeftistHeap.lower_bounded b m1 /\ LeftistHeap.leq m2 m1 /\
;                     (forall (pure_result: Prims.unit).
;                         LeftistHeap.lower_bounded b m2 ==> k pure_result))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec lower_bounded_trans`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(70,2-72,63)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(69,18-69,36); use=LeftistHeap.fst(70,2-72,63)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
x_157b99e815dc43d99415725267e9c452_3))


;; def=LeftistHeap.fst(69,40-69,49); use=LeftistHeap.fst(70,2-72,63)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_4)
x_157b99e815dc43d99415725267e9c452_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(70,2-72,63)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(69,60-69,78); use=LeftistHeap.fst(70,2-72,63)
(or label_2

;; def=LeftistHeap.fst(69,60-69,78); use=LeftistHeap.fst(70,2-72,63)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
x_157b99e815dc43d99415725267e9c452_4))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(70,2-72,63)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(70,2-72,63)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(70,2-72,63)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(70,2-72,63)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(70,2-72,63)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(70,2-72,63)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(70,2-72,63)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(70,2-72,63)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(70,2-72,63)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(70,2-72,63)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(70,2-72,63)
(and (implies 
;; def=LeftistHeap.fst(68,52-68,53); use=LeftistHeap.fst(70,8-70,9)
(and 
;; def=LeftistHeap.fst(68,52-68,53); use=LeftistHeap.fst(70,8-70,9)
(not 
;; def=LeftistHeap.fst(68,52-68,53); use=LeftistHeap.fst(70,8-70,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)


;; def=LeftistHeap.fst(68,52-68,53); use=LeftistHeap.fst(70,8-70,9)
(not 
;; def=LeftistHeap.fst(68,52-68,53); use=LeftistHeap.fst(70,8-70,9)
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)
)

label_3)
(implies 
;; def=LeftistHeap.fst(68,52-71,6); use=LeftistHeap.fst(70,8-71,6)
(= x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.Nil x_9cd1733a5204f989dbb2f01d5984df93_0))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(70,2-72,63)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(70,2-72,63)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(70,2-72,63)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(70,2-72,63)
(not 
;; def=LeftistHeap.fst(68,52-68,53); use=LeftistHeap.fst(70,8-70,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(70,2-72,63)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(70,2-72,63)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(68,52-72,8); use=LeftistHeap.fst(70,8-72,8)
(= x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3))
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(72,13-72,25)
(and 
;; def=LeftistHeap.fst(24,18-24,25); use=LeftistHeap.fst(72,13-72,25)
(or label_4

;; def=LeftistHeap.fst(24,18-24,25); use=LeftistHeap.fst(72,13-72,25)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_4)
x_157b99e815dc43d99415725267e9c452_3))
)


;; def=LeftistHeap.fst(24,29-24,36); use=LeftistHeap.fst(72,13-72,25)
(or label_5

;; def=LeftistHeap.fst(24,29-24,36); use=LeftistHeap.fst(72,13-72,25)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_3)
@x2))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(72,13-72,25)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=LeftistHeap.fst(25,11-25,18); use=LeftistHeap.fst(72,13-72,25)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_4)
@x2))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(70,2-72,63)
(and 
;; def=LeftistHeap.fst(68,29-72,63); use=LeftistHeap.fst(72,60-72,62)
(or label_6

;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Valid 
;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Valid 
;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Valid 
;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(68,52-72,63); use=LeftistHeap.fst(72,60-72,62)
(and 
;; def=LeftistHeap.fst(68,52-68,53); use=LeftistHeap.fst(72,60-72,62)
(Valid 
;; def=LeftistHeap.fst(68,52-68,53); use=LeftistHeap.fst(72,60-72,62)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(68,63-72,63); use=LeftistHeap.fst(72,60-72,62)
(or 
;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Valid 
;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_3
x_157b99e815dc43d99415725267e9c452_3)
)


;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Valid 
;; def=LeftistHeap.fst(70,2-72,63); use=LeftistHeap.fst(72,60-72,62)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_4
x_157b99e815dc43d99415725267e9c452_4)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(70,2-72,63)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(68,66-68,68); use=LeftistHeap.fst(70,2-72,63)
(= x_157b99e815dc43d99415725267e9c452_4
@x5)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(72,35-72,54)
(and 
;; def=LeftistHeap.fst(69,18-69,36); use=LeftistHeap.fst(72,35-72,54)
(or label_7

;; def=LeftistHeap.fst(69,18-69,36); use=LeftistHeap.fst(72,35-72,54)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_3))
)


;; def=LeftistHeap.fst(69,40-69,49); use=LeftistHeap.fst(72,35-72,54)
(or label_8

;; def=LeftistHeap.fst(69,40-69,49); use=LeftistHeap.fst(72,35-72,54)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_4)
x_157b99e815dc43d99415725267e9c452_3))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(72,35-72,54)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=LeftistHeap.fst(69,60-69,78); use=LeftistHeap.fst(72,35-72,54)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_4))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(72,35-72,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(72,35-72,54)
(ApplyTT @x1
@x6)
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.lower_bounded_trans, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, binder_x_157b99e815dc43d99415725267e9c452_3, binder_x_157b99e815dc43d99415725267e9c452_4, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_LeftistHeap.Mkordered, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_LeftistHeap.leq, equation_with_fuel_LeftistHeap.lower_bounded.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_AmpAmp, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_Prims.Cons, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, typing_LeftistHeap.lower_bounded

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec lower_bounded_trans


; <Start encoding let rec lower_bounded_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.lower_bounded_trans (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.lower_bounded_trans@tok () Term)

; </end encoding let rec lower_bounded_trans>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,11-616,13); use=Prims.fst(616,11-616,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (Prims.__proj__Cons__item__hd @x0
@x1)
@x0))
 

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid typing_Prims.__proj__Cons__item__hd))

:named typing_Prims.__proj__Cons__item__hd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.sorted; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Prims.list @x0)))
(HasType (LeftistHeap.sorted @x0
@x1
@x2)
Prims.bool))
 

:pattern ((LeftistHeap.sorted @x0
@x1
@x2))
:qid typing_LeftistHeap.sorted))

:named typing_LeftistHeap.sorted))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.sorted; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Prims.list @x1)))
(HasType (LeftistHeap.sorted.fuel_instrumented @u0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((LeftistHeap.sorted.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_LeftistHeap.sorted.fuel_instrumented))

:named token_correspondence_LeftistHeap.sorted.fuel_instrumented))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named refinement_kinding_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x2))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(BoxBool_proj_0 (Prims.uu___is_Cons @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x2)))
:qid refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,11-616,13); use=Prims.fst(616,11-616,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.__proj__Cons__item__hd @x0
@x1)
(Prims.Cons_hd @x1))
 

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid proj_equation_Prims.Cons_hd))

:named proj_equation_Prims.Cons_hd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0))))
:qid haseqTm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named haseqTm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.sorted
;;; Fact-ids: Name LeftistHeap.sorted; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Prims.list @x1)))
(= (LeftistHeap.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x3))
(ite (and (is-Prims.Cons @lb4)
(is-Prims.Cons (Prims.Cons_tl @lb4)))
(let ((@lb5 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x1)
@x2)
(Prims.Cons_hd @lb4))
(Prims.Cons_hd (Prims.Cons_tl @lb4)))))
(ite (= @lb5
(BoxBool true))
(LeftistHeap.sorted.fuel_instrumented @u0
@x1
@x2
(Prims.Cons @x1
(Prims.Cons_hd (Prims.Cons_tl @lb4))
(Prims.Cons_tl (Prims.Cons_tl @lb4))))
(BoxBool false)))
(BoxBool true)))))
 :weight 0


:pattern ((LeftistHeap.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_LeftistHeap.sorted.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.sorted.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.sorted; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(LeftistHeap.sorted.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_LeftistHeap.sorted.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.sorted.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.sorted; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(34,8-34,14); use=LeftistHeap.fsti(34,8-34,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.sorted @x0
@x1
@x2)
(LeftistHeap.sorted.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((LeftistHeap.sorted @x0
@x1
@x2))
:qid @fuel_correspondence_LeftistHeap.sorted.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.sorted.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(76,2-80,62)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___3 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_2 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_2
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_2
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_2))
;;;;;;;;;;;;;;;;q : Prims.list a (Prims.list a)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.sorted_then_lower_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.sorted_then_lower_bounded@tok () Term)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)





; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.sorted (t :: q) /\
;   (forall (pure_result: Prims.unit). LeftistHeap.lower_bounded (t :: q) t ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? q) /\ ~(Cons? q) ==> Prims.l_False) /\
;       (q == [] ==> (forall (pure_result: Prims.unit). LeftistHeap.leq t t ==> k pure_result)) /\
;       (~(Nil? q) ==>
;         (forall (b: a) (b: Prims.list a).
;             q == b :: b ==>
;             (forall (k: Prims.pure_post Prims.unit).
;                 (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)}
;                     (a << a \/ (_ << _ \/ (t << t \/ b << q))) /\
;                     (forall (any_result: Prims.list a).
;                         b == any_result ==>
;                         LeftistHeap.sorted (t :: b) /\
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.lower_bounded (t :: b) t ==>
;                             LeftistHeap.lower_bounded q t /\
;                             (forall (pure_result: Prims.unit).
;                                 LeftistHeap.lower_bounded q t ==> k pure_result))) ==>
;                     k x) ==>
;                 (Cons? b == true ==>
;                   Cons? b /\
;                   (forall (any_result: Prims.list a).
;                       b == any_result ==>
;                       (forall (any_result: a).
;                           b.hd == any_result ==>
;                           LeftistHeap.leq t b /\ LeftistHeap.leq b b.hd /\
;                           (forall (pure_result: Prims.unit).
;                               LeftistHeap.leq t b.hd ==> k pure_result)))) /\
;                 (~(Cons? b = true) ==>
;                   (forall (b: Prims.bool).
;                       Cons? b == b ==> (forall (any_result: Prims.unit). k any_result)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec sorted_then_lower_bounded`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(75,18-75,31); use=LeftistHeap.fst(76,2-80,62)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_2
x_374b44ccfcb77ed85d505dbc44265913_3)))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(75,42-75,64); use=LeftistHeap.fst(76,2-80,62)
(or label_2

;; def=LeftistHeap.fst(75,42-75,64); use=LeftistHeap.fst(76,2-80,62)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_2
x_374b44ccfcb77ed85d505dbc44265913_3)
x_157b99e815dc43d99415725267e9c452_2))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(76,2-80,62)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(76,2-80,62)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(76,2-80,62)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(76,2-80,62)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(76,2-80,62)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(76,2-80,62)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(76,2-80,62)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(76,2-80,62)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(76,2-80,62)
(and (implies 
;; def=LeftistHeap.fst(74,65-74,66); use=LeftistHeap.fst(76,8-76,9)
(and 
;; def=LeftistHeap.fst(74,65-74,66); use=LeftistHeap.fst(76,8-76,9)
(not 
;; def=LeftistHeap.fst(74,65-74,66); use=LeftistHeap.fst(76,8-76,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3))
)


;; def=LeftistHeap.fst(74,65-74,66); use=LeftistHeap.fst(76,8-76,9)
(not 
;; def=LeftistHeap.fst(74,65-74,66); use=LeftistHeap.fst(76,8-76,9)
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3))
)
)

label_3)
(implies 
;; def=LeftistHeap.fst(74,65-77,6); use=LeftistHeap.fst(76,8-77,6)
(= x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.Nil x_9cd1733a5204f989dbb2f01d5984df93_0))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(77,10-77,21)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.unit)

;; def=LeftistHeap.fst(29,17-29,24); use=LeftistHeap.fst(77,10-77,21)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_2)
x_157b99e815dc43d99415725267e9c452_2))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(77,10-77,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(77,10-77,21)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(76,2-80,62)
(not 
;; def=LeftistHeap.fst(74,65-74,66); use=LeftistHeap.fst(76,8-76,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(74,65-78,8); use=LeftistHeap.fst(76,8-78,8)
(= x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x5 Term))
 (! (implies 
;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(76,2-80,62)
(and 
;; def=LeftistHeap.fst(74,35-80,62); use=LeftistHeap.fst(80,32-80,33)
(or label_4

;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(80,32-80,33)
(Valid 
;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(80,32-80,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(80,32-80,33)
(Valid 
;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(80,32-80,33)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(80,32-80,33)
(Valid 
;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(80,32-80,33)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_2
x_157b99e815dc43d99415725267e9c452_2)
)


;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(80,32-80,33)
(Valid 
;; def=LeftistHeap.fst(76,2-80,62); use=LeftistHeap.fst(80,32-80,33)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_3)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(74,65-78,8); use=LeftistHeap.fst(76,2-80,62)
(= @x3
@x6)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(80,4-80,29)
(and 
;; def=LeftistHeap.fst(75,18-75,31); use=LeftistHeap.fst(80,4-80,29)
(or label_5

;; def=LeftistHeap.fst(75,18-75,31); use=LeftistHeap.fst(80,4-80,29)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_2
@x3)))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(80,4-80,29)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=LeftistHeap.fst(75,42-75,64); use=LeftistHeap.fst(80,4-80,29)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_2
@x3)
x_157b99e815dc43d99415725267e9c452_2))
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(80,35-80,41)
(and 
;; def=LeftistHeap.fst(80,42-80,61); use=LeftistHeap.fst(80,35-80,41)
(or label_6

;; def=LeftistHeap.fst(80,42-80,61); use=LeftistHeap.fst(80,35-80,41)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3
x_157b99e815dc43d99415725267e9c452_2))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(80,35-80,41)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=LeftistHeap.fst(80,42-80,61); use=LeftistHeap.fst(80,35-80,41)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3
x_157b99e815dc43d99415725267e9c452_2))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(80,35-80,41)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(80,35-80,41)
(ApplyTT @x1
@x8)
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(76,2-80,62)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(76,2-80,62)
(ApplyTT @x4
@x5)
)
)
 :weight 0


:pattern ((ApplyTT @x4
@x5))
:qid @query.8))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(76,2-80,62)
(and (implies 
;; def=LeftistHeap.fst(79,8-79,15); use=LeftistHeap.fst(79,8-79,15)
(= (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x3)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(76,2-80,62)
(and 
;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(79,48-79,49)
(or label_7

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(79,48-79,49)
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x3))
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(76,2-80,62)
(= @x3
@x5)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(23,45-79,50); use=LeftistHeap.fst(76,2-80,62)
(= (Prims.__proj__Cons__item__hd x_9cd1733a5204f989dbb2f01d5984df93_0
@x3)
@x6)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(79,21-79,33)
(and 
;; def=LeftistHeap.fst(24,18-24,25); use=LeftistHeap.fst(79,21-79,33)
(or label_8

;; def=LeftistHeap.fst(24,18-24,25); use=LeftistHeap.fst(79,21-79,33)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_2)
@x2))
)


;; def=LeftistHeap.fst(24,29-24,36); use=LeftistHeap.fst(79,21-79,33)
(or label_9

;; def=LeftistHeap.fst(24,29-24,36); use=LeftistHeap.fst(79,21-79,33)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
(Prims.__proj__Cons__item__hd x_9cd1733a5204f989dbb2f01d5984df93_0
@x3)))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(79,21-79,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=LeftistHeap.fst(25,11-25,18); use=LeftistHeap.fst(79,21-79,33)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_2)
(Prims.__proj__Cons__item__hd x_9cd1733a5204f989dbb2f01d5984df93_0
@x3)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(79,21-79,33)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(79,21-79,33)
(ApplyTT @x4
@x7)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(76,2-80,62)
(not 
;; def=LeftistHeap.fst(79,8-79,15); use=LeftistHeap.fst(79,8-79,15)
(= (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x3)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.bool)

;; def=LeftistHeap.fst(79,8-79,58); use=LeftistHeap.fst(79,8-79,58)
(= (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x3)
@x5)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(76,2-80,62)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(76,2-80,62)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(76,2-80,62)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.sorted_then_lower_bounded, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, @fuel_correspondence_LeftistHeap.sorted.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded.fuel_instrumented, @fuel_irrelevance_LeftistHeap.sorted.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, binder_x_157b99e815dc43d99415725267e9c452_2, binder_x_374b44ccfcb77ed85d505dbc44265913_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_elim_LeftistHeap.Mkordered, data_typing_intro_Prims.Cons@tok, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_LeftistHeap.leq, equation_Prims.eqtype, equation_with_fuel_LeftistHeap.lower_bounded.fuel_instrumented, equation_with_fuel_LeftistHeap.sorted.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_AmpAmp, proj_equation_Prims.Cons_hd, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, subterm_ordering_Prims.Cons, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, typing_LeftistHeap.lower_bounded, typing_LeftistHeap.sorted, typing_Prims.uu___is_Nil

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec sorted_then_lower_bounded


; <Start encoding let rec sorted_then_lower_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.sorted_then_lower_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.sorted_then_lower_bounded@tok () Term)

; </end encoding let rec sorted_then_lower_bounded>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.count; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(Prims.list @x0))
(HasType @x2
@x0))
(HasType (LeftistHeap.count @x0
@x1
@x2)
Prims.nat))
 

:pattern ((LeftistHeap.count @x0
@x1
@x2))
:qid typing_LeftistHeap.count))

:named typing_LeftistHeap.count))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.count; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(Prims.list @x1))
(HasType @x3
@x1))
(HasType (LeftistHeap.count.fuel_instrumented @u0
@x1
@x2
@x3)
Prims.nat))
 

:pattern ((LeftistHeap.count.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_LeftistHeap.count.fuel_instrumented))

:named token_correspondence_LeftistHeap.count.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.count
;;; Fact-ids: Name LeftistHeap.count; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(Prims.list @x1))
(HasType @x3
@x1))
(= (LeftistHeap.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x2))
(ite (is-Prims.Nil @lb4)
(BoxInt 0)
(ite (is-Prims.Cons @lb4)
(Prims.op_Addition (LeftistHeap.delta @x1
(Prims.Cons_hd @lb4)
@x3)
(LeftistHeap.count.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb4)
@x3))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_LeftistHeap.count.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.count.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.count; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(LeftistHeap.count.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_LeftistHeap.count.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.count.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.count; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(58,8-58,13); use=LeftistHeap.fst(58,8-58,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.count @x0
@x1
@x2)
(LeftistHeap.count.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((LeftistHeap.count @x0
@x1
@x2))
:qid @fuel_correspondence_LeftistHeap.count.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.count.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(85,2-87,65)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___4 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;l : Prims.list a (Prims.list a)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;m : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_3 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_3
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_3
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_3))
;;;;;;;;;;;;;;;;x : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_4 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_4
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_4
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.lower_bounded_and_count (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.lower_bounded_and_count@tok () Term)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.lower_bounded l m /\ LeftistHeap.count l x > 0 /\
;   (forall (pure_result: Prims.unit). LeftistHeap.leq m x ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: a) (b: Prims.list a).
;             l == b :: b ==>
;             (forall (k: Prims.pure_post Prims.unit).
;                 (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                 (b = x == true ==> (forall (any_result: Prims.unit). k any_result)) /\
;                 (~(b = x = true) ==>
;                   (forall (b: Prims.bool).
;                       b = x == b ==>
;                       (a << a \/ (_ << _ \/ (b << l \/ b === l /\ (m << m \/ x << x)))) /\
;                       (forall (any_result: a).
;                           x == any_result ==>
;                           LeftistHeap.lower_bounded b m /\ LeftistHeap.count b x > 0 /\
;                           (forall (pure_result: Prims.unit). LeftistHeap.leq m x ==> k pure_result))
;                   ))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec lower_bounded_and_count`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(84,18-84,35); use=LeftistHeap.fst(85,2-87,65)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
x_157b99e815dc43d99415725267e9c452_3))


;; def=LeftistHeap.fst(84,39-84,52); use=LeftistHeap.fst(85,2-87,65)
(> (BoxInt_proj_0 (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
x_157b99e815dc43d99415725267e9c452_4))
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(84,63-84,70); use=LeftistHeap.fst(85,2-87,65)
(or label_2

;; def=LeftistHeap.fst(84,63-84,70); use=LeftistHeap.fst(85,2-87,65)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_3)
x_157b99e815dc43d99415725267e9c452_4))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(85,2-87,65)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(85,2-87,65)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(85,2-87,65)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(85,2-87,65)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(85,2-87,65)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(85,2-87,65)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(85,2-87,65)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(85,2-87,65)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(85,2-87,65)
(and (implies 
;; def=LeftistHeap.fst(83,66-83,67); use=LeftistHeap.fst(85,8-85,9)
(and 
;; def=LeftistHeap.fst(83,66-83,67); use=LeftistHeap.fst(85,8-85,9)
(not 
;; def=LeftistHeap.fst(83,66-83,67); use=LeftistHeap.fst(85,8-85,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)


;; def=LeftistHeap.fst(83,66-83,67); use=LeftistHeap.fst(85,8-85,9)
(not 
;; def=LeftistHeap.fst(83,66-83,67); use=LeftistHeap.fst(85,8-85,9)
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)
)

label_3)
(implies 
;; def=LeftistHeap.fst(83,66-86,6); use=LeftistHeap.fst(85,8-86,6)
(= x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.Nil x_9cd1733a5204f989dbb2f01d5984df93_0))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(85,2-87,65)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(85,2-87,65)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(85,2-87,65)
(not 
;; def=LeftistHeap.fst(83,66-83,67); use=LeftistHeap.fst(85,8-85,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(83,66-87,8); use=LeftistHeap.fst(85,8-87,8)
(= x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x5 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(85,2-87,65)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(85,2-87,65)
(ApplyTT @x1
@x5)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(85,2-87,65)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(85,2-87,65)
(ApplyTT @x4
@x5)
)
)
 :weight 0


:pattern ((ApplyTT @x4
@x5))
:qid @query.8))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(85,2-87,65)
(and (implies 
;; def=LeftistHeap.fst(87,15-87,22); use=LeftistHeap.fst(87,15-87,22)
(= (Prims.op_Equality x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_4)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(85,2-87,65)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(85,2-87,65)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.9))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(85,2-87,65)
(not 
;; def=LeftistHeap.fst(87,15-87,22); use=LeftistHeap.fst(87,15-87,22)
(= (Prims.op_Equality x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_4)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.bool)

;; def=LeftistHeap.fst(87,15-87,65); use=LeftistHeap.fst(87,15-87,65)
(= (Prims.op_Equality x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_4)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(85,2-87,65)
(and 
;; def=LeftistHeap.fst(83,34-87,65); use=LeftistHeap.fst(87,64-87,65)
(or label_4

;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Valid 
;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Valid 
;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Valid 
;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(83,66-87,65); use=LeftistHeap.fst(87,64-87,65)
(and 
;; def=LeftistHeap.fst(83,66-83,67); use=LeftistHeap.fst(87,64-87,65)
(Valid 
;; def=LeftistHeap.fst(83,66-83,67); use=LeftistHeap.fst(87,64-87,65)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(83,78-87,65); use=LeftistHeap.fst(87,64-87,65)
(or 
;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Valid 
;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_3
x_157b99e815dc43d99415725267e9c452_3)
)


;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Valid 
;; def=LeftistHeap.fst(85,2-87,65); use=LeftistHeap.fst(87,64-87,65)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_4
x_157b99e815dc43d99415725267e9c452_4)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(85,2-87,65)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(83,80-83,81); use=LeftistHeap.fst(85,2-87,65)
(= x_157b99e815dc43d99415725267e9c452_4
@x6)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(87,36-87,59)
(and 
;; def=LeftistHeap.fst(84,18-84,35); use=LeftistHeap.fst(87,36-87,59)
(or label_5

;; def=LeftistHeap.fst(84,18-84,35); use=LeftistHeap.fst(87,36-87,59)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_3))
)


;; def=LeftistHeap.fst(84,39-84,52); use=LeftistHeap.fst(87,36-87,59)
(or label_6

;; def=LeftistHeap.fst(84,39-84,52); use=LeftistHeap.fst(87,36-87,59)
(> (BoxInt_proj_0 (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x3
x_157b99e815dc43d99415725267e9c452_4))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(87,36-87,59)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=LeftistHeap.fst(84,63-84,70); use=LeftistHeap.fst(87,36-87,59)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_3)
x_157b99e815dc43d99415725267e9c452_4))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(87,36-87,59)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(87,36-87,59)
(ApplyTT @x4
@x7)
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.lower_bounded_and_count, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count.fuel_instrumented, @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, @fuel_irrelevance_LeftistHeap.count.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, binder_x_157b99e815dc43d99415725267e9c452_3, binder_x_157b99e815dc43d99415725267e9c452_4, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_LeftistHeap.Mkordered, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_LeftistHeap.delta, equation_LeftistHeap.leq, equation_Prims.nat, equation_with_fuel_LeftistHeap.count.fuel_instrumented, equation_with_fuel_LeftistHeap.lower_bounded.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, int_inversion, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_Equality, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, typing_LeftistHeap.count, typing_LeftistHeap.lower_bounded, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec lower_bounded_and_count


; <Start encoding let rec lower_bounded_and_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.lower_bounded_and_count (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.lower_bounded_and_count@tok () Term)

; </end encoding let rec lower_bounded_and_count>


; encoding sigelt #push-options "--split_queries always"


; <Skipped #push-options "--split_queries always"/>


; encoding sigelt #push-options "--z3rlimit 30"


; <Skipped #push-options "--z3rlimit 30"/>

(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (y: t).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(93,41-93,46)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(95,2-111,11)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,5-286,13); use=Prims.fst(286,5-286,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)))
(HasType (Prims.l_Forall @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid typing_Prims.l_Forall))

:named typing_Prims.l_Forall))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type))
:qid kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.l_Forall
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,5-286,13); use=Prims.fst(286,5-286,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_Forall @x0
@x1)
(Prims.squash (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x0)))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid equation_Prims.l_Forall))

:named equation_Prims.l_Forall))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x2
@x3)))
:qid Prims_pre_typing_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named Prims_pre_typing_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2)))
:qid Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x2))

;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(ApplyTT @x1
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x2)))
:qid Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1))
(and 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1)))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;y: t -> Prims.GTot Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))
(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.l_Forall x_9cd1733a5204f989dbb2f01d5984df93_0
Tm_abs_182815c2515f8a239aef136bd61add5f))

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))
)
 
;;no pats
:qid l_quant_interp_d95bc0948b3c6e0ed2acfd8034c06280))
)
:named l_quant_interp_d95bc0948b3c6e0ed2acfd8034c06280))
(declare-fun Tm_refine_5f70e5fcc987f6aad201846ecc57e589 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_5f70e5fcc987f6aad201846ecc57e589))

:named refinement_kinding_Tm_refine_5f70e5fcc987f6aad201846ecc57e589))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(95,2-111,11)
(= (Prims.l_and (Prims.l_and (Prims.l_Forall x_9cd1733a5204f989dbb2f01d5984df93_0
Tm_abs_182815c2515f8a239aef136bd61add5f)
(Prims.b2t (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2)))
(Prims.b2t (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3)))
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x2)))
:qid refinement_interpretation_Tm_refine_5f70e5fcc987f6aad201846ecc57e589))

:named refinement_interpretation_Tm_refine_5f70e5fcc987f6aad201846ecc57e589))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5f70e5fcc987f6aad201846ecc57e589
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0))))
:qid haseqTm_refine_5f70e5fcc987f6aad201846ecc57e589))

:named haseqTm_refine_5f70e5fcc987f6aad201846ecc57e589))

; Encoding query formula : forall (any_result: Prims.logical)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b ==
;       any_result })
;   (y: t).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
(Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0))
(HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(93,2-93,7)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(95,2-111,11)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;y: t -> Prims.GTot Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))
(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.l_Forall x_9cd1733a5204f989dbb2f01d5984df93_0
Tm_abs_182815c2515f8a239aef136bd61add5f))

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))
)
 
;;no pats
:qid l_quant_interp_d95bc0948b3c6e0ed2acfd8034c06280))
)
:named l_quant_interp_d95bc0948b3c6e0ed2acfd8034c06280))
(declare-fun Tm_refine_5f70e5fcc987f6aad201846ecc57e589 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_5f70e5fcc987f6aad201846ecc57e589))

:named refinement_kinding_Tm_refine_5f70e5fcc987f6aad201846ecc57e589))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(95,2-111,11)
(= (Prims.l_and (Prims.l_and (Prims.l_Forall x_9cd1733a5204f989dbb2f01d5984df93_0
Tm_abs_182815c2515f8a239aef136bd61add5f)
(Prims.b2t (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2)))
(Prims.b2t (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3)))
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x2)))
:qid refinement_interpretation_Tm_refine_5f70e5fcc987f6aad201846ecc57e589))

:named refinement_interpretation_Tm_refine_5f70e5fcc987f6aad201846ecc57e589))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5f70e5fcc987f6aad201846ecc57e589
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0))))
:qid haseqTm_refine_5f70e5fcc987f6aad201846ecc57e589))

:named haseqTm_refine_5f70e5fcc987f6aad201846ecc57e589))
(declare-fun Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd
Tm_type)
:named refinement_kinding_Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,75); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x2)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x2))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd))
:qid refinement_interpretation_Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd))

:named refinement_interpretation_Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_8f0f8216710fe89b34ba0d3a307b18dd))

; Encoding query formula : forall (any_result: Prims.logical)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b ==
;       any_result })
;   (_:
;   Prims.squash ((forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\
;       LeftistHeap.sorted a /\ LeftistHeap.sorted b)).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq (Prims.list t)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
(Tm_refine_5f70e5fcc987f6aad201846ecc57e589 @x0))
(HasType @x2
Tm_refine_8f0f8216710fe89b34ba0d3a307b18dd))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(92,67-92,68)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(95,2-111,11)
(Prims.hasEq (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 3)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, equation_Prims.eqtype, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)}) (y: t).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(98,36-98,41)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(98,36-98,41)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(98,36-98,41)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 4)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result}) (x: t).
;   (*  - Subtyping check failed
;   - Expected type Prims.squash (forall (x: t). count a x = count b x)
;     got type Prims.unit
; *)
;   LeftistHeap.count a x = LeftistHeap.count b x


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(or label_1

;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x11)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x11))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 5)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b)).
;   (*  - Could not prove post-condition
; *) LeftistHeap.count a b > 0


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6))))))

;; def=LeftistHeap.fst(99,11-99,27); use=LeftistHeap.fst(99,4-99,10)
(or label_1

;; def=LeftistHeap.fst(99,11-99,27); use=LeftistHeap.fst(99,4-99,10)
(> (BoxInt_proj_0 (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 6)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count.fuel_instrumented, @fuel_irrelevance_LeftistHeap.count.fuel_instrumented, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, constructor_distinct_Prims.Cons, equation_LeftistHeap.delta, equation_Prims.nat, equation_with_fuel_LeftistHeap.count.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, primitive_Prims.op_Addition, primitive_Prims.op_Equality, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79, token_correspondence_LeftistHeap.count.fuel_instrumented

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
;;; Fact-ids: Name Prims.op_GreaterThan; Namespace Prims
(assert (! 
;; def=Prims.fst(570,4-570,18); use=Prims.fst(570,4-570,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThan @x0
@x1)
(BoxBool (> (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThan @x0
@x1))
:qid primitive_Prims.op_GreaterThan))

:named primitive_Prims.op_GreaterThan))
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0).
;   (*  - Could not prove post-condition
; *) LeftistHeap.sorted (b :: b)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0)))))

;; def=LeftistHeap.fst(75,18-75,31); use=LeftistHeap.fst(100,4-100,29)
(or label_1

;; def=LeftistHeap.fst(75,18-75,31); use=LeftistHeap.fst(100,4-100,29)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 7)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b).
;   (*  - Could not prove post-condition
; *) LeftistHeap.lower_bounded a b


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4))))

;; def=LeftistHeap.fst(84,18-84,35); use=LeftistHeap.fst(101,4-101,27)
(or label_1

;; def=LeftistHeap.fst(84,18-84,35); use=LeftistHeap.fst(101,4-101,27)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
@x4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 8)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, @query, b2t_def, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b).
;   (*  - Could not prove post-condition
; *) LeftistHeap.count a b > 0


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4))))

;; def=LeftistHeap.fst(84,39-84,52); use=LeftistHeap.fst(101,4-101,27)
(or label_1

;; def=LeftistHeap.fst(84,39-84,52); use=LeftistHeap.fst(101,4-101,27)
(> (BoxInt_proj_0 (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 9)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, b2t_def, primitive_Prims.op_GreaterThan, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))


; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (y: t).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(103,36-103,41)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(103,36-103,41)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(103,36-103,41)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 10)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))






; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result}) (x: t).
;   (*  - Subtyping check failed
;   - Expected type Prims.squash (forall (x: t). count a x = count b x)
;     got type Prims.unit
; *)
;   LeftistHeap.count a x = LeftistHeap.count b x


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(103,24-103,45); use=LeftistHeap.fst(103,24-103,45)
(or label_1

;; def=LeftistHeap.fst(103,24-103,45); use=LeftistHeap.fst(103,24-103,45)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x22)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x22))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 11)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))






; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b)).
;   (*  - Could not prove post-condition
; *) LeftistHeap.count b b > 0


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4))))))

;; def=LeftistHeap.fst(104,11-104,27); use=LeftistHeap.fst(104,4-104,10)
(or label_1

;; def=LeftistHeap.fst(104,11-104,27); use=LeftistHeap.fst(104,4-104,10)
(> (BoxInt_proj_0 (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 12)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count.fuel_instrumented, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, constructor_distinct_Prims.Cons, equation_LeftistHeap.delta, equation_Prims.nat, equation_with_fuel_LeftistHeap.count.fuel_instrumented, primitive_Prims.op_Addition, primitive_Prims.op_Equality, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79, token_correspondence_LeftistHeap.count.fuel_instrumented

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))






; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0).
;   (*  - Could not prove post-condition
; *) LeftistHeap.sorted (b :: b)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0)))))

;; def=LeftistHeap.fst(75,18-75,31); use=LeftistHeap.fst(105,4-105,29)
(or label_1

;; def=LeftistHeap.fst(75,18-75,31); use=LeftistHeap.fst(105,4-105,29)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 13)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))






; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b).
;   (*  - Could not prove post-condition
; *) LeftistHeap.lower_bounded b b


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6))))

;; def=LeftistHeap.fst(84,18-84,35); use=LeftistHeap.fst(106,4-106,27)
(or label_1

;; def=LeftistHeap.fst(84,18-84,35); use=LeftistHeap.fst(106,4-106,27)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3
@x6))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 14)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, @query, b2t_def, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))






; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b).
;   (*  - Could not prove post-condition
; *) LeftistHeap.count b b > 0


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6))))

;; def=LeftistHeap.fst(84,39-84,52); use=LeftistHeap.fst(106,4-106,27)
(or label_1

;; def=LeftistHeap.fst(84,39-84,52); use=LeftistHeap.fst(106,4-106,27)
(> (BoxInt_proj_0 (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 15)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, b2t_def, primitive_Prims.op_GreaterThan, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))








; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b).
;   (*  - Could not prove post-condition
; *) LeftistHeap.leq b b


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6)))
(HasType @x29
Prims.unit)
(HasType @x30
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x4))))

;; def=LeftistHeap.fst(33,18-33,25); use=LeftistHeap.fst(108,4-108,16)
(or label_1

;; def=LeftistHeap.fst(33,18-33,25); use=LeftistHeap.fst(108,4-108,16)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 16)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, b2t_def

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))








; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b).
;   (*  - Could not prove post-condition
; *) LeftistHeap.leq b b


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6)))
(HasType @x29
Prims.unit)
(HasType @x30
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x4))))

;; def=LeftistHeap.fst(33,29-33,36); use=LeftistHeap.fst(108,4-108,16)
(or label_1

;; def=LeftistHeap.fst(33,29-33,36); use=LeftistHeap.fst(108,4-108,16)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 17)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, b2t_def

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))







; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (pure_result: Prims.unit) (_: b = b).
;   (*  - Could not prove termination of this recursive call
; *)
;   t << t \/ (_ << _ \/ (b << a \/ b === a /\ b << b))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6)))
(HasType @x29
Prims.unit)
(HasType @x30
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x4)))
(HasType @x31
Prims.unit)
(HasType @x32
(Prims.b2t (Prims.op_Equality x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x6))))

;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(109,35-109,37)
(or label_1

;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(109,35-109,37)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(109,35-109,37)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(109,35-109,37)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(109,35-109,37)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(109,35-109,37)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(109,35-109,37)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x5
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(92,67-111,11); use=LeftistHeap.fst(109,35-109,37)
(and 
;; def=LeftistHeap.fst(92,67-92,68); use=LeftistHeap.fst(109,35-109,37)
(Valid 
;; def=LeftistHeap.fst(92,67-92,68); use=LeftistHeap.fst(109,35-109,37)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x5
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(109,35-109,37)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(109,35-109,37)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x7
x_374b44ccfcb77ed85d505dbc44265913_3)
)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 18)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, binder_x_374b44ccfcb77ed85d505dbc44265913_2, primitive_Prims.op_Equality, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.coerce_eq; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(1218,44-1218,52); use=FStar.Pervasives.fsti(1218,44-1218,52)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_0dee8cb03258a67c2f7ec66427696212))

:named refinement_kinding_Tm_refine_0dee8cb03258a67c2f7ec66427696212))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.coerce_eq; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(1218,44-1218,52); use=FStar.Pervasives.fsti(1218,44-1218,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Pervasives.fsti(1218,44-1218,52); use=FStar.Pervasives.fsti(1218,44-1218,52)
(= @x2
@x3)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_0dee8cb03258a67c2f7ec66427696212))

:named refinement_interpretation_Tm_refine_0dee8cb03258a67c2f7ec66427696212))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0dee8cb03258a67c2f7ec66427696212
;;; Fact-ids: Name FStar.Pervasives.coerce_eq; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(1218,44-1218,52); use=FStar.Pervasives.fsti(1218,44-1218,52)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x0
@x1))))
:qid haseqTm_refine_0dee8cb03258a67c2f7ec66427696212))

:named haseqTm_refine_0dee8cb03258a67c2f7ec66427696212))
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))








; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (pure_result: Prims.unit) (_: b = b) (any_result: Prims.list t)
;   (_: _: Prims.unit{b == any_result}) (y: t).
;   (*  - Could not prove post-condition
; *) LeftistHeap.count b y = LeftistHeap.count b y


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term) (@x33 Term) (@x34 Term) (@x35 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6)))
(HasType @x29
Prims.unit)
(HasType @x30
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x4)))
(HasType @x31
Prims.unit)
(HasType @x32
(Prims.b2t (Prims.op_Equality x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x6)))
(HasType @x33
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x34
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x7
@x33))
(HasType @x35
x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(109,4-109,28)
(or label_1

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(109,4-109,28)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x5
@x35)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x7
@x35))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 19)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count.fuel_instrumented, @fuel_irrelevance_LeftistHeap.count.fuel_instrumented, @query, b2t_def, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_374b44ccfcb77ed85d505dbc44265913_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, constructor_distinct_Prims.Cons, equation_Prims.nat, equation_with_fuel_LeftistHeap.count.fuel_instrumented, int_inversion, primitive_Prims.op_Addition, primitive_Prims.op_Equality, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79, typing_LeftistHeap.count

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))








; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (pure_result: Prims.unit) (_: b = b) (any_result: Prims.list t)
;   (_: _: Prims.unit{b == any_result}).
;   (*  - Could not prove post-condition
; *) LeftistHeap.sorted b


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term) (@x33 Term) (@x34 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6)))
(HasType @x29
Prims.unit)
(HasType @x30
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x4)))
(HasType @x31
Prims.unit)
(HasType @x32
(Prims.b2t (Prims.op_Equality x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x6)))
(HasType @x33
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x34
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x7
@x33)))

;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(109,4-109,28)
(or label_1

;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(109,4-109,28)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x5))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 20)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.sorted.fuel_instrumented, @fuel_irrelevance_LeftistHeap.sorted.fuel_instrumented, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_Prims.Cons, equation_Prims.nat, equation_with_fuel_LeftistHeap.sorted.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, primitive_Prims.op_Equality, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79, typing_LeftistHeap.sorted

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))








; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (pure_result: Prims.unit) (_: b = b) (any_result: Prims.list t)
;   (_: _: Prims.unit{b == any_result}).
;   (*  - Could not prove post-condition
; *) LeftistHeap.sorted b


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term) (@x33 Term) (@x34 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6)))
(HasType @x29
Prims.unit)
(HasType @x30
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x4)))
(HasType @x31
Prims.unit)
(HasType @x32
(Prims.b2t (Prims.op_Equality x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x6)))
(HasType @x33
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x34
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x7
@x33)))

;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(109,4-109,28)
(or label_1

;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(109,4-109,28)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x7))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 21)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.sorted.fuel_instrumented, @fuel_irrelevance_LeftistHeap.sorted.fuel_instrumented, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_Prims.Cons, equation_Prims.nat, equation_with_fuel_LeftistHeap.sorted.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, primitive_Prims.op_Equality, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79, typing_LeftistHeap.sorted

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_kinding_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-96,18); use=LeftistHeap.fst(95,8-96,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))

:named haseqTm_refine_a7f5be2562c0b20fa34b05d9da74fd79))
;;;;;;;;;;;;;;;;_: t -> Type
(declare-fun Tm_arrow_403cd2562999092693fed8d002e7d96a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_403cd2562999092693fed8d002e7d96a
Tm_type)
:named kinding_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_pre_typing_Tm_arrow_403cd2562999092693fed8d002e7d96a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,77-111,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_403cd2562999092693fed8d002e7d96a))
:qid LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

:named LeftistHeap_interpretation_Tm_arrow_403cd2562999092693fed8d002e7d96a))

(declare-fun Tm_abs_182815c2515f8a239aef136bd61add5f () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! (HasType Tm_abs_182815c2515f8a239aef136bd61add5f
Tm_arrow_403cd2562999092693fed8d002e7d96a)
:named typing_Tm_abs_182815c2515f8a239aef136bd61add5f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(98,24-98,45); use=LeftistHeap.fst(98,24-98,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x0)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x0))))
 

:pattern ((ApplyTT Tm_abs_182815c2515f8a239aef136bd61add5f
@x0))
:qid interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))

:named interpretation_Tm_abs_182815c2515f8a239aef136bd61add5f))
(declare-fun Tm_refine_32740114f95787bd55936112d0a794b8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_kinding_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(= Tm_abs_182815c2515f8a239aef136bd61add5f
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32740114f95787bd55936112d0a794b8 @x2)))
:qid refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))

:named refinement_interpretation_Tm_refine_32740114f95787bd55936112d0a794b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32740114f95787bd55936112d0a794b8
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(56,9-56,10); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32740114f95787bd55936112d0a794b8 @x0))))
:qid haseqTm_refine_32740114f95787bd55936112d0a794b8))

:named haseqTm_refine_32740114f95787bd55936112d0a794b8))








; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x}) (b: t)
;   (b: Prims.list t) (b: t) (b: Prims.list t) (_: _: Prims.unit{(a, b) == (b :: b, b :: b)})
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count a b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (any_result: (_: t -> Type))
;   (_: _: Prims.unit{(fun y -> LeftistHeap.count a y = LeftistHeap.count b y) == any_result})
;   (any_result: Prims.unit)
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (any_result: Prims.squash (LeftistHeap.count a b = LeftistHeap.count b b))
;   (pure_result: Prims.unit) (_: LeftistHeap.count b b > 0) (pure_result: Prims.unit)
;   (_: LeftistHeap.lower_bounded (b :: b) b) (pure_result: Prims.unit) (_: LeftistHeap.leq b b)
;   (pure_result: Prims.unit) (_: b = b) (any_result: Prims.list t)
;   (_: _: Prims.unit{b == any_result}) (pure_result: Prims.unit) (_: b = b).
;   Prims.auto_squash (k pure_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term) (@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term) (@x33 Term) (@x34 Term) (@x35 Term) (@x36 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)
(HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x8
(Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79 @x4
@x5
@x6
@x7))
(HasType @x9
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x10
(Tm_refine_32740114f95787bd55936112d0a794b8 @x9))
(HasType @x11
Prims.unit)
(HasType @x12
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x13
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x6)))))
(HasType @x14
Prims.unit)
(HasType @x15
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x6)
(BoxInt 0))))
(HasType @x16
Prims.unit)
(HasType @x17
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)
@x4)))
(HasType @x18
Prims.unit)
(HasType @x19
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x6)))
(HasType @x20
Tm_arrow_403cd2562999092693fed8d002e7d96a)
(HasType @x21
(Tm_refine_32740114f95787bd55936112d0a794b8 @x20))
(HasType @x22
Prims.unit)
(HasType @x23
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x24
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)))))
(HasType @x25
Prims.unit)
(HasType @x26
(Prims.b2t (Prims.op_GreaterThan (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x4)
(BoxInt 0))))
(HasType @x27
Prims.unit)
(HasType @x28
(Prims.b2t (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7)
@x6)))
(HasType @x29
Prims.unit)
(HasType @x30
(Prims.b2t (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x4)))
(HasType @x31
Prims.unit)
(HasType @x32
(Prims.b2t (Prims.op_Equality x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x6)))
(HasType @x33
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
(HasType @x34
(Tm_refine_0dee8cb03258a67c2f7ec66427696212 @x7
@x33))
(HasType @x35
Prims.unit)
(HasType @x36
(Prims.b2t (Prims.op_Equality (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x5
@x7))))

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(109,4-109,28)
(or label_1

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(109,4-109,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(109,4-109,28)
(ApplyTT @x2
@x35)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 22)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, primitive_Prims.op_Equality, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089, refinement_interpretation_Tm_refine_a7f5be2562c0b20fa34b05d9da74fd79, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(95,2-111,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___5 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0d9f94422821299632eb46bc1af4f8ef (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_kinding_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(95,2-111,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
@x3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
@x3))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(95,2-111,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(95,2-111,11)
(= x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef.2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x2)))
:qid refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0d9f94422821299632eb46bc1af4f8ef
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))))
:qid haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))

:named haseqTm_refine_0d9f94422821299632eb46bc1af4f8ef))
(declare-fun Tm_refine_28b3529e604de38cfa56254e079a0089 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_kinding_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,73-402,87); use=LeftistHeap.fst(95,2-111,11)
(implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x4)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x3
@x4)
)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))

:named refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089))
;;;;;;;;;;;;;;;;haseq for Tm_refine_28b3529e604de38cfa56254e079a0089
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(95,2-111,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x1))))
:qid haseqTm_refine_28b3529e604de38cfa56254e079a0089))

:named haseqTm_refine_28b3529e604de38cfa56254e079a0089))
(declare-fun Tm_refine_dbfba4801075614d3fe2f1366e0dc546 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_dbfba4801075614d3fe2f1366e0dc546
Tm_type)
:named refinement_kinding_Tm_refine_dbfba4801075614d3fe2f1366e0dc546))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(95,2-111,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_dbfba4801075614d3fe2f1366e0dc546)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(95,2-111,11)
(not 
;; def=LeftistHeap.fst(96,4-96,18); use=LeftistHeap.fst(96,4-96,18)
(and (BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)))))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_dbfba4801075614d3fe2f1366e0dc546))
:qid refinement_interpretation_Tm_refine_dbfba4801075614d3fe2f1366e0dc546))

:named refinement_interpretation_Tm_refine_dbfba4801075614d3fe2f1366e0dc546))
;;;;;;;;;;;;;;;;haseq for Tm_refine_dbfba4801075614d3fe2f1366e0dc546
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_dbfba4801075614d3fe2f1366e0dc546))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_dbfba4801075614d3fe2f1366e0dc546))
(declare-fun Tm_refine_95720c099504b776b082be5ba7c7b766 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-111,5); use=LeftistHeap.fst(95,8-111,5)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_95720c099504b776b082be5ba7c7b766 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_95720c099504b776b082be5ba7c7b766 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_95720c099504b776b082be5ba7c7b766))

:named refinement_kinding_Tm_refine_95720c099504b776b082be5ba7c7b766))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-111,5); use=LeftistHeap.fst(95,8-111,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_95720c099504b776b082be5ba7c7b766 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(95,8-111,5); use=LeftistHeap.fst(95,8-111,5)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_95720c099504b776b082be5ba7c7b766 @x2)))
:qid refinement_interpretation_Tm_refine_95720c099504b776b082be5ba7c7b766))

:named refinement_interpretation_Tm_refine_95720c099504b776b082be5ba7c7b766))
;;;;;;;;;;;;;;;;haseq for Tm_refine_95720c099504b776b082be5ba7c7b766
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(95,8-111,5); use=LeftistHeap.fst(95,8-111,5)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_95720c099504b776b082be5ba7c7b766 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_95720c099504b776b082be5ba7c7b766 @x0))))
:qid haseqTm_refine_95720c099504b776b082be5ba7c7b766))

:named haseqTm_refine_95720c099504b776b082be5ba7c7b766))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b /\ (forall (pure_result: Prims.unit). a = b ==> p pure_result) })
;   (k: Prims.pure_post Prims.unit)
;   (_: _: Prims.unit{forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x})
;   (_: _: Prims.unit{~(Cons? (a, b)._1 && Cons? (a, b)._2)})
;   (b: Prims.list t & Prims.list t)
;   (_: _: Prims.unit{(a, b) == b})
;   (any_result: Prims.unit).
;   Prims.auto_squash (k any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(HasType @x1
(Tm_refine_0d9f94422821299632eb46bc1af4f8ef @x0))
(HasType @x2
(Prims.pure_post Prims.unit))
(HasType @x3
(Tm_refine_28b3529e604de38cfa56254e079a0089 @x0
@x2))
(HasType @x4
Tm_refine_dbfba4801075614d3fe2f1366e0dc546)
(HasType @x5
(FStar.Pervasives.Native.tuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)))
(HasType @x6
(Tm_refine_95720c099504b776b082be5ba7c7b766 @x5))
(HasType @x7
Prims.unit))

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(95,2-111,11)
(or label_1

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(95,2-111,11)
(ApplyTT @x2
@x7)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 23)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count.fuel_instrumented, @fuel_irrelevance_LeftistHeap.count.fuel_instrumented, @query, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_374b44ccfcb77ed85d505dbc44265913_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, data_elim_Prims.Cons, disc_equation_Prims.Cons, equation_LeftistHeap.delta, equation_Prims.nat, equation_with_fuel_LeftistHeap.count.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, primitive_Prims.op_Addition, primitive_Prims.op_Equality, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_0d9f94422821299632eb46bc1af4f8ef, refinement_interpretation_Tm_refine_28b3529e604de38cfa56254e079a0089, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_95720c099504b776b082be5ba7c7b766, refinement_interpretation_Tm_refine_dbfba4801075614d3fe2f1366e0dc546, token_correspondence_LeftistHeap.count.fuel_instrumented, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(92,0-111,11)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named refinement_kinding_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)

;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
@x3)
)


;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-92,36)
(Valid 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-92,36)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
@x3)
)


;; def=LeftistHeap.fst(92,49-111,11); use=LeftistHeap.fst(92,49-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered @x3)
@x4
@x5)
)


;; def=LeftistHeap.fst(92,49-111,11); use=LeftistHeap.fst(92,49-111,11)
(and 
;; def=LeftistHeap.fst(92,49-92,50); use=LeftistHeap.fst(92,49-92,50)
(Valid 
;; def=LeftistHeap.fst(92,49-92,50); use=LeftistHeap.fst(92,49-92,50)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered @x3)
@x4
@x5)
)


;; def=LeftistHeap.fst(92,67-111,11); use=LeftistHeap.fst(92,67-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (Prims.list @x2)
(Prims.list @x3)
@x6
@x7)
)


;; def=LeftistHeap.fst(92,67-111,11); use=LeftistHeap.fst(92,67-111,11)
(and 
;; def=LeftistHeap.fst(92,67-92,68); use=LeftistHeap.fst(92,67-92,68)
(Valid 
;; def=LeftistHeap.fst(92,67-92,68); use=LeftistHeap.fst(92,67-92,68)
(Prims.op_Equals_Equals_Equals (Prims.list @x2)
(Prims.list @x3)
@x6
@x7)
)


;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (Prims.list @x2)
(Prims.list @x3)
@x1
@x8)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named refinement_interpretation_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named haseqTm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

; Encoding query formula : forall (t: Prims.eqtype)
;   (_: LeftistHeap.ordered t)
;   (a: Prims.list t)
;   (b: Prims.list t)
;   (t: Prims.eqtype)
;   (_: LeftistHeap.ordered t)
;   (a: Prims.list t)
;   (b: Prims.list t {t << t \/ t === t /\ (_ << _ \/ _ === _ /\ (a << a \/ a === a /\ b << b))})
;   (y: t).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Prims.list @x0))
(HasType @x3
(Prims.list @x0))
(HasType @x4
Prims.eqtype)
(HasType @x5
(LeftistHeap.ordered @x4))
(HasType @x6
(Prims.list @x4))
(HasType @x7
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x4
@x0
@x5
@x1
@x6
@x2
@x3))
(HasType @x8
@x4))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(93,41-93,46)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(93,41-93,46)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(93,41-93,46)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 24)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(92,0-111,11)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named refinement_kinding_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)

;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
@x3)
)


;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-92,36)
(Valid 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-92,36)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
@x3)
)


;; def=LeftistHeap.fst(92,49-111,11); use=LeftistHeap.fst(92,49-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered @x3)
@x4
@x5)
)


;; def=LeftistHeap.fst(92,49-111,11); use=LeftistHeap.fst(92,49-111,11)
(and 
;; def=LeftistHeap.fst(92,49-92,50); use=LeftistHeap.fst(92,49-92,50)
(Valid 
;; def=LeftistHeap.fst(92,49-92,50); use=LeftistHeap.fst(92,49-92,50)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered @x3)
@x4
@x5)
)


;; def=LeftistHeap.fst(92,67-111,11); use=LeftistHeap.fst(92,67-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (Prims.list @x2)
(Prims.list @x3)
@x6
@x7)
)


;; def=LeftistHeap.fst(92,67-111,11); use=LeftistHeap.fst(92,67-111,11)
(and 
;; def=LeftistHeap.fst(92,67-92,68); use=LeftistHeap.fst(92,67-92,68)
(Valid 
;; def=LeftistHeap.fst(92,67-92,68); use=LeftistHeap.fst(92,67-92,68)
(Prims.op_Equals_Equals_Equals (Prims.list @x2)
(Prims.list @x3)
@x6
@x7)
)


;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (Prims.list @x2)
(Prims.list @x3)
@x1
@x8)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named refinement_interpretation_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named haseqTm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

(declare-fun Tm_abs_2579d6388dbb420636034ef86f3bd8c3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_2579d6388dbb420636034ef86f3bd8c3
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,18-93,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x0
@x1
@x2)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
 

:pattern ((Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x0
@x1
@x2))
:qid typing_Tm_abs_2579d6388dbb420636034ef86f3bd8c3))

:named typing_Tm_abs_2579d6388dbb420636034ef86f3bd8c3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_2579d6388dbb420636034ef86f3bd8c3
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,18-93,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x1
@x2
@x3)
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count @x3
@x1
@x0)
(LeftistHeap.count @x3
@x2
@x0))))
 

:pattern ((ApplyTT (Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_2579d6388dbb420636034ef86f3bd8c3))

:named interpretation_Tm_abs_2579d6388dbb420636034ef86f3bd8c3))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,18-93,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.l_Forall @x2
(Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x1
@x0
@x2)))

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,18-93,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(93,29-93,50)
(= (LeftistHeap.count @x2
@x1
@x3)
(LeftistHeap.count @x2
@x0
@x3))
)
 
;;no pats
:qid l_quant_interp_68d5c30e7bb9d2083648755a51ec699e.1))
)
 

:pattern ((Valid (Prims.l_Forall @x2
(Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x1
@x0
@x2))))
:qid l_quant_interp_68d5c30e7bb9d2083648755a51ec699e))

:named l_quant_interp_68d5c30e7bb9d2083648755a51ec699e))
(declare-fun Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))

:named refinement_kinding_Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(92,35-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(92,35-111,11)
(= (Prims.l_and (Prims.l_and (Prims.l_Forall @x2
(Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x3
@x4
@x2))
(Prims.b2t (LeftistHeap.sorted @x2
@x5
@x3)))
(Prims.b2t (LeftistHeap.sorted @x2
@x5
@x4)))
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))

:named refinement_interpretation_Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))

:named haseqTm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))

; Encoding query formula : forall (t: Prims.eqtype) (_: LeftistHeap.ordered t) (a: Prims.list t) (b: Prims.list t)
;   (t: Prims.eqtype) (_: LeftistHeap.ordered t) (a: Prims.list t)
;   (b: Prims.list t {t << t \/ t === t /\ (_ << _ \/ _ === _ /\ (a << a \/ a === a /\ b << b))})
;   (any_result: Prims.logical)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b ==
;       any_result }) (y: t).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Prims.list @x0))
(HasType @x3
(Prims.list @x0))
(HasType @x4
Prims.eqtype)
(HasType @x5
(LeftistHeap.ordered @x4))
(HasType @x6
(Prims.list @x4))
(HasType @x7
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x4
@x0
@x5
@x1
@x6
@x2
@x3))
(HasType @x8
Prims.logical)
(HasType @x9
(Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x4
@x6
@x7
@x5
@x8))
(HasType @x10
@x4))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(93,2-93,7)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(94,11-94,16)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(94,11-94,16)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 25)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(92,0-111,11)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named refinement_kinding_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)

;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
@x3)
)


;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(and 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-92,36)
(Valid 
;; def=LeftistHeap.fst(92,35-92,36); use=LeftistHeap.fst(92,35-92,36)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
@x3)
)


;; def=LeftistHeap.fst(92,49-111,11); use=LeftistHeap.fst(92,49-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered @x3)
@x4
@x5)
)


;; def=LeftistHeap.fst(92,49-111,11); use=LeftistHeap.fst(92,49-111,11)
(and 
;; def=LeftistHeap.fst(92,49-92,50); use=LeftistHeap.fst(92,49-92,50)
(Valid 
;; def=LeftistHeap.fst(92,49-92,50); use=LeftistHeap.fst(92,49-92,50)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered @x3)
@x4
@x5)
)


;; def=LeftistHeap.fst(92,67-111,11); use=LeftistHeap.fst(92,67-111,11)
(or 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (Prims.list @x2)
(Prims.list @x3)
@x6
@x7)
)


;; def=LeftistHeap.fst(92,67-111,11); use=LeftistHeap.fst(92,67-111,11)
(and 
;; def=LeftistHeap.fst(92,67-92,68); use=LeftistHeap.fst(92,67-92,68)
(Valid 
;; def=LeftistHeap.fst(92,67-92,68); use=LeftistHeap.fst(92,67-92,68)
(Prims.op_Equals_Equals_Equals (Prims.list @x2)
(Prims.list @x3)
@x6
@x7)
)


;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Valid 
;; def=LeftistHeap.fst(95,2-111,11); use=LeftistHeap.fst(95,2-111,11)
(Prims.precedes (Prims.list @x2)
(Prims.list @x3)
@x1
@x8)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named refinement_interpretation_Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(92,35-111,11); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

:named haseqTm_refine_5dbb8974d61dad6c3b871cc47dd7afbd))

(declare-fun Tm_abs_2579d6388dbb420636034ef86f3bd8c3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_2579d6388dbb420636034ef86f3bd8c3
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,18-93,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x0
@x1
@x2)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
 

:pattern ((Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x0
@x1
@x2))
:qid typing_Tm_abs_2579d6388dbb420636034ef86f3bd8c3))

:named typing_Tm_abs_2579d6388dbb420636034ef86f3bd8c3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_2579d6388dbb420636034ef86f3bd8c3
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,18-93,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x1
@x2
@x3)
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count @x3
@x1
@x0)
(LeftistHeap.count @x3
@x2
@x0))))
 

:pattern ((ApplyTT (Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_2579d6388dbb420636034ef86f3bd8c3))

:named interpretation_Tm_abs_2579d6388dbb420636034ef86f3bd8c3))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,18-93,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.l_Forall @x2
(Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x1
@x0
@x2)))

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,18-93,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(93,29-93,50)
(= (LeftistHeap.count @x2
@x1
@x3)
(LeftistHeap.count @x2
@x0
@x3))
)
 
;;no pats
:qid l_quant_interp_68d5c30e7bb9d2083648755a51ec699e.1))
)
 

:pattern ((Valid (Prims.l_Forall @x2
(Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x1
@x0
@x2))))
:qid l_quant_interp_68d5c30e7bb9d2083648755a51ec699e))

:named l_quant_interp_68d5c30e7bb9d2083648755a51ec699e))
(declare-fun Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))

:named refinement_kinding_Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(92,35-111,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(92,35-111,11)
(= (Prims.l_and (Prims.l_and (Prims.l_Forall @x2
(Tm_abs_2579d6388dbb420636034ef86f3bd8c3 @x3
@x4
@x2))
(Prims.b2t (LeftistHeap.sorted @x2
@x5
@x3)))
(Prims.b2t (LeftistHeap.sorted @x2
@x5
@x4)))
@x6)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))

:named refinement_interpretation_Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.fsti(112,28-112,31); use=LeftistHeap.fst(92,35-111,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))

:named haseqTm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba))
(declare-fun Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,75); use=LeftistHeap.fst(93,2-93,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4))

:named refinement_kinding_Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,75); use=LeftistHeap.fst(93,2-93,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(93,2-93,7)
(forall ((@x6 Term))
 (! (implies (HasType @x6
@x2)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(93,2-93,7)
(= (LeftistHeap.count @x2
@x3
@x6)
(LeftistHeap.count @x2
@x4
@x6))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4.1))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(93,2-93,7)
(BoxBool_proj_0 (LeftistHeap.sorted @x2
@x5
@x3))


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(93,2-93,7)
(BoxBool_proj_0 (LeftistHeap.sorted @x2
@x5
@x4))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4))

:named refinement_interpretation_Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(93,18-93,75); use=LeftistHeap.fst(93,2-93,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_3ffd4895f909ae7b6cdf9daf05faeae4))

:named haseqTm_refine_3ffd4895f909ae7b6cdf9daf05faeae4))

; Encoding query formula : forall (t: Prims.eqtype) (_: LeftistHeap.ordered t) (a: Prims.list t) (b: Prims.list t)
;   (t: Prims.eqtype) (_: LeftistHeap.ordered t) (a: Prims.list t)
;   (b: Prims.list t {t << t \/ t === t /\ (_ << _ \/ _ === _ /\ (a << a \/ a === a /\ b << b))})
;   (any_result: Prims.logical)
;   (_:
;   _:
;   Prims.unit
;     { (forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\ LeftistHeap.sorted a /\
;       LeftistHeap.sorted b ==
;       any_result })
;   (_:
;   Prims.squash ((forall (y: t). LeftistHeap.count a y = LeftistHeap.count b y) /\
;       LeftistHeap.sorted a /\ LeftistHeap.sorted b)).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq (Prims.list t)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec injectivity_count_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Prims.list @x0))
(HasType @x3
(Prims.list @x0))
(HasType @x4
Prims.eqtype)
(HasType @x5
(LeftistHeap.ordered @x4))
(HasType @x6
(Prims.list @x4))
(HasType @x7
(Tm_refine_5dbb8974d61dad6c3b871cc47dd7afbd @x4
@x0
@x5
@x1
@x6
@x2
@x3))
(HasType @x8
Prims.logical)
(HasType @x9
(Tm_refine_e7e45065cd6dd74a36b6c4c2f59c2bba @x4
@x6
@x7
@x5
@x8))
(HasType @x10
(Tm_refine_3ffd4895f909ae7b6cdf9daf05faeae4 @x4
@x6
@x7
@x5)))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(94,11-94,12)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(94,11-94,12)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(94,11-94,12)
(Prims.hasEq (Prims.list @x4))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 16339680)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.injectivity_count_sorted, 26)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, equation_Prims.eqtype, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec injectivity_count_sorted


; <Start encoding let rec injectivity_count_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.injectivity_count_sorted (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.injectivity_count_sorted@tok () Term)

; </end encoding let rec injectivity_count_sorted>


; encoding sigelt #pop-options


; <Skipped #pop-options/>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.merge; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Prims.list @x0))
(HasType @x3
(Prims.list @x0)))
(HasType (LeftistHeap.merge @x0
@x1
@x2
@x3)
(Prims.list @x0)))
 

:pattern ((LeftistHeap.merge @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.merge))

:named typing_LeftistHeap.merge))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.merge; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Prims.list @x1))
(HasType @x4
(Prims.list @x1)))
(HasType (LeftistHeap.merge.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
(Prims.list @x1)))
 

:pattern ((LeftistHeap.merge.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_LeftistHeap.merge.fuel_instrumented))

:named token_correspondence_LeftistHeap.merge.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.merge
;;; Fact-ids: Name LeftistHeap.merge; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Prims.list @x1))
(HasType @x4
(Prims.list @x1)))
(= (LeftistHeap.merge.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 (FStar.Pervasives.Native.Mktuple2 (Prims.list @x1)
(Prims.list @x1)
@x3
@x4)))
(ite (is-Prims.Nil (FStar.Pervasives.Native.Mktuple2__1 @lb5))
@x4
(ite (is-Prims.Nil (FStar.Pervasives.Native.Mktuple2__2 @lb5))
@x3
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple2__1 @lb5))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(let ((@lb6 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x1)
@x2)
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(ite (= @lb6
(BoxBool true))
(Prims.Cons @x1
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple2__1 @lb5))
(LeftistHeap.merge.fuel_instrumented @u0
@x1
@x2
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple2__1 @lb5))
@x4))
(Prims.Cons @x1
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(LeftistHeap.merge.fuel_instrumented @u0
@x1
@x2
@x3
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple2__2 @lb5))))))
Tm_unit))))))
 :weight 0


:pattern ((LeftistHeap.merge.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_LeftistHeap.merge.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.merge.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.merge; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.merge.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(LeftistHeap.merge.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.merge.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_LeftistHeap.merge.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.merge.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.merge; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(28,8-28,13); use=LeftistHeap.fsti(28,8-28,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.merge @x0
@x1
@x2
@x3)
(LeftistHeap.merge.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.merge @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_LeftistHeap.merge.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.merge.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(117,2-119,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___6 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;y : t (t)
(declare-fun x_157b99e815dc43d99415725267e9c452_4 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_4
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_4
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.merge_count (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.merge_count@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.count (LeftistHeap.merge a b) y = LeftistHeap.count a y + LeftistHeap.count b y ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (forall (b: t) (b: Prims.list t) (b: t) (b: Prims.list t).
;           (a, b) == (b :: b, b :: b) ==>
;           (forall (k: Prims.pure_post Prims.unit).
;               (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;               (LeftistHeap.leq b b == true ==>
;                 (t << t \/ (_ << _ \/ (b << a \/ b === a /\ (b << b \/ y << y)))) /\
;                 (forall (any_result: t).
;                     y == any_result ==>
;                     (forall (pure_result: Prims.unit).
;                         LeftistHeap.count (LeftistHeap.merge b b) y =
;                         LeftistHeap.count b y + LeftistHeap.count b y ==>
;                         k pure_result))) /\
;               (~(LeftistHeap.leq b b = true) ==>
;                 (forall (b: Prims.bool).
;                     LeftistHeap.leq b b == b ==>
;                     (t << t \/ (_ << _ \/ (a << a \/ (b << b \/ b === b /\ y << y)))) /\
;                     (forall (any_result: t).
;                         y == any_result ==>
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.count (LeftistHeap.merge a b) y =
;                             LeftistHeap.count a y + LeftistHeap.count b y ==>
;                             k pure_result)))))) /\
;       (~(Cons? (a, b)._1 && Cons? (a, b)._2) ==>
;         (forall (b: Prims.list t & Prims.list t).
;             (a, b) == b ==> (forall (any_result: Prims.unit). k any_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec merge_count`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(116,17-116,60); use=LeftistHeap.fst(117,2-119,11)
(or label_2

;; def=LeftistHeap.fst(116,17-116,60); use=LeftistHeap.fst(117,2-119,11)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
x_157b99e815dc43d99415725267e9c452_4)
(Prims.op_Addition (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
x_157b99e815dc43d99415725267e9c452_4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
x_157b99e815dc43d99415725267e9c452_4)))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(117,2-119,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(117,2-119,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(117,2-119,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(117,2-119,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(117,2-119,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(117,2-119,11)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(117,2-119,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(117,2-119,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(117,2-119,11)
(and 
;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x4 Term))
 (! (implies (HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(117,8-118,18); use=LeftistHeap.fst(117,8-118,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x7 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(117,2-119,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(117,2-119,11)
(ApplyTT @x1
@x7)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(117,2-119,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(117,2-119,11)
(ApplyTT @x6
@x7)
)
)
 :weight 0


:pattern ((ApplyTT @x6
@x7))
:qid @query.9))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(117,2-119,11)
(and (implies 
;; def=LeftistHeap.fst(118,25-118,36); use=LeftistHeap.fst(118,25-118,36)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(117,2-119,11)
(and 
;; def=LeftistHeap.fst(115,22-119,11); use=LeftistHeap.fst(118,59-118,60)
(or label_3

;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(115,53-119,11); use=LeftistHeap.fst(118,59-118,60)
(and 
;; def=LeftistHeap.fst(115,53-115,54); use=LeftistHeap.fst(118,59-118,60)
(Valid 
;; def=LeftistHeap.fst(115,53-115,54); use=LeftistHeap.fst(118,59-118,60)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(115,55-119,11); use=LeftistHeap.fst(118,59-118,60)
(or 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_3
x_374b44ccfcb77ed85d505dbc44265913_3)
)


;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,59-118,60)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_4
x_157b99e815dc43d99415725267e9c452_4)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(115,66-115,67); use=LeftistHeap.fst(117,2-119,11)
(= x_157b99e815dc43d99415725267e9c452_4
@x7)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(118,42-118,53)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=LeftistHeap.fst(116,17-116,60); use=LeftistHeap.fst(118,42-118,53)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_374b44ccfcb77ed85d505dbc44265913_3)
x_157b99e815dc43d99415725267e9c452_4)
(Prims.op_Addition (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x3
x_157b99e815dc43d99415725267e9c452_4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_3
x_157b99e815dc43d99415725267e9c452_4)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(118,42-118,53)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(118,42-118,53)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(117,2-119,11)
(not 
;; def=LeftistHeap.fst(118,25-118,36); use=LeftistHeap.fst(118,25-118,36)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.bool)

;; def=LeftistHeap.fst(118,25-118,84); use=LeftistHeap.fst(118,25-118,84)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(117,2-119,11)
(and 
;; def=LeftistHeap.fst(115,22-119,11); use=LeftistHeap.fst(118,83-118,84)
(or label_4

;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x5
x_374b44ccfcb77ed85d505dbc44265913_3)
)


;; def=LeftistHeap.fst(115,55-119,11); use=LeftistHeap.fst(118,83-118,84)
(and 
;; def=LeftistHeap.fst(115,55-115,56); use=LeftistHeap.fst(118,83-118,84)
(Valid 
;; def=LeftistHeap.fst(115,55-115,56); use=LeftistHeap.fst(118,83-118,84)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x5
x_374b44ccfcb77ed85d505dbc44265913_3)
)


;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Valid 
;; def=LeftistHeap.fst(117,2-119,11); use=LeftistHeap.fst(118,83-118,84)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_4
x_157b99e815dc43d99415725267e9c452_4)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(115,66-115,67); use=LeftistHeap.fst(117,2-119,11)
(= x_157b99e815dc43d99415725267e9c452_4
@x8)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(118,66-118,77)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=LeftistHeap.fst(116,17-116,60); use=LeftistHeap.fst(118,66-118,77)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
@x5)
x_157b99e815dc43d99415725267e9c452_4)
(Prims.op_Addition (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
x_374b44ccfcb77ed85d505dbc44265913_2
x_157b99e815dc43d99415725267e9c452_4)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
@x5
x_157b99e815dc43d99415725267e9c452_4)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(118,66-118,77)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(118,66-118,77)
(ApplyTT @x6
@x9)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(117,2-119,11)
(not 
;; def=LeftistHeap.fst(118,4-118,18); use=LeftistHeap.fst(118,4-118,18)
(and (BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)))))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=LeftistHeap.fst(117,8-119,5); use=LeftistHeap.fst(117,8-119,5)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
@x2)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(117,2-119,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(117,2-119,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(117,2-119,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.merge_count, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge.fuel_instrumented, @fuel_irrelevance_LeftistHeap.count.fuel_instrumented, @fuel_irrelevance_LeftistHeap.merge.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, binder_x_157b99e815dc43d99415725267e9c452_4, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_374b44ccfcb77ed85d505dbc44265913_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_Prims.Cons, data_elim_LeftistHeap.Mkordered, disc_equation_Prims.Cons, equation_Prims.nat, equation_with_fuel_LeftistHeap.count.fuel_instrumented, equation_with_fuel_LeftistHeap.merge.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, int_inversion, int_typing, primitive_Prims.op_Addition, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, subterm_ordering_Prims.Cons, typing_LeftistHeap.count, typing_LeftistHeap.merge, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec merge_count


; <Start encoding let rec merge_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.merge_count (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.merge_count@tok () Term)

; </end encoding let rec merge_count>

(push) ;; push{2

; Starting query at LeftistHeap.fst(123,2-127,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___7 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.sorted_merge (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.sorted_merge@tok () Term)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)






; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.sorted a /\ LeftistHeap.sorted b /\
;   (forall (pure_result: Prims.unit). LeftistHeap.sorted (LeftistHeap.merge a b) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (forall (b: t) (b: Prims.list t) (b: t) (b: Prims.list t).
;           (a, b) == (b :: b, b :: b) ==>
;           (forall (k: Prims.pure_post Prims.unit).
;               (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;               (LeftistHeap.leq b b == true ==>
;                 (t << t \/ (_ << _ \/ (b << a \/ b === a /\ b << b))) /\
;                 (forall (any_result: Prims.list t).
;                     b == any_result ==>
;                     LeftistHeap.sorted b /\ LeftistHeap.sorted b /\
;                     (forall (pure_result: Prims.unit).
;                         LeftistHeap.sorted (LeftistHeap.merge b b) ==> k pure_result))) /\
;               (~(LeftistHeap.leq b b = true) ==>
;                 (forall (b: Prims.bool).
;                     LeftistHeap.leq b b == b ==>
;                     (t << t \/ (_ << _ \/ (a << a \/ b << b))) /\
;                     (forall (any_result: Prims.list t).
;                         b == any_result ==>
;                         LeftistHeap.sorted a /\ LeftistHeap.sorted b /\
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.sorted (LeftistHeap.merge a b) ==>
;                             (forall (pure_result: Prims.unit).
;                                 LeftistHeap.leq b b \/ LeftistHeap.leq b b ==> k pure_result))))))) /\
;       (~(Cons? (a, b)._1 && Cons? (a, b)._2) ==>
;         (forall (b: Prims.list t & Prims.list t).
;             (a, b) == b ==> (forall (any_result: Prims.unit). k any_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec sorted_merge`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(123,2-127,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))


;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(123,2-127,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(122,55-122,76); use=LeftistHeap.fst(123,2-127,11)
(or label_2

;; def=LeftistHeap.fst(122,55-122,76); use=LeftistHeap.fst(123,2-127,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(123,2-127,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(123,2-127,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(123,2-127,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(123,2-127,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(123,2-127,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(123,2-127,11)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(123,2-127,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(123,2-127,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(123,2-127,11)
(and 
;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x4 Term))
 (! (implies (HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(123,8-124,18); use=LeftistHeap.fst(123,8-124,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x7 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(123,2-127,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(123,2-127,11)
(ApplyTT @x1
@x7)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(123,2-127,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(123,2-127,11)
(ApplyTT @x6
@x7)
)
)
 :weight 0


:pattern ((ApplyTT @x6
@x7))
:qid @query.9))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(123,2-127,11)
(and (implies 
;; def=LeftistHeap.fst(124,25-124,36); use=LeftistHeap.fst(124,25-124,36)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(123,2-127,11)
(and 
;; def=LeftistHeap.fst(121,22-127,11); use=LeftistHeap.fst(125,26-125,27)
(or label_3

;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(125,26-125,27)
(Valid 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(125,26-125,27)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(125,26-125,27)
(Valid 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(125,26-125,27)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(125,26-125,27)
(Valid 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(125,26-125,27)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(121,45-127,11); use=LeftistHeap.fst(125,26-125,27)
(and 
;; def=LeftistHeap.fst(121,45-121,46); use=LeftistHeap.fst(125,26-125,27)
(Valid 
;; def=LeftistHeap.fst(121,45-121,46); use=LeftistHeap.fst(125,26-125,27)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(125,26-125,27)
(Valid 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(125,26-125,27)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_3
x_374b44ccfcb77ed85d505dbc44265913_3)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(121,47-121,48); use=LeftistHeap.fst(123,2-127,11)
(= x_374b44ccfcb77ed85d505dbc44265913_3
@x7)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(125,7-125,19)
(and 
;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(125,7-125,19)
(or label_4

;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(125,7-125,19)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3))
)


;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(125,7-125,19)
(or label_5

;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(125,7-125,19)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(125,7-125,19)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=LeftistHeap.fst(122,55-122,76); use=LeftistHeap.fst(125,7-125,19)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_374b44ccfcb77ed85d505dbc44265913_3)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(125,7-125,19)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(125,7-125,19)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(123,2-127,11)
(not 
;; def=LeftistHeap.fst(124,25-124,36); use=LeftistHeap.fst(124,25-124,36)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.bool)

;; def=LeftistHeap.fst(124,25-126,48); use=LeftistHeap.fst(124,25-126,48)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(123,2-127,11)
(and 
;; def=LeftistHeap.fst(121,22-127,11); use=LeftistHeap.fst(126,26-126,28)
(or label_6

;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(126,26-126,28)
(Valid 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(126,26-126,28)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(126,26-126,28)
(Valid 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(126,26-126,28)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(126,26-126,28)
(Valid 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(126,26-126,28)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(126,26-126,28)
(Valid 
;; def=LeftistHeap.fst(123,2-127,11); use=LeftistHeap.fst(126,26-126,28)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x5
x_374b44ccfcb77ed85d505dbc44265913_3)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(121,47-124,18); use=LeftistHeap.fst(123,2-127,11)
(= @x5
@x8)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(126,8-126,20)
(and 
;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(126,8-126,20)
(or label_7

;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(126,8-126,20)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2))
)


;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(126,8-126,20)
(or label_8

;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(126,8-126,20)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x5))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(126,8-126,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=LeftistHeap.fst(122,55-122,76); use=LeftistHeap.fst(126,8-126,20)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
@x5)))
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(126,30-126,41)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=LeftistHeap.fst(37,17-37,35); use=LeftistHeap.fst(126,30-126,41)
(or 
;; def=LeftistHeap.fst(37,17-37,24); use=LeftistHeap.fst(126,30-126,41)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4))


;; def=LeftistHeap.fst(37,28-37,35); use=LeftistHeap.fst(126,30-126,41)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x4)
@x2))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(126,30-126,41)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(126,30-126,41)
(ApplyTT @x6
@x10)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(123,2-127,11)
(not 
;; def=LeftistHeap.fst(124,4-124,18); use=LeftistHeap.fst(124,4-124,18)
(and (BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)))))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=LeftistHeap.fst(123,8-127,5); use=LeftistHeap.fst(123,8-127,5)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
@x2)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(123,2-127,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(123,2-127,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(123,2-127,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.sorted_merge, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.merge.fuel_instrumented, @fuel_correspondence_LeftistHeap.sorted.fuel_instrumented, @fuel_irrelevance_LeftistHeap.merge.fuel_instrumented, @fuel_irrelevance_LeftistHeap.sorted.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_374b44ccfcb77ed85d505dbc44265913_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Tm_unit, data_elim_LeftistHeap.Mkordered, data_elim_Prims.Cons, disc_equation_Prims.Cons, equation_LeftistHeap.leq, equation_with_fuel_LeftistHeap.merge.fuel_instrumented, equation_with_fuel_LeftistHeap.sorted.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, subterm_ordering_Prims.Cons, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.merge.fuel_instrumented, token_correspondence_LeftistHeap.sorted.fuel_instrumented, typing_LeftistHeap.merge, typing_LeftistHeap.sorted, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec sorted_merge


; <Start encoding let rec sorted_merge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.sorted_merge (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.sorted_merge@tok () Term)

; </end encoding let rec sorted_merge>

(push) ;; push{2

; Starting query at LeftistHeap.fst(131,2-135,11)

;;;;;;;;;;;;;;;;t : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___8 : LeftistHeap.ordered t (LeftistHeap.ordered t)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;a : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_2 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_2
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_2
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_2))
;;;;;;;;;;;;;;;;b : Prims.list t (Prims.list t)
(declare-fun x_374b44ccfcb77ed85d505dbc44265913_3 () Term)
;;;;;;;;;;;;;;;;binder_x_374b44ccfcb77ed85d505dbc44265913_3
;;; Fact-ids: 
(assert (! (HasType x_374b44ccfcb77ed85d505dbc44265913_3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_374b44ccfcb77ed85d505dbc44265913_3))
;;;;;;;;;;;;;;;;m : t (t)
(declare-fun x_157b99e815dc43d99415725267e9c452_4 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_4
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_4
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.merge_lower_bounded (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.merge_lower_bounded@tok () Term)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.lower_bounded a m /\ LeftistHeap.lower_bounded b m /\
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.lower_bounded (LeftistHeap.merge a b) m ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (forall (b: t) (b: Prims.list t) (b: t) (b: Prims.list t).
;           (a, b) == (b :: b, b :: b) ==>
;           (forall (k: Prims.pure_post Prims.unit).
;               (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;               (LeftistHeap.leq b b == true ==>
;                 (t << t \/ (_ << _ \/ (b << a \/ b === a /\ (b << b \/ m << m)))) /\
;                 (forall (any_result: t).
;                     m == any_result ==>
;                     LeftistHeap.lower_bounded b m /\ LeftistHeap.lower_bounded b m /\
;                     (forall (pure_result: Prims.unit).
;                         LeftistHeap.lower_bounded (LeftistHeap.merge b b) m ==> k pure_result))) /\
;               (~(LeftistHeap.leq b b = true) ==>
;                 (forall (b: Prims.bool).
;                     LeftistHeap.leq b b == b ==>
;                     (t << t \/ (_ << _ \/ (a << a \/ (b << b \/ b === b /\ m << m)))) /\
;                     (forall (any_result: t).
;                         m == any_result ==>
;                         LeftistHeap.lower_bounded a m /\ LeftistHeap.lower_bounded b m /\
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.lower_bounded (LeftistHeap.merge a b) m ==> k pure_result)))
;               ))) /\
;       (~(Cons? (a, b)._1 && Cons? (a, b)._2) ==>
;         (forall (b: Prims.list t & Prims.list t).
;             (a, b) == b ==> (forall (any_result: Prims.unit). k any_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec merge_lower_bounded`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(130,18-130,35); use=LeftistHeap.fst(131,2-135,11)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
x_157b99e815dc43d99415725267e9c452_4))


;; def=LeftistHeap.fst(130,39-130,56); use=LeftistHeap.fst(131,2-135,11)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3
x_157b99e815dc43d99415725267e9c452_4))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(130,67-130,94); use=LeftistHeap.fst(131,2-135,11)
(or label_2

;; def=LeftistHeap.fst(130,67-130,94); use=LeftistHeap.fst(131,2-135,11)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
x_157b99e815dc43d99415725267e9c452_4))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(131,2-135,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(131,2-135,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(131,2-135,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(131,2-135,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(131,2-135,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(131,2-135,11)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(131,2-135,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(131,2-135,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(131,2-135,11)
(and 
;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x4 Term))
 (! (implies (HasType @x4
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(131,8-132,18); use=LeftistHeap.fst(131,8-132,18)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3)
(Prims.Cons x_9cd1733a5204f989dbb2f01d5984df93_0
@x4
@x5)))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x7 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(131,2-135,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(131,2-135,11)
(ApplyTT @x1
@x7)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(131,2-135,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(131,2-135,11)
(ApplyTT @x6
@x7)
)
)
 :weight 0


:pattern ((ApplyTT @x6
@x7))
:qid @query.9))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(131,2-135,11)
(and (implies 
;; def=LeftistHeap.fst(132,25-132,36); use=LeftistHeap.fst(132,25-132,36)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(131,2-135,11)
(and 
;; def=LeftistHeap.fst(129,30-135,11); use=LeftistHeap.fst(133,32-133,33)
(or label_3

;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(129,62-135,11); use=LeftistHeap.fst(133,32-133,33)
(and 
;; def=LeftistHeap.fst(129,62-129,63); use=LeftistHeap.fst(133,32-133,33)
(Valid 
;; def=LeftistHeap.fst(129,62-129,63); use=LeftistHeap.fst(133,32-133,33)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(129,64-135,11); use=LeftistHeap.fst(133,32-133,33)
(or 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_3
x_374b44ccfcb77ed85d505dbc44265913_3)
)


;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(133,32-133,33)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_4
x_157b99e815dc43d99415725267e9c452_4)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(129,75-129,76); use=LeftistHeap.fst(131,2-135,11)
(= x_157b99e815dc43d99415725267e9c452_4
@x7)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(133,7-133,26)
(and 
;; def=LeftistHeap.fst(130,18-130,35); use=LeftistHeap.fst(133,7-133,26)
(or label_4

;; def=LeftistHeap.fst(130,18-130,35); use=LeftistHeap.fst(133,7-133,26)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_4))
)


;; def=LeftistHeap.fst(130,39-130,56); use=LeftistHeap.fst(133,7-133,26)
(or label_5

;; def=LeftistHeap.fst(130,39-130,56); use=LeftistHeap.fst(133,7-133,26)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_3
x_157b99e815dc43d99415725267e9c452_4))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(133,7-133,26)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=LeftistHeap.fst(130,67-130,94); use=LeftistHeap.fst(133,7-133,26)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_374b44ccfcb77ed85d505dbc44265913_3)
x_157b99e815dc43d99415725267e9c452_4))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(133,7-133,26)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(133,7-133,26)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(131,2-135,11)
(not 
;; def=LeftistHeap.fst(132,25-132,36); use=LeftistHeap.fst(132,25-132,36)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.bool)

;; def=LeftistHeap.fst(132,25-134,33); use=LeftistHeap.fst(132,25-134,33)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x4)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(131,2-135,11)
(and 
;; def=LeftistHeap.fst(129,30-135,11); use=LeftistHeap.fst(134,32-134,33)
(or label_6

;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_2)
)


;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Prims.precedes (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x5
x_374b44ccfcb77ed85d505dbc44265913_3)
)


;; def=LeftistHeap.fst(129,64-135,11); use=LeftistHeap.fst(134,32-134,33)
(and 
;; def=LeftistHeap.fst(129,64-129,65); use=LeftistHeap.fst(134,32-134,33)
(Valid 
;; def=LeftistHeap.fst(129,64-129,65); use=LeftistHeap.fst(134,32-134,33)
(Prims.op_Equals_Equals_Equals (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
@x5
x_374b44ccfcb77ed85d505dbc44265913_3)
)


;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Valid 
;; def=LeftistHeap.fst(131,2-135,11); use=LeftistHeap.fst(134,32-134,33)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_4
x_157b99e815dc43d99415725267e9c452_4)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(129,75-129,76); use=LeftistHeap.fst(131,2-135,11)
(= x_157b99e815dc43d99415725267e9c452_4
@x8)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(134,7-134,26)
(and 
;; def=LeftistHeap.fst(130,18-130,35); use=LeftistHeap.fst(134,7-134,26)
(or label_7

;; def=LeftistHeap.fst(130,18-130,35); use=LeftistHeap.fst(134,7-134,26)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
x_157b99e815dc43d99415725267e9c452_4))
)


;; def=LeftistHeap.fst(130,39-130,56); use=LeftistHeap.fst(134,7-134,26)
(or label_8

;; def=LeftistHeap.fst(130,39-130,56); use=LeftistHeap.fst(134,7-134,26)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x5
x_157b99e815dc43d99415725267e9c452_4))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(134,7-134,26)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=LeftistHeap.fst(130,67-130,94); use=LeftistHeap.fst(134,7-134,26)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_374b44ccfcb77ed85d505dbc44265913_2
@x5)
x_157b99e815dc43d99415725267e9c452_4))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(134,7-134,26)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(134,7-134,26)
(ApplyTT @x6
@x9)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(131,2-135,11)
(not 
;; def=LeftistHeap.fst(132,4-132,18); use=LeftistHeap.fst(132,4-132,18)
(and (BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3))))
(BoxBool_proj_0 (Prims.uu___is_Cons x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)))))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=LeftistHeap.fst(131,8-135,5); use=LeftistHeap.fst(131,8-135,5)
(= (FStar.Pervasives.Native.Mktuple2 (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)
x_374b44ccfcb77ed85d505dbc44265913_2
x_374b44ccfcb77ed85d505dbc44265913_3)
@x2)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(131,2-135,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(131,2-135,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(131,2-135,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.merge_lower_bounded, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded.fuel_instrumented, @fuel_irrelevance_LeftistHeap.merge.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, binder_x_157b99e815dc43d99415725267e9c452_4, binder_x_374b44ccfcb77ed85d505dbc44265913_2, binder_x_374b44ccfcb77ed85d505dbc44265913_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_Prims.Cons, data_elim_LeftistHeap.Mkordered, disc_equation_Prims.Cons, equation_LeftistHeap.leq, equation_with_fuel_LeftistHeap.lower_bounded.fuel_instrumented, equation_with_fuel_LeftistHeap.merge.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_AmpAmp, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, typing_LeftistHeap.lower_bounded, typing_LeftistHeap.merge, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec merge_lower_bounded


; <Start encoding let rec merge_lower_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.merge_lower_bounded (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.merge_lower_bounded@tok () Term)

; </end encoding let rec merge_lower_bounded>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type LeftistHeap.heap


; <Start encoding type LeftistHeap.heap>

;;;;;;;;;;;;;;;;Constructor
(declare-fun LeftistHeap.heap (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun LeftistHeap.heap@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun LeftistHeap.Leaf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Leaf_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: LeftistHeap.Leaf
(declare-fun LeftistHeap.Leaf@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun LeftistHeap.Node (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_key (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_left (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_right (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_rank (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: LeftistHeap.Node
(declare-fun LeftistHeap.Node@tok () Term)
;;;;;;;;;;;;;;;;heap a
(declare-fun Tm_arrow_74b89a8dc0ac027813fa7ee89c8da8f2 () Term)
;;;;;;;;;;;;;;;;key: a -> left: heap a -> right: heap a -> rank: Prims.nat -> heap a
(declare-fun Tm_arrow_07bfaa3dc8215edc253b75823369dba1 () Term)

; <start constructor LeftistHeap.heap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LeftistHeap.heap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
439)
(exists ((@x0 Term))
 (! (= __@x0
(LeftistHeap.heap @x0))
 
;;no pats
:qid is-LeftistHeap.heap))))

; </end constructor LeftistHeap.heap>


; <start constructor LeftistHeap.Leaf>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LeftistHeap.Leaf ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
446)
(= __@x0
(LeftistHeap.Leaf (LeftistHeap.Leaf_a __@x0)))))

; </end constructor LeftistHeap.Leaf>


; <start constructor LeftistHeap.Node>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LeftistHeap.Node ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
451)
(= __@x0
(LeftistHeap.Node (LeftistHeap.Node_a __@x0)
(LeftistHeap.Node_key __@x0)
(LeftistHeap.Node_left __@x0)
(LeftistHeap.Node_right __@x0)
(LeftistHeap.Node_rank __@x0)))))

; </end constructor LeftistHeap.Node>


; </end encoding type LeftistHeap.heap>

;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@x0 Term))
 (! (= (ApplyTT LeftistHeap.heap@tok
@x0)
(LeftistHeap.heap @x0))
 

:pattern ((ApplyTT LeftistHeap.heap@tok
@x0))

:pattern ((LeftistHeap.heap @x0))
:qid token_correspondence_LeftistHeap.heap@tok))

:named token_correspondence_LeftistHeap.heap@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x6)))
:qid subterm_ordering_LeftistHeap.Node))

:named subterm_ordering_LeftistHeap.Node))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_right (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_right))

:named projection_inverse_LeftistHeap.Node_right))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_rank (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_rank))

:named projection_inverse_LeftistHeap.Node_rank))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_left (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_left))

:named projection_inverse_LeftistHeap.Node_left))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_key (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_key))

:named projection_inverse_LeftistHeap.Node_key))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_a (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_a))

:named projection_inverse_LeftistHeap.Node_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@x0 Term))
 (! (= (LeftistHeap.Leaf_a (LeftistHeap.Leaf @x0))
@x0)
 

:pattern ((LeftistHeap.Leaf @x0))
:qid projection_inverse_LeftistHeap.Leaf_a))

:named projection_inverse_LeftistHeap.Leaf_a))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! (is-Tm_arrow (PreType LeftistHeap.heap@tok))
:named pre_kinding_LeftistHeap.heap@tok))
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! (and (IsTotFun LeftistHeap.heap@tok)

;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (LeftistHeap.heap @x0)
Tm_type))
 

:pattern ((LeftistHeap.heap @x0))
:qid kinding_LeftistHeap.heap@tok))
)
:named kinding_LeftistHeap.heap@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(LeftistHeap.heap @x2))
(or (and (is-LeftistHeap.Leaf @x1)
(= @x2
(LeftistHeap.Leaf_a @x1)))
(and (is-LeftistHeap.Node @x1)
(= @x2
(LeftistHeap.Node_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(LeftistHeap.heap @x2)))
:qid fuel_guarded_inversion_LeftistHeap.heap))

:named fuel_guarded_inversion_LeftistHeap.heap))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! (= 440
(Term_constr_id LeftistHeap.heap@tok))
:named fresh_token_LeftistHeap.heap@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(LeftistHeap.heap @x1))
(HasTypeFuel @u0
@x4
(LeftistHeap.heap @x1))
(HasTypeFuel @u0
@x5
Prims.nat))
(HasTypeFuel @u0
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x1)))
 

:pattern ((HasTypeFuel @u0
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x1)))
:qid data_typing_intro_LeftistHeap.Node@tok))

:named data_typing_intro_LeftistHeap.Node@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(LeftistHeap.Leaf @x1)
(LeftistHeap.heap @x1)))
 

:pattern ((HasTypeFuel @u0
(LeftistHeap.Leaf @x1)
(LeftistHeap.heap @x1)))
:qid data_typing_intro_LeftistHeap.Leaf@tok))

:named data_typing_intro_LeftistHeap.Leaf@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x6))
(and (HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x2
@x6)
(HasTypeFuel @u0
@x3
(LeftistHeap.heap @x6))
(HasTypeFuel @u0
@x4
(LeftistHeap.heap @x6))
(HasTypeFuel @u0
@x5
Prims.nat)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x6)))
:qid data_elim_LeftistHeap.Node))

:named data_elim_LeftistHeap.Node))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(LeftistHeap.Leaf @x1)
(LeftistHeap.heap @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(LeftistHeap.Leaf @x1)
(LeftistHeap.heap @x2)))
:qid data_elim_LeftistHeap.Leaf))

:named data_elim_LeftistHeap.Leaf))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@x0 Term))
 (! (= 439
(Term_constr_id (LeftistHeap.heap @x0)))
 

:pattern ((LeftistHeap.heap @x0))
:qid constructor_distinct_LeftistHeap.heap))

:named constructor_distinct_LeftistHeap.heap))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 451
(Term_constr_id (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_LeftistHeap.Node))

:named constructor_distinct_LeftistHeap.Node))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@x0 Term))
 (! (= 446
(Term_constr_id (LeftistHeap.Leaf @x0)))
 

:pattern ((LeftistHeap.Leaf @x0))
:qid constructor_distinct_LeftistHeap.Leaf))

:named constructor_distinct_LeftistHeap.Leaf))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(LeftistHeap.heap @x2))
(= (LeftistHeap.heap @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(LeftistHeap.heap @x2)))
:qid LeftistHeap_pretyping_6ae7a86e8a660f0c10edaf903a0d76de))

:named LeftistHeap_pretyping_6ae7a86e8a660f0c10edaf903a0d76de))
(push) ;; push{4

; Starting query at LeftistHeap.fst(141,0-143,67)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Type).
;   Prims.hasEq a /\
;   (forall (a: Type). {:pattern Prims.hasEq (LeftistHeap.heap a)}
;       Prims.hasEq a ==> Prims.hasEq (LeftistHeap.heap a)) ==>
;   (forall (key: a) (left: LeftistHeap.heap a) (right: LeftistHeap.heap a) (rank: Prims.nat).
;       Prims.hasEq a /\ Prims.hasEq (LeftistHeap.heap a) /\ Prims.hasEq (LeftistHeap.heap a) /\
;       Prims.hasEq Prims.nat)


; Context: While encoding a query
; While typechecking the top-level declaration `type LeftistHeap.heap`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Valid 
;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Prims.hasEq @x0)
)


;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_type)

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Valid 
;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Prims.hasEq @x1)
)
)

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Valid 
;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Prims.hasEq (LeftistHeap.heap @x1))
)
)
 

:pattern ((Prims.hasEq (LeftistHeap.heap @x1)))
:qid @query.1))
)

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
@x0)
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
(LeftistHeap.heap @x0))
(HasType @x4
Prims.nat))

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(and 
;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(143,14-143,15)
(or label_1

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Valid 
;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Prims.hasEq @x0)
)
)


;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(143,24-143,30)
(or label_2

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Valid 
;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Prims.hasEq (LeftistHeap.heap @x0))
)
)


;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(143,40-143,46)
(or label_3

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Valid 
;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Prims.hasEq (LeftistHeap.heap @x0))
)
)


;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(143,55-143,58)
(or label_4

;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Valid 
;; def=LeftistHeap.fst(141,0-143,67); use=LeftistHeap.fst(141,0-143,67)
(Prims.hasEq Prims.nat)
)
)
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.heap, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type LeftistHeap.heap


; <Start encoding type LeftistHeap.heap>

;;;;;;;;;;;;;;;;Constructor
(declare-fun LeftistHeap.heap (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun LeftistHeap.heap@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun LeftistHeap.Leaf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Leaf_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: LeftistHeap.Leaf
(declare-fun LeftistHeap.Leaf@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun LeftistHeap.Node (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_key (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_left (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_right (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun LeftistHeap.Node_rank (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: LeftistHeap.Node
(declare-fun LeftistHeap.Node@tok () Term)
;;;;;;;;;;;;;;;;heap a
(declare-fun Tm_arrow_74b89a8dc0ac027813fa7ee89c8da8f2 () Term)
;;;;;;;;;;;;;;;;key: a -> left: heap a -> right: heap a -> rank: Prims.nat -> heap a
(declare-fun Tm_arrow_07bfaa3dc8215edc253b75823369dba1 () Term)

; <start constructor LeftistHeap.heap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LeftistHeap.heap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
455)
(exists ((@x0 Term))
 (! (= __@x0
(LeftistHeap.heap @x0))
 
;;no pats
:qid is-LeftistHeap.heap))))

; </end constructor LeftistHeap.heap>


; <start constructor LeftistHeap.Leaf>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LeftistHeap.Leaf ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
462)
(= __@x0
(LeftistHeap.Leaf (LeftistHeap.Leaf_a __@x0)))))

; </end constructor LeftistHeap.Leaf>


; <start constructor LeftistHeap.Node>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-LeftistHeap.Node ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
467)
(= __@x0
(LeftistHeap.Node (LeftistHeap.Node_a __@x0)
(LeftistHeap.Node_key __@x0)
(LeftistHeap.Node_left __@x0)
(LeftistHeap.Node_right __@x0)
(LeftistHeap.Node_rank __@x0)))))

; </end constructor LeftistHeap.Node>


; </end encoding type LeftistHeap.heap>


; encoding sigelt assume LeftistHeap.heap__uu___haseq


; <Start encoding assume LeftistHeap.heap__uu___haseq>


; </end encoding assume LeftistHeap.heap__uu___haseq>


; encoding sigelt val LeftistHeap.uu___is_Leaf


; <Start encoding val LeftistHeap.uu___is_Leaf>

(declare-fun LeftistHeap.uu___is_Leaf (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: heap a -> Prims.bool
(declare-fun Tm_arrow_b46d7e4c53028653ab39901fca5bf18a () Term)
(declare-fun LeftistHeap.uu___is_Leaf@tok () Term)

; </end encoding val LeftistHeap.uu___is_Leaf>


; encoding sigelt let uu___is_Leaf


; <Skipped let uu___is_Leaf/>


; encoding sigelt val LeftistHeap.uu___is_Node


; <Start encoding val LeftistHeap.uu___is_Node>

(declare-fun LeftistHeap.uu___is_Node (Term Term) Term)

(declare-fun LeftistHeap.uu___is_Node@tok () Term)

; </end encoding val LeftistHeap.uu___is_Node>


; encoding sigelt let uu___is_Node


; <Skipped let uu___is_Node/>


; encoding sigelt val LeftistHeap.__proj__Node__item__key


; <Start encoding val LeftistHeap.__proj__Node__item__key>

(declare-fun Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 (Term) Term)
(declare-fun LeftistHeap.__proj__Node__item__key (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: heap a {Node? _} -> a
(declare-fun Tm_arrow_ebfdcb5d42abf75d459654ec24de6b1b () Term)
(declare-fun LeftistHeap.__proj__Node__item__key@tok () Term)

; </end encoding val LeftistHeap.__proj__Node__item__key>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.uu___is_Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.uu___is_Node @x0
@x1)
Prims.bool))
 

:pattern ((LeftistHeap.uu___is_Node @x0
@x1))
:qid typing_LeftistHeap.uu___is_Node))

:named typing_LeftistHeap.uu___is_Node))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@x0 Term))
 (! (= (ApplyTT LeftistHeap.heap@tok
@x0)
(LeftistHeap.heap @x0))
 

:pattern ((ApplyTT LeftistHeap.heap@tok
@x0))

:pattern ((LeftistHeap.heap @x0))
:qid token_correspondence_LeftistHeap.heap@tok))

:named token_correspondence_LeftistHeap.heap@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x6)))
:qid subterm_ordering_LeftistHeap.Node))

:named subterm_ordering_LeftistHeap.Node))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.__proj__Node__item__key; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6))

:named refinement_kinding_Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.__proj__Node__item__key; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x2))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.heap @x2))

;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x2)))
:qid refinement_interpretation_Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6))

:named refinement_interpretation_Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_right (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_right))

:named projection_inverse_LeftistHeap.Node_right))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_rank (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_rank))

:named projection_inverse_LeftistHeap.Node_rank))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_left (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_left))

:named projection_inverse_LeftistHeap.Node_left))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_key (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_key))

:named projection_inverse_LeftistHeap.Node_key))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.Node_a (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_LeftistHeap.Node_a))

:named projection_inverse_LeftistHeap.Node_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@x0 Term))
 (! (= (LeftistHeap.Leaf_a (LeftistHeap.Leaf @x0))
@x0)
 

:pattern ((LeftistHeap.Leaf @x0))
:qid projection_inverse_LeftistHeap.Leaf_a))

:named projection_inverse_LeftistHeap.Leaf_a))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! (is-Tm_arrow (PreType LeftistHeap.heap@tok))
:named pre_kinding_LeftistHeap.heap@tok))
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! (and (IsTotFun LeftistHeap.heap@tok)

;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (LeftistHeap.heap @x0)
Tm_type))
 

:pattern ((LeftistHeap.heap @x0))
:qid kinding_LeftistHeap.heap@tok))
)
:named kinding_LeftistHeap.heap@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6
;;; Fact-ids: Name LeftistHeap.__proj__Node__item__key; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x0)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x0))))
:qid haseqTm_refine_24fc79973b38ca9a10812bfc6d1e3bf6))

:named haseqTm_refine_24fc79973b38ca9a10812bfc6d1e3bf6))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(LeftistHeap.heap @x2))
(or (and (is-LeftistHeap.Leaf @x1)
(= @x2
(LeftistHeap.Leaf_a @x1)))
(and (is-LeftistHeap.Node @x1)
(= @x2
(LeftistHeap.Node_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(LeftistHeap.heap @x2)))
:qid fuel_guarded_inversion_LeftistHeap.heap))

:named fuel_guarded_inversion_LeftistHeap.heap))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! (= 456
(Term_constr_id LeftistHeap.heap@tok))
:named fresh_token_LeftistHeap.heap@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name LeftistHeap.uu___is_Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.uu___is_Node @x0
@x1)
(BoxBool (is-LeftistHeap.Node @x1)))
 

:pattern ((LeftistHeap.uu___is_Node @x0
@x1))
:qid disc_equation_LeftistHeap.Node))

:named disc_equation_LeftistHeap.Node))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(LeftistHeap.heap @x1))
(HasTypeFuel @u0
@x4
(LeftistHeap.heap @x1))
(HasTypeFuel @u0
@x5
Prims.nat))
(HasTypeFuel @u0
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x1)))
 

:pattern ((HasTypeFuel @u0
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x1)))
:qid data_typing_intro_LeftistHeap.Node@tok))

:named data_typing_intro_LeftistHeap.Node@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(LeftistHeap.Leaf @x1)
(LeftistHeap.heap @x1)))
 

:pattern ((HasTypeFuel @u0
(LeftistHeap.Leaf @x1)
(LeftistHeap.heap @x1)))
:qid data_typing_intro_LeftistHeap.Leaf@tok))

:named data_typing_intro_LeftistHeap.Leaf@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x6))
(and (HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x2
@x6)
(HasTypeFuel @u0
@x3
(LeftistHeap.heap @x6))
(HasTypeFuel @u0
@x4
(LeftistHeap.heap @x6))
(HasTypeFuel @u0
@x5
Prims.nat)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(LeftistHeap.Node @x1
@x2
@x3
@x4
@x5)
(LeftistHeap.heap @x6)))
:qid data_elim_LeftistHeap.Node))

:named data_elim_LeftistHeap.Node))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(LeftistHeap.Leaf @x1)
(LeftistHeap.heap @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(LeftistHeap.Leaf @x1)
(LeftistHeap.heap @x2)))
:qid data_elim_LeftistHeap.Leaf))

:named data_elim_LeftistHeap.Leaf))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@x0 Term))
 (! (= 455
(Term_constr_id (LeftistHeap.heap @x0)))
 

:pattern ((LeftistHeap.heap @x0))
:qid constructor_distinct_LeftistHeap.heap))

:named constructor_distinct_LeftistHeap.heap))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,4-143,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 467
(Term_constr_id (LeftistHeap.Node @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((LeftistHeap.Node @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_LeftistHeap.Node))

:named constructor_distinct_LeftistHeap.Node))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@x0 Term))
 (! (= 462
(Term_constr_id (LeftistHeap.Leaf @x0)))
 

:pattern ((LeftistHeap.Leaf @x0))
:qid constructor_distinct_LeftistHeap.Leaf))

:named constructor_distinct_LeftistHeap.Leaf))
;;;;;;;;;;;;;;;;Assumption: LeftistHeap.heap__uu___haseq
;;; Fact-ids: Name LeftistHeap.heap__uu___haseq; Namespace LeftistHeap
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Prims.hasEq (LeftistHeap.heap @x0)))
:qid assumption_LeftistHeap.heap__uu___haseq))
:named assumption_LeftistHeap.heap__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name LeftistHeap.heap; Namespace LeftistHeap; Name LeftistHeap.Leaf; Namespace LeftistHeap; Name LeftistHeap.Node; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(141,5-141,9); use=LeftistHeap.fst(141,5-141,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(LeftistHeap.heap @x2))
(= (LeftistHeap.heap @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(LeftistHeap.heap @x2)))
:qid LeftistHeap_pretyping_6ae7a86e8a660f0c10edaf903a0d76de))

:named LeftistHeap_pretyping_6ae7a86e8a660f0c10edaf903a0d76de))
(push) ;; push{2

; Starting query at LeftistHeap.fst(143,10-143,13)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (a: Type) (projectee: _: LeftistHeap.heap a {Node? _}).
;   (*  - Could not prove post-condition
; *) ~(Node? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Node__item__key`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x0))

;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,10-143,13)
(not 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,10-143,13)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.__proj__Node__item__key, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Node__item__key


; <Skipped let __proj__Node__item__key/>


; encoding sigelt val LeftistHeap.__proj__Node__item__left


; <Start encoding val LeftistHeap.__proj__Node__item__left>


(declare-fun LeftistHeap.__proj__Node__item__left (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: heap a {Node? _} -> heap a
(declare-fun Tm_arrow_f97a6eea403e7f56839b62584926d9ae () Term)
(declare-fun LeftistHeap.__proj__Node__item__left@tok () Term)

; </end encoding val LeftistHeap.__proj__Node__item__left>

(push) ;; push{2

; Starting query at LeftistHeap.fst(143,19-143,23)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (a: Type) (projectee: _: LeftistHeap.heap a {Node? _}).
;   (*  - Could not prove post-condition
; *) ~(Node? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Node__item__left`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x0))

;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,19-143,23)
(not 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,19-143,23)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.__proj__Node__item__left, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Node__item__left


; <Skipped let __proj__Node__item__left/>


; encoding sigelt val LeftistHeap.__proj__Node__item__right


; <Start encoding val LeftistHeap.__proj__Node__item__right>


(declare-fun LeftistHeap.__proj__Node__item__right (Term Term) Term)


(declare-fun LeftistHeap.__proj__Node__item__right@tok () Term)

; </end encoding val LeftistHeap.__proj__Node__item__right>

(push) ;; push{2

; Starting query at LeftistHeap.fst(143,34-143,39)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (a: Type) (projectee: _: LeftistHeap.heap a {Node? _}).
;   (*  - Could not prove post-condition
; *) ~(Node? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Node__item__right`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x0))

;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,34-143,39)
(not 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,34-143,39)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.__proj__Node__item__right, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Node__item__right


; <Skipped let __proj__Node__item__right/>


; encoding sigelt val LeftistHeap.__proj__Node__item__rank


; <Start encoding val LeftistHeap.__proj__Node__item__rank>


(declare-fun LeftistHeap.__proj__Node__item__rank (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: heap a {Node? _} -> Prims.nat
(declare-fun Tm_arrow_ae3e5168c71ecc8eae98afbafa4ad44b () Term)
(declare-fun LeftistHeap.__proj__Node__item__rank@tok () Term)

; </end encoding val LeftistHeap.__proj__Node__item__rank>

(push) ;; push{2

; Starting query at LeftistHeap.fst(143,50-143,54)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (a: Type) (projectee: _: LeftistHeap.heap a {Node? _}).
;   (*  - Could not prove post-condition
; *) ~(Node? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Node__item__rank`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6 @x0))

;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,50-143,54)
(not 
;; def=LeftistHeap.fst(143,4-143,8); use=LeftistHeap.fst(143,50-143,54)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.__proj__Node__item__rank, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_24fc79973b38ca9a10812bfc6d1e3bf6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Node__item__rank


; <Skipped let __proj__Node__item__rank/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.uu___is_Leaf; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.uu___is_Leaf @x0
@x1)
Prims.bool))
 

:pattern ((LeftistHeap.uu___is_Leaf @x0
@x1))
:qid typing_LeftistHeap.uu___is_Leaf))

:named typing_LeftistHeap.uu___is_Leaf))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name LeftistHeap.uu___is_Leaf; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(142,4-142,8); use=LeftistHeap.fst(142,4-142,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.uu___is_Leaf @x0
@x1)
(BoxBool (is-LeftistHeap.Leaf @x1)))
 

:pattern ((LeftistHeap.uu___is_Leaf @x0
@x1))
:qid disc_equation_LeftistHeap.Leaf))

:named disc_equation_LeftistHeap.Leaf))
(push) ;; push{2

; Starting query at LeftistHeap.fst(146,2-148,39)

;;;;;;;;;;;;;;;;uu___ : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap _ (LeftistHeap.heap _)
(declare-fun x_a682a62895731b424b52019f5f3073c0_2 () Term)
;;;;;;;;;;;;;;;;binder_x_a682a62895731b424b52019f5f3073c0_2
;;; Fact-ids: 
(assert (! (HasType x_a682a62895731b424b52019f5f3073c0_2
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_a682a62895731b424b52019f5f3073c0_2))
(declare-fun Tm_refine_7b9105564f211f908af72c6fc72328b2 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(145,13-148,39); use=LeftistHeap.fst(145,13-148,39)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7b9105564f211f908af72c6fc72328b2 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7b9105564f211f908af72c6fc72328b2 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7b9105564f211f908af72c6fc72328b2))

:named refinement_kinding_Tm_refine_7b9105564f211f908af72c6fc72328b2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(145,13-148,39); use=LeftistHeap.fst(145,13-148,39)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7b9105564f211f908af72c6fc72328b2 @x2))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.heap @x2))

;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(146,2-148,39)

;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(146,2-148,39)
(Valid 
;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(146,2-148,39)
(Prims.precedes (LeftistHeap.heap @x2)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x1
x_a682a62895731b424b52019f5f3073c0_2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7b9105564f211f908af72c6fc72328b2 @x2)))
:qid refinement_interpretation_Tm_refine_7b9105564f211f908af72c6fc72328b2))

:named refinement_interpretation_Tm_refine_7b9105564f211f908af72c6fc72328b2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7b9105564f211f908af72c6fc72328b2
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(145,13-148,39); use=LeftistHeap.fst(145,13-148,39)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7b9105564f211f908af72c6fc72328b2 @x0)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7b9105564f211f908af72c6fc72328b2 @x0))))
:qid haseqTm_refine_7b9105564f211f908af72c6fc72328b2))

:named haseqTm_refine_7b9105564f211f908af72c6fc72328b2))
(declare-fun LeftistHeap.size (Term Term) Term)

;;;;;;;;;;;;;;;;t: heap _ {t << t} -> Prims.GTot Prims.nat
(declare-fun Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f
Tm_type)
:named kinding_Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(145,13-148,39); use=LeftistHeap.fst(145,13-148,39)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(145,13-148,39); use=LeftistHeap.fst(145,13-148,39)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f)
(and 
;; def=LeftistHeap.fst(145,13-148,39); use=LeftistHeap.fst(145,13-148,39)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_refine_7b9105564f211f908af72c6fc72328b2 @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.nat))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f))

:named LeftistHeap_interpretation_Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f))
(declare-fun LeftistHeap.size@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.size@tok
@x0)
@x1)
(LeftistHeap.size @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT LeftistHeap.size@tok
@x0)
@x1))
:qid token_correspondence_LeftistHeap.size))

:named token_correspondence_LeftistHeap.size))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.size@tok
Tm_ghost_arrow_5ea8bd4b686531294a5ed547332d4e3f))

;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.size@tok
@x1)
@x2)
(LeftistHeap.size @x1
@x2))
 

:pattern ((LeftistHeap.size @x1
@x2))
:qid function_token_typing_LeftistHeap.size.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.size@tok))
:qid function_token_typing_LeftistHeap.size))

:named function_token_typing_LeftistHeap.size))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7b9105564f211f908af72c6fc72328b2 @x0)))
(HasType (LeftistHeap.size @x0
@x1)
Prims.nat))
 

:pattern ((LeftistHeap.size @x0
@x1))
:qid typing_LeftistHeap.size))

:named typing_LeftistHeap.size))
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.nat).
;   (forall (x: Prims.nat). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: _) (b: LeftistHeap.heap _) (b: LeftistHeap.heap _) (b: Prims.nat).
;         t == LeftistHeap.Node b b b b ==>
;         b << t /\
;         (forall (any_result: LeftistHeap.heap _).
;             b == any_result ==>
;             (forall (any_result: Prims.nat).
;                 LeftistHeap.size b == any_result ==>
;                 (forall (return_val: Prims.nat).
;                     return_val == LeftistHeap.size b ==>
;                     LeftistHeap.size b == return_val ==>
;                     (forall (any_result: Prims.int).
;                         1 + LeftistHeap.size b == any_result ==>
;                         b << t /\
;                         (forall (any_result: LeftistHeap.heap _).
;                             b == any_result ==>
;                             (forall (any_result: Prims.nat).
;                                 LeftistHeap.size b == any_result ==>
;                                 (forall (return_val: Prims.nat).
;                                     return_val == LeftistHeap.size b ==>
;                                     LeftistHeap.size b == return_val ==>
;                                     (forall (any_result: Prims.int).
;                                         1 + LeftistHeap.size b + LeftistHeap.size b == any_result ==>
;                                         1 + LeftistHeap.size b + LeftistHeap.size b >= 0))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec size`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.nat))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(146,2-148,39)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(146,2-148,39)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(146,2-148,39)
(and (implies 
;; def=LeftistHeap.fst(145,13-145,14); use=LeftistHeap.fst(146,8-146,9)
(and 
;; def=LeftistHeap.fst(145,13-145,14); use=LeftistHeap.fst(146,8-146,9)
(not 
;; def=LeftistHeap.fst(145,13-145,14); use=LeftistHeap.fst(146,8-146,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)


;; def=LeftistHeap.fst(145,13-145,14); use=LeftistHeap.fst(146,8-146,9)
(not 
;; def=LeftistHeap.fst(145,13-145,14); use=LeftistHeap.fst(146,8-146,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(146,2-148,39)
(not 
;; def=LeftistHeap.fst(145,13-145,14); use=LeftistHeap.fst(146,8-146,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=LeftistHeap.fst(145,13-148,16); use=LeftistHeap.fst(146,8-148,16)
(= x_a682a62895731b424b52019f5f3073c0_2
(LeftistHeap.Node x_fe28d8bcde588226b4e538b35321de05_1
@x1
@x2
@x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(146,2-148,39)
(and 
;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(148,29-148,30)
(or label_2

;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(148,29-148,30)
(Valid 
;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(148,29-148,30)
(Prims.precedes (LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x2
x_a682a62895731b424b52019f5f3073c0_2)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=LeftistHeap.fst(145,13-148,12); use=LeftistHeap.fst(146,2-148,39)
(= @x2
@x5)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=LeftistHeap.fst(145,21-148,30); use=LeftistHeap.fst(148,24-148,30)
(= (LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x2)
@x6)
)

;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(146,2-148,39)
(= @x7
(LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x2))


;; def=dummy(0,0-0,0); use=LeftistHeap.fst(146,2-148,39)
(= (LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x2)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.int)

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(146,2-148,39)
(= (Prims.op_Addition (BoxInt 1)
(LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x2))
@x8)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(146,2-148,39)
(and 
;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(148,38-148,39)
(or label_3

;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(148,38-148,39)
(Valid 
;; def=LeftistHeap.fst(146,2-148,39); use=LeftistHeap.fst(148,38-148,39)
(Prims.precedes (LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_a682a62895731b424b52019f5f3073c0_2)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=LeftistHeap.fst(145,13-148,14); use=LeftistHeap.fst(146,2-148,39)
(= @x3
@x9)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.nat)

;; def=LeftistHeap.fst(145,21-148,39); use=LeftistHeap.fst(148,33-148,39)
(= (LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x3)
@x10)
)

;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(146,2-148,39)
(= @x11
(LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x3))


;; def=dummy(0,0-0,0); use=LeftistHeap.fst(146,2-148,39)
(= (LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x3)
@x11)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(146,2-148,39)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.int)

;; def=LeftistHeap.fst(145,21-148,39); use=LeftistHeap.fst(146,2-148,39)
(= (Prims.op_Addition (Prims.op_Addition (BoxInt 1)
(LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x2))
(LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x3))
@x12)
)

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(148,20-148,39)
(or label_4

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(148,20-148,39)
(>= (BoxInt_proj_0 (Prims.op_Addition (Prims.op_Addition (BoxInt 1)
(LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x2))
(LeftistHeap.size x_fe28d8bcde588226b4e538b35321de05_1
@x3)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.size, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_a682a62895731b424b52019f5f3073c0_2, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, equation_Prims.nat, fuel_guarded_inversion_LeftistHeap.heap, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_right, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_LeftistHeap.Node

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec size


; <Start encoding let rec size>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.size.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.size.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.size (Term Term) Term)
(declare-fun LeftistHeap.size@tok () Term)
;;;;;;;;;;;;;;;;t: heap _ -> Prims.GTot Prims.nat
(declare-fun Tm_ghost_arrow_756c2bc250905e4c359ca3a5c2381100 () Term)

; </end encoding let rec size>

(push) ;; push{2

; Starting query at LeftistHeap.fst(152,2-154,79)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___9 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;m : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_3 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_3
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_3
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_3))
(declare-fun Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_2b3bf70e047f60cafce74692a6bbbc30))

:named refinement_kinding_Tm_refine_2b3bf70e047f60cafce74692a6bbbc30))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)

;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(or 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(152,2-154,79)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(152,2-154,79)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(and 
;; def=LeftistHeap.fst(151,29-151,30); use=LeftistHeap.fst(151,29-151,30)
(Valid 
;; def=LeftistHeap.fst(151,29-151,30); use=LeftistHeap.fst(151,29-151,30)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(151,43-154,79); use=LeftistHeap.fst(151,43-154,79)
(or 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(152,2-154,79)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(152,2-154,79)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(151,43-154,79); use=LeftistHeap.fst(151,43-154,79)
(and 
;; def=LeftistHeap.fst(151,43-151,44); use=LeftistHeap.fst(151,43-151,44)
(Valid 
;; def=LeftistHeap.fst(151,43-151,44); use=LeftistHeap.fst(151,43-151,44)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(151,61-154,79); use=LeftistHeap.fst(151,61-154,79)
(or 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(152,2-154,79)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(152,2-154,79)
(Prims.precedes (LeftistHeap.heap @x2)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(151,61-154,79); use=LeftistHeap.fst(151,61-154,79)
(and 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(151,61-151,62)
(Valid 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(151,61-151,62)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap @x2)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(152,2-154,79)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(152,2-154,79)
(Prims.precedes @x2
x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_2b3bf70e047f60cafce74692a6bbbc30))

:named refinement_interpretation_Tm_refine_2b3bf70e047f60cafce74692a6bbbc30))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2b3bf70e047f60cafce74692a6bbbc30
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 @x0
@x1
@x2)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 @x0
@x1
@x2))))
:qid haseqTm_refine_2b3bf70e047f60cafce74692a6bbbc30))

:named haseqTm_refine_2b3bf70e047f60cafce74692a6bbbc30))
(declare-fun LeftistHeap.lower_bounded_heap (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;{| _: ordered a |} ->     t: heap a ->     m: a{a << a \/ a === a /\ (_ << _ \/ _ === _ /\ (t << t \/ t === t /\ m << m))}   -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a
Tm_type)
:named kinding_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a)
(and 
;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
(Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a.1))

(IsTotFun @x0)

;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a.2))


;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(151,29-154,79)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a.3))
))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a))

:named LeftistHeap_interpretation_Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a))
(declare-fun LeftistHeap.lower_bounded_heap@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.lower_bounded_heap@tok
@x0)
@x1)
@x2)
@x3)
(LeftistHeap.lower_bounded_heap @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.lower_bounded_heap@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_LeftistHeap.lower_bounded_heap))

:named token_correspondence_LeftistHeap.lower_bounded_heap))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.lower_bounded_heap@tok
Tm_ghost_arrow_21ebcd0ff20bc09d1f2e11bfa3a1ef0a))

;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.lower_bounded_heap@tok
@x1)
@x2)
@x3)
@x4)
(LeftistHeap.lower_bounded_heap @x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.lower_bounded_heap @x1
@x2
@x3
@x4))
:qid function_token_typing_LeftistHeap.lower_bounded_heap.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.lower_bounded_heap@tok))
:qid function_token_typing_LeftistHeap.lower_bounded_heap))

:named function_token_typing_LeftistHeap.lower_bounded_heap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
(Tm_refine_2b3bf70e047f60cafce74692a6bbbc30 @x0
@x1
@x2)))
(HasType (LeftistHeap.lower_bounded_heap @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((LeftistHeap.lower_bounded_heap @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.lower_bounded_heap))

:named typing_LeftistHeap.lower_bounded_heap))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.bool).
;   (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: a) (b: LeftistHeap.heap a) (b: LeftistHeap.heap a) (b: Prims.nat).
;         t == LeftistHeap.Node b b b b ==>
;         (a << a \/ (_ << _ \/ (b << t \/ b === t /\ b << m))) /\
;         (LeftistHeap.lower_bounded_heap b b ==> a << a \/ (_ << _ \/ (b << t \/ b === t /\ b << m)))
;     ))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec lower_bounded_heap`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(152,2-154,79)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(152,2-154,79)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(152,2-154,79)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(152,2-154,79)
(and (implies 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(152,8-152,9)
(and 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(152,8-152,9)
(not 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(152,8-152,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(152,8-152,9)
(not 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(152,8-152,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(152,2-154,79)
(not 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(152,8-152,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(152,2-154,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(152,2-154,79)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(152,2-154,79)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(152,2-154,79)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=LeftistHeap.fst(151,61-154,16); use=LeftistHeap.fst(152,8-154,16)
(= x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
@x2
@x3
@x4))
)

;; def=LeftistHeap.fst(154,9-154,42); use=LeftistHeap.fst(154,20-154,68)
(and 
;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(154,41-154,42)
(or label_2

;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,41-154,42)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,41-154,42)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,41-154,42)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,41-154,42)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,41-154,42)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,41-154,42)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(151,61-154,79); use=LeftistHeap.fst(154,41-154,42)
(and 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(154,41-154,42)
(Valid 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(154,41-154,42)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,41-154,42)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,41-154,42)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
)
)
)

(implies 
;; def=LeftistHeap.fst(154,20-154,42); use=LeftistHeap.fst(154,20-154,42)
(BoxBool_proj_0 (LeftistHeap.lower_bounded_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x1))


;; def=LeftistHeap.fst(151,29-154,79); use=LeftistHeap.fst(154,67-154,68)
(or label_3

;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,67-154,68)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,67-154,68)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,67-154,68)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,67-154,68)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,67-154,68)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,67-154,68)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(151,61-154,79); use=LeftistHeap.fst(154,67-154,68)
(and 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(154,67-154,68)
(Valid 
;; def=LeftistHeap.fst(151,61-151,62); use=LeftistHeap.fst(154,67-154,68)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,67-154,68)
(Valid 
;; def=LeftistHeap.fst(152,2-154,79); use=LeftistHeap.fst(154,67-154,68)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
)
)
)
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.lower_bounded_heap, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_f0062e810d23900aea914a963397c69a_1, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_right, subterm_ordering_LeftistHeap.Node

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec lower_bounded_heap


; <Start encoding let rec lower_bounded_heap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.lower_bounded_heap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.lower_bounded_heap.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.lower_bounded_heap (Term Term Term Term) Term)
(declare-fun LeftistHeap.lower_bounded_heap@tok () Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: heap a -> m: a -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_3854ebab55708d29f4a96453782c9aee () Term)


; </end encoding let rec lower_bounded_heap>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
(push) ;; push{2

; Starting query at LeftistHeap.fst(157,2-159,68)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a) (t: LeftistHeap.heap a).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post Prims.prop).
;     (forall (x: Prims.prop). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;     ~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let heap_property`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0)))
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.prop))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(157,2-159,68)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(157,2-159,68)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(157,2-159,68)
(ApplyTT @x3
@x4)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid @query.2))


;; def=LeftistHeap.fst(156,52-156,53); use=LeftistHeap.fst(157,8-157,9)
(not 
;; def=LeftistHeap.fst(156,52-156,53); use=LeftistHeap.fst(157,8-157,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf @x0
@x2))
)


;; def=LeftistHeap.fst(156,52-156,53); use=LeftistHeap.fst(157,8-157,9)
(not 
;; def=LeftistHeap.fst(156,52-156,53); use=LeftistHeap.fst(157,8-157,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x0
@x2))
)
)
label_1)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.heap_property, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, fuel_guarded_inversion_LeftistHeap.heap, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let heap_property


; <Start encoding let heap_property>

(declare-fun LeftistHeap.heap_property (Term Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: heap a -> Prims.prop
(declare-fun Tm_arrow_2fd720f097ffa66be36f819436dc9854 () Term)
(declare-fun LeftistHeap.heap_property@tok () Term)

; </end encoding let heap_property>

(push) ;; push{2

; Starting query at LeftistHeap.fst(162,2-164,63)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___11 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;y : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_3 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_3
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_3
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_3))
(declare-fun Tm_refine_86f11cf3340a7b28c84dda4e33951055 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_86f11cf3340a7b28c84dda4e33951055 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_86f11cf3340a7b28c84dda4e33951055 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_86f11cf3340a7b28c84dda4e33951055))

:named refinement_kinding_Tm_refine_86f11cf3340a7b28c84dda4e33951055))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_86f11cf3340a7b28c84dda4e33951055 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)

;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(or 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(162,2-164,63)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(162,2-164,63)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(and 
;; def=LeftistHeap.fst(161,21-161,22); use=LeftistHeap.fst(161,21-161,22)
(Valid 
;; def=LeftistHeap.fst(161,21-161,22); use=LeftistHeap.fst(161,21-161,22)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(161,35-164,63); use=LeftistHeap.fst(161,35-164,63)
(or 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(162,2-164,63)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(162,2-164,63)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(161,35-164,63); use=LeftistHeap.fst(161,35-164,63)
(and 
;; def=LeftistHeap.fst(161,35-161,36); use=LeftistHeap.fst(161,35-161,36)
(Valid 
;; def=LeftistHeap.fst(161,35-161,36); use=LeftistHeap.fst(161,35-161,36)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(161,53-164,63); use=LeftistHeap.fst(161,53-164,63)
(or 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(162,2-164,63)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(162,2-164,63)
(Prims.precedes (LeftistHeap.heap @x2)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(161,53-164,63); use=LeftistHeap.fst(161,53-164,63)
(and 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(161,53-161,54)
(Valid 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(161,53-161,54)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap @x2)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(162,2-164,63)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(162,2-164,63)
(Prims.precedes @x2
x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_86f11cf3340a7b28c84dda4e33951055 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_86f11cf3340a7b28c84dda4e33951055))

:named refinement_interpretation_Tm_refine_86f11cf3340a7b28c84dda4e33951055))
;;;;;;;;;;;;;;;;haseq for Tm_refine_86f11cf3340a7b28c84dda4e33951055
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_86f11cf3340a7b28c84dda4e33951055 @x0
@x1
@x2)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_86f11cf3340a7b28c84dda4e33951055 @x0
@x1
@x2))))
:qid haseqTm_refine_86f11cf3340a7b28c84dda4e33951055))

:named haseqTm_refine_86f11cf3340a7b28c84dda4e33951055))
(declare-fun LeftistHeap.count_heap (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;{| _: ordered a |} ->     t: heap a ->     y: a{a << a \/ a === a /\ (_ << _ \/ _ === _ /\ (t << t \/ t === t /\ y << y))}   -> Prims.GTot Prims.nat
(declare-fun Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2
Tm_type)
:named kinding_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2)
(and 
;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
(Tm_refine_86f11cf3340a7b28c84dda4e33951055 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
Prims.nat))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2.1))

(IsTotFun @x0)

;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2.2))


;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(161,21-164,63)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2.3))
))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2))

:named LeftistHeap_interpretation_Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2))
(declare-fun LeftistHeap.count_heap@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.count_heap@tok
@x0)
@x1)
@x2)
@x3)
(LeftistHeap.count_heap @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.count_heap@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_LeftistHeap.count_heap))

:named token_correspondence_LeftistHeap.count_heap))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.count_heap@tok
Tm_ghost_arrow_4c24842d00657207b6856bb5d33e86e2))

;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.count_heap@tok
@x1)
@x2)
@x3)
@x4)
(LeftistHeap.count_heap @x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.count_heap @x1
@x2
@x3
@x4))
:qid function_token_typing_LeftistHeap.count_heap.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.count_heap@tok))
:qid function_token_typing_LeftistHeap.count_heap))

:named function_token_typing_LeftistHeap.count_heap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
(Tm_refine_86f11cf3340a7b28c84dda4e33951055 @x0
@x1
@x2)))
(HasType (LeftistHeap.count_heap @x0
@x1
@x2
@x3)
Prims.nat))
 

:pattern ((LeftistHeap.count_heap @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.count_heap))

:named typing_LeftistHeap.count_heap))
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.nat).
;   (forall (x: Prims.nat). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: a) (b: LeftistHeap.heap a) (b: LeftistHeap.heap a) (b: Prims.nat).
;         t == LeftistHeap.Node b b b b ==>
;         (forall (any_result: Prims.int).
;             LeftistHeap.delta b y == any_result ==>
;             (a << a \/ (_ << _ \/ (b << t \/ b === t /\ y << y))) /\
;             (forall (any_result: a).
;                 y == any_result ==>
;                 (forall (any_result: Prims.nat).
;                     LeftistHeap.count_heap b y == any_result ==>
;                     (forall (return_val: Prims.nat).
;                         return_val == LeftistHeap.count_heap b y ==>
;                         LeftistHeap.count_heap b y == return_val ==>
;                         (forall (any_result: Prims.int).
;                             LeftistHeap.delta b y + LeftistHeap.count_heap b y == any_result ==>
;                             (a << a \/ (_ << _ \/ (b << t \/ b === t /\ y << y))) /\
;                             (forall (any_result: a).
;                                 y == any_result ==>
;                                 (forall (any_result: Prims.nat).
;                                     LeftistHeap.count_heap b y == any_result ==>
;                                     (forall (return_val: Prims.nat).
;                                         return_val == LeftistHeap.count_heap b y ==>
;                                         LeftistHeap.count_heap b y == return_val ==>
;                                         (forall (any_result: Prims.int).
;                                             LeftistHeap.delta b y + LeftistHeap.count_heap b y +
;                                             LeftistHeap.count_heap b y ==
;                                             any_result ==>
;                                             LeftistHeap.delta b y + LeftistHeap.count_heap b y +
;                                             LeftistHeap.count_heap b y >=
;                                             0)))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec count_heap`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.nat))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(162,2-164,63)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(162,2-164,63)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(162,2-164,63)
(and (implies 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(162,8-162,9)
(and 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(162,8-162,9)
(not 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(162,8-162,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(162,8-162,9)
(not 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(162,8-162,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(162,2-164,63)
(not 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(162,8-162,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=LeftistHeap.fst(161,53-164,16); use=LeftistHeap.fst(162,8-164,16)
(= x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
@x2
@x3
@x4))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.int)

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(162,2-164,63)
(= (LeftistHeap.delta x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(162,2-164,63)
(and 
;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(164,45-164,46)
(or label_2

;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,45-164,46)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,45-164,46)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,45-164,46)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,45-164,46)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,45-164,46)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,45-164,46)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(161,53-164,63); use=LeftistHeap.fst(164,45-164,46)
(and 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(164,45-164,46)
(Valid 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(164,45-164,46)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,45-164,46)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,45-164,46)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_3
x_157b99e815dc43d99415725267e9c452_3)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(161,64-161,65); use=LeftistHeap.fst(162,2-164,63)
(= x_157b99e815dc43d99415725267e9c452_3
@x6)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=LeftistHeap.fst(161,72-164,46); use=LeftistHeap.fst(164,32-164,46)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
x_157b99e815dc43d99415725267e9c452_3)
@x7)
)

;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(162,2-164,63)
(= @x8
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
x_157b99e815dc43d99415725267e9c452_3))


;; def=dummy(0,0-0,0); use=LeftistHeap.fst(162,2-164,63)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
x_157b99e815dc43d99415725267e9c452_3)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(162,2-164,63)
(= (Prims.op_Addition (LeftistHeap.delta x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
x_157b99e815dc43d99415725267e9c452_3))
@x9)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(162,2-164,63)
(and 
;; def=LeftistHeap.fst(161,21-164,63); use=LeftistHeap.fst(164,62-164,63)
(or label_3

;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,62-164,63)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,62-164,63)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,62-164,63)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,62-164,63)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,62-164,63)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,62-164,63)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(161,53-164,63); use=LeftistHeap.fst(164,62-164,63)
(and 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(164,62-164,63)
(Valid 
;; def=LeftistHeap.fst(161,53-161,54); use=LeftistHeap.fst(164,62-164,63)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,62-164,63)
(Valid 
;; def=LeftistHeap.fst(162,2-164,63); use=LeftistHeap.fst(164,62-164,63)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_3
x_157b99e815dc43d99415725267e9c452_3)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(161,64-161,65); use=LeftistHeap.fst(162,2-164,63)
(= x_157b99e815dc43d99415725267e9c452_3
@x10)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=LeftistHeap.fst(161,72-164,63); use=LeftistHeap.fst(164,49-164,63)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_3)
@x11)
)

;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(162,2-164,63)
(= @x12
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_3))


;; def=dummy(0,0-0,0); use=LeftistHeap.fst(162,2-164,63)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_3)
@x12)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(162,2-164,63)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.int)

;; def=LeftistHeap.fst(161,72-164,63); use=LeftistHeap.fst(162,2-164,63)
(= (Prims.op_Addition (Prims.op_Addition (LeftistHeap.delta x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
x_157b99e815dc43d99415725267e9c452_3))
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_3))
@x13)
)

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(164,20-164,63)
(or label_4

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(164,20-164,63)
(>= (BoxInt_proj_0 (Prims.op_Addition (Prims.op_Addition (LeftistHeap.delta x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
x_157b99e815dc43d99415725267e9c452_3)
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
x_157b99e815dc43d99415725267e9c452_3))
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_3)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.count_heap, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_f0062e810d23900aea914a963397c69a_1, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, equation_LeftistHeap.delta, equation_Prims.nat, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_right, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_LeftistHeap.Node

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec count_heap


; <Start encoding let rec count_heap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.count_heap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.count_heap.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.count_heap (Term Term Term Term) Term)
(declare-fun LeftistHeap.count_heap@tok () Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: heap a -> y: a -> Prims.GTot Prims.nat
(declare-fun Tm_ghost_arrow_ba8a816a725daaeb4624a54a62744065 () Term)

; </end encoding let rec count_heap>

(push) ;; push{2

; Starting query at LeftistHeap.fst(171,2-173,62)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___12 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
(declare-fun Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f))

:named refinement_kinding_Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f @x2
@x3))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.heap @x2))

;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)

;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(or 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(171,2-173,62)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(171,2-173,62)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(and 
;; def=LeftistHeap.fst(170,22-170,23); use=LeftistHeap.fst(170,22-170,23)
(Valid 
;; def=LeftistHeap.fst(170,22-170,23); use=LeftistHeap.fst(170,22-170,23)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(170,36-173,62); use=LeftistHeap.fst(170,36-173,62)
(or 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(171,2-173,62)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(171,2-173,62)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(170,36-173,62); use=LeftistHeap.fst(170,36-173,62)
(and 
;; def=LeftistHeap.fst(170,36-170,37); use=LeftistHeap.fst(170,36-170,37)
(Valid 
;; def=LeftistHeap.fst(170,36-170,37); use=LeftistHeap.fst(170,36-170,37)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(171,2-173,62)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(171,2-173,62)
(Prims.precedes (LeftistHeap.heap @x2)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x1
x_2611d061955cd24360b6c9637f442521_2)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f @x2
@x3)))
:qid refinement_interpretation_Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f))

:named refinement_interpretation_Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f @x0
@x1)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f @x0
@x1))))
:qid haseqTm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f))

:named haseqTm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f))
(declare-fun LeftistHeap.to_list_aux (Term Term Term) Term)

;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: heap a {a << a \/ a === a /\ (_ << _ \/ _ === _ /\ t << t)}   -> Prims.GTot (Prims.list a)
(declare-fun Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d
Tm_type)
:named kinding_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d)
(and 
;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(Prims.list @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d.1))

(IsTotFun @x0)

;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(170,22-173,62)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d.2))
))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d))

:named LeftistHeap_interpretation_Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d))
(declare-fun LeftistHeap.to_list_aux@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT LeftistHeap.to_list_aux@tok
@x0)
@x1)
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT LeftistHeap.to_list_aux@tok
@x0)
@x1)
@x2))
:qid token_correspondence_LeftistHeap.to_list_aux))

:named token_correspondence_LeftistHeap.to_list_aux))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.to_list_aux@tok
Tm_ghost_arrow_932fc3b4f31ab8fb15127a91182f506d))

;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT LeftistHeap.to_list_aux@tok
@x1)
@x2)
@x3)
(LeftistHeap.to_list_aux @x1
@x2
@x3))
 

:pattern ((LeftistHeap.to_list_aux @x1
@x2
@x3))
:qid function_token_typing_LeftistHeap.to_list_aux.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.to_list_aux@tok))
:qid function_token_typing_LeftistHeap.to_list_aux))

:named function_token_typing_LeftistHeap.to_list_aux))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Tm_refine_ec8cdca350d6b34e6f2fe09a85fe6c3f @x0
@x1)))
(HasType (LeftistHeap.to_list_aux @x0
@x1
@x2)
(Prims.list @x0)))
 

:pattern ((LeftistHeap.to_list_aux @x0
@x1
@x2))
:qid typing_LeftistHeap.to_list_aux))

:named typing_LeftistHeap.to_list_aux))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post (Prims.list a)).
;   (forall (x: Prims.list a). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: a) (b: LeftistHeap.heap a) (b: LeftistHeap.heap a) (b: Prims.nat).
;         t == LeftistHeap.Node b b b b ==>
;         (a << a \/ (_ << _ \/ b << t)) /\
;         (forall (any_result: LeftistHeap.heap a).
;             b == any_result ==>
;             (forall (any_result: Prims.list a).
;                 LeftistHeap.to_list_aux b == any_result ==> a << a \/ (_ << _ \/ b << t)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec to_list_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(171,2-173,62)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(171,2-173,62)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(171,2-173,62)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(171,2-173,62)
(and (implies 
;; def=LeftistHeap.fst(170,54-170,55); use=LeftistHeap.fst(171,8-171,9)
(and 
;; def=LeftistHeap.fst(170,54-170,55); use=LeftistHeap.fst(171,8-171,9)
(not 
;; def=LeftistHeap.fst(170,54-170,55); use=LeftistHeap.fst(171,8-171,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=LeftistHeap.fst(170,54-170,55); use=LeftistHeap.fst(171,8-171,9)
(not 
;; def=LeftistHeap.fst(170,54-170,55); use=LeftistHeap.fst(171,8-171,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(171,2-173,62)
(not 
;; def=LeftistHeap.fst(170,54-170,55); use=LeftistHeap.fst(171,8-171,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(171,2-173,62)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(171,2-173,62)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(171,2-173,62)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(171,2-173,62)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=LeftistHeap.fst(170,54-173,16); use=LeftistHeap.fst(171,8-173,16)
(= x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
@x2
@x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(171,2-173,62)
(and 
;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(173,44-173,45)
(or label_2

;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,44-173,45)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,44-173,45)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,44-173,45)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,44-173,45)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,44-173,45)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,44-173,45)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x2
x_2611d061955cd24360b6c9637f442521_2)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(171,2-173,62)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(170,54-173,12); use=LeftistHeap.fst(171,2-173,62)
(= @x2
@x5)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(171,2-173,62)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fsti(28,37-28,38); use=LeftistHeap.fst(171,2-173,62)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2)
@x6)
)

;; def=LeftistHeap.fst(170,22-173,62); use=LeftistHeap.fst(173,60-173,61)
(or label_3

;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,60-173,61)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,60-173,61)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,60-173,61)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,60-173,61)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,60-173,61)
(Valid 
;; def=LeftistHeap.fst(171,2-173,62); use=LeftistHeap.fst(173,60-173,61)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.to_list_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_f0062e810d23900aea914a963397c69a_1, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_right, subterm_ordering_LeftistHeap.Node

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec to_list_aux


; <Start encoding let rec to_list_aux>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.to_list_aux.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.to_list_aux.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.to_list_aux (Term Term Term) Term)
(declare-fun LeftistHeap.to_list_aux@tok () Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: heap a -> Prims.GTot (Prims.list a)
(declare-fun Tm_ghost_arrow_31fe68946c073d564e545cc8e412abd1 () Term)

; </end encoding let rec to_list_aux>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.to_list_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.to_list_aux @x0
@x1
@x2)
(Prims.list @x0)))
 

:pattern ((LeftistHeap.to_list_aux @x0
@x1
@x2))
:qid typing_LeftistHeap.to_list_aux))

:named typing_LeftistHeap.to_list_aux))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.lower_bounded_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
@x0))
(HasType (LeftistHeap.lower_bounded_heap @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((LeftistHeap.lower_bounded_heap @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.lower_bounded_heap))

:named typing_LeftistHeap.lower_bounded_heap))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.to_list_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1)))
(HasType (LeftistHeap.to_list_aux.fuel_instrumented @u0
@x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((LeftistHeap.to_list_aux.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_LeftistHeap.to_list_aux.fuel_instrumented))

:named token_correspondence_LeftistHeap.to_list_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.lower_bounded_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
@x1))
(HasType (LeftistHeap.lower_bounded_heap.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
Prims.bool))
 

:pattern ((LeftistHeap.lower_bounded_heap.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented))

:named token_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.to_list_aux
;;; Fact-ids: Name LeftistHeap.to_list_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1)))
(= (LeftistHeap.to_list_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x3))
(ite (is-LeftistHeap.Leaf @lb4)
(Prims.Nil @x1)
(ite (is-LeftistHeap.Node @lb4)
(Prims.Cons @x1
(LeftistHeap.Node_key @lb4)
(LeftistHeap.merge @x1
@x2
(LeftistHeap.to_list_aux.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_left @lb4))
(LeftistHeap.to_list_aux.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_right @lb4))))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.to_list_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.lower_bounded_heap
;;; Fact-ids: Name LeftistHeap.lower_bounded_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
@x1))
(= (LeftistHeap.lower_bounded_heap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 @x3))
(ite (is-LeftistHeap.Leaf @lb5)
(BoxBool true)
(ite (is-LeftistHeap.Node @lb5)
(Prims.op_AmpAmp (Prims.op_AmpAmp (LeftistHeap.lower_bounded_heap.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_left @lb5)
(LeftistHeap.Node_key @lb5))
(LeftistHeap.lower_bounded_heap.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_right @lb5)
(LeftistHeap.Node_key @lb5)))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x1)
@x2)
@x4)
(LeftistHeap.Node_key @lb5)))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.lower_bounded_heap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_LeftistHeap.lower_bounded_heap.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.lower_bounded_heap.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.to_list_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.to_list_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(LeftistHeap.to_list_aux.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.to_list_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_LeftistHeap.to_list_aux.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.to_list_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.lower_bounded_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.lower_bounded_heap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(LeftistHeap.lower_bounded_heap.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.lower_bounded_heap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_LeftistHeap.lower_bounded_heap.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.lower_bounded_heap.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.to_list_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(170,8-170,19); use=LeftistHeap.fst(170,8-170,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((LeftistHeap.to_list_aux @x0
@x1
@x2))
:qid @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.lower_bounded_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(151,8-151,26); use=LeftistHeap.fst(151,8-151,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.lower_bounded_heap @x0
@x1
@x2
@x3)
(LeftistHeap.lower_bounded_heap.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.lower_bounded_heap @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(178,2-186,3)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___13 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;m : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_3 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_3
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_3
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.to_list_aux_lower_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.to_list_aux_lower_bounded@tok () Term)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.lower_bounded_heap t m /\
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.lower_bounded (LeftistHeap.to_list_aux t) m ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;       (t == LeftistHeap.Leaf ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Leaf? t) ==>
;         (forall (b: a) (b: LeftistHeap.heap a) (b: LeftistHeap.heap a) (b: Prims.nat).
;             t == LeftistHeap.Node b b b b ==>
;             (a << a \/ (_ << _ \/ (b << t \/ b === t /\ b << m))) /\
;             (forall (any_result: a).
;                 b == any_result ==>
;                 LeftistHeap.lower_bounded_heap b b /\
;                 (forall (pure_result: Prims.unit).
;                     LeftistHeap.lower_bounded (LeftistHeap.to_list_aux b) b ==>
;                     (forall (any_result: Prims.list a).
;                         LeftistHeap.to_list_aux b == any_result ==>
;                         LeftistHeap.lower_bounded (LeftistHeap.to_list_aux b) b /\
;                         LeftistHeap.leq m b /\
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.lower_bounded (LeftistHeap.to_list_aux b) m ==>
;                             (a << a \/ (_ << _ \/ (b << t \/ b === t /\ b << m))) /\
;                             (forall (any_result: a).
;                                 b == any_result ==>
;                                 LeftistHeap.lower_bounded_heap b b /\
;                                 (forall (pure_result: Prims.unit).
;                                     LeftistHeap.lower_bounded (LeftistHeap.to_list_aux b) b ==>
;                                     (forall (any_result: Prims.list a).
;                                         LeftistHeap.to_list_aux b == any_result ==>
;                                         LeftistHeap.lower_bounded (LeftistHeap.to_list_aux b) b /\
;                                         LeftistHeap.leq m b /\
;                                         (forall (pure_result: Prims.unit).
;                                             LeftistHeap.lower_bounded (LeftistHeap.to_list_aux b) m ==>
;                                             (forall (any_result: Prims.list a).
;                                                 LeftistHeap.to_list_aux b == any_result ==>
;                                                 (forall (any_result: Prims.list a).
;                                                     LeftistHeap.to_list_aux b == any_result ==>
;                                                     LeftistHeap.lower_bounded (LeftistHeap.to_list_aux
;                                                           b)
;                                                       m /\
;                                                     LeftistHeap.lower_bounded (LeftistHeap.to_list_aux
;                                                           b)
;                                                       m /\
;                                                     (forall (pure_result: Prims.unit).
;                                                         LeftistHeap.lower_bounded (LeftistHeap.merge
;                                                               (LeftistHeap.to_list_aux b)
;                                                               (LeftistHeap.to_list_aux b))
;                                                           m ==>
;                                                         k pure_result))))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec to_list_aux_lower_bounded`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(177,18-177,40); use=LeftistHeap.fst(178,2-186,3)
(BoxBool_proj_0 (LeftistHeap.lower_bounded_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_157b99e815dc43d99415725267e9c452_3))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(177,51-177,82); use=LeftistHeap.fst(178,2-186,3)
(or label_2

;; def=LeftistHeap.fst(177,51-177,82); use=LeftistHeap.fst(178,2-186,3)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2)
x_157b99e815dc43d99415725267e9c452_3))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(178,2-186,3)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(178,2-186,3)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(178,2-186,3)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(178,2-186,3)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(178,2-186,3)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(178,2-186,3)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(178,2-186,3)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(178,2-186,3)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(178,2-186,3)
(and (implies 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(178,8-178,9)
(and 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(178,8-178,9)
(not 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(178,8-178,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(178,8-178,9)
(not 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(178,8-178,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)
)

label_3)
(implies 
;; def=LeftistHeap.fst(176,68-179,8); use=LeftistHeap.fst(178,8-179,8)
(= x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.Leaf x_9cd1733a5204f989dbb2f01d5984df93_0))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(178,2-186,3)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(178,2-186,3)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(178,2-186,3)
(not 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(178,8-178,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=LeftistHeap.fst(176,68-180,16); use=LeftistHeap.fst(178,8-180,16)
(= x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(178,2-186,3)
(and 
;; def=LeftistHeap.fst(176,36-186,3); use=LeftistHeap.fst(181,32-181,33)
(or label_4

;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(181,32-181,33)
(Valid 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(181,32-181,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(181,32-181,33)
(Valid 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(181,32-181,33)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(181,32-181,33)
(Valid 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(181,32-181,33)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(176,68-186,3); use=LeftistHeap.fst(181,32-181,33)
(and 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(181,32-181,33)
(Valid 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(181,32-181,33)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(181,32-181,33)
(Valid 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(181,32-181,33)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_3)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(176,79-180,10); use=LeftistHeap.fst(178,2-186,3)
(= @x2
@x6)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(181,4-181,29)
(and 
;; def=LeftistHeap.fst(177,18-177,40); use=LeftistHeap.fst(181,4-181,29)
(or label_5

;; def=LeftistHeap.fst(177,18-177,40); use=LeftistHeap.fst(181,4-181,29)
(BoxBool_proj_0 (LeftistHeap.lower_bounded_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
@x2))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(181,4-181,29)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=LeftistHeap.fst(177,51-177,82); use=LeftistHeap.fst(181,4-181,29)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
@x2))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(68,52-182,39); use=LeftistHeap.fst(178,2-186,3)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
@x8)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(182,4-182,23)
(and 
;; def=LeftistHeap.fst(69,18-69,36); use=LeftistHeap.fst(182,4-182,23)
(or label_6

;; def=LeftistHeap.fst(69,18-69,36); use=LeftistHeap.fst(182,4-182,23)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
@x2))
)


;; def=LeftistHeap.fst(69,40-69,49); use=LeftistHeap.fst(182,4-182,23)
(or label_7

;; def=LeftistHeap.fst(69,40-69,49); use=LeftistHeap.fst(182,4-182,23)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_3)
@x2))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(182,4-182,23)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=LeftistHeap.fst(69,60-69,78); use=LeftistHeap.fst(182,4-182,23)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
x_157b99e815dc43d99415725267e9c452_3))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(178,2-186,3)
(and 
;; def=LeftistHeap.fst(176,36-186,3); use=LeftistHeap.fst(183,32-183,33)
(or label_8

;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(183,32-183,33)
(Valid 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(183,32-183,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(183,32-183,33)
(Valid 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(183,32-183,33)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(183,32-183,33)
(Valid 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(183,32-183,33)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(176,68-186,3); use=LeftistHeap.fst(183,32-183,33)
(and 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(183,32-183,33)
(Valid 
;; def=LeftistHeap.fst(176,68-176,69); use=LeftistHeap.fst(183,32-183,33)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(183,32-183,33)
(Valid 
;; def=LeftistHeap.fst(178,2-186,3); use=LeftistHeap.fst(183,32-183,33)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
x_157b99e815dc43d99415725267e9c452_3)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(176,79-180,10); use=LeftistHeap.fst(178,2-186,3)
(= @x2
@x10)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(183,4-183,29)
(and 
;; def=LeftistHeap.fst(177,18-177,40); use=LeftistHeap.fst(183,4-183,29)
(or label_9

;; def=LeftistHeap.fst(177,18-177,40); use=LeftistHeap.fst(183,4-183,29)
(BoxBool_proj_0 (LeftistHeap.lower_bounded_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
@x2))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(183,4-183,29)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=LeftistHeap.fst(177,51-177,82); use=LeftistHeap.fst(183,4-183,29)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
@x2))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(68,52-184,39); use=LeftistHeap.fst(178,2-186,3)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
@x12)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(184,4-184,23)
(and 
;; def=LeftistHeap.fst(69,18-69,36); use=LeftistHeap.fst(184,4-184,23)
(or label_10

;; def=LeftistHeap.fst(69,18-69,36); use=LeftistHeap.fst(184,4-184,23)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
@x2))
)


;; def=LeftistHeap.fst(69,40-69,49); use=LeftistHeap.fst(184,4-184,23)
(or label_11

;; def=LeftistHeap.fst(69,40-69,49); use=LeftistHeap.fst(184,4-184,23)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
x_157b99e815dc43d99415725267e9c452_3)
@x2))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(184,4-184,23)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=LeftistHeap.fst(69,60-69,78); use=LeftistHeap.fst(184,4-184,23)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
x_157b99e815dc43d99415725267e9c452_3))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(129,62-185,39); use=LeftistHeap.fst(178,2-186,3)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
@x14)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(178,2-186,3)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(129,64-185,55); use=LeftistHeap.fst(178,2-186,3)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
@x15)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(185,4-185,23)
(and 
;; def=LeftistHeap.fst(130,18-130,35); use=LeftistHeap.fst(185,4-185,23)
(or label_12

;; def=LeftistHeap.fst(130,18-130,35); use=LeftistHeap.fst(185,4-185,23)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
x_157b99e815dc43d99415725267e9c452_3))
)


;; def=LeftistHeap.fst(130,39-130,56); use=LeftistHeap.fst(185,4-185,23)
(or label_13

;; def=LeftistHeap.fst(130,39-130,56); use=LeftistHeap.fst(185,4-185,23)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
x_157b99e815dc43d99415725267e9c452_3))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(185,4-185,23)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=LeftistHeap.fst(130,67-130,94); use=LeftistHeap.fst(185,4-185,23)
(BoxBool_proj_0 (LeftistHeap.lower_bounded x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4))
x_157b99e815dc43d99415725267e9c452_3))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(185,4-185,23)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(185,4-185,23)
(ApplyTT @x1
@x16)
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.to_list_aux_lower_bounded, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.lower_bounded.fuel_instrumented, @fuel_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_irrelevance_LeftistHeap.to_list_aux.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, binder_x_157b99e815dc43d99415725267e9c452_3, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, bool_typing, constructor_distinct_LeftistHeap.Leaf, constructor_distinct_LeftistHeap.Node, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_LeftistHeap.Mkordered, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, equation_LeftistHeap.leq, equation_with_fuel_LeftistHeap.lower_bounded.fuel_instrumented, equation_with_fuel_LeftistHeap.lower_bounded_heap.fuel_instrumented, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_AmpAmp, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Leaf_a, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_LeftistHeap.Node, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented, typing_LeftistHeap.lower_bounded, typing_LeftistHeap.lower_bounded_heap, typing_LeftistHeap.merge, typing_LeftistHeap.to_list_aux

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec to_list_aux_lower_bounded


; <Start encoding let rec to_list_aux_lower_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.to_list_aux_lower_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.to_list_aux_lower_bounded@tok () Term)

; </end encoding let rec to_list_aux_lower_bounded>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.heap_property; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(156,4-156,17); use=LeftistHeap.fst(156,4-156,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.heap_property @x0
@x1
@x2)
Prims.prop))
 

:pattern ((LeftistHeap.heap_property @x0
@x1
@x2))
:qid typing_LeftistHeap.heap_property))

:named typing_LeftistHeap.heap_property))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.heap_property
;;; Fact-ids: Name LeftistHeap.heap_property; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(156,4-156,17); use=LeftistHeap.fst(156,4-156,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.heap_property @x0
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-LeftistHeap.Leaf @lb3)
Prims.l_True
(ite (is-LeftistHeap.Node @lb3)
(Prims.l_and (Prims.b2t (LeftistHeap.lower_bounded_heap @x0
@x1
(LeftistHeap.Node_left @lb3)
(LeftistHeap.Node_key @lb3)))
(Prims.b2t (LeftistHeap.lower_bounded_heap @x0
@x1
(LeftistHeap.Node_right @lb3)
(LeftistHeap.Node_key @lb3))))
Tm_unit))))
 

:pattern ((LeftistHeap.heap_property @x0
@x1
@x2))
:qid equation_LeftistHeap.heap_property))

:named equation_LeftistHeap.heap_property))
(push) ;; push{2

; Starting query at LeftistHeap.fst(191,2-198,11)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___14 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.heap_property_then_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.heap_property_then_sorted@tok () Term)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.heap_property t /\
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.sorted (LeftistHeap.to_list_aux t) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (forall (b: a) (b: LeftistHeap.heap a) (b: LeftistHeap.heap a) (b: Prims.nat).
;           t == LeftistHeap.Node b b b b ==>
;           (a << a \/ (_ << _ \/ b << t)) /\
;           (forall (any_result: LeftistHeap.heap a).
;               b == any_result ==>
;               LeftistHeap.heap_property b /\
;               (forall (pure_result: Prims.unit).
;                   LeftistHeap.sorted (LeftistHeap.to_list_aux b) ==>
;                   (a << a \/ (_ << _ \/ b << t)) /\
;                   (forall (any_result: LeftistHeap.heap a).
;                       b == any_result ==>
;                       LeftistHeap.heap_property b /\
;                       (forall (pure_result: Prims.unit).
;                           LeftistHeap.sorted (LeftistHeap.to_list_aux b) ==>
;                           (forall (any_result: Prims.list a).
;                               LeftistHeap.to_list_aux b == any_result ==>
;                               (forall (any_result: Prims.list a).
;                                   LeftistHeap.to_list_aux b == any_result ==>
;                                   LeftistHeap.sorted (LeftistHeap.to_list_aux b) /\
;                                   LeftistHeap.sorted (LeftistHeap.to_list_aux b) /\
;                                   (forall (pure_result: Prims.unit).
;                                       LeftistHeap.sorted (LeftistHeap.merge (LeftistHeap.to_list_aux
;                                                 b)
;                                             (LeftistHeap.to_list_aux b)) ==>
;                                       k pure_result)))))))) /\
;       (~(Node? t) ==>
;         (forall (b: LeftistHeap.heap a). t == b ==> (forall (any_result: Prims.unit). k any_result))
;       ))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec heap_property_then_sorted`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(191,2-198,11)
(Valid 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(191,2-198,11)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(190,44-190,66); use=LeftistHeap.fst(191,2-198,11)
(or label_2

;; def=LeftistHeap.fst(190,44-190,66); use=LeftistHeap.fst(191,2-198,11)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2)))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(191,2-198,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(191,2-198,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(191,2-198,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(191,2-198,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(191,2-198,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(191,2-198,11)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(191,2-198,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(191,2-198,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(191,2-198,11)
(and 
;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=LeftistHeap.fst(189,68-192,16); use=LeftistHeap.fst(191,8-192,16)
(= x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(191,2-198,11)
(and 
;; def=LeftistHeap.fst(189,36-198,11); use=LeftistHeap.fst(194,32-194,33)
(or label_3

;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(194,32-194,33)
(Valid 
;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(194,32-194,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(194,32-194,33)
(Valid 
;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(194,32-194,33)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(194,32-194,33)
(Valid 
;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(194,32-194,33)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(189,68-192,12); use=LeftistHeap.fst(191,2-198,11)
(= @x3
@x6)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(194,6-194,31)
(and 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(194,6-194,31)
(or label_4

;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(194,6-194,31)
(Valid 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(194,6-194,31)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(194,6-194,31)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=LeftistHeap.fst(190,44-190,66); use=LeftistHeap.fst(194,6-194,31)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(191,2-198,11)
(and 
;; def=LeftistHeap.fst(189,36-198,11); use=LeftistHeap.fst(195,32-195,33)
(or label_5

;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(195,32-195,33)
(Valid 
;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(195,32-195,33)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(195,32-195,33)
(Valid 
;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(195,32-195,33)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(195,32-195,33)
(Valid 
;; def=LeftistHeap.fst(191,2-198,11); use=LeftistHeap.fst(195,32-195,33)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(189,68-192,14); use=LeftistHeap.fst(191,2-198,11)
(= @x4
@x8)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(195,6-195,31)
(and 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(195,6-195,31)
(or label_6

;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(195,6-195,31)
(Valid 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(195,6-195,31)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(195,6-195,31)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=LeftistHeap.fst(190,44-190,66); use=LeftistHeap.fst(195,6-195,31)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(121,45-196,34); use=LeftistHeap.fst(191,2-198,11)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(121,47-196,50); use=LeftistHeap.fst(191,2-198,11)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
@x11)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(196,6-196,18)
(and 
;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(196,6-196,18)
(or label_7

;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(196,6-196,18)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)))
)


;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(196,6-196,18)
(or label_8

;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(196,6-196,18)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(196,6-196,18)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=LeftistHeap.fst(122,55-122,76); use=LeftistHeap.fst(196,6-196,18)
(BoxBool_proj_0 (LeftistHeap.sorted x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4))))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(196,6-196,18)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(196,6-196,18)
(ApplyTT @x1
@x12)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(191,2-198,11)
(not 
;; def=LeftistHeap.fst(189,68-189,69); use=LeftistHeap.fst(191,8-191,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(189,68-198,5); use=LeftistHeap.fst(191,8-198,5)
(= x_2611d061955cd24360b6c9637f442521_2
@x2)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(191,2-198,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(191,2-198,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(191,2-198,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.heap_property_then_sorted, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge.fuel_instrumented, @fuel_correspondence_LeftistHeap.sorted.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_irrelevance_LeftistHeap.sorted.fuel_instrumented, @fuel_irrelevance_LeftistHeap.to_list_aux.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, b2t_def, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_LeftistHeap.Node, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_LeftistHeap.Mkordered, data_elim_LeftistHeap.Node, data_elim_Prims.Cons, disc_equation_LeftistHeap.Node, equation_LeftistHeap.heap_property, equation_LeftistHeap.leq, equation_with_fuel_LeftistHeap.lower_bounded_heap.fuel_instrumented, equation_with_fuel_LeftistHeap.merge.fuel_instrumented, equation_with_fuel_LeftistHeap.sorted.fuel_instrumented, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, l_and-interp, primitive_Prims.op_AmpAmp, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_LeftistHeap.Node, token_correspondence_LeftistHeap.leq, true_interp, typing_LeftistHeap.lower_bounded_heap, typing_LeftistHeap.merge, typing_LeftistHeap.sorted, typing_LeftistHeap.to_list_aux

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec heap_property_then_sorted


; <Start encoding let rec heap_property_then_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.heap_property_then_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.heap_property_then_sorted@tok () Term)

; </end encoding let rec heap_property_then_sorted>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.count_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
@x0))
(HasType (LeftistHeap.count_heap @x0
@x1
@x2
@x3)
Prims.nat))
 

:pattern ((LeftistHeap.count_heap @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.count_heap))

:named typing_LeftistHeap.count_heap))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.count_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
@x1))
(HasType (LeftistHeap.count_heap.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
Prims.nat))
 

:pattern ((LeftistHeap.count_heap.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_LeftistHeap.count_heap.fuel_instrumented))

:named token_correspondence_LeftistHeap.count_heap.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.count_heap
;;; Fact-ids: Name LeftistHeap.count_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
@x1))
(= (LeftistHeap.count_heap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 @x3))
(ite (is-LeftistHeap.Leaf @lb5)
(BoxInt 0)
(ite (is-LeftistHeap.Node @lb5)
(Prims.op_Addition (Prims.op_Addition (LeftistHeap.delta @x1
(LeftistHeap.Node_key @lb5)
@x4)
(LeftistHeap.count_heap.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_left @lb5)
@x4))
(LeftistHeap.count_heap.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_right @lb5)
@x4))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.count_heap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_LeftistHeap.count_heap.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.count_heap.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.count_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.count_heap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(LeftistHeap.count_heap.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.count_heap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_LeftistHeap.count_heap.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.count_heap.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.count_heap; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(161,8-161,18); use=LeftistHeap.fst(161,8-161,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.count_heap @x0
@x1
@x2
@x3)
(LeftistHeap.count_heap.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.count_heap @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_LeftistHeap.count_heap.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.count_heap.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(202,2-205,50)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___15 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;y : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_3 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_3
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_3
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.count_list_heap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.count_list_heap@tok () Term)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(201,2-201,58); use=LeftistHeap.fst(202,2-205,50)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

; Encoding query formula : (forall (_: Prims.squash Prims.l_True).
;     (*  - Could not prove post-condition
; *) Prims.hasEq Prims.nat) /\
; (forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         LeftistHeap.count_heap t y = LeftistHeap.count (LeftistHeap.to_list_aux t) y ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;         (t == LeftistHeap.Leaf ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Leaf? t) ==>
;           (forall (b: a) (b: LeftistHeap.heap a) (b: LeftistHeap.heap a) (b: Prims.nat).
;               t == LeftistHeap.Node b b b b ==>
;               (a << a \/ (_ << _ \/ (b << t \/ b === t /\ y << y))) /\
;               (forall (any_result: a).
;                   y == any_result ==>
;                   (forall (pure_result: Prims.unit).
;                       LeftistHeap.count_heap b y = LeftistHeap.count (LeftistHeap.to_list_aux b) y ==>
;                       (a << a \/ (_ << _ \/ (b << t \/ b === t /\ y << y))) /\
;                       (forall (any_result: a).
;                           y == any_result ==>
;                           (forall (pure_result: Prims.unit).
;                               LeftistHeap.count_heap b y =
;                               LeftistHeap.count (LeftistHeap.to_list_aux b) y ==>
;                               (forall (any_result: Prims.list a).
;                                   LeftistHeap.to_list_aux b == any_result ==>
;                                   (forall (any_result: Prims.list a).
;                                       LeftistHeap.to_list_aux b == any_result ==>
;                                       (forall (pure_result: Prims.unit).
;                                           LeftistHeap.count (LeftistHeap.merge (LeftistHeap.to_list_aux
;                                                     b)
;                                                 (LeftistHeap.to_list_aux b))
;                                             y =
;                                           LeftistHeap.count (LeftistHeap.to_list_aux b) y +
;                                           LeftistHeap.count (LeftistHeap.to_list_aux b) y ==>
;                                           k pure_result)))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec count_list_heap`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(201,17-201,27)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(202,2-205,50)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query))


;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x1 Term))
 (! (implies (and (or label_2
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(201,17-201,57); use=LeftistHeap.fst(202,2-205,50)
(or label_3

;; def=LeftistHeap.fst(201,17-201,57); use=LeftistHeap.fst(202,2-205,50)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_157b99e815dc43d99415725267e9c452_3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2)
x_157b99e815dc43d99415725267e9c452_3))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(202,2-205,50)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(202,2-205,50)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(202,2-205,50)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(202,2-205,50)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(202,2-205,50)
(and (implies 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(202,8-202,9)
(and 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(202,8-202,9)
(not 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(202,8-202,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(202,8-202,9)
(not 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(202,8-202,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)
)

label_4)
(implies 
;; def=LeftistHeap.fst(200,58-203,8); use=LeftistHeap.fst(202,8-203,8)
(= x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.Leaf x_9cd1733a5204f989dbb2f01d5984df93_0))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(202,2-205,50)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(202,2-205,50)
(not 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(202,8-202,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=LeftistHeap.fst(200,58-204,16); use=LeftistHeap.fst(202,8-204,16)
(= x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(202,2-205,50)
(and 
;; def=LeftistHeap.fst(200,26-205,50); use=LeftistHeap.fst(204,39-204,40)
(or label_5

;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,39-204,40)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,39-204,40)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,39-204,40)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,39-204,40)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,39-204,40)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,39-204,40)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(200,58-205,50); use=LeftistHeap.fst(204,39-204,40)
(and 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(204,39-204,40)
(Valid 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(204,39-204,40)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x3
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,39-204,40)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,39-204,40)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_3
x_157b99e815dc43d99415725267e9c452_3)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(200,69-200,70); use=LeftistHeap.fst(202,2-205,50)
(= x_157b99e815dc43d99415725267e9c452_3
@x6)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(204,21-204,36)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=LeftistHeap.fst(201,17-201,57); use=LeftistHeap.fst(204,21-204,36)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_157b99e815dc43d99415725267e9c452_3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
x_157b99e815dc43d99415725267e9c452_3))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(202,2-205,50)
(and 
;; def=LeftistHeap.fst(200,26-205,50); use=LeftistHeap.fst(204,60-204,61)
(or label_6

;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,60-204,61)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,60-204,61)
(Prims.precedes Prims.eqtype
Prims.eqtype
x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0)
)


;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,60-204,61)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,60-204,61)
(Prims.precedes (LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1
x_f0062e810d23900aea914a963397c69a_1)
)


;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,60-204,61)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,60-204,61)
(Prims.precedes (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(200,58-205,50); use=LeftistHeap.fst(204,60-204,61)
(and 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(204,60-204,61)
(Valid 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(204,60-204,61)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
@x4
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,60-204,61)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(204,60-204,61)
(Prims.precedes x_9cd1733a5204f989dbb2f01d5984df93_0
x_9cd1733a5204f989dbb2f01d5984df93_0
x_157b99e815dc43d99415725267e9c452_3
x_157b99e815dc43d99415725267e9c452_3)
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(200,69-200,70); use=LeftistHeap.fst(202,2-205,50)
(= x_157b99e815dc43d99415725267e9c452_3
@x8)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(204,42-204,57)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=LeftistHeap.fst(201,17-201,57); use=LeftistHeap.fst(204,42-204,57)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_157b99e815dc43d99415725267e9c452_3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
x_157b99e815dc43d99415725267e9c452_3))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(115,53-205,31); use=LeftistHeap.fst(202,2-205,50)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(202,2-205,50)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.list x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(115,55-205,47); use=LeftistHeap.fst(202,2-205,50)
(= (LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
@x11)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(205,4-205,15)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=LeftistHeap.fst(116,17-116,60); use=LeftistHeap.fst(205,4-205,15)
(= (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4))
x_157b99e815dc43d99415725267e9c452_3)
(Prims.op_Addition (LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3)
x_157b99e815dc43d99415725267e9c452_3)
(LeftistHeap.count x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.to_list_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
x_157b99e815dc43d99415725267e9c452_3)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(205,4-205,15)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(205,4-205,15)
(ApplyTT @x1
@x12)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.count_list_heap, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count.fuel_instrumented, @fuel_correspondence_LeftistHeap.count_heap.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.count.fuel_instrumented, @fuel_irrelevance_LeftistHeap.count_heap.fuel_instrumented, @fuel_irrelevance_LeftistHeap.to_list_aux.fuel_instrumented, @query, binder_x_157b99e815dc43d99415725267e9c452_3, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, constructor_distinct_LeftistHeap.Leaf, constructor_distinct_LeftistHeap.Node, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, equation_LeftistHeap.delta, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_LeftistHeap.count.fuel_instrumented, equation_with_fuel_LeftistHeap.count_heap.fuel_instrumented, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_LeftistHeap.Leaf_a, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_LeftistHeap.Node, typing_LeftistHeap.count, typing_LeftistHeap.count_heap, typing_LeftistHeap.to_list_aux, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at LeftistHeap.fst(200,0-205,50)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_46e3213ad20cf639e6229e394676bea5 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(200,26-205,50); use=LeftistHeap.fst(200,26-205,50)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_46e3213ad20cf639e6229e394676bea5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_46e3213ad20cf639e6229e394676bea5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_46e3213ad20cf639e6229e394676bea5))

:named refinement_kinding_Tm_refine_46e3213ad20cf639e6229e394676bea5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(200,26-205,50); use=LeftistHeap.fst(200,26-205,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_46e3213ad20cf639e6229e394676bea5 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=LeftistHeap.fst(200,26-205,50); use=LeftistHeap.fst(200,26-205,50)

;; def=LeftistHeap.fst(200,26-205,50); use=LeftistHeap.fst(200,26-205,50)
(or 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(Prims.precedes Prims.eqtype
Prims.eqtype
@x2
@x3)
)


;; def=LeftistHeap.fst(200,26-205,50); use=LeftistHeap.fst(200,26-205,50)
(and 
;; def=LeftistHeap.fst(200,26-200,27); use=LeftistHeap.fst(200,26-200,27)
(Valid 
;; def=LeftistHeap.fst(200,26-200,27); use=LeftistHeap.fst(200,26-200,27)
(Prims.op_Equals_Equals_Equals Prims.eqtype
Prims.eqtype
@x2
@x3)
)


;; def=LeftistHeap.fst(200,40-205,50); use=LeftistHeap.fst(200,40-205,50)
(or 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(Prims.precedes (LeftistHeap.ordered @x2)
(LeftistHeap.ordered @x3)
@x4
@x5)
)


;; def=LeftistHeap.fst(200,40-205,50); use=LeftistHeap.fst(200,40-205,50)
(and 
;; def=LeftistHeap.fst(200,40-200,41); use=LeftistHeap.fst(200,40-200,41)
(Valid 
;; def=LeftistHeap.fst(200,40-200,41); use=LeftistHeap.fst(200,40-200,41)
(Prims.op_Equals_Equals_Equals (LeftistHeap.ordered @x2)
(LeftistHeap.ordered @x3)
@x4
@x5)
)


;; def=LeftistHeap.fst(200,58-205,50); use=LeftistHeap.fst(200,58-205,50)
(or 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(Prims.precedes (LeftistHeap.heap @x2)
(LeftistHeap.heap @x3)
@x6
@x7)
)


;; def=LeftistHeap.fst(200,58-205,50); use=LeftistHeap.fst(200,58-205,50)
(and 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(200,58-200,59)
(Valid 
;; def=LeftistHeap.fst(200,58-200,59); use=LeftistHeap.fst(200,58-200,59)
(Prims.op_Equals_Equals_Equals (LeftistHeap.heap @x2)
(LeftistHeap.heap @x3)
@x6
@x7)
)


;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(Valid 
;; def=LeftistHeap.fst(202,2-205,50); use=LeftistHeap.fst(202,2-205,50)
(Prims.precedes @x2
@x3
@x1
@x8)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_46e3213ad20cf639e6229e394676bea5 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_46e3213ad20cf639e6229e394676bea5))

:named refinement_interpretation_Tm_refine_46e3213ad20cf639e6229e394676bea5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_46e3213ad20cf639e6229e394676bea5
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(200,26-205,50); use=LeftistHeap.fst(200,26-205,50)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_46e3213ad20cf639e6229e394676bea5 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_46e3213ad20cf639e6229e394676bea5 @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_46e3213ad20cf639e6229e394676bea5))

:named haseqTm_refine_46e3213ad20cf639e6229e394676bea5))
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(201,2-201,58); use=LeftistHeap.fst(201,2-201,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

; Encoding query formula : forall (a: Prims.eqtype)
;   (_: LeftistHeap.ordered a)
;   (t: LeftistHeap.heap a)
;   (y: a)
;   (a: Prims.eqtype)
;   (_: LeftistHeap.ordered a)
;   (t: LeftistHeap.heap a)
;   (y: a{a << a \/ a === a /\ (_ << _ \/ _ === _ /\ (t << t \/ t === t /\ y << y))})
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let rec count_list_heap`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(200,0-205,50)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
@x0)
(HasType @x4
Prims.eqtype)
(HasType @x5
(LeftistHeap.ordered @x4))
(HasType @x6
(LeftistHeap.heap @x4))
(HasType @x7
(Tm_refine_46e3213ad20cf639e6229e394676bea5 @x4
@x0
@x5
@x1
@x6
@x2
@x3))
(HasType @x8
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(201,34-201,39)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(201,34-201,39)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(201,34-201,39)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.count_list_heap, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec count_list_heap


; <Start encoding let rec count_list_heap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.count_list_heap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.count_list_heap@tok () Term)

; </end encoding let rec count_list_heap>


; encoding sigelt let measure


; <Start encoding let measure>

(declare-fun LeftistHeap.measure (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t1: heap a -> t2: heap a -> Prims.int
(declare-fun Tm_arrow_e079a76cf80196fe6d28c87d10fbc235 () Term)
(declare-fun LeftistHeap.measure@tok () Term)

; </end encoding let measure>

(push) ;; push{2

; Starting query at LeftistHeap.fst(219,2-221,21)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (_: Type) (t: LeftistHeap.heap _).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post Prims.int).
;     (forall (x: Prims.int). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;     ~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let rank`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(LeftistHeap.heap @x0)))
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.int))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(219,2-221,21)
(forall ((@x3 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(219,2-221,21)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(219,2-221,21)
(ApplyTT @x2
@x3)
)

 

:pattern ((ApplyTT @x2
@x3))
:qid @query.2))


;; def=LeftistHeap.fst(218,9-218,10); use=LeftistHeap.fst(219,8-219,9)
(not 
;; def=LeftistHeap.fst(218,9-218,10); use=LeftistHeap.fst(219,8-219,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf @x0
@x1))
)


;; def=LeftistHeap.fst(218,9-218,10); use=LeftistHeap.fst(219,8-219,9)
(not 
;; def=LeftistHeap.fst(218,9-218,10); use=LeftistHeap.fst(219,8-219,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.rank, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, fuel_guarded_inversion_LeftistHeap.heap, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rank


; <Start encoding let rank>

(declare-fun LeftistHeap.rank (Term Term) Term)
;;;;;;;;;;;;;;;;t: heap _ -> Prims.int
(declare-fun Tm_arrow_9843034556c469aa9550d04f063ac52e () Term)
(declare-fun LeftistHeap.rank@tok () Term)

; </end encoding let rank>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.size; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.size @x0
@x1)
Prims.nat))
 

:pattern ((LeftistHeap.size @x0
@x1))
:qid typing_LeftistHeap.size))

:named typing_LeftistHeap.size))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.rank; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(218,4-218,8); use=LeftistHeap.fst(218,4-218,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.rank @x0
@x1)
Prims.int))
 

:pattern ((LeftistHeap.rank @x0
@x1))
:qid typing_LeftistHeap.rank))

:named typing_LeftistHeap.rank))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.measure; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(212,4-212,11); use=LeftistHeap.fst(212,4-212,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.measure @x0
@x1
@x2
@x3)
Prims.int))
 

:pattern ((LeftistHeap.measure @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.measure))

:named typing_LeftistHeap.measure))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.gt; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(20,4-20,6); use=LeftistHeap.fst(20,4-20,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0)
(HasType @x3
@x0))
(HasType (LeftistHeap.gt @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((LeftistHeap.gt @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.gt))

:named typing_LeftistHeap.gt))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.size; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(LeftistHeap.heap @x1)))
(HasType (LeftistHeap.size.fuel_instrumented @u0
@x1
@x2)
Prims.nat))
 

:pattern ((LeftistHeap.size.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_LeftistHeap.size.fuel_instrumented))

:named token_correspondence_LeftistHeap.size.fuel_instrumented))
;;; Fact-ids: Name Prims.op_disEquality; Namespace Prims
(assert (! 
;; def=Prims.fst(594,4-594,18); use=Prims.fst(594,4-594,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_disEquality @x0
@x1
@x2)
(BoxBool (not (= @x1
@x2))))
 

:pattern ((Prims.op_disEquality @x0
@x1
@x2))
:qid primitive_Prims.op_disEquality))

:named primitive_Prims.op_disEquality))
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(576,4-576,25); use=Prims.fst(576,4-576,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThanOrEqual @x0
@x1)
(BoxBool (>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThanOrEqual @x0
@x1))
:qid primitive_Prims.op_GreaterThanOrEqual))

:named primitive_Prims.op_GreaterThanOrEqual))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.size
;;; Fact-ids: Name LeftistHeap.size; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(LeftistHeap.heap @x1)))
(= (LeftistHeap.size.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-LeftistHeap.Leaf @lb3)
(BoxInt 0)
(ite (is-LeftistHeap.Node @lb3)
(Prims.op_Addition (Prims.op_Addition (BoxInt 1)
(LeftistHeap.size.fuel_instrumented @u0
@x1
(LeftistHeap.Node_left @lb3)))
(LeftistHeap.size.fuel_instrumented @u0
@x1
(LeftistHeap.Node_right @lb3)))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.size.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_LeftistHeap.size.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.size.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.rank
;;; Fact-ids: Name LeftistHeap.rank; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(218,4-218,8); use=LeftistHeap.fst(218,4-218,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.rank @x0
@x1)
(let ((@lb2 @x1))
(ite (is-LeftistHeap.Leaf @lb2)
(BoxInt 0)
(ite (is-LeftistHeap.Node @lb2)
(LeftistHeap.Node_rank @lb2)
Tm_unit))))
 

:pattern ((LeftistHeap.rank @x0
@x1))
:qid equation_LeftistHeap.rank))

:named equation_LeftistHeap.rank))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.measure
;;; Fact-ids: Name LeftistHeap.measure; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(212,4-212,11); use=LeftistHeap.fst(212,4-212,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.measure @x0
@x1
@x2
@x3)
(let ((@lb4 (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap @x0)
(LeftistHeap.heap @x0)
@x2
@x3)))
(ite (and (is-LeftistHeap.Node (FStar.Pervasives.Native.Mktuple2__1 @lb4))
(is-LeftistHeap.Leaf (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(BoxInt 1)
(ite (and (is-LeftistHeap.Node (FStar.Pervasives.Native.Mktuple2__1 @lb4))
(is-LeftistHeap.Node (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(let ((@lb5 (LeftistHeap.gt @x0
@x1
(LeftistHeap.Node_key (FStar.Pervasives.Native.Mktuple2__1 @lb4))
(LeftistHeap.Node_key (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))
(ite (= @lb5
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))
(BoxInt 0)))))
 

:pattern ((LeftistHeap.measure @x0
@x1
@x2
@x3))
:qid equation_LeftistHeap.measure))

:named equation_LeftistHeap.measure))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.gt
;;; Fact-ids: Name LeftistHeap.gt; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(20,4-20,6); use=LeftistHeap.fst(20,4-20,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.gt @x0
@x1
@x2
@x3)
(Prims.op_AmpAmp (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
@x0)
@x1)
@x3)
@x2)
(Prims.op_disEquality @x0
@x2
@x3)))
 

:pattern ((LeftistHeap.gt @x0
@x1
@x2
@x3))
:qid equation_LeftistHeap.gt))

:named equation_LeftistHeap.gt))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.size; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.size.fuel_instrumented (SFuel @u0)
@x1
@x2)
(LeftistHeap.size.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((LeftistHeap.size.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_LeftistHeap.size.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.size.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.size; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(145,8-145,12); use=LeftistHeap.fst(145,8-145,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.size @x0
@x1)
(LeftistHeap.size.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((LeftistHeap.size @x0
@x1))
:qid @fuel_correspondence_LeftistHeap.size.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.size.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(227,2-239,38)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___17 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t1 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;t2 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_3 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_3
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_3))
(declare-fun Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(223,62-239,38); use=LeftistHeap.fst(223,62-239,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d))

:named refinement_kinding_Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(223,62-239,38); use=LeftistHeap.fst(223,62-239,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.heap @x2))

;; def=LeftistHeap.fst(225,15-239,38); use=LeftistHeap.fst(225,15-239,38)

;; def=LeftistHeap.fst(225,15-239,38); use=LeftistHeap.fst(225,15-239,38)
(or 
;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(227,2-239,38)
(Valid 
;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(227,2-239,38)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size @x2
@x3)
(LeftistHeap.size @x2
@x1))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(225,15-239,38); use=LeftistHeap.fst(225,15-239,38)
(and 
;; def=LeftistHeap.fst(225,15-225,32); use=LeftistHeap.fst(225,15-225,32)
(Valid 
;; def=LeftistHeap.fst(225,15-225,32); use=LeftistHeap.fst(225,15-225,32)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size @x2
@x3)
(LeftistHeap.size @x2
@x1))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(227,2-239,38)
(Valid 
;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(227,2-239,38)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure @x2
@x4
@x3
@x1)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d))

:named refinement_interpretation_Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(223,62-239,38); use=LeftistHeap.fst(223,62-239,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d @x0
@x1
@x2)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d @x0
@x1
@x2))))
:qid haseqTm_refine_1eedbaf503a5ff2d95342a23fd5b243d))

:named haseqTm_refine_1eedbaf503a5ff2d95342a23fd5b243d))
(declare-fun LeftistHeap.merge_heaps_aux (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;{| _: ordered a |} ->     t1: heap a ->     t2:       heap a         { size t1 + size t2 << size t1 + size t2 \/           size t1 + size t2 === size t1 + size t2 /\ measure t1 t2 << measure t1 t2 }   -> Prims.Tot (heap a)
(declare-fun Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7
Tm_type)
:named kinding_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(223,29-239,38); use=LeftistHeap.fst(223,29-239,38)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7))
:qid LeftistHeap_pre_typing_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7))

:named LeftistHeap_pre_typing_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(223,29-239,38); use=LeftistHeap.fst(223,29-239,38)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7)
(and 
;; def=LeftistHeap.fst(223,29-239,38); use=LeftistHeap.fst(223,29-239,38)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
(Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d @x1
@x3
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(LeftistHeap.heap @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid LeftistHeap_interpretation_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7.1))

(IsTotFun @x0)

;; def=LeftistHeap.fst(223,29-239,38); use=LeftistHeap.fst(223,29-239,38)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7.2))


;; def=LeftistHeap.fst(223,29-239,38); use=LeftistHeap.fst(223,29-239,38)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7.3))


;; def=LeftistHeap.fst(223,29-239,38); use=LeftistHeap.fst(223,29-239,38)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid LeftistHeap_interpretation_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7))
:qid LeftistHeap_interpretation_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7))

:named LeftistHeap_interpretation_Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7))
(declare-fun LeftistHeap.merge_heaps_aux@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.merge_heaps_aux@tok
@x0)
@x1)
@x2)
@x3)
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.merge_heaps_aux@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_LeftistHeap.merge_heaps_aux))

:named token_correspondence_LeftistHeap.merge_heaps_aux))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.merge_heaps_aux@tok
Tm_arrow_2b44d632f4c08a1a1bd0e9c9ef8961e7))

;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.merge_heaps_aux@tok
@x1)
@x2)
@x3)
@x4)
(LeftistHeap.merge_heaps_aux @x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.merge_heaps_aux @x1
@x2
@x3
@x4))
:qid function_token_typing_LeftistHeap.merge_heaps_aux.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.merge_heaps_aux@tok))
:qid function_token_typing_LeftistHeap.merge_heaps_aux))

:named function_token_typing_LeftistHeap.merge_heaps_aux))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
(Tm_refine_1eedbaf503a5ff2d95342a23fd5b243d @x0
@x2
@x1)))
(HasType (LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
(LeftistHeap.heap @x0)))
 

:pattern ((LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.merge_heaps_aux))

:named typing_LeftistHeap.merge_heaps_aux))
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post (LeftistHeap.heap a)).
;   (forall (x: LeftistHeap.heap a). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? (t1, t2)._1) /\ ~(Leaf? (t1, t2)._2) /\ ~(Node? (t1, t2)._1 && Node? (t1, t2)._2) ==>
;     Prims.l_False) /\
;   (~(Leaf? (t1, t2)._1) ==>
;     ~(Leaf? (t1, t2)._2) ==>
;     (forall (b: a)
;         (b: LeftistHeap.heap a)
;         (b: LeftistHeap.heap a)
;         (b: Prims.nat)
;         (b: a)
;         (b: LeftistHeap.heap a)
;         (b: LeftistHeap.heap a)
;         (b: Prims.nat).
;         (t1, t2) == (LeftistHeap.Node b b b b, LeftistHeap.Node b b b b) ==>
;         (forall (k: Prims.pure_post (LeftistHeap.heap a)).
;             (forall (x: LeftistHeap.heap a). {:pattern Prims.guard_free (k x)}
;                 Prims.auto_squash (k x)) ==>
;             (LeftistHeap.gt b b == true ==>
;               LeftistHeap.size t2 + LeftistHeap.size t1 << LeftistHeap.size t1 + LeftistHeap.size t2 \/
;               LeftistHeap.size t2 + LeftistHeap.size t1 ===
;               LeftistHeap.size t1 + LeftistHeap.size t2 /\
;               LeftistHeap.measure t2 t1 << LeftistHeap.measure t1 t2) /\
;             (~(LeftistHeap.gt b b = true) ==>
;               (forall (b: Prims.bool).
;                   LeftistHeap.gt b b == b ==>
;                   (LeftistHeap.size b + LeftistHeap.size t2 <<
;                     LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                     LeftistHeap.size b + LeftistHeap.size t2 ===
;                     LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                     LeftistHeap.measure b t2 << LeftistHeap.measure t1 t2) /\
;                   (forall (any_result: LeftistHeap.heap a).
;                       t2 == any_result ==>
;                       (forall (any_result: LeftistHeap.heap a).
;                           LeftistHeap.merge_heaps_aux b t2 == any_result ==>
;                           (forall (k: Prims.pure_post (LeftistHeap.heap a)).
;                               (forall (x: LeftistHeap.heap a). {:pattern Prims.guard_free (k x)}
;                                   Prims.auto_squash (k x)) ==>
;                               (LeftistHeap.rank b >=
;                                 LeftistHeap.rank (LeftistHeap.merge_heaps_aux b t2) ==
;                                 true ==>
;                                 LeftistHeap.rank (LeftistHeap.merge_heaps_aux b t2) + 1 >= 0) /\
;                               (~(LeftistHeap.rank b >=
;                                   LeftistHeap.rank (LeftistHeap.merge_heaps_aux b t2) =
;                                   true) ==>
;                                 (forall (b: Prims.bool).
;                                     LeftistHeap.rank b >=
;                                     LeftistHeap.rank (LeftistHeap.merge_heaps_aux b t2) ==
;                                     b ==>
;                                     LeftistHeap.rank b + 1 >= 0))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec merge_heaps_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(227,2-239,38)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(227,2-239,38)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(227,2-239,38)
(and (implies 
;; def=LeftistHeap.fst(228,4-230,32); use=LeftistHeap.fst(228,4-230,32)
(and 
;; def=LeftistHeap.fst(228,4-228,11); use=LeftistHeap.fst(228,4-228,11)
(not 
;; def=LeftistHeap.fst(228,4-228,11); use=LeftistHeap.fst(228,4-228,11)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
)


;; def=LeftistHeap.fst(229,4-229,11); use=LeftistHeap.fst(229,4-229,11)
(not 
;; def=LeftistHeap.fst(229,4-229,11); use=LeftistHeap.fst(229,4-229,11)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
)


;; def=LeftistHeap.fst(230,4-230,32); use=LeftistHeap.fst(230,4-230,32)
(not 
;; def=LeftistHeap.fst(230,4-230,32); use=LeftistHeap.fst(230,4-230,32)
(and (BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)))))
)
)

label_1)
(implies 
;; def=Prims.fst(389,18-389,39); use=LeftistHeap.fst(227,2-239,38)
(and 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(227,2-239,38)
(not 
;; def=LeftistHeap.fst(228,4-228,11); use=LeftistHeap.fst(228,4-228,11)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
)


;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(227,2-239,38)
(not 
;; def=LeftistHeap.fst(229,4-229,11); use=LeftistHeap.fst(229,4-229,11)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
)
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.nat)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x5 Term))
 (! (implies (HasType @x5
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.nat)

;; def=LeftistHeap.fst(227,8-230,32); use=LeftistHeap.fst(227,8-230,32)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x1
@x2
@x3
@x4)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x5
@x6
@x7
@x8)))
)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Prims.pure_post (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x10 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(227,2-239,38)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(227,2-239,38)
(ApplyTT @x9
@x10)
)

 

:pattern ((ApplyTT @x9
@x10))
:qid @query.11))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(227,2-239,38)
(and (implies 
;; def=LeftistHeap.fst(231,5-231,13); use=LeftistHeap.fst(231,5-231,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x1
@x5)
(BoxBool true))


;; def=LeftistHeap.fst(225,15-239,38); use=LeftistHeap.fst(231,38-231,40)
(or label_2

;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(231,38-231,40)
(Valid 
;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(231,38-231,40)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(225,15-239,38); use=LeftistHeap.fst(231,38-231,40)
(and 
;; def=LeftistHeap.fst(225,15-225,32); use=LeftistHeap.fst(231,38-231,40)
(Valid 
;; def=LeftistHeap.fst(225,15-225,32); use=LeftistHeap.fst(231,38-231,40)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(231,38-231,40)
(Valid 
;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(231,38-231,40)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(227,2-239,38)
(not 
;; def=LeftistHeap.fst(231,5-231,13); use=LeftistHeap.fst(231,5-231,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x1
@x5)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=LeftistHeap.fst(231,5-239,38); use=LeftistHeap.fst(231,5-239,38)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x1
@x5)
@x10)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(227,2-239,38)
(and 
;; def=LeftistHeap.fst(225,15-239,38); use=LeftistHeap.fst(233,35-233,37)
(or label_3

;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(233,35-233,37)
(Valid 
;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(233,35-233,37)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(225,15-239,38); use=LeftistHeap.fst(233,35-233,37)
(and 
;; def=LeftistHeap.fst(225,15-225,32); use=LeftistHeap.fst(233,35-233,37)
(Valid 
;; def=LeftistHeap.fst(225,15-225,32); use=LeftistHeap.fst(233,35-233,37)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(233,35-233,37)
(Valid 
;; def=LeftistHeap.fst(227,2-239,38); use=LeftistHeap.fst(233,35-233,37)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(223,62-223,64); use=LeftistHeap.fst(227,2-239,38)
(= x_2611d061955cd24360b6c9637f442521_3
@x11)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(233,8-233,37); use=LeftistHeap.fst(233,8-233,37)
(= (LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_2611d061955cd24360b6c9637f442521_3)
@x12)
)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x14 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(227,2-239,38)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(227,2-239,38)
(ApplyTT @x13
@x14)
)

 

:pattern ((ApplyTT @x13
@x14))
:qid @query.16))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(227,2-239,38)
(and (implies 
;; def=LeftistHeap.fst(236,7-236,30); use=LeftistHeap.fst(236,7-236,30)
(= (Prims.op_GreaterThanOrEqual (LeftistHeap.rank x_9cd1733a5204f989dbb2f01d5984df93_0
@x2)
(LeftistHeap.rank x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_2611d061955cd24360b6c9637f442521_3)))
(BoxBool true))


;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(237,23-237,39)
(or label_4

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(237,23-237,39)
(>= (BoxInt_proj_0 (Prims.op_Addition (LeftistHeap.rank x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_2611d061955cd24360b6c9637f442521_3))
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(227,2-239,38)
(not 
;; def=LeftistHeap.fst(236,7-236,30); use=LeftistHeap.fst(236,7-236,30)
(= (Prims.op_GreaterThanOrEqual (LeftistHeap.rank x_9cd1733a5204f989dbb2f01d5984df93_0
@x2)
(LeftistHeap.rank x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_2611d061955cd24360b6c9637f442521_3)))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(227,2-239,38)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=LeftistHeap.fst(236,7-239,38); use=LeftistHeap.fst(236,7-239,38)
(= (Prims.op_GreaterThanOrEqual (LeftistHeap.rank x_9cd1733a5204f989dbb2f01d5984df93_0
@x2)
(LeftistHeap.rank x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x3
x_2611d061955cd24360b6c9637f442521_3)))
@x14)
)

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(239,23-239,38)
(or label_5

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(239,23-239,38)
(>= (BoxInt_proj_0 (Prims.op_Addition (LeftistHeap.rank x_9cd1733a5204f989dbb2f01d5984df93_0
@x2)
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.17))
))
)
 
;;no pats
:qid @query.15)))
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
))
)
 
;;no pats
:qid @query.10)))
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.merge_heaps_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.size.fuel_instrumented, @fuel_irrelevance_LeftistHeap.size.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, Prims_pretyping_ae567c2fb75be05905677af440075565, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_2611d061955cd24360b6c9637f442521_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, data_elim_LeftistHeap.Mkordered, data_elim_LeftistHeap.Node, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, equation_LeftistHeap.gt, equation_LeftistHeap.leq, equation_LeftistHeap.measure, equation_LeftistHeap.rank, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.op_Equals_Equals_Equals, equation_with_fuel_LeftistHeap.size.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, function_token_typing_Prims.__cache_version_number__, int_typing, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_disEquality, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_right, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.size.fuel_instrumented, typing_LeftistHeap.measure, typing_LeftistHeap.size, well-founded-ordering-on-nat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec merge_heaps_aux


; <Start encoding let rec merge_heaps_aux>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.merge_heaps_aux.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.merge_heaps_aux.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.merge_heaps_aux (Term Term Term Term) Term)
(declare-fun LeftistHeap.merge_heaps_aux@tok () Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t1: heap a -> t2: heap a -> Prims.Tot (heap a)
(declare-fun Tm_arrow_a904a3a7f98e4145b6456391d1921a78 () Term)

; </end encoding let rec merge_heaps_aux>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.merge_heaps_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
(LeftistHeap.heap @x0)))
 

:pattern ((LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.merge_heaps_aux))

:named typing_LeftistHeap.merge_heaps_aux))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.merge_heaps_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
(LeftistHeap.heap @x1)))
(HasType (LeftistHeap.merge_heaps_aux.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
(LeftistHeap.heap @x1)))
 

:pattern ((LeftistHeap.merge_heaps_aux.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_LeftistHeap.merge_heaps_aux.fuel_instrumented))

:named token_correspondence_LeftistHeap.merge_heaps_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.merge_heaps_aux
;;; Fact-ids: Name LeftistHeap.merge_heaps_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
(LeftistHeap.ordered @x1))
(HasType @x3
(LeftistHeap.heap @x1))
(HasType @x4
(LeftistHeap.heap @x1)))
(= (LeftistHeap.merge_heaps_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap @x1)
(LeftistHeap.heap @x1)
@x3
@x4)))
(ite (is-LeftistHeap.Leaf (FStar.Pervasives.Native.Mktuple2__1 @lb5))
@x4
(ite (is-LeftistHeap.Leaf (FStar.Pervasives.Native.Mktuple2__2 @lb5))
@x3
(ite (and (is-LeftistHeap.Node (FStar.Pervasives.Native.Mktuple2__1 @lb5))
(is-LeftistHeap.Node (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(let ((@lb6 (LeftistHeap.gt @x1
@x2
(LeftistHeap.Node_key (FStar.Pervasives.Native.Mktuple2__1 @lb5))
(LeftistHeap.Node_key (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(ite (= @lb6
(BoxBool true))
(LeftistHeap.merge_heaps_aux.fuel_instrumented @u0
@x1
@x2
@x4
@x3)
(let ((@lb7 (Prims.op_GreaterThanOrEqual (LeftistHeap.rank @x1
(LeftistHeap.Node_left (FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(LeftistHeap.rank @x1
(LeftistHeap.merge_heaps_aux.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_right (FStar.Pervasives.Native.Mktuple2__1 @lb5))
@x4)))))
(ite (= @lb7
(BoxBool true))
(LeftistHeap.Node @x1
(LeftistHeap.Node_key (FStar.Pervasives.Native.Mktuple2__1 @lb5))
(LeftistHeap.Node_left (FStar.Pervasives.Native.Mktuple2__1 @lb5))
(LeftistHeap.merge_heaps_aux.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_right (FStar.Pervasives.Native.Mktuple2__1 @lb5))
@x4)
(Prims.op_Addition (LeftistHeap.rank @x1
(LeftistHeap.merge_heaps_aux.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_right (FStar.Pervasives.Native.Mktuple2__1 @lb5))
@x4))
(BoxInt 1)))
(LeftistHeap.Node @x1
(LeftistHeap.Node_key (FStar.Pervasives.Native.Mktuple2__1 @lb5))
(LeftistHeap.merge_heaps_aux.fuel_instrumented @u0
@x1
@x2
(LeftistHeap.Node_right (FStar.Pervasives.Native.Mktuple2__1 @lb5))
@x4)
(LeftistHeap.Node_left (FStar.Pervasives.Native.Mktuple2__1 @lb5))
(Prims.op_Addition (LeftistHeap.rank @x1
(LeftistHeap.Node_left (FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxInt 1)))))))
Tm_unit))))))
 :weight 0


:pattern ((LeftistHeap.merge_heaps_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_LeftistHeap.merge_heaps_aux.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.merge_heaps_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.merge_heaps_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (LeftistHeap.merge_heaps_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(LeftistHeap.merge_heaps_aux.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((LeftistHeap.merge_heaps_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_LeftistHeap.merge_heaps_aux.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.merge_heaps_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.merge_heaps_aux; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(223,8-223,23); use=LeftistHeap.fst(223,8-223,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
(LeftistHeap.merge_heaps_aux.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_LeftistHeap.merge_heaps_aux.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.merge_heaps_aux.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(249,2-253,11)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___18 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t1 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;t2 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_3 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_3
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.heap_property_merge (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.heap_property_merge@tok () Term)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.heap_property t1 /\ LeftistHeap.heap_property t2 /\
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.heap_property (LeftistHeap.merge_heaps_aux t1 t2) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (forall (b: a)
;           (b: LeftistHeap.heap a)
;           (b: LeftistHeap.heap a)
;           (b: Prims.nat)
;           (b: a)
;           (b: LeftistHeap.heap a)
;           (b: LeftistHeap.heap a)
;           (b: Prims.nat).
;           (t1, t2) == (LeftistHeap.Node b b b b, LeftistHeap.Node b b b b) ==>
;           (forall (k: Prims.pure_post Prims.unit).
;               (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;               (LeftistHeap.gt b b == true ==>
;                 (LeftistHeap.size t2 + LeftistHeap.size t1 <<
;                   LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                   LeftistHeap.size t2 + LeftistHeap.size t1 ===
;                   LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                   LeftistHeap.measure t2 t1 << LeftistHeap.measure t1 t2) /\
;                 (forall (any_result: LeftistHeap.heap a).
;                     t1 == any_result ==>
;                     LeftistHeap.heap_property t2 /\ LeftistHeap.heap_property t1 /\
;                     (forall (pure_result: Prims.unit).
;                         LeftistHeap.heap_property (LeftistHeap.merge_heaps_aux t2 t1) ==>
;                         k pure_result))) /\
;               (~(LeftistHeap.gt b b = true) ==>
;                 (forall (b: Prims.bool).
;                     LeftistHeap.gt b b == b ==>
;                     (LeftistHeap.size b + LeftistHeap.size t2 <<
;                       LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                       LeftistHeap.size b + LeftistHeap.size t2 ===
;                       LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                       LeftistHeap.measure b t2 << LeftistHeap.measure t1 t2) /\
;                     (forall (any_result: LeftistHeap.heap a).
;                         t2 == any_result ==>
;                         LeftistHeap.heap_property b /\ LeftistHeap.heap_property t2 /\
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.heap_property (LeftistHeap.merge_heaps_aux b t2) ==>
;                             (forall (pure_result: Prims.unit).
;                                 LeftistHeap.leq b b \/ LeftistHeap.leq b b ==> k pure_result))))))) /\
;       (~(Node? (t1, t2)._1 && Node? (t1, t2)._2) ==>
;         (forall (b: LeftistHeap.heap a & LeftistHeap.heap a).
;             (t1, t2) == b ==> (forall (any_result: Prims.unit). k any_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec heap_property_merge`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(249,2-253,11)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2)
)


;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(249,2-253,11)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(249,2-253,11)
(or label_2

;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(249,2-253,11)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(249,2-253,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(249,2-253,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(249,2-253,11)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(249,2-253,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(249,2-253,11)
(and 
;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.nat)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x6 Term))
 (! (implies (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=LeftistHeap.fst(249,8-250,32); use=LeftistHeap.fst(249,8-250,32)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3
@x4
@x5)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7
@x8
@x9)))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x11 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(249,2-253,11)
(ApplyTT @x1
@x11)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(249,2-253,11)
(ApplyTT @x10
@x11)
)
)
 :weight 0


:pattern ((ApplyTT @x10
@x11))
:qid @query.13))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(249,2-253,11)
(and (implies 
;; def=LeftistHeap.fst(251,5-251,13); use=LeftistHeap.fst(251,5-251,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(249,2-253,11)
(and 
;; def=LeftistHeap.fst(248,15-253,11); use=LeftistHeap.fst(251,42-251,44)
(or label_3

;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(251,42-251,44)
(Valid 
;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(251,42-251,44)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(248,15-253,11); use=LeftistHeap.fst(251,42-251,44)
(and 
;; def=LeftistHeap.fst(248,15-248,32); use=LeftistHeap.fst(251,42-251,44)
(Valid 
;; def=LeftistHeap.fst(248,15-248,32); use=LeftistHeap.fst(251,42-251,44)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(251,42-251,44)
(Valid 
;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(251,42-251,44)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(245,52-245,57); use=LeftistHeap.fst(249,2-253,11)
(= x_2611d061955cd24360b6c9637f442521_2
@x11)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(251,19-251,38)
(and 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(251,19-251,38)
(or label_4

;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(251,19-251,38)
(Valid 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(251,19-251,38)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3)
)
)


;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(251,19-251,38)
(or label_5

;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(251,19-251,38)
(Valid 
;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(251,19-251,38)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(251,19-251,38)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(251,19-251,38)
(Valid 
;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(251,19-251,38)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(251,19-251,38)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(251,19-251,38)
(ApplyTT @x10
@x12)
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(249,2-253,11)
(not 
;; def=LeftistHeap.fst(251,5-251,13); use=LeftistHeap.fst(251,5-251,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.bool)

;; def=LeftistHeap.fst(251,5-252,52); use=LeftistHeap.fst(251,5-252,52)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
@x11)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(249,2-253,11)
(and 
;; def=LeftistHeap.fst(248,15-253,11); use=LeftistHeap.fst(252,30-252,32)
(or label_6

;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(252,30-252,32)
(Valid 
;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(252,30-252,32)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(248,15-253,11); use=LeftistHeap.fst(252,30-252,32)
(and 
;; def=LeftistHeap.fst(248,15-248,32); use=LeftistHeap.fst(252,30-252,32)
(Valid 
;; def=LeftistHeap.fst(248,15-248,32); use=LeftistHeap.fst(252,30-252,32)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(252,30-252,32)
(Valid 
;; def=LeftistHeap.fst(249,2-253,11); use=LeftistHeap.fst(252,30-252,32)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(245,55-245,57); use=LeftistHeap.fst(249,2-253,11)
(= x_2611d061955cd24360b6c9637f442521_3
@x12)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(252,8-252,27)
(and 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(252,8-252,27)
(or label_7

;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(252,8-252,27)
(Valid 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(252,8-252,27)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4)
)
)


;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(252,8-252,27)
(or label_8

;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(252,8-252,27)
(Valid 
;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(252,8-252,27)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(252,8-252,27)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(252,8-252,27)
(Valid 
;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(252,8-252,27)
(LeftistHeap.heap_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_2611d061955cd24360b6c9637f442521_3))
)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(252,34-252,45)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=LeftistHeap.fst(37,17-37,35); use=LeftistHeap.fst(252,34-252,45)
(or 
;; def=LeftistHeap.fst(37,17-37,24); use=LeftistHeap.fst(252,34-252,45)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x2)
@x6))


;; def=LeftistHeap.fst(37,28-37,35); use=LeftistHeap.fst(252,34-252,45)
(BoxBool_proj_0 (ApplyTT (ApplyTT (ApplyTT (ApplyTT LeftistHeap.leq@tok
x_9cd1733a5204f989dbb2f01d5984df93_0)
x_f0062e810d23900aea914a963397c69a_1)
@x6)
@x2))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(252,34-252,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(252,34-252,45)
(ApplyTT @x10
@x14)
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(249,2-253,11)
(not 
;; def=LeftistHeap.fst(250,4-250,32); use=LeftistHeap.fst(250,4-250,32)
(and (BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)))))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=LeftistHeap.fst(249,8-253,5); use=LeftistHeap.fst(249,8-253,5)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
@x2)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(249,2-253,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(249,2-253,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(249,2-253,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.heap_property_merge, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge_heaps_aux.fuel_instrumented, @fuel_correspondence_LeftistHeap.size.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_irrelevance_LeftistHeap.merge_heaps_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.size.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, Prims_pretyping_ae567c2fb75be05905677af440075565, b2t_def, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_2611d061955cd24360b6c9637f442521_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, bool_typing, constructor_distinct_LeftistHeap.Node, data_elim_LeftistHeap.Mkordered, data_elim_LeftistHeap.Node, disc_equation_LeftistHeap.Node, equation_LeftistHeap.gt, equation_LeftistHeap.heap_property, equation_LeftistHeap.leq, equation_LeftistHeap.measure, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.op_Equals_Equals_Equals, equation_with_fuel_LeftistHeap.lower_bounded_heap.fuel_instrumented, equation_with_fuel_LeftistHeap.merge_heaps_aux.fuel_instrumented, equation_with_fuel_LeftistHeap.size.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, function_token_typing_Prims.__cache_version_number__, int_typing, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, l_and-interp, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_disEquality, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented, token_correspondence_LeftistHeap.size.fuel_instrumented, true_interp, typing_LeftistHeap.lower_bounded_heap, typing_LeftistHeap.measure, typing_LeftistHeap.merge_heaps_aux, typing_LeftistHeap.size, unit_inversion, unit_typing, well-founded-ordering-on-nat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec heap_property_merge


; <Start encoding let rec heap_property_merge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.heap_property_merge (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.heap_property_merge@tok () Term)

; </end encoding let rec heap_property_merge>

(push) ;; push{2

; Starting query at LeftistHeap.fst(258,2-262,11)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___19 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t1 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;t2 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_3 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_3
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_3))
;;;;;;;;;;;;;;;;y : a (a)
(declare-fun x_157b99e815dc43d99415725267e9c452_4 () Term)
;;;;;;;;;;;;;;;;binder_x_157b99e815dc43d99415725267e9c452_4
;;; Fact-ids: 
(assert (! (HasType x_157b99e815dc43d99415725267e9c452_4
x_9cd1733a5204f989dbb2f01d5984df93_0)
:named binder_x_157b99e815dc43d99415725267e9c452_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.count_merge_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.count_merge_aux@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.count_heap (LeftistHeap.merge_heaps_aux t1 t2) y =
;       LeftistHeap.count_heap t1 y + LeftistHeap.count_heap t2 y ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (forall (b: a)
;           (b: LeftistHeap.heap a)
;           (b: LeftistHeap.heap a)
;           (b: Prims.nat)
;           (b: a)
;           (b: LeftistHeap.heap a)
;           (b: LeftistHeap.heap a)
;           (b: Prims.nat).
;           (t1, t2) == (LeftistHeap.Node b b b b, LeftistHeap.Node b b b b) ==>
;           (forall (k: Prims.pure_post Prims.unit).
;               (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;               (LeftistHeap.gt b b == true ==>
;                 (LeftistHeap.size t2 + LeftistHeap.size t1 <<
;                   LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                   LeftistHeap.size t2 + LeftistHeap.size t1 ===
;                   LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                   LeftistHeap.measure t2 t1 << LeftistHeap.measure t1 t2) /\
;                 (forall (any_result: a).
;                     y == any_result ==>
;                     (forall (pure_result: Prims.unit).
;                         LeftistHeap.count_heap (LeftistHeap.merge_heaps_aux t2 t1) y =
;                         LeftistHeap.count_heap t2 y + LeftistHeap.count_heap t1 y ==>
;                         k pure_result))) /\
;               (~(LeftistHeap.gt b b = true) ==>
;                 (forall (b: Prims.bool).
;                     LeftistHeap.gt b b == b ==>
;                     (LeftistHeap.size b + LeftistHeap.size t2 <<
;                       LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                       LeftistHeap.size b + LeftistHeap.size t2 ===
;                       LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                       LeftistHeap.measure b t2 << LeftistHeap.measure t1 t2) /\
;                     (forall (any_result: a).
;                         y == any_result ==>
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.count_heap (LeftistHeap.merge_heaps_aux b t2) y =
;                             LeftistHeap.count_heap b y + LeftistHeap.count_heap t2 y ==>
;                             k pure_result)))))) /\
;       (~(Node? (t1, t2)._1 && Node? (t1, t2)._2) ==>
;         (forall (b: LeftistHeap.heap a & LeftistHeap.heap a).
;             (t1, t2) == b ==> (forall (any_result: Prims.unit). k any_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec count_merge_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(256,17-256,89); use=LeftistHeap.fst(258,2-262,11)
(or label_2

;; def=LeftistHeap.fst(256,17-256,89); use=LeftistHeap.fst(258,2-262,11)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
x_157b99e815dc43d99415725267e9c452_4)
(Prims.op_Addition (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_157b99e815dc43d99415725267e9c452_4)
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_157b99e815dc43d99415725267e9c452_4)))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(258,2-262,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(258,2-262,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(258,2-262,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(258,2-262,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(258,2-262,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(258,2-262,11)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(258,2-262,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(258,2-262,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(258,2-262,11)
(and 
;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.nat)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x6 Term))
 (! (implies (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=LeftistHeap.fst(258,8-259,32); use=LeftistHeap.fst(258,8-259,32)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3
@x4
@x5)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7
@x8
@x9)))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x11 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(258,2-262,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(258,2-262,11)
(ApplyTT @x1
@x11)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(258,2-262,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(258,2-262,11)
(ApplyTT @x10
@x11)
)
)
 :weight 0


:pattern ((ApplyTT @x10
@x11))
:qid @query.13))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(258,2-262,11)
(and (implies 
;; def=LeftistHeap.fst(260,5-260,13); use=LeftistHeap.fst(260,5-260,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(258,2-262,11)
(and 
;; def=LeftistHeap.fst(257,15-262,11); use=LeftistHeap.fst(260,41-260,42)
(or label_3

;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(260,41-260,42)
(Valid 
;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(260,41-260,42)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(257,15-262,11); use=LeftistHeap.fst(260,41-260,42)
(and 
;; def=LeftistHeap.fst(257,15-257,32); use=LeftistHeap.fst(260,41-260,42)
(Valid 
;; def=LeftistHeap.fst(257,15-257,32); use=LeftistHeap.fst(260,41-260,42)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(260,41-260,42)
(Valid 
;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(260,41-260,42)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(255,73-255,74); use=LeftistHeap.fst(258,2-262,11)
(= x_157b99e815dc43d99415725267e9c452_4
@x11)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(260,19-260,34)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=LeftistHeap.fst(256,17-256,89); use=LeftistHeap.fst(260,19-260,34)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2)
x_157b99e815dc43d99415725267e9c452_4)
(Prims.op_Addition (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_157b99e815dc43d99415725267e9c452_4)
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_157b99e815dc43d99415725267e9c452_4)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(260,19-260,34)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(260,19-260,34)
(ApplyTT @x10
@x12)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(258,2-262,11)
(not 
;; def=LeftistHeap.fst(260,5-260,13); use=LeftistHeap.fst(260,5-260,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.bool)

;; def=LeftistHeap.fst(260,5-261,29); use=LeftistHeap.fst(260,5-261,29)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
@x11)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(258,2-262,11)
(and 
;; def=LeftistHeap.fst(257,15-262,11); use=LeftistHeap.fst(261,28-261,29)
(or label_4

;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(261,28-261,29)
(Valid 
;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(261,28-261,29)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(257,15-262,11); use=LeftistHeap.fst(261,28-261,29)
(and 
;; def=LeftistHeap.fst(257,15-257,32); use=LeftistHeap.fst(261,28-261,29)
(Valid 
;; def=LeftistHeap.fst(257,15-257,32); use=LeftistHeap.fst(261,28-261,29)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(261,28-261,29)
(Valid 
;; def=LeftistHeap.fst(258,2-262,11); use=LeftistHeap.fst(261,28-261,29)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=LeftistHeap.fst(255,73-255,74); use=LeftistHeap.fst(258,2-262,11)
(= x_157b99e815dc43d99415725267e9c452_4
@x12)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(261,7-261,22)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=LeftistHeap.fst(256,17-256,89); use=LeftistHeap.fst(261,7-261,22)
(= (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_2611d061955cd24360b6c9637f442521_3)
x_157b99e815dc43d99415725267e9c452_4)
(Prims.op_Addition (LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_157b99e815dc43d99415725267e9c452_4)
(LeftistHeap.count_heap x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_157b99e815dc43d99415725267e9c452_4)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(261,7-261,22)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(261,7-261,22)
(ApplyTT @x10
@x13)
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(258,2-262,11)
(not 
;; def=LeftistHeap.fst(259,4-259,32); use=LeftistHeap.fst(259,4-259,32)
(and (BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)))))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=LeftistHeap.fst(258,8-262,5); use=LeftistHeap.fst(258,8-262,5)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
@x2)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(258,2-262,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(258,2-262,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(258,2-262,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.count_merge_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count_heap.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge_heaps_aux.fuel_instrumented, @fuel_correspondence_LeftistHeap.size.fuel_instrumented, @fuel_irrelevance_LeftistHeap.count_heap.fuel_instrumented, @fuel_irrelevance_LeftistHeap.merge_heaps_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.size.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, Prims_pretyping_ae567c2fb75be05905677af440075565, binder_x_157b99e815dc43d99415725267e9c452_4, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_2611d061955cd24360b6c9637f442521_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, constructor_distinct_LeftistHeap.Node, data_elim_LeftistHeap.Mkordered, disc_equation_LeftistHeap.Node, equation_LeftistHeap.gt, equation_LeftistHeap.leq, equation_LeftistHeap.measure, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.op_Equals_Equals_Equals, equation_with_fuel_LeftistHeap.count_heap.fuel_instrumented, equation_with_fuel_LeftistHeap.merge_heaps_aux.fuel_instrumented, equation_with_fuel_LeftistHeap.size.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_disEquality, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.size.fuel_instrumented, typing_LeftistHeap.count_heap, typing_LeftistHeap.measure, typing_LeftistHeap.merge_heaps_aux, typing_LeftistHeap.size, unit_inversion, unit_typing, well-founded-ordering-on-nat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec count_merge_aux


; <Start encoding let rec count_merge_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.count_merge_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.count_merge_aux@tok () Term)

; </end encoding let rec count_merge_aux>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Preorder.relation @x0)
Tm_type))
 

:pattern ((FStar.Preorder.relation @x0))
:qid typing_FStar.Preorder.relation))

:named typing_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Calc.calc_pack; Namespace FStar.Calc
(assert (! 
;; def=FStar.Calc.fsti(51,5-51,14); use=FStar.Calc.fsti(51,5-51,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list (FStar.Preorder.relation @x0)))
(HasType @x2
@x0)
(HasType @x3
@x0))
(HasType (FStar.Calc.calc_pack @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Calc.calc_pack @x0
@x1
@x2
@x3))
:qid typing_FStar.Calc.calc_pack))

:named typing_FStar.Calc.calc_pack))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Calc.calc_chain; Namespace FStar.Calc
(assert (! 
;; def=FStar.Calc.fsti(32,4-32,14); use=FStar.Calc.fsti(32,4-32,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list (FStar.Preorder.relation @x0)))
(HasType @x2
@x0)
(HasType @x3
@x0))
(HasType (FStar.Calc.calc_chain @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Calc.calc_chain @x0
@x1
@x2
@x3))
:qid typing_FStar.Calc.calc_chain))

:named typing_FStar.Calc.calc_chain))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type))
:qid kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.relation
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (= (FStar.Preorder.relation @x0)
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0))
 

:pattern ((FStar.Preorder.relation @x0))
:qid equation_FStar.Preorder.relation))

:named equation_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;Equation for FStar.Calc.calc_pack
;;; Fact-ids: Name FStar.Calc.calc_pack; Namespace FStar.Calc
(assert (! 
;; def=FStar.Calc.fsti(51,5-51,14); use=FStar.Calc.fsti(51,5-51,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Calc.calc_pack @x0
@x1
@x2
@x3)
(Prims.squash (FStar.Calc.calc_chain @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Calc.calc_pack @x0
@x1
@x2
@x3))
:qid equation_FStar.Calc.calc_pack))

:named equation_FStar.Calc.calc_pack))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2)))
:qid FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1))
(and 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.1))

(IsTotFun @x0)

;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1)))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
(push) ;; push{2

; Starting query at LeftistHeap.fst(267,1-294,1)

(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_febbcee11d82c36b03c51787dcd8e7ed (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(265,18-265,52); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_febbcee11d82c36b03c51787dcd8e7ed @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_febbcee11d82c36b03c51787dcd8e7ed @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_febbcee11d82c36b03c51787dcd8e7ed))

:named refinement_kinding_Tm_refine_febbcee11d82c36b03c51787dcd8e7ed))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(265,18-265,52); use=LeftistHeap.fst(267,1-294,1)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_febbcee11d82c36b03c51787dcd8e7ed @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=LeftistHeap.fst(265,18-265,33); use=LeftistHeap.fst(267,1-294,1)
(Valid 
;; def=LeftistHeap.fst(265,18-265,33); use=LeftistHeap.fst(267,1-294,1)
(LeftistHeap.heap_property @x2
@x3
@x4)
)


;; def=LeftistHeap.fst(265,37-265,52); use=LeftistHeap.fst(267,1-294,1)
(Valid 
;; def=LeftistHeap.fst(265,37-265,52); use=LeftistHeap.fst(267,1-294,1)
(LeftistHeap.heap_property @x2
@x3
@x5)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_febbcee11d82c36b03c51787dcd8e7ed @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_febbcee11d82c36b03c51787dcd8e7ed))

:named refinement_interpretation_Tm_refine_febbcee11d82c36b03c51787dcd8e7ed))
;;;;;;;;;;;;;;;;haseq for Tm_refine_febbcee11d82c36b03c51787dcd8e7ed
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(265,18-265,52); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_febbcee11d82c36b03c51787dcd8e7ed @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_febbcee11d82c36b03c51787dcd8e7ed @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_febbcee11d82c36b03c51787dcd8e7ed))

:named haseqTm_refine_febbcee11d82c36b03c51787dcd8e7ed))

;;;;;;;;;;;;;;;;x10: Prims.nat -> y11: Prims.nat -> Type0
(declare-fun Tm_arrow_96c947a3acb38e049a37334ef25b2245 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_96c947a3acb38e049a37334ef25b2245
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_96c947a3acb38e049a37334ef25b2245
Tm_type)
:named kinding_Tm_arrow_96c947a3acb38e049a37334ef25b2245))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,47-58,50); use=LeftistHeap.fst(272,60-284,5)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_96c947a3acb38e049a37334ef25b2245)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_96c947a3acb38e049a37334ef25b2245))
:qid LeftistHeap_pre_typing_Tm_arrow_96c947a3acb38e049a37334ef25b2245))

:named LeftistHeap_pre_typing_Tm_arrow_96c947a3acb38e049a37334ef25b2245))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_96c947a3acb38e049a37334ef25b2245
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(58,47-58,50); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_96c947a3acb38e049a37334ef25b2245)
(and 
;; def=LeftistHeap.fst(58,47-58,50); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Prims.nat))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_arrow_96c947a3acb38e049a37334ef25b2245.1))

(IsTotFun @x0)

;; def=LeftistHeap.fst(58,47-58,50); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid LeftistHeap_interpretation_Tm_arrow_96c947a3acb38e049a37334ef25b2245.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_96c947a3acb38e049a37334ef25b2245))
:qid LeftistHeap_interpretation_Tm_arrow_96c947a3acb38e049a37334ef25b2245))

:named LeftistHeap_interpretation_Tm_arrow_96c947a3acb38e049a37334ef25b2245))
(declare-fun Tm_abs_1345b5ec037203e43d53ac7613f5cc34 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_1345b5ec037203e43d53ac7613f5cc34
;;; Fact-ids: 
(assert (! (HasType Tm_abs_1345b5ec037203e43d53ac7613f5cc34
Tm_arrow_96c947a3acb38e049a37334ef25b2245)
:named typing_Tm_abs_1345b5ec037203e43d53ac7613f5cc34))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1345b5ec037203e43d53ac7613f5cc34
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(275,8-275,9); use=LeftistHeap.fst(275,8-275,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x0)
@x1)
(Prims.b2t (Prims.op_Equality Prims.nat
@x0
@x1)))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x0)
@x1))
:qid interpretation_Tm_abs_1345b5ec037203e43d53ac7613f5cc34))

:named interpretation_Tm_abs_1345b5ec037203e43d53ac7613f5cc34))


;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [fun x10 y11 -> x10 = y11 <: Type]       (count (to_list_aux (merge_heaps_aux a b)) y)       (count_heap (merge_heaps_aux a b) y)
(declare-fun Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid kinding_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675))

:named kinding_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675 @x2
@x3
@x4
@x5
@x6))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675 @x2
@x3
@x4
@x5
@x6)))
:qid LeftistHeap_pre_typing_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675))

:named LeftistHeap_pre_typing_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675 @x1
@x2
@x3
@x4
@x5))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)
(HasType (ApplyTT @x0
@x6)
(FStar.Calc.calc_pack Prims.nat
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat)))
(LeftistHeap.count @x5
(LeftistHeap.to_list_aux @x5
@x4
(LeftistHeap.merge_heaps_aux @x5
@x4
@x3
@x2))
@x1)
(LeftistHeap.count_heap @x5
@x4
(LeftistHeap.merge_heaps_aux @x5
@x4
@x3
@x2)
@x1))))
 

:pattern ((ApplyTT @x0
@x6))
:qid LeftistHeap_interpretation_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675 @x1
@x2
@x3
@x4
@x5)))
:qid LeftistHeap_interpretation_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675))

:named LeftistHeap_interpretation_Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675))










;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [(fun x12 y13 -> x12 = y13 <: Type); fun x10 y11 -> x10 = y11 <: Type]       (count (to_list_aux (merge_heaps_aux a b)) y)       (count_heap a y + count_heap b y)
(declare-fun Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid kinding_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd))

:named kinding_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd @x2
@x3
@x4
@x5
@x6))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd @x2
@x3
@x4
@x5
@x6)))
:qid LeftistHeap_pre_typing_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd))

:named LeftistHeap_pre_typing_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd @x1
@x2
@x3
@x4
@x5))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)
(HasType (ApplyTT @x0
@x6)
(FStar.Calc.calc_pack Prims.nat
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat))))
(LeftistHeap.count @x5
(LeftistHeap.to_list_aux @x5
@x4
(LeftistHeap.merge_heaps_aux @x5
@x4
@x3
@x2))
@x1)
(Prims.op_Addition (LeftistHeap.count_heap @x5
@x4
@x3
@x1)
(LeftistHeap.count_heap @x5
@x4
@x2
@x1)))))
 

:pattern ((ApplyTT @x0
@x6))
:qid LeftistHeap_interpretation_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd @x1
@x2
@x3
@x4
@x5)))
:qid LeftistHeap_interpretation_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd))

:named LeftistHeap_interpretation_Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd))


















;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [         (fun x14 y15 -> x14 = y15 <: Type);         (fun x12 y13 -> x12 = y13 <: Type);         fun x10 y11 -> x10 = y11 <: Type       ]       (count (to_list_aux (merge_heaps_aux a b)) y)       (count (to_list_aux a) y + count (to_list_aux b) y)
(declare-fun Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid kinding_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1))

:named kinding_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1 @x2
@x3
@x4
@x5
@x6))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1 @x2
@x3
@x4
@x5
@x6)))
:qid LeftistHeap_pre_typing_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1))

:named LeftistHeap_pre_typing_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1 @x1
@x2
@x3
@x4
@x5))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)
(HasType (ApplyTT @x0
@x6)
(FStar.Calc.calc_pack Prims.nat
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat)))))
(LeftistHeap.count @x5
(LeftistHeap.to_list_aux @x5
@x4
(LeftistHeap.merge_heaps_aux @x5
@x4
@x3
@x2))
@x1)
(Prims.op_Addition (LeftistHeap.count @x5
(LeftistHeap.to_list_aux @x5
@x4
@x3)
@x1)
(LeftistHeap.count @x5
(LeftistHeap.to_list_aux @x5
@x4
@x2)
@x1)))))
 

:pattern ((ApplyTT @x0
@x6))
:qid LeftistHeap_interpretation_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1 @x1
@x2
@x3
@x4
@x5)))
:qid LeftistHeap_interpretation_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1))

:named LeftistHeap_interpretation_Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1))




























;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [         (fun x16 y17 -> x16 = y17 <: Type);         (fun x14 y15 -> x14 = y15 <: Type);         (fun x12 y13 -> x12 = y13 <: Type);         fun x10 y11 -> x10 = y11 <: Type       ]       (count (to_list_aux (merge_heaps_aux a b)) y)       (count (merge (to_list_aux a) (to_list_aux b)) y)
(declare-fun Tm_arrow_5ad9384c04525bfbea8fa83621c5c436 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_arrow_5ad9384c04525bfbea8fa83621c5c436 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_arrow_5ad9384c04525bfbea8fa83621c5c436 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid kinding_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436))

:named kinding_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_5ad9384c04525bfbea8fa83621c5c436 @x2
@x3
@x4
@x5
@x6))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_5ad9384c04525bfbea8fa83621c5c436 @x2
@x3
@x4
@x5
@x6)))
:qid LeftistHeap_pre_typing_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436))

:named LeftistHeap_pre_typing_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_5ad9384c04525bfbea8fa83621c5c436 @x1
@x2
@x3
@x4
@x5))
(and 
;; def=FStar.Calc.fsti(81,6-81,36); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)
(HasType (ApplyTT @x0
@x6)
(FStar.Calc.calc_pack Prims.nat
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat))))))
(LeftistHeap.count @x5
(LeftistHeap.to_list_aux @x5
@x4
(LeftistHeap.merge_heaps_aux @x5
@x4
@x3
@x2))
@x1)
(LeftistHeap.count @x5
(LeftistHeap.merge @x5
@x4
(LeftistHeap.to_list_aux @x5
@x4
@x3)
(LeftistHeap.to_list_aux @x5
@x4
@x2))
@x1))))
 

:pattern ((ApplyTT @x0
@x6))
:qid LeftistHeap_interpretation_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_5ad9384c04525bfbea8fa83621c5c436 @x1
@x2
@x3
@x4
@x5)))
:qid LeftistHeap_interpretation_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436))

:named LeftistHeap_interpretation_Tm_arrow_5ad9384c04525bfbea8fa83621c5c436))






























;;;;;;;;;;;;;;;;x: t   -> Prims.squash (count (to_list_aux (merge_heaps_aux a b)) x =         count (merge (to_list_aux a) (to_list_aux b)) x)
(declare-fun Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(264,25-264,26); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919 @x0
@x1
@x2
@x3)
Tm_type))
:qid kinding_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919))

:named kinding_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(264,25-264,26); use=LeftistHeap.fst(267,1-294,1)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919 @x2
@x3
@x4
@x5))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919 @x2
@x3
@x4
@x5)))
:qid LeftistHeap_pre_typing_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919))

:named LeftistHeap_pre_typing_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(264,25-264,26); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919 @x1
@x2
@x3
@x4))
(and 
;; def=LeftistHeap.fst(264,25-264,26); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x5 Term))
 (! (implies (HasType @x5
@x4)
(HasType (ApplyTT @x0
@x5)
(Prims.squash (Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count @x4
(LeftistHeap.to_list_aux @x4
@x3
(LeftistHeap.merge_heaps_aux @x4
@x3
@x2
@x1))
@x5)
(LeftistHeap.count @x4
(LeftistHeap.merge @x4
@x3
(LeftistHeap.to_list_aux @x4
@x3
@x2)
(LeftistHeap.to_list_aux @x4
@x3
@x1))
@x5))))))
 

:pattern ((ApplyTT @x0
@x5))
:qid LeftistHeap_interpretation_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919 @x1
@x2
@x3
@x4)))
:qid LeftistHeap_interpretation_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919))

:named LeftistHeap_interpretation_Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919))
(declare-fun Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(109,16-109,31); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9))

:named refinement_kinding_Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(109,16-109,31); use=LeftistHeap.fst(267,1-294,1)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Classical.Sugar.fsti(109,16-109,31); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x6 Term))
 (! (implies (HasType @x6
@x2)

;; def=LeftistHeap.fst(272,29-272,54); use=LeftistHeap.fst(267,1-294,1)
(= (LeftistHeap.count @x2
(LeftistHeap.to_list_aux @x2
@x3
(LeftistHeap.merge_heaps_aux @x2
@x3
@x4
@x5))
@x6)
(LeftistHeap.count @x2
(LeftistHeap.merge @x2
@x3
(LeftistHeap.to_list_aux @x2
@x3
@x4)
(LeftistHeap.to_list_aux @x2
@x3
@x5))
@x6))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9))

:named refinement_interpretation_Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9
;;; Fact-ids: 
(assert (! 
;; def=FStar.Classical.Sugar.fsti(109,16-109,31); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9))

:named haseqTm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9))


(declare-fun Tm_abs_975db99e3f8bdd666744d0df4c3f973b (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_975db99e3f8bdd666744d0df4c3f973b
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(272,29-272,54); use=LeftistHeap.fst(272,29-272,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_975db99e3f8bdd666744d0df4c3f973b @x0
@x1
@x2
@x3)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x3))
 

:pattern ((Tm_abs_975db99e3f8bdd666744d0df4c3f973b @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_975db99e3f8bdd666744d0df4c3f973b))

:named typing_Tm_abs_975db99e3f8bdd666744d0df4c3f973b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_975db99e3f8bdd666744d0df4c3f973b
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(272,29-272,54); use=LeftistHeap.fst(272,29-272,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_975db99e3f8bdd666744d0df4c3f973b @x1
@x2
@x3
@x4)
@x0)
(Prims.b2t (Prims.op_Equality Prims.nat
(LeftistHeap.count @x4
(LeftistHeap.to_list_aux @x4
@x1
(LeftistHeap.merge_heaps_aux @x4
@x1
@x2
@x3))
@x0)
(LeftistHeap.count @x4
(LeftistHeap.merge @x4
@x1
(LeftistHeap.to_list_aux @x4
@x1
@x2)
(LeftistHeap.to_list_aux @x4
@x1
@x3))
@x0))))
 

:pattern ((ApplyTT (Tm_abs_975db99e3f8bdd666744d0df4c3f973b @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_975db99e3f8bdd666744d0df4c3f973b))

:named interpretation_Tm_abs_975db99e3f8bdd666744d0df4c3f973b))

; Encoding query formula : forall (t: Prims.eqtype) (_: LeftistHeap.ordered t) (a: LeftistHeap.heap t) (b: LeftistHeap.heap t).
;   (forall (_: Prims.squash (LeftistHeap.heap_property a /\ LeftistHeap.heap_property b)).
;       (*  - Could not prove post-condition
; *) Prims.hasEq (Prims.list t)) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       LeftistHeap.heap_property a /\ LeftistHeap.heap_property b /\
;       (forall (pure_result: Prims.unit).
;           LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux a b) =
;           LeftistHeap.merge (LeftistHeap.to_list_aux a) (LeftistHeap.to_list_aux b) ==>
;           p pure_result) ==>
;       (forall (any_result: Prims.list t).
;           LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux a b) == any_result ==>
;           (forall (any_result: Prims.list t).
;               LeftistHeap.merge (LeftistHeap.to_list_aux a) (LeftistHeap.to_list_aux b) ==
;               any_result ==>
;               (forall (y: t). (*  - Could not prove post-condition
; *) Prims.hasEq Prims.nat) /\
;               (forall (any_result: (_: t -> Type0)).
;                   (fun y ->
;                       LeftistHeap.count (LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux a b))
;                         y =
;                       LeftistHeap.count (LeftistHeap.merge (LeftistHeap.to_list_aux a)
;                             (LeftistHeap.to_list_aux b))
;                         y) ==
;                   any_result ==>
;                   (forall (y: t).
;                       (*  - Could not prove post-condition
; *)
;                       Prims.hasEq Prims.nat /\
;                       (forall (x8: Prims.nat) (y9: Prims.nat).
;                           (*  - Could not prove post-condition
; *) Prims.hasEq Prims.nat) /\
;                       (forall (any_result: FStar.Preorder.relation Prims.nat).
;                           (fun x8 y9 -> x8 = y9 <: Type0) == any_result ==>
;                           (forall (any_result: Prims.nat).
;                               LeftistHeap.count (LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux
;                                         a
;                                         b))
;                                 y ==
;                               any_result ==>
;                               (forall (any_result: Prims.nat).
;                                   LeftistHeap.count (LeftistHeap.merge (LeftistHeap.to_list_aux a)
;                                         (LeftistHeap.to_list_aux b))
;                                     y ==
;                                   any_result ==>
;                                   (forall (x16: Prims.nat) (y17: Prims.nat).
;                                       (*  - Could not prove post-condition
; *) Prims.hasEq Prims.nat) /\
;                                   (forall (any_result: FStar.Preorder.relation Prims.nat).
;                                       (fun x16 y17 -> x16 = y17 <: Type0) == any_result ==>
;                                       (forall (x14: Prims.nat) (y15: Prims.nat).
;                                           (*  - Could not prove post-condition
; *)
;                                           Prims.hasEq Prims.nat) /\
;                                       (forall (any_result: FStar.Preorder.relation Prims.nat).
;                                           (fun x14 y15 -> x14 = y15 <: Type0) == any_result ==>
;                                           (forall (x12: Prims.nat) (y13: Prims.nat).
;                                               (*  - Could not prove post-condition
; *)
;                                               Prims.hasEq Prims.nat) /\
;                                           (forall (any_result: FStar.Preorder.relation Prims.nat).
;                                               (fun x12 y13 -> x12 = y13 <: Type0) == any_result ==>
;                                               (forall (x10: Prims.nat) (y11: Prims.nat).
;                                                   (*  - Could not prove post-condition
; *)
;                                                   Prims.hasEq Prims.nat) /\
;                                               (forall (any_result:
;                                                   FStar.Preorder.relation Prims.nat).
;                                                   (fun x10 y11 -> x10 = y11 <: Type0) == any_result ==>
;                                                   (forall (any_result:
;                                                       Prims.list (FStar.Preorder.relation Prims.nat))
;                                                     .
;                                                       [fun x10 y11 -> x10 = y11 <: Type0] ==
;                                                       any_result ==>
;                                                       (forall (any_result:
;                                                           Prims.list (FStar.Preorder.relation Prims.nat
;                                                               )).
;                                                           [
;                                                             (fun x12 y13 -> x12 = y13 <: Type0);
;                                                             fun x10 y11 -> x10 = y11 <: Type0
;                                                           ] ==
;                                                           any_result ==>
;                                                           (forall (any_result:
;                                                               Prims.list (FStar.Preorder.relation Prims.nat
;                                                                   )).
;                                                               [
;                                                                 (fun x14 y15 -> x14 = y15 <: Type0);
;                                                                 (fun x12 y13 -> x12 = y13 <: Type0);
;                                                                 fun x10 y11 -> x10 = y11 <: Type0
;                                                               ] ==
;                                                               any_result ==>
;                                                               (forall (any_result:
;                                                                   Prims.list (FStar.Preorder.relation
;                                                                         Prims.nat)).
;                                                                   [
;                                                                     (fun x16 y17 ->
;                                                                         x16 = y17 <: Type0);
;                                                                     (fun x14 y15 ->
;                                                                         x14 = y15 <: Type0);
;                                                                     (fun x12 y13 ->
;                                                                         x12 = y13 <: Type0);
;                                                                     fun x10 y11 ->
;                                                                       x10 = y11 <: Type0
;                                                                   ] ==
;                                                                   any_result ==>
;                                                                   (forall (_: Prims.unit).
;                                                                       (*  - Could not prove post-condition
; *)
;                                                                       forall (any_result: Prims.nat)
;                                                                       .
;                                                                         LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                               (LeftistHeap.merge_heaps_aux
;                                                                                   a
;                                                                                   b))
;                                                                           y ==
;                                                                         any_result ==>
;                                                                         (forall (any_result:
;                                                                             Prims.int).
;                                                                             LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                   a)
;                                                                               y +
;                                                                             LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                   b)
;                                                                               y ==
;                                                                             any_result ==>
;                                                                             LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                   a)
;                                                                               y +
;                                                                             LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                   b)
;                                                                               y >=
;                                                                             0 /\
;                                                                             (forall (return_val:
;                                                                                 Prims.nat).
;                                                                                 return_val ==
;                                                                                 LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                       a)
;                                                                                   y +
;                                                                                 LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                       b)
;                                                                                   y ==>
;                                                                                 LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                       a)
;                                                                                   y +
;                                                                                 LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                       b)
;                                                                                   y ==
;                                                                                 return_val ==>
;                                                                                 (forall (x16:
;                                                                                     Prims.nat)
;                                                                                     (y17: Prims.nat)
;                                                                                   .
;                                                                                     (*  - Could not prove post-condition
; *)
;                                                                                     Prims.hasEq Prims.nat
;                                                                                     ) /\
;                                                                                 (forall (any_result:
;                                                                                     FStar.Preorder.relation
;                                                                                       Prims.nat).
;                                                                                     (fun x16 y17 ->
;                                                                                         x16 = y17
;                                                                                         <:
;                                                                                         Type0) ==
;                                                                                     any_result ==>
;                                                                                     (forall (any_result:
;                                                                                         Prims.nat).
;                                                                                         LeftistHeap.count
;                                                                                           (LeftistHeap.merge
;                                                                                               (LeftistHeap.to_list_aux
;                                                                                                   a)
;                                                                                               (LeftistHeap.to_list_aux
;                                                                                                   b)
;                                                                                           )
;                                                                                           y ==
;                                                                                         any_result ==>
;                                                                                         (forall (x14:
;                                                                                             Prims.nat)
;                                                                                             (y15:
;                                                                                             Prims.nat)
;                                                                                           .
;                                                                                             (*  - Could not prove post-condition
; *)
;                                                                                             Prims.hasEq
;                                                                                               Prims.nat
;                                                                                             ) /\
;                                                                                         (forall (any_result:
;                                                                                             FStar.Preorder.relation
;                                                                                               Prims.nat
;                                                                                             ).
;                                                                                             (fun
;                                                                                                 x14
;                                                                                                 y15
;                                                                                                 ->
;                                                                                                 x14 =
;                                                                                                 y15
;                                                                                                 <:
;                                                                                                 Type0
;                                                                                             ) ==
;                                                                                             any_result ==>
;                                                                                             (forall (x12:
;                                                                                                 Prims.nat)
;                                                                                                 (y13:
;                                                                                                 Prims.nat)
;                                                                                               .
;                                                                                                 (*  - Could not prove post-condition
; *)
;                                                                                                 Prims.hasEq
;                                                                                                   Prims.nat
;                                                                                                 ) /\
;                                                                                             (forall (any_result:
;                                                                                                 FStar.Preorder.relation
;                                                                                                   Prims.nat
;                                                                                                 ).
;                                                                                                 (fun
;                                                                                                     x12
;                                                                                                     y13
;                                                                                                     ->
;                                                                                                     x12 =
;                                                                                                     y13
;                                                                                                     <:
;                                                                                                     Type0
;                                                                                                 ) ==
;                                                                                                 any_result ==>
;                                                                                                 (forall
;                                                                                                     (x10:
;                                                                                                     Prims.nat)
;                                                                                                     (y11:
;                                                                                                     Prims.nat)
;                                                                                                   .
;                                                                                                     (*  - Could not prove post-condition
; *)
;                                                                                                     Prims.hasEq
;                                                                                                       Prims.nat
; 
;                                                                                                 ) /\
;                                                                                                 (forall
;                                                                                                     (any_result:
;                                                                                                     FStar.Preorder.relation
;                                                                                                       Prims.nat
;                                                                                                     )
;                                                                                                   .
;                                                                                                     (
;                                                                                                       fun
;                                                                                                         x10
;                                                                                                         y11
;                                                                                                         ->
;                                                                                                         x10 =
;                                                                                                         y11
;                                                                                                         <:
;                                                                                                         Type0
;                                                                                                     ) ==
;                                                                                                     any_result ==>
;                                                                                                     (
;                                                                                                       forall
;                                                                                                         (any_result:
;                                                                                                         Prims.list
;                                                                                                           (
;                                                                                                             FStar.Preorder.relation
;                                                                                                               Prims.nat
; 
;                                                                                                           )
;                                                                                                         )
;                                                                                                       .
;                                                                                                         [
;                                                                                                           fun
;                                                                                                             x10
;                                                                                                             y11
;                                                                                                             ->
;                                                                                                             x10 =
;                                                                                                             y11
;                                                                                                             <:
;                                                                                                             Type0
;                                                                                                         ] ==
;                                                                                                         any_result ==>
;                                                                                                         (
;                                                                                                           forall
;                                                                                                             (any_result:
;                                                                                                             Prims.list
;                                                                                                               (
;                                                                                                                 FStar.Preorder.relation
;                                                                                                                   Prims.nat
; 
;                                                                                                               )
;                                                                                                             )
;                                                                                                           .
;                                                                                                             [
;                                                                                                               (
;                                                                                                                 fun
;                                                                                                                   x12
;                                                                                                                   y13
;                                                                                                                   ->
;                                                                                                                   x12 =
;                                                                                                                   y13
;                                                                                                                   <:
;                                                                                                                   Type0
;                                                                                                               );
;                                                                                                               fun
;                                                                                                                 x10
;                                                                                                                 y11
;                                                                                                                 ->
;                                                                                                                 x10 =
;                                                                                                                 y11
;                                                                                                                 <:
;                                                                                                                 Type0
;                                                                                                             ] ==
;                                                                                                             any_result ==>
;                                                                                                             (
;                                                                                                               forall
;                                                                                                                 (any_result:
;                                                                                                                 Prims.list
;                                                                                                                   (
;                                                                                                                     FStar.Preorder.relation
;                                                                                                                       Prims.nat
; 
;                                                                                                                   )
;                                                                                                                 )
;                                                                                                               .
;                                                                                                                 [
;                                                                                                                   (
;                                                                                                                     fun
;                                                                                                                       x14
;                                                                                                                       y15
;                                                                                                                       ->
;                                                                                                                       x14 =
;                                                                                                                       y15
;                                                                                                                       <:
;                                                                                                                       Type0
;                                                                                                                   );
;                                                                                                                   (
;                                                                                                                     fun
;                                                                                                                       x12
;                                                                                                                       y13
;                                                                                                                       ->
;                                                                                                                       x12 =
;                                                                                                                       y13
;                                                                                                                       <:
;                                                                                                                       Type0
;                                                                                                                   );
;                                                                                                                   fun
;                                                                                                                     x10
;                                                                                                                     y11
;                                                                                                                     ->
;                                                                                                                     x10 =
;                                                                                                                     y11
;                                                                                                                     <:
;                                                                                                                     Type0
;                                                                                                                 ] ==
;                                                                                                                 any_result ==>
;                                                                                                                 (
;                                                                                                                   forall
;                                                                                                                     (_:
;                                                                                                                     Prims.unit)
;                                                                                                                   .
;                                                                                                                     (*  - Could not prove post-condition
; *)
;                                                                                                                     forall
;                                                                                                                       (any_result:
;                                                                                                                       Prims.nat)
;                                                                                                                     .
;                                                                                                                       LeftistHeap.count
;                                                                                                                         (
;                                                                                                                           LeftistHeap.to_list_aux
;                                                                                                                             (
;                                                                                                                               LeftistHeap.merge_heaps_aux
;                                                                                                                                 a
;                                                                                                                                 b
; 
;                                                                                                                             )
; 
;                                                                                                                         )
;                                                                                                                         y
;                                                                                                                        ==
;                                                                                                                       any_result ==>
;                                                                                                                       (
;                                                                                                                         forall
;                                                                                                                           (any_result:
;                                                                                                                           Prims.int)
;                                                                                                                         .
;                                                                                                                           LeftistHeap.count_heap
;                                                                                                                             a
;                                                                                                                             y
;                                                                                                                            +
;                                                                                                                           LeftistHeap.count_heap
;                                                                                                                             b
;                                                                                                                             y
;                                                                                                                            ==
;                                                                                                                           any_result ==>
;                                                                                                                           LeftistHeap.count_heap
;                                                                                                                             a
;                                                                                                                             y
;                                                                                                                            +
;                                                                                                                           LeftistHeap.count_heap
;                                                                                                                             b
;                                                                                                                             y
;                                                                                                                            >=
;                                                                                                                           0 /\
;                                                                                                                           (
;                                                                                                                             forall
;                                                                                                                               (return_val:
;                                                                                                                               Prims.nat)
;                                                                                                                             .
;                                                                                                                               return_val ==
;                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                 a
;                                                                                                                                 y
;                                                                                                                                +
;                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                 b
;                                                                                                                                 y
;                                                                                                                                ==>
;                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                 a
;                                                                                                                                 y
;                                                                                                                                +
;                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                 b
;                                                                                                                                 y
;                                                                                                                                ==
;                                                                                                                               return_val ==>
;                                                                                                                               (
;                                                                                                                                 forall
;                                                                                                                                   (x14:
;                                                                                                                                   Prims.nat)
;                                                                                                                                   (y15:
;                                                                                                                                   Prims.nat)
;                                                                                                                                 .
;                                                                                                                                   (*  - Could not prove post-condition
; *)
;                                                                                                                                   Prims.hasEq
;                                                                                                                                     Prims.nat
; 
;                                                                                                                               ) /\
;                                                                                                                               (
;                                                                                                                                 forall
;                                                                                                                                   (any_result:
;                                                                                                                                   FStar.Preorder.relation
;                                                                                                                                     Prims.nat
;                                                                                                                                   )
;                                                                                                                                 .
;                                                                                                                                   (
;                                                                                                                                     fun
;                                                                                                                                       x14
;                                                                                                                                       y15
;                                                                                                                                       ->
;                                                                                                                                       x14 =
;                                                                                                                                       y15
;                                                                                                                                       <:
;                                                                                                                                       Type0
;                                                                                                                                   ) ==
;                                                                                                                                   any_result ==>
;                                                                                                                                   (
;                                                                                                                                     forall
;                                                                                                                                       (any_result:
;                                                                                                                                       Prims.int)
;                                                                                                                                     .
;                                                                                                                                       LeftistHeap.count
;                                                                                                                                         (
;                                                                                                                                           LeftistHeap.to_list_aux
;                                                                                                                                             a
; 
;                                                                                                                                         )
;                                                                                                                                         y
;                                                                                                                                        +
;                                                                                                                                       LeftistHeap.count
;                                                                                                                                         (
;                                                                                                                                           LeftistHeap.to_list_aux
;                                                                                                                                             b
; 
;                                                                                                                                         )
;                                                                                                                                         y
;                                                                                                                                        ==
;                                                                                                                                       any_result ==>
;                                                                                                                                       LeftistHeap.count
;                                                                                                                                         (
;                                                                                                                                           LeftistHeap.to_list_aux
;                                                                                                                                             a
; 
;                                                                                                                                         )
;                                                                                                                                         y
;                                                                                                                                        +
;                                                                                                                                       LeftistHeap.count
;                                                                                                                                         (
;                                                                                                                                           LeftistHeap.to_list_aux
;                                                                                                                                             b
; 
;                                                                                                                                         )
;                                                                                                                                         y
;                                                                                                                                        >=
;                                                                                                                                       0 /\
;                                                                                                                                       (
;                                                                                                                                         forall
;                                                                                                                                           (return_val:
;                                                                                                                                           Prims.nat)
;                                                                                                                                         .
;                                                                                                                                           return_val ==
;                                                                                                                                           LeftistHeap.count
;                                                                                                                                             (
;                                                                                                                                               LeftistHeap.to_list_aux
;                                                                                                                                                 a
; 
;                                                                                                                                             )
;                                                                                                                                             y
;                                                                                                                                            +
;                                                                                                                                           LeftistHeap.count
;                                                                                                                                             (
;                                                                                                                                               LeftistHeap.to_list_aux
;                                                                                                                                                 b
; 
;                                                                                                                                             )
;                                                                                                                                             y
;                                                                                                                                            ==>
;                                                                                                                                           LeftistHeap.count
;                                                                                                                                             (
;                                                                                                                                               LeftistHeap.to_list_aux
;                                                                                                                                                 a
; 
;                                                                                                                                             )
;                                                                                                                                             y
;                                                                                                                                            +
;                                                                                                                                           LeftistHeap.count
;                                                                                                                                             (
;                                                                                                                                               LeftistHeap.to_list_aux
;                                                                                                                                                 b
; 
;                                                                                                                                             )
;                                                                                                                                             y
;                                                                                                                                            ==
;                                                                                                                                           return_val ==>
;                                                                                                                                           (
;                                                                                                                                             forall
;                                                                                                                                               (x12:
;                                                                                                                                               Prims.nat)
;                                                                                                                                               (y13:
;                                                                                                                                               Prims.nat)
;                                                                                                                                             .
;                                                                                                                                               (*  - Could not prove post-condition
; *)
;                                                                                                                                               Prims.hasEq
;                                                                                                                                                 Prims.nat
; 
;                                                                                                                                           ) /\
;                                                                                                                                           (
;                                                                                                                                             forall
;                                                                                                                                               (any_result:
;                                                                                                                                               FStar.Preorder.relation
;                                                                                                                                                 Prims.nat
;                                                                                                                                               )
;                                                                                                                                             .
;                                                                                                                                               (
;                                                                                                                                                 fun
;                                                                                                                                                   x12
;                                                                                                                                                   y13
;                                                                                                                                                   ->
;                                                                                                                                                   x12 =
;                                                                                                                                                   y13
;                                                                                                                                                   <:
;                                                                                                                                                   Type0
;                                                                                                                                               ) ==
;                                                                                                                                               any_result ==>
;                                                                                                                                               (
;                                                                                                                                                 forall
;                                                                                                                                                   (x10:
;                                                                                                                                                   Prims.nat)
;                                                                                                                                                   (y11:
;                                                                                                                                                   Prims.nat)
;                                                                                                                                                 .
;                                                                                                                                                   (*  - Could not prove post-condition
; *)
;                                                                                                                                                   Prims.hasEq
;                                                                                                                                                     Prims.nat
; 
;                                                                                                                                               ) /\
;                                                                                                                                               (
;                                                                                                                                                 forall
;                                                                                                                                                   (any_result:
;                                                                                                                                                   FStar.Preorder.relation
;                                                                                                                                                     Prims.nat
;                                                                                                                                                   )
;                                                                                                                                                 .
;                                                                                                                                                   (
;                                                                                                                                                     fun
;                                                                                                                                                       x10
;                                                                                                                                                       y11
;                                                                                                                                                       ->
;                                                                                                                                                       x10 =
;                                                                                                                                                       y11
;                                                                                                                                                       <:
;                                                                                                                                                       Type0
;                                                                                                                                                   ) ==
;                                                                                                                                                   any_result ==>
;                                                                                                                                                   (
;                                                                                                                                                     forall
;                                                                                                                                                       (any_result:
;                                                                                                                                                       Prims.list
;                                                                                                                                                         (
;                                                                                                                                                           FStar.Preorder.relation
;                                                                                                                                                             Prims.nat
; 
;                                                                                                                                                         )
;                                                                                                                                                       )
;                                                                                                                                                     .
;                                                                                                                                                       [
;                                                                                                                                                         fun
;                                                                                                                                                           x10
;                                                                                                                                                           y11
;                                                                                                                                                           ->
;                                                                                                                                                           x10 =
;                                                                                                                                                           y11
;                                                                                                                                                           <:
;                                                                                                                                                           Type0
;                                                                                                                                                       ] ==
;                                                                                                                                                       any_result ==>
;                                                                                                                                                       (
;                                                                                                                                                         forall
;                                                                                                                                                           (any_result:
;                                                                                                                                                           Prims.list
;                                                                                                                                                             (
;                                                                                                                                                               FStar.Preorder.relation
;                                                                                                                                                                 Prims.nat
; 
;                                                                                                                                                             )
;                                                                                                                                                           )
;                                                                                                                                                         .
;                                                                                                                                                           [
;                                                                                                                                                             (
;                                                                                                                                                               fun
;                                                                                                                                                                 x12
;                                                                                                                                                                 y13
;                                                                                                                                                                 ->
;                                                                                                                                                                 x12 =
;                                                                                                                                                                 y13
;                                                                                                                                                                 <:
;                                                                                                                                                                 Type0
;                                                                                                                                                             );
;                                                                                                                                                             fun
;                                                                                                                                                               x10
;                                                                                                                                                               y11
;                                                                                                                                                               ->
;                                                                                                                                                               x10 =
;                                                                                                                                                               y11
;                                                                                                                                                               <:
;                                                                                                                                                               Type0
;                                                                                                                                                           ] ==
;                                                                                                                                                           any_result ==>
;                                                                                                                                                           (
;                                                                                                                                                             forall
;                                                                                                                                                               (_:
;                                                                                                                                                               Prims.unit)
;                                                                                                                                                             .
;                                                                                                                                                               (*  - Could not prove post-condition
; *)
;                                                                                                                                                               forall
;                                                                                                                                                                 (any_result:
;                                                                                                                                                                 Prims.nat)
;                                                                                                                                                               .
;                                                                                                                                                                 LeftistHeap.count
;                                                                                                                                                                   (
;                                                                                                                                                                     LeftistHeap.to_list_aux
;                                                                                                                                                                       (
;                                                                                                                                                                         LeftistHeap.merge_heaps_aux
;                                                                                                                                                                           a
;                                                                                                                                                                           b
; 
;                                                                                                                                                                       )
; 
;                                                                                                                                                                   )
;                                                                                                                                                                   y
;                                                                                                                                                                  ==
;                                                                                                                                                                 any_result ==>
;                                                                                                                                                                 (
;                                                                                                                                                                   forall
;                                                                                                                                                                     (any_result:
;                                                                                                                                                                     Prims.nat)
;                                                                                                                                                                   .
;                                                                                                                                                                     LeftistHeap.count_heap
;                                                                                                                                                                       (
;                                                                                                                                                                         LeftistHeap.merge_heaps_aux
;                                                                                                                                                                           a
;                                                                                                                                                                           b
; 
;                                                                                                                                                                       )
;                                                                                                                                                                       y
;                                                                                                                                                                      ==
;                                                                                                                                                                     any_result ==>
;                                                                                                                                                                     (
;                                                                                                                                                                       forall
;                                                                                                                                                                         (x12:
;                                                                                                                                                                         Prims.nat)
;                                                                                                                                                                         (y13:
;                                                                                                                                                                         Prims.nat)
;                                                                                                                                                                       .
;                                                                                                                                                                         (*  - Could not prove post-condition
; *)
;                                                                                                                                                                         Prims.hasEq
;                                                                                                                                                                           Prims.nat
; 
;                                                                                                                                                                     ) /\
;                                                                                                                                                                     (
;                                                                                                                                                                       forall
;                                                                                                                                                                         (any_result:
;                                                                                                                                                                         FStar.Preorder.relation
;                                                                                                                                                                           Prims.nat
;                                                                                                                                                                         )
;                                                                                                                                                                       .
;                                                                                                                                                                         (
;                                                                                                                                                                           fun
;                                                                                                                                                                             x12
;                                                                                                                                                                             y13
;                                                                                                                                                                             ->
;                                                                                                                                                                             x12 =
;                                                                                                                                                                             y13
;                                                                                                                                                                             <:
;                                                                                                                                                                             Type0
;                                                                                                                                                                         ) ==
;                                                                                                                                                                         any_result ==>
;                                                                                                                                                                         (
;                                                                                                                                                                           forall
;                                                                                                                                                                             (any_result:
;                                                                                                                                                                             Prims.int)
;                                                                                                                                                                           .
;                                                                                                                                                                             LeftistHeap.count_heap
;                                                                                                                                                                               a
;                                                                                                                                                                               y
;                                                                                                                                                                              +
;                                                                                                                                                                             LeftistHeap.count_heap
;                                                                                                                                                                               b
;                                                                                                                                                                               y
;                                                                                                                                                                              ==
;                                                                                                                                                                             any_result ==>
;                                                                                                                                                                             LeftistHeap.count_heap
;                                                                                                                                                                               a
;                                                                                                                                                                               y
;                                                                                                                                                                              +
;                                                                                                                                                                             LeftistHeap.count_heap
;                                                                                                                                                                               b
;                                                                                                                                                                               y
;                                                                                                                                                                              >=
;                                                                                                                                                                             0 /\
;                                                                                                                                                                             (
;                                                                                                                                                                               forall
;                                                                                                                                                                                 (return_val:
;                                                                                                                                                                                 Prims.nat)
;                                                                                                                                                                               .
;                                                                                                                                                                                 return_val ==
;                                                                                                                                                                                 LeftistHeap.count_heap
;                                                                                                                                                                                   a
;                                                                                                                                                                                   y
;                                                                                                                                                                                  +
;                                                                                                                                                                                 LeftistHeap.count_heap
;                                                                                                                                                                                   b
;                                                                                                                                                                                   y
;                                                                                                                                                                                  ==>
;                                                                                                                                                                                 LeftistHeap.count_heap
;                                                                                                                                                                                   a
;                                                                                                                                                                                   y
;                                                                                                                                                                                  +
;                                                                                                                                                                                 LeftistHeap.count_heap
;                                                                                                                                                                                   b
;                                                                                                                                                                                   y
;                                                                                                                                                                                  ==
;                                                                                                                                                                                 return_val ==>
;                                                                                                                                                                                 (
;                                                                                                                                                                                   forall
;                                                                                                                                                                                     (x10:
;                                                                                                                                                                                     Prims.nat)
;                                                                                                                                                                                     (y11:
;                                                                                                                                                                                     Prims.nat)
;                                                                                                                                                                                   .
;                                                                                                                                                                                     (*  - Could not prove post-condition
; *)
;                                                                                                                                                                                     Prims.hasEq
;                                                                                                                                                                                       Prims.nat
; 
;                                                                                                                                                                                 ) /\
;                                                                                                                                                                                 (
;                                                                                                                                                                                   forall
;                                                                                                                                                                                     (any_result:
;                                                                                                                                                                                     FStar.Preorder.relation
;                                                                                                                                                                                       Prims.nat
;                                                                                                                                                                                     )
;                                                                                                                                                                                   .
;                                                                                                                                                                                     (
;                                                                                                                                                                                       fun
;                                                                                                                                                                                         x10
;                                                                                                                                                                                         y11
;                                                                                                                                                                                         ->
;                                                                                                                                                                                         x10 =
;                                                                                                                                                                                         y11
;                                                                                                                                                                                         <:
;                                                                                                                                                                                         Type0
;                                                                                                                                                                                     ) ==
;                                                                                                                                                                                     any_result ==>
;                                                                                                                                                                                     (
;                                                                                                                                                                                       forall
;                                                                                                                                                                                         (any_result:
;                                                                                                                                                                                         Prims.list
;                                                                                                                                                                                           (
;                                                                                                                                                                                             FStar.Preorder.relation
;                                                                                                                                                                                               Prims.nat
; 
;                                                                                                                                                                                           )
;                                                                                                                                                                                         )
;                                                                                                                                                                                       .
;                                                                                                                                                                                         [
;                                                                                                                                                                                           fun
;                                                                                                                                                                                             x10
;                                                                                                                                                                                             y11
;                                                                                                                                                                                             ->
;                                                                                                                                                                                             x10 =
;                                                                                                                                                                                             y11
;                                                                                                                                                                                             <:
;                                                                                                                                                                                             Type0
;                                                                                                                                                                                         ] ==
;                                                                                                                                                                                         any_result ==>
;                                                                                                                                                                                         (
;                                                                                                                                                                                           forall
;                                                                                                                                                                                             (_:
;                                                                                                                                                                                             Prims.unit)
;                                                                                                                                                                                           .
;                                                                                                                                                                                             (*  - Could not prove post-condition
; *)
;                                                                                                                                                                                             forall
;                                                                                                                                                                                               (any_result:
;                                                                                                                                                                                               Prims.nat)
;                                                                                                                                                                                             .
;                                                                                                                                                                                               LeftistHeap.count
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   LeftistHeap.to_list_aux
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                         a
;                                                                                                                                                                                                         b
; 
;                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                 )
;                                                                                                                                                                                                 y
;                                                                                                                                                                                                ==
;                                                                                                                                                                                               any_result ==>
;                                                                                                                                                                                               (
;                                                                                                                                                                                                 forall
;                                                                                                                                                                                                   (any_result:
;                                                                                                                                                                                                   Prims.nat)
;                                                                                                                                                                                                 .
;                                                                                                                                                                                                   LeftistHeap.count
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       LeftistHeap.to_list_aux
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                             a
;                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                         )
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                     y
;                                                                                                                                                                                                    ==
;                                                                                                                                                                                                   any_result ==>
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     forall
;                                                                                                                                                                                                       (x10:
;                                                                                                                                                                                                       Prims.nat)
;                                                                                                                                                                                                       (y11:
;                                                                                                                                                                                                       Prims.nat)
;                                                                                                                                                                                                     .
;                                                                                                                                                                                                       (*  - Could not prove post-condition
; *)
;                                                                                                                                                                                                       Prims.hasEq
;                                                                                                                                                                                                         Prims.nat
; 
;                                                                                                                                                                                                   ) /\
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     forall
;                                                                                                                                                                                                       (any_result:
;                                                                                                                                                                                                       FStar.Preorder.relation
;                                                                                                                                                                                                         Prims.nat
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                     .
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         fun
;                                                                                                                                                                                                           x10
;                                                                                                                                                                                                           y11
;                                                                                                                                                                                                           ->
;                                                                                                                                                                                                           x10 =
;                                                                                                                                                                                                           y11
;                                                                                                                                                                                                           <:
;                                                                                                                                                                                                           Type0
;                                                                                                                                                                                                       ) ==
;                                                                                                                                                                                                       any_result ==>
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         forall
;                                                                                                                                                                                                           (any_result:
;                                                                                                                                                                                                           Prims.nat)
;                                                                                                                                                                                                         .
;                                                                                                                                                                                                           LeftistHeap.count_heap
;                                                                                                                                                                                                             (
;                                                                                                                                                                                                               LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                 b
; 
;                                                                                                                                                                                                             )
;                                                                                                                                                                                                             y
;                                                                                                                                                                                                            ==
;                                                                                                                                                                                                           any_result ==>
;                                                                                                                                                                                                           (
;                                                                                                                                                                                                             forall
;                                                                                                                                                                                                               (_:
;                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                             .
;                                                                                                                                                                                                               (*  - Could not prove post-condition
; *)
;                                                                                                                                                                                                               forall
;                                                                                                                                                                                                                 (pure_result:
;                                                                                                                                                                                                                 Prims.unit)
;                                                                                                                                                                                                               .
;                                                                                                                                                                                                                 LeftistHeap.count_heap
;                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                     LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                                       a
;                                                                                                                                                                                                                       b
; 
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                   y
;                                                                                                                                                                                                                  =
;                                                                                                                                                                                                                 LeftistHeap.count
;                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                     LeftistHeap.to_list_aux
;                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                         LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                                           a
;                                                                                                                                                                                                                           b
; 
;                                                                                                                                                                                                                       )
; 
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                   y
;                                                                                                                                                                                                                  ==>
;                                                                                                                                                                                                                 LeftistHeap.count
;                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                     LeftistHeap.to_list_aux
;                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                         LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                                           a
;                                                                                                                                                                                                                           b
; 
;                                                                                                                                                                                                                       )
; 
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                   y
;                                                                                                                                                                                                                  =
;                                                                                                                                                                                                                 LeftistHeap.count_heap
;                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                     LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                                       a
;                                                                                                                                                                                                                       b
; 
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                   y
; 
;                                                                                                                                                                                                           )
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                   )
;                                                                                                                                                                                               )
;                                                                                                                                                                                         ) /\
;                                                                                                                                                                                         (
;                                                                                                                                                                                           forall
;                                                                                                                                                                                             (any_result:
;                                                                                                                                                                                             (
; 
;                                                                                                                                                                                                   _:
;                                                                                                                                                                                                     Prims.unit
;                                                                                                                                                                                                 -> FStar.Calc.calc_pack
;                                                                                                                                                                                                     [
;                                                                                                                                                                                                       fun
;                                                                                                                                                                                                         x10
;                                                                                                                                                                                                         y11
;                                                                                                                                                                                                         ->
;                                                                                                                                                                                                         x10 =
;                                                                                                                                                                                                         y11
;                                                                                                                                                                                                         <:
;                                                                                                                                                                                                         Type0
;                                                                                                                                                                                                     ]
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       LeftistHeap.count
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           LeftistHeap.to_list_aux
;                                                                                                                                                                                                             (
;                                                                                                                                                                                                               LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                                 a
;                                                                                                                                                                                                                 b
; 
;                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                         )
;                                                                                                                                                                                                         y
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       LeftistHeap.count_heap
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                             a
;                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                         )
;                                                                                                                                                                                                         y
; 
;                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                             ))
;                                                                                                                                                                                             (_:
;                                                                                                                                                                                             Prims.unit)
;                                                                                                                                                                                           .
;                                                                                                                                                                                             (*  - Could not prove post-condition
; *)
;                                                                                                                                                                                             forall
;                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                             .
;                                                                                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                     a
;                                                                                                                                                                                                     b
; 
;                                                                                                                                                                                                 )
;                                                                                                                                                                                                 y
;                                                                                                                                                                                                =
;                                                                                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                                                                                 a
;                                                                                                                                                                                                 y
;                                                                                                                                                                                                +
;                                                                                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 y
;                                                                                                                                                                                                ==>
;                                                                                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                                     a
;                                                                                                                                                                                                     b
; 
;                                                                                                                                                                                                 )
;                                                                                                                                                                                                 y
;                                                                                                                                                                                                =
;                                                                                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                                                                                 a
;                                                                                                                                                                                                 y
;                                                                                                                                                                                                +
;                                                                                                                                                                                               LeftistHeap.count_heap
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 y
; 
;                                                                                                                                                                                         )
;                                                                                                                                                                                     )
;                                                                                                                                                                                 )
;                                                                                                                                                                             )
;                                                                                                                                                                         )
;                                                                                                                                                                     )
;                                                                                                                                                                 )
;                                                                                                                                                           ) /\
;                                                                                                                                                           (
;                                                                                                                                                             forall
;                                                                                                                                                               (any_result:
;                                                                                                                                                               (
; 
;                                                                                                                                                                     _:
;                                                                                                                                                                       Prims.unit
;                                                                                                                                                                   -> FStar.Calc.calc_pack
;                                                                                                                                                                       [
;                                                                                                                                                                         (
;                                                                                                                                                                           fun
;                                                                                                                                                                             x12
;                                                                                                                                                                             y13
;                                                                                                                                                                             ->
;                                                                                                                                                                             x12 =
;                                                                                                                                                                             y13
;                                                                                                                                                                             <:
;                                                                                                                                                                             Type0
;                                                                                                                                                                         );
;                                                                                                                                                                         fun
;                                                                                                                                                                           x10
;                                                                                                                                                                           y11
;                                                                                                                                                                           ->
;                                                                                                                                                                           x10 =
;                                                                                                                                                                           y11
;                                                                                                                                                                           <:
;                                                                                                                                                                           Type0
;                                                                                                                                                                       ]
;                                                                                                                                                                       (
;                                                                                                                                                                         LeftistHeap.count
;                                                                                                                                                                           (
;                                                                                                                                                                             LeftistHeap.to_list_aux
;                                                                                                                                                                               (
;                                                                                                                                                                                 LeftistHeap.merge_heaps_aux
;                                                                                                                                                                                   a
;                                                                                                                                                                                   b
; 
;                                                                                                                                                                               )
; 
;                                                                                                                                                                           )
;                                                                                                                                                                           y
; 
;                                                                                                                                                                       )
;                                                                                                                                                                       (
;                                                                                                                                                                         LeftistHeap.count_heap
;                                                                                                                                                                           a
;                                                                                                                                                                           y
;                                                                                                                                                                          +
;                                                                                                                                                                         LeftistHeap.count_heap
;                                                                                                                                                                           b
;                                                                                                                                                                           y
; 
;                                                                                                                                                                       )
; 
;                                                                                                                                                               ))
;                                                                                                                                                               (_:
;                                                                                                                                                               Prims.unit)
;                                                                                                                                                             .
;                                                                                                                                                               (*  - Could not prove post-condition
; *)
;                                                                                                                                                               forall
;                                                                                                                                                                 (pure_result:
;                                                                                                                                                                 Prims.unit)
;                                                                                                                                                               .
;                                                                                                                                                                 LeftistHeap.count_heap
;                                                                                                                                                                   a
;                                                                                                                                                                   y
;                                                                                                                                                                  =
;                                                                                                                                                                 LeftistHeap.count
;                                                                                                                                                                   (
;                                                                                                                                                                     LeftistHeap.to_list_aux
;                                                                                                                                                                       a
; 
;                                                                                                                                                                   )
;                                                                                                                                                                   y
;                                                                                                                                                                  ==>
;                                                                                                                                                                 (
;                                                                                                                                                                   forall
;                                                                                                                                                                     (pure_result:
;                                                                                                                                                                     Prims.unit)
;                                                                                                                                                                   .
;                                                                                                                                                                     LeftistHeap.count_heap
;                                                                                                                                                                       b
;                                                                                                                                                                       y
;                                                                                                                                                                      =
;                                                                                                                                                                     LeftistHeap.count
;                                                                                                                                                                       (
;                                                                                                                                                                         LeftistHeap.to_list_aux
;                                                                                                                                                                           b
; 
;                                                                                                                                                                       )
;                                                                                                                                                                       y
;                                                                                                                                                                      ==>
;                                                                                                                                                                     LeftistHeap.count_heap
;                                                                                                                                                                       a
;                                                                                                                                                                       y
;                                                                                                                                                                      +
;                                                                                                                                                                     LeftistHeap.count_heap
;                                                                                                                                                                       b
;                                                                                                                                                                       y
;                                                                                                                                                                      =
;                                                                                                                                                                     LeftistHeap.count
;                                                                                                                                                                       (
;                                                                                                                                                                         LeftistHeap.to_list_aux
;                                                                                                                                                                           a
; 
;                                                                                                                                                                       )
;                                                                                                                                                                       y
;                                                                                                                                                                      +
;                                                                                                                                                                     LeftistHeap.count
;                                                                                                                                                                       (
;                                                                                                                                                                         LeftistHeap.to_list_aux
;                                                                                                                                                                           b
; 
;                                                                                                                                                                       )
;                                                                                                                                                                       y
; 
;                                                                                                                                                                 )
;                                                                                                                                                           )
;                                                                                                                                                       )
;                                                                                                                                                   )
;                                                                                                                                               )
;                                                                                                                                           )
;                                                                                                                                       )
;                                                                                                                                   )
;                                                                                                                               )
;                                                                                                                           )
;                                                                                                                       )
;                                                                                                                 ) /\
;                                                                                                                 (
;                                                                                                                   forall
;                                                                                                                     (any_result:
;                                                                                                                     (
; 
;                                                                                                                           _:
;                                                                                                                             Prims.unit
;                                                                                                                         -> FStar.Calc.calc_pack
;                                                                                                                             [
;                                                                                                                               (
;                                                                                                                                 fun
;                                                                                                                                   x14
;                                                                                                                                   y15
;                                                                                                                                   ->
;                                                                                                                                   x14 =
;                                                                                                                                   y15
;                                                                                                                                   <:
;                                                                                                                                   Type0
;                                                                                                                               );
;                                                                                                                               (
;                                                                                                                                 fun
;                                                                                                                                   x12
;                                                                                                                                   y13
;                                                                                                                                   ->
;                                                                                                                                   x12 =
;                                                                                                                                   y13
;                                                                                                                                   <:
;                                                                                                                                   Type0
;                                                                                                                               );
;                                                                                                                               fun
;                                                                                                                                 x10
;                                                                                                                                 y11
;                                                                                                                                 ->
;                                                                                                                                 x10 =
;                                                                                                                                 y11
;                                                                                                                                 <:
;                                                                                                                                 Type0
;                                                                                                                             ]
;                                                                                                                             (
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.to_list_aux
;                                                                                                                                     (
;                                                                                                                                       LeftistHeap.merge_heaps_aux
;                                                                                                                                         a
;                                                                                                                                         b
; 
;                                                                                                                                     )
; 
;                                                                                                                                 )
;                                                                                                                                 y
; 
;                                                                                                                             )
;                                                                                                                             (
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.to_list_aux
;                                                                                                                                     a
; 
;                                                                                                                                 )
;                                                                                                                                 y
;                                                                                                                                +
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.to_list_aux
;                                                                                                                                     b
; 
;                                                                                                                                 )
;                                                                                                                                 y
; 
;                                                                                                                             )
; 
;                                                                                                                     ))
;                                                                                                                     (_:
;                                                                                                                     Prims.unit)
;                                                                                                                   .
;                                                                                                                     (*  - Could not prove post-condition
; *)
;                                                                                                                     forall
;                                                                                                                       (any_result:
;                                                                                                                       Prims.list
;                                                                                                                         t
;                                                                                                                       )
;                                                                                                                     .
;                                                                                                                       LeftistHeap.to_list_aux
;                                                                                                                         a
;                                                                                                                        ==
;                                                                                                                       any_result ==>
;                                                                                                                       (
;                                                                                                                         forall
;                                                                                                                           (any_result:
;                                                                                                                           Prims.list
;                                                                                                                             t
;                                                                                                                           )
;                                                                                                                         .
;                                                                                                                           LeftistHeap.to_list_aux
;                                                                                                                             b
;                                                                                                                            ==
;                                                                                                                           any_result ==>
;                                                                                                                           (
;                                                                                                                             forall
;                                                                                                                               (pure_result:
;                                                                                                                               Prims.unit)
;                                                                                                                             .
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.merge
;                                                                                                                                     (
;                                                                                                                                       LeftistHeap.to_list_aux
;                                                                                                                                         a
; 
;                                                                                                                                     )
;                                                                                                                                     (
;                                                                                                                                       LeftistHeap.to_list_aux
;                                                                                                                                         b
; 
;                                                                                                                                     )
; 
;                                                                                                                                 )
;                                                                                                                                 y
;                                                                                                                                =
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.to_list_aux
;                                                                                                                                     a
; 
;                                                                                                                                 )
;                                                                                                                                 y
;                                                                                                                                +
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.to_list_aux
;                                                                                                                                     b
; 
;                                                                                                                                 )
;                                                                                                                                 y
;                                                                                                                                ==>
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.to_list_aux
;                                                                                                                                     a
; 
;                                                                                                                                 )
;                                                                                                                                 y
;                                                                                                                                +
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.to_list_aux
;                                                                                                                                     b
; 
;                                                                                                                                 )
;                                                                                                                                 y
;                                                                                                                                =
;                                                                                                                               LeftistHeap.count
;                                                                                                                                 (
;                                                                                                                                   LeftistHeap.merge
;                                                                                                                                     (
;                                                                                                                                       LeftistHeap.to_list_aux
;                                                                                                                                         a
; 
;                                                                                                                                     )
;                                                                                                                                     (
;                                                                                                                                       LeftistHeap.to_list_aux
;                                                                                                                                         b
; 
;                                                                                                                                     )
; 
;                                                                                                                                 )
;                                                                                                                                 y
; 
;                                                                                                                           )
;                                                                                                                       )
;                                                                                                                 )
;                                                                                                             )
;                                                                                                         )
;                                                                                                     )
;                                                                                                 ))))
;                                                                                 )))) /\
;                                                                   (forall (any_result:
;                                                                       (_: Prims.unit
;                                                                           -> FStar.Calc.calc_pack [
;                                                                                 (fun x16 y17 ->
;                                                                                     x16 = y17
;                                                                                     <:
;                                                                                     Type0);
;                                                                                 (fun x14 y15 ->
;                                                                                     x14 = y15
;                                                                                     <:
;                                                                                     Type0);
;                                                                                 (fun x12 y13 ->
;                                                                                     x12 = y13
;                                                                                     <:
;                                                                                     Type0);
;                                                                                 fun x10 y11 ->
;                                                                                   x10 = y11 <: Type0
;                                                                               ]
;                                                                               (LeftistHeap.count (LeftistHeap.to_list_aux
;                                                                                       (LeftistHeap.merge_heaps_aux
;                                                                                           a
;                                                                                           b))
;                                                                                   y)
;                                                                               (LeftistHeap.count (LeftistHeap.merge
;                                                                                       (LeftistHeap.to_list_aux
;                                                                                           a)
;                                                                                       (LeftistHeap.to_list_aux
;                                                                                           b))
;                                                                                   y))).
;                                                                       Prims.auto_squash (FStar.Range.labeled
;                                                                             (FStar.Sealed.seal FStar.Calc.fsti(86,37-86,50)
;                                                                               )
;                                                                             "Could not prove that this calc-chain is compatible"
;                                                                             (forall (x: Prims.nat)
;                                                                                 (y: Prims.nat).
;                                                                                 (exists (w:
;                                                                                     Prims.nat).
;                                                                                     (exists (w:
;                                                                                         Prims.nat).
;                                                                                         (exists (w:
;                                                                                             Prims.nat)
;                                                                                           .
;                                                                                             (exists (w:
;                                                                                                 Prims.nat)
;                                                                                               .
;                                                                                                 x ==
;                                                                                                 w /\
;                                                                                                 w =
;                                                                                                 w) /\
;                                                                                             w = w) /\
;                                                                                         w = w) /\
;                                                                                     w = y) ==>
;                                                                                 x = y))))))))))))))) /\
;                   (forall (any_result:
;                       (x: t
;                           -> Prims.squash (LeftistHeap.count (LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux
;                                           a
;                                           b))
;                                   x =
;                                 LeftistHeap.count (LeftistHeap.merge (LeftistHeap.to_list_aux a)
;                                       (LeftistHeap.to_list_aux b))
;                                   x)))
;                       (any_result:
;                       Prims.squash (forall (x: t).
;                             LeftistHeap.count (LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux a
;                                       b))
;                               x =
;                             LeftistHeap.count (LeftistHeap.merge (LeftistHeap.to_list_aux a)
;                                   (LeftistHeap.to_list_aux b))
;                               x))
;                       (any_result:
;                       Prims.squash (forall (x: t).
;                             LeftistHeap.count (LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux a
;                                       b))
;                               x =
;                             LeftistHeap.count (LeftistHeap.merge (LeftistHeap.to_list_aux a)
;                                   (LeftistHeap.to_list_aux b))
;                               x)).
;                       LeftistHeap.heap_property a /\ LeftistHeap.heap_property b /\
;                       (forall (pure_result: Prims.unit).
;                           LeftistHeap.heap_property (LeftistHeap.merge_heaps_aux a b) ==>
;                           LeftistHeap.heap_property (LeftistHeap.merge_heaps_aux a b) /\
;                           (forall (pure_result: Prims.unit).
;                               LeftistHeap.sorted (LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux
;                                         a
;                                         b)) ==>
;                               LeftistHeap.heap_property a /\
;                               (forall (pure_result: Prims.unit).
;                                   LeftistHeap.sorted (LeftistHeap.to_list_aux a) ==>
;                                   LeftistHeap.heap_property b /\
;                                   (forall (pure_result: Prims.unit).
;                                       LeftistHeap.sorted (LeftistHeap.to_list_aux b) ==>
;                                       (forall (any_result: Prims.list t).
;                                           LeftistHeap.to_list_aux a == any_result ==>
;                                           (forall (any_result: Prims.list t).
;                                               LeftistHeap.to_list_aux b == any_result ==>
;                                               LeftistHeap.sorted (LeftistHeap.to_list_aux a) /\
;                                               LeftistHeap.sorted (LeftistHeap.to_list_aux b) /\
;                                               (forall (pure_result: Prims.unit).
;                                                   LeftistHeap.sorted (LeftistHeap.merge (LeftistHeap.to_list_aux
;                                                             a)
;                                                         (LeftistHeap.to_list_aux b)) ==>
;                                                   (forall (y: t).
;                                                       LeftistHeap.count (LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux
;                                                                 a
;                                                                 b))
;                                                         y =
;                                                       LeftistHeap.count (LeftistHeap.merge (LeftistHeap.to_list_aux
;                                                                 a)
;                                                             (LeftistHeap.to_list_aux b))
;                                                         y) /\
;                                                   LeftistHeap.sorted (LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux
;                                                             a
;                                                             b)) /\
;                                                   LeftistHeap.sorted (LeftistHeap.merge (LeftistHeap.to_list_aux
;                                                             a)
;                                                         (LeftistHeap.to_list_aux b)) /\
;                                                   (forall (pure_result: Prims.unit).
;                                                       LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux
;                                                             a
;                                                             b) =
;                                                       LeftistHeap.merge (LeftistHeap.to_list_aux a)
;                                                         (LeftistHeap.to_list_aux b) ==>
;                                                       p pure_result)))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let merge_heap_charact`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.heap @x0))
(HasType @x3
(LeftistHeap.heap @x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Tm_refine_febbcee11d82c36b03c51787dcd8e7ed @x0
@x1
@x2
@x3))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(266,11-266,22)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(267,1-294,1)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(267,1-294,1)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=LeftistHeap.fst(265,18-265,33); use=LeftistHeap.fst(267,1-294,1)
(Valid 
;; def=LeftistHeap.fst(265,18-265,33); use=LeftistHeap.fst(267,1-294,1)
(LeftistHeap.heap_property @x0
@x1
@x2)
)


;; def=LeftistHeap.fst(265,37-265,52); use=LeftistHeap.fst(267,1-294,1)
(Valid 
;; def=LeftistHeap.fst(265,37-265,52); use=LeftistHeap.fst(267,1-294,1)
(LeftistHeap.heap_property @x0
@x1
@x3)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x5 Term))
 (! (implies (and (or label_2
(HasType @x5
Prims.unit))

;; def=LeftistHeap.fst(266,11-266,84); use=LeftistHeap.fst(267,1-294,1)
(or label_3

;; def=LeftistHeap.fst(266,11-266,84); use=LeftistHeap.fst(267,1-294,1)
(= (LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(267,1-294,1)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(267,1-294,1)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(267,1-294,1)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(267,1-294,1)
(ApplyTT @x4
@x5)
)
)
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list @x0))

;; def=LeftistHeap.fst(268,6-268,44); use=LeftistHeap.fst(268,6-268,44)
(= (LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x5)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.list @x0))

;; def=LeftistHeap.fst(269,6-269,48); use=LeftistHeap.fst(269,6-269,48)
(= (LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3))
@x6)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(267,1-294,1)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x7 Term))
 (! (implies (HasType @x7
@x0)

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(272,30-272,35)
(or label_4

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(272,30-272,35)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(272,30-272,35)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.6))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))

;; def=FStar.Classical.Sugar.fsti(107,7-107,8); use=LeftistHeap.fst(267,1-294,1)
(= (Tm_abs_975db99e3f8bdd666744d0df4c3f973b @x1
@x2
@x3
@x0)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(267,1-294,1)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x8 Term))
 (! (implies (HasType @x8
@x0)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(272,30-272,35)
(or label_5

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(272,60-284,5)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(272,60-284,5)
(Prims.hasEq Prims.nat)
)
)


;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x9
Prims.nat)
(HasType @x10
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(281,8-281,9)
(or label_6

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(273,11-273,14)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(273,11-273,14)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.9))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Preorder.relation Prims.nat))

;; def=FStar.Calc.fsti(78,3-78,4); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x9)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.nat)

;; def=FStar.Calc.fsti(79,4-79,5); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x8)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.nat)

;; def=FStar.Calc.fsti(79,7-79,8); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count @x0
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3))
@x8)
@x11)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x12
Prims.nat)
(HasType @x13
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(279,8-279,9)
(or label_7

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(281,8-281,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(281,8-281,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.13))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x12)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x13
Prims.nat)
(HasType @x14
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(or label_8

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(279,8-279,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(279,8-279,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.15))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x13)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
Prims.nat)
(HasType @x15
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(or label_9

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.17))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x14)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x15
Prims.nat)
(HasType @x16
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(274,8-274,13)
(or label_10

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.19))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x15)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=Prims.fst(616,20-616,22); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat)))
@x16)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=Prims.fst(616,20-616,22); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat))))
@x17)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=Prims.fst(616,20-616,22); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat)))))
@x18)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=FStar.Calc.fsti(71,19-80,6); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat))))))
@x19)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x20 Term))
 (! (implies (HasType @x20
Prims.unit)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.nat)

;; def=FStar.Calc.fsti(65,4-65,5); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x8)
@x21)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.int)

;; def=LeftistHeap.fst(58,47-280,57); use=LeftistHeap.fst(279,8-280,57)
(= (Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8))
@x22)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(280,8-280,57)
(or label_11

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(280,8-280,57)
(>= (BoxInt_proj_0 (Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(272,60-284,5)
(= @x23
(Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8)))


;; def=FStar.Calc.fsti(65,7-65,8); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8))
@x23)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x24 Term) (@x25 Term))
 (! (implies (and (HasType @x24
Prims.nat)
(HasType @x25
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(279,8-279,9)
(or label_12

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(281,8-281,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(281,8-281,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.29))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
(FStar.Preorder.relation Prims.nat))

;; def=FStar.Calc.fsti(66,3-66,4); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x24)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
Prims.nat)

;; def=FStar.Calc.fsti(67,3-67,4); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count @x0
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3))
@x8)
@x25)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x26 Term) (@x27 Term))
 (! (implies (and (HasType @x26
Prims.nat)
(HasType @x27
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(or label_13

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(279,8-279,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(279,8-279,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.32))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x26)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x27 Term) (@x28 Term))
 (! (implies (and (HasType @x27
Prims.nat)
(HasType @x28
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(or label_14

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.34))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x27)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x28 Term) (@x29 Term))
 (! (implies (and (HasType @x28
Prims.nat)
(HasType @x29
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(274,8-274,13)
(or label_15

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.36))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x28)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=Prims.fst(616,20-616,22); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat)))
@x29)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=Prims.fst(616,20-616,22); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat))))
@x30)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=FStar.Calc.fsti(68,4-71,26); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat)))))
@x31)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x32 Term))
 (! (implies (HasType @x32
Prims.unit)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x33 Term))
 (! (implies (and (HasType @x33
Prims.nat)

;; def=FStar.Calc.fsti(65,4-65,5); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x8)
@x33)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
Prims.int)

;; def=LeftistHeap.fst(58,47-278,39); use=LeftistHeap.fst(277,8-278,39)
(= (Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8))
@x34)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(278,8-278,39)
(or label_16

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(278,8-278,39)
(>= (BoxInt_proj_0 (Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(272,60-284,5)
(= @x35
(Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8)))


;; def=FStar.Calc.fsti(65,7-65,8); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8))
@x35)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x36 Term) (@x37 Term))
 (! (implies (and (HasType @x36
Prims.nat)
(HasType @x37
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(or label_17

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(279,8-279,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(279,8-279,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.45))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
(FStar.Preorder.relation Prims.nat))

;; def=FStar.Calc.fsti(66,3-66,4); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x36)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.int)

;; def=LeftistHeap.fst(58,47-280,57); use=LeftistHeap.fst(277,8-280,57)
(= (Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8))
@x37)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(280,8-280,57)
(or label_18

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(280,8-280,57)
(>= (BoxInt_proj_0 (Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(272,60-284,5)
(= @x38
(Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8)))


;; def=FStar.Calc.fsti(67,3-67,4); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8))
@x38)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x39 Term) (@x40 Term))
 (! (implies (and (HasType @x39
Prims.nat)
(HasType @x40
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(or label_19

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.49))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x39)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x40 Term) (@x41 Term))
 (! (implies (and (HasType @x40
Prims.nat)
(HasType @x41
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(274,8-274,13)
(or label_20

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.51))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x40)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x41 Term))
 (! (implies (and (HasType @x41
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=Prims.fst(616,20-616,22); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat)))
@x41)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=FStar.Calc.fsti(68,4-71,26); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat))))
@x42)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x43 Term))
 (! (implies (HasType @x43
Prims.unit)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
Prims.nat)

;; def=FStar.Calc.fsti(65,4-65,5); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x8)
@x44)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
Prims.nat)

;; def=FStar.Calc.fsti(65,7-65,8); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count_heap @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
@x8)
@x45)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x46 Term) (@x47 Term))
 (! (implies (and (HasType @x46
Prims.nat)
(HasType @x47
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(or label_21

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(277,8-277,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.58))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
(FStar.Preorder.relation Prims.nat))

;; def=FStar.Calc.fsti(66,3-66,4); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x46)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x47 Term))
 (! (implies (and (HasType @x47
Prims.int)

;; def=LeftistHeap.fst(58,47-278,39); use=LeftistHeap.fst(275,8-278,39)
(= (Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8))
@x47)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(278,8-278,39)
(or label_22

;; def=Prims.fst(680,18-680,24); use=LeftistHeap.fst(278,8-278,39)
(>= (BoxInt_proj_0 (Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x48 Term))
 (! (implies (and (HasType @x48
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(272,60-284,5)
(= @x48
(Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8)))


;; def=FStar.Calc.fsti(67,3-67,4); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8))
@x48)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x49 Term) (@x50 Term))
 (! (implies (and (HasType @x49
Prims.nat)
(HasType @x50
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(274,8-274,13)
(or label_23

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.62))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x49 Term))
 (! (implies (and (HasType @x49
(FStar.Preorder.relation Prims.nat))

;; def=Prims.fst(616,11-616,13); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x49)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x50 Term))
 (! (implies (and (HasType @x50
(Prims.list (FStar.Preorder.relation Prims.nat)))

;; def=FStar.Calc.fsti(68,4-71,26); use=LeftistHeap.fst(272,60-284,5)
(= (Prims.Cons (FStar.Preorder.relation Prims.nat)
Tm_abs_1345b5ec037203e43d53ac7613f5cc34
(Prims.Nil (FStar.Preorder.relation Prims.nat)))
@x50)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x51 Term))
 (! (implies (HasType @x51
Prims.unit)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x52 Term))
 (! (implies (and (HasType @x52
Prims.nat)

;; def=FStar.Calc.fsti(65,4-65,5); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x8)
@x52)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x53 Term))
 (! (implies (and (HasType @x53
Prims.nat)

;; def=FStar.Calc.fsti(65,7-65,8); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x8)
@x53)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(272,60-284,5)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x54 Term) (@x55 Term))
 (! (implies (and (HasType @x54
Prims.nat)
(HasType @x55
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(274,8-274,13)
(or label_24

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(275,8-275,9)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.68))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x54 Term))
 (! (implies (and (HasType @x54
(FStar.Preorder.relation Prims.nat))

;; def=FStar.Calc.fsti(66,3-66,4); use=LeftistHeap.fst(272,60-284,5)
(= Tm_abs_1345b5ec037203e43d53ac7613f5cc34
@x54)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x55 Term))
 (! (implies (and (HasType @x55
Prims.nat)

;; def=FStar.Calc.fsti(67,3-67,4); use=LeftistHeap.fst(272,60-284,5)
(= (LeftistHeap.count_heap @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
@x8)
@x55)
)

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x56 Term))
 (! (implies (HasType @x56
Prims.unit)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(275,11-275,26)
(forall ((@x57 Term))
 (! (implies (and (HasType @x57
Prims.unit)

;; def=LeftistHeap.fst(201,17-201,57); use=LeftistHeap.fst(275,11-275,26)
(= (LeftistHeap.count_heap @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x8))
)

;; def=LeftistHeap.fst(275,8-275,9); use=LeftistHeap.fst(275,11-275,50)
(or label_25

;; def=LeftistHeap.fst(275,8-275,9); use=LeftistHeap.fst(275,11-275,50)
(= (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x8)
(LeftistHeap.count_heap @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
@x8))
)
)
 
;;no pats
:qid @query.72))
)
 
;;no pats
:qid @query.71))
)
 
;;no pats
:qid @query.70))
)
 
;;no pats
:qid @query.69))
)
)
 
;;no pats
:qid @query.67))
)
 
;;no pats
:qid @query.66))
)
 
;;no pats
:qid @query.65))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x51 Term))
 (! (implies (HasType @x51
(Tm_arrow_a4ae38e84f2f1d3a40f417c1c551f675 @x8
@x3
@x2
@x1
@x0))

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x52 Term))
 (! (implies (HasType @x52
Prims.unit)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(277,11-277,26)
(forall ((@x53 Term))
 (! (implies (and (HasType @x53
Prims.unit)

;; def=LeftistHeap.fst(256,17-256,89); use=LeftistHeap.fst(277,11-277,26)
(= (LeftistHeap.count_heap @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
@x8)
(Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8)))
)

;; def=LeftistHeap.fst(277,8-277,9); use=LeftistHeap.fst(277,11-277,32)
(or label_26

;; def=LeftistHeap.fst(277,8-277,9); use=LeftistHeap.fst(277,11-277,32)
(= (LeftistHeap.count_heap @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)
@x8)
(Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8)))
)
)
 
;;no pats
:qid @query.75))
)
 
;;no pats
:qid @query.74))
)
 
;;no pats
:qid @query.73))
)
)
 
;;no pats
:qid @query.64))
)
 
;;no pats
:qid @query.63))
)
)
 
;;no pats
:qid @query.61))
)
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.57))
)
 
;;no pats
:qid @query.56))
)
 
;;no pats
:qid @query.55))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x43 Term))
 (! (implies (HasType @x43
(Tm_arrow_77df87eb9ddc1a560d2d103e95451ffd @x8
@x3
@x2
@x1
@x0))

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x44 Term))
 (! (implies (HasType @x44
Prims.unit)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(279,11-279,26)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
Prims.unit)

;; def=LeftistHeap.fst(201,17-201,57); use=LeftistHeap.fst(279,11-279,26)
(= (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8))
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(279,32-279,47)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
Prims.unit)

;; def=LeftistHeap.fst(201,17-201,57); use=LeftistHeap.fst(279,32-279,47)
(= (LeftistHeap.count_heap @x0
@x1
@x3
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8))
)

;; def=LeftistHeap.fst(279,8-279,9); use=LeftistHeap.fst(279,32-279,51)
(or label_27

;; def=LeftistHeap.fst(279,8-279,9); use=LeftistHeap.fst(279,32-279,51)
(= (Prims.op_Addition (LeftistHeap.count_heap @x0
@x1
@x2
@x8)
(LeftistHeap.count_heap @x0
@x1
@x3
@x8))
(Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8)))
)
)
 
;;no pats
:qid @query.79))
)
 
;;no pats
:qid @query.78))
)
 
;;no pats
:qid @query.77))
)
 
;;no pats
:qid @query.76))
)
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.50))
)
)
 
;;no pats
:qid @query.48))
)
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
)
 
;;no pats
:qid @query.44))
)
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x32 Term))
 (! (implies (HasType @x32
(Tm_arrow_f639b7d0823d0a49e7fe68847bf36bb1 @x8
@x3
@x2
@x1
@x0))

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x33 Term))
 (! (implies (HasType @x33
Prims.unit)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(281,11-281,56)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
(Prims.list @x0))

;; def=LeftistHeap.fst(115,53-281,38); use=LeftistHeap.fst(281,11-281,56)
(= (LeftistHeap.to_list_aux @x0
@x1
@x2)
@x34)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(281,11-281,56)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
(Prims.list @x0))

;; def=LeftistHeap.fst(115,55-281,54); use=LeftistHeap.fst(281,11-281,56)
(= (LeftistHeap.to_list_aux @x0
@x1
@x3)
@x35)
)

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(281,11-281,22)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
Prims.unit)

;; def=LeftistHeap.fst(116,17-116,60); use=LeftistHeap.fst(281,11-281,22)
(= (LeftistHeap.count @x0
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3))
@x8)
(Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8)))
)

;; def=LeftistHeap.fst(281,8-281,9); use=LeftistHeap.fst(281,11-281,56)
(or label_28

;; def=LeftistHeap.fst(281,8-281,9); use=LeftistHeap.fst(281,11-281,56)
(= (Prims.op_Addition (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x2)
@x8)
(LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
@x3)
@x8))
(LeftistHeap.count @x0
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3))
@x8))
)
)
 
;;no pats
:qid @query.84))
)
 
;;no pats
:qid @query.83))
)
 
;;no pats
:qid @query.82))
)
 
;;no pats
:qid @query.81))
)
 
;;no pats
:qid @query.80))
)
)
 
;;no pats
:qid @query.40))
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.35))
)
)
 
;;no pats
:qid @query.33))
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(272,60-284,5)
(forall ((@x20 Term))
 (! (implies (HasType @x20
(Tm_arrow_5ad9384c04525bfbea8fa83621c5c436 @x8
@x3
@x2
@x1
@x0))

;; def=FStar.Calc.fsti(47,4-47,55); use=FStar.Calc.fsti(47,4-47,55)
(forall ((@x21 Term) (@x22 Term))
 (! (implies (and (HasType @x21
Prims.nat)
(HasType @x22
Prims.nat)

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x23 Term))
 (! (and (HasType @x23
Prims.nat)

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x24 Term))
 (! (and (HasType @x24
Prims.nat)

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x25 Term))
 (! (and (HasType @x25
Prims.nat)

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x26 Term))
 (! (and (HasType @x26
Prims.nat)

;; def=FStar.Calc.fsti(40,12-40,18); use=FStar.Calc.fsti(40,12-40,18)
(= @x21
@x26)


;; def=LeftistHeap.fst(275,8-275,9); use=LeftistHeap.fst(272,60-284,5)
(= @x26
@x25)
)
 
;;no pats
:qid @query.90))


;; def=LeftistHeap.fst(277,8-277,9); use=LeftistHeap.fst(272,60-284,5)
(= @x25
@x24)
)
 
;;no pats
:qid @query.89))


;; def=LeftistHeap.fst(279,8-279,9); use=LeftistHeap.fst(272,60-284,5)
(= @x24
@x23)
)
 
;;no pats
:qid @query.88))


;; def=LeftistHeap.fst(281,8-281,9); use=LeftistHeap.fst(272,60-284,5)
(= @x23
@x22)
)
 
;;no pats
:qid @query.87))
)

;; def=LeftistHeap.fst(273,11-273,14); use=LeftistHeap.fst(272,60-284,5)
(or label_29

;; def=LeftistHeap.fst(273,11-273,14); use=LeftistHeap.fst(272,60-284,5)
(= @x21
@x22)
)
)
 
;;no pats
:qid @query.86))
)
 
;;no pats
:qid @query.85))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.8))


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Tm_arrow_c936cc18e1e02024c3ed1fcbe24ac919 @x3
@x2
@x1
@x0))

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 @x0
@x1
@x2
@x3))

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x10 Term))
 (! (implies (HasType @x10
(Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9 @x0
@x1
@x2
@x3))

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(286,4-286,23)
(and 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(286,4-286,23)
(or label_30

;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(286,4-286,23)
(Valid 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(286,4-286,23)
(LeftistHeap.heap_property @x0
@x1
@x2)
)
)


;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(286,4-286,23)
(or label_31

;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(286,4-286,23)
(Valid 
;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(286,4-286,23)
(LeftistHeap.heap_property @x0
@x1
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(286,4-286,23)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(286,4-286,23)
(Valid 
;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(286,4-286,23)
(LeftistHeap.heap_property @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(287,4-287,29)
(and 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(287,4-287,29)
(or label_32

;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(287,4-287,29)
(Valid 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(287,4-287,29)
(LeftistHeap.heap_property @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(287,4-287,29)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=LeftistHeap.fst(190,44-190,66); use=LeftistHeap.fst(287,4-287,29)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))))
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(289,4-289,29)
(and 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(289,4-289,29)
(or label_33

;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(289,4-289,29)
(Valid 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(289,4-289,29)
(LeftistHeap.heap_property @x0
@x1
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(289,4-289,29)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=LeftistHeap.fst(190,44-190,66); use=LeftistHeap.fst(289,4-289,29)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)))
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(290,4-290,29)
(and 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(290,4-290,29)
(or label_34

;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(290,4-290,29)
(Valid 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(290,4-290,29)
(LeftistHeap.heap_property @x0
@x1
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(290,4-290,29)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=LeftistHeap.fst(190,44-190,66); use=LeftistHeap.fst(290,4-290,29)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x3)))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(Prims.list @x0))

;; def=LeftistHeap.fst(121,45-291,32); use=LeftistHeap.fst(267,1-294,1)
(= (LeftistHeap.to_list_aux @x0
@x1
@x2)
@x15)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(267,1-294,1)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(Prims.list @x0))

;; def=LeftistHeap.fst(121,47-291,48); use=LeftistHeap.fst(267,1-294,1)
(= (LeftistHeap.to_list_aux @x0
@x1
@x3)
@x16)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(291,4-291,16)
(and 
;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(291,4-291,16)
(or label_35

;; def=LeftistHeap.fst(122,18-122,29); use=LeftistHeap.fst(291,4-291,16)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)))
)


;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(291,4-291,16)
(or label_36

;; def=LeftistHeap.fst(122,33-122,44); use=LeftistHeap.fst(291,4-291,16)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x3)))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(291,4-291,16)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=LeftistHeap.fst(122,55-122,76); use=LeftistHeap.fst(291,4-291,16)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3))))
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(293,4-293,28)
(and 
;; def=LeftistHeap.fst(93,18-93,51); use=LeftistHeap.fst(293,4-293,28)
(forall ((@x18 Term))
 (! (implies (HasType @x18
@x0)

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(293,4-293,28)
(or label_37

;; def=LeftistHeap.fst(93,29-93,50); use=LeftistHeap.fst(293,4-293,28)
(= (LeftistHeap.count @x0
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
@x18)
(LeftistHeap.count @x0
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3))
@x18))
)
)
 
;;no pats
:qid @query.101))


;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(293,4-293,28)
(or label_38

;; def=LeftistHeap.fst(93,55-93,63); use=LeftistHeap.fst(293,4-293,28)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))))
)


;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(293,4-293,28)
(or label_39

;; def=LeftistHeap.fst(93,67-93,75); use=LeftistHeap.fst(293,4-293,28)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3))))
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(293,4-293,28)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=LeftistHeap.fst(94,11-94,16); use=LeftistHeap.fst(293,4-293,28)
(= (LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(293,4-293,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(293,4-293,28)
(ApplyTT @x4
@x18)
)
)
 
;;no pats
:qid @query.102))
)
)
 
;;no pats
:qid @query.100))
)
)
 
;;no pats
:qid @query.99))
)
 
;;no pats
:qid @query.98))
)
 
;;no pats
:qid @query.97))
)
)
 
;;no pats
:qid @query.96))
)
)
 
;;no pats
:qid @query.95))
)
)
 
;;no pats
:qid @query.94))
)
)
 
;;no pats
:qid @query.93))
)
 
;;no pats
:qid @query.92))
)
 
;;no pats
:qid @query.91))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.merge_heap_charact, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.count.fuel_instrumented, @fuel_correspondence_LeftistHeap.count_heap.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @query, assumption_Prims.list__uu___haseq, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_LeftistHeap.ordered, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_00b0b8ed5ba7e15dbe4f04a73b234dd9, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_LeftistHeap.count, typing_LeftistHeap.count_heap, typing_LeftistHeap.to_list_aux, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let merge_heap_charact


; <Start encoding let merge_heap_charact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.merge_heap_charact (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.merge_heap_charact@tok () Term)

; </end encoding let merge_heap_charact>

(push) ;; push{2

; Starting query at LeftistHeap.fst(302,2-304,80)

;;;;;;;;;;;;;;;;uu___ : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap _ (LeftistHeap.heap _)
(declare-fun x_a682a62895731b424b52019f5f3073c0_2 () Term)
;;;;;;;;;;;;;;;;binder_x_a682a62895731b424b52019f5f3073c0_2
;;; Fact-ids: 
(assert (! (HasType x_a682a62895731b424b52019f5f3073c0_2
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_a682a62895731b424b52019f5f3073c0_2))
(declare-fun Tm_refine_c89e1a8b94ca732f2f28282dc261a92a (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(301,25-304,80); use=LeftistHeap.fst(301,25-304,80)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_c89e1a8b94ca732f2f28282dc261a92a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_c89e1a8b94ca732f2f28282dc261a92a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_c89e1a8b94ca732f2f28282dc261a92a))

:named refinement_kinding_Tm_refine_c89e1a8b94ca732f2f28282dc261a92a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(301,25-304,80); use=LeftistHeap.fst(301,25-304,80)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c89e1a8b94ca732f2f28282dc261a92a @x2))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.heap @x2))

;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(302,2-304,80)

;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(302,2-304,80)
(Valid 
;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(302,2-304,80)
(Prims.precedes (LeftistHeap.heap @x2)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x1
x_a682a62895731b424b52019f5f3073c0_2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c89e1a8b94ca732f2f28282dc261a92a @x2)))
:qid refinement_interpretation_Tm_refine_c89e1a8b94ca732f2f28282dc261a92a))

:named refinement_interpretation_Tm_refine_c89e1a8b94ca732f2f28282dc261a92a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c89e1a8b94ca732f2f28282dc261a92a
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(301,25-304,80); use=LeftistHeap.fst(301,25-304,80)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c89e1a8b94ca732f2f28282dc261a92a @x0)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c89e1a8b94ca732f2f28282dc261a92a @x0))))
:qid haseqTm_refine_c89e1a8b94ca732f2f28282dc261a92a))

:named haseqTm_refine_c89e1a8b94ca732f2f28282dc261a92a))
(declare-fun LeftistHeap.leftist_property (Term Term) Term)

;;;;;;;;;;;;;;;;t: heap _ {t << t} -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782
Tm_type)
:named kinding_Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(301,25-304,80); use=LeftistHeap.fst(301,25-304,80)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(301,25-304,80); use=LeftistHeap.fst(301,25-304,80)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782)
(and 
;; def=LeftistHeap.fst(301,25-304,80); use=LeftistHeap.fst(301,25-304,80)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_refine_c89e1a8b94ca732f2f28282dc261a92a @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782))

:named LeftistHeap_interpretation_Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782))
(declare-fun LeftistHeap.leftist_property@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.leftist_property@tok
@x0)
@x1)
(LeftistHeap.leftist_property @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT LeftistHeap.leftist_property@tok
@x0)
@x1))
:qid token_correspondence_LeftistHeap.leftist_property))

:named token_correspondence_LeftistHeap.leftist_property))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.leftist_property@tok
Tm_ghost_arrow_9848d29801e2859dc5d1fd1eb8d5a782))

;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.leftist_property@tok
@x1)
@x2)
(LeftistHeap.leftist_property @x1
@x2))
 

:pattern ((LeftistHeap.leftist_property @x1
@x2))
:qid function_token_typing_LeftistHeap.leftist_property.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.leftist_property@tok))
:qid function_token_typing_LeftistHeap.leftist_property))

:named function_token_typing_LeftistHeap.leftist_property))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_c89e1a8b94ca732f2f28282dc261a92a @x0)))
(HasType (LeftistHeap.leftist_property @x0
@x1)
Prims.bool))
 

:pattern ((LeftistHeap.leftist_property @x0
@x1))
:qid typing_LeftistHeap.leftist_property))

:named typing_LeftistHeap.leftist_property))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.bool).
;   (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: _) (b: LeftistHeap.heap _) (b: LeftistHeap.heap _) (b: Prims.nat).
;         t == LeftistHeap.Node b b b b ==> b << t /\ (LeftistHeap.leftist_property b ==> b << t)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec leftist_property`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(302,2-304,80)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(302,2-304,80)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(302,2-304,80)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(302,2-304,80)
(and (implies 
;; def=LeftistHeap.fst(301,25-301,26); use=LeftistHeap.fst(302,8-302,9)
(and 
;; def=LeftistHeap.fst(301,25-301,26); use=LeftistHeap.fst(302,8-302,9)
(not 
;; def=LeftistHeap.fst(301,25-301,26); use=LeftistHeap.fst(302,8-302,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)


;; def=LeftistHeap.fst(301,25-301,26); use=LeftistHeap.fst(302,8-302,9)
(not 
;; def=LeftistHeap.fst(301,25-301,26); use=LeftistHeap.fst(302,8-302,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(302,2-304,80)
(not 
;; def=LeftistHeap.fst(301,25-301,26); use=LeftistHeap.fst(302,8-302,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(302,2-304,80)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(302,2-304,80)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(302,2-304,80)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(302,2-304,80)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=LeftistHeap.fst(301,25-304,16); use=LeftistHeap.fst(302,8-304,16)
(= x_a682a62895731b424b52019f5f3073c0_2
(LeftistHeap.Node x_fe28d8bcde588226b4e538b35321de05_1
@x1
@x2
@x3
@x4))
)

;; def=LeftistHeap.fst(304,11-304,38); use=LeftistHeap.fst(304,20-304,60)
(and 
;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(304,37-304,38)
(or label_2

;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(304,37-304,38)
(Valid 
;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(304,37-304,38)
(Prims.precedes (LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x2
x_a682a62895731b424b52019f5f3073c0_2)
)
)

(implies 
;; def=LeftistHeap.fst(304,20-304,38); use=LeftistHeap.fst(304,20-304,38)
(BoxBool_proj_0 (LeftistHeap.leftist_property x_fe28d8bcde588226b4e538b35321de05_1
@x2))


;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(304,59-304,60)
(or label_3

;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(304,59-304,60)
(Valid 
;; def=LeftistHeap.fst(302,2-304,80); use=LeftistHeap.fst(304,59-304,60)
(Prims.precedes (LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_a682a62895731b424b52019f5f3073c0_2)
)
)
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.leftist_property, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_a682a62895731b424b52019f5f3073c0_2, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, fuel_guarded_inversion_LeftistHeap.heap, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_right, subterm_ordering_LeftistHeap.Node

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec leftist_property


; <Start encoding let rec leftist_property>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.leftist_property.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.leftist_property.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.leftist_property (Term Term) Term)
(declare-fun LeftistHeap.leftist_property@tok () Term)
;;;;;;;;;;;;;;;;t: heap _ -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_af5c778b8a7da987f1cd3b8a6e0957c2 () Term)

; </end encoding let rec leftist_property>

(push) ;; push{2

; Starting query at LeftistHeap.fst(308,2-310,38)

;;;;;;;;;;;;;;;;uu___ : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap _ (LeftistHeap.heap _)
(declare-fun x_a682a62895731b424b52019f5f3073c0_2 () Term)
;;;;;;;;;;;;;;;;binder_x_a682a62895731b424b52019f5f3073c0_2
;;; Fact-ids: 
(assert (! (HasType x_a682a62895731b424b52019f5f3073c0_2
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_a682a62895731b424b52019f5f3073c0_2))
(declare-fun Tm_refine_8f73711b505ad411d30a7317c6a67473 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(307,21-310,38); use=LeftistHeap.fst(307,21-310,38)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_8f73711b505ad411d30a7317c6a67473 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_8f73711b505ad411d30a7317c6a67473 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_8f73711b505ad411d30a7317c6a67473))

:named refinement_kinding_Tm_refine_8f73711b505ad411d30a7317c6a67473))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(307,21-310,38); use=LeftistHeap.fst(307,21-310,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8f73711b505ad411d30a7317c6a67473 @x2))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.heap @x2))

;; def=LeftistHeap.fst(308,2-310,38); use=LeftistHeap.fst(308,2-310,38)

;; def=LeftistHeap.fst(308,2-310,38); use=LeftistHeap.fst(308,2-310,38)
(Valid 
;; def=LeftistHeap.fst(308,2-310,38); use=LeftistHeap.fst(308,2-310,38)
(Prims.precedes (LeftistHeap.heap @x2)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x1
x_a682a62895731b424b52019f5f3073c0_2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8f73711b505ad411d30a7317c6a67473 @x2)))
:qid refinement_interpretation_Tm_refine_8f73711b505ad411d30a7317c6a67473))

:named refinement_interpretation_Tm_refine_8f73711b505ad411d30a7317c6a67473))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8f73711b505ad411d30a7317c6a67473
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(307,21-310,38); use=LeftistHeap.fst(307,21-310,38)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8f73711b505ad411d30a7317c6a67473 @x0)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8f73711b505ad411d30a7317c6a67473 @x0))))
:qid haseqTm_refine_8f73711b505ad411d30a7317c6a67473))

:named haseqTm_refine_8f73711b505ad411d30a7317c6a67473))
(declare-fun LeftistHeap.compute_rank (Term Term) Term)

;;;;;;;;;;;;;;;;t: heap _ {t << t} -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70
Tm_type)
:named kinding_Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(307,21-310,38); use=LeftistHeap.fst(307,21-310,38)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(307,21-310,38); use=LeftistHeap.fst(307,21-310,38)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70)
(and 
;; def=LeftistHeap.fst(307,21-310,38); use=LeftistHeap.fst(307,21-310,38)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_refine_8f73711b505ad411d30a7317c6a67473 @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.int))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70))

:named LeftistHeap_interpretation_Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70))
(declare-fun LeftistHeap.compute_rank@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.compute_rank@tok
@x0)
@x1)
(LeftistHeap.compute_rank @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT LeftistHeap.compute_rank@tok
@x0)
@x1))
:qid token_correspondence_LeftistHeap.compute_rank))

:named token_correspondence_LeftistHeap.compute_rank))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.compute_rank@tok
Tm_ghost_arrow_0c0c7d14e0badffb1e2813ca0dc3bf70))

;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.compute_rank@tok
@x1)
@x2)
(LeftistHeap.compute_rank @x1
@x2))
 

:pattern ((LeftistHeap.compute_rank @x1
@x2))
:qid function_token_typing_LeftistHeap.compute_rank.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.compute_rank@tok))
:qid function_token_typing_LeftistHeap.compute_rank))

:named function_token_typing_LeftistHeap.compute_rank))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_8f73711b505ad411d30a7317c6a67473 @x0)))
(HasType (LeftistHeap.compute_rank @x0
@x1)
Prims.int))
 

:pattern ((LeftistHeap.compute_rank @x0
@x1))
:qid typing_LeftistHeap.compute_rank))

:named typing_LeftistHeap.compute_rank))
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.int).
;   (forall (x: Prims.int). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: _) (b: LeftistHeap.heap _) (b: LeftistHeap.heap _) (b: Prims.nat).
;         t == LeftistHeap.Node b b b b ==> b << t))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec compute_rank`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.int))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(308,2-310,38)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(308,2-310,38)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(308,2-310,38)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(308,2-310,38)
(and (implies 
;; def=LeftistHeap.fst(307,21-307,22); use=LeftistHeap.fst(308,8-308,9)
(and 
;; def=LeftistHeap.fst(307,21-307,22); use=LeftistHeap.fst(308,8-308,9)
(not 
;; def=LeftistHeap.fst(307,21-307,22); use=LeftistHeap.fst(308,8-308,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)


;; def=LeftistHeap.fst(307,21-307,22); use=LeftistHeap.fst(308,8-308,9)
(not 
;; def=LeftistHeap.fst(307,21-307,22); use=LeftistHeap.fst(308,8-308,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(308,2-310,38)
(not 
;; def=LeftistHeap.fst(307,21-307,22); use=LeftistHeap.fst(308,8-308,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(308,2-310,38)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(308,2-310,38)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(308,2-310,38)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(308,2-310,38)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=LeftistHeap.fst(307,21-310,16); use=LeftistHeap.fst(308,8-310,16)
(= x_a682a62895731b424b52019f5f3073c0_2
(LeftistHeap.Node x_fe28d8bcde588226b4e538b35321de05_1
@x1
@x2
@x3
@x4))
)

;; def=LeftistHeap.fst(308,2-310,38); use=LeftistHeap.fst(310,37-310,38)
(or label_2

;; def=LeftistHeap.fst(308,2-310,38); use=LeftistHeap.fst(310,37-310,38)
(Valid 
;; def=LeftistHeap.fst(308,2-310,38); use=LeftistHeap.fst(310,37-310,38)
(Prims.precedes (LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_a682a62895731b424b52019f5f3073c0_2)
)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.compute_rank, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_a682a62895731b424b52019f5f3073c0_2, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, fuel_guarded_inversion_LeftistHeap.heap, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Node_right, subterm_ordering_LeftistHeap.Node

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec compute_rank


; <Start encoding let rec compute_rank>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.compute_rank.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.compute_rank.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.compute_rank (Term Term) Term)
(declare-fun LeftistHeap.compute_rank@tok () Term)
;;;;;;;;;;;;;;;;t: heap _ -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_97dffa523d5a32a14bce3640f399efe0 () Term)

; </end encoding let rec compute_rank>

(push) ;; push{2

; Starting query at LeftistHeap.fst(314,2-316,78)

;;;;;;;;;;;;;;;;uu___ : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;t : LeftistHeap.heap _ (LeftistHeap.heap _)
(declare-fun x_a682a62895731b424b52019f5f3073c0_2 () Term)
;;;;;;;;;;;;;;;;binder_x_a682a62895731b424b52019f5f3073c0_2
;;; Fact-ids: 
(assert (! (HasType x_a682a62895731b424b52019f5f3073c0_2
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_a682a62895731b424b52019f5f3073c0_2))
(declare-fun Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(313,22-316,78); use=LeftistHeap.fst(313,22-316,78)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127))

:named refinement_kinding_Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(313,22-316,78); use=LeftistHeap.fst(313,22-316,78)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 @x2))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.heap @x2))

;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(314,2-316,78)

;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(314,2-316,78)
(Valid 
;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(314,2-316,78)
(Prims.precedes (LeftistHeap.heap @x2)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x1
x_a682a62895731b424b52019f5f3073c0_2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 @x2)))
:qid refinement_interpretation_Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127))

:named refinement_interpretation_Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(313,22-316,78); use=LeftistHeap.fst(313,22-316,78)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 @x0)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 @x0))))
:qid haseqTm_refine_8cb11713fcaa7907bc4cdb8e852e7127))

:named haseqTm_refine_8cb11713fcaa7907bc4cdb8e852e7127))
(declare-fun LeftistHeap.correct_ranks (Term Term) Term)

;;;;;;;;;;;;;;;;t: heap _ {t << t} -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062
;;; Fact-ids: 
(assert (! (HasType Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062
Tm_type)
:named kinding_Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(313,22-316,78); use=LeftistHeap.fst(313,22-316,78)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062))
:qid LeftistHeap_pre_typing_Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062))

:named LeftistHeap_pre_typing_Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(313,22-316,78); use=LeftistHeap.fst(313,22-316,78)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062)
(and 
;; def=LeftistHeap.fst(313,22-316,78); use=LeftistHeap.fst(313,22-316,78)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062))
:qid LeftistHeap_interpretation_Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062))

:named LeftistHeap_interpretation_Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062))
(declare-fun LeftistHeap.correct_ranks@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.correct_ranks@tok
@x0)
@x1)
(LeftistHeap.correct_ranks @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT LeftistHeap.correct_ranks@tok
@x0)
@x1))
:qid token_correspondence_LeftistHeap.correct_ranks))

:named token_correspondence_LeftistHeap.correct_ranks))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType LeftistHeap.correct_ranks@tok
Tm_ghost_arrow_69dd10ca623db80a6b6fa39c5e1a4062))

;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT LeftistHeap.correct_ranks@tok
@x1)
@x2)
(LeftistHeap.correct_ranks @x1
@x2))
 

:pattern ((LeftistHeap.correct_ranks @x1
@x2))
:qid function_token_typing_LeftistHeap.correct_ranks.1))
)
 

:pattern ((ApplyTT @x0
LeftistHeap.correct_ranks@tok))
:qid function_token_typing_LeftistHeap.correct_ranks))

:named function_token_typing_LeftistHeap.correct_ranks))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_8cb11713fcaa7907bc4cdb8e852e7127 @x0)))
(HasType (LeftistHeap.correct_ranks @x0
@x1)
Prims.bool))
 

:pattern ((LeftistHeap.correct_ranks @x0
@x1))
:qid typing_LeftistHeap.correct_ranks))

:named typing_LeftistHeap.correct_ranks))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.bool).
;   (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Node? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: _) (b: LeftistHeap.heap _) (b: LeftistHeap.heap _) (b: Prims.nat).
;         t == LeftistHeap.Node b b b b ==> b << t /\ (LeftistHeap.correct_ranks b ==> b << t)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec correct_ranks`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=LeftistHeap.fst(314,2-316,78)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(314,2-316,78)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(314,2-316,78)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(314,2-316,78)
(and (implies 
;; def=LeftistHeap.fst(313,22-313,23); use=LeftistHeap.fst(314,8-314,9)
(and 
;; def=LeftistHeap.fst(313,22-313,23); use=LeftistHeap.fst(314,8-314,9)
(not 
;; def=LeftistHeap.fst(313,22-313,23); use=LeftistHeap.fst(314,8-314,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)


;; def=LeftistHeap.fst(313,22-313,23); use=LeftistHeap.fst(314,8-314,9)
(not 
;; def=LeftistHeap.fst(313,22-313,23); use=LeftistHeap.fst(314,8-314,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(314,2-316,78)
(not 
;; def=LeftistHeap.fst(313,22-313,23); use=LeftistHeap.fst(314,8-314,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf x_fe28d8bcde588226b4e538b35321de05_1
x_a682a62895731b424b52019f5f3073c0_2))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(314,2-316,78)
(forall ((@x1 Term))
 (! (implies (HasType @x1
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(314,2-316,78)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(314,2-316,78)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(314,2-316,78)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=LeftistHeap.fst(313,22-316,17); use=LeftistHeap.fst(314,8-316,17)
(= x_a682a62895731b424b52019f5f3073c0_2
(LeftistHeap.Node x_fe28d8bcde588226b4e538b35321de05_1
@x1
@x2
@x3
@x4))
)

;; def=LeftistHeap.fst(316,11-316,36); use=LeftistHeap.fst(316,21-316,55)
(and 
;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(316,35-316,36)
(or label_2

;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(316,35-316,36)
(Valid 
;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(316,35-316,36)
(Prims.precedes (LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x2
x_a682a62895731b424b52019f5f3073c0_2)
)
)

(implies 
;; def=LeftistHeap.fst(316,21-316,36); use=LeftistHeap.fst(316,21-316,36)
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_fe28d8bcde588226b4e538b35321de05_1
@x2))


;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(316,54-316,55)
(or label_3

;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(316,54-316,55)
(Valid 
;; def=LeftistHeap.fst(314,2-316,78); use=LeftistHeap.fst(316,54-316,55)
(Prims.precedes (LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
(LeftistHeap.heap x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_a682a62895731b424b52019f5f3073c0_2)
)
)
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.correct_ranks, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_a682a62895731b424b52019f5f3073c0_2, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, fuel_guarded_inversion_LeftistHeap.heap, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_right, subterm_ordering_LeftistHeap.Node

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec correct_ranks


; <Start encoding let rec correct_ranks>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun LeftistHeap.correct_ranks.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun LeftistHeap.correct_ranks.fuel_instrumented_token () Term)
(declare-fun LeftistHeap.correct_ranks (Term Term) Term)
(declare-fun LeftistHeap.correct_ranks@tok () Term)


; </end encoding let rec correct_ranks>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.correct_ranks; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.correct_ranks @x0
@x1)
Prims.bool))
 

:pattern ((LeftistHeap.correct_ranks @x0
@x1))
:qid typing_LeftistHeap.correct_ranks))

:named typing_LeftistHeap.correct_ranks))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.compute_rank; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.compute_rank @x0
@x1)
Prims.int))
 

:pattern ((LeftistHeap.compute_rank @x0
@x1))
:qid typing_LeftistHeap.compute_rank))

:named typing_LeftistHeap.compute_rank))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.correct_ranks; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(LeftistHeap.heap @x1)))
(HasType (LeftistHeap.correct_ranks.fuel_instrumented @u0
@x1
@x2)
Prims.bool))
 

:pattern ((LeftistHeap.correct_ranks.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_LeftistHeap.correct_ranks.fuel_instrumented))

:named token_correspondence_LeftistHeap.correct_ranks.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.compute_rank; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(LeftistHeap.heap @x1)))
(HasType (LeftistHeap.compute_rank.fuel_instrumented @u0
@x1
@x2)
Prims.int))
 

:pattern ((LeftistHeap.compute_rank.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_LeftistHeap.compute_rank.fuel_instrumented))

:named token_correspondence_LeftistHeap.compute_rank.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.correct_ranks
;;; Fact-ids: Name LeftistHeap.correct_ranks; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(LeftistHeap.heap @x1)))
(= (LeftistHeap.correct_ranks.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-LeftistHeap.Leaf @lb3)
(BoxBool true)
(ite (is-LeftistHeap.Node @lb3)
(Prims.op_AmpAmp (Prims.op_AmpAmp (LeftistHeap.correct_ranks.fuel_instrumented @u0
@x1
(LeftistHeap.Node_left @lb3))
(LeftistHeap.correct_ranks.fuel_instrumented @u0
@x1
(LeftistHeap.Node_right @lb3)))
(Prims.op_Equality Prims.int
(LeftistHeap.Node_rank @lb3)
(LeftistHeap.compute_rank @x1
@x2)))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.correct_ranks.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_LeftistHeap.correct_ranks.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.correct_ranks.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.compute_rank
;;; Fact-ids: Name LeftistHeap.compute_rank; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(LeftistHeap.heap @x1)))
(= (LeftistHeap.compute_rank.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-LeftistHeap.Leaf @lb3)
(BoxInt 0)
(ite (is-LeftistHeap.Node @lb3)
(Prims.op_Addition (BoxInt 1)
(LeftistHeap.compute_rank.fuel_instrumented @u0
@x1
(LeftistHeap.Node_right @lb3)))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.compute_rank.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_LeftistHeap.compute_rank.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.compute_rank.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.correct_ranks; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.correct_ranks.fuel_instrumented (SFuel @u0)
@x1
@x2)
(LeftistHeap.correct_ranks.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((LeftistHeap.correct_ranks.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_LeftistHeap.correct_ranks.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.correct_ranks.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.compute_rank; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.compute_rank.fuel_instrumented (SFuel @u0)
@x1
@x2)
(LeftistHeap.compute_rank.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((LeftistHeap.compute_rank.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_LeftistHeap.compute_rank.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.compute_rank.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.correct_ranks; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(313,8-313,21); use=LeftistHeap.fst(313,8-313,21)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.correct_ranks @x0
@x1)
(LeftistHeap.correct_ranks.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((LeftistHeap.correct_ranks @x0
@x1))
:qid @fuel_correspondence_LeftistHeap.correct_ranks.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.correct_ranks.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.compute_rank; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(307,8-307,20); use=LeftistHeap.fst(307,8-307,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.compute_rank @x0
@x1)
(LeftistHeap.compute_rank.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((LeftistHeap.compute_rank @x0
@x1))
:qid @fuel_correspondence_LeftistHeap.compute_rank.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.compute_rank.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(323,2-327,11)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___21 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t1 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;t2 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_3 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_3
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.correct_ranks_merge (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.correct_ranks_merge@tok () Term)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.correct_ranks t1 && LeftistHeap.correct_ranks t2 /\
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.correct_ranks (LeftistHeap.merge_heaps_aux t1 t2) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (forall (b: a)
;           (b: LeftistHeap.heap a)
;           (b: LeftistHeap.heap a)
;           (b: Prims.nat)
;           (b: a)
;           (b: LeftistHeap.heap a)
;           (b: LeftistHeap.heap a)
;           (b: Prims.nat).
;           (t1, t2) == (LeftistHeap.Node b b b b, LeftistHeap.Node b b b b) ==>
;           (forall (k: Prims.pure_post Prims.unit).
;               (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;               (LeftistHeap.gt b b == true ==>
;                 (LeftistHeap.size t2 + LeftistHeap.size t1 <<
;                   LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                   LeftistHeap.size t2 + LeftistHeap.size t1 ===
;                   LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                   LeftistHeap.measure t2 t1 << LeftistHeap.measure t1 t2) /\
;                 (forall (any_result: LeftistHeap.heap a).
;                     t1 == any_result ==>
;                     LeftistHeap.correct_ranks t2 && LeftistHeap.correct_ranks t1 /\
;                     (forall (pure_result: Prims.unit).
;                         LeftistHeap.correct_ranks (LeftistHeap.merge_heaps_aux t2 t1) ==>
;                         k pure_result))) /\
;               (~(LeftistHeap.gt b b = true) ==>
;                 (forall (b: Prims.bool).
;                     LeftistHeap.gt b b == b ==>
;                     (LeftistHeap.size b + LeftistHeap.size t2 <<
;                       LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                       LeftistHeap.size b + LeftistHeap.size t2 ===
;                       LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                       LeftistHeap.measure b t2 << LeftistHeap.measure t1 t2) /\
;                     (forall (any_result: LeftistHeap.heap a).
;                         t2 == any_result ==>
;                         LeftistHeap.correct_ranks b && LeftistHeap.correct_ranks t2 /\
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.correct_ranks (LeftistHeap.merge_heaps_aux b t2) ==>
;                             k pure_result)))))) /\
;       (~(Node? (t1, t2)._1 && Node? (t1, t2)._2) ==>
;         (forall (b: LeftistHeap.heap a & LeftistHeap.heap a).
;             (t1, t2) == b ==> (forall (any_result: Prims.unit). k any_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec correct_ranks_merge`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(321,11-321,48); use=LeftistHeap.fst(323,2-327,11)
(or label_2

;; def=LeftistHeap.fst(321,11-321,48); use=LeftistHeap.fst(323,2-327,11)
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(323,2-327,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(323,2-327,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(323,2-327,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(323,2-327,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(323,2-327,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(323,2-327,11)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(323,2-327,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(323,2-327,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(323,2-327,11)
(and 
;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.nat)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x6 Term))
 (! (implies (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=LeftistHeap.fst(323,8-324,32); use=LeftistHeap.fst(323,8-324,32)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3
@x4
@x5)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7
@x8
@x9)))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x11 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(323,2-327,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(323,2-327,11)
(ApplyTT @x1
@x11)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(323,2-327,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(323,2-327,11)
(ApplyTT @x10
@x11)
)
)
 :weight 0


:pattern ((ApplyTT @x10
@x11))
:qid @query.13))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(323,2-327,11)
(and (implies 
;; def=LeftistHeap.fst(325,5-325,13); use=LeftistHeap.fst(325,5-325,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(323,2-327,11)
(and 
;; def=LeftistHeap.fst(322,15-327,11); use=LeftistHeap.fst(325,42-325,44)
(or label_3

;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(325,42-325,44)
(Valid 
;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(325,42-325,44)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(322,15-327,11); use=LeftistHeap.fst(325,42-325,44)
(and 
;; def=LeftistHeap.fst(322,15-322,32); use=LeftistHeap.fst(325,42-325,44)
(Valid 
;; def=LeftistHeap.fst(322,15-322,32); use=LeftistHeap.fst(325,42-325,44)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(325,42-325,44)
(Valid 
;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(325,42-325,44)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(319,62-319,67); use=LeftistHeap.fst(323,2-327,11)
(= x_2611d061955cd24360b6c9637f442521_2
@x11)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(325,19-325,38)
(and (or label_4
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
(or label_5
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(325,19-325,38)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=LeftistHeap.fst(321,11-321,48); use=LeftistHeap.fst(325,19-325,38)
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(325,19-325,38)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(325,19-325,38)
(ApplyTT @x10
@x12)
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(323,2-327,11)
(not 
;; def=LeftistHeap.fst(325,5-325,13); use=LeftistHeap.fst(325,5-325,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.bool)

;; def=LeftistHeap.fst(325,5-326,31); use=LeftistHeap.fst(325,5-326,31)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
@x11)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(323,2-327,11)
(and 
;; def=LeftistHeap.fst(322,15-327,11); use=LeftistHeap.fst(326,29-326,31)
(or label_6

;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(326,29-326,31)
(Valid 
;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(326,29-326,31)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(322,15-327,11); use=LeftistHeap.fst(326,29-326,31)
(and 
;; def=LeftistHeap.fst(322,15-322,32); use=LeftistHeap.fst(326,29-326,31)
(Valid 
;; def=LeftistHeap.fst(322,15-322,32); use=LeftistHeap.fst(326,29-326,31)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(326,29-326,31)
(Valid 
;; def=LeftistHeap.fst(323,2-327,11); use=LeftistHeap.fst(326,29-326,31)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(319,65-319,67); use=LeftistHeap.fst(323,2-327,11)
(= x_2611d061955cd24360b6c9637f442521_3
@x12)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(326,7-326,26)
(and (or label_7
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)))
(or label_8
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(326,7-326,26)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=LeftistHeap.fst(321,11-321,48); use=LeftistHeap.fst(326,7-326,26)
(BoxBool_proj_0 (LeftistHeap.correct_ranks x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_2611d061955cd24360b6c9637f442521_3)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(326,7-326,26)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(326,7-326,26)
(ApplyTT @x10
@x13)
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(323,2-327,11)
(not 
;; def=LeftistHeap.fst(324,4-324,32); use=LeftistHeap.fst(324,4-324,32)
(and (BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)))))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=LeftistHeap.fst(323,8-327,5); use=LeftistHeap.fst(323,8-327,5)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
@x2)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(323,2-327,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(323,2-327,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(323,2-327,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.correct_ranks_merge, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.compute_rank.fuel_instrumented, @fuel_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge_heaps_aux.fuel_instrumented, @fuel_correspondence_LeftistHeap.size.fuel_instrumented, @fuel_irrelevance_LeftistHeap.compute_rank.fuel_instrumented, @fuel_irrelevance_LeftistHeap.correct_ranks.fuel_instrumented, @fuel_irrelevance_LeftistHeap.merge_heaps_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.size.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, Prims_pretyping_ae567c2fb75be05905677af440075565, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_2611d061955cd24360b6c9637f442521_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, bool_typing, constructor_distinct_LeftistHeap.Node, data_elim_LeftistHeap.Mkordered, data_elim_LeftistHeap.Node, disc_equation_LeftistHeap.Node, equation_LeftistHeap.gt, equation_LeftistHeap.leq, equation_LeftistHeap.measure, equation_LeftistHeap.rank, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.op_Equals_Equals_Equals, equation_with_fuel_LeftistHeap.compute_rank.fuel_instrumented, equation_with_fuel_LeftistHeap.correct_ranks.fuel_instrumented, equation_with_fuel_LeftistHeap.merge_heaps_aux.fuel_instrumented, equation_with_fuel_LeftistHeap.size.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_Equality, primitive_Prims.op_disEquality, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.size.fuel_instrumented, typing_LeftistHeap.compute_rank, typing_LeftistHeap.correct_ranks, typing_LeftistHeap.measure, typing_LeftistHeap.merge_heaps_aux, typing_LeftistHeap.size, unit_inversion, unit_typing, well-founded-ordering-on-nat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec correct_ranks_merge


; <Start encoding let rec correct_ranks_merge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.correct_ranks_merge (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.correct_ranks_merge@tok () Term)

; </end encoding let rec correct_ranks_merge>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.leftist_property; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(LeftistHeap.heap @x0)))
(HasType (LeftistHeap.leftist_property @x0
@x1)
Prims.bool))
 

:pattern ((LeftistHeap.leftist_property @x0
@x1))
:qid typing_LeftistHeap.leftist_property))

:named typing_LeftistHeap.leftist_property))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name LeftistHeap.leftist_property; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(LeftistHeap.heap @x1)))
(HasType (LeftistHeap.leftist_property.fuel_instrumented @u0
@x1
@x2)
Prims.bool))
 

:pattern ((LeftistHeap.leftist_property.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_LeftistHeap.leftist_property.fuel_instrumented))

:named token_correspondence_LeftistHeap.leftist_property.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: LeftistHeap.leftist_property
;;; Fact-ids: Name LeftistHeap.leftist_property; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(LeftistHeap.heap @x1)))
(= (LeftistHeap.leftist_property.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-LeftistHeap.Leaf @lb3)
(BoxBool true)
(ite (is-LeftistHeap.Node @lb3)
(Prims.op_AmpAmp (Prims.op_AmpAmp (LeftistHeap.leftist_property.fuel_instrumented @u0
@x1
(LeftistHeap.Node_left @lb3))
(LeftistHeap.leftist_property.fuel_instrumented @u0
@x1
(LeftistHeap.Node_right @lb3)))
(Prims.op_GreaterThanOrEqual (LeftistHeap.rank @x1
(LeftistHeap.Node_left @lb3))
(LeftistHeap.rank @x1
(LeftistHeap.Node_right @lb3))))
Tm_unit)))))
 :weight 0


:pattern ((LeftistHeap.leftist_property.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_LeftistHeap.leftist_property.fuel_instrumented))

:named equation_with_fuel_LeftistHeap.leftist_property.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name LeftistHeap.leftist_property; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.leftist_property.fuel_instrumented (SFuel @u0)
@x1
@x2)
(LeftistHeap.leftist_property.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((LeftistHeap.leftist_property.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_LeftistHeap.leftist_property.fuel_instrumented))

:named @fuel_irrelevance_LeftistHeap.leftist_property.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name LeftistHeap.leftist_property; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(301,8-301,24); use=LeftistHeap.fst(301,8-301,24)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.leftist_property @x0
@x1)
(LeftistHeap.leftist_property.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((LeftistHeap.leftist_property @x0
@x1))
:qid @fuel_correspondence_LeftistHeap.leftist_property.fuel_instrumented))

:named @fuel_correspondence_LeftistHeap.leftist_property.fuel_instrumented))
(push) ;; push{2

; Starting query at LeftistHeap.fst(333,2-337,11)

;;;;;;;;;;;;;;;;a : Prims.eqtype (Prims.eqtype)
(declare-fun x_9cd1733a5204f989dbb2f01d5984df93_0 () Term)
;;;;;;;;;;;;;;;;binder_x_9cd1733a5204f989dbb2f01d5984df93_0
;;; Fact-ids: 
(assert (! (HasType x_9cd1733a5204f989dbb2f01d5984df93_0
Prims.eqtype)
:named binder_x_9cd1733a5204f989dbb2f01d5984df93_0))
;;;;;;;;;;;;;;;;uu___22 : LeftistHeap.ordered a (LeftistHeap.ordered a)
(declare-fun x_f0062e810d23900aea914a963397c69a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f0062e810d23900aea914a963397c69a_1
;;; Fact-ids: 
(assert (! (HasType x_f0062e810d23900aea914a963397c69a_1
(LeftistHeap.ordered x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_f0062e810d23900aea914a963397c69a_1))
;;;;;;;;;;;;;;;;t1 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_2
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_2
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_2))
;;;;;;;;;;;;;;;;t2 : LeftistHeap.heap a (LeftistHeap.heap a)
(declare-fun x_2611d061955cd24360b6c9637f442521_3 () Term)
;;;;;;;;;;;;;;;;binder_x_2611d061955cd24360b6c9637f442521_3
;;; Fact-ids: 
(assert (! (HasType x_2611d061955cd24360b6c9637f442521_3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))
:named binder_x_2611d061955cd24360b6c9637f442521_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.leftist_property_merge (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.leftist_property_merge@tok () Term)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   LeftistHeap.leftist_property t1 && LeftistHeap.leftist_property t2 /\
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.leftist_property (LeftistHeap.merge_heaps_aux t1 t2) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (forall (b: a)
;           (b: LeftistHeap.heap a)
;           (b: LeftistHeap.heap a)
;           (b: Prims.nat)
;           (b: a)
;           (b: LeftistHeap.heap a)
;           (b: LeftistHeap.heap a)
;           (b: Prims.nat).
;           (t1, t2) == (LeftistHeap.Node b b b b, LeftistHeap.Node b b b b) ==>
;           (forall (k: Prims.pure_post Prims.unit).
;               (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;               (LeftistHeap.gt b b == true ==>
;                 (LeftistHeap.size t2 + LeftistHeap.size t1 <<
;                   LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                   LeftistHeap.size t2 + LeftistHeap.size t1 ===
;                   LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                   LeftistHeap.measure t2 t1 << LeftistHeap.measure t1 t2) /\
;                 (forall (any_result: LeftistHeap.heap a).
;                     t1 == any_result ==>
;                     LeftistHeap.leftist_property t2 && LeftistHeap.leftist_property t1 /\
;                     (forall (pure_result: Prims.unit).
;                         LeftistHeap.leftist_property (LeftistHeap.merge_heaps_aux t2 t1) ==>
;                         k pure_result))) /\
;               (~(LeftistHeap.gt b b = true) ==>
;                 (forall (b: Prims.bool).
;                     LeftistHeap.gt b b == b ==>
;                     (LeftistHeap.size b + LeftistHeap.size t2 <<
;                       LeftistHeap.size t1 + LeftistHeap.size t2 \/
;                       LeftistHeap.size b + LeftistHeap.size t2 ===
;                       LeftistHeap.size t1 + LeftistHeap.size t2 /\
;                       LeftistHeap.measure b t2 << LeftistHeap.measure t1 t2) /\
;                     (forall (any_result: LeftistHeap.heap a).
;                         t2 == any_result ==>
;                         LeftistHeap.leftist_property b && LeftistHeap.leftist_property t2 /\
;                         (forall (pure_result: Prims.unit).
;                             LeftistHeap.leftist_property (LeftistHeap.merge_heaps_aux b t2) ==>
;                             k pure_result)))))) /\
;       (~(Node? (t1, t2)._1 && Node? (t1, t2)._2) ==>
;         (forall (b: LeftistHeap.heap a & LeftistHeap.heap a).
;             (t1, t2) == b ==> (forall (any_result: Prims.unit). k any_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec leftist_property_merge`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=LeftistHeap.fst(331,11-331,51); use=LeftistHeap.fst(333,2-337,11)
(or label_2

;; def=LeftistHeap.fst(331,11-331,51); use=LeftistHeap.fst(333,2-337,11)
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)))
)
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(333,2-337,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(333,2-337,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(333,2-337,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(333,2-337,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(333,2-337,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(333,2-337,11)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(333,2-337,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(333,2-337,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(333,2-337,11)
(and 
;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.nat)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x6 Term))
 (! (implies (HasType @x6
x_9cd1733a5204f989dbb2f01d5984df93_0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.nat)

;; def=LeftistHeap.fst(333,8-334,32); use=LeftistHeap.fst(333,8-334,32)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x2
@x3
@x4
@x5)
(LeftistHeap.Node x_9cd1733a5204f989dbb2f01d5984df93_0
@x6
@x7
@x8
@x9)))
)

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x11 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(333,2-337,11)
(Valid 
;; def=Prims.fst(402,73-402,79); use=LeftistHeap.fst(333,2-337,11)
(ApplyTT @x1
@x11)
)


;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(333,2-337,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=LeftistHeap.fst(333,2-337,11)
(ApplyTT @x10
@x11)
)
)
 :weight 0


:pattern ((ApplyTT @x10
@x11))
:qid @query.13))
)

;; def=Prims.fst(389,2-389,39); use=LeftistHeap.fst(333,2-337,11)
(and (implies 
;; def=LeftistHeap.fst(335,5-335,13); use=LeftistHeap.fst(335,5-335,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(333,2-337,11)
(and 
;; def=LeftistHeap.fst(332,15-337,11); use=LeftistHeap.fst(335,45-335,47)
(or label_3

;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(335,45-335,47)
(Valid 
;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(335,45-335,47)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(332,15-337,11); use=LeftistHeap.fst(335,45-335,47)
(and 
;; def=LeftistHeap.fst(332,15-332,32); use=LeftistHeap.fst(335,45-335,47)
(Valid 
;; def=LeftistHeap.fst(332,15-332,32); use=LeftistHeap.fst(335,45-335,47)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(335,45-335,47)
(Valid 
;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(335,45-335,47)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(329,65-329,70); use=LeftistHeap.fst(333,2-337,11)
(= x_2611d061955cd24360b6c9637f442521_2
@x11)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(335,19-335,41)
(and (or label_4
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
(or label_5
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(335,19-335,41)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=LeftistHeap.fst(331,11-331,51); use=LeftistHeap.fst(335,19-335,41)
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_3
x_2611d061955cd24360b6c9637f442521_2)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(335,19-335,41)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(335,19-335,41)
(ApplyTT @x10
@x12)
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(333,2-337,11)
(not 
;; def=LeftistHeap.fst(335,5-335,13); use=LeftistHeap.fst(335,5-335,13)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.bool)

;; def=LeftistHeap.fst(335,5-336,34); use=LeftistHeap.fst(335,5-336,34)
(= (LeftistHeap.gt x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x2
@x6)
@x11)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(333,2-337,11)
(and 
;; def=LeftistHeap.fst(332,15-337,11); use=LeftistHeap.fst(336,32-336,34)
(or label_6

;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(336,32-336,34)
(Valid 
;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(336,32-336,34)
(Prims.precedes Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(332,15-337,11); use=LeftistHeap.fst(336,32-336,34)
(and 
;; def=LeftistHeap.fst(332,15-332,32); use=LeftistHeap.fst(336,32-336,34)
(Valid 
;; def=LeftistHeap.fst(332,15-332,32); use=LeftistHeap.fst(336,32-336,34)
(Prims.op_Equals_Equals_Equals Prims.int
Prims.int
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3))
(Prims.op_Addition (LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_2)
(LeftistHeap.size x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))
)


;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(336,32-336,34)
(Valid 
;; def=LeftistHeap.fst(333,2-337,11); use=LeftistHeap.fst(336,32-336,34)
(Prims.precedes Prims.int
Prims.int
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_2611d061955cd24360b6c9637f442521_3)
(LeftistHeap.measure x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))
)
)
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0))

;; def=LeftistHeap.fst(329,68-329,70); use=LeftistHeap.fst(333,2-337,11)
(= x_2611d061955cd24360b6c9637f442521_3
@x12)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(336,7-336,29)
(and (or label_7
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
@x4)))
(or label_8
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
x_2611d061955cd24360b6c9637f442521_3)))

;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(336,7-336,29)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=LeftistHeap.fst(331,11-331,51); use=LeftistHeap.fst(336,7-336,29)
(BoxBool_proj_0 (LeftistHeap.leftist_property x_9cd1733a5204f989dbb2f01d5984df93_0
(LeftistHeap.merge_heaps_aux x_9cd1733a5204f989dbb2f01d5984df93_0
x_f0062e810d23900aea914a963397c69a_1
@x4
x_2611d061955cd24360b6c9637f442521_3)))
)

;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(336,7-336,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=LeftistHeap.fst(336,7-336,29)
(ApplyTT @x10
@x13)
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=LeftistHeap.fst(333,2-337,11)
(not 
;; def=LeftistHeap.fst(334,4-334,32); use=LeftistHeap.fst(334,4-334,32)
(and (BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3))))
(BoxBool_proj_0 (LeftistHeap.uu___is_Node x_9cd1733a5204f989dbb2f01d5984df93_0
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)))))
)


;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)))

;; def=LeftistHeap.fst(333,8-337,5); use=LeftistHeap.fst(333,8-337,5)
(= (FStar.Pervasives.Native.Mktuple2 (LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
(LeftistHeap.heap x_9cd1733a5204f989dbb2f01d5984df93_0)
x_2611d061955cd24360b6c9637f442521_2
x_2611d061955cd24360b6c9637f442521_3)
@x2)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(333,2-337,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(333,2-337,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=LeftistHeap.fst(333,2-337,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.leftist_property_merge, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.leftist_property.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge_heaps_aux.fuel_instrumented, @fuel_correspondence_LeftistHeap.size.fuel_instrumented, @fuel_irrelevance_LeftistHeap.leftist_property.fuel_instrumented, @fuel_irrelevance_LeftistHeap.merge_heaps_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.size.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, Prims_pretyping_ae567c2fb75be05905677af440075565, binder_x_2611d061955cd24360b6c9637f442521_2, binder_x_2611d061955cd24360b6c9637f442521_3, binder_x_9cd1733a5204f989dbb2f01d5984df93_0, binder_x_f0062e810d23900aea914a963397c69a_1, bool_inversion, bool_typing, constructor_distinct_LeftistHeap.Node, constructor_distinct_Tm_unit, data_elim_LeftistHeap.Mkordered, disc_equation_LeftistHeap.Node, equation_LeftistHeap.gt, equation_LeftistHeap.leq, equation_LeftistHeap.measure, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.op_Equals_Equals_Equals, equation_with_fuel_LeftistHeap.leftist_property.fuel_instrumented, equation_with_fuel_LeftistHeap.merge_heaps_aux.fuel_instrumented, equation_with_fuel_LeftistHeap.size.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, function_token_typing_Prims.__cache_version_number__, int_typing, interpretation_Tm_abs_3d43ab47b1ab2f5a1ac2583010f98a3b, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_GreaterThanOrEqual, primitive_Prims.op_disEquality, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.leftist_property.fuel_instrumented, token_correspondence_LeftistHeap.leq, token_correspondence_LeftistHeap.size.fuel_instrumented, typing_LeftistHeap.leftist_property, typing_LeftistHeap.measure, typing_LeftistHeap.merge_heaps_aux, typing_LeftistHeap.size, unit_inversion, unit_typing, well-founded-ordering-on-nat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec leftist_property_merge


; <Start encoding let rec leftist_property_merge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun LeftistHeap.leftist_property_merge (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun LeftistHeap.leftist_property_merge@tok () Term)

; </end encoding let rec leftist_property_merge>


; encoding sigelt val LeftistHeap.leftist


; <Skipped val LeftistHeap.leftist/>

(push) ;; push{2

; Starting query at LeftistHeap.fst(344,2-344,68)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a).
;   (*  - Could not prove post-condition
; *) Prims.hasEq (LeftistHeap.heap a)


; Context: While encoding a query
; While typechecking the top-level declaration `let leftist`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0)))

;; def=LeftistHeap.fst(344,4-344,10); use=LeftistHeap.fst(344,4-344,10)
(or label_1

;; def=LeftistHeap.fst(344,4-344,10); use=LeftistHeap.fst(344,4-344,10)
(Valid 
;; def=LeftistHeap.fst(344,4-344,10); use=LeftistHeap.fst(344,4-344,10)
(Prims.hasEq (LeftistHeap.heap @x0))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.leftist, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_LeftistHeap.heap__uu___haseq, equation_Prims.eqtype, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let leftist


; <Start encoding let leftist>

(declare-fun LeftistHeap.leftist (Term Term) Term)
;;;;;;;;;;;;;;;;a: Prims.eqtype -> {| _: ordered a |} -> Prims.eqtype
(declare-fun Tm_arrow_92670922d0e12687ae320a75e5fc655a () Term)
(declare-fun LeftistHeap.leftist@tok () Term)
(declare-fun Tm_refine_20ddcddf14e217b7652cadf2ea46a085 (Term Term) Term)

; </end encoding let leftist>


; encoding sigelt val LeftistHeap.to_list


; <Skipped val LeftistHeap.to_list/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.leftist; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(343,4-343,11); use=LeftistHeap.fst(343,4-343,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0)))
(HasType (LeftistHeap.leftist @x0
@x1)
Prims.eqtype))
 

:pattern ((LeftistHeap.leftist @x0
@x1))
:qid typing_LeftistHeap.leftist))

:named typing_LeftistHeap.leftist))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.leftist; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(344,2-344,68); use=LeftistHeap.fst(344,2-344,68)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_20ddcddf14e217b7652cadf2ea46a085 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_20ddcddf14e217b7652cadf2ea46a085 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_20ddcddf14e217b7652cadf2ea46a085))

:named refinement_kinding_Tm_refine_20ddcddf14e217b7652cadf2ea46a085))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.leftist; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(344,2-344,68); use=LeftistHeap.fst(344,2-344,68)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_20ddcddf14e217b7652cadf2ea46a085 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.heap @x2))

;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(344,11-344,26)
(Valid 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(344,11-344,26)
(LeftistHeap.heap_property @x2
@x3
@x1)
)


;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(344,30-344,48)
(BoxBool_proj_0 (LeftistHeap.leftist_property @x2
@x1))


;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(344,52-344,67)
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_20ddcddf14e217b7652cadf2ea46a085 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_20ddcddf14e217b7652cadf2ea46a085))

:named refinement_interpretation_Tm_refine_20ddcddf14e217b7652cadf2ea46a085))
;;;;;;;;;;;;;;;;haseq for Tm_refine_20ddcddf14e217b7652cadf2ea46a085
;;; Fact-ids: Name LeftistHeap.leftist; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(344,2-344,68); use=LeftistHeap.fst(344,2-344,68)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_20ddcddf14e217b7652cadf2ea46a085 @x0
@x1)))
(Valid (Prims.hasEq (LeftistHeap.heap @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_20ddcddf14e217b7652cadf2ea46a085 @x0
@x1))))
:qid haseqTm_refine_20ddcddf14e217b7652cadf2ea46a085))

:named haseqTm_refine_20ddcddf14e217b7652cadf2ea46a085))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.leftist
;;; Fact-ids: Name LeftistHeap.leftist; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(343,4-343,11); use=LeftistHeap.fst(343,4-343,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (LeftistHeap.leftist @x0
@x1)
(Tm_refine_20ddcddf14e217b7652cadf2ea46a085 @x0
@x1))
 

:pattern ((LeftistHeap.leftist @x0
@x1))
:qid equation_LeftistHeap.leftist))

:named equation_LeftistHeap.leftist))
(push) ;; push{2

; Starting query at LeftistHeap.fst(347,2-347,46)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a) (t: LeftistHeap.leftist a).
;   (*  - Could not prove post-condition
; *)
;   LeftistHeap.heap_property t /\
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.sorted (LeftistHeap.to_list_aux t) ==>
;       (forall (any_result: Prims.list a).
;           LeftistHeap.to_list_aux t == any_result ==> LeftistHeap.sorted (LeftistHeap.to_list_aux t)
;       ))


; Context: While encoding a query
; While typechecking the top-level declaration `let to_list`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.leftist @x0
@x1)))

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(347,3-347,28)
(and 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(347,3-347,28)
(or label_1

;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(347,3-347,28)
(Valid 
;; def=LeftistHeap.fst(190,18-190,33); use=LeftistHeap.fst(347,3-347,28)
(LeftistHeap.heap_property @x0
@x1
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(347,3-347,28)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=LeftistHeap.fst(190,44-190,66); use=LeftistHeap.fst(347,3-347,28)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(347,2-347,46)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list @x0))

;; def=LeftistHeap.fst(346,65-347,45); use=LeftistHeap.fst(347,2-347,46)
(= (LeftistHeap.to_list_aux @x0
@x1
@x2)
@x4)
)

;; def=LeftistHeap.fst(346,75-346,83); use=LeftistHeap.fst(347,32-347,45)
(or label_2

;; def=LeftistHeap.fst(346,75-346,83); use=LeftistHeap.fst(347,32-347,45)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.to_list, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_LeftistHeap.leftist, refinement_interpretation_Tm_refine_20ddcddf14e217b7652cadf2ea46a085

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let to_list


; <Start encoding let to_list>

(declare-fun LeftistHeap.to_list (Term Term Term) Term)
(declare-fun Tm_refine_32dfddc0b557508b5956c23209347ea1 (Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: leftist a -> Prims.GTot (l: Prims.list a {sorted l})
(declare-fun Tm_ghost_arrow_b5a9a37b501c196e8f294fd70b421c27 () Term)
(declare-fun LeftistHeap.to_list@tok () Term)


; </end encoding let to_list>

(push) ;; push{2

; Starting query at LeftistHeap.fsti(44,0-45,33)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (t: LeftistHeap.leftist a).
;     (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;     Prims.hasEq (Prims.list a)


; Context: While encoding a query
; While typechecking the top-level declaration `val LeftistHeap.empty`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(44,0-45,33)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0)))

;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(44,15-45,33)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(45,16-45,23)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(45,16-45,23)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(45,16-45,23)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.empty, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, equation_Prims.eqtype, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val LeftistHeap.empty


; <Skipped val LeftistHeap.empty/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.to_list; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(346,4-346,11); use=LeftistHeap.fst(346,4-346,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.leftist @x0
@x1)))
(HasType (LeftistHeap.to_list @x0
@x1
@x2)
(Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1)))
 

:pattern ((LeftistHeap.to_list @x0
@x1
@x2))
:qid typing_LeftistHeap.to_list))

:named typing_LeftistHeap.to_list))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.to_list; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(42,7-42,27); use=LeftistHeap.fst(346,4-346,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_32dfddc0b557508b5956c23209347ea1))

:named refinement_kinding_Tm_refine_32dfddc0b557508b5956c23209347ea1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.to_list; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(42,7-42,27); use=LeftistHeap.fst(346,4-346,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_32dfddc0b557508b5956c23209347ea1 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=LeftistHeap.fsti(42,17-42,25); use=LeftistHeap.fst(346,4-346,11)
(BoxBool_proj_0 (LeftistHeap.sorted @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_32dfddc0b557508b5956c23209347ea1 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_32dfddc0b557508b5956c23209347ea1))

:named refinement_interpretation_Tm_refine_32dfddc0b557508b5956c23209347ea1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_32dfddc0b557508b5956c23209347ea1
;;; Fact-ids: Name LeftistHeap.to_list; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(42,7-42,27); use=LeftistHeap.fst(346,4-346,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1))))
:qid haseqTm_refine_32dfddc0b557508b5956c23209347ea1))

:named haseqTm_refine_32dfddc0b557508b5956c23209347ea1))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.to_list
;;; Fact-ids: Name LeftistHeap.to_list; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(346,4-346,11); use=LeftistHeap.fst(346,4-346,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.to_list @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x2))
 

:pattern ((LeftistHeap.to_list @x0
@x1
@x2))
:qid equation_LeftistHeap.to_list))

:named equation_LeftistHeap.to_list))
(push) ;; push{2

; Starting query at LeftistHeap.fst(349,78-349,82)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a).
;   (forall (t: LeftistHeap.leftist a).
;       (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;       Prims.hasEq (Prims.list a)) /\
;   LeftistHeap.heap_property LeftistHeap.Leaf /\ LeftistHeap.leftist_property LeftistHeap.Leaf /\
;   LeftistHeap.correct_ranks LeftistHeap.Leaf /\
;   (LeftistHeap.to_list LeftistHeap.Leaf = [])


; Context: While encoding a query
; While typechecking the top-level declaration `let empty`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0)))

;; def=LeftistHeap.fst(349,44-349,82); use=LeftistHeap.fst(349,44-349,82)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(349,78-349,82)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(349,58-349,65)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(349,78-349,82)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(349,78-349,82)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))


;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(349,78-349,82)
(or label_2

;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(349,78-349,82)
(Valid 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(349,78-349,82)
(LeftistHeap.heap_property @x0
@x1
(LeftistHeap.Leaf @x0))
)
)


;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(349,78-349,82)
(or label_3

;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(349,78-349,82)
(BoxBool_proj_0 (LeftistHeap.leftist_property @x0
(LeftistHeap.Leaf @x0)))
)


;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(349,78-349,82)
(or label_4

;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(349,78-349,82)
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x0
(LeftistHeap.Leaf @x0)))
)


;; def=LeftistHeap.fst(349,58-349,72); use=LeftistHeap.fst(349,78-349,82)
(or label_5

;; def=LeftistHeap.fst(349,58-349,72); use=LeftistHeap.fst(349,78-349,82)
(= (LeftistHeap.to_list @x0
@x1
(LeftistHeap.Leaf @x0))
(Prims.Nil @x0))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.empty, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, @fuel_correspondence_LeftistHeap.leftist_property.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @query, assumption_Prims.list__uu___haseq, constructor_distinct_LeftistHeap.Leaf, data_typing_intro_LeftistHeap.Leaf@tok, equation_LeftistHeap.heap_property, equation_LeftistHeap.to_list, equation_Prims.eqtype, equation_with_fuel_LeftistHeap.correct_ranks.fuel_instrumented, equation_with_fuel_LeftistHeap.leftist_property.fuel_instrumented, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Leaf_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, true_interp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let empty


; <Start encoding let empty>

(declare-fun LeftistHeap.empty (Term Term) Term)
(declare-fun Tm_refine_2eff5f73b4ba238d096900ed23df8000 (Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: leftist a {to_list t = []}
(declare-fun Tm_arrow_4fdc3dcbc82e262f895c210024aec229 () Term)
(declare-fun LeftistHeap.empty@tok () Term)


; </end encoding let empty>

(push) ;; push{2

; Starting query at LeftistHeap.fsti(47,0-48,35)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a) (t: LeftistHeap.leftist a).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (b: Prims.bool).
;     (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;     Prims.hasEq (Prims.list a)


; Context: While encoding a query
; While typechecking the top-level declaration `val LeftistHeap.isEmpty`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(47,0-48,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.leftist @x0
@x1)))

;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(47,17-48,35)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.bool)

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(48,18-48,25)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(48,18-48,25)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(48,18-48,25)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.isEmpty, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, equation_Prims.eqtype, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val LeftistHeap.isEmpty


; <Skipped val LeftistHeap.isEmpty/>

(push) ;; push{2

; Starting query at LeftistHeap.fst(351,95-351,102)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a) (t: LeftistHeap.leftist a).
;   (forall (b: Prims.bool).
;       (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;       Prims.hasEq (Prims.list a)) /\ (Leaf? t <==> LeftistHeap.to_list t = [])


; Context: While encoding a query
; While typechecking the top-level declaration `let isEmpty`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.leftist @x0
@x1)))

;; def=LeftistHeap.fst(351,60-351,102); use=LeftistHeap.fst(351,60-351,102)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(351,95-351,102)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.bool)

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(351,76-351,83)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(351,95-351,102)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(351,95-351,102)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))


;; def=LeftistHeap.fst(351,69-351,90); use=LeftistHeap.fst(351,95-351,102)
(or label_2

;; def=LeftistHeap.fst(351,69-351,90); use=LeftistHeap.fst(351,95-351,102)
(iff 
;; def=LeftistHeap.fst(351,61-351,62); use=LeftistHeap.fst(351,95-351,102)
(BoxBool_proj_0 (LeftistHeap.uu___is_Leaf @x0
@x2))


;; def=LeftistHeap.fst(351,76-351,90); use=LeftistHeap.fst(351,95-351,102)
(= (LeftistHeap.to_list @x0
@x1
@x2)
(Prims.Nil @x0))
)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.isEmpty, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @query, assumption_Prims.list__uu___haseq, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, disc_equation_LeftistHeap.Leaf, equation_LeftistHeap.leftist, equation_LeftistHeap.to_list, equation_Prims.eqtype, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, projection_inverse_BoxBool_proj_0, refinement_interpretation_Tm_refine_20ddcddf14e217b7652cadf2ea46a085, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let isEmpty


; <Start encoding let isEmpty>

(declare-fun LeftistHeap.isEmpty (Term Term Term) Term)
(declare-fun Tm_refine_366ba6d2d69978c1c8b35278df759a3f (Term Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: leftist a -> b: Prims.bool{b <==> to_list t = []}
(declare-fun Tm_arrow_0b5d9936fbbb4ccae7e2f3d5fddc7fc8 () Term)
(declare-fun LeftistHeap.isEmpty@tok () Term)


; </end encoding let isEmpty>

(push) ;; push{2

; Starting query at LeftistHeap.fsti(50,0-51,32)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a) (k: a).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (s: LeftistHeap.leftist a).
;     (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;     Prims.hasEq (Prims.list a)


; Context: While encoding a query
; While typechecking the top-level declaration `val LeftistHeap.singleton`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(50,0-51,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0))

;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(50,19-51,32)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(51,15-51,22)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(51,15-51,22)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(51,15-51,22)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.singleton, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, equation_Prims.eqtype, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val LeftistHeap.singleton


; <Skipped val LeftistHeap.singleton/>

(push) ;; push{2

; Starting query at LeftistHeap.fst(354,2-354,20)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a) (k: a).
;   (forall (s: LeftistHeap.leftist a).
;       (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;       Prims.hasEq (Prims.list a)) /\
;   LeftistHeap.heap_property (LeftistHeap.Node k LeftistHeap.Leaf LeftistHeap.Leaf 1) /\
;   LeftistHeap.leftist_property (LeftistHeap.Node k LeftistHeap.Leaf LeftistHeap.Leaf 1) /\
;   LeftistHeap.correct_ranks (LeftistHeap.Node k LeftistHeap.Leaf LeftistHeap.Leaf 1) /\
;   (LeftistHeap.to_list (LeftistHeap.Node k LeftistHeap.Leaf LeftistHeap.Leaf 1) = [k])


; Context: While encoding a query
; While typechecking the top-level declaration `let singleton`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0))

;; def=LeftistHeap.fst(353,54-354,20); use=LeftistHeap.fst(353,54-354,20)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(354,2-354,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(353,67-353,74)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(354,2-354,20)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(354,2-354,20)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))


;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(354,2-354,20)
(or label_2

;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(354,2-354,20)
(Valid 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(354,2-354,20)
(LeftistHeap.heap_property @x0
@x1
(LeftistHeap.Node @x0
@x2
(LeftistHeap.Leaf @x0)
(LeftistHeap.Leaf @x0)
(BoxInt 1)))
)
)


;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(354,2-354,20)
(or label_3

;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(354,2-354,20)
(BoxBool_proj_0 (LeftistHeap.leftist_property @x0
(LeftistHeap.Node @x0
@x2
(LeftistHeap.Leaf @x0)
(LeftistHeap.Leaf @x0)
(BoxInt 1))))
)


;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(354,2-354,20)
(or label_4

;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(354,2-354,20)
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x0
(LeftistHeap.Node @x0
@x2
(LeftistHeap.Leaf @x0)
(LeftistHeap.Leaf @x0)
(BoxInt 1))))
)


;; def=LeftistHeap.fst(353,67-353,82); use=LeftistHeap.fst(354,2-354,20)
(or label_5

;; def=LeftistHeap.fst(353,67-353,82); use=LeftistHeap.fst(354,2-354,20)
(= (LeftistHeap.to_list @x0
@x1
(LeftistHeap.Node @x0
@x2
(LeftistHeap.Leaf @x0)
(LeftistHeap.Leaf @x0)
(BoxInt 1)))
(Prims.Cons @x0
@x2
(Prims.Nil @x0)))
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.singleton, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.compute_rank.fuel_instrumented, @fuel_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, @fuel_correspondence_LeftistHeap.leftist_property.fuel_instrumented, @fuel_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_correspondence_LeftistHeap.merge.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.correct_ranks.fuel_instrumented, @query, FStar.List.Tot.Base_interpretation_Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e, Prims_pretyping_ae567c2fb75be05905677af440075565, assumption_Prims.list__uu___haseq, b2t_def, bool_inversion, bool_typing, constructor_distinct_LeftistHeap.Leaf, constructor_distinct_LeftistHeap.Node, constructor_distinct_Prims.Nil, data_elim_LeftistHeap.Mkordered, data_elim_LeftistHeap.Node, data_typing_intro_LeftistHeap.Leaf@tok, data_typing_intro_LeftistHeap.Node@tok, equation_LeftistHeap.heap_property, equation_LeftistHeap.to_list, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_LeftistHeap.compute_rank.fuel_instrumented, equation_with_fuel_LeftistHeap.correct_ranks.fuel_instrumented, equation_with_fuel_LeftistHeap.leftist_property.fuel_instrumented, equation_with_fuel_LeftistHeap.lower_bounded_heap.fuel_instrumented, equation_with_fuel_LeftistHeap.merge.fuel_instrumented, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, l_and-interp, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_Equality, primitive_Prims.op_GreaterThanOrEqual, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_LeftistHeap.Leaf_a, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c9b66413736764e5892d9b3a8d972edc, token_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, token_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, typing_LeftistHeap.compute_rank

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let singleton


; <Start encoding let singleton>

(declare-fun LeftistHeap.singleton (Term Term Term) Term)
(declare-fun Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59 (Term Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> k: a -> s: leftist a {to_list s = [k]}
(declare-fun Tm_arrow_676f498cb113dfb2aebef3e27cb8fca9 () Term)
(declare-fun LeftistHeap.singleton@tok () Term)


; </end encoding let singleton>

(push) ;; push{2

; Starting query at LeftistHeap.fsti(53,0-54,62)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype)
;   (_: LeftistHeap.ordered a)
;   (t1: LeftistHeap.leftist a)
;   (t2: LeftistHeap.leftist a).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (t: LeftistHeap.leftist a).
;     (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;     Prims.hasEq (Prims.list a)


; Context: While encoding a query
; While typechecking the top-level declaration `val LeftistHeap.merge_heaps`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(53,0-54,62)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.leftist @x0
@x1))
(HasType @x3
(LeftistHeap.leftist @x0
@x1)))

;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(53,21-54,62)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(54,16-54,23)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(54,16-54,23)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(54,16-54,23)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.merge_heaps, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, equation_Prims.eqtype, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val LeftistHeap.merge_heaps


; <Skipped val LeftistHeap.merge_heaps/>

(push) ;; push{2

; Starting query at LeftistHeap.fst(358,2-362,24)

(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype)
;   (_: LeftistHeap.ordered a)
;   (t1: LeftistHeap.leftist a)
;   (t2: LeftistHeap.leftist a).
;   (forall (t: LeftistHeap.leftist a).
;       (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;       Prims.hasEq (Prims.list a)) /\
;   LeftistHeap.heap_property t1 /\ LeftistHeap.heap_property t2 /\
;   (forall (pure_result: Prims.unit).
;       LeftistHeap.to_list_aux (LeftistHeap.merge_heaps_aux t1 t2) =
;       LeftistHeap.merge (LeftistHeap.to_list_aux t1) (LeftistHeap.to_list_aux t2) ==>
;       LeftistHeap.heap_property t1 /\ LeftistHeap.heap_property t2 /\
;       (forall (pure_result: Prims.unit).
;           LeftistHeap.heap_property (LeftistHeap.merge_heaps_aux t1 t2) ==>
;           LeftistHeap.leftist_property t1 && LeftistHeap.leftist_property t2 /\
;           (forall (pure_result: Prims.unit).
;               LeftistHeap.leftist_property (LeftistHeap.merge_heaps_aux t1 t2) ==>
;               LeftistHeap.correct_ranks t1 && LeftistHeap.correct_ranks t2 /\
;               (forall (pure_result: Prims.unit).
;                   LeftistHeap.correct_ranks (LeftistHeap.merge_heaps_aux t1 t2) ==>
;                   LeftistHeap.heap_property (LeftistHeap.merge_heaps_aux t1 t2) /\
;                   LeftistHeap.leftist_property (LeftistHeap.merge_heaps_aux t1 t2) /\
;                   LeftistHeap.correct_ranks (LeftistHeap.merge_heaps_aux t1 t2) /\
;                   LeftistHeap.to_list (LeftistHeap.merge_heaps_aux t1 t2) =
;                   LeftistHeap.merge (LeftistHeap.to_list t1) (LeftistHeap.to_list t2)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let merge_heaps`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.leftist @x0
@x1))
(HasType @x3
(LeftistHeap.leftist @x0
@x1)))

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(357,2-358,21)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(358,2-362,24)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(357,16-357,23)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(358,2-362,24)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(358,2-362,24)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))


;; def=LeftistHeap.fst(265,18-265,33); use=LeftistHeap.fst(358,3-358,21)
(or label_2

;; def=LeftistHeap.fst(265,18-265,33); use=LeftistHeap.fst(358,3-358,21)
(Valid 
;; def=LeftistHeap.fst(265,18-265,33); use=LeftistHeap.fst(358,3-358,21)
(LeftistHeap.heap_property @x0
@x1
@x2)
)
)


;; def=LeftistHeap.fst(265,37-265,52); use=LeftistHeap.fst(358,3-358,21)
(or label_3

;; def=LeftistHeap.fst(265,37-265,52); use=LeftistHeap.fst(358,3-358,21)
(Valid 
;; def=LeftistHeap.fst(265,37-265,52); use=LeftistHeap.fst(358,3-358,21)
(LeftistHeap.heap_property @x0
@x1
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(358,3-358,21)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=LeftistHeap.fst(266,11-266,84); use=LeftistHeap.fst(358,3-358,21)
(= (LeftistHeap.to_list_aux @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list_aux @x0
@x1
@x2)
(LeftistHeap.to_list_aux @x0
@x1
@x3)))
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(359,2-359,21)
(and 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(359,2-359,21)
(or label_4

;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(359,2-359,21)
(Valid 
;; def=LeftistHeap.fst(246,12-246,28); use=LeftistHeap.fst(359,2-359,21)
(LeftistHeap.heap_property @x0
@x1
@x2)
)
)


;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(359,2-359,21)
(or label_5

;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(359,2-359,21)
(Valid 
;; def=LeftistHeap.fst(246,32-246,48); use=LeftistHeap.fst(359,2-359,21)
(LeftistHeap.heap_property @x0
@x1
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(359,2-359,21)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(359,2-359,21)
(Valid 
;; def=LeftistHeap.fst(247,11-247,48); use=LeftistHeap.fst(359,2-359,21)
(LeftistHeap.heap_property @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
)
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(360,2-360,24)
(and 
;; def=LeftistHeap.fst(358,2-362,24); use=LeftistHeap.fst(358,2-362,24)
(or label_6
(BoxBool_proj_0 (LeftistHeap.leftist_property @x0
@x2)))


;; def=LeftistHeap.fst(358,2-362,24); use=LeftistHeap.fst(358,2-362,24)
(or label_7
(BoxBool_proj_0 (LeftistHeap.leftist_property @x0
@x3)))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(360,2-360,24)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=LeftistHeap.fst(331,11-331,51); use=LeftistHeap.fst(360,2-360,24)
(BoxBool_proj_0 (LeftistHeap.leftist_property @x0
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)))
)

;; def=Prims.fst(441,29-441,97); use=LeftistHeap.fst(361,2-361,21)
(and 
;; def=LeftistHeap.fst(358,2-362,24); use=LeftistHeap.fst(358,2-362,24)
(or label_8
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x0
@x2)))


;; def=LeftistHeap.fst(358,2-362,24); use=LeftistHeap.fst(358,2-362,24)
(or label_9
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x0
@x3)))


;; def=Prims.fst(441,36-441,97); use=LeftistHeap.fst(361,2-361,21)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=LeftistHeap.fst(321,11-321,48); use=LeftistHeap.fst(361,2-361,21)
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x0
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)))
)

;; def=LeftistHeap.fst(344,11-357,59); use=LeftistHeap.fst(362,2-362,23)
(and 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(362,2-362,23)
(or label_10

;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(362,2-362,23)
(Valid 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(362,2-362,23)
(LeftistHeap.heap_property @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
)
)


;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(362,2-362,23)
(or label_11

;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(362,2-362,23)
(BoxBool_proj_0 (LeftistHeap.leftist_property @x0
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)))
)


;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(362,2-362,23)
(or label_12

;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(362,2-362,23)
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x0
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3)))
)


;; def=LeftistHeap.fst(357,16-357,59); use=LeftistHeap.fst(362,2-362,23)
(or label_13

;; def=LeftistHeap.fst(357,16-357,59); use=LeftistHeap.fst(362,2-362,23)
(= (LeftistHeap.to_list @x0
@x1
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list @x0
@x1
@x2)
(LeftistHeap.to_list @x0
@x1
@x3)))
)
)
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.merge_heaps, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, equation_LeftistHeap.leftist, equation_LeftistHeap.to_list, equation_Prims.eqtype, fuel_guarded_inversion_LeftistHeap.ordered, refinement_interpretation_Tm_refine_20ddcddf14e217b7652cadf2ea46a085, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let merge_heaps


; <Start encoding let merge_heaps>

(declare-fun LeftistHeap.merge_heaps (Term Term Term Term) Term)
(declare-fun Tm_refine_5b3dfbea48b21597dc91a365a31690d6 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t1: leftist a -> t2: leftist a   -> t: leftist a {to_list t = merge (to_list t1) (to_list t2)}
(declare-fun Tm_arrow_06caa3afc93762b1528cd631a6f5d2a8 () Term)
(declare-fun LeftistHeap.merge_heaps@tok () Term)


; </end encoding let merge_heaps>

(push) ;; push{2

; Starting query at LeftistHeap.fsti(56,0-57,54)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a) (x: a) (t: LeftistHeap.leftist a).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (t': LeftistHeap.leftist a).
;     (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;     Prims.hasEq (Prims.list a)


; Context: While encoding a query
; While typechecking the top-level declaration `val LeftistHeap.insert`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(56,0-57,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0)
(HasType @x3
(LeftistHeap.leftist @x0
@x1)))

;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(56,16-57,54)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(57,17-57,24)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(57,17-57,24)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(57,17-57,24)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.insert, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, equation_Prims.eqtype, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val LeftistHeap.insert


; <Skipped val LeftistHeap.insert/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.singleton; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(353,4-353,13); use=LeftistHeap.fst(353,4-353,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0))
(HasType (LeftistHeap.singleton @x0
@x1
@x2)
(Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59 @x0
@x1
@x2)))
 

:pattern ((LeftistHeap.singleton @x0
@x1
@x2))
:qid typing_LeftistHeap.singleton))

:named typing_LeftistHeap.singleton))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.merge_heaps; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(356,4-356,15); use=LeftistHeap.fst(356,4-356,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.leftist @x0
@x1))
(HasType @x3
(LeftistHeap.leftist @x0
@x1)))
(HasType (LeftistHeap.merge_heaps @x0
@x1
@x2
@x3)
(Tm_refine_5b3dfbea48b21597dc91a365a31690d6 @x0
@x1
@x2
@x3)))
 

:pattern ((LeftistHeap.merge_heaps @x0
@x1
@x2
@x3))
:qid typing_LeftistHeap.merge_heaps))

:named typing_LeftistHeap.merge_heaps))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.singleton; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(51,2-51,32); use=LeftistHeap.fst(353,4-353,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59))

:named refinement_kinding_Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.merge_heaps; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(54,2-54,62); use=LeftistHeap.fst(356,4-356,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_5b3dfbea48b21597dc91a365a31690d6 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_5b3dfbea48b21597dc91a365a31690d6 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_5b3dfbea48b21597dc91a365a31690d6))

:named refinement_kinding_Tm_refine_5b3dfbea48b21597dc91a365a31690d6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.singleton; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(51,2-51,32); use=LeftistHeap.fst(353,4-353,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.leftist @x2
@x3))

;; def=LeftistHeap.fsti(51,15-51,30); use=LeftistHeap.fst(353,4-353,13)
(= (LeftistHeap.to_list @x2
@x3
@x1)
(Prims.Cons @x2
@x4
(Prims.Nil @x2)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59))

:named refinement_interpretation_Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.merge_heaps; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(54,2-54,62); use=LeftistHeap.fst(356,4-356,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5b3dfbea48b21597dc91a365a31690d6 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.leftist @x2
@x3))

;; def=LeftistHeap.fsti(54,16-54,59); use=LeftistHeap.fst(356,4-356,15)
(= (LeftistHeap.to_list @x2
@x3
@x1)
(LeftistHeap.merge @x2
@x3
(LeftistHeap.to_list @x2
@x3
@x4)
(LeftistHeap.to_list @x2
@x3
@x5)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5b3dfbea48b21597dc91a365a31690d6 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_5b3dfbea48b21597dc91a365a31690d6))

:named refinement_interpretation_Tm_refine_5b3dfbea48b21597dc91a365a31690d6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59
;;; Fact-ids: Name LeftistHeap.singleton; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(51,2-51,32); use=LeftistHeap.fst(353,4-353,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59 @x0
@x1
@x2)))
(Valid (Prims.hasEq (LeftistHeap.leftist @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59 @x0
@x1
@x2))))
:qid haseqTm_refine_9a9b0ea40acc20292ec2aa55734c9b59))

:named haseqTm_refine_9a9b0ea40acc20292ec2aa55734c9b59))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5b3dfbea48b21597dc91a365a31690d6
;;; Fact-ids: Name LeftistHeap.merge_heaps; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(54,2-54,62); use=LeftistHeap.fst(356,4-356,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5b3dfbea48b21597dc91a365a31690d6 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (LeftistHeap.leftist @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5b3dfbea48b21597dc91a365a31690d6 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_5b3dfbea48b21597dc91a365a31690d6))

:named haseqTm_refine_5b3dfbea48b21597dc91a365a31690d6))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.singleton
;;; Fact-ids: Name LeftistHeap.singleton; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(353,4-353,13); use=LeftistHeap.fst(353,4-353,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.singleton @x0
@x1
@x2)
(LeftistHeap.Node @x0
@x2
(LeftistHeap.Leaf @x0)
(LeftistHeap.Leaf @x0)
(BoxInt 1)))
 

:pattern ((LeftistHeap.singleton @x0
@x1
@x2))
:qid equation_LeftistHeap.singleton))

:named equation_LeftistHeap.singleton))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.merge_heaps
;;; Fact-ids: Name LeftistHeap.merge_heaps; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(356,4-356,15); use=LeftistHeap.fst(356,4-356,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (LeftistHeap.merge_heaps @x0
@x1
@x2
@x3)
(LeftistHeap.merge_heaps_aux @x0
@x1
@x2
@x3))
 

:pattern ((LeftistHeap.merge_heaps @x0
@x1
@x2
@x3))
:qid equation_LeftistHeap.merge_heaps))

:named equation_LeftistHeap.merge_heaps))
(push) ;; push{2

; Starting query at LeftistHeap.fst(366,2-366,29)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Prims.eqtype) (_: LeftistHeap.ordered a) (x: a) (t: LeftistHeap.leftist a).
;   (forall (t': LeftistHeap.leftist a).
;       (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;       Prims.hasEq (Prims.list a)) /\
;   (LeftistHeap.to_list (LeftistHeap.merge_heaps (LeftistHeap.singleton x) t) =
;     LeftistHeap.merge (LeftistHeap.to_list (LeftistHeap.singleton x)) (LeftistHeap.to_list t) ==>
;     LeftistHeap.to_list (LeftistHeap.merge_heaps (LeftistHeap.singleton x) t) =
;     LeftistHeap.merge [x] (LeftistHeap.to_list t))


; Context: While encoding a query
; While typechecking the top-level declaration `let insert`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
@x0)
(HasType @x3
(LeftistHeap.leftist @x0
@x1)))

;; def=LeftistHeap.fst(365,2-366,29); use=LeftistHeap.fst(365,2-366,29)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(366,2-366,29)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(365,17-365,24)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(366,2-366,29)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(366,2-366,29)
(Prims.hasEq (Prims.list @x0))
)
)
)
 
;;no pats
:qid @query.1))

(implies 
;; def=LeftistHeap.fsti(54,16-54,59); use=LeftistHeap.fst(366,2-366,29)
(= (LeftistHeap.to_list @x0
@x1
(LeftistHeap.merge_heaps @x0
@x1
(LeftistHeap.singleton @x0
@x1
@x2)
@x3))
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list @x0
@x1
(LeftistHeap.singleton @x0
@x1
@x2))
(LeftistHeap.to_list @x0
@x1
@x3)))


;; def=LeftistHeap.fst(365,17-365,51); use=LeftistHeap.fst(366,2-366,29)
(or label_2

;; def=LeftistHeap.fst(365,17-365,51); use=LeftistHeap.fst(366,2-366,29)
(= (LeftistHeap.to_list @x0
@x1
(LeftistHeap.merge_heaps @x0
@x1
(LeftistHeap.singleton @x0
@x1
@x2)
@x3))
(LeftistHeap.merge @x0
@x1
(Prims.Cons @x0
@x2
(Prims.Nil @x0))
(LeftistHeap.to_list @x0
@x1
@x3)))
)
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.insert, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_Prims.list__uu___haseq, equation_LeftistHeap.singleton, equation_Prims.eqtype, fuel_guarded_inversion_LeftistHeap.ordered, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_9a9b0ea40acc20292ec2aa55734c9b59, typing_LeftistHeap.singleton

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let insert


; <Start encoding let insert>

(declare-fun LeftistHeap.insert (Term Term Term Term) Term)
(declare-fun Tm_refine_f6129d77c861b6077f5c346072e66a00 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> x: a -> t: leftist a -> t': leftist a {to_list t' = merge [x] (to_list t)}
(declare-fun Tm_arrow_a6b52271ab24e80a480e628eb1d1d457 () Term)
(declare-fun LeftistHeap.insert@tok () Term)


; </end encoding let insert>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name LeftistHeap.isEmpty; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(351,4-351,11); use=LeftistHeap.fst(351,4-351,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(LeftistHeap.leftist @x0
@x1)))
(HasType (LeftistHeap.isEmpty @x0
@x1
@x2)
(Tm_refine_366ba6d2d69978c1c8b35278df759a3f @x0
@x1
@x2)))
 

:pattern ((LeftistHeap.isEmpty @x0
@x1
@x2))
:qid typing_LeftistHeap.isEmpty))

:named typing_LeftistHeap.isEmpty))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.isEmpty; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(48,2-48,35); use=LeftistHeap.fst(351,4-351,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_366ba6d2d69978c1c8b35278df759a3f @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_366ba6d2d69978c1c8b35278df759a3f @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_366ba6d2d69978c1c8b35278df759a3f))

:named refinement_kinding_Tm_refine_366ba6d2d69978c1c8b35278df759a3f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.isEmpty; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(48,2-48,35); use=LeftistHeap.fst(351,4-351,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_366ba6d2d69978c1c8b35278df759a3f @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=LeftistHeap.fsti(48,11-48,32); use=LeftistHeap.fst(351,4-351,11)
(iff 
;; def=LeftistHeap.fsti(48,3-48,4); use=LeftistHeap.fst(351,4-351,11)
(BoxBool_proj_0 @x1)


;; def=LeftistHeap.fsti(48,18-48,32); use=LeftistHeap.fst(351,4-351,11)
(= (LeftistHeap.to_list @x2
@x3
@x4)
(Prims.Nil @x2))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_366ba6d2d69978c1c8b35278df759a3f @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_366ba6d2d69978c1c8b35278df759a3f))

:named refinement_interpretation_Tm_refine_366ba6d2d69978c1c8b35278df759a3f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_366ba6d2d69978c1c8b35278df759a3f
;;; Fact-ids: Name LeftistHeap.isEmpty; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(48,2-48,35); use=LeftistHeap.fst(351,4-351,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_366ba6d2d69978c1c8b35278df759a3f @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.bool)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_366ba6d2d69978c1c8b35278df759a3f @x0
@x1
@x2))))
:qid haseqTm_refine_366ba6d2d69978c1c8b35278df759a3f))

:named haseqTm_refine_366ba6d2d69978c1c8b35278df759a3f))
;;;;;;;;;;;;;;;;Equation for LeftistHeap.isEmpty
;;; Fact-ids: Name LeftistHeap.isEmpty; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fst(351,4-351,11); use=LeftistHeap.fst(351,4-351,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (LeftistHeap.isEmpty @x0
@x1
@x2)
(LeftistHeap.uu___is_Leaf @x0
@x2))
 

:pattern ((LeftistHeap.isEmpty @x0
@x1
@x2))
:qid equation_LeftistHeap.isEmpty))

:named equation_LeftistHeap.isEmpty))
(push) ;; push{2

; Starting query at LeftistHeap.fsti(59,0-60,35)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(59,45-59,74); use=LeftistHeap.fsti(59,45-59,74)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named refinement_kinding_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(59,45-59,74); use=LeftistHeap.fsti(59,45-59,74)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.leftist @x2
@x3))

;; def=LeftistHeap.fsti(59,59-59,71); use=LeftistHeap.fsti(59,59-59,71)
(not 
;; def=LeftistHeap.fsti(59,60-59,71); use=LeftistHeap.fsti(59,60-59,71)
(BoxBool_proj_0 (LeftistHeap.isEmpty @x2
@x3
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fsti(59,45-59,74); use=LeftistHeap.fsti(59,45-59,74)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)))
(Valid (Prims.hasEq (LeftistHeap.leftist @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1))))
:qid haseqTm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named haseqTm_refine_2a9a55aa69767df3fd9b8c47f8e24270))


; Encoding query formula : forall (a: Prims.eqtype)
;   (_: LeftistHeap.ordered a)
;   (t: LeftistHeap.leftist a {~(LeftistHeap.isEmpty t)}).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (x: a) (any_result: l: Prims.list a {LeftistHeap.sorted l}).
;     LeftistHeap.to_list t == any_result ==>
;     LeftistHeap.sorted (LeftistHeap.to_list t) ==> Cons? (LeftistHeap.to_list t)


; Context: While encoding a query
; While typechecking the top-level declaration `val LeftistHeap.get_min`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(59,0-60,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)))

;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(59,17-60,35)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x0)
(HasType @x4
(Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1))

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fsti(60,18-60,32)
(= (LeftistHeap.to_list @x0
@x1
@x2)
@x4)


;; def=LeftistHeap.fsti(42,17-42,25); use=LeftistHeap.fsti(60,21-60,32)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list @x0
@x1
@x2)))
)

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fsti(60,21-60,32)
(or label_1

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fsti(60,21-60,32)
(BoxBool_proj_0 (Prims.uu___is_Cons @x0
(LeftistHeap.to_list @x0
@x1
@x2)))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.get_min, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_Prims.Cons, equation_LeftistHeap.isEmpty, fuel_guarded_inversion_LeftistHeap.ordered, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0, refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270, refinement_interpretation_Tm_refine_32dfddc0b557508b5956c23209347ea1, refinement_interpretation_Tm_refine_366ba6d2d69978c1c8b35278df759a3f, typing_LeftistHeap.isEmpty

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val LeftistHeap.get_min


; <Skipped val LeftistHeap.get_min/>

(push) ;; push{2

; Starting query at LeftistHeap.fst(370,2-371,21)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(368,45-368,74); use=LeftistHeap.fst(368,45-368,74)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named refinement_kinding_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(368,45-368,74); use=LeftistHeap.fst(368,45-368,74)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.leftist @x2
@x3))

;; def=LeftistHeap.fst(368,59-368,71); use=LeftistHeap.fst(368,59-368,71)
(not 
;; def=LeftistHeap.fst(368,60-368,71); use=LeftistHeap.fst(368,60-368,71)
(BoxBool_proj_0 (LeftistHeap.isEmpty @x2
@x3
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270
;;; Fact-ids: 
(assert (! 
;; def=LeftistHeap.fst(368,45-368,74); use=LeftistHeap.fst(368,45-368,74)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)))
(Valid (Prims.hasEq (LeftistHeap.leftist @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1))))
:qid haseqTm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named haseqTm_refine_2a9a55aa69767df3fd9b8c47f8e24270))


; Encoding query formula : forall (a: Prims.eqtype)
;   (_: LeftistHeap.ordered a)
;   (t: LeftistHeap.leftist a {~(LeftistHeap.isEmpty t)}).
;   (forall (x: a) (any_result: l: Prims.list a {LeftistHeap.sorted l}).
;       LeftistHeap.to_list t == any_result ==>
;       LeftistHeap.sorted (LeftistHeap.to_list t) ==> Cons? (LeftistHeap.to_list t)) /\
;   (~(Node? t) ==> Prims.l_False) /\
;   (forall (b: a) (b: LeftistHeap.heap a) (b: LeftistHeap.heap a) (b: Prims.nat).
;       t == LeftistHeap.Node b b b b ==> b = (LeftistHeap.to_list t).hd)


; Context: While encoding a query
; While typechecking the top-level declaration `let get_min`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)))

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(369,2-371,21)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(370,2-371,21)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
@x0)
(HasType @x4
(Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1))

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(370,2-371,21)
(= (LeftistHeap.to_list @x0
@x1
@x2)
@x4)


;; def=LeftistHeap.fsti(42,17-42,25); use=LeftistHeap.fst(370,2-371,21)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list @x0
@x1
@x2)))
)

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(369,21-369,32)
(or label_1

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(370,2-371,21)
(BoxBool_proj_0 (Prims.uu___is_Cons @x0
(LeftistHeap.to_list @x0
@x1
@x2)))
)
)
 
;;no pats
:qid @query.1))

(implies 
;; def=LeftistHeap.fst(368,46-368,47); use=LeftistHeap.fst(370,8-370,9)
(not 
;; def=LeftistHeap.fst(368,46-368,47); use=LeftistHeap.fst(370,8-370,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x0
@x2))
)

label_2)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(370,2-371,21)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(370,2-371,21)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap @x0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(370,2-371,21)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(LeftistHeap.heap @x0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(370,2-371,21)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=LeftistHeap.fst(368,46-371,16); use=LeftistHeap.fst(370,8-371,16)
(= @x2
(LeftistHeap.Node @x0
@x3
@x4
@x5
@x6))
)

;; def=LeftistHeap.fst(369,8-369,32); use=LeftistHeap.fst(371,20-371,21)
(or label_3

;; def=LeftistHeap.fst(369,8-369,32); use=LeftistHeap.fst(371,20-371,21)
(= @x3
(Prims.__proj__Cons__item__hd @x0
(LeftistHeap.to_list @x0
@x1
@x2)))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.get_min, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, @fuel_correspondence_LeftistHeap.leftist_property.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @query, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Tm_unit, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, disc_equation_Prims.Cons, equation_LeftistHeap.isEmpty, equation_LeftistHeap.leftist, equation_LeftistHeap.to_list, equation_Prims.eqtype, equation_with_fuel_LeftistHeap.leftist_property.fuel_instrumented, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, proj_equation_Prims.Cons_hd, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Node_key, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_20ddcddf14e217b7652cadf2ea46a085, refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_LeftistHeap.correct_ranks, typing_LeftistHeap.leftist_property

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let get_min


; <Start encoding let get_min>

(declare-fun Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 (Term Term) Term)
(declare-fun LeftistHeap.get_min (Term Term Term) Term)

(declare-fun Tm_refine_4b089f6607916e632050b8a02de624fd (Term Term Term) Term)
;;;;;;;;;;;;;;;;{| _: ordered a |} -> t: leftist a {~(isEmpty t)} -> x: a{x = (to_list t).hd}
(declare-fun Tm_arrow_a0593a90a34b4e923d3899eeee9a0363 () Term)
(declare-fun LeftistHeap.get_min@tok () Term)



; </end encoding let get_min>

;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name LeftistHeap.get_min; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(59,45-59,74); use=LeftistHeap.fst(368,4-368,11)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named refinement_kinding_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name LeftistHeap.get_min; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(59,45-59,74); use=LeftistHeap.fst(368,4-368,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(LeftistHeap.leftist @x2
@x3))

;; def=LeftistHeap.fsti(59,59-59,71); use=LeftistHeap.fst(368,4-368,11)
(not 
;; def=LeftistHeap.fsti(59,60-59,71); use=LeftistHeap.fst(368,4-368,11)
(BoxBool_proj_0 (LeftistHeap.isEmpty @x2
@x3
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270
;;; Fact-ids: Name LeftistHeap.get_min; Namespace LeftistHeap
(assert (! 
;; def=LeftistHeap.fsti(59,45-59,74); use=LeftistHeap.fst(368,4-368,11)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)))
(Valid (Prims.hasEq (LeftistHeap.leftist @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1))))
:qid haseqTm_refine_2a9a55aa69767df3fd9b8c47f8e24270))

:named haseqTm_refine_2a9a55aa69767df3fd9b8c47f8e24270))
(push) ;; push{2

; Starting query at LeftistHeap.fsti(62,0-63,52)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (a: Prims.eqtype)
;   (_: LeftistHeap.ordered a)
;   (t: LeftistHeap.leftist a {~(LeftistHeap.isEmpty t)}).
;   (*  - Subtyping check failed
;   - Expected type Type0 got type Type0
; *)
;   forall (t': LeftistHeap.leftist a).
;     Prims.hasEq (Prims.list a) /\
;     (forall (return_val: Prims.eqtype).
;         return_val == Prims.list a ==>
;         (forall (any_result: Prims.list a).
;             LeftistHeap.to_list t' == any_result ==>
;             (forall (any_result: l: Prims.list a {LeftistHeap.sorted l}).
;                 LeftistHeap.to_list t == any_result ==>
;                 LeftistHeap.sorted (LeftistHeap.to_list t) ==> Cons? (LeftistHeap.to_list t))))


; Context: While encoding a query
; While typechecking the top-level declaration `val LeftistHeap.delete_min`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(62,0-63,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)))

;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(62,20-63,52)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fsti(63,2-63,52)
(and 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(63,16-63,23)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(63,16-63,23)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fsti(63,16-63,23)
(Prims.hasEq (Prims.list @x0))
)
)


;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fsti(63,2-63,52)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.eqtype)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fsti(63,2-63,52)
(= @x4
(Prims.list @x0))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fsti(63,2-63,52)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list @x0))

;; def=dummy(0,0-0,0); use=LeftistHeap.fsti(63,2-63,52)
(= (LeftistHeap.to_list @x0
@x1
@x3)
@x5)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fsti(63,2-63,52)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1))

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fsti(63,35-63,49)
(= (LeftistHeap.to_list @x0
@x1
@x2)
@x6)


;; def=LeftistHeap.fsti(42,17-42,25); use=LeftistHeap.fsti(63,38-63,49)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list @x0
@x1
@x2)))
)

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fsti(63,38-63,49)
(or label_2

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fsti(63,38-63,49)
(BoxBool_proj_0 (Prims.uu___is_Cons @x0
(LeftistHeap.to_list @x0
@x1
@x2)))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.delete_min, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, @fuel_correspondence_LeftistHeap.leftist_property.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @query, assumption_Prims.list__uu___haseq, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Tm_unit, disc_equation_LeftistHeap.Leaf, disc_equation_Prims.Cons, equation_LeftistHeap.isEmpty, equation_LeftistHeap.leftist, equation_LeftistHeap.to_list, equation_Prims.eqtype, equation_with_fuel_LeftistHeap.leftist_property.fuel_instrumented, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.ordered, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_20ddcddf14e217b7652cadf2ea46a085, refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_LeftistHeap.correct_ranks, typing_LeftistHeap.leftist_property

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val LeftistHeap.delete_min


; <Skipped val LeftistHeap.delete_min/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! 
;; def=Prims.fst(616,20-616,22); use=Prims.fst(616,20-616,22)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (Prims.__proj__Cons__item__tl @x0
@x1)
(Prims.list @x0)))
 

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid typing_Prims.__proj__Cons__item__tl))

:named typing_Prims.__proj__Cons__item__tl))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! 
;; def=Prims.fst(616,20-616,22); use=Prims.fst(616,20-616,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.__proj__Cons__item__tl @x0
@x1)
(Prims.Cons_tl @x1))
 

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid proj_equation_Prims.Cons_tl))

:named proj_equation_Prims.Cons_tl))
(push) ;; push{2

; Starting query at LeftistHeap.fst(375,2-376,35)

(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




; Encoding query formula : forall (a: Prims.eqtype)
;   (_: LeftistHeap.ordered a)
;   (t: LeftistHeap.leftist a {~(LeftistHeap.isEmpty t)}).
;   (forall (t': LeftistHeap.leftist a).
;       Prims.hasEq (Prims.list a) /\
;       (forall (return_val: Prims.eqtype).
;           return_val == Prims.list a ==>
;           (forall (any_result: Prims.list a).
;               LeftistHeap.to_list t' == any_result ==>
;               (forall (any_result: l: Prims.list a {LeftistHeap.sorted l}).
;                   LeftistHeap.to_list t == any_result ==>
;                   LeftistHeap.sorted (LeftistHeap.to_list t) ==> Cons? (LeftistHeap.to_list t))))) /\
;   (~(Node? t) ==> Prims.l_False) /\
;   (forall (b: a) (b: LeftistHeap.heap a) (b: LeftistHeap.heap a) (b: Prims.nat).
;       t == LeftistHeap.Node b b b b ==>
;       LeftistHeap.heap_property b /\ LeftistHeap.leftist_property b /\ LeftistHeap.correct_ranks b /\
;       (forall (any_result: LeftistHeap.heap a).
;           b == any_result ==>
;           LeftistHeap.heap_property b /\ LeftistHeap.leftist_property b /\
;           LeftistHeap.correct_ranks b /\
;           (forall (any_result: LeftistHeap.heap a).
;               b == any_result ==>
;               (forall (any_result:
;                   t:
;                   LeftistHeap.leftist a
;                     { LeftistHeap.to_list t =
;                       LeftistHeap.merge (LeftistHeap.to_list b) (LeftistHeap.to_list b) }).
;                   LeftistHeap.merge_heaps b b == any_result ==>
;                   LeftistHeap.to_list (LeftistHeap.merge_heaps b b) =
;                   LeftistHeap.merge (LeftistHeap.to_list b) (LeftistHeap.to_list b) ==>
;                   LeftistHeap.to_list (LeftistHeap.merge_heaps b b) = (LeftistHeap.to_list t).tl))))


; Context: While encoding a query
; While typechecking the top-level declaration `let delete_min`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(LeftistHeap.ordered @x0))
(HasType @x2
(Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270 @x0
@x1)))

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(374,2-376,35)
(and 
;; def=dummy(0,0-0,0); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(LeftistHeap.leftist @x0
@x1))

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(375,2-376,35)
(and 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(374,16-374,23)
(or label_1

;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(375,2-376,35)
(Valid 
;; def=Prims.fst(73,23-73,30); use=LeftistHeap.fst(375,2-376,35)
(Prims.hasEq (Prims.list @x0))
)
)


;; def=Prims.fst(356,2-356,58); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.eqtype)

;; def=Prims.fst(356,26-356,41); use=LeftistHeap.fst(375,2-376,35)
(= @x4
(Prims.list @x0))
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list @x0))

;; def=dummy(0,0-0,0); use=LeftistHeap.fst(375,2-376,35)
(= (LeftistHeap.to_list @x0
@x1
@x3)
@x5)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Tm_refine_32dfddc0b557508b5956c23209347ea1 @x0
@x1))

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(375,2-376,35)
(= (LeftistHeap.to_list @x0
@x1
@x2)
@x6)


;; def=LeftistHeap.fsti(42,17-42,25); use=LeftistHeap.fst(375,2-376,35)
(BoxBool_proj_0 (LeftistHeap.sorted @x0
@x1
(LeftistHeap.to_list @x0
@x1
@x2)))
)

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(374,38-374,49)
(or label_2

;; def=Prims.fst(616,4-616,8); use=LeftistHeap.fst(375,2-376,35)
(BoxBool_proj_0 (Prims.uu___is_Cons @x0
(LeftistHeap.to_list @x0
@x1
@x2)))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))

(implies 
;; def=LeftistHeap.fst(373,49-373,50); use=LeftistHeap.fst(375,8-375,9)
(not 
;; def=LeftistHeap.fst(373,49-373,50); use=LeftistHeap.fst(375,8-375,9)
(BoxBool_proj_0 (LeftistHeap.uu___is_Node @x0
@x2))
)

label_3)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(LeftistHeap.heap @x0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(LeftistHeap.heap @x0))

;; def=Prims.fst(413,99-413,120); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=LeftistHeap.fst(373,49-376,16); use=LeftistHeap.fst(375,8-376,16)
(= @x2
(LeftistHeap.Node @x0
@x3
@x4
@x5
@x6))
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(375,2-376,35)
(and 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(376,32-376,33)
(or label_4

;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(376,32-376,33)
(Valid 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(376,32-376,33)
(LeftistHeap.heap_property @x0
@x1
@x4)
)
)


;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(376,32-376,33)
(or label_5

;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(376,32-376,33)
(BoxBool_proj_0 (LeftistHeap.leftist_property @x0
@x4))
)


;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(376,32-376,33)
(or label_6

;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(376,32-376,33)
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x0
@x4))
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(LeftistHeap.heap @x0))

;; def=LeftistHeap.fsti(53,50-53,52); use=LeftistHeap.fst(375,2-376,35)
(= @x4
@x7)
)

;; def=Prims.fst(459,77-459,89); use=LeftistHeap.fst(375,2-376,35)
(and 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(376,34-376,35)
(or label_7

;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(376,34-376,35)
(Valid 
;; def=LeftistHeap.fst(344,11-344,26); use=LeftistHeap.fst(376,34-376,35)
(LeftistHeap.heap_property @x0
@x1
@x5)
)
)


;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(376,34-376,35)
(or label_8

;; def=LeftistHeap.fst(344,30-344,48); use=LeftistHeap.fst(376,34-376,35)
(BoxBool_proj_0 (LeftistHeap.leftist_property @x0
@x5))
)


;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(376,34-376,35)
(or label_9

;; def=LeftistHeap.fst(344,52-344,67); use=LeftistHeap.fst(376,34-376,35)
(BoxBool_proj_0 (LeftistHeap.correct_ranks @x0
@x5))
)


;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(LeftistHeap.heap @x0))

;; def=LeftistHeap.fsti(53,53-53,55); use=LeftistHeap.fst(375,2-376,35)
(= @x5
@x8)
)

;; def=Prims.fst(451,66-451,102); use=LeftistHeap.fst(375,2-376,35)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_5b3dfbea48b21597dc91a365a31690d6 @x0
@x1
@x4
@x5))

;; def=LeftistHeap.fst(374,2-376,35); use=LeftistHeap.fst(375,2-376,35)
(= (LeftistHeap.merge_heaps @x0
@x1
@x4
@x5)
@x9)


;; def=LeftistHeap.fsti(54,16-54,59); use=LeftistHeap.fst(376,20-376,35)
(= (LeftistHeap.to_list @x0
@x1
(LeftistHeap.merge_heaps @x0
@x1
@x4
@x5))
(LeftistHeap.merge @x0
@x1
(LeftistHeap.to_list @x0
@x1
@x4)
(LeftistHeap.to_list @x0
@x1
@x5)))
)

;; def=LeftistHeap.fst(374,16-374,49); use=LeftistHeap.fst(376,20-376,35)
(or label_10

;; def=LeftistHeap.fst(374,16-374,49); use=LeftistHeap.fst(376,20-376,35)
(= (LeftistHeap.to_list @x0
@x1
(LeftistHeap.merge_heaps @x0
@x1
@x4
@x5))
(Prims.__proj__Cons__item__tl @x0
(LeftistHeap.to_list @x0
@x1
@x2)))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (LeftistHeap.delete_min, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, @fuel_correspondence_LeftistHeap.leftist_property.fuel_instrumented, @fuel_correspondence_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_correspondence_LeftistHeap.to_list_aux.fuel_instrumented, @fuel_irrelevance_LeftistHeap.correct_ranks.fuel_instrumented, @fuel_irrelevance_LeftistHeap.leftist_property.fuel_instrumented, @fuel_irrelevance_LeftistHeap.lower_bounded_heap.fuel_instrumented, @fuel_irrelevance_LeftistHeap.to_list_aux.fuel_instrumented, @query, assumption_Prims.list__uu___haseq, b2t_def, bool_inversion, constructor_distinct_LeftistHeap.Node, constructor_distinct_Prims.Cons, constructor_distinct_Tm_unit, disc_equation_LeftistHeap.Leaf, disc_equation_LeftistHeap.Node, disc_equation_Prims.Cons, equation_LeftistHeap.heap_property, equation_LeftistHeap.isEmpty, equation_LeftistHeap.leftist, equation_LeftistHeap.to_list, equation_Prims.eqtype, equation_with_fuel_LeftistHeap.correct_ranks.fuel_instrumented, equation_with_fuel_LeftistHeap.leftist_property.fuel_instrumented, equation_with_fuel_LeftistHeap.lower_bounded_heap.fuel_instrumented, equation_with_fuel_LeftistHeap.to_list_aux.fuel_instrumented, fuel_guarded_inversion_LeftistHeap.heap, fuel_guarded_inversion_LeftistHeap.ordered, l_and-interp, primitive_Prims.op_AmpAmp, proj_equation_Prims.Cons_tl, projection_inverse_BoxBool_proj_0, projection_inverse_LeftistHeap.Node_a, projection_inverse_LeftistHeap.Node_key, projection_inverse_LeftistHeap.Node_left, projection_inverse_LeftistHeap.Node_rank, projection_inverse_LeftistHeap.Node_right, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_20ddcddf14e217b7652cadf2ea46a085, refinement_interpretation_Tm_refine_2a9a55aa69767df3fd9b8c47f8e24270, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, token_correspondence_LeftistHeap.correct_ranks.fuel_instrumented, token_correspondence_LeftistHeap.leftist_property.fuel_instrumented, true_interp, typing_LeftistHeap.correct_ranks, typing_LeftistHeap.leftist_property, typing_LeftistHeap.lower_bounded_heap
