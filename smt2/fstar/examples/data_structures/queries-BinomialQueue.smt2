
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for interface FStar.Set


; <Skipped #set-options "--initial_fuel 0 --max_fuel 0 --initial_ifuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Set.set>

(declare-fun FStar.Set.set (Term) Term)

(declare-fun FStar.Set.set@tok () Term)

; </end encoding val FStar.Set.set>


; <Start encoding val FStar.Set.equal>

(declare-fun FStar.Set.equal (Term Term Term) Term)
(declare-fun Tm_arrow_3c4f6e4cf547bd34ec8e06fa6c99957f () Term)
(declare-fun FStar.Set.equal@tok () Term)

; </end encoding val FStar.Set.equal>


; <Start encoding val FStar.Set.mem>

(declare-fun FStar.Set.mem (Term Term Term) Term)
(declare-fun Tm_arrow_3622740f6f31d7fd022d9da9e7023a5e () Term)
(declare-fun FStar.Set.mem@tok () Term)

; </end encoding val FStar.Set.mem>


; <Start encoding val FStar.Set.empty>

(declare-fun FStar.Set.empty (Term) Term)
(declare-fun Tm_arrow_8126140804a823c0abf765b538511539 () Term)
(declare-fun FStar.Set.empty@tok () Term)

; </end encoding val FStar.Set.empty>


; <Start encoding val FStar.Set.singleton>

(declare-fun FStar.Set.singleton (Term Term) Term)
(declare-fun Tm_arrow_764304f899737575fb0645eff5d55885 () Term)
(declare-fun FStar.Set.singleton@tok () Term)

; </end encoding val FStar.Set.singleton>


; <Start encoding val FStar.Set.union>

(declare-fun FStar.Set.union (Term Term Term) Term)
(declare-fun Tm_arrow_7571f855c31e3c10cb35bbdc0f3ae878 () Term)
(declare-fun FStar.Set.union@tok () Term)

; </end encoding val FStar.Set.union>


; <Start encoding val FStar.Set.intersect>

(declare-fun FStar.Set.intersect (Term Term Term) Term)

(declare-fun FStar.Set.intersect@tok () Term)

; </end encoding val FStar.Set.intersect>


; <Start encoding val FStar.Set.complement>

(declare-fun FStar.Set.complement (Term Term) Term)
(declare-fun Tm_arrow_4a14af1f2d9ff62069ebb44d0d1980f6 () Term)
(declare-fun FStar.Set.complement@tok () Term)

; </end encoding val FStar.Set.complement>


; <Start encoding val FStar.Set.intension>

(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)
(declare-fun FStar.Set.intension (Term Term) Term)

(declare-fun Tm_ghost_arrow_04e42a5c0c55c36964ab6333a076e29e () Term)
(declare-fun FStar.Set.intension@tok () Term)

; </end encoding val FStar.Set.intension>


; <Start encoding let disjoint>

(declare-fun FStar.Set.disjoint (Term Term Term) Term)

(declare-fun FStar.Set.disjoint@tok () Term)

; </end encoding let disjoint>


; <Start encoding let subset>

(declare-fun FStar.Set.subset (Term Term Term) Term)
(declare-fun Tm_arrow_9a1bfd7a415bf0250a3dd161144f27fa () Term)
(declare-fun FStar.Set.subset@tok () Term)

; </end encoding let subset>


; <Start encoding let add>

(declare-fun FStar.Set.add (Term Term Term) Term)
(declare-fun Tm_arrow_3e561cbcf9b0a4b95f6e5d77760b40db () Term)
(declare-fun FStar.Set.add@tok () Term)

; </end encoding let add>


; <Start encoding let remove>

(declare-fun FStar.Set.remove (Term Term Term) Term)

(declare-fun FStar.Set.remove@tok () Term)

; </end encoding let remove>


; <Start encoding val FStar.Set.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_empty@tok () Term)

; </end encoding val FStar.Set.mem_empty>


; <Start encoding val FStar.Set.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_singleton@tok () Term)

; </end encoding val FStar.Set.mem_singleton>


; <Start encoding val FStar.Set.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_union@tok () Term)

; </end encoding val FStar.Set.mem_union>


; <Start encoding val FStar.Set.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intersect@tok () Term)

; </end encoding val FStar.Set.mem_intersect>


; <Start encoding val FStar.Set.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_complement@tok () Term)

; </end encoding val FStar.Set.mem_complement>


; <Start encoding val FStar.Set.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intension@tok () Term)

; </end encoding val FStar.Set.mem_intension>


; <Start encoding val FStar.Set.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_subset@tok () Term)

; </end encoding val FStar.Set.mem_subset>


; <Start encoding val FStar.Set.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.subset_mem@tok () Term)

; </end encoding val FStar.Set.subset_mem>


; <Start encoding val FStar.Set.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_intro@tok () Term)

; </end encoding val FStar.Set.lemma_equal_intro>


; <Start encoding val FStar.Set.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_elim@tok () Term)

; </end encoding val FStar.Set.lemma_equal_elim>


; <Start encoding val FStar.Set.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_refl@tok () Term)

; </end encoding val FStar.Set.lemma_equal_refl>


; <Start encoding val FStar.Set.disjoint_not_in_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.disjoint_not_in_both (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.disjoint_not_in_both@tok () Term)

; </end encoding val FStar.Set.disjoint_not_in_both>


; <Skipped #reset-options/>


; <Start encoding let rec as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Set.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Set.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.Set.as_set_ (Term Term) Term)
(declare-fun FStar.Set.as_set_@tok () Term)
(declare-fun Tm_arrow_37c32948884378803a50151abdb3cb09 () Term)

; </end encoding let rec as_set'>


; <Start encoding let as_set>

(declare-fun FStar.Set.as_set (Term Term) Term)

(declare-fun FStar.Set.as_set@tok () Term)

; </end encoding let as_set>


; <Start encoding let lemma_disjoint_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_disjoint_subset (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_disjoint_subset@tok () Term)

; </end encoding let lemma_disjoint_subset>


; End Externals for interface FStar.Set


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)
(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)

(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)



(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot

(push) ;; push{1

; Internals for BinomialQueue


; encoding sigelt let key_t


; <Start encoding let key_t>

(declare-fun BinomialQueue.key_t () Term)

; </end encoding let key_t>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Nil @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid typing_Prims.uu___is_Nil))

:named typing_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Cons @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid typing_Prims.uu___is_Cons))

:named typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! 
;; def=Prims.fst(616,20-616,22); use=Prims.fst(616,20-616,22)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (Prims.__proj__Cons__item__tl @x0
@x1)
(Prims.list @x0)))
 

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid typing_Prims.__proj__Cons__item__tl))

:named typing_Prims.__proj__Cons__item__tl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (FStar.List.Tot.Base.last @x0
@x1)
@x0))
 

:pattern ((FStar.List.Tot.Base.last @x0
@x1))
:qid typing_FStar.List.Tot.Base.last))

:named typing_FStar.List.Tot.Base.last))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= (ApplyTT Prims.list@tok
@x0)
(Prims.list @x0))
 

:pattern ((ApplyTT Prims.list@tok
@x0))

:pattern ((Prims.list @x0))
:qid token_correspondence_Prims.list@tok))

:named token_correspondence_Prims.list@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x1)))
(HasType (FStar.List.Tot.Base.last.fuel_instrumented @u0
@x1
@x2)
@x1))
 

:pattern ((FStar.List.Tot.Base.last.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_FStar.List.Tot.Base.last.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.last.fuel_instrumented))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Prims.Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid subterm_ordering_Prims.Cons))

:named subterm_ordering_Prims.Cons))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named refinement_kinding_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x2))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(BoxBool_proj_0 (Prims.uu___is_Cons @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x2)))
:qid refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= (Prims.Nil_a (Prims.Nil @x0))
@x0)
 

:pattern ((Prims.Nil @x0))
:qid projection_inverse_Prims.Nil_a))

:named projection_inverse_Prims.Nil_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_tl (Prims.Cons @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_tl))

:named projection_inverse_Prims.Cons_tl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_hd (Prims.Cons @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_hd))

:named projection_inverse_Prims.Cons_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_a (Prims.Cons @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_a))

:named projection_inverse_Prims.Cons_a))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! 
;; def=Prims.fst(616,20-616,22); use=Prims.fst(616,20-616,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.__proj__Cons__item__tl @x0
@x1)
(Prims.Cons_tl @x1))
 

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid proj_equation_Prims.Cons_tl))

:named proj_equation_Prims.Cons_tl))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.list@tok))
:named pre_kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (and (IsTotFun Prims.list@tok)

;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.list @x0)
Tm_type))
 

:pattern ((Prims.list @x0))
:qid kinding_Prims.list@tok))
)
:named kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0))))
:qid haseqTm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named haseqTm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2))
(or (and (is-Prims.Nil @x1)
(= @x2
(Prims.Nil_a @x1)))
(and (is-Prims.Cons @x1)
(= @x2
(Prims.Cons_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2)))
:qid fuel_guarded_inversion_Prims.list))

:named fuel_guarded_inversion_Prims.list))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 319
(Term_constr_id Prims.list@tok))
:named fresh_token_Prims.list@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.last
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x1)))
(= (FStar.List.Tot.Base.last.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (and (is-Prims.Cons @lb3)
(is-Prims.Nil (Prims.Cons_tl @lb3)))
(Prims.Cons_hd @lb3)
(ite (is-Prims.Cons @lb3)
(FStar.List.Tot.Base.last.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb3))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.last.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_FStar.List.Tot.Base.last.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.last.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Nil @x0
@x1)
(BoxBool (is-Prims.Nil @x1)))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid disc_equation_Prims.Nil))

:named disc_equation_Prims.Nil))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Cons @x0
@x1)
(BoxBool (is-Prims.Cons @x1)))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid disc_equation_Prims.Cons))

:named disc_equation_Prims.Cons))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Nil@tok))

:named data_typing_intro_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1)))
(HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Cons@tok))

:named data_typing_intro_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2)))
:qid data_elim_Prims.Nil))

:named data_elim_Prims.Nil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
(Prims.list @x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid data_elim_Prims.Cons))

:named data_elim_Prims.Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= 318
(Term_constr_id (Prims.list @x0)))
 

:pattern ((Prims.list @x0))
:qid constructor_distinct_Prims.list))

:named constructor_distinct_Prims.list))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= 325
(Term_constr_id (Prims.Nil @x0)))
 

:pattern ((Prims.Nil @x0))
:qid constructor_distinct_Prims.Nil))

:named constructor_distinct_Prims.Nil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 330
(Term_constr_id (Prims.Cons @x0
@x1
@x2)))
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid constructor_distinct_Prims.Cons))

:named constructor_distinct_Prims.Cons))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;Assumption: Prims.list__uu___haseq
;;; Fact-ids: Name Prims.list__uu___haseq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Prims.hasEq (Prims.list @x0)))
:qid assumption_Prims.list__uu___haseq))
:named assumption_Prims.list__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.list @x2))
(= (Prims.list @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.list @x2)))
:qid Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))

:named Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.last.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.last.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.last.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.last @x0
@x1)
(FStar.List.Tot.Base.last.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.last @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(31,2-33,27)

;;;;;;;;;;;;;;;;a : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;x : a (a)
(declare-fun x_e09860b75d8922ab497a3e5bc9347578_2 () Term)
;;;;;;;;;;;;;;;;binder_x_e09860b75d8922ab497a3e5bc9347578_2
;;; Fact-ids: 
(assert (! (HasType x_e09860b75d8922ab497a3e5bc9347578_2
x_fe28d8bcde588226b4e538b35321de05_1)
:named binder_x_e09860b75d8922ab497a3e5bc9347578_2))
;;;;;;;;;;;;;;;;l : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_3 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.last_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.last_cons@tok () Term)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591
Tm_type)
:named refinement_kinding_Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.List.Tot.Base.fst(58,10-58,29); use=BinomialQueue.fst(31,2-33,27)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591)
(and (HasTypeFuel @u0
@x1
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(31,2-33,27)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591))
:qid refinement_interpretation_Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591))

:named refinement_interpretation_Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591))
;;;;;;;;;;;;;;;;haseq for Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591))
(Valid (Prims.hasEq (Prims.list x_fe28d8bcde588226b4e538b35321de05_1))))
:named haseqTm_refine_89abfbf1dd7254ec2f6bfc654aa43591))

; Encoding query formula : (forall (_: Prims.squash (Cons? l)).
;     (*  - Could not prove post-condition
; *)
;     Cons? (x :: l) /\
;     (forall (return_val: l: Prims.list a {Cons? l}).
;         return_val == x :: l ==>
;         (forall (any_result: a). FStar.List.Tot.Base.last (x :: l) == any_result ==> Cons? l))) /\
; (forall (p: Prims.pure_post Prims.unit).
;     Cons? l /\
;     (forall (pure_result: Prims.unit).
;         FStar.List.Tot.Base.last (x :: l) == FStar.List.Tot.Base.last l ==> p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Cons? l && Nil? l.tl) /\ ~(Cons? l) ==> Prims.l_False) /\
;         (forall (b: a). l == [b] ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Cons? l && Nil? l.tl) ==>
;           (forall (b: a) (b: Prims.list a).
;               l == b :: b ==>
;               (x << x \/ b << l) /\
;               (forall (any_result: Prims.list a).
;                   b == any_result ==>
;                   Cons? b /\
;                   (forall (pure_result: Prims.unit).
;                       FStar.List.Tot.Base.last (x :: b) == FStar.List.Tot.Base.last b ==>
;                       k pure_result))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec last_cons`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(Prims.squash (Prims.b2t (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(31,2-33,27)
(and 
;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(28,22-28,28)
(or label_1

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(31,2-33,27)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_3)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_refine_89abfbf1dd7254ec2f6bfc654aa43591)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(31,2-33,27)
(= @x1
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(175,35-175,36); use=BinomialQueue.fst(31,2-33,27)
(= (FStar.List.Tot.Base.last x_fe28d8bcde588226b4e538b35321de05_1
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
@x2)
)

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(25,35-25,36)
(or label_2

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(31,2-33,27)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(27,16-27,23); use=BinomialQueue.fst(31,2-33,27)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x1 Term))
 (! (implies (and (or label_3
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(28,15-28,40); use=BinomialQueue.fst(31,2-33,27)
(or label_4

;; def=BinomialQueue.fst(28,15-28,40); use=BinomialQueue.fst(31,2-33,27)
(= (FStar.List.Tot.Base.last x_fe28d8bcde588226b4e538b35321de05_1
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
(FStar.List.Tot.Base.last x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(31,2-33,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(31,2-33,27)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(31,2-33,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(31,2-33,27)
(ApplyTT @x0
@x1)
)
)
:qid @query.4))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(31,2-33,27)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(31,2-33,27)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(31,2-33,27)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(31,2-33,27)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.6))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(31,2-33,27)
(and (implies 
;; def=BinomialQueue.fst(25,35-33,27); use=BinomialQueue.fst(31,2-33,27)
(and 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(31,2-33,27)
(not 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(31,2-33,27)
(and (BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
(Prims.__proj__Cons__item__tl x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))))
)


;; def=BinomialQueue.fst(25,35-25,36); use=BinomialQueue.fst(31,8-31,9)
(not 
;; def=BinomialQueue.fst(25,35-25,36); use=BinomialQueue.fst(31,8-31,9)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)
)

label_5)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=BinomialQueue.fst(25,35-32,7); use=BinomialQueue.fst(31,8-32,7)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
@x2
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1)))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(31,2-33,27)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(31,2-33,27)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(31,2-33,27)
(not 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(31,2-33,27)
(and (BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
(Prims.__proj__Cons__item__tl x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=BinomialQueue.fst(25,35-33,9); use=BinomialQueue.fst(31,8-33,9)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(31,2-33,27)
(and 
;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(33,25-33,27)
(or label_6

;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(33,25-33,27)
(Valid 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(33,25-33,27)
(Prims.precedes x_fe28d8bcde588226b4e538b35321de05_1
x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_e09860b75d8922ab497a3e5bc9347578_2)
)


;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(33,25-33,27)
(Valid 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(33,25-33,27)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(31,2-33,27)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=BinomialQueue.fst(25,35-33,9); use=BinomialQueue.fst(31,2-33,27)
(= @x3
@x4)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(33,13-33,22)
(and 
;; def=BinomialQueue.fst(27,16-27,23); use=BinomialQueue.fst(33,13-33,22)
(or label_7

;; def=BinomialQueue.fst(27,16-27,23); use=BinomialQueue.fst(33,13-33,22)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
@x3))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(33,13-33,22)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=BinomialQueue.fst(28,15-28,40); use=BinomialQueue.fst(33,13-33,22)
(= (FStar.List.Tot.Base.last x_fe28d8bcde588226b4e538b35321de05_1
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
@x3))
(FStar.List.Tot.Base.last x_fe28d8bcde588226b4e538b35321de05_1
@x3))
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(33,13-33,22)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(33,13-33,22)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.3))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.last_cons, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented, @query, b2t_def, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3, binder_x_e09860b75d8922ab497a3e5bc9347578_2, binder_x_fe28d8bcde588226b4e538b35321de05_1, constructor_distinct_Prims.Cons, data_typing_intro_Prims.Cons@tok, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_Prims.squash, equation_with_fuel_FStar.List.Tot.Base.last.fuel_instrumented, fuel_guarded_inversion_Prims.list, proj_equation_Prims.Cons_tl, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(HasType (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid typing_Prims.op_Equals_Equals_Equals))

:named typing_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Equation for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))

;; def=Prims.fst(498,52-498,68); use=Prims.fst(498,52-498,68)
(and 
;; def=Prims.fst(498,52-498,58); use=Prims.fst(498,52-498,58)
(= @x0
@x1)


;; def=Prims.fst(498,62-498,68); use=Prims.fst(498,62-498,68)
(= @x2
@x3)
)
)
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid equation_Prims.op_Equals_Equals_Equals))

:named equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Prop-typing for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(Valid (Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_Prims.op_Equals_Equals_Equals))

:named defn_equation_Prims.op_Equals_Equals_Equals))
(push) ;; push{2

; Starting query at BinomialQueue.fst(25,0-33,27)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_1dd727e8bf969144ba6027f85efec68f (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(25,29-33,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_1dd727e8bf969144ba6027f85efec68f @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_1dd727e8bf969144ba6027f85efec68f @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_1dd727e8bf969144ba6027f85efec68f))

:named refinement_kinding_Tm_refine_1dd727e8bf969144ba6027f85efec68f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(25,29-33,27)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1dd727e8bf969144ba6027f85efec68f @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(25,29-33,27)

;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(25,29-33,27)
(or 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(31,2-33,27)
(Valid 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(31,2-33,27)
(Prims.precedes @x2
@x3
@x4
@x5)
)


;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(25,29-33,27)
(and 
;; def=BinomialQueue.fst(25,29-25,30); use=BinomialQueue.fst(25,29-25,30)
(Valid 
;; def=BinomialQueue.fst(25,29-25,30); use=BinomialQueue.fst(25,29-25,30)
(Prims.op_Equals_Equals_Equals @x2
@x3
@x4
@x5)
)


;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(31,2-33,27)
(Valid 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(31,2-33,27)
(Prims.precedes (Prims.list @x2)
(Prims.list @x3)
@x1
@x6)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1dd727e8bf969144ba6027f85efec68f @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_1dd727e8bf969144ba6027f85efec68f))

:named refinement_interpretation_Tm_refine_1dd727e8bf969144ba6027f85efec68f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1dd727e8bf969144ba6027f85efec68f
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(25,29-33,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1dd727e8bf969144ba6027f85efec68f @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1dd727e8bf969144ba6027f85efec68f @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_1dd727e8bf969144ba6027f85efec68f))

:named haseqTm_refine_1dd727e8bf969144ba6027f85efec68f))


; Encoding query formula : forall (a: Type)
;   (x: a)
;   (l: Prims.list a)
;   (a: Type)
;   (x: a)
;   (l: Prims.list a {x << x \/ x === x /\ l << l})
;   (_: Prims.squash (Cons? l)).
;   (*  - Could not prove post-condition
; *)
;   Cons? (x :: l) /\
;   (forall (return_val: l: Prims.list a {Cons? l}).
;       return_val == x :: l ==>
;       (forall (any_result: a).
;           FStar.List.Tot.Base.last (x :: l) == any_result ==>
;           x << x \/ x === x /\ l << l ==> Cons? l))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec last_cons`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(25,0-33,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
(Prims.list @x0))
(HasType @x3
Tm_type)
(HasType @x4
@x3)
(HasType @x5
(Tm_refine_1dd727e8bf969144ba6027f85efec68f @x3
@x0
@x4
@x1
@x2))
(HasType @x6
(Prims.squash (Prims.b2t (Prims.uu___is_Cons @x3
@x5)))))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(28,15-28,40)
(and 
;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(28,22-28,28)
(or label_1

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(28,22-28,28)
(BoxBool_proj_0 (Prims.uu___is_Cons @x3
(Prims.Cons @x3
@x4
@x5)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(28,15-28,40)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x3))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(28,15-28,40)
(= @x7
(Prims.Cons @x3
@x4
@x5))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(28,15-28,40)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
@x3)

;; def=Prims.fst(175,35-175,36); use=BinomialQueue.fst(28,15-28,40)
(= (FStar.List.Tot.Base.last @x3
(Prims.Cons @x3
@x4
@x5))
@x8)


;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(28,39-28,40)

;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(28,39-28,40)
(or 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(28,39-28,40)
(Valid 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(28,39-28,40)
(Prims.precedes @x3
@x0
@x4
@x1)
)


;; def=BinomialQueue.fst(25,29-33,27); use=BinomialQueue.fst(28,39-28,40)
(and 
;; def=BinomialQueue.fst(25,29-25,30); use=BinomialQueue.fst(28,39-28,40)
(Valid 
;; def=BinomialQueue.fst(25,29-25,30); use=BinomialQueue.fst(28,39-28,40)
(Prims.op_Equals_Equals_Equals @x3
@x0
@x4
@x1)
)


;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(28,39-28,40)
(Valid 
;; def=BinomialQueue.fst(31,2-33,27); use=BinomialQueue.fst(28,39-28,40)
(Prims.precedes (Prims.list @x3)
(Prims.list @x0)
@x5
@x2)
)
)
)

)

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(28,39-28,40)
(or label_2

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(28,39-28,40)
(BoxBool_proj_0 (Prims.uu___is_Cons @x3
@x5))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.last_cons, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, constructor_distinct_Prims.Cons, disc_equation_Prims.Cons, equation_Prims.squash, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec last_cons


; <Start encoding let rec last_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.last_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.last_cons@tok () Term)

; </end encoding let rec last_cons>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type BinomialQueue.tree


; <Start encoding type BinomialQueue.tree>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BinomialQueue.tree () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun BinomialQueue.Leaf () Term)
;;;;;;;;;;;;;;;;data constructor proxy: BinomialQueue.Leaf
(declare-fun BinomialQueue.Leaf@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun BinomialQueue.Internal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BinomialQueue.Internal__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BinomialQueue.Internal__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BinomialQueue.Internal__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: BinomialQueue.Internal
(declare-fun BinomialQueue.Internal@tok () Term)
;;;;;;;;;;;;;;;;_0: tree -> _1: key_t -> _2: tree -> tree
(declare-fun Tm_arrow_c7f9956b84389fdaf33db394ac5568d8 () Term)

; <start constructor BinomialQueue.tree>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BinomialQueue.tree ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
119)
(= __@x0
BinomialQueue.tree)))

; </end constructor BinomialQueue.tree>


; <start constructor BinomialQueue.Leaf>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BinomialQueue.Leaf ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
BinomialQueue.Leaf)))

; </end constructor BinomialQueue.Leaf>


; <start constructor BinomialQueue.Internal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BinomialQueue.Internal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
(BinomialQueue.Internal (BinomialQueue.Internal__0 __@x0)
(BinomialQueue.Internal__1 __@x0)
(BinomialQueue.Internal__2 __@x0)))))

; </end constructor BinomialQueue.Internal>


; </end encoding type BinomialQueue.tree>

;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.Leaf@tok
BinomialQueue.tree)
:named typing_tok_BinomialQueue.Leaf@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.key_t; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.key_t
Tm_type)
:named typing_BinomialQueue.key_t))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(BinomialQueue.Internal @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(BinomialQueue.Internal @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(BinomialQueue.Internal @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree))
:qid subterm_ordering_BinomialQueue.Internal))

:named subterm_ordering_BinomialQueue.Internal))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.Internal__2 (BinomialQueue.Internal @x0
@x1
@x2))
@x2)
 

:pattern ((BinomialQueue.Internal @x0
@x1
@x2))
:qid projection_inverse_BinomialQueue.Internal__2))

:named projection_inverse_BinomialQueue.Internal__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.Internal__1 (BinomialQueue.Internal @x0
@x1
@x2))
@x1)
 

:pattern ((BinomialQueue.Internal @x0
@x1
@x2))
:qid projection_inverse_BinomialQueue.Internal__1))

:named projection_inverse_BinomialQueue.Internal__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.Internal__0 (BinomialQueue.Internal @x0
@x1
@x2))
@x0)
 

:pattern ((BinomialQueue.Internal @x0
@x1
@x2))
:qid projection_inverse_BinomialQueue.Internal__0))

:named projection_inverse_BinomialQueue.Internal__0))
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.tree
Tm_type)
:named kinding_BinomialQueue.tree@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name BinomialQueue.key_t; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.key_t
Tm_type)
:named function_token_typing_BinomialQueue.key_t))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(38,5-38,9); use=BinomialQueue.fst(38,5-38,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
BinomialQueue.tree)
(or (is-BinomialQueue.Leaf @x1)
(is-BinomialQueue.Internal @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
BinomialQueue.tree))
:qid fuel_guarded_inversion_BinomialQueue.tree))

:named fuel_guarded_inversion_BinomialQueue.tree))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.key_t
;;; Fact-ids: Name BinomialQueue.key_t; Namespace BinomialQueue
(assert (! (= BinomialQueue.key_t
Prims.nat)
:named equation_BinomialQueue.key_t))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (= BinomialQueue.Leaf@tok
BinomialQueue.Leaf)
:named equality_tok_BinomialQueue.Leaf@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(39,4-39,8); use=BinomialQueue.fst(39,4-39,8)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
BinomialQueue.Leaf
BinomialQueue.tree)
 

:pattern ((HasTypeFuel @u0
BinomialQueue.Leaf
BinomialQueue.tree))
:qid data_typing_intro_BinomialQueue.Leaf@tok))

:named data_typing_intro_BinomialQueue.Leaf@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
BinomialQueue.tree)
(HasTypeFuel @u0
@x2
BinomialQueue.key_t)
(HasTypeFuel @u0
@x3
BinomialQueue.tree))
(HasTypeFuel @u0
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree))
 

:pattern ((HasTypeFuel @u0
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree))
:qid data_typing_intro_BinomialQueue.Internal@tok))

:named data_typing_intro_BinomialQueue.Internal@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree)
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)
(HasTypeFuel @u0
@x2
BinomialQueue.key_t)
(HasTypeFuel @u0
@x3
BinomialQueue.tree)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree))
:qid data_elim_BinomialQueue.Internal))

:named data_elim_BinomialQueue.Internal))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (= 119
(Term_constr_id BinomialQueue.tree))
:named constructor_distinct_BinomialQueue.tree))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (= 125
(Term_constr_id BinomialQueue.Leaf))
:named constructor_distinct_BinomialQueue.Leaf))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 127
(Term_constr_id (BinomialQueue.Internal @x0
@x1
@x2)))
 

:pattern ((BinomialQueue.Internal @x0
@x1
@x2))
:qid constructor_distinct_BinomialQueue.Internal))

:named constructor_distinct_BinomialQueue.Internal))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(38,5-38,9); use=BinomialQueue.fst(38,5-38,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
BinomialQueue.tree)
(= BinomialQueue.tree
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
BinomialQueue.tree))
:qid BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2))

:named BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2))
(push) ;; push{4

; Starting query at BinomialQueue.fst(38,0-40,44)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : Prims.hasEq BinomialQueue.tree ==>
; (forall (_0: BinomialQueue.tree) (_1: BinomialQueue.key_t) (_2: BinomialQueue.tree).
;     Prims.hasEq BinomialQueue.tree /\ Prims.hasEq BinomialQueue.key_t /\
;     Prims.hasEq BinomialQueue.tree)


; Context: While encoding a query
; While typechecking the top-level declaration `type BinomialQueue.tree`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (implies 
;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(Valid 
;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(Prims.hasEq BinomialQueue.tree)
)


;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
BinomialQueue.tree)
(HasType @x1
BinomialQueue.key_t)
(HasType @x2
BinomialQueue.tree))

;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(and 
;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(40,15-40,19)
(or label_1

;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(Valid 
;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(Prims.hasEq BinomialQueue.tree)
)
)


;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(40,23-40,28)
(or label_2

;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(Valid 
;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(Prims.hasEq BinomialQueue.key_t)
)
)


;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(40,32-40,36)
(or label_3

;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(Valid 
;; def=BinomialQueue.fst(38,0-40,44); use=BinomialQueue.fst(38,0-40,44)
(Prims.hasEq BinomialQueue.tree)
)
)
)
)
 
;;no pats
:qid @query))
))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.tree, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type BinomialQueue.tree


; <Start encoding type BinomialQueue.tree>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BinomialQueue.tree () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun BinomialQueue.Leaf () Term)
;;;;;;;;;;;;;;;;data constructor proxy: BinomialQueue.Leaf
(declare-fun BinomialQueue.Leaf@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun BinomialQueue.Internal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BinomialQueue.Internal__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BinomialQueue.Internal__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BinomialQueue.Internal__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: BinomialQueue.Internal
(declare-fun BinomialQueue.Internal@tok () Term)
;;;;;;;;;;;;;;;;_0: tree -> _1: key_t -> _2: tree -> tree
(declare-fun Tm_arrow_c7f9956b84389fdaf33db394ac5568d8 () Term)

; <start constructor BinomialQueue.tree>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BinomialQueue.tree ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
131)
(= __@x0
BinomialQueue.tree)))

; </end constructor BinomialQueue.tree>


; <start constructor BinomialQueue.Leaf>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BinomialQueue.Leaf ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
BinomialQueue.Leaf)))

; </end constructor BinomialQueue.Leaf>


; <start constructor BinomialQueue.Internal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BinomialQueue.Internal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
139)
(= __@x0
(BinomialQueue.Internal (BinomialQueue.Internal__0 __@x0)
(BinomialQueue.Internal__1 __@x0)
(BinomialQueue.Internal__2 __@x0)))))

; </end constructor BinomialQueue.Internal>


; </end encoding type BinomialQueue.tree>


; encoding sigelt assume BinomialQueue.tree__uu___haseq


; <Start encoding assume BinomialQueue.tree__uu___haseq>


; </end encoding assume BinomialQueue.tree__uu___haseq>


; encoding sigelt val BinomialQueue.uu___is_Leaf


; <Start encoding val BinomialQueue.uu___is_Leaf>

(declare-fun BinomialQueue.uu___is_Leaf (Term) Term)
;;;;;;;;;;;;;;;;projectee: tree -> Prims.bool
(declare-fun Tm_arrow_4beb696e4b234bd28bafcb1d93f09361 () Term)
(declare-fun BinomialQueue.uu___is_Leaf@tok () Term)

; </end encoding val BinomialQueue.uu___is_Leaf>


; encoding sigelt let uu___is_Leaf


; <Skipped let uu___is_Leaf/>


; encoding sigelt val BinomialQueue.uu___is_Internal


; <Start encoding val BinomialQueue.uu___is_Internal>

(declare-fun BinomialQueue.uu___is_Internal (Term) Term)

(declare-fun BinomialQueue.uu___is_Internal@tok () Term)

; </end encoding val BinomialQueue.uu___is_Internal>


; encoding sigelt let uu___is_Internal


; <Skipped let uu___is_Internal/>


; encoding sigelt val BinomialQueue.__proj__Internal__item___0


; <Start encoding val BinomialQueue.__proj__Internal__item___0>

(declare-fun Tm_refine_8a52c7ed1e8b93d264945c07880ca137 () Term)
(declare-fun BinomialQueue.__proj__Internal__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tree{Internal? _} -> tree
(declare-fun Tm_arrow_556e92322b76d6fc50ad84d86794ea28 () Term)
(declare-fun BinomialQueue.__proj__Internal__item___0@tok () Term)

; </end encoding val BinomialQueue.__proj__Internal__item___0>

;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.Leaf@tok
BinomialQueue.tree)
:named typing_tok_BinomialQueue.Leaf@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.uu___is_Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.tree)
(HasType (BinomialQueue.uu___is_Internal @x0)
Prims.bool))
 

:pattern ((BinomialQueue.uu___is_Internal @x0))
:qid typing_BinomialQueue.uu___is_Internal))

:named typing_BinomialQueue.uu___is_Internal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.key_t; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.key_t
Tm_type)
:named typing_BinomialQueue.key_t))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(BinomialQueue.Internal @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(BinomialQueue.Internal @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(BinomialQueue.Internal @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree))
:qid subterm_ordering_BinomialQueue.Internal))

:named subterm_ordering_BinomialQueue.Internal))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name BinomialQueue.__proj__Internal__item___0; Namespace BinomialQueue
(assert (! (HasType Tm_refine_8a52c7ed1e8b93d264945c07880ca137
Tm_type)
:named refinement_kinding_Tm_refine_8a52c7ed1e8b93d264945c07880ca137))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name BinomialQueue.__proj__Internal__item___0; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_8a52c7ed1e8b93d264945c07880ca137)
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_8a52c7ed1e8b93d264945c07880ca137))
:qid refinement_interpretation_Tm_refine_8a52c7ed1e8b93d264945c07880ca137))

:named refinement_interpretation_Tm_refine_8a52c7ed1e8b93d264945c07880ca137))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.Internal__2 (BinomialQueue.Internal @x0
@x1
@x2))
@x2)
 

:pattern ((BinomialQueue.Internal @x0
@x1
@x2))
:qid projection_inverse_BinomialQueue.Internal__2))

:named projection_inverse_BinomialQueue.Internal__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.Internal__1 (BinomialQueue.Internal @x0
@x1
@x2))
@x1)
 

:pattern ((BinomialQueue.Internal @x0
@x1
@x2))
:qid projection_inverse_BinomialQueue.Internal__1))

:named projection_inverse_BinomialQueue.Internal__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.Internal__0 (BinomialQueue.Internal @x0
@x1
@x2))
@x0)
 

:pattern ((BinomialQueue.Internal @x0
@x1
@x2))
:qid projection_inverse_BinomialQueue.Internal__0))

:named projection_inverse_BinomialQueue.Internal__0))
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.tree
Tm_type)
:named kinding_BinomialQueue.tree@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8a52c7ed1e8b93d264945c07880ca137
;;; Fact-ids: Name BinomialQueue.__proj__Internal__item___0; Namespace BinomialQueue
(assert (! (iff (Valid (Prims.hasEq Tm_refine_8a52c7ed1e8b93d264945c07880ca137))
(Valid (Prims.hasEq BinomialQueue.tree)))
:named haseqTm_refine_8a52c7ed1e8b93d264945c07880ca137))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name BinomialQueue.key_t; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.key_t
Tm_type)
:named function_token_typing_BinomialQueue.key_t))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(38,5-38,9); use=BinomialQueue.fst(38,5-38,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
BinomialQueue.tree)
(or (is-BinomialQueue.Leaf @x1)
(is-BinomialQueue.Internal @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
BinomialQueue.tree))
:qid fuel_guarded_inversion_BinomialQueue.tree))

:named fuel_guarded_inversion_BinomialQueue.tree))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.key_t
;;; Fact-ids: Name BinomialQueue.key_t; Namespace BinomialQueue
(assert (! (= BinomialQueue.key_t
Prims.nat)
:named equation_BinomialQueue.key_t))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (= BinomialQueue.Leaf@tok
BinomialQueue.Leaf)
:named equality_tok_BinomialQueue.Leaf@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name BinomialQueue.uu___is_Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term))
 (! (= (BinomialQueue.uu___is_Internal @x0)
(BoxBool (is-BinomialQueue.Internal @x0)))
 

:pattern ((BinomialQueue.uu___is_Internal @x0))
:qid disc_equation_BinomialQueue.Internal))

:named disc_equation_BinomialQueue.Internal))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(39,4-39,8); use=BinomialQueue.fst(39,4-39,8)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
BinomialQueue.Leaf
BinomialQueue.tree)
 

:pattern ((HasTypeFuel @u0
BinomialQueue.Leaf
BinomialQueue.tree))
:qid data_typing_intro_BinomialQueue.Leaf@tok))

:named data_typing_intro_BinomialQueue.Leaf@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
BinomialQueue.tree)
(HasTypeFuel @u0
@x2
BinomialQueue.key_t)
(HasTypeFuel @u0
@x3
BinomialQueue.tree))
(HasTypeFuel @u0
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree))
 

:pattern ((HasTypeFuel @u0
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree))
:qid data_typing_intro_BinomialQueue.Internal@tok))

:named data_typing_intro_BinomialQueue.Internal@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree)
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)
(HasTypeFuel @u0
@x2
BinomialQueue.key_t)
(HasTypeFuel @u0
@x3
BinomialQueue.tree)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(BinomialQueue.Internal @x1
@x2
@x3)
BinomialQueue.tree))
:qid data_elim_BinomialQueue.Internal))

:named data_elim_BinomialQueue.Internal))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (= 131
(Term_constr_id BinomialQueue.tree))
:named constructor_distinct_BinomialQueue.tree))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! (= 137
(Term_constr_id BinomialQueue.Leaf))
:named constructor_distinct_BinomialQueue.Leaf))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 139
(Term_constr_id (BinomialQueue.Internal @x0
@x1
@x2)))
 

:pattern ((BinomialQueue.Internal @x0
@x1
@x2))
:qid constructor_distinct_BinomialQueue.Internal))

:named constructor_distinct_BinomialQueue.Internal))
;;;;;;;;;;;;;;;;Assumption: BinomialQueue.tree__uu___haseq
;;; Fact-ids: Name BinomialQueue.tree__uu___haseq; Namespace BinomialQueue
(assert (! (Valid (Prims.hasEq BinomialQueue.tree))
:named assumption_BinomialQueue.tree__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name BinomialQueue.tree; Namespace BinomialQueue; Name BinomialQueue.Leaf; Namespace BinomialQueue; Name BinomialQueue.Internal; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(38,5-38,9); use=BinomialQueue.fst(38,5-38,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
BinomialQueue.tree)
(= BinomialQueue.tree
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
BinomialQueue.tree))
:qid BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2))

:named BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: BinomialQueue.tree{Internal? _}).
;   (*  - Could not prove post-condition
; *) ~(Internal? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Internal__item___0`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_8a52c7ed1e8b93d264945c07880ca137)

;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(not 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.__proj__Internal__item___0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_8a52c7ed1e8b93d264945c07880ca137

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Internal__item___0


; <Skipped let __proj__Internal__item___0/>


; encoding sigelt val BinomialQueue.__proj__Internal__item___1


; <Start encoding val BinomialQueue.__proj__Internal__item___1>


(declare-fun BinomialQueue.__proj__Internal__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tree{Internal? _} -> key_t
(declare-fun Tm_arrow_a514b2ecd2d43feb0d497ede2c038450 () Term)
(declare-fun BinomialQueue.__proj__Internal__item___1@tok () Term)

; </end encoding val BinomialQueue.__proj__Internal__item___1>

(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: BinomialQueue.tree{Internal? _}).
;   (*  - Could not prove post-condition
; *) ~(Internal? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Internal__item___1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_8a52c7ed1e8b93d264945c07880ca137)

;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(not 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.__proj__Internal__item___1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_8a52c7ed1e8b93d264945c07880ca137

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Internal__item___1


; <Skipped let __proj__Internal__item___1/>


; encoding sigelt val BinomialQueue.__proj__Internal__item___2


; <Start encoding val BinomialQueue.__proj__Internal__item___2>


(declare-fun BinomialQueue.__proj__Internal__item___2 (Term) Term)


(declare-fun BinomialQueue.__proj__Internal__item___2@tok () Term)

; </end encoding val BinomialQueue.__proj__Internal__item___2>

(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: BinomialQueue.tree{Internal? _}).
;   (*  - Could not prove post-condition
; *) ~(Internal? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Internal__item___2`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_8a52c7ed1e8b93d264945c07880ca137)

;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(not 
;; def=BinomialQueue.fst(40,4-40,12); use=BinomialQueue.fst(40,4-40,12)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.__proj__Internal__item___2, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_8a52c7ed1e8b93d264945c07880ca137

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Internal__item___2


; <Skipped let __proj__Internal__item___2/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.uu___is_Leaf; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(39,4-39,8); use=BinomialQueue.fst(39,4-39,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.tree)
(HasType (BinomialQueue.uu___is_Leaf @x0)
Prims.bool))
 

:pattern ((BinomialQueue.uu___is_Leaf @x0))
:qid typing_BinomialQueue.uu___is_Leaf))

:named typing_BinomialQueue.uu___is_Leaf))
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=Prims.fst(546,4-546,18); use=Prims.fst(546,4-546,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name BinomialQueue.uu___is_Leaf; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(39,4-39,8); use=BinomialQueue.fst(39,4-39,8)
(forall ((@x0 Term))
 (! (= (BinomialQueue.uu___is_Leaf @x0)
(BoxBool (is-BinomialQueue.Leaf @x0)))
 

:pattern ((BinomialQueue.uu___is_Leaf @x0))
:qid disc_equation_BinomialQueue.Leaf))

:named disc_equation_BinomialQueue.Leaf))
(push) ;; push{2

; Starting query at BinomialQueue.fst(50,2-56,43)

;;;;;;;;;;;;;;;;d : Prims.nat (Prims.nat)
(declare-fun x_bb4e1c9af0265270f8e7a5f250f730e2_0 () Term)
;;;;;;;;;;;;;;;;binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0
;;; Fact-ids: 
(assert (! (HasType x_bb4e1c9af0265270f8e7a5f250f730e2_0
Prims.nat)
:named binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0))
;;;;;;;;;;;;;;;;upper_bound : BinomialQueue.key_t (BinomialQueue.key_t)
(declare-fun x_b19ee3ff3f4f676fe283c4905f1b1f83_1 () Term)
;;;;;;;;;;;;;;;;binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1
;;; Fact-ids: 
(assert (! (HasType x_b19ee3ff3f4f676fe283c4905f1b1f83_1
BinomialQueue.key_t)
:named binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1))
;;;;;;;;;;;;;;;;t : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_2 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2))
(declare-fun Tm_refine_599271bac19120f1f1c3a36025603ae5 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_599271bac19120f1f1c3a36025603ae5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_599271bac19120f1f1c3a36025603ae5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_599271bac19120f1f1c3a36025603ae5))

:named refinement_kinding_Tm_refine_599271bac19120f1f1c3a36025603ae5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_599271bac19120f1f1c3a36025603ae5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)

;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(or 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(50,2-56,43)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(50,2-56,43)
(Prims.precedes Prims.nat
Prims.nat
@x2
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(and 
;; def=BinomialQueue.fst(49,23-49,24); use=BinomialQueue.fst(49,23-49,24)
(Valid 
;; def=BinomialQueue.fst(49,23-49,24); use=BinomialQueue.fst(49,23-49,24)
(Prims.op_Equals_Equals_Equals Prims.nat
Prims.nat
@x2
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(49,31-56,43); use=BinomialQueue.fst(49,31-56,43)
(or 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(50,2-56,43)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(50,2-56,43)
(Prims.precedes BinomialQueue.key_t
BinomialQueue.key_t
@x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_1)
)


;; def=BinomialQueue.fst(49,31-56,43); use=BinomialQueue.fst(49,31-56,43)
(and 
;; def=BinomialQueue.fst(49,31-49,42); use=BinomialQueue.fst(49,31-49,42)
(Valid 
;; def=BinomialQueue.fst(49,31-49,42); use=BinomialQueue.fst(49,31-49,42)
(Prims.op_Equals_Equals_Equals BinomialQueue.key_t
BinomialQueue.key_t
@x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_1)
)


;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(50,2-56,43)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(50,2-56,43)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_599271bac19120f1f1c3a36025603ae5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_599271bac19120f1f1c3a36025603ae5))

:named refinement_interpretation_Tm_refine_599271bac19120f1f1c3a36025603ae5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_599271bac19120f1f1c3a36025603ae5
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_599271bac19120f1f1c3a36025603ae5 @x0
@x1)))
(Valid (Prims.hasEq BinomialQueue.tree)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_599271bac19120f1f1c3a36025603ae5 @x0
@x1))))
:qid haseqTm_refine_599271bac19120f1f1c3a36025603ae5))

:named haseqTm_refine_599271bac19120f1f1c3a36025603ae5))
(declare-fun BinomialQueue.pow2heap_pred (Term Term Term) Term)

;;;;;;;;;;;;;;;;d: Prims.nat ->     upper_bound: key_t ->     t:       tree         {d << d \/ d === d /\ (upper_bound << upper_bound \/ upper_bound === upper_bound /\ t << t)}   -> Prims.prop
(declare-fun Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76
Tm_type)
:named kinding_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76))
:qid BinomialQueue_pre_typing_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76))

:named BinomialQueue_pre_typing_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76)
(and 
;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
BinomialQueue.key_t)
(HasType @x3
(Tm_refine_599271bac19120f1f1c3a36025603ae5 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Prims.prop))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid BinomialQueue_interpretation_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76.1))

(IsTotFun @x0)

;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76.2))


;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(49,23-56,43)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
BinomialQueue.key_t))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid BinomialQueue_interpretation_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76))
:qid BinomialQueue_interpretation_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76))

:named BinomialQueue_interpretation_Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76))
(declare-fun BinomialQueue.pow2heap_pred@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT BinomialQueue.pow2heap_pred@tok
@x0)
@x1)
@x2)
(BinomialQueue.pow2heap_pred @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT BinomialQueue.pow2heap_pred@tok
@x0)
@x1)
@x2))
:qid token_correspondence_BinomialQueue.pow2heap_pred))

:named token_correspondence_BinomialQueue.pow2heap_pred))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.pow2heap_pred@tok
Tm_arrow_c6d0d5d984e273f6d7c00b2c7d63ab76))

;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT BinomialQueue.pow2heap_pred@tok
@x1)
@x2)
@x3)
(BinomialQueue.pow2heap_pred @x1
@x2
@x3))
 

:pattern ((BinomialQueue.pow2heap_pred @x1
@x2
@x3))
:qid function_token_typing_BinomialQueue.pow2heap_pred.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.pow2heap_pred@tok))
:qid function_token_typing_BinomialQueue.pow2heap_pred))

:named function_token_typing_BinomialQueue.pow2heap_pred))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
BinomialQueue.key_t)
(HasType @x2
(Tm_refine_599271bac19120f1f1c3a36025603ae5 @x0
@x1)))
(HasType (BinomialQueue.pow2heap_pred @x0
@x1
@x2)
Prims.prop))
 

:pattern ((BinomialQueue.pow2heap_pred @x0
@x1
@x2))
:qid typing_BinomialQueue.pow2heap_pred))

:named typing_BinomialQueue.pow2heap_pred))
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.prop).
;   (forall (x: Prims.prop). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Internal? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t) (b: BinomialQueue.tree).
;         t == BinomialQueue.Internal b b b ==>
;         (0 < d /\ b <= upper_bound ==>
;           d - 1 >= 0 /\
;           (forall (return_val: Prims.nat).
;               return_val == d - 1 ==>
;               d - 1 << d \/ d - 1 === d /\ (b << upper_bound \/ b === upper_bound /\ b << t))) /\
;         (0 < d /\ b <= upper_bound /\ BinomialQueue.pow2heap_pred (d - 1) b b ==>
;           d - 1 >= 0 /\
;           (forall (return_val: Prims.nat).
;               return_val == d - 1 ==>
;               d - 1 << d \/ d - 1 === d /\ (upper_bound << upper_bound \/ b << t)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec pow2heap_pred`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.prop))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(50,2-56,43)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(50,2-56,43)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(50,2-56,43)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(50,2-56,43)
(and (implies 
;; def=BinomialQueue.fst(49,51-49,52); use=BinomialQueue.fst(50,8-50,9)
(and 
;; def=BinomialQueue.fst(49,51-49,52); use=BinomialQueue.fst(50,8-50,9)
(not 
;; def=BinomialQueue.fst(49,51-49,52); use=BinomialQueue.fst(50,8-50,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=BinomialQueue.fst(49,51-49,52); use=BinomialQueue.fst(50,8-50,9)
(not 
;; def=BinomialQueue.fst(49,51-49,52); use=BinomialQueue.fst(50,8-50,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(50,2-56,43)
(not 
;; def=BinomialQueue.fst(49,51-49,52); use=BinomialQueue.fst(50,8-50,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(50,2-56,43)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(50,2-56,43)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(50,2-56,43)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(49,51-52,25); use=BinomialQueue.fst(50,8-52,25)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
(BinomialQueue.Internal @x1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(53,4-56,43)
(and (implies 
;; def=BinomialQueue.fst(53,4-54,20); use=BinomialQueue.fst(53,4-54,20)
(and 
;; def=BinomialQueue.fst(53,4-53,9); use=BinomialQueue.fst(53,4-53,9)
(< (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 x_bb4e1c9af0265270f8e7a5f250f730e2_0))


;; def=BinomialQueue.fst(54,4-54,20); use=BinomialQueue.fst(54,4-54,20)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_1))
)


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(53,4-55,32)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(55,18-55,25)
(or label_2

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(55,18-55,25)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(53,4-55,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(53,4-55,32)
(= @x4
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(55,28-55,32)
(or label_3

;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(55,28-55,32)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(55,28-55,32)
(Prims.precedes Prims.nat
Prims.nat
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(55,28-55,32)
(and 
;; def=BinomialQueue.fst(49,23-49,24); use=BinomialQueue.fst(55,28-55,32)
(Valid 
;; def=BinomialQueue.fst(49,23-49,24); use=BinomialQueue.fst(55,28-55,32)
(Prims.op_Equals_Equals_Equals Prims.nat
Prims.nat
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(49,31-56,43); use=BinomialQueue.fst(55,28-55,32)
(or 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(55,28-55,32)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(55,28-55,32)
(Prims.precedes BinomialQueue.key_t
BinomialQueue.key_t
@x2
x_b19ee3ff3f4f676fe283c4905f1b1f83_1)
)


;; def=BinomialQueue.fst(49,31-56,43); use=BinomialQueue.fst(55,28-55,32)
(and 
;; def=BinomialQueue.fst(49,31-49,42); use=BinomialQueue.fst(55,28-55,32)
(Valid 
;; def=BinomialQueue.fst(49,31-49,42); use=BinomialQueue.fst(55,28-55,32)
(Prims.op_Equals_Equals_Equals BinomialQueue.key_t
BinomialQueue.key_t
@x2
x_b19ee3ff3f4f676fe283c4905f1b1f83_1)
)


;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(55,28-55,32)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(55,28-55,32)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
)
)
)
 
;;no pats
:qid @query.5))
)
)
(implies 
;; def=BinomialQueue.fst(53,4-55,32); use=BinomialQueue.fst(53,4-55,32)
(and 
;; def=BinomialQueue.fst(53,4-53,9); use=BinomialQueue.fst(53,4-53,9)
(< (BoxInt_proj_0 (BoxInt 0))
(BoxInt_proj_0 x_bb4e1c9af0265270f8e7a5f250f730e2_0))


;; def=BinomialQueue.fst(54,4-54,20); use=BinomialQueue.fst(54,4-54,20)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_1))


;; def=BinomialQueue.fst(55,4-55,32); use=BinomialQueue.fst(55,4-55,32)
(Valid 
;; def=BinomialQueue.fst(55,4-55,32); use=BinomialQueue.fst(55,4-55,32)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
@x2
@x1)
)
)


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(53,4-56,43)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(56,18-56,25)
(or label_4

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(56,18-56,25)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(53,4-56,43)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(53,4-56,43)
(= @x4
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(56,38-56,43)
(or label_5

;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(56,38-56,43)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(56,38-56,43)
(Prims.precedes Prims.nat
Prims.nat
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(49,23-56,43); use=BinomialQueue.fst(56,38-56,43)
(and 
;; def=BinomialQueue.fst(49,23-49,24); use=BinomialQueue.fst(56,38-56,43)
(Valid 
;; def=BinomialQueue.fst(49,23-49,24); use=BinomialQueue.fst(56,38-56,43)
(Prims.op_Equals_Equals_Equals Prims.nat
Prims.nat
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(49,31-56,43); use=BinomialQueue.fst(56,38-56,43)
(or 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(56,38-56,43)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(56,38-56,43)
(Prims.precedes BinomialQueue.key_t
BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_b19ee3ff3f4f676fe283c4905f1b1f83_1)
)


;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(56,38-56,43)
(Valid 
;; def=BinomialQueue.fst(50,2-56,43); use=BinomialQueue.fst(56,38-56,43)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
)
)
 
;;no pats
:qid @query.6))
)
))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.pow2heap_pred, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, equation_Prims.nat, fuel_guarded_inversion_BinomialQueue.tree, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, well-founded-ordering-on-nat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec pow2heap_pred


; <Start encoding let rec pow2heap_pred>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.pow2heap_pred.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.pow2heap_pred.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.pow2heap_pred (Term Term Term) Term)
(declare-fun BinomialQueue.pow2heap_pred@tok () Term)
;;;;;;;;;;;;;;;;d: Prims.nat -> upper_bound: key_t -> t: tree -> Prims.prop
(declare-fun Tm_arrow_21cb432256cca27c72facd0ac6974587 () Term)

; </end encoding let rec pow2heap_pred>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named typing_Prims.pos))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named function_token_typing_Prims.pos))
;;;;;;;;;;;;;;;;Equation for Prims.pos
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (= Prims.pos
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
:named equation_Prims.pos))
(push) ;; push{2

; Starting query at BinomialQueue.fst(63,2-65,14)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (d: Prims.pos) (t: BinomialQueue.tree).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post Prims.prop).
;     (forall (x: Prims.prop). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;     (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t).
;         t == BinomialQueue.Internal b b BinomialQueue.Leaf ==> d - 1 >= 0)


; Context: While encoding a query
; While typechecking the top-level declaration `let is_pow2heap`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree))
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.prop))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(63,2-65,14)
(forall ((@x3 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(63,2-65,14)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(63,2-65,14)
(ApplyTT @x2
@x3)
)

 

:pattern ((ApplyTT @x2
@x3))
:qid @query.2))
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(63,2-65,14)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(63,2-65,14)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.key_t)

;; def=BinomialQueue.fst(62,25-64,24); use=BinomialQueue.fst(63,8-64,24)
(= @x1
(BinomialQueue.Internal @x3
@x4
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(64,42-64,49)
(or label_1

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(64,42-64,49)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.is_pow2heap, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.pos, primitive_Prims.op_Subtraction, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let is_pow2heap


; <Start encoding let is_pow2heap>

(declare-fun BinomialQueue.is_pow2heap (Term Term) Term)
;;;;;;;;;;;;;;;;d: Prims.pos -> t: tree -> Prims.prop
(declare-fun Tm_arrow_b30619ac4e35ed6a5012b3901a99502d () Term)
(declare-fun BinomialQueue.is_pow2heap@tok () Term)

; </end encoding let is_pow2heap>


; encoding sigelt let forest


; <Start encoding let forest>

(declare-fun BinomialQueue.forest () Term)

; </end encoding let forest>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (HasType Prims.l_False
Prims.logical)
:named typing_Prims.l_False))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.eq2 @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid typing_Prims.eq2))

:named typing_Prims.eq2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.pow2heap_pred; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
BinomialQueue.key_t)
(HasType @x2
BinomialQueue.tree))
(HasType (BinomialQueue.pow2heap_pred @x0
@x1
@x2)
Prims.prop))
 

:pattern ((BinomialQueue.pow2heap_pred @x0
@x1
@x2))
:qid typing_BinomialQueue.pow2heap_pred))

:named typing_BinomialQueue.pow2heap_pred))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.is_pow2heap; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(62,4-62,15); use=BinomialQueue.fst(62,4-62,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree))
(HasType (BinomialQueue.is_pow2heap @x0
@x1)
Prims.prop))
 

:pattern ((BinomialQueue.is_pow2heap @x0
@x1))
:qid typing_BinomialQueue.is_pow2heap))

:named typing_BinomialQueue.is_pow2heap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.forest; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.forest
Tm_type)
:named typing_BinomialQueue.forest))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2)
(Prims.equals @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2))

:pattern ((Prims.equals @x0
@x1
@x2))
:qid token_correspondence_Prims.equals@tok))

:named token_correspondence_Prims.equals@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.pow2heap_pred; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
BinomialQueue.key_t)
(HasType @x3
BinomialQueue.tree))
(HasType (BinomialQueue.pow2heap_pred.fuel_instrumented @u0
@x1
@x2
@x3)
Prims.prop))
 

:pattern ((BinomialQueue.pow2heap_pred.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented))

:named token_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(564,4-564,22); use=Prims.fst(564,4-564,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.equals@tok))
:named pre_kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (and (IsTotFun Prims.equals@tok)

;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.equals@tok
@x0))
 

:pattern ((ApplyTT Prims.equals@tok
@x0))
:qid kinding_Prims.equals@tok))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
:qid kinding_Prims.equals@tok.1))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.equals @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid kinding_Prims.equals@tok.2))
)
:named kinding_Prims.equals@tok))
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! (HasType Prims.empty
Tm_type)
:named kinding_Prims.empty@tok))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (HasType Prims.l_False
Prims.logical)
:named function_token_typing_Prims.l_False))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name BinomialQueue.forest; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.forest
Tm_type)
:named function_token_typing_BinomialQueue.forest))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4))
(is-Prims.Refl @x1))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4)))
:qid fuel_guarded_inversion_Prims.equals))

:named fuel_guarded_inversion_Prims.equals))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! 
;; def=Prims.fst(86,5-86,10); use=Prims.fst(86,5-86,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.empty)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Prims.empty))
:qid fuel_guarded_inversion_Prims.empty))

:named fuel_guarded_inversion_Prims.empty))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (= 135
(Term_constr_id Prims.equals@tok))
:named fresh_token_Prims.equals@tok))
;;;;;;;;;;;;;;;;False interpretation
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (iff false
(Valid Prims.l_False))
:named false_interp))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.pow2heap_pred
;;; Fact-ids: Name BinomialQueue.pow2heap_pred; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
BinomialQueue.key_t)
(HasType @x3
BinomialQueue.tree))
(= (BinomialQueue.pow2heap_pred.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x3))
(ite (is-BinomialQueue.Leaf @lb4)
(Prims.eq2 Prims.int
@x1
(BoxInt 0))
(ite (is-BinomialQueue.Internal @lb4)
(Prims.l_and (Prims.l_and (Prims.l_and (Prims.b2t (Prims.op_LessThan (BoxInt 0)
@x1))
(Prims.b2t (Prims.op_LessThanOrEqual (BinomialQueue.Internal__1 @lb4)
@x2)))
(BinomialQueue.pow2heap_pred.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
(BinomialQueue.Internal__1 @lb4)
(BinomialQueue.Internal__0 @lb4)))
(BinomialQueue.pow2heap_pred.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
@x2
(BinomialQueue.Internal__2 @lb4)))
Tm_unit)))))
 :weight 0


:pattern ((BinomialQueue.pow2heap_pred.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.l_False
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (= Prims.l_False
(Prims.squash Prims.empty))
:named equation_Prims.l_False))
;;;;;;;;;;;;;;;;Equation for Prims.eq2
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.eq2 @x0
@x1
@x2)
(Prims.squash (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid equation_Prims.eq2))

:named equation_Prims.eq2))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.is_pow2heap
;;; Fact-ids: Name BinomialQueue.is_pow2heap; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(62,4-62,15); use=BinomialQueue.fst(62,4-62,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.is_pow2heap @x0
@x1)
(let ((@lb2 @x1))
(ite (and (is-BinomialQueue.Internal @lb2)
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 @lb2)))
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction @x0
(BoxInt 1))
(BinomialQueue.Internal__1 @lb2)
(BinomialQueue.Internal__0 @lb2))
Prims.l_False)))
 

:pattern ((BinomialQueue.is_pow2heap @x0
@x1))
:qid equation_BinomialQueue.is_pow2heap))

:named equation_BinomialQueue.is_pow2heap))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.forest
;;; Fact-ids: Name BinomialQueue.forest; Namespace BinomialQueue
(assert (! (= BinomialQueue.forest
(Prims.list BinomialQueue.tree))
:named equation_BinomialQueue.forest))
;;;;;;;;;;;;;;;;Eq2 interpretation
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (= @x1
@x2)
(Valid (Prims.eq2 @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid eq2-interp))
:named eq2-interp))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(= @x2
@x3))
(HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
:qid data_typing_intro_Prims.Refl@tok))

:named data_typing_intro_Prims.Refl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5))
(and (= @x4
@x5)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5)))
:qid data_elim_Prims.Refl))

:named data_elim_Prims.Refl))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 134
(Term_constr_id (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid constructor_distinct_Prims.equals))

:named constructor_distinct_Prims.equals))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! (= 111
(Term_constr_id Prims.empty))
:named constructor_distinct_Prims.empty))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (= 141
(Term_constr_id (Prims.Refl @x0
@x1)))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_distinct_Prims.Refl))

:named constructor_distinct_Prims.Refl))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (is-Prims.Refl (Prims.Refl @x0
@x1))
(= (Prims.Refl @x0
@x1)
Prims.Refl@base))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_base_Prims.Refl))

:named constructor_base_Prims.Refl))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4))
(= (Term_constr_id (Prims.equals @x2
@x3
@x4))
(Term_constr_id (PreType @x0))))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4)))
:qid Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))

:named Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! 
;; def=Prims.fst(86,5-86,10); use=Prims.fst(86,5-86,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.empty)
(= Prims.empty
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.empty))
:qid Prims_pretyping_012c410d173b30f0cec8f55be7b4958c))

:named Prims_pretyping_012c410d173b30f0cec8f55be7b4958c))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.pow2heap_pred; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (BinomialQueue.pow2heap_pred.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(BinomialQueue.pow2heap_pred.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((BinomialQueue.pow2heap_pred.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_BinomialQueue.pow2heap_pred.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.pow2heap_pred.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.pow2heap_pred; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(49,8-49,21); use=BinomialQueue.fst(49,8-49,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.pow2heap_pred @x0
@x1
@x2)
(BinomialQueue.pow2heap_pred.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((BinomialQueue.pow2heap_pred @x0
@x1
@x2))
:qid @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(74,2-77,66)

;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_0
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_0
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_0))
;;;;;;;;;;;;;;;;l : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
(declare-fun Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0
Tm_type)
:named refinement_kinding_Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(71,35-77,66); use=BinomialQueue.fst(71,35-77,66)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(74,2-77,66); use=BinomialQueue.fst(74,2-77,66)

;; def=BinomialQueue.fst(74,2-77,66); use=BinomialQueue.fst(74,2-77,66)
(Valid 
;; def=BinomialQueue.fst(74,2-77,66); use=BinomialQueue.fst(74,2-77,66)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0))
:qid refinement_interpretation_Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0))

:named refinement_interpretation_Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_dc360d0bfc772405e7fd42e6d621ceb0))
(declare-fun BinomialQueue.is_binomial_queue (Term Term) Term)

;;;;;;;;;;;;;;;;d: Prims.pos -> l: forest{l << l} -> Prims.Tot Prims.prop
(declare-fun Tm_arrow_0c3d5f1518953152dfe792a54ce945b6 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_0c3d5f1518953152dfe792a54ce945b6
Tm_type)
:named kinding_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(71,29-77,66); use=BinomialQueue.fst(71,29-77,66)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_0c3d5f1518953152dfe792a54ce945b6)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_0c3d5f1518953152dfe792a54ce945b6))
:qid BinomialQueue_pre_typing_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6))

:named BinomialQueue_pre_typing_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(71,29-77,66); use=BinomialQueue.fst(71,29-77,66)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_0c3d5f1518953152dfe792a54ce945b6)
(and 
;; def=BinomialQueue.fst(71,29-77,66); use=BinomialQueue.fst(71,29-77,66)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.prop))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid BinomialQueue_interpretation_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6.1))

(IsTotFun @x0)

;; def=BinomialQueue.fst(71,29-77,66); use=BinomialQueue.fst(71,29-77,66)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.pos)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_0c3d5f1518953152dfe792a54ce945b6))
:qid BinomialQueue_interpretation_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6))

:named BinomialQueue_interpretation_Tm_arrow_0c3d5f1518953152dfe792a54ce945b6))
(declare-fun BinomialQueue.is_binomial_queue@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT BinomialQueue.is_binomial_queue@tok
@x0)
@x1)
(BinomialQueue.is_binomial_queue @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT BinomialQueue.is_binomial_queue@tok
@x0)
@x1))
:qid token_correspondence_BinomialQueue.is_binomial_queue))

:named token_correspondence_BinomialQueue.is_binomial_queue))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.is_binomial_queue@tok
Tm_arrow_0c3d5f1518953152dfe792a54ce945b6))

;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT BinomialQueue.is_binomial_queue@tok
@x1)
@x2)
(BinomialQueue.is_binomial_queue @x1
@x2))
 

:pattern ((BinomialQueue.is_binomial_queue @x1
@x2))
:qid function_token_typing_BinomialQueue.is_binomial_queue.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.is_binomial_queue@tok))
:qid function_token_typing_BinomialQueue.is_binomial_queue))

:named function_token_typing_BinomialQueue.is_binomial_queue))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
Tm_refine_dc360d0bfc772405e7fd42e6d621ceb0))
(HasType (BinomialQueue.is_binomial_queue @x0
@x1)
Prims.prop))
 

:pattern ((BinomialQueue.is_binomial_queue @x0
@x1))
:qid typing_BinomialQueue.is_binomial_queue))

:named typing_BinomialQueue.is_binomial_queue))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.prop).
;   (forall (x: Prims.prop). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;   (~(Nil? l) ==>
;     (forall (b: BinomialQueue.tree) (b: Prims.list BinomialQueue.tree).
;         l == b :: b ==>
;         Leaf? b \/ BinomialQueue.is_pow2heap d b ==>
;         d + 1 > 0 /\ (forall (return_val: Prims.pos). return_val == d + 1 ==> b << l)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec is_binomial_queue`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.prop))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(74,2-77,66)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(74,2-77,66)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(74,2-77,66)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(74,2-77,66)
(and (implies 
;; def=BinomialQueue.fst(71,35-71,36); use=BinomialQueue.fst(74,8-74,9)
(and 
;; def=BinomialQueue.fst(71,35-71,36); use=BinomialQueue.fst(74,8-74,9)
(not 
;; def=BinomialQueue.fst(71,35-71,36); use=BinomialQueue.fst(74,8-74,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=BinomialQueue.fst(71,35-71,36); use=BinomialQueue.fst(74,8-74,9)
(not 
;; def=BinomialQueue.fst(71,35-71,36); use=BinomialQueue.fst(74,8-74,9)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(74,2-77,66)
(not 
;; def=BinomialQueue.fst(71,35-71,36); use=BinomialQueue.fst(74,8-74,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(74,2-77,66)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(74,2-77,66)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(71,35-76,10); use=BinomialQueue.fst(74,8-76,10)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
@x1
@x2))


;; def=BinomialQueue.fst(77,4-77,34); use=BinomialQueue.fst(77,4-77,34)
(or 
;; def=BinomialQueue.fst(77,5-77,13); use=BinomialQueue.fst(77,5-77,13)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf @x1))


;; def=BinomialQueue.fst(77,17-77,33); use=BinomialQueue.fst(77,17-77,33)
(Valid 
;; def=BinomialQueue.fst(77,17-77,33); use=BinomialQueue.fst(77,17-77,33)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x1)
)
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(77,4-77,66)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(77,56-77,63)
(or label_2

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(77,56-77,63)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(77,4-77,66)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(77,4-77,66)
(= @x3
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=BinomialQueue.fst(74,2-77,66); use=BinomialQueue.fst(77,64-77,66)
(or label_3

;; def=BinomialQueue.fst(74,2-77,66); use=BinomialQueue.fst(77,64-77,66)
(Valid 
;; def=BinomialQueue.fst(74,2-77,66); use=BinomialQueue.fst(77,64-77,66)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.is_binomial_queue, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_f26957a7e62b271a8736230b1e9c83c1_0, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_Prims.pos, fuel_guarded_inversion_Prims.list, int_inversion, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, subterm_ordering_Prims.Cons, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec is_binomial_queue


; <Start encoding let rec is_binomial_queue>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.is_binomial_queue.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.is_binomial_queue.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.is_binomial_queue (Term Term) Term)
(declare-fun BinomialQueue.is_binomial_queue@tok () Term)
;;;;;;;;;;;;;;;;d: Prims.pos -> l: forest -> Prims.Tot Prims.prop
(declare-fun Tm_arrow_980ae5d0c52b17f8ef6224116421e487 () Term)

; </end encoding let rec is_binomial_queue>

(push) ;; push{2

; Starting query at BinomialQueue.fst(82,28-82,59)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: BinomialQueue.forest). (*  - Could not prove post-condition
; *) ~(l == []) ==> Cons? l


; Context: While encoding a query
; While typechecking the top-level declaration `let is_compact`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
BinomialQueue.forest)

;; def=BinomialQueue.fst(82,28-82,35); use=BinomialQueue.fst(82,28-82,35)
(not 
;; def=BinomialQueue.fst(82,28-82,35); use=BinomialQueue.fst(82,28-82,35)
(= @x0
(Prims.Nil BinomialQueue.tree))
)
)

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(82,57-82,58)
(or label_1

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(82,57-82,58)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x0))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.is_compact, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_Prims.Cons, equation_BinomialQueue.forest, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let is_compact


; <Start encoding let is_compact>

(declare-fun BinomialQueue.is_compact (Term) Term)
;;;;;;;;;;;;;;;;l: forest -> Prims.logical
(declare-fun Tm_arrow_82469a648f1f9b9b5ec6b24a4eb45353 () Term)
(declare-fun BinomialQueue.is_compact@tok () Term)

; </end encoding let is_compact>


; encoding sigelt let is_priq


; <Start encoding let is_priq>

(declare-fun BinomialQueue.is_priq (Term) Term)

(declare-fun BinomialQueue.is_priq@tok () Term)

; </end encoding let is_priq>


; encoding sigelt val BinomialQueue.priq


; <Skipped val BinomialQueue.priq/>


; encoding sigelt let priq


; <Start encoding let priq>

(declare-fun BinomialQueue.priq () Term)
(declare-fun Tm_refine_bf9b8da8f290823f0b11be068baec869 () Term)

; </end encoding let priq>


; encoding sigelt val BinomialQueue.empty


; <Skipped val BinomialQueue.empty/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! 
;; def=Prims.fst(198,5-198,9); use=Prims.fst(198,5-198,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_or @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_or @x0
@x1))
:qid typing_Prims.l_or))

:named typing_Prims.l_or))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.is_priq; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(84,4-84,11); use=BinomialQueue.fst(84,4-84,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.forest)
(HasType (BinomialQueue.is_priq @x0)
Prims.logical))
 

:pattern ((BinomialQueue.is_priq @x0))
:qid typing_BinomialQueue.is_priq))

:named typing_BinomialQueue.is_priq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.is_compact; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(82,4-82,14); use=BinomialQueue.fst(82,4-82,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.forest)
(HasType (BinomialQueue.is_compact @x0)
Prims.logical))
 

:pattern ((BinomialQueue.is_compact @x0))
:qid typing_BinomialQueue.is_compact))

:named typing_BinomialQueue.is_compact))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.is_binomial_queue; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest))
(HasType (BinomialQueue.is_binomial_queue @x0
@x1)
Prims.prop))
 

:pattern ((BinomialQueue.is_binomial_queue @x0
@x1))
:qid typing_BinomialQueue.is_binomial_queue))

:named typing_BinomialQueue.is_binomial_queue))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.sum@tok
@x0)
@x1)
(Prims.sum @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.sum@tok
@x0)
@x1))

:pattern ((Prims.sum @x0
@x1))
:qid token_correspondence_Prims.sum@tok))

:named token_correspondence_Prims.sum@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.is_binomial_queue; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest))
(HasType (BinomialQueue.is_binomial_queue.fuel_instrumented @u0
@x1
@x2)
Prims.prop))
 

:pattern ((BinomialQueue.is_binomial_queue.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented))

:named token_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Right @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x4
@x5)))
:qid subterm_ordering_Prims.Right))

:named subterm_ordering_Prims.Right))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Left @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x4
@x5)))
:qid subterm_ordering_Prims.Left))

:named subterm_ordering_Prims.Left))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name BinomialQueue.priq; Namespace BinomialQueue
(assert (! (HasType Tm_refine_bf9b8da8f290823f0b11be068baec869
Tm_type)
:named refinement_kinding_Tm_refine_bf9b8da8f290823f0b11be068baec869))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name BinomialQueue.priq; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(88,11-88,30); use=BinomialQueue.fst(88,11-88,30)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf9b8da8f290823f0b11be068baec869)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(88,20-88,29)
(Valid 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(88,20-88,29)
(BinomialQueue.is_priq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf9b8da8f290823f0b11be068baec869))
:qid refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869))

:named refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right_v (Prims.Right @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right_v))

:named projection_inverse_Prims.Right_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right_q (Prims.Right @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right_q))

:named projection_inverse_Prims.Right_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right_p (Prims.Right @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right_p))

:named projection_inverse_Prims.Right_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left_v (Prims.Left @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left_v))

:named projection_inverse_Prims.Left_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left_q (Prims.Left @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left_q))

:named projection_inverse_Prims.Left_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left_p (Prims.Left @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left_p))

:named projection_inverse_Prims.Left_p))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.sum@tok))
:named pre_kinding_Prims.sum@tok))
;;;;;;;;;;;;;;;;Lemma: BinomialQueue.last_cons
;;; Fact-ids: Name BinomialQueue.last_cons; Namespace BinomialQueue
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
(Prims.list @x0))

;; def=BinomialQueue.fst(27,16-27,23); use=BinomialQueue.fst(27,16-27,23)
(BoxBool_proj_0 (Prims.uu___is_Cons @x0
@x2))
)

;; def=BinomialQueue.fst(28,15-28,40); use=BinomialQueue.fst(28,15-28,40)
(= (FStar.List.Tot.Base.last.fuel_instrumented ZFuel
@x0
(Prims.Cons @x0
@x1
@x2))
(FStar.List.Tot.Base.last.fuel_instrumented ZFuel
@x0
@x2))
)
 

:pattern ((FStar.List.Tot.Base.last.fuel_instrumented ZFuel
@x0
(Prims.Cons @x0
@x1
@x2)))
:qid lemma_BinomialQueue.last_cons))
:named lemma_BinomialQueue.last_cons))
;;;;;;;;;;;;;;;;\/ interpretation
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (or (Valid @x0)
(Valid @x1))
(Valid (Prims.l_or @x0
@x1)))
 

:pattern ((Prims.l_or @x0
@x1))
:qid l_or-interp))
:named l_or-interp))
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (and (IsTotFun Prims.sum@tok)

;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.sum@tok
@x0))
 

:pattern ((ApplyTT Prims.sum@tok
@x0))
:qid kinding_Prims.sum@tok))


;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.sum @x0
@x1)
Tm_type))
 

:pattern ((Prims.sum @x0
@x1))
:qid kinding_Prims.sum@tok.1))
)
:named kinding_Prims.sum@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf9b8da8f290823f0b11be068baec869
;;; Fact-ids: Name BinomialQueue.priq; Namespace BinomialQueue
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf9b8da8f290823f0b11be068baec869))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_bf9b8da8f290823f0b11be068baec869))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.sum @x2
@x3))
(or (and (is-Prims.Left @x1)
(= @x2
(Prims.Left_p @x1))
(= @x3
(Prims.Left_q @x1)))
(and (is-Prims.Right @x1)
(= @x2
(Prims.Right_p @x1))
(= @x3
(Prims.Right_q @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.sum @x2
@x3)))
:qid fuel_guarded_inversion_Prims.sum))

:named fuel_guarded_inversion_Prims.sum))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (= 170
(Term_constr_id Prims.sum@tok))
:named fresh_token_Prims.sum@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.is_binomial_queue
;;; Fact-ids: Name BinomialQueue.is_binomial_queue; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest))
(= (BinomialQueue.is_binomial_queue.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-Prims.Nil @lb3)
Prims.l_True
(ite (is-Prims.Cons @lb3)
(Prims.l_and (Prims.l_or (Prims.b2t (BinomialQueue.uu___is_Leaf (Prims.Cons_hd @lb3)))
(BinomialQueue.is_pow2heap @x1
(Prims.Cons_hd @lb3)))
(BinomialQueue.is_binomial_queue.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Cons_tl @lb3)))
Tm_unit)))))
 :weight 0


:pattern ((BinomialQueue.is_binomial_queue.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Prims.l_or
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! 
;; def=Prims.fst(198,5-198,9); use=Prims.fst(198,5-198,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_or @x0
@x1)
(Prims.squash (Prims.sum @x0
@x1)))
 

:pattern ((Prims.l_or @x0
@x1))
:qid equation_Prims.l_or))

:named equation_Prims.l_or))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.is_priq
;;; Fact-ids: Name BinomialQueue.is_priq; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(84,4-84,11); use=BinomialQueue.fst(84,4-84,11)
(forall ((@x0 Term))
 (! (= (Valid (BinomialQueue.is_priq @x0))

;; def=BinomialQueue.fst(84,25-84,62); use=BinomialQueue.fst(84,25-84,62)
(and 
;; def=BinomialQueue.fst(84,25-84,46); use=BinomialQueue.fst(84,25-84,46)
(Valid 
;; def=BinomialQueue.fst(84,25-84,46); use=BinomialQueue.fst(84,25-84,46)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x0)
)


;; def=BinomialQueue.fst(84,50-84,62); use=BinomialQueue.fst(84,50-84,62)
(Valid 
;; def=BinomialQueue.fst(84,50-84,62); use=BinomialQueue.fst(84,50-84,62)
(BinomialQueue.is_compact @x0)
)
)
)
 

:pattern ((BinomialQueue.is_priq @x0))
:qid equation_BinomialQueue.is_priq))

:named equation_BinomialQueue.is_priq))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.is_compact
;;; Fact-ids: Name BinomialQueue.is_compact; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(82,4-82,14); use=BinomialQueue.fst(82,4-82,14)
(forall ((@x0 Term))
 (! (= (Valid (BinomialQueue.is_compact @x0))

;; def=BinomialQueue.fst(82,28-82,59); use=BinomialQueue.fst(82,28-82,59)
(or 
;; def=BinomialQueue.fst(82,28-82,35); use=BinomialQueue.fst(82,28-82,35)
(= @x0
(Prims.Nil BinomialQueue.tree))


;; def=BinomialQueue.fst(82,39-82,59); use=BinomialQueue.fst(82,39-82,59)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
@x0)))
)
)
 

:pattern ((BinomialQueue.is_compact @x0))
:qid equation_BinomialQueue.is_compact))

:named equation_BinomialQueue.is_compact))
;;;;;;;;;;;;;;;;Prop-typing for BinomialQueue.is_priq
;;; Fact-ids: Name BinomialQueue.is_priq; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(84,4-84,11); use=BinomialQueue.fst(84,4-84,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.forest)
(Valid (Prims.subtype_of (BinomialQueue.is_priq @x0)
Prims.unit)))
 

:pattern ((Prims.subtype_of (BinomialQueue.is_priq @x0)
Prims.unit))
:qid defn_equation_BinomialQueue.is_priq))

:named defn_equation_BinomialQueue.is_priq))
;;;;;;;;;;;;;;;;Prop-typing for BinomialQueue.is_compact
;;; Fact-ids: Name BinomialQueue.is_compact; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(82,4-82,14); use=BinomialQueue.fst(82,4-82,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.forest)
(Valid (Prims.subtype_of (BinomialQueue.is_compact @x0)
Prims.unit)))
 

:pattern ((Prims.subtype_of (BinomialQueue.is_compact @x0)
Prims.unit))
:qid defn_equation_BinomialQueue.is_compact))

:named defn_equation_BinomialQueue.is_compact))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2))
(HasTypeFuel @u0
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x1
@x2)))
:qid data_typing_intro_Prims.Right@tok))

:named data_typing_intro_Prims.Right@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1))
(HasTypeFuel @u0
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x1
@x2)))
:qid data_typing_intro_Prims.Left@tok))

:named data_typing_intro_Prims.Left@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x5)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x4
@x5)))
:qid data_elim_Prims.Right))

:named data_elim_Prims.Right))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x4)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x4
@x5)))
:qid data_elim_Prims.Left))

:named data_elim_Prims.Left))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 169
(Term_constr_id (Prims.sum @x0
@x1)))
 

:pattern ((Prims.sum @x0
@x1))
:qid constructor_distinct_Prims.sum))

:named constructor_distinct_Prims.sum))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 181
(Term_constr_id (Prims.Right @x0
@x1
@x2)))
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid constructor_distinct_Prims.Right))

:named constructor_distinct_Prims.Right))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 176
(Term_constr_id (Prims.Left @x0
@x1
@x2)))
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid constructor_distinct_Prims.Left))

:named constructor_distinct_Prims.Left))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.sum @x2
@x3))
(= (Prims.sum @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.sum @x2
@x3)))
:qid Prims_pretyping_a08d262d1ccaf451d982ca8ce0bf4ae9))

:named Prims_pretyping_a08d262d1ccaf451d982ca8ce0bf4ae9))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.is_binomial_queue; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.is_binomial_queue.fuel_instrumented (SFuel @u0)
@x1
@x2)
(BinomialQueue.is_binomial_queue.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((BinomialQueue.is_binomial_queue.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.is_binomial_queue; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(71,8-71,25); use=BinomialQueue.fst(71,8-71,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.is_binomial_queue @x0
@x1)
(BinomialQueue.is_binomial_queue.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((BinomialQueue.is_binomial_queue @x0
@x1))
:qid @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(90,0-90,14)

(declare-fun label_1 () Bool)

; Encoding query formula : Prims.auto_squash (BinomialQueue.is_priq [])


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let empty`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(90,12-90,14)
(or label_1

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(90,12-90,14)
(Valid 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(90,12-90,14)
(BinomialQueue.is_priq (Prims.Nil BinomialQueue.tree))
)
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.empty, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @query, constructor_distinct_Prims.Nil, data_typing_intro_Prims.Nil@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_compact, equation_BinomialQueue.is_priq, equation_Prims.pos, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, int_typing, kinding_BinomialQueue.tree@tok, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, true_interp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let empty


; <Start encoding let empty>

(declare-fun BinomialQueue.empty (Dummy_sort) Term)

; </end encoding let empty>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,11-616,13); use=Prims.fst(616,11-616,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (Prims.__proj__Cons__item__hd @x0
@x1)
@x0))
 

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid typing_Prims.__proj__Cons__item__hd))

:named typing_Prims.__proj__Cons__item__hd))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,11-616,13); use=Prims.fst(616,11-616,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.__proj__Cons__item__hd @x0
@x1)
(Prims.Cons_hd @x1))
 

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid proj_equation_Prims.Cons_hd))

:named proj_equation_Prims.Cons_hd))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
(push) ;; push{2

; Starting query at BinomialQueue.fst(95,2-98,14)

;;;;;;;;;;;;;;;;l : l: BinomialQueue.forest{Cons? l} (l: BinomialQueue.forest{Cons? l})
(declare-fun x_92cc3092b50378b9697de1162e4e2190_0 () Term)
(declare-fun Tm_refine_8012675a32ad22b7f12e5227bdcb55bc () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_8012675a32ad22b7f12e5227bdcb55bc
Tm_type)
:named refinement_kinding_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(94,17-94,36); use=BinomialQueue.fst(94,17-94,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(94,27-94,34)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))
:qid refinement_interpretation_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))

:named refinement_interpretation_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8012675a32ad22b7f12e5227bdcb55bc
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_8012675a32ad22b7f12e5227bdcb55bc))
;;;;;;;;;;;;;;;;binder_x_92cc3092b50378b9697de1162e4e2190_0
;;; Fact-ids: 
(assert (! (HasType x_92cc3092b50378b9697de1162e4e2190_0
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc)
:named binder_x_92cc3092b50378b9697de1162e4e2190_0))
(declare-fun Tm_refine_a10ed29c1914ffd148b7f9c3703ff110 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_a10ed29c1914ffd148b7f9c3703ff110
Tm_type)
:named refinement_kinding_Tm_refine_a10ed29c1914ffd148b7f9c3703ff110))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(94,18-98,14); use=BinomialQueue.fst(94,18-98,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a10ed29c1914ffd148b7f9c3703ff110)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(94,27-94,34)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))


;; def=BinomialQueue.fst(95,2-98,14); use=BinomialQueue.fst(95,2-98,14)

;; def=BinomialQueue.fst(95,2-98,14); use=BinomialQueue.fst(95,2-98,14)
(Valid 
;; def=BinomialQueue.fst(95,2-98,14); use=BinomialQueue.fst(95,2-98,14)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_92cc3092b50378b9697de1162e4e2190_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a10ed29c1914ffd148b7f9c3703ff110))
:qid refinement_interpretation_Tm_refine_a10ed29c1914ffd148b7f9c3703ff110))

:named refinement_interpretation_Tm_refine_a10ed29c1914ffd148b7f9c3703ff110))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a10ed29c1914ffd148b7f9c3703ff110
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a10ed29c1914ffd148b7f9c3703ff110))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_a10ed29c1914ffd148b7f9c3703ff110))
(declare-fun BinomialQueue.all_leaf (Term) Term)

;;;;;;;;;;;;;;;;l: (l: forest{Cons? l}){l << l} -> Prims.bool
(declare-fun Tm_arrow_8f72a4eb1456853ca438b6baf2712f47 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_8f72a4eb1456853ca438b6baf2712f47
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_8f72a4eb1456853ca438b6baf2712f47
Tm_type)
:named kinding_Tm_arrow_8f72a4eb1456853ca438b6baf2712f47))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(94,18-98,14); use=BinomialQueue.fst(94,18-98,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_8f72a4eb1456853ca438b6baf2712f47)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_8f72a4eb1456853ca438b6baf2712f47))
:qid BinomialQueue_pre_typing_Tm_arrow_8f72a4eb1456853ca438b6baf2712f47))

:named BinomialQueue_pre_typing_Tm_arrow_8f72a4eb1456853ca438b6baf2712f47))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8f72a4eb1456853ca438b6baf2712f47
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(94,18-98,14); use=BinomialQueue.fst(94,18-98,14)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_8f72a4eb1456853ca438b6baf2712f47)
(and 
;; def=BinomialQueue.fst(94,18-98,14); use=BinomialQueue.fst(94,18-98,14)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_a10ed29c1914ffd148b7f9c3703ff110)
(HasType (ApplyTT @x0
@x1)
Prims.bool))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_8f72a4eb1456853ca438b6baf2712f47.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_8f72a4eb1456853ca438b6baf2712f47))
:qid BinomialQueue_interpretation_Tm_arrow_8f72a4eb1456853ca438b6baf2712f47))

:named BinomialQueue_interpretation_Tm_arrow_8f72a4eb1456853ca438b6baf2712f47))
(declare-fun BinomialQueue.all_leaf@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@x0 Term))
 (! (= (ApplyTT BinomialQueue.all_leaf@tok
@x0)
(BinomialQueue.all_leaf @x0))
 

:pattern ((ApplyTT BinomialQueue.all_leaf@tok
@x0))
:qid token_correspondence_BinomialQueue.all_leaf))

:named token_correspondence_BinomialQueue.all_leaf))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.all_leaf@tok
Tm_arrow_8f72a4eb1456853ca438b6baf2712f47))

;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@x1 Term))
 (! (= (ApplyTT BinomialQueue.all_leaf@tok
@x1)
(BinomialQueue.all_leaf @x1))
 

:pattern ((BinomialQueue.all_leaf @x1))
:qid function_token_typing_BinomialQueue.all_leaf.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.all_leaf@tok))
:qid function_token_typing_BinomialQueue.all_leaf))

:named function_token_typing_BinomialQueue.all_leaf))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_a10ed29c1914ffd148b7f9c3703ff110)
(HasType (BinomialQueue.all_leaf @x0)
Prims.bool))
 

:pattern ((BinomialQueue.all_leaf @x0))
:qid typing_BinomialQueue.all_leaf))

:named typing_BinomialQueue.all_leaf))
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.bool).
;   (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   ~(Cons? l && Leaf? l.hd && Nil? l.tl) ==>
;   (forall (b: Prims.list BinomialQueue.tree). l == BinomialQueue.Leaf :: b ==> Cons? b /\ b << l)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec all_leaf`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(95,2-98,14)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(95,2-98,14)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(95,2-98,14)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))


;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(95,2-98,14)
(not 
;; def=BinomialQueue.fst(95,2-98,14); use=BinomialQueue.fst(95,2-98,14)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0)
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))))
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(Prims.__proj__Cons__item__tl BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))))
)
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(95,2-98,14)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(94,18-97,12); use=BinomialQueue.fst(95,8-97,12)
(= x_92cc3092b50378b9697de1162e4e2190_0
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x1))
)

;; def=BinomialQueue.fst(94,27-98,14); use=BinomialQueue.fst(97,25-97,27)
(and 
;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(97,25-97,27)
(or label_1

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(97,25-97,27)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))
)


;; def=BinomialQueue.fst(95,2-98,14); use=BinomialQueue.fst(97,25-97,27)
(or label_2

;; def=BinomialQueue.fst(95,2-98,14); use=BinomialQueue.fst(97,25-97,27)
(Valid 
;; def=BinomialQueue.fst(95,2-98,14); use=BinomialQueue.fst(97,25-97,27)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_92cc3092b50378b9697de1162e4e2190_0)
)
)
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.all_leaf, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_92cc3092b50378b9697de1162e4e2190_0, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, fuel_guarded_inversion_Prims.list, primitive_Prims.op_AmpAmp, proj_equation_Prims.Cons_hd, proj_equation_Prims.Cons_tl, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec all_leaf


; <Start encoding let rec all_leaf>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.all_leaf.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.all_leaf.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.all_leaf (Term) Term)
(declare-fun BinomialQueue.all_leaf@tok () Term)
(declare-fun Tm_refine_8012675a32ad22b7f12e5227bdcb55bc () Term)


;;;;;;;;;;;;;;;;l: forest{Cons? l} -> Prims.bool
(declare-fun Tm_arrow_3a8fa6b3eef29bf52377a790d11b1eaf () Term)

; </end encoding let rec all_leaf>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.all_leaf; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc)
(HasType (BinomialQueue.all_leaf @x0)
Prims.bool))
 

:pattern ((BinomialQueue.all_leaf @x0))
:qid typing_BinomialQueue.all_leaf))

:named typing_BinomialQueue.all_leaf))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.all_leaf; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc)
(HasType (BinomialQueue.all_leaf.fuel_instrumented @u0
@x1)
Prims.bool))
 

:pattern ((BinomialQueue.all_leaf.fuel_instrumented @u0
@x1))
:qid token_correspondence_BinomialQueue.all_leaf.fuel_instrumented))

:named token_correspondence_BinomialQueue.all_leaf.fuel_instrumented))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name BinomialQueue.all_leaf; Namespace BinomialQueue
(assert (! (HasType Tm_refine_8012675a32ad22b7f12e5227bdcb55bc
Tm_type)
:named refinement_kinding_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name BinomialQueue.all_leaf; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(94,17-94,36); use=BinomialQueue.fst(94,17-94,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(94,27-94,34)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))
:qid refinement_interpretation_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))

:named refinement_interpretation_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8012675a32ad22b7f12e5227bdcb55bc
;;; Fact-ids: Name BinomialQueue.all_leaf; Namespace BinomialQueue
(assert (! (iff (Valid (Prims.hasEq Tm_refine_8012675a32ad22b7f12e5227bdcb55bc))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_8012675a32ad22b7f12e5227bdcb55bc))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.all_leaf
;;; Fact-ids: Name BinomialQueue.all_leaf; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc)
(= (BinomialQueue.all_leaf.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (and (is-Prims.Cons @lb2)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb2))
(is-Prims.Nil (Prims.Cons_tl @lb2)))
(BoxBool true)
(ite (and (is-Prims.Cons @lb2)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb2)))
(BinomialQueue.all_leaf.fuel_instrumented @u0
(Prims.Cons_tl @lb2))
(BoxBool false))))))
 :weight 0


:pattern ((BinomialQueue.all_leaf.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_BinomialQueue.all_leaf.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.all_leaf.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.all_leaf; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (BinomialQueue.all_leaf.fuel_instrumented (SFuel @u0)
@x1)
(BinomialQueue.all_leaf.fuel_instrumented ZFuel
@x1))
 

:pattern ((BinomialQueue.all_leaf.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_BinomialQueue.all_leaf.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.all_leaf.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.all_leaf; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(94,8-94,16); use=BinomialQueue.fst(94,8-94,16)
(forall ((@x0 Term))
 (! (= (BinomialQueue.all_leaf @x0)
(BinomialQueue.all_leaf.fuel_instrumented MaxFuel
@x0))
 

:pattern ((BinomialQueue.all_leaf @x0))
:qid @fuel_correspondence_BinomialQueue.all_leaf.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.all_leaf.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(101,2-106,28)

;;;;;;;;;;;;;;;;l : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_0 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_0
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_0
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_0))
(declare-fun Tm_refine_4f0fd34e1d77be6a719ced9130383b28 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4f0fd34e1d77be6a719ced9130383b28
Tm_type)
:named refinement_kinding_Tm_refine_4f0fd34e1d77be6a719ced9130383b28))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(100,20-106,28); use=BinomialQueue.fst(100,20-106,28)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4f0fd34e1d77be6a719ced9130383b28)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(101,2-106,28); use=BinomialQueue.fst(101,2-106,28)

;; def=BinomialQueue.fst(101,2-106,28); use=BinomialQueue.fst(101,2-106,28)
(Valid 
;; def=BinomialQueue.fst(101,2-106,28); use=BinomialQueue.fst(101,2-106,28)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4f0fd34e1d77be6a719ced9130383b28))
:qid refinement_interpretation_Tm_refine_4f0fd34e1d77be6a719ced9130383b28))

:named refinement_interpretation_Tm_refine_4f0fd34e1d77be6a719ced9130383b28))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4f0fd34e1d77be6a719ced9130383b28
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4f0fd34e1d77be6a719ced9130383b28))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_4f0fd34e1d77be6a719ced9130383b28))
(declare-fun BinomialQueue.mk_compact (Term) Term)

;;;;;;;;;;;;;;;;l: forest{l << l} -> forest
(declare-fun Tm_arrow_18c8b60d263049dc43373f200c3493a7 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_18c8b60d263049dc43373f200c3493a7
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_18c8b60d263049dc43373f200c3493a7
Tm_type)
:named kinding_Tm_arrow_18c8b60d263049dc43373f200c3493a7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(100,20-106,28); use=BinomialQueue.fst(100,20-106,28)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_18c8b60d263049dc43373f200c3493a7)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_18c8b60d263049dc43373f200c3493a7))
:qid BinomialQueue_pre_typing_Tm_arrow_18c8b60d263049dc43373f200c3493a7))

:named BinomialQueue_pre_typing_Tm_arrow_18c8b60d263049dc43373f200c3493a7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_18c8b60d263049dc43373f200c3493a7
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(100,20-106,28); use=BinomialQueue.fst(100,20-106,28)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_18c8b60d263049dc43373f200c3493a7)
(and 
;; def=BinomialQueue.fst(100,20-106,28); use=BinomialQueue.fst(100,20-106,28)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_4f0fd34e1d77be6a719ced9130383b28)
(HasType (ApplyTT @x0
@x1)
BinomialQueue.forest))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_18c8b60d263049dc43373f200c3493a7.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_18c8b60d263049dc43373f200c3493a7))
:qid BinomialQueue_interpretation_Tm_arrow_18c8b60d263049dc43373f200c3493a7))

:named BinomialQueue_interpretation_Tm_arrow_18c8b60d263049dc43373f200c3493a7))
(declare-fun BinomialQueue.mk_compact@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@x0 Term))
 (! (= (ApplyTT BinomialQueue.mk_compact@tok
@x0)
(BinomialQueue.mk_compact @x0))
 

:pattern ((ApplyTT BinomialQueue.mk_compact@tok
@x0))
:qid token_correspondence_BinomialQueue.mk_compact))

:named token_correspondence_BinomialQueue.mk_compact))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.mk_compact@tok
Tm_arrow_18c8b60d263049dc43373f200c3493a7))

;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@x1 Term))
 (! (= (ApplyTT BinomialQueue.mk_compact@tok
@x1)
(BinomialQueue.mk_compact @x1))
 

:pattern ((BinomialQueue.mk_compact @x1))
:qid function_token_typing_BinomialQueue.mk_compact.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.mk_compact@tok))
:qid function_token_typing_BinomialQueue.mk_compact))

:named function_token_typing_BinomialQueue.mk_compact))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_4f0fd34e1d77be6a719ced9130383b28)
(HasType (BinomialQueue.mk_compact @x0)
BinomialQueue.forest))
 

:pattern ((BinomialQueue.mk_compact @x0))
:qid typing_BinomialQueue.mk_compact))

:named typing_BinomialQueue.mk_compact))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post BinomialQueue.forest).
;   (forall (x: BinomialQueue.forest). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   ~(Nil? l) ==>
;   (forall (b: Prims.list BinomialQueue.tree).
;       l == b ==>
;       Cons? l /\
;       (forall (any_result: BinomialQueue.forest).
;           l == any_result ==>
;           (forall (any_result: Prims.bool).
;               BinomialQueue.all_leaf l == any_result ==>
;               (forall (k: Prims.pure_post BinomialQueue.forest).
;                   (forall (x: BinomialQueue.forest). {:pattern Prims.guard_free (k x)}
;                       Prims.auto_squash (k x)) ==>
;                   ~(BinomialQueue.all_leaf l = true) ==>
;                   (forall (b: Prims.bool).
;                       BinomialQueue.all_leaf l == b ==>
;                       (~(Cons? l) ==> Prims.l_False) /\
;                       (forall (b: BinomialQueue.tree) (b: Prims.list BinomialQueue.tree).
;                           l == b :: b ==> b << l))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec mk_compact`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.forest))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(101,2-106,28)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(101,2-106,28)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(101,2-106,28)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))


;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(101,2-106,28)
(not 
;; def=BinomialQueue.fst(100,20-100,21); use=BinomialQueue.fst(101,8-101,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(101,2-106,28)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(100,20-103,5); use=BinomialQueue.fst(101,8-103,5)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x1)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(101,2-106,28)
(and 
;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(104,16-104,17)
(or label_1

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(104,16-104,17)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(101,2-106,28)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.forest)

;; def=BinomialQueue.fst(94,18-100,21); use=BinomialQueue.fst(101,2-106,28)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x2)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(101,2-106,28)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.bool)

;; def=BinomialQueue.fst(104,7-104,17); use=BinomialQueue.fst(104,7-104,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
@x3)
)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post BinomialQueue.forest))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(101,2-106,28)
(forall ((@x5 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(101,2-106,28)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(101,2-106,28)
(ApplyTT @x4
@x5)
)

 

:pattern ((ApplyTT @x4
@x5))
:qid @query.6))


;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(101,2-106,28)
(not 
;; def=BinomialQueue.fst(104,7-104,17); use=BinomialQueue.fst(104,7-104,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(101,2-106,28)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.bool)

;; def=BinomialQueue.fst(104,7-106,28); use=BinomialQueue.fst(104,7-106,28)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(101,2-106,28)
(and (implies 
;; def=BinomialQueue.fst(105,13-105,19); use=BinomialQueue.fst(105,13-105,19)
(not 
;; def=BinomialQueue.fst(105,13-105,19); use=BinomialQueue.fst(105,13-105,19)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)

label_2)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(101,2-106,28)
(forall ((@x6 Term))
 (! (implies (HasType @x6
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(101,2-106,28)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(105,13-105,19); use=BinomialQueue.fst(105,13-105,19)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Cons BinomialQueue.tree
@x6
@x7))
)

;; def=BinomialQueue.fst(101,2-106,28); use=BinomialQueue.fst(106,25-106,27)
(or label_3

;; def=BinomialQueue.fst(101,2-106,28); use=BinomialQueue.fst(106,25-106,27)
(Valid 
;; def=BinomialQueue.fst(101,2-106,28); use=BinomialQueue.fst(106,25-106,27)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x7
x_07642eb27f8c86505049ec727a4a557c_0)
)
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.5)))
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.mk_compact, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec mk_compact


; <Start encoding let rec mk_compact>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.mk_compact.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.mk_compact.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.mk_compact (Term) Term)
(declare-fun BinomialQueue.mk_compact@tok () Term)
;;;;;;;;;;;;;;;;l: forest -> forest
(declare-fun Tm_arrow_a490e65cfca31fb48eace1bd6f29cb1e () Term)

; </end encoding let rec mk_compact>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.tl; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(53,4-53,6); use=FStar.List.Tot.Base.fst(53,4-53,6)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (FStar.List.Tot.Base.tl @x0
@x1)
(Prims.list @x0)))
 

:pattern ((FStar.List.Tot.Base.tl @x0
@x1))
:qid typing_FStar.List.Tot.Base.tl))

:named typing_FStar.List.Tot.Base.tl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.tail; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(46,4-46,8); use=FStar.List.Tot.Base.fst(46,4-46,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (FStar.List.Tot.Base.tail @x0
@x1)
(Prims.list @x0)))
 

:pattern ((FStar.List.Tot.Base.tail @x0
@x1))
:qid typing_FStar.List.Tot.Base.tail))

:named typing_FStar.List.Tot.Base.tail))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.mk_compact; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.forest)
(HasType (BinomialQueue.mk_compact @x0)
BinomialQueue.forest))
 

:pattern ((BinomialQueue.mk_compact @x0))
:qid typing_BinomialQueue.mk_compact))

:named typing_BinomialQueue.mk_compact))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.mk_compact; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.forest)
(HasType (BinomialQueue.mk_compact.fuel_instrumented @u0
@x1)
BinomialQueue.forest))
 

:pattern ((BinomialQueue.mk_compact.fuel_instrumented @u0
@x1))
:qid token_correspondence_BinomialQueue.mk_compact.fuel_instrumented))

:named token_correspondence_BinomialQueue.mk_compact.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.mk_compact
;;; Fact-ids: Name BinomialQueue.mk_compact; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.forest)
(= (BinomialQueue.mk_compact.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (is-Prims.Nil @lb2)
(Prims.Nil BinomialQueue.tree)
(let ((@lb3 (BinomialQueue.all_leaf @x1)))
(ite (= @lb3
(BoxBool true))
(Prims.Nil BinomialQueue.tree)
(let ((@lb4 @x1))
(ite (is-Prims.Cons @lb4)
(Prims.Cons BinomialQueue.tree
(Prims.Cons_hd @lb4)
(BinomialQueue.mk_compact.fuel_instrumented @u0
(Prims.Cons_tl @lb4)))
Tm_unit))))))))
 :weight 0


:pattern ((BinomialQueue.mk_compact.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_BinomialQueue.mk_compact.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.mk_compact.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for FStar.List.Tot.Base.tl
;;; Fact-ids: Name FStar.List.Tot.Base.tl; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(53,4-53,6); use=FStar.List.Tot.Base.fst(53,4-53,6)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.tl @x0
@x1)
(FStar.List.Tot.Base.tail @x0
@x1))
 

:pattern ((FStar.List.Tot.Base.tl @x0
@x1))
:qid equation_FStar.List.Tot.Base.tl))

:named equation_FStar.List.Tot.Base.tl))
;;;;;;;;;;;;;;;;Equation for FStar.List.Tot.Base.tail
;;; Fact-ids: Name FStar.List.Tot.Base.tail; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(46,4-46,8); use=FStar.List.Tot.Base.fst(46,4-46,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.tail @x0
@x1)
(let ((@lb2 @x1))
(ite (is-Prims.Cons @lb2)
(Prims.Cons_tl @lb2)
Tm_unit)))
 

:pattern ((FStar.List.Tot.Base.tail @x0
@x1))
:qid equation_FStar.List.Tot.Base.tail))

:named equation_FStar.List.Tot.Base.tail))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.mk_compact; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (BinomialQueue.mk_compact.fuel_instrumented (SFuel @u0)
@x1)
(BinomialQueue.mk_compact.fuel_instrumented ZFuel
@x1))
 

:pattern ((BinomialQueue.mk_compact.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.mk_compact; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(100,8-100,18); use=BinomialQueue.fst(100,8-100,18)
(forall ((@x0 Term))
 (! (= (BinomialQueue.mk_compact @x0)
(BinomialQueue.mk_compact.fuel_instrumented MaxFuel
@x0))
 

:pattern ((BinomialQueue.mk_compact @x0))
:qid @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(114,2-118,40)

;;;;;;;;;;;;;;;;l : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_0 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_0
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_0
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_0))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.mk_compact_correctness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.mk_compact_correctness@tok () Term)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_b9c62273c10cf46bdba62558766edca2 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_b9c62273c10cf46bdba62558766edca2
Tm_type)
:named refinement_kinding_Tm_refine_b9c62273c10cf46bdba62558766edca2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(110,32-118,40); use=BinomialQueue.fst(118,9-118,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b9c62273c10cf46bdba62558766edca2)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(114,2-118,40); use=BinomialQueue.fst(118,9-118,31)

;; def=BinomialQueue.fst(114,2-118,40); use=BinomialQueue.fst(118,9-118,31)
(Valid 
;; def=BinomialQueue.fst(114,2-118,40); use=BinomialQueue.fst(118,9-118,31)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b9c62273c10cf46bdba62558766edca2))
:qid refinement_interpretation_Tm_refine_b9c62273c10cf46bdba62558766edca2))

:named refinement_interpretation_Tm_refine_b9c62273c10cf46bdba62558766edca2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b9c62273c10cf46bdba62558766edca2
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b9c62273c10cf46bdba62558766edca2))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_b9c62273c10cf46bdba62558766edca2))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       BinomialQueue.is_compact (BinomialQueue.mk_compact l) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: Prims.list BinomialQueue.tree).
;             l == b ==>
;             Cons? l /\
;             (forall (any_result: BinomialQueue.forest).
;                 l == any_result ==>
;                 (forall (any_result: Prims.bool).
;                     BinomialQueue.all_leaf l == any_result ==>
;                     (forall (k: Prims.pure_post Prims.unit).
;                         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                         (BinomialQueue.all_leaf l == true ==>
;                           (forall (any_result: Prims.unit). k any_result)) /\
;                         (~(BinomialQueue.all_leaf l = true) ==>
;                           (forall (b: Prims.bool).
;                               BinomialQueue.all_leaf l == b ==>
;                               Cons? l /\
;                               (forall (any_result: BinomialQueue.forest).
;                                   l == any_result ==>
;                                   (forall (any_result: Prims.list BinomialQueue.tree).
;                                       FStar.List.Tot.Base.tl l == any_result ==>
;                                       FStar.List.Tot.Base.tl l << l /\
;                                       (forall (return_val: l: BinomialQueue.forest{l << l}).
;                                           return_val == FStar.List.Tot.Base.tl l ==>
;                                           FStar.List.Tot.Base.tl l == return_val ==>
;                                           (forall (pure_result: Prims.unit).
;                                               BinomialQueue.is_compact (BinomialQueue.mk_compact (FStar.List.Tot.Base.tl
;                                                         l)) ==>
;                                               k pure_result))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec mk_compact_correctness`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(114,2-118,40); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(114,2-118,40)
(or label_2

;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(114,2-118,40)
(BinomialQueue.is_compact (BinomialQueue.mk_compact x_07642eb27f8c86505049ec727a4a557c_0))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(114,2-118,40)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(114,2-118,40)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(114,2-118,40)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(114,2-118,40)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(114,2-118,40)
(and (implies 
;; def=BinomialQueue.fst(110,32-115,6); use=BinomialQueue.fst(114,8-115,6)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(114,2-118,40)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(114,2-118,40)
(not 
;; def=BinomialQueue.fst(110,32-110,33); use=BinomialQueue.fst(114,8-114,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(110,32-116,5); use=BinomialQueue.fst(114,8-116,5)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x2)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(114,2-118,40)
(and 
;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(117,16-117,17)
(or label_3

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(117,16-117,17)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.forest)

;; def=BinomialQueue.fst(94,18-110,33); use=BinomialQueue.fst(114,2-118,40)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x3)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=BinomialQueue.fst(117,7-117,17); use=BinomialQueue.fst(117,7-117,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
@x4)
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x6 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(114,2-118,40)
(ApplyTT @x1
@x6)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(114,2-118,40)
(ApplyTT @x5
@x6)
)
)
 :weight 0


:pattern ((ApplyTT @x5
@x6))
:qid @query.9))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(114,2-118,40)
(and (implies 
;; def=BinomialQueue.fst(117,7-117,17); use=BinomialQueue.fst(117,7-117,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(114,2-118,40)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(114,2-118,40)
(ApplyTT @x5
@x6)
)
)
 
;;no pats
:qid @query.10))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(114,2-118,40)
(not 
;; def=BinomialQueue.fst(117,7-117,17); use=BinomialQueue.fst(117,7-117,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=BinomialQueue.fst(117,7-118,40); use=BinomialQueue.fst(117,7-118,40)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
@x6)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(114,2-118,40)
(and 
;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(118,38-118,39)
(or label_4

;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(118,38-118,39)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.forest)

;; def=FStar.List.Tot.Base.fst(52,8-52,9); use=BinomialQueue.fst(114,2-118,40)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x7)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(110,32-118,40); use=BinomialQueue.fst(118,9-118,40)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(114,2-118,40)
(and 
;; def=BinomialQueue.fst(114,2-118,40); use=BinomialQueue.fst(118,32-118,40)
(or label_5

;; def=BinomialQueue.fst(114,2-118,40); use=BinomialQueue.fst(118,32-118,40)
(Valid 
;; def=BinomialQueue.fst(114,2-118,40); use=BinomialQueue.fst(118,32-118,40)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
x_07642eb27f8c86505049ec727a4a557c_0)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(114,2-118,40)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Tm_refine_b9c62273c10cf46bdba62558766edca2)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(114,2-118,40)
(= @x9
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))


;; def=BinomialQueue.fst(110,32-118,40); use=BinomialQueue.fst(114,2-118,40)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
@x9)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(118,9-118,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(118,9-118,31)
(Valid 
;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(118,9-118,31)
(BinomialQueue.is_compact (BinomialQueue.mk_compact (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(118,9-118,31)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(118,9-118,31)
(ApplyTT @x5
@x10)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.mk_compact_correctness, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.all_leaf.fuel_instrumented, @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented, @fuel_irrelevance_BinomialQueue.all_leaf.fuel_instrumented, @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_0, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_BinomialQueue.Internal, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_compact, equation_FStar.List.Tot.Base.tail, equation_FStar.List.Tot.Base.tl, equation_with_fuel_BinomialQueue.all_leaf.fuel_instrumented, equation_with_fuel_BinomialQueue.mk_compact.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.last.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, kinding_BinomialQueue.tree@tok, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, refinement_interpretation_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc, subterm_ordering_Prims.Cons, typing_BinomialQueue.mk_compact, typing_FStar.List.Tot.Base.last, typing_tok_BinomialQueue.Leaf@tok, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec mk_compact_correctness


; <Start encoding let rec mk_compact_correctness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.mk_compact_correctness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.mk_compact_correctness@tok () Term)

; </end encoding let rec mk_compact_correctness>

;;;;;;;;;;;;;;;;Lemma: BinomialQueue.mk_compact_correctness
;;; Fact-ids: Name BinomialQueue.mk_compact_correctness; Namespace BinomialQueue
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.forest)

;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(111,10-111,37)
(Valid 
;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(111,10-111,37)
(BinomialQueue.is_compact (BinomialQueue.mk_compact.fuel_instrumented ZFuel
@x0))
)
)
 

:pattern ((BinomialQueue.is_compact (BinomialQueue.mk_compact.fuel_instrumented ZFuel
@x0)))
:qid lemma_BinomialQueue.mk_compact_correctness))
:named lemma_BinomialQueue.mk_compact_correctness))
(push) ;; push{2

; Starting query at BinomialQueue.fst(126,2-130,61)

;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_0
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_0
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_0))
;;;;;;;;;;;;;;;;l : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.mk_compact_preserves_binomial_queue (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.mk_compact_preserves_binomial_queue@tok () Term)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_252db1c814cdaecb964fff2c793cb288 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_252db1c814cdaecb964fff2c793cb288
Tm_type)
:named refinement_kinding_Tm_refine_252db1c814cdaecb964fff2c793cb288))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(120,53-130,61); use=BinomialQueue.fst(130,9-130,44)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_252db1c814cdaecb964fff2c793cb288)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(126,2-130,61); use=BinomialQueue.fst(130,9-130,44)

;; def=BinomialQueue.fst(126,2-130,61); use=BinomialQueue.fst(130,9-130,44)
(Valid 
;; def=BinomialQueue.fst(126,2-130,61); use=BinomialQueue.fst(130,9-130,44)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_252db1c814cdaecb964fff2c793cb288))
:qid refinement_interpretation_Tm_refine_252db1c814cdaecb964fff2c793cb288))

:named refinement_interpretation_Tm_refine_252db1c814cdaecb964fff2c793cb288))
;;;;;;;;;;;;;;;;haseq for Tm_refine_252db1c814cdaecb964fff2c793cb288
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_252db1c814cdaecb964fff2c793cb288))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_252db1c814cdaecb964fff2c793cb288))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   BinomialQueue.is_binomial_queue d l /\
;   (forall (pure_result: Prims.unit).
;       BinomialQueue.is_binomial_queue d (BinomialQueue.mk_compact l) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: Prims.list BinomialQueue.tree).
;             l == b ==>
;             Cons? l /\
;             (forall (any_result: BinomialQueue.forest).
;                 l == any_result ==>
;                 (forall (any_result: Prims.bool).
;                     BinomialQueue.all_leaf l == any_result ==>
;                     (forall (k: Prims.pure_post Prims.unit).
;                         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                         (BinomialQueue.all_leaf l == true ==>
;                           (forall (any_result: Prims.unit). k any_result)) /\
;                         (~(BinomialQueue.all_leaf l = true) ==>
;                           (forall (b: Prims.bool).
;                               BinomialQueue.all_leaf l == b ==>
;                               d + 1 > 0 /\
;                               (forall (return_val: Prims.pos).
;                                   return_val == d + 1 ==>
;                                   Cons? l /\
;                                   (forall (any_result: BinomialQueue.forest).
;                                       l == any_result ==>
;                                       (forall (any_result: Prims.list BinomialQueue.tree).
;                                           FStar.List.Tot.Base.tl l == any_result ==>
;                                           FStar.List.Tot.Base.tl l << l /\
;                                           (forall (return_val: l: BinomialQueue.forest{l << l}).
;                                               return_val == FStar.List.Tot.Base.tl l ==>
;                                               FStar.List.Tot.Base.tl l == return_val ==>
;                                               BinomialQueue.is_binomial_queue (d + 1)
;                                                 (FStar.List.Tot.Base.tl l) /\
;                                               (forall (pure_result: Prims.unit).
;                                                   BinomialQueue.is_binomial_queue (d + 1)
;                                                     (BinomialQueue.mk_compact (FStar.List.Tot.Base.tl
;                                                             l)) ==>
;                                                   k pure_result)))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec mk_compact_preserves_binomial_queue`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(126,2-130,61); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(122,16-122,37); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=BinomialQueue.fst(122,16-122,37); use=BinomialQueue.fst(126,2-130,61)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(123,15-123,49); use=BinomialQueue.fst(126,2-130,61)
(or label_2

;; def=BinomialQueue.fst(123,15-123,49); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=BinomialQueue.fst(123,15-123,49); use=BinomialQueue.fst(126,2-130,61)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
(BinomialQueue.mk_compact x_07642eb27f8c86505049ec727a4a557c_1))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(126,2-130,61)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(126,2-130,61)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(126,2-130,61)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(126,2-130,61)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(126,2-130,61)
(and (implies 
;; def=BinomialQueue.fst(120,53-127,6); use=BinomialQueue.fst(126,8-127,6)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(126,2-130,61)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(126,2-130,61)
(not 
;; def=BinomialQueue.fst(120,53-120,54); use=BinomialQueue.fst(126,8-126,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(120,53-128,5); use=BinomialQueue.fst(126,8-128,5)
(= x_07642eb27f8c86505049ec727a4a557c_1
@x2)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(126,2-130,61)
(and 
;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(129,16-129,17)
(or label_3

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(129,16-129,17)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.forest)

;; def=BinomialQueue.fst(94,18-120,54); use=BinomialQueue.fst(126,2-130,61)
(= x_07642eb27f8c86505049ec727a4a557c_1
@x3)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=BinomialQueue.fst(129,7-129,17); use=BinomialQueue.fst(129,7-129,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_1)
@x4)
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x6 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(126,2-130,61)
(ApplyTT @x1
@x6)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(126,2-130,61)
(ApplyTT @x5
@x6)
)
)
 :weight 0


:pattern ((ApplyTT @x5
@x6))
:qid @query.9))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(126,2-130,61)
(and (implies 
;; def=BinomialQueue.fst(129,7-129,17); use=BinomialQueue.fst(129,7-129,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_1)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(126,2-130,61)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(126,2-130,61)
(ApplyTT @x5
@x6)
)
)
 
;;no pats
:qid @query.10))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(126,2-130,61)
(not 
;; def=BinomialQueue.fst(129,7-129,17); use=BinomialQueue.fst(129,7-129,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_1)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=BinomialQueue.fst(129,7-130,61); use=BinomialQueue.fst(129,7-130,61)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_1)
@x6)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(126,2-130,61)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(130,45-130,52)
(or label_4

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(130,45-130,52)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(126,2-130,61)
(= @x7
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(126,2-130,61)
(and 
;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(130,59-130,60)
(or label_5

;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(130,59-130,60)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
BinomialQueue.forest)

;; def=FStar.List.Tot.Base.fst(52,8-52,9); use=BinomialQueue.fst(126,2-130,61)
(= x_07642eb27f8c86505049ec727a4a557c_1
@x8)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(120,53-130,61); use=BinomialQueue.fst(126,2-130,61)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(126,2-130,61)
(and 
;; def=BinomialQueue.fst(126,2-130,61); use=BinomialQueue.fst(130,53-130,61)
(or label_6

;; def=BinomialQueue.fst(126,2-130,61); use=BinomialQueue.fst(130,53-130,61)
(Valid 
;; def=BinomialQueue.fst(126,2-130,61); use=BinomialQueue.fst(130,53-130,61)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1)
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(126,2-130,61)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Tm_refine_252db1c814cdaecb964fff2c793cb288)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(126,2-130,61)
(= @x10
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))


;; def=BinomialQueue.fst(120,53-130,61); use=BinomialQueue.fst(126,2-130,61)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1)
@x10)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(130,9-130,44)
(and 
;; def=BinomialQueue.fst(122,16-122,37); use=BinomialQueue.fst(130,9-130,44)
(or label_7

;; def=BinomialQueue.fst(122,16-122,37); use=BinomialQueue.fst(130,9-130,44)
(Valid 
;; def=BinomialQueue.fst(122,16-122,37); use=BinomialQueue.fst(130,9-130,44)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(130,9-130,44)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=BinomialQueue.fst(123,15-123,49); use=BinomialQueue.fst(130,9-130,44)
(Valid 
;; def=BinomialQueue.fst(123,15-123,49); use=BinomialQueue.fst(130,9-130,44)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.mk_compact (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(130,9-130,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(130,9-130,44)
(ApplyTT @x5
@x11)
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.mk_compact_preserves_binomial_queue, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_f26957a7e62b271a8736230b1e9c83c1_0, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_FStar.List.Tot.Base.tail, equation_FStar.List.Tot.Base.tl, equation_Prims.l_or, equation_Prims.pos, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, equation_with_fuel_BinomialQueue.mk_compact.fuel_instrumented, fuel_guarded_inversion_Prims.list, int_inversion, l_and-interp, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, subterm_ordering_Prims.Cons, true_interp, typing_BinomialQueue.mk_compact, typing_tok_BinomialQueue.Leaf@tok, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec mk_compact_preserves_binomial_queue


; <Start encoding let rec mk_compact_preserves_binomial_queue>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.mk_compact_preserves_binomial_queue (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.mk_compact_preserves_binomial_queue@tok () Term)

; </end encoding let rec mk_compact_preserves_binomial_queue>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=FStar.Pervasives.Native.fst(59,33-59,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.__proj__Internal__item___2; Namespace BinomialQueue
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_8a52c7ed1e8b93d264945c07880ca137)
(HasType (BinomialQueue.__proj__Internal__item___2 @x0)
BinomialQueue.tree))
 

:pattern ((BinomialQueue.__proj__Internal__item___2 @x0))
:qid typing_BinomialQueue.__proj__Internal__item___2))
:named typing_BinomialQueue.__proj__Internal__item___2))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__2))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=FStar.Pervasives.Native.fst(59,33-59,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__1 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__1))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name BinomialQueue.__proj__Internal__item___2; Namespace BinomialQueue
(assert (! (forall ((@x0 Term))
 (! (= (BinomialQueue.__proj__Internal__item___2 @x0)
(BinomialQueue.Internal__2 @x0))
 

:pattern ((BinomialQueue.__proj__Internal__item___2 @x0))
:qid proj_equation_BinomialQueue.Internal__2))
:named proj_equation_BinomialQueue.Internal__2))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple2@tok)

;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))


;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok.1))
)
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 126
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))

:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 125
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))

:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 132
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple2__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
(push) ;; push{2

; Starting query at BinomialQueue.fst(140,2-144,51)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_972eb75881868fa9dc94ebf10c8f5b25 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_972eb75881868fa9dc94ebf10c8f5b25 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_972eb75881868fa9dc94ebf10c8f5b25 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_972eb75881868fa9dc94ebf10c8f5b25))

:named refinement_kinding_Tm_refine_972eb75881868fa9dc94ebf10c8f5b25))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=BinomialQueue.fst(140,2-144,51)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_972eb75881868fa9dc94ebf10c8f5b25 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(140,2-144,51)
(BinomialQueue.is_pow2heap @x2
@x3)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(140,2-144,51)
(BinomialQueue.is_pow2heap @x2
@x4)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_972eb75881868fa9dc94ebf10c8f5b25 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_972eb75881868fa9dc94ebf10c8f5b25))

:named refinement_interpretation_Tm_refine_972eb75881868fa9dc94ebf10c8f5b25))
;;;;;;;;;;;;;;;;haseq for Tm_refine_972eb75881868fa9dc94ebf10c8f5b25
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_972eb75881868fa9dc94ebf10c8f5b25 @x0
@x1
@x2)))
(Valid (Prims.hasEq BinomialQueue.tree)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_972eb75881868fa9dc94ebf10c8f5b25 @x0
@x1
@x2))))
:qid haseqTm_refine_972eb75881868fa9dc94ebf10c8f5b25))

:named haseqTm_refine_972eb75881868fa9dc94ebf10c8f5b25))

; Encoding query formula : forall (d: Prims.pos) (t1: BinomialQueue.tree) (t2: BinomialQueue.tree).
;   (forall (t:
;       _: BinomialQueue.tree{BinomialQueue.is_pow2heap d t1 /\ BinomialQueue.is_pow2heap d t2}).
;       (*  - Could not prove post-condition
; *) d + 1 > 0) /\
;   (forall (p: Prims.pure_post BinomialQueue.tree).
;       BinomialQueue.is_pow2heap d t1 /\ BinomialQueue.is_pow2heap d t2 /\
;       (forall (pure_result: BinomialQueue.tree).
;           BinomialQueue.is_pow2heap (d + 1) pure_result ==> p pure_result) ==>
;       (~(Internal? (t1, t2)._1 && Leaf? (t1, t2)._1._2 && Internal? (t1, t2)._2 &&
;           Leaf? (t1, t2)._2._2) ==>
;         Prims.l_False) /\
;       (forall (b: BinomialQueue.tree)
;           (b: BinomialQueue.key_t)
;           (b: BinomialQueue.tree)
;           (b: BinomialQueue.key_t).
;           (t1,
;           t2) ==
;           (BinomialQueue.Internal b b BinomialQueue.Leaf,
;           BinomialQueue.Internal b b BinomialQueue.Leaf) ==>
;           (forall (k: Prims.pure_post BinomialQueue.tree).
;               (forall (x: BinomialQueue.tree). {:pattern Prims.guard_free (k x)}
;                   (x ==
;                     (let
;                       BinomialQueue.Internal left1 k1 BinomialQueue.Leaf,
;                       BinomialQueue.Internal left2 k2 BinomialQueue.Leaf =
;                         t1, t2
;                       in
;                       (match k1 <= k2 with
;                         | true ->
;                           BinomialQueue.Internal (BinomialQueue.Internal left1 k1 left2)
;                             k2
;                             BinomialQueue.Leaf
;                         | _ ->
;                           BinomialQueue.Internal (BinomialQueue.Internal left2 k2 left1)
;                             k1
;                             BinomialQueue.Leaf)
;                       <:
;                       BinomialQueue.tree) ==>
;                     (forall (return_val: BinomialQueue.tree). return_val == x ==> p return_val)) ==>
;                   k x) ==>
;               (b <= b == true ==> (forall (any_result: BinomialQueue.tree). k any_result)) /\
;               (~(b <= b = true) ==>
;                 (forall (b: Prims.bool).
;                     b <= b == b ==> (forall (any_result: BinomialQueue.tree). k any_result))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let smash`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree)
(HasType @x2
BinomialQueue.tree))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_972eb75881868fa9dc94ebf10c8f5b25 @x0
@x1
@x2))

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(138,39-138,46)
(or label_1

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(140,2-144,51)
(> (BoxInt_proj_0 (Prims.op_Addition @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post BinomialQueue.tree))

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(140,2-144,51)
(BinomialQueue.is_pow2heap @x0
@x1)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(140,2-144,51)
(BinomialQueue.is_pow2heap @x0
@x2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x4 Term))
 (! (implies (and (or label_2
(HasType @x4
BinomialQueue.tree))

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(140,2-144,51)
(or label_3

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(140,2-144,51)
(BinomialQueue.is_pow2heap (Prims.op_Addition @x0
(BoxInt 1))
@x4)
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(140,2-144,51)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(140,2-144,51)
(ApplyTT @x3
@x4)
)
)
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(140,2-144,51)
(and (implies 
;; def=BinomialQueue.fst(141,4-141,50); use=BinomialQueue.fst(141,4-141,50)
(not 
;; def=BinomialQueue.fst(141,4-141,50); use=BinomialQueue.fst(141,4-141,50)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (BinomialQueue.uu___is_Internal (FStar.Pervasives.Native.__proj__Mktuple2__item___1 BinomialQueue.tree
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple2 BinomialQueue.tree
BinomialQueue.tree
@x1
@x2)))
(BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 (FStar.Pervasives.Native.__proj__Mktuple2__item___1 BinomialQueue.tree
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple2 BinomialQueue.tree
BinomialQueue.tree
@x1
@x2)))))
(BinomialQueue.uu___is_Internal (FStar.Pervasives.Native.__proj__Mktuple2__item___2 BinomialQueue.tree
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple2 BinomialQueue.tree
BinomialQueue.tree
@x1
@x2)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 (FStar.Pervasives.Native.__proj__Mktuple2__item___2 BinomialQueue.tree
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple2 BinomialQueue.tree
BinomialQueue.tree
@x1
@x2))))))
)

label_4)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x5 Term))
 (! (implies (HasType @x5
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x6 Term))
 (! (implies (HasType @x6
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.key_t)

;; def=BinomialQueue.fst(140,8-141,50); use=BinomialQueue.fst(140,8-141,50)
(= (FStar.Pervasives.Native.Mktuple2 BinomialQueue.tree
BinomialQueue.tree
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2 BinomialQueue.tree
BinomialQueue.tree
(BinomialQueue.Internal @x4
@x5
BinomialQueue.Leaf@tok)
(BinomialQueue.Internal @x6
@x7
BinomialQueue.Leaf@tok)))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post BinomialQueue.tree))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x9 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(136,9-144,51); use=BinomialQueue.fst(140,2-144,51)
(= @x9
(let ((@lb10 (FStar.Pervasives.Native.Mktuple2 BinomialQueue.tree
BinomialQueue.tree
@x1
@x2)))
(ite (and (is-BinomialQueue.Internal (FStar.Pervasives.Native.Mktuple2__1 @lb10))
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 (FStar.Pervasives.Native.Mktuple2__1 @lb10)))
(is-BinomialQueue.Internal (FStar.Pervasives.Native.Mktuple2__2 @lb10))
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 (FStar.Pervasives.Native.Mktuple2__2 @lb10))))
(let ((@lb11 (Prims.op_LessThanOrEqual (BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__1 @lb10))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__2 @lb10)))))
(ite (= @lb11
(BoxBool true))
(BinomialQueue.Internal (BinomialQueue.Internal (BinomialQueue.Internal__0 (FStar.Pervasives.Native.Mktuple2__1 @lb10))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__1 @lb10))
(BinomialQueue.Internal__0 (FStar.Pervasives.Native.Mktuple2__2 @lb10)))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__2 @lb10))
BinomialQueue.Leaf@tok)
(BinomialQueue.Internal (BinomialQueue.Internal (BinomialQueue.Internal__0 (FStar.Pervasives.Native.Mktuple2__2 @lb10))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__2 @lb10))
(BinomialQueue.Internal__0 (FStar.Pervasives.Native.Mktuple2__1 @lb10)))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__1 @lb10))
BinomialQueue.Leaf@tok)))
Tm_unit)))


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
BinomialQueue.tree)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x10
@x9)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x3
@x10)
)
)
 
;;no pats
:qid @query.10))
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(140,2-144,51)
(ApplyTT @x8
@x9)
)
)
 :weight 0


:pattern ((ApplyTT @x8
@x9))
:qid @query.9))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(140,2-144,51)
(and (implies 
;; def=BinomialQueue.fst(142,7-142,15); use=BinomialQueue.fst(142,7-142,15)
(= (Prims.op_LessThanOrEqual @x5
@x7)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x9 Term))
 (! (implies (HasType @x9
BinomialQueue.tree)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(140,2-144,51)
(ApplyTT @x8
@x9)
)
)
 
;;no pats
:qid @query.11))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(140,2-144,51)
(not 
;; def=BinomialQueue.fst(142,7-142,15); use=BinomialQueue.fst(142,7-142,15)
(= (Prims.op_LessThanOrEqual @x5
@x7)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.bool)

;; def=BinomialQueue.fst(142,7-144,51); use=BinomialQueue.fst(142,7-144,51)
(= (Prims.op_LessThanOrEqual @x5
@x7)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(140,2-144,51)
(forall ((@x10 Term))
 (! (implies (HasType @x10
BinomialQueue.tree)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(140,2-144,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(140,2-144,51)
(ApplyTT @x8
@x10)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.smash, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_irrelevance_BinomialQueue.pow2heap_pred.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, b2t_def, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, data_elim_BinomialQueue.Internal, data_typing_intro_BinomialQueue.Internal@tok, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.key_t, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented, false_interp, int_inversion, int_typing, l_and-interp, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, proj_equation_BinomialQueue.Internal__2, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let smash


; <Start encoding let smash>

(declare-fun BinomialQueue.smash (Term Term Term) Term)
(declare-fun Tm_refine_89e06c024202b7960c7a838d26b7ac36 (Term) Term)
;;;;;;;;;;;;;;;;d: Prims.pos -> t1: tree -> t2: tree -> Prims.Pure tree
(declare-fun Tm_arrow_107d37e56b63d0c7f97fc8eb8bb7606b () Term)
(declare-fun BinomialQueue.smash@tok () Term)


; </end encoding let smash>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.smash; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(135,4-135,9); use=BinomialQueue.fst(135,4-135,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(137,19-137,35)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(137,19-137,35)
(BinomialQueue.is_pow2heap @x0
@x1)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(137,39-137,55)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(137,39-137,55)
(BinomialQueue.is_pow2heap @x0
@x2)
)

(HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree)
(HasType @x2
BinomialQueue.tree))
(HasType (BinomialQueue.smash @x0
@x1
@x2)
(Tm_refine_89e06c024202b7960c7a838d26b7ac36 @x0)))
 

:pattern ((BinomialQueue.smash @x0
@x1
@x2))
:qid typing_BinomialQueue.smash))

:named typing_BinomialQueue.smash))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name BinomialQueue.smash; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(136,9-136,13); use=BinomialQueue.fst(136,9-136,13)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_89e06c024202b7960c7a838d26b7ac36 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_89e06c024202b7960c7a838d26b7ac36 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_89e06c024202b7960c7a838d26b7ac36))

:named refinement_kinding_Tm_refine_89e06c024202b7960c7a838d26b7ac36))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name BinomialQueue.smash; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(136,9-136,13); use=BinomialQueue.fst(136,9-136,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_89e06c024202b7960c7a838d26b7ac36 @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(138,27-138,48)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(138,27-138,48)
(BinomialQueue.is_pow2heap (Prims.op_Addition @x2
(BoxInt 1))
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_89e06c024202b7960c7a838d26b7ac36 @x2)))
:qid refinement_interpretation_Tm_refine_89e06c024202b7960c7a838d26b7ac36))

:named refinement_interpretation_Tm_refine_89e06c024202b7960c7a838d26b7ac36))
;;;;;;;;;;;;;;;;haseq for Tm_refine_89e06c024202b7960c7a838d26b7ac36
;;; Fact-ids: Name BinomialQueue.smash; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(136,9-136,13); use=BinomialQueue.fst(136,9-136,13)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_89e06c024202b7960c7a838d26b7ac36 @x0)))
(Valid (Prims.hasEq BinomialQueue.tree)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_89e06c024202b7960c7a838d26b7ac36 @x0))))
:qid haseqTm_refine_89e06c024202b7960c7a838d26b7ac36))

:named haseqTm_refine_89e06c024202b7960c7a838d26b7ac36))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.smash
;;; Fact-ids: Name BinomialQueue.smash; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(135,4-135,9); use=BinomialQueue.fst(135,4-135,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.smash @x0
@x1
@x2)
(let ((@lb3 (FStar.Pervasives.Native.Mktuple2 BinomialQueue.tree
BinomialQueue.tree
@x1
@x2)))
(ite (and (is-BinomialQueue.Internal (FStar.Pervasives.Native.Mktuple2__1 @lb3))
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 (FStar.Pervasives.Native.Mktuple2__1 @lb3)))
(is-BinomialQueue.Internal (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 (FStar.Pervasives.Native.Mktuple2__2 @lb3))))
(let ((@lb4 (Prims.op_LessThanOrEqual (BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__1 @lb3))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__2 @lb3)))))
(ite (= @lb4
(BoxBool true))
(BinomialQueue.Internal (BinomialQueue.Internal (BinomialQueue.Internal__0 (FStar.Pervasives.Native.Mktuple2__1 @lb3))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__1 @lb3))
(BinomialQueue.Internal__0 (FStar.Pervasives.Native.Mktuple2__2 @lb3)))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__2 @lb3))
BinomialQueue.Leaf@tok)
(BinomialQueue.Internal (BinomialQueue.Internal (BinomialQueue.Internal__0 (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(BinomialQueue.Internal__0 (FStar.Pervasives.Native.Mktuple2__1 @lb3)))
(BinomialQueue.Internal__1 (FStar.Pervasives.Native.Mktuple2__1 @lb3))
BinomialQueue.Leaf@tok)))
Tm_unit)))
 

:pattern ((BinomialQueue.smash @x0
@x1
@x2))
:qid equation_BinomialQueue.smash))

:named equation_BinomialQueue.smash))
(push) ;; push{2

; Starting query at BinomialQueue.fst(155,2-160,11)

;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_0
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_0
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_0))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;t : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_2 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2))
(declare-fun Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(150,34-160,11); use=BinomialQueue.fst(150,34-160,11)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_ad0d4ba3b6545604fb64fe4796f33598))

:named refinement_kinding_Tm_refine_ad0d4ba3b6545604fb64fe4796f33598))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(150,34-160,11); use=BinomialQueue.fst(150,34-160,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(155,2-160,11)

;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(155,2-160,11)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x2)))
:qid refinement_interpretation_Tm_refine_ad0d4ba3b6545604fb64fe4796f33598))

:named refinement_interpretation_Tm_refine_ad0d4ba3b6545604fb64fe4796f33598))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ad0d4ba3b6545604fb64fe4796f33598
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(150,34-160,11); use=BinomialQueue.fst(150,34-160,11)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x0)))
(Valid (Prims.hasEq BinomialQueue.tree)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x0))))
:qid haseqTm_refine_ad0d4ba3b6545604fb64fe4796f33598))

:named haseqTm_refine_ad0d4ba3b6545604fb64fe4796f33598))
(declare-fun BinomialQueue.carry (Term Term Term) Term)

(declare-fun Tm_refine_ef894c20818013c5faab7b4bf585814b (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(151,9-151,15); use=BinomialQueue.fst(151,9-151,15)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_ef894c20818013c5faab7b4bf585814b))

:named refinement_kinding_Tm_refine_ef894c20818013c5faab7b4bf585814b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(151,9-151,15); use=BinomialQueue.fst(151,9-151,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(153,27-153,48)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(153,27-153,48)
(BinomialQueue.is_binomial_queue @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x2)))
:qid refinement_interpretation_Tm_refine_ef894c20818013c5faab7b4bf585814b))

:named refinement_interpretation_Tm_refine_ef894c20818013c5faab7b4bf585814b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ef894c20818013c5faab7b4bf585814b
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(151,9-151,15); use=BinomialQueue.fst(151,9-151,15)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)))
(Valid (Prims.hasEq BinomialQueue.forest)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ef894c20818013c5faab7b4bf585814b @x0))))
:qid haseqTm_refine_ef894c20818013c5faab7b4bf585814b))

:named haseqTm_refine_ef894c20818013c5faab7b4bf585814b))
;;;;;;;;;;;;;;;;d: Prims.pos -> q: forest -> t: tree{q << q} -> Prims.Pure forest
(declare-fun Tm_arrow_2a46397c9e62616da9473d4c89030e43 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2a46397c9e62616da9473d4c89030e43
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_2a46397c9e62616da9473d4c89030e43
Tm_type)
:named kinding_Tm_arrow_2a46397c9e62616da9473d4c89030e43))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(150,17-160,11); use=BinomialQueue.fst(150,17-160,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_2a46397c9e62616da9473d4c89030e43)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_2a46397c9e62616da9473d4c89030e43))
:qid BinomialQueue_pre_typing_Tm_arrow_2a46397c9e62616da9473d4c89030e43))

:named BinomialQueue_pre_typing_Tm_arrow_2a46397c9e62616da9473d4c89030e43))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2a46397c9e62616da9473d4c89030e43
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(150,17-160,11); use=BinomialQueue.fst(150,17-160,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_2a46397c9e62616da9473d4c89030e43)
(and 
;; def=BinomialQueue.fst(150,17-160,11); use=BinomialQueue.fst(150,17-160,11)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(BinomialQueue.is_binomial_queue @x1
@x2)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(BinomialQueue.is_pow2heap @x1
@x3)
)

(HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
(Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid BinomialQueue_interpretation_Tm_arrow_2a46397c9e62616da9473d4c89030e43.1))

(IsTotFun @x0)

;; def=BinomialQueue.fst(150,17-160,11); use=BinomialQueue.fst(150,17-160,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.pos)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_2a46397c9e62616da9473d4c89030e43.2))


;; def=BinomialQueue.fst(150,17-160,11); use=BinomialQueue.fst(150,17-160,11)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid BinomialQueue_interpretation_Tm_arrow_2a46397c9e62616da9473d4c89030e43.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_2a46397c9e62616da9473d4c89030e43))
:qid BinomialQueue_interpretation_Tm_arrow_2a46397c9e62616da9473d4c89030e43))

:named BinomialQueue_interpretation_Tm_arrow_2a46397c9e62616da9473d4c89030e43))
(declare-fun BinomialQueue.carry@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT BinomialQueue.carry@tok
@x0)
@x1)
@x2)
(BinomialQueue.carry @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT BinomialQueue.carry@tok
@x0)
@x1)
@x2))
:qid token_correspondence_BinomialQueue.carry))

:named token_correspondence_BinomialQueue.carry))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.carry@tok
Tm_arrow_2a46397c9e62616da9473d4c89030e43))

;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT BinomialQueue.carry@tok
@x1)
@x2)
@x3)
(BinomialQueue.carry @x1
@x2
@x3))
 

:pattern ((BinomialQueue.carry @x1
@x2
@x3))
:qid function_token_typing_BinomialQueue.carry.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.carry@tok))
:qid function_token_typing_BinomialQueue.carry))

:named function_token_typing_BinomialQueue.carry))

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(BinomialQueue.is_binomial_queue @x0
@x1)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(BinomialQueue.is_pow2heap @x0
@x2)
)

(HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest)
(HasType @x2
(Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x1)))
(HasType (BinomialQueue.carry @x0
@x1
@x2)
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)))
 

:pattern ((BinomialQueue.carry @x0
@x1
@x2))
:qid typing_BinomialQueue.carry))

:named typing_BinomialQueue.carry))
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : (forall (p: Prims.pure_post BinomialQueue.forest).
;     BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d t /\
;     (forall (pure_result: BinomialQueue.forest).
;         BinomialQueue.is_binomial_queue d pure_result ==> p pure_result) ==>
;     (forall (k: Prims.pure_post BinomialQueue.forest).
;         (forall (x: BinomialQueue.forest). {:pattern Prims.guard_free (k x)}
;             (x ==
;               (match q with
;                 | [] -> [t]
;                 | BinomialQueue.Leaf :: tl -> t :: tl
;                 | hd :: tl ->
;                   BinomialQueue.Leaf :: BinomialQueue.carry (d + 1) tl (BinomialQueue.smash d hd t)) ==>
;               (forall (return_val: BinomialQueue.forest). return_val == x ==> p return_val)) ==>
;             k x) ==>
;         (~(Nil? q) /\ ~(Cons? q && Leaf? q.hd) /\ ~(Cons? q) ==> Prims.l_False) /\
;         (q == [] ==> (forall (any_result: BinomialQueue.forest). k any_result)) /\
;         (~(Nil? q) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               q == BinomialQueue.Leaf :: b ==>
;               (forall (any_result: BinomialQueue.forest). k any_result)) /\
;           (~(Cons? q && Leaf? q.hd) ==>
;             (forall (b: BinomialQueue.tree) (b: Prims.list BinomialQueue.tree).
;                 q == b :: b ==>
;                 d + 1 > 0 /\
;                 (forall (return_val: Prims.pos).
;                     return_val == d + 1 ==>
;                     BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d t /\
;                     (forall (pure_result: BinomialQueue.tree).
;                         BinomialQueue.is_pow2heap (d + 1) pure_result ==>
;                         BinomialQueue.smash d b t == pure_result ==>
;                         b << q /\
;                         (forall (return_val: t: BinomialQueue.tree{b << q}).
;                             return_val == BinomialQueue.smash d b t ==>
;                             BinomialQueue.smash d b t == return_val ==>
;                             BinomialQueue.is_binomial_queue (d + 1) b /\
;                             BinomialQueue.is_pow2heap (d + 1) (BinomialQueue.smash d b t) /\
;                             (forall (pure_result: BinomialQueue.forest).
;                                 BinomialQueue.is_binomial_queue (d + 1) pure_result ==>
;                                 BinomialQueue.carry (d + 1) b (BinomialQueue.smash d b t) ==
;                                 pure_result ==>
;                                 (forall (any_result: BinomialQueue.forest). k any_result)))))))))) /\
; (forall (p: Prims.pure_post BinomialQueue.forest).
;     BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d t /\
;     (forall (pure_result: BinomialQueue.forest).
;         BinomialQueue.is_binomial_queue d pure_result ==> p pure_result) ==>
;     BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d t /\
;     (forall (pure_result: BinomialQueue.forest).
;         BinomialQueue.is_binomial_queue d pure_result ==>
;         pure_result ==
;         (match q with
;           | [] -> [t]
;           | BinomialQueue.Leaf :: tl -> t :: tl
;           | hd :: tl ->
;             BinomialQueue.Leaf :: BinomialQueue.carry (d + 1) tl (BinomialQueue.smash d hd t)) ==>
;         (forall (return_val: BinomialQueue.forest). return_val == pure_result ==> p return_val)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec carry`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.forest))

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
BinomialQueue.forest))

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(155,2-160,11)
(or label_2

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
@x1)
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(155,2-160,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(155,2-160,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post BinomialQueue.forest))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x2 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(151,9-160,11); use=BinomialQueue.fst(155,2-160,11)
(= @x2
(let ((@lb3 x_07642eb27f8c86505049ec727a4a557c_1))
(ite (is-Prims.Nil @lb3)
(Prims.Cons BinomialQueue.tree
x_c1ab7496c060d1f2d977fd02b92d48e2_2
(Prims.Nil BinomialQueue.tree))
(ite (and (is-Prims.Cons @lb3)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb3)))
(Prims.Cons BinomialQueue.tree
x_c1ab7496c060d1f2d977fd02b92d48e2_2
(Prims.Cons_tl @lb3))
(ite (is-Prims.Cons @lb3)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.carry (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl @lb3)
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
(Prims.Cons_hd @lb3)
x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
Tm_unit)))))


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.forest)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x3
@x2)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x3)
)
)
 
;;no pats
:qid @query.4))
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(155,2-160,11)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(155,2-160,11)
(and (implies 
;; def=BinomialQueue.fst(150,23-160,11); use=BinomialQueue.fst(155,2-160,11)
(and 
;; def=BinomialQueue.fst(150,23-150,24); use=BinomialQueue.fst(155,8-155,9)
(not 
;; def=BinomialQueue.fst(150,23-150,24); use=BinomialQueue.fst(155,8-155,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(155,2-160,11)
(not 
;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(155,2-160,11)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=BinomialQueue.fst(150,23-150,24); use=BinomialQueue.fst(155,8-155,9)
(not 
;; def=BinomialQueue.fst(150,23-150,24); use=BinomialQueue.fst(155,8-155,9)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)

label_3)
(implies 
;; def=BinomialQueue.fst(150,23-156,6); use=BinomialQueue.fst(155,8-156,6)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.forest)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(155,2-160,11)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(155,2-160,11)
(not 
;; def=BinomialQueue.fst(150,23-150,24); use=BinomialQueue.fst(155,8-155,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(155,2-160,11)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(150,23-157,12); use=BinomialQueue.fst(155,8-157,12)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.forest)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(155,2-160,11)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(155,2-160,11)
(not 
;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(155,2-160,11)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(150,23-158,10); use=BinomialQueue.fst(155,8-158,10)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(155,2-160,11)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(159,18-159,25)
(or label_4

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(159,18-159,25)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(155,2-160,11)
(= @x4
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(159,30-159,35)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(159,30-159,35)
(or label_5

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(159,30-159,35)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(159,30-159,35)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(159,30-159,35)
(or label_6

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(159,30-159,35)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(159,30-159,35)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(159,30-159,35)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(159,30-159,35)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(159,30-159,35)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x5)
)


;; def=BinomialQueue.fst(150,34-160,11); use=BinomialQueue.fst(155,2-160,11)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(155,2-160,11)
(and 
;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(159,29-159,43)
(or label_7

;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(159,29-159,43)
(Valid 
;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(159,29-159,43)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Tm_refine_ad0d4ba3b6545604fb64fe4796f33598 @x3))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(155,2-160,11)
(= @x6
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2))


;; def=BinomialQueue.fst(150,34-159,43); use=BinomialQueue.fst(155,2-160,11)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(159,12-159,17)
(and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(159,12-159,17)
(or label_8

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(159,12-159,17)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(159,12-159,17)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(159,12-159,17)
(or label_9

;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(159,12-159,17)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(159,12-159,17)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(159,12-159,17)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.forest)

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(159,12-159,17)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(159,12-159,17)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x7)
)


;; def=BinomialQueue.fst(159,8-159,43); use=BinomialQueue.fst(159,8-159,43)
(= (BinomialQueue.carry (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2))
@x7)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x8 Term))
 (! (implies (HasType @x8
BinomialQueue.forest)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(155,2-160,11)
(ApplyTT @x1
@x8)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(155,2-160,11); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.forest))

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x1 Term))
 (! (implies (and (or label_10
(HasType @x1
BinomialQueue.forest))

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(155,2-160,11)
(or label_11

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
@x1)
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(155,2-160,11)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(155,2-160,11)
(ApplyTT @x0
@x1)
)
)
:qid @query.16))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(155,2-160,11)
(and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(155,2-160,11)
(or label_12

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(155,2-160,11)
(or label_13

;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(155,2-160,11)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(155,2-160,11)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(155,2-160,11)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
@x1)
)


;; def=BinomialQueue.fst(151,9-160,11); use=BinomialQueue.fst(155,2-160,11)
(= @x1
(let ((@lb2 x_07642eb27f8c86505049ec727a4a557c_1))
(ite (is-Prims.Nil @lb2)
(Prims.Cons BinomialQueue.tree
x_c1ab7496c060d1f2d977fd02b92d48e2_2
(Prims.Nil BinomialQueue.tree))
(ite (and (is-Prims.Cons @lb2)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb2)))
(Prims.Cons BinomialQueue.tree
x_c1ab7496c060d1f2d977fd02b92d48e2_2
(Prims.Cons_tl @lb2))
(ite (is-Prims.Cons @lb2)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.carry (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl @lb2)
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
(Prims.Cons_hd @lb2)
x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
Tm_unit)))))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.forest)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x2
@x1)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x2)
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.15))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.carry, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, b2t_def, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_f26957a7e62b271a8736230b1e9c83c1_0, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_pow2heap, equation_Prims.pos, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, false_interp, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, int_inversion, int_typing, l_and-interp, l_or-interp, primitive_Prims.op_Addition, proj_equation_Prims.Cons_hd, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, subterm_ordering_Prims.Cons, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec carry


; <Start encoding let rec carry>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.carry.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.carry.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.carry (Term Term Term) Term)
(declare-fun BinomialQueue.carry@tok () Term)
(declare-fun Tm_refine_ef894c20818013c5faab7b4bf585814b (Term) Term)

;;;;;;;;;;;;;;;;d: Prims.pos -> q: forest -> t: tree -> Prims.Pure forest
(declare-fun Tm_arrow_c97f18de570ad73102802e7d45efe80c () Term)


; </end encoding let rec carry>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,56-65,58); use=FStar.Pervasives.Native.fst(65,56-65,58)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3)
@x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple3__item___3))

:named typing_FStar.Pervasives.Native.__proj__Mktuple3__item___3))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,46-65,48); use=FStar.Pervasives.Native.fst(65,46-65,48)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple3__item___2))

:named typing_FStar.Pervasives.Native.__proj__Mktuple3__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,36-65,38); use=FStar.Pervasives.Native.fst(65,36-65,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple3__item___1))

:named typing_FStar.Pervasives.Native.__proj__Mktuple3__item___1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.length @x0
@x1)
Prims.nat))
 

:pattern ((FStar.List.Tot.Base.length @x0
@x1))
:qid typing_FStar.List.Tot.Base.length))

:named typing_FStar.List.Tot.Base.length))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.carry; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(BinomialQueue.is_binomial_queue @x0
@x1)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(BinomialQueue.is_pow2heap @x0
@x2)
)

(HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest)
(HasType @x2
BinomialQueue.tree))
(HasType (BinomialQueue.carry @x0
@x1
@x2)
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)))
 

:pattern ((BinomialQueue.carry @x0
@x1
@x2))
:qid typing_BinomialQueue.carry))

:named typing_BinomialQueue.carry))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.tuple3@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1)))
(HasType (FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
@x2)
Prims.nat))
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.carry; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(BinomialQueue.is_binomial_queue @x1
@x2)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(BinomialQueue.is_pow2heap @x1
@x3)
)
)
(HasType (BinomialQueue.carry.fuel_instrumented @u0
@x1
@x2
@x3)
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x1)))
 

:pattern ((BinomialQueue.carry.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_BinomialQueue.carry.fuel_instrumented))

:named token_correspondence_BinomialQueue.carry.fuel_instrumented))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x6
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple3))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name BinomialQueue.carry; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(151,9-151,15); use=BinomialQueue.fst(151,9-151,15)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_ef894c20818013c5faab7b4bf585814b))

:named refinement_kinding_Tm_refine_ef894c20818013c5faab7b4bf585814b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name BinomialQueue.carry; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(151,9-151,15); use=BinomialQueue.fst(151,9-151,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(153,27-153,48)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(153,27-153,48)
(BinomialQueue.is_binomial_queue @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x2)))
:qid refinement_interpretation_Tm_refine_ef894c20818013c5faab7b4bf585814b))

:named refinement_interpretation_Tm_refine_ef894c20818013c5faab7b4bf585814b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__c (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__c))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__b (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__a (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__3))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,56-65,58); use=FStar.Pervasives.Native.fst(65,56-65,58)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Native.Mktuple3__3 @x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___3 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Native.Mktuple3__3))

:named proj_equation_FStar.Pervasives.Native.Mktuple3__3))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,46-65,48); use=FStar.Pervasives.Native.fst(65,46-65,48)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Native.Mktuple3__2 @x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___2 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Native.Mktuple3__2))

:named proj_equation_FStar.Pervasives.Native.Mktuple3__2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple3__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,36-65,38); use=FStar.Pervasives.Native.fst(65,36-65,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3)
(FStar.Pervasives.Native.Mktuple3__1 @x3))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple3__item___1 @x0
@x1
@x2
@x3))
:qid proj_equation_FStar.Pervasives.Native.Mktuple3__1))

:named proj_equation_FStar.Pervasives.Native.Mktuple3__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple3@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple3@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple3@tok)

;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple3@tok))


;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1))
:qid kinding_FStar.Pervasives.Native.tuple3@tok.1))


;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(HasType (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid kinding_FStar.Pervasives.Native.tuple3@tok.2))
)
:named kinding_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ef894c20818013c5faab7b4bf585814b
;;; Fact-ids: Name BinomialQueue.carry; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(151,9-151,15); use=BinomialQueue.fst(151,9-151,15)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)))
(Valid (Prims.hasEq BinomialQueue.forest)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ef894c20818013c5faab7b4bf585814b @x0))))
:qid haseqTm_refine_ef894c20818013c5faab7b4bf585814b))

:named haseqTm_refine_ef894c20818013c5faab7b4bf585814b))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(and (is-FStar.Pervasives.Native.Mktuple3 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple3__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple3__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple3__c @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (= 147
(Term_constr_id FStar.Pervasives.Native.tuple3@tok))
:named fresh_token_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.length
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1)))
(= (FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-Prims.Nil @lb3)
(BoxInt 0)
(ite (is-Prims.Cons @lb3)
(Prims.op_Addition (BoxInt 1)
(FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb3)))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.carry
;;; Fact-ids: Name BinomialQueue.carry; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(152,19-152,40)
(BinomialQueue.is_binomial_queue @x1
@x2)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(152,44-152,59)
(BinomialQueue.is_pow2heap @x1
@x3)
)
)
(= (BinomialQueue.carry.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x2))
(ite (is-Prims.Nil @lb4)
(Prims.Cons BinomialQueue.tree
@x3
(Prims.Nil BinomialQueue.tree))
(ite (and (is-Prims.Cons @lb4)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb4)))
(Prims.Cons BinomialQueue.tree
@x3
(Prims.Cons_tl @lb4))
(ite (is-Prims.Cons @lb4)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.carry.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Cons_tl @lb4)
(BinomialQueue.smash @x1
(Prims.Cons_hd @lb4)
@x3)))
Tm_unit))))))
 :weight 0


:pattern ((BinomialQueue.carry.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_BinomialQueue.carry.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.carry.fuel_instrumented))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
@x2)
(HasTypeFuel @u0
@x6
@x3))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x8
Tm_type)
(HasTypeFuel @u0
@x9
Tm_type)
(HasTypeFuel @u0
@x4
@x7)
(HasTypeFuel @u0
@x5
@x8)
(HasTypeFuel @u0
@x6
@x9)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid data_elim_FStar.Pervasives.Native.Mktuple3))

:named data_elim_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 146
(Term_constr_id (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Native.tuple3))

:named constructor_distinct_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 153
(Term_constr_id (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple3))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple3__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1))
(Valid (Prims.hasEq @x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
:qid assumption_FStar.Pervasives.Native.tuple3__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple3__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(= (FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))

:named FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.carry; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (BinomialQueue.carry.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(BinomialQueue.carry.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((BinomialQueue.carry.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_BinomialQueue.carry.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.carry.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.length @x0
@x1)
(FStar.List.Tot.Base.length.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.length @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.carry; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(150,8-150,13); use=BinomialQueue.fst(150,8-150,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.carry @x0
@x1
@x2)
(BinomialQueue.carry.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((BinomialQueue.carry @x0
@x1
@x2))
:qid @fuel_correspondence_BinomialQueue.carry.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.carry.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(176,2-192,51)

;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_0
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_0
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_0))
;;;;;;;;;;;;;;;;p : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_2 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_2
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_2
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_2))
;;;;;;;;;;;;;;;;c : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_3 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_3
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_3
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_3))
(declare-fun Tm_refine_926a86fc0bcbbb55f19cb4064525890b (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(167,35-192,51); use=BinomialQueue.fst(167,35-192,51)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_926a86fc0bcbbb55f19cb4064525890b))

:named refinement_kinding_Tm_refine_926a86fc0bcbbb55f19cb4064525890b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(167,35-192,51); use=BinomialQueue.fst(167,35-192,51)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)

;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(Prims.precedes Prims.nat
Prims.nat
(FStar.List.Tot.Base.length BinomialQueue.tree
@x2)
(FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x2)))
:qid refinement_interpretation_Tm_refine_926a86fc0bcbbb55f19cb4064525890b))

:named refinement_interpretation_Tm_refine_926a86fc0bcbbb55f19cb4064525890b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_926a86fc0bcbbb55f19cb4064525890b
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(167,35-192,51); use=BinomialQueue.fst(167,35-192,51)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x0)))
(Valid (Prims.hasEq BinomialQueue.tree)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x0))))
:qid haseqTm_refine_926a86fc0bcbbb55f19cb4064525890b))

:named haseqTm_refine_926a86fc0bcbbb55f19cb4064525890b))
(declare-fun BinomialQueue.join (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;d: Prims.pos ->     p: forest ->     q: forest ->     c: tree{FStar.List.Tot.Base.length p << FStar.List.Tot.Base.length p}   -> Prims.Pure forest
(declare-fun Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82
Tm_type)
:named kinding_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(167,16-192,51); use=BinomialQueue.fst(167,16-192,51)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82))
:qid BinomialQueue_pre_typing_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82))

:named BinomialQueue_pre_typing_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(167,16-192,51); use=BinomialQueue.fst(167,16-192,51)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82)
(and 
;; def=BinomialQueue.fst(167,16-192,51); use=BinomialQueue.fst(167,16-192,51)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(BinomialQueue.is_binomial_queue @x1
@x2)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(BinomialQueue.is_binomial_queue @x1
@x3)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(172,12-172,40)
(or 
;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(172,13-172,20)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf @x4))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(BinomialQueue.is_pow2heap @x1
@x4)
)
)

(HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.forest)
(HasType @x4
(Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid BinomialQueue_interpretation_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82.1))

(IsTotFun @x0)

;; def=BinomialQueue.fst(167,16-192,51); use=BinomialQueue.fst(167,16-192,51)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.pos)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82.2))


;; def=BinomialQueue.fst(167,16-192,51); use=BinomialQueue.fst(167,16-192,51)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid BinomialQueue_interpretation_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82.3))


;; def=BinomialQueue.fst(167,16-192,51); use=BinomialQueue.fst(167,16-192,51)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.forest))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid BinomialQueue_interpretation_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82))
:qid BinomialQueue_interpretation_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82))

:named BinomialQueue_interpretation_Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82))
(declare-fun BinomialQueue.join@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT BinomialQueue.join@tok
@x0)
@x1)
@x2)
@x3)
(BinomialQueue.join @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT BinomialQueue.join@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_BinomialQueue.join))

:named token_correspondence_BinomialQueue.join))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.join@tok
Tm_arrow_c25711cea3059b9cdf53cfa6b58e6b82))

;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT BinomialQueue.join@tok
@x1)
@x2)
@x3)
@x4)
(BinomialQueue.join @x1
@x2
@x3
@x4))
 

:pattern ((BinomialQueue.join @x1
@x2
@x3
@x4))
:qid function_token_typing_BinomialQueue.join.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.join@tok))
:qid function_token_typing_BinomialQueue.join))

:named function_token_typing_BinomialQueue.join))

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(BinomialQueue.is_binomial_queue @x0
@x1)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(BinomialQueue.is_binomial_queue @x0
@x2)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(172,12-172,40)
(or 
;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(172,13-172,20)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf @x3))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(BinomialQueue.is_pow2heap @x0
@x3)
)
)

(HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
(Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x1)))
(HasType (BinomialQueue.join @x0
@x1
@x2
@x3)
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)))
 

:pattern ((BinomialQueue.join @x0
@x1
@x2
@x3))
:qid typing_BinomialQueue.join))

:named typing_BinomialQueue.join))
(declare-fun label_48 () Bool)
(declare-fun label_47 () Bool)
(declare-fun label_46 () Bool)
(declare-fun label_45 () Bool)
(declare-fun label_44 () Bool)
(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




; Encoding query formula : (forall (p: Prims.pure_post BinomialQueue.forest).
;     BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_binomial_queue d q /\
;     (Leaf? c \/ BinomialQueue.is_pow2heap d c) /\
;     (forall (pure_result: BinomialQueue.forest).
;         BinomialQueue.is_binomial_queue d pure_result ==> p pure_result) ==>
;     (forall (k: Prims.pure_post BinomialQueue.forest).
;         (forall (x: BinomialQueue.forest). {:pattern Prims.guard_free (k x)}
;             (x ==
;               (match p, q, c with
;                 | [], _, BinomialQueue.Leaf -> q
;                 | _, [], BinomialQueue.Leaf -> p
;                 | [], _, _ -> BinomialQueue.carry d q c
;                 | _, [], _ -> BinomialQueue.carry d p c
;                 | BinomialQueue.Leaf :: tl_p, BinomialQueue.Leaf :: tl_q, _ ->
;                   c :: BinomialQueue.join (d + 1) tl_p tl_q BinomialQueue.Leaf
;                 | hd_p :: tl_p, BinomialQueue.Leaf :: tl_q, BinomialQueue.Leaf ->
;                   hd_p :: BinomialQueue.join (d + 1) tl_p tl_q BinomialQueue.Leaf
;                 | BinomialQueue.Leaf :: tl_p, hd_q :: tl_q, BinomialQueue.Leaf ->
;                   hd_q :: BinomialQueue.join (d + 1) tl_p tl_q BinomialQueue.Leaf
;                 | BinomialQueue.Leaf :: tl_p, hd_q :: tl_q, _ ->
;                   BinomialQueue.Leaf ::
;                   BinomialQueue.join (d + 1) tl_p tl_q (BinomialQueue.smash d hd_q c)
;                 | hd_p :: tl_p, BinomialQueue.Leaf :: tl_q, _ ->
;                   BinomialQueue.Leaf ::
;                   BinomialQueue.join (d + 1) tl_p tl_q (BinomialQueue.smash d hd_p c)
;                 | hd_p :: tl_p, hd_q :: tl_q, c ->
;                   c :: BinomialQueue.join (d + 1) tl_p tl_q (BinomialQueue.smash d hd_p hd_q)) ==>
;               (forall (return_val: BinomialQueue.forest). return_val == x ==> p return_val)) ==>
;             k x) ==>
;         (~(Nil? (p, q, c)._1 && Leaf? (p, q, c)._3) /\ ~(Nil? (p, q, c)._2 && Leaf? (p, q, c)._3) /\
;           ~(Nil? (p, q, c)._1) /\ ~(Nil? (p, q, c)._2) /\
;           ~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2 &&
;             Leaf? (p, q, c)._2.hd) /\
;           ~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2 && Leaf? (p, q, c)._2.hd && Leaf? (p, q, c)._3) /\
;           ~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2 && Leaf? (p, q, c)._3) /\
;           ~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2) /\
;           ~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2 && Leaf? (p, q, c)._2.hd) /\
;           ~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2) ==>
;           Prims.l_False) /\
;         (forall (b: Prims.list BinomialQueue.tree).
;             (p, q, c) == ([], b, BinomialQueue.Leaf) ==>
;             (forall (any_result: BinomialQueue.forest). k any_result)) /\
;         (~(Nil? (p, q, c)._1 && Leaf? (p, q, c)._3) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               (p, q, c) == (b, [], BinomialQueue.Leaf) ==>
;               (forall (any_result: BinomialQueue.forest). k any_result)) /\
;           (~(Nil? (p, q, c)._2 && Leaf? (p, q, c)._3) ==>
;             (forall (b: Prims.list BinomialQueue.tree) (b: BinomialQueue.tree).
;                 (p, q, c) == ([], b, b) ==>
;                 BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d c /\
;                 (forall (pure_result: BinomialQueue.forest).
;                     BinomialQueue.is_binomial_queue d pure_result ==> k pure_result)) /\
;             (~(Nil? (p, q, c)._1) ==>
;               (forall (b: Prims.list BinomialQueue.tree) (b: BinomialQueue.tree).
;                   (p, q, c) == (b, [], b) ==>
;                   BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_pow2heap d c /\
;                   (forall (pure_result: BinomialQueue.forest).
;                       BinomialQueue.is_binomial_queue d pure_result ==> k pure_result)) /\
;               (~(Nil? (p, q, c)._2) ==>
;                 (forall (b: Prims.list BinomialQueue.tree)
;                     (b: Prims.list BinomialQueue.tree)
;                     (b: BinomialQueue.tree).
;                     (p, q, c) == (BinomialQueue.Leaf :: b, BinomialQueue.Leaf :: b, b) ==>
;                     d + 1 > 0 /\
;                     (forall (return_val: Prims.pos).
;                         return_val == d + 1 ==>
;                         FStar.List.Tot.Base.length b << FStar.List.Tot.Base.length p /\
;                         (forall (any_result: BinomialQueue.tree).
;                             BinomialQueue.Leaf == any_result ==>
;                             BinomialQueue.is_binomial_queue (d + 1) b /\
;                             BinomialQueue.is_binomial_queue (d + 1) b /\
;                             (Leaf? BinomialQueue.Leaf \/
;                               BinomialQueue.is_pow2heap (d + 1) BinomialQueue.Leaf) /\
;                             (forall (pure_result: BinomialQueue.forest).
;                                 BinomialQueue.is_binomial_queue (d + 1) pure_result ==>
;                                 BinomialQueue.join (d + 1) b b BinomialQueue.Leaf == pure_result ==>
;                                 (forall (any_result: Prims.list BinomialQueue.tree). k any_result)))
;                     )) /\
;                 (~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2 &&
;                     Leaf? (p, q, c)._2.hd) ==>
;                   (forall (b: BinomialQueue.tree)
;                       (b: Prims.list BinomialQueue.tree)
;                       (b: Prims.list BinomialQueue.tree).
;                       (p, q, c) == (b :: b, BinomialQueue.Leaf :: b, BinomialQueue.Leaf) ==>
;                       d + 1 > 0 /\
;                       (forall (return_val: Prims.pos).
;                           return_val == d + 1 ==>
;                           FStar.List.Tot.Base.length b << FStar.List.Tot.Base.length p /\
;                           (forall (any_result: BinomialQueue.tree).
;                               BinomialQueue.Leaf == any_result ==>
;                               BinomialQueue.is_binomial_queue (d + 1) b /\
;                               BinomialQueue.is_binomial_queue (d + 1) b /\
;                               (Leaf? BinomialQueue.Leaf \/
;                                 BinomialQueue.is_pow2heap (d + 1) BinomialQueue.Leaf) /\
;                               (forall (pure_result: BinomialQueue.forest).
;                                   BinomialQueue.is_binomial_queue (d + 1) pure_result ==>
;                                   BinomialQueue.join (d + 1) b b BinomialQueue.Leaf == pure_result ==>
;                                   (forall (any_result: Prims.list BinomialQueue.tree). k any_result)
;                               )))) /\
;                   (~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2 && Leaf? (p, q, c)._2.hd &&
;                       Leaf? (p, q, c)._3) ==>
;                     (forall (b: Prims.list BinomialQueue.tree)
;                         (b: BinomialQueue.tree)
;                         (b: Prims.list BinomialQueue.tree).
;                         (p, q, c) == (BinomialQueue.Leaf :: b, b :: b, BinomialQueue.Leaf) ==>
;                         d + 1 > 0 /\
;                         (forall (return_val: Prims.pos).
;                             return_val == d + 1 ==>
;                             FStar.List.Tot.Base.length b << FStar.List.Tot.Base.length p /\
;                             (forall (any_result: BinomialQueue.tree).
;                                 BinomialQueue.Leaf == any_result ==>
;                                 BinomialQueue.is_binomial_queue (d + 1) b /\
;                                 BinomialQueue.is_binomial_queue (d + 1) b /\
;                                 (Leaf? BinomialQueue.Leaf \/
;                                   BinomialQueue.is_pow2heap (d + 1) BinomialQueue.Leaf) /\
;                                 (forall (pure_result: BinomialQueue.forest).
;                                     BinomialQueue.is_binomial_queue (d + 1) pure_result ==>
;                                     BinomialQueue.join (d + 1) b b BinomialQueue.Leaf == pure_result ==>
;                                     (forall (any_result: Prims.list BinomialQueue.tree).
;                                         k any_result))))) /\
;                     (~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2 &&
;                         Leaf? (p, q, c)._3) ==>
;                       (forall (b: Prims.list BinomialQueue.tree)
;                           (b: BinomialQueue.tree)
;                           (b: Prims.list BinomialQueue.tree)
;                           (b: BinomialQueue.tree).
;                           (p, q, c) == (BinomialQueue.Leaf :: b, b :: b, b) ==>
;                           d + 1 > 0 /\
;                           (forall (return_val: Prims.pos).
;                               return_val == d + 1 ==>
;                               BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d c /\
;                               (forall (pure_result: BinomialQueue.tree).
;                                   BinomialQueue.is_pow2heap (d + 1) pure_result ==>
;                                   BinomialQueue.smash d b c == pure_result ==>
;                                   FStar.List.Tot.Base.length b << FStar.List.Tot.Base.length p /\
;                                   (forall (return_val:
;                                       c:
;                                       BinomialQueue.tree
;                                         { FStar.List.Tot.Base.length b <<
;                                           FStar.List.Tot.Base.length p }).
;                                       return_val == BinomialQueue.smash d b c ==>
;                                       BinomialQueue.smash d b c == return_val ==>
;                                       BinomialQueue.is_binomial_queue (d + 1) b /\
;                                       BinomialQueue.is_binomial_queue (d + 1) b /\
;                                       (Leaf? (BinomialQueue.smash d b c) \/
;                                         BinomialQueue.is_pow2heap (d + 1)
;                                           (BinomialQueue.smash d b c)) /\
;                                       (forall (pure_result: BinomialQueue.forest).
;                                           BinomialQueue.is_binomial_queue (d + 1) pure_result ==>
;                                           BinomialQueue.join (d + 1) b b (BinomialQueue.smash d b c) ==
;                                           pure_result ==>
;                                           (forall (any_result: Prims.list BinomialQueue.tree).
;                                               k any_result)))))) /\
;                       (~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2) ==>
;                         (forall (b: BinomialQueue.tree)
;                             (b: Prims.list BinomialQueue.tree)
;                             (b: Prims.list BinomialQueue.tree)
;                             (b: BinomialQueue.tree).
;                             (p, q, c) == (b :: b, BinomialQueue.Leaf :: b, b) ==>
;                             d + 1 > 0 /\
;                             (forall (return_val: Prims.pos).
;                                 return_val == d + 1 ==>
;                                 BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d c /\
;                                 (forall (pure_result: BinomialQueue.tree).
;                                     BinomialQueue.is_pow2heap (d + 1) pure_result ==>
;                                     BinomialQueue.smash d b c == pure_result ==>
;                                     FStar.List.Tot.Base.length b << FStar.List.Tot.Base.length p /\
;                                     (forall (return_val:
;                                         c:
;                                         BinomialQueue.tree
;                                           { FStar.List.Tot.Base.length b <<
;                                             FStar.List.Tot.Base.length p }).
;                                         return_val == BinomialQueue.smash d b c ==>
;                                         BinomialQueue.smash d b c == return_val ==>
;                                         BinomialQueue.is_binomial_queue (d + 1) b /\
;                                         BinomialQueue.is_binomial_queue (d + 1) b /\
;                                         (Leaf? (BinomialQueue.smash d b c) \/
;                                           BinomialQueue.is_pow2heap (d + 1)
;                                             (BinomialQueue.smash d b c)) /\
;                                         (forall (pure_result: BinomialQueue.forest).
;                                             BinomialQueue.is_binomial_queue (d + 1) pure_result ==>
;                                             BinomialQueue.join (d + 1)
;                                               b
;                                               b
;                                               (BinomialQueue.smash d b c) ==
;                                             pure_result ==>
;                                             (forall (any_result: Prims.list BinomialQueue.tree).
;                                                 k any_result)))))) /\
;                         (~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2 && Leaf? (p, q, c)._2.hd) ==>
;                           (forall (b: BinomialQueue.tree)
;                               (b: Prims.list BinomialQueue.tree)
;                               (b: BinomialQueue.tree)
;                               (b: Prims.list BinomialQueue.tree)
;                               (b: BinomialQueue.tree).
;                               (p, q, c) == (b :: b, b :: b, b) ==>
;                               d + 1 > 0 /\
;                               (forall (return_val: Prims.pos).
;                                   return_val == d + 1 ==>
;                                   BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d b /\
;                                   (forall (pure_result: BinomialQueue.tree).
;                                       BinomialQueue.is_pow2heap (d + 1) pure_result ==>
;                                       BinomialQueue.smash d b b == pure_result ==>
;                                       FStar.List.Tot.Base.length b << FStar.List.Tot.Base.length p /\
;                                       (forall (return_val:
;                                           c:
;                                           BinomialQueue.tree
;                                             { FStar.List.Tot.Base.length b <<
;                                               FStar.List.Tot.Base.length p }).
;                                           return_val == BinomialQueue.smash d b b ==>
;                                           BinomialQueue.smash d b b == return_val ==>
;                                           BinomialQueue.is_binomial_queue (d + 1) b /\
;                                           BinomialQueue.is_binomial_queue (d + 1) b /\
;                                           (Leaf? (BinomialQueue.smash d b b) \/
;                                             BinomialQueue.is_pow2heap (d + 1)
;                                               (BinomialQueue.smash d b b)) /\
;                                           (forall (pure_result: BinomialQueue.forest).
;                                               BinomialQueue.is_binomial_queue (d + 1) pure_result ==>
;                                               BinomialQueue.join (d + 1)
;                                                 b
;                                                 b
;                                                 (BinomialQueue.smash d b b) ==
;                                               pure_result ==>
;                                               (forall (any_result: Prims.list BinomialQueue.tree).
;                                                   k any_result))))))))))))))))) /\
; (forall (p: Prims.pure_post BinomialQueue.forest).
;     BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_binomial_queue d q /\
;     (Leaf? c \/ BinomialQueue.is_pow2heap d c) /\
;     (forall (pure_result: BinomialQueue.forest).
;         BinomialQueue.is_binomial_queue d pure_result ==> p pure_result) ==>
;     BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_binomial_queue d q /\
;     (Leaf? c \/ BinomialQueue.is_pow2heap d c) /\
;     (forall (pure_result: BinomialQueue.forest).
;         BinomialQueue.is_binomial_queue d pure_result ==>
;         pure_result ==
;         (match p, q, c with
;           | [], _, BinomialQueue.Leaf -> q
;           | _, [], BinomialQueue.Leaf -> p
;           | [], _, _ -> BinomialQueue.carry d q c
;           | _, [], _ -> BinomialQueue.carry d p c
;           | BinomialQueue.Leaf :: tl_p, BinomialQueue.Leaf :: tl_q, _ ->
;             c :: BinomialQueue.join (d + 1) tl_p tl_q BinomialQueue.Leaf
;           | hd_p :: tl_p, BinomialQueue.Leaf :: tl_q, BinomialQueue.Leaf ->
;             hd_p :: BinomialQueue.join (d + 1) tl_p tl_q BinomialQueue.Leaf
;           | BinomialQueue.Leaf :: tl_p, hd_q :: tl_q, BinomialQueue.Leaf ->
;             hd_q :: BinomialQueue.join (d + 1) tl_p tl_q BinomialQueue.Leaf
;           | BinomialQueue.Leaf :: tl_p, hd_q :: tl_q, _ ->
;             BinomialQueue.Leaf ::
;             BinomialQueue.join (d + 1) tl_p tl_q (BinomialQueue.smash d hd_q c)
;           | hd_p :: tl_p, BinomialQueue.Leaf :: tl_q, _ ->
;             BinomialQueue.Leaf ::
;             BinomialQueue.join (d + 1) tl_p tl_q (BinomialQueue.smash d hd_p c)
;           | hd_p :: tl_p, hd_q :: tl_q, c ->
;             c :: BinomialQueue.join (d + 1) tl_p tl_q (BinomialQueue.smash d hd_p hd_q)) ==>
;         (forall (return_val: BinomialQueue.forest). return_val == pure_result ==> p return_val)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec join`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.forest))

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(176,2-192,51)
(or 
;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(176,2-192,51)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_3))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
BinomialQueue.forest))

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(176,2-192,51)
(or label_2

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
@x1)
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post BinomialQueue.forest))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(168,9-192,51); use=BinomialQueue.fst(176,2-192,51)
(= @x2
(let ((@lb3 (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(ite (and (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb3)))
x_07642eb27f8c86505049ec727a4a557c_2
(ite (and (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb3)))
x_07642eb27f8c86505049ec727a4a557c_1
(ite (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(BinomialQueue.carry x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(ite (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(BinomialQueue.carry x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb3)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb3))))
(Prims.Cons BinomialQueue.tree
x_c1ab7496c060d1f2d977fd02b92d48e2_3
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb3))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb3)))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb3)))
(Prims.Cons BinomialQueue.tree
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb3))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb3)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb3)))
(Prims.Cons BinomialQueue.tree
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb3))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb3)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb3)))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb3))
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb3))))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb3))
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb3)))
(Prims.Cons BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3__3 @lb3)
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb3))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb3))
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb3)))))
Tm_unit))))))))))))


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.forest)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x3
@x2)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x3)
)
)
 
;;no pats
:qid @query.4))
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and (implies 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=BinomialQueue.fst(177,4-177,15); use=BinomialQueue.fst(177,4-177,15)
(not 
;; def=BinomialQueue.fst(177,4-177,15); use=BinomialQueue.fst(177,4-177,15)
(and (BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(178,4-178,15); use=BinomialQueue.fst(178,4-178,15)
(not 
;; def=BinomialQueue.fst(178,4-178,15); use=BinomialQueue.fst(178,4-178,15)
(and (BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(179,4-179,12); use=BinomialQueue.fst(179,4-179,12)
(not 
;; def=BinomialQueue.fst(179,4-179,12); use=BinomialQueue.fst(179,4-179,12)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
)


;; def=BinomialQueue.fst(180,4-180,12); use=BinomialQueue.fst(180,4-180,12)
(not 
;; def=BinomialQueue.fst(180,4-180,12); use=BinomialQueue.fst(180,4-180,12)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
)


;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
)


;; def=BinomialQueue.fst(183,4-183,32); use=BinomialQueue.fst(183,4-183,32)
(not 
;; def=BinomialQueue.fst(183,4-183,32); use=BinomialQueue.fst(183,4-183,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(185,4-185,32); use=BinomialQueue.fst(185,4-185,32)
(not 
;; def=BinomialQueue.fst(185,4-185,32); use=BinomialQueue.fst(185,4-185,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(187,4-187,29); use=BinomialQueue.fst(187,4-187,29)
(not 
;; def=BinomialQueue.fst(187,4-187,29); use=BinomialQueue.fst(187,4-187,29)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
)


;; def=BinomialQueue.fst(191,4-191,29); use=BinomialQueue.fst(191,4-191,29)
(not 
;; def=BinomialQueue.fst(191,4-191,29); use=BinomialQueue.fst(191,4-191,29)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)
)

label_3)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(176,8-177,15); use=BinomialQueue.fst(176,8-177,15)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Nil BinomialQueue.tree)
@x2
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.forest)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(177,4-177,15); use=BinomialQueue.fst(177,4-177,15)
(and (BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(176,8-178,15); use=BinomialQueue.fst(176,8-178,15)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
@x2
(Prims.Nil BinomialQueue.tree)
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.forest)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(178,4-178,15); use=BinomialQueue.fst(178,4-178,15)
(and (BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(176,8-179,12); use=BinomialQueue.fst(176,8-179,12)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Nil BinomialQueue.tree)
@x2
@x3))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(179,16-179,21)
(and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(179,16-179,21)
(or label_4

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(179,16-179,21)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(179,16-179,21)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(179,16-179,21)
(or label_5

;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(179,16-179,21)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(179,16-179,21)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(179,16-179,21)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.forest)

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(179,16-179,21)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(179,16-179,21)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
@x4)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(179,16-179,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(179,16-179,21)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(179,4-179,12); use=BinomialQueue.fst(179,4-179,12)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(176,8-180,12); use=BinomialQueue.fst(176,8-180,12)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
@x2
(Prims.Nil BinomialQueue.tree)
@x3))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(180,16-180,21)
(and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(180,16-180,21)
(or label_6

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(180,16-180,21)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(180,16-180,21)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(180,16-180,21)
(or label_7

;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(180,16-180,21)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(180,16-180,21)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(180,16-180,21)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.forest)

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(180,16-180,21)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(180,16-180,21)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
@x4)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(180,16-180,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(180,16-180,21)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(180,4-180,12); use=BinomialQueue.fst(180,4-180,12)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(176,8-181,29); use=BinomialQueue.fst(176,8-181,29)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x3)
@x4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(182,13-182,20)
(or label_8

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(182,13-182,20)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x5
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(182,31-182,35)
(or label_9

;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(182,31-182,35)
(Valid 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(182,31-182,35)
(Prims.precedes Prims.nat
Prims.nat
(FStar.List.Tot.Base.length BinomialQueue.tree
@x2)
(FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(167,35-182,35); use=BinomialQueue.fst(176,2-192,51)
(= BinomialQueue.Leaf@tok
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(182,8-182,12)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(182,8-182,12)
(or label_10

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(182,8-182,12)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(182,8-182,12)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(182,8-182,12)
(or label_11

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(182,8-182,12)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(182,8-182,12)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(182,8-182,12)
(or label_12

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(182,8-182,12)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(182,8-182,12)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(182,8-182,12)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
BinomialQueue.Leaf@tok)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(182,8-182,12)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(182,8-182,12)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(182,8-182,12)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x7)
)


;; def=Prims.fst(616,20-616,22); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2
@x3
BinomialQueue.Leaf@tok)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x8)
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(176,8-183,32); use=BinomialQueue.fst(176,8-183,32)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
@x2
@x3)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x4)
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(184,16-184,23)
(or label_13

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(184,16-184,23)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x5
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(184,34-184,38)
(or label_14

;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(184,34-184,38)
(Valid 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(184,34-184,38)
(Prims.precedes Prims.nat
Prims.nat
(FStar.List.Tot.Base.length BinomialQueue.tree
@x3)
(FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(167,35-184,38); use=BinomialQueue.fst(176,2-192,51)
(= BinomialQueue.Leaf@tok
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(184,11-184,15)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(184,11-184,15)
(or label_15

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(184,11-184,15)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(184,11-184,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(184,11-184,15)
(or label_16

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(184,11-184,15)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(184,11-184,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(184,11-184,15)
(or label_17

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(184,11-184,15)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(184,11-184,15)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(184,11-184,15)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
BinomialQueue.Leaf@tok)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(184,11-184,15)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(184,11-184,15)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(184,11-184,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x7)
)


;; def=Prims.fst(616,20-616,22); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
@x4
BinomialQueue.Leaf@tok)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x8)
)
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(183,4-183,32); use=BinomialQueue.fst(183,4-183,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(176,8-185,32); use=BinomialQueue.fst(176,8-185,32)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2)
(Prims.Cons BinomialQueue.tree
@x3
@x4)
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(186,16-186,23)
(or label_18

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(186,16-186,23)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x5
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(186,34-186,38)
(or label_19

;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(186,34-186,38)
(Valid 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(186,34-186,38)
(Prims.precedes Prims.nat
Prims.nat
(FStar.List.Tot.Base.length BinomialQueue.tree
@x2)
(FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(167,35-186,38); use=BinomialQueue.fst(176,2-192,51)
(= BinomialQueue.Leaf@tok
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(186,11-186,15)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(186,11-186,15)
(or label_20

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(186,11-186,15)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(186,11-186,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(186,11-186,15)
(or label_21

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(186,11-186,15)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(186,11-186,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(186,11-186,15)
(or label_22

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(186,11-186,15)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(186,11-186,15)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(186,11-186,15)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
BinomialQueue.Leaf@tok)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(186,11-186,15)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(186,11-186,15)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(186,11-186,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x7)
)


;; def=Prims.fst(616,20-616,22); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2
@x4
BinomialQueue.Leaf@tok)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x8)
)
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(185,4-185,32); use=BinomialQueue.fst(185,4-185,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.tree)

;; def=BinomialQueue.fst(176,8-187,29); use=BinomialQueue.fst(176,8-187,29)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2)
(Prims.Cons BinomialQueue.tree
@x3
@x4)
@x5))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(188,16-188,23)
(or label_23

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(188,16-188,23)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x6
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(188,35-188,40)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(188,35-188,40)
(or label_24

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(188,35-188,40)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(188,35-188,40)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x3)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(188,35-188,40)
(or label_25

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(188,35-188,40)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(188,35-188,40)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(188,35-188,40)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(188,35-188,40)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(188,35-188,40)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x7)
)


;; def=BinomialQueue.fst(167,35-192,51); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(188,34-188,50)
(or label_26

;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(188,34-188,50)
(Valid 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(188,34-188,50)
(Prims.precedes Prims.nat
Prims.nat
(FStar.List.Tot.Base.length BinomialQueue.tree
@x2)
(FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x2))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x8
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3))


;; def=BinomialQueue.fst(167,35-188,50); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
@x8)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(188,11-188,15)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(188,11-188,15)
(or label_27

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(188,11-188,15)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(188,11-188,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(188,11-188,15)
(or label_28

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(188,11-188,15)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(188,11-188,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(188,11-188,15)
(or label_29

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(188,11-188,15)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(188,11-188,15)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(188,11-188,15)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(188,11-188,15)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(188,11-188,15)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(188,11-188,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x9)
)


;; def=Prims.fst(616,20-616,22); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2
@x4
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x10 Term))
 (! (implies (HasType @x10
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x10)
)
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))
)
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))
)
 
;;no pats
:qid @query.36))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(187,4-187,29); use=BinomialQueue.fst(187,4-187,29)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.tree)

;; def=BinomialQueue.fst(176,8-189,29); use=BinomialQueue.fst(176,8-189,29)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
@x2
@x3)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x4)
@x5))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(190,16-190,23)
(or label_30

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(190,16-190,23)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x6
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(190,35-190,40)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(190,35-190,40)
(or label_31

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(190,35-190,40)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(190,35-190,40)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(190,35-190,40)
(or label_32

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(190,35-190,40)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(190,35-190,40)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(190,35-190,40)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(190,35-190,40)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(190,35-190,40)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x7)
)


;; def=BinomialQueue.fst(167,35-192,51); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(190,34-190,50)
(or label_33

;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(190,34-190,50)
(Valid 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(190,34-190,50)
(Prims.precedes Prims.nat
Prims.nat
(FStar.List.Tot.Base.length BinomialQueue.tree
@x3)
(FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x3))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x8
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))


;; def=BinomialQueue.fst(167,35-190,50); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
@x8)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(190,11-190,15)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(190,11-190,15)
(or label_34

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(190,11-190,15)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(190,11-190,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(190,11-190,15)
(or label_35

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(190,11-190,15)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(190,11-190,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(190,11-190,15)
(or label_36

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(190,11-190,15)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(190,11-190,15)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(190,11-190,15)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(190,11-190,15)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(190,11-190,15)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(190,11-190,15)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x9)
)


;; def=Prims.fst(616,20-616,22); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
@x4
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x10 Term))
 (! (implies (HasType @x10
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x10)
)
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
)
 
;;no pats
:qid @query.50))
)
)
 
;;no pats
:qid @query.49))
)
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(176,2-192,51)
(not 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(176,8-191,29); use=BinomialQueue.fst(176,8-191,29)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
@x2
@x3)
(Prims.Cons BinomialQueue.tree
@x4
@x5)
@x6))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(192,13-192,20)
(or label_37

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(192,13-192,20)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x7
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(192,32-192,37)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(192,32-192,37)
(or label_38

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(192,32-192,37)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(192,32-192,37)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(192,32-192,37)
(or label_39

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(192,32-192,37)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(192,32-192,37)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(192,32-192,37)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(192,32-192,37)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(192,32-192,37)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x8)
)


;; def=BinomialQueue.fst(167,35-192,51); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(192,31-192,50)
(or label_40

;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(192,31-192,50)
(Valid 
;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(192,31-192,50)
(Prims.precedes Prims.nat
Prims.nat
(FStar.List.Tot.Base.length BinomialQueue.tree
@x3)
(FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_926a86fc0bcbbb55f19cb4064525890b @x3))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(176,2-192,51)
(= @x9
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4))


;; def=BinomialQueue.fst(167,35-192,50); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4)
@x9)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(192,8-192,12)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(192,8-192,12)
(or label_41

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(192,8-192,12)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(192,8-192,12)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(192,8-192,12)
(or label_42

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(192,8-192,12)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(192,8-192,12)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x5)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(192,8-192,12)
(or label_43

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(192,8-192,12)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4)))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(192,8-192,12)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(192,8-192,12)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(192,8-192,12)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(192,8-192,12)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(192,8-192,12)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x10)
)


;; def=Prims.fst(616,20-616,22); use=BinomialQueue.fst(176,2-192,51)
(= (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
@x5
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4))
@x10)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x11 Term))
 (! (implies (HasType @x11
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x1
@x11)
)
)
 
;;no pats
:qid @query.63))
)
 
;;no pats
:qid @query.62))
)
)
 
;;no pats
:qid @query.61))
)
)
 
;;no pats
:qid @query.60))
)
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
 
;;no pats
:qid @query.57))
)
 
;;no pats
:qid @query.56))
)
 
;;no pats
:qid @query.55))
)
 
;;no pats
:qid @query.54))
))
))
))
))
))
))
))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(176,2-192,51); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.forest))

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(176,2-192,51)
(or 
;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(176,2-192,51)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_3))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x1 Term))
 (! (implies (and (or label_44
(HasType @x1
BinomialQueue.forest))

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(176,2-192,51)
(or label_45

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
@x1)
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(176,2-192,51)
(ApplyTT @x0
@x1)
)
)
:qid @query.65))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(176,2-192,51)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(176,2-192,51)
(or label_46

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(176,2-192,51)
(or label_47

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(176,2-192,51)
(or label_48

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(176,2-192,51)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_3))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(176,2-192,51)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(176,2-192,51)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(176,2-192,51)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
@x1)
)


;; def=BinomialQueue.fst(168,9-192,51); use=BinomialQueue.fst(176,2-192,51)
(= @x1
(let ((@lb2 (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(ite (and (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb2)))
x_07642eb27f8c86505049ec727a4a557c_2
(ite (and (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb2)))
x_07642eb27f8c86505049ec727a4a557c_1
(ite (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(BinomialQueue.carry x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(ite (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(BinomialQueue.carry x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb2)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb2))))
(Prims.Cons BinomialQueue.tree
x_c1ab7496c060d1f2d977fd02b92d48e2_3
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb2))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb2)))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb2)))
(Prims.Cons BinomialQueue.tree
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb2))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb2)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb2)))
(Prims.Cons BinomialQueue.tree
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb2))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb2)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb2)))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb2))
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb2))))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb2))
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb2)))
(Prims.Cons BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3__3 @lb2)
(BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb2))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb2))
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb2)))))
Tm_unit))))))))))))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.forest)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x2
@x1)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x2)
)
)
 
;;no pats
:qid @query.67))
)
 
;;no pats
:qid @query.66))
)
)
 
;;no pats
:qid @query.64))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_48")
(eval label_48)
(echo "label_47")
(eval label_47)
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.join, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, Prims_pretyping_ae567c2fb75be05905677af440075565, b2t_def, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_07642eb27f8c86505049ec727a4a557c_2, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_3, binder_x_f26957a7e62b271a8736230b1e9c83c1_0, bool_inversion, bool_typing, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_pow2heap, equation_Prims.l_or, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, kinding_BinomialQueue.tree@tok, l_and-interp, l_or-interp, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, proj_equation_FStar.Pervasives.Native.Mktuple3__1, proj_equation_FStar.Pervasives.Native.Mktuple3__2, proj_equation_FStar.Pervasives.Native.Mktuple3__3, proj_equation_Prims.Cons_hd, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented, typing_BinomialQueue.uu___is_Leaf, typing_FStar.List.Tot.Base.length, typing_tok_BinomialQueue.Leaf@tok, well-founded-ordering-on-nat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec join


; <Start encoding let rec join>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.join.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.join.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.join (Term Term Term Term) Term)
(declare-fun BinomialQueue.join@tok () Term)


;;;;;;;;;;;;;;;;d: Prims.pos -> p: forest -> q: forest -> c: tree -> Prims.Pure forest
(declare-fun Tm_arrow_0e2226a4888fa87bbe3b0adea1801b6a () Term)


; </end encoding let rec join>


; encoding sigelt val BinomialQueue.insert


; <Skipped val BinomialQueue.insert/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.priq; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.priq
Tm_type)
:named typing_BinomialQueue.priq))
;;;;;;;;;;;;;;;;Lemma: BinomialQueue.mk_compact_preserves_binomial_queue
;;; Fact-ids: Name BinomialQueue.mk_compact_preserves_binomial_queue; Namespace BinomialQueue
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(122,16-122,37); use=BinomialQueue.fst(122,16-122,37)
(Valid 
;; def=BinomialQueue.fst(122,16-122,37); use=BinomialQueue.fst(122,16-122,37)
(BinomialQueue.is_binomial_queue.fuel_instrumented ZFuel
@x0
@x1)
)
)

;; def=BinomialQueue.fst(123,15-123,49); use=BinomialQueue.fst(123,15-123,49)
(Valid 
;; def=BinomialQueue.fst(123,15-123,49); use=BinomialQueue.fst(123,15-123,49)
(BinomialQueue.is_binomial_queue.fuel_instrumented ZFuel
@x0
(BinomialQueue.mk_compact.fuel_instrumented ZFuel
@x1))
)
)
 

:pattern ((BinomialQueue.is_binomial_queue.fuel_instrumented ZFuel
@x0
(BinomialQueue.mk_compact.fuel_instrumented ZFuel
@x1)))
:qid lemma_BinomialQueue.mk_compact_preserves_binomial_queue))
:named lemma_BinomialQueue.mk_compact_preserves_binomial_queue))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name BinomialQueue.priq; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.priq
Tm_type)
:named function_token_typing_BinomialQueue.priq))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.priq
;;; Fact-ids: Name BinomialQueue.priq; Namespace BinomialQueue
(assert (! (= BinomialQueue.priq
Tm_refine_bf9b8da8f290823f0b11be068baec869)
:named equation_BinomialQueue.priq))
(push) ;; push{2

; Starting query at BinomialQueue.fst(196,16-198,14)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (x: BinomialQueue.key_t) (q: BinomialQueue.priq).
;   (*  - Could not prove post-condition
; *)
;   BinomialQueue.is_binomial_queue 1 q /\
;   BinomialQueue.is_pow2heap 1 (BinomialQueue.Internal BinomialQueue.Leaf x BinomialQueue.Leaf) /\
;   (forall (pure_result: BinomialQueue.forest).
;       BinomialQueue.is_binomial_queue 1 pure_result ==>
;       BinomialQueue.carry 1 q (BinomialQueue.Internal BinomialQueue.Leaf x BinomialQueue.Leaf) ==
;       pure_result ==>
;       Prims.auto_squash (BinomialQueue.is_priq (BinomialQueue.mk_compact (BinomialQueue.carry 1
;                     q
;                     (BinomialQueue.Internal BinomialQueue.Leaf x BinomialQueue.Leaf)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let insert`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.key_t)
(HasType @x1
BinomialQueue.priq))

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(197,10-197,15)
(and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(197,10-197,15)
(or label_1

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(197,10-197,15)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(197,10-197,15)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x1)
)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(197,10-197,15)
(or label_2

;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(197,10-197,15)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(197,10-197,15)
(BinomialQueue.is_pow2heap (BoxInt 1)
(BinomialQueue.Internal BinomialQueue.Leaf@tok
@x0
BinomialQueue.Leaf@tok))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(197,10-197,15)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.forest)

;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(197,10-197,15)
(Valid 
;; def=BinomialQueue.fst(153,27-153,48); use=BinomialQueue.fst(197,10-197,15)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x2)
)


;; def=BinomialQueue.fst(197,6-197,42); use=BinomialQueue.fst(197,6-197,42)
(= (BinomialQueue.carry (BoxInt 1)
@x1
(BinomialQueue.Internal BinomialQueue.Leaf@tok
@x0
BinomialQueue.Leaf@tok))
@x2)
)

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(198,2-198,14)
(or label_3

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(198,2-198,14)
(Valid 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(198,2-198,14)
(BinomialQueue.is_priq (BinomialQueue.mk_compact (BinomialQueue.carry (BoxInt 1)
@x1
(BinomialQueue.Internal BinomialQueue.Leaf@tok
@x0
BinomialQueue.Leaf@tok))))
)
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.insert, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented, @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, eq2-interp, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.is_priq, equation_BinomialQueue.key_t, equation_BinomialQueue.priq, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, lemma_BinomialQueue.mk_compact_correctness, lemma_BinomialQueue.mk_compact_preserves_binomial_queue, primitive_Prims.op_Subtraction, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let insert


; <Start encoding let insert>

(declare-fun BinomialQueue.insert (Term Term) Term)
;;;;;;;;;;;;;;;;x: key_t -> q: priq -> priq
(declare-fun Tm_arrow_a4b2ddcb1106029f5cefc547789cac91 () Term)
(declare-fun BinomialQueue.insert@tok () Term)

; </end encoding let insert>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
(push) ;; push{2

; Starting query at BinomialQueue.fst(208,2-214,67)

;;;;;;;;;;;;;;;;max : FStar.Pervasives.Native.option BinomialQueue.key_t (FStar.Pervasives.Native.option BinomialQueue.key_t)
(declare-fun x_0cce611505b3cbcad4bc1226ec25500d_0 () Term)
;;;;;;;;;;;;;;;;binder_x_0cce611505b3cbcad4bc1226ec25500d_0
;;; Fact-ids: 
(assert (! (HasType x_0cce611505b3cbcad4bc1226ec25500d_0
(FStar.Pervasives.Native.option BinomialQueue.key_t))
:named binder_x_0cce611505b3cbcad4bc1226ec25500d_0))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
(declare-fun Tm_refine_f2da84f1e040f38f7288ed0496e839f7 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_f2da84f1e040f38f7288ed0496e839f7
Tm_type)
:named refinement_kinding_Tm_refine_f2da84f1e040f38f7288ed0496e839f7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(206,37-214,67); use=BinomialQueue.fst(206,37-214,67)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f2da84f1e040f38f7288ed0496e839f7)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(208,2-214,67)

;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(208,2-214,67)
(Valid 
;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(208,2-214,67)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f2da84f1e040f38f7288ed0496e839f7))
:qid refinement_interpretation_Tm_refine_f2da84f1e040f38f7288ed0496e839f7))

:named refinement_interpretation_Tm_refine_f2da84f1e040f38f7288ed0496e839f7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f2da84f1e040f38f7288ed0496e839f7
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f2da84f1e040f38f7288ed0496e839f7))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_f2da84f1e040f38f7288ed0496e839f7))
(declare-fun BinomialQueue.find_max (Term Term) Term)

;;;;;;;;;;;;;;;;max: FStar.Pervasives.Native.option key_t -> q: forest{q << q}   -> Prims.Tot (FStar.Pervasives.Native.option key_t)
(declare-fun Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d
Tm_type)
:named kinding_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(206,22-214,67); use=BinomialQueue.fst(206,22-214,67)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d))
:qid BinomialQueue_pre_typing_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d))

:named BinomialQueue_pre_typing_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(206,22-214,67); use=BinomialQueue.fst(206,22-214,67)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d)
(and 
;; def=BinomialQueue.fst(206,22-214,67); use=BinomialQueue.fst(206,22-214,67)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x2
Tm_refine_f2da84f1e040f38f7288ed0496e839f7))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(FStar.Pervasives.Native.option BinomialQueue.key_t)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid BinomialQueue_interpretation_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d.1))

(IsTotFun @x0)

;; def=BinomialQueue.fst(206,22-214,67); use=BinomialQueue.fst(206,22-214,67)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d))
:qid BinomialQueue_interpretation_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d))

:named BinomialQueue_interpretation_Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d))
(declare-fun BinomialQueue.find_max@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT BinomialQueue.find_max@tok
@x0)
@x1)
(BinomialQueue.find_max @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT BinomialQueue.find_max@tok
@x0)
@x1))
:qid token_correspondence_BinomialQueue.find_max))

:named token_correspondence_BinomialQueue.find_max))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.find_max@tok
Tm_arrow_9a7491a4b06029960bb4e5f9e7a3316d))

;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT BinomialQueue.find_max@tok
@x1)
@x2)
(BinomialQueue.find_max @x1
@x2))
 

:pattern ((BinomialQueue.find_max @x1
@x2))
:qid function_token_typing_BinomialQueue.find_max.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.find_max@tok))
:qid function_token_typing_BinomialQueue.find_max))

:named function_token_typing_BinomialQueue.find_max))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x1
Tm_refine_f2da84f1e040f38f7288ed0496e839f7))
(HasType (BinomialQueue.find_max @x0
@x1)
(FStar.Pervasives.Native.option BinomialQueue.key_t)))
 

:pattern ((BinomialQueue.find_max @x0
@x1))
:qid typing_BinomialQueue.find_max))

:named typing_BinomialQueue.find_max))
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post (FStar.Pervasives.Native.option BinomialQueue.key_t)).
;   (forall (x: FStar.Pervasives.Native.option BinomialQueue.key_t). {:pattern Prims.guard_free (k x)}
;       Prims.auto_squash (k x)) ==>
;   (~(Nil? q) /\ ~(Cons? q && Leaf? q.hd) /\ ~(Cons? q && Internal? q.hd) ==> Prims.l_False) /\
;   (~(Nil? q) ==>
;     (forall (b: Prims.list BinomialQueue.tree). q == BinomialQueue.Leaf :: b ==> b << q) /\
;     (~(Cons? q && Leaf? q.hd) ==>
;       (forall (b: BinomialQueue.tree)
;           (b: BinomialQueue.key_t)
;           (b: BinomialQueue.tree)
;           (b: Prims.list BinomialQueue.tree).
;           q == BinomialQueue.Internal b b b :: b ==>
;           (forall (k: Prims.pure_post (FStar.Pervasives.Native.option BinomialQueue.key_t)).
;               (forall (x: FStar.Pervasives.Native.option BinomialQueue.key_t).
;                   {:pattern Prims.guard_free (k x)}
;                   Prims.auto_squash (k x)) ==>
;               (~(None? max) /\ ~(Some? max) ==> Prims.l_False) /\
;               (max == FStar.Pervasives.Native.None ==> b << q) /\
;               (~(None? max) ==>
;                 (forall (b: BinomialQueue.key_t).
;                     max == FStar.Pervasives.Native.Some b ==>
;                     (forall (k:
;                         Prims.pure_post (FStar.Pervasives.Native.option BinomialQueue.key_t)).
;                         (forall (x: FStar.Pervasives.Native.option BinomialQueue.key_t).
;                             {:pattern Prims.guard_free (k x)}
;                             ((match b < b with
;                                 | true -> FStar.Pervasives.Native.Some b
;                                 | _ -> FStar.Pervasives.Native.Some b) ==
;                               x ==>
;                               b << q) ==>
;                             k x) ==>
;                         (b < b == true ==>
;                           (forall (any_result: FStar.Pervasives.Native.option BinomialQueue.key_t).
;                               k any_result)) /\
;                         (~(b < b = true) ==>
;                           (forall (b: Prims.bool).
;                               b < b == b ==>
;                               (forall (any_result:
;                                   FStar.Pervasives.Native.option BinomialQueue.key_t).
;                                   k any_result))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec find_max`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (FStar.Pervasives.Native.option BinomialQueue.key_t)))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(208,2-214,67)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(208,2-214,67)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(208,2-214,67)
(and (implies 
;; def=BinomialQueue.fst(206,37-214,67); use=BinomialQueue.fst(208,2-214,67)
(and 
;; def=BinomialQueue.fst(206,37-206,38); use=BinomialQueue.fst(208,8-208,9)
(not 
;; def=BinomialQueue.fst(206,37-206,38); use=BinomialQueue.fst(208,8-208,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(208,2-214,67)
(not 
;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(208,2-214,67)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(208,2-214,67)
(not 
;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(208,2-214,67)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(208,2-214,67)
(not 
;; def=BinomialQueue.fst(206,37-206,38); use=BinomialQueue.fst(208,8-208,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(208,2-214,67)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(206,37-210,11); use=BinomialQueue.fst(208,8-210,11)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x1))
)

;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(210,28-210,29)
(or label_2

;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(210,28-210,29)
(Valid 
;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(210,28-210,29)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_1)
)
)
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(208,2-214,67)
(not 
;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(208,2-214,67)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(206,37-211,23); use=BinomialQueue.fst(208,8-211,23)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x1
@x2
@x3)
@x4))
)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post (FStar.Pervasives.Native.option BinomialQueue.key_t)))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x6 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(208,2-214,67)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(208,2-214,67)
(ApplyTT @x5
@x6)
)

 

:pattern ((ApplyTT @x5
@x6))
:qid @query.8))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(208,2-214,67)
(and (implies 
;; def=BinomialQueue.fst(206,18-206,21); use=BinomialQueue.fst(212,10-212,13)
(and 
;; def=BinomialQueue.fst(206,18-206,21); use=BinomialQueue.fst(212,10-212,13)
(not 
;; def=BinomialQueue.fst(206,18-206,21); use=BinomialQueue.fst(212,10-212,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_0))
)


;; def=BinomialQueue.fst(206,18-206,21); use=BinomialQueue.fst(212,10-212,13)
(not 
;; def=BinomialQueue.fst(206,18-206,21); use=BinomialQueue.fst(212,10-212,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_0))
)
)

label_3)
(implies 
;; def=BinomialQueue.fst(206,18-213,10); use=BinomialQueue.fst(212,10-213,10)
(= x_0cce611505b3cbcad4bc1226ec25500d_0
(FStar.Pervasives.Native.None BinomialQueue.key_t))


;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(213,32-213,33)
(or label_4

;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(213,32-213,33)
(Valid 
;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(213,32-213,33)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x4
x_07642eb27f8c86505049ec727a4a557c_1)
)
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(208,2-214,67)
(not 
;; def=BinomialQueue.fst(206,18-206,21); use=BinomialQueue.fst(212,10-212,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_0))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.key_t)

;; def=BinomialQueue.fst(206,18-214,14); use=BinomialQueue.fst(212,10-214,14)
(= x_0cce611505b3cbcad4bc1226ec25500d_0
(FStar.Pervasives.Native.Some BinomialQueue.key_t
@x6))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (FStar.Pervasives.Native.option BinomialQueue.key_t)))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x8 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(206,18-214,65); use=BinomialQueue.fst(208,2-214,67)
(= (let ((@lb9 (Prims.op_LessThan @x6
@x2)))
(ite (= @lb9
(BoxBool true))
(FStar.Pervasives.Native.Some BinomialQueue.key_t
@x2)
(FStar.Pervasives.Native.Some BinomialQueue.key_t
@x6)))
@x8)


;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(214,66-214,67)
(or label_5

;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(214,66-214,67)
(Valid 
;; def=BinomialQueue.fst(208,2-214,67); use=BinomialQueue.fst(214,66-214,67)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x4
x_07642eb27f8c86505049ec727a4a557c_1)
)
)
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(208,2-214,67)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(208,2-214,67)
(ApplyTT @x7
@x8)
)
)
 :weight 0


:pattern ((ApplyTT @x7
@x8))
:qid @query.11))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(208,2-214,67)
(and (implies 
;; def=BinomialQueue.fst(214,31-214,38); use=BinomialQueue.fst(214,31-214,38)
(= (Prims.op_LessThan @x6
@x2)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(FStar.Pervasives.Native.option BinomialQueue.key_t))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(208,2-214,67)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(208,2-214,67)
(ApplyTT @x7
@x8)
)
)
 
;;no pats
:qid @query.12))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(208,2-214,67)
(not 
;; def=BinomialQueue.fst(214,31-214,38); use=BinomialQueue.fst(214,31-214,38)
(= (Prims.op_LessThan @x6
@x2)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.bool)

;; def=BinomialQueue.fst(214,31-214,64); use=BinomialQueue.fst(214,31-214,64)
(= (Prims.op_LessThan @x6
@x2)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(208,2-214,67)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(FStar.Pervasives.Native.option BinomialQueue.key_t))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(208,2-214,67)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(208,2-214,67)
(ApplyTT @x7
@x9)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
))
)
 
;;no pats
:qid @query.7)))
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.find_max, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_0cce611505b3cbcad4bc1226ec25500d_0, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_Prims.nat, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, kinding_BinomialQueue.tree@tok, lemma_FStar.Pervasives.invertOption, proj_equation_Prims.Cons_hd, projection_inverse_BoxBool_proj_0, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, typing_Prims.__proj__Cons__item__hd, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec find_max


; <Start encoding let rec find_max>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.find_max.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.find_max.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.find_max (Term Term) Term)
(declare-fun BinomialQueue.find_max@tok () Term)
;;;;;;;;;;;;;;;;max: FStar.Pervasives.Native.option key_t -> q: forest   -> Prims.Tot (FStar.Pervasives.Native.option key_t)
(declare-fun Tm_arrow_1c25f953333b178344b575dea6322cb7 () Term)

; </end encoding let rec find_max>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.append @x0
@x1
@x2)
(Prims.list @x0)))
 

:pattern ((FStar.List.Tot.Base.append @x0
@x1
@x2))
:qid typing_FStar.List.Tot.Base.append))

:named typing_FStar.List.Tot.Base.append))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1))
(HasType @x3
(Prims.list @x1)))
(HasType (FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.precedes_append_cons_r
;;; Fact-ids: Name FStar.List.Tot.Properties.precedes_append_cons_r; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
@x0)
(HasType @x3
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(754,11-754,37); use=FStar.List.Tot.Properties.fsti(754,11-754,37)
(Valid 
;; def=FStar.List.Tot.Properties.fsti(754,11-754,37); use=FStar.List.Tot.Properties.fsti(754,11-754,37)
(Prims.precedes @x0
(Prims.list @x0)
@x2
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x0
@x1
(Prims.Cons @x0
@x2
@x3)))
)
)
 

:pattern ((Prims.precedes @x0
(Prims.list @x0)
@x2
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x0
@x1
(Prims.Cons @x0
@x2
@x3))))
:qid lemma_FStar.List.Tot.Properties.precedes_append_cons_r))
:named lemma_FStar.List.Tot.Properties.precedes_append_cons_r))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.append
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1))
(HasType @x3
(Prims.list @x1)))
(= (FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x2))
(ite (is-Prims.Nil @lb4)
@x3
(ite (is-Prims.Cons @lb4)
(Prims.Cons @x1
(Prims.Cons_hd @lb4)
(FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb4)
@x3))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.append @x0
@x1
@x2)
(FStar.List.Tot.Base.append.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.append @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(228,2-230,45)

;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_0
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_0
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_0))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;t : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_2 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.binomial_queue_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.binomial_queue_append@tok () Term)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : (BinomialQueue.is_binomial_queue d q ==> FStar.List.Tot.Base.length q + d > 0) /\
; (forall (any_result: Prims.logical).
;     BinomialQueue.is_binomial_queue d q /\
;     BinomialQueue.is_pow2heap (FStar.List.Tot.Base.length q + d) t ==
;     any_result ==>
;     BinomialQueue.is_binomial_queue d q ==> FStar.List.Tot.Base.length q + d > 0) /\
; (forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.is_binomial_queue d q /\
;     BinomialQueue.is_pow2heap (FStar.List.Tot.Base.length q + d) t /\
;     (forall (pure_result: Prims.unit). BinomialQueue.is_binomial_queue d (q @ [t]) ==> p pure_result
;     ) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Nil? q) /\ ~(Cons? q) ==> Prims.l_False) /\
;         (q == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Nil? q) ==>
;           (forall (b: BinomialQueue.tree) (b: Prims.list BinomialQueue.tree).
;               q == b :: b ==>
;               d + 1 > 0 /\
;               (forall (return_val: Prims.pos).
;                   return_val == d + 1 ==>
;                   b << q /\
;                   (forall (any_result: BinomialQueue.tree).
;                       t == any_result ==>
;                       BinomialQueue.is_binomial_queue (d + 1) b /\
;                       BinomialQueue.is_pow2heap (FStar.List.Tot.Base.length b + (d + 1)) t /\
;                       (forall (pure_result: Prims.unit).
;                           BinomialQueue.is_binomial_queue (d + 1) (b @ [t]) ==> k pure_result)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec binomial_queue_append`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-459,89); use=Prims.fst(430,19-430,32)
(and (implies 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(228,2-230,45)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(225,46-225,62)
(or label_1

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(228,2-230,45)
(> (BoxInt_proj_0 (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1)
x_f26957a7e62b271a8736230b1e9c83c1_0))
(BoxInt_proj_0 (BoxInt 0)))
)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=BinomialQueue.fst(228,2-230,45)
(= (Prims.l_and (BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
(BinomialQueue.is_pow2heap (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1)
x_f26957a7e62b271a8736230b1e9c83c1_0)
x_c1ab7496c060d1f2d977fd02b92d48e2_2))
@x0)


;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(228,2-230,45)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)
)

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(223,4-223,9)
(or label_2

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(228,2-230,45)
(> (BoxInt_proj_0 (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1)
x_f26957a7e62b271a8736230b1e9c83c1_0))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(228,2-230,45); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(228,2-230,45)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(225,34-225,64); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=BinomialQueue.fst(225,34-225,64); use=BinomialQueue.fst(228,2-230,45)
(BinomialQueue.is_pow2heap (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1)
x_f26957a7e62b271a8736230b1e9c83c1_0)
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x1 Term))
 (! (implies (and (or label_3
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(226,15-226,51); use=BinomialQueue.fst(228,2-230,45)
(or label_4

;; def=BinomialQueue.fst(226,15-226,51); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=BinomialQueue.fst(226,15-226,51); use=BinomialQueue.fst(228,2-230,45)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
(FStar.List.Tot.Base.append BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
x_c1ab7496c060d1f2d977fd02b92d48e2_2
(Prims.Nil BinomialQueue.tree))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(228,2-230,45)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(228,2-230,45)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(228,2-230,45)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(228,2-230,45)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(228,2-230,45)
(and (implies 
;; def=BinomialQueue.fst(222,39-222,40); use=BinomialQueue.fst(228,8-228,9)
(and 
;; def=BinomialQueue.fst(222,39-222,40); use=BinomialQueue.fst(228,8-228,9)
(not 
;; def=BinomialQueue.fst(222,39-222,40); use=BinomialQueue.fst(228,8-228,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=BinomialQueue.fst(222,39-222,40); use=BinomialQueue.fst(228,8-228,9)
(not 
;; def=BinomialQueue.fst(222,39-222,40); use=BinomialQueue.fst(228,8-228,9)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)

label_5)
(implies 
;; def=BinomialQueue.fst(222,39-229,6); use=BinomialQueue.fst(228,8-229,6)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(228,2-230,45)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(228,2-230,45)
(not 
;; def=BinomialQueue.fst(222,39-222,40); use=BinomialQueue.fst(228,8-228,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(222,39-230,8); use=BinomialQueue.fst(228,8-230,8)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(228,2-230,45)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(230,34-230,41)
(or label_6

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(230,34-230,41)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(228,2-230,45)
(= @x4
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(228,2-230,45)
(and 
;; def=BinomialQueue.fst(228,2-230,45); use=BinomialQueue.fst(230,44-230,45)
(or label_7

;; def=BinomialQueue.fst(228,2-230,45); use=BinomialQueue.fst(230,44-230,45)
(Valid 
;; def=BinomialQueue.fst(228,2-230,45); use=BinomialQueue.fst(230,44-230,45)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(228,2-230,45)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.tree)

;; def=BinomialQueue.fst(222,50-222,51); use=BinomialQueue.fst(228,2-230,45)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
@x5)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(230,12-230,33)
(and 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(230,12-230,33)
(or label_8

;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(230,12-230,33)
(Valid 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(230,12-230,33)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(225,34-225,64); use=BinomialQueue.fst(230,12-230,33)
(or label_9

;; def=BinomialQueue.fst(225,34-225,64); use=BinomialQueue.fst(230,12-230,33)
(Valid 
;; def=BinomialQueue.fst(225,34-225,64); use=BinomialQueue.fst(230,12-230,33)
(BinomialQueue.is_pow2heap (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
@x3)
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(230,12-230,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=BinomialQueue.fst(226,15-226,51); use=BinomialQueue.fst(230,12-230,33)
(Valid 
;; def=BinomialQueue.fst(226,15-226,51); use=BinomialQueue.fst(230,12-230,33)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(FStar.List.Tot.Base.append BinomialQueue.tree
@x3
(Prims.Cons BinomialQueue.tree
x_c1ab7496c060d1f2d977fd02b92d48e2_2
(Prims.Nil BinomialQueue.tree))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(230,12-230,33)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(230,12-230,33)
(ApplyTT @x1
@x6)
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.binomial_queue_append, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2, binder_x_f26957a7e62b271a8736230b1e9c83c1_0, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_pow2heap, equation_Prims.l_or, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented, false_interp, fuel_guarded_inversion_Prims.list, int_inversion, int_typing, kinding_BinomialQueue.tree@tok, l_and-interp, l_or-interp, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, subterm_ordering_Prims.Cons, typing_FStar.List.Tot.Base.append, typing_FStar.List.Tot.Base.length, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(222,0-230,45)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_6676105b6a88bf78daa1667d3413afc0 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(222,50-230,45); use=BinomialQueue.fst(222,50-230,45)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_6676105b6a88bf78daa1667d3413afc0 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_6676105b6a88bf78daa1667d3413afc0 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_6676105b6a88bf78daa1667d3413afc0))

:named refinement_kinding_Tm_refine_6676105b6a88bf78daa1667d3413afc0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(222,50-230,45); use=BinomialQueue.fst(222,50-230,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6676105b6a88bf78daa1667d3413afc0 @x2
@x3))
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(228,2-230,45); use=BinomialQueue.fst(228,2-230,45)

;; def=BinomialQueue.fst(228,2-230,45); use=BinomialQueue.fst(228,2-230,45)
(Valid 
;; def=BinomialQueue.fst(228,2-230,45); use=BinomialQueue.fst(228,2-230,45)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
@x3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6676105b6a88bf78daa1667d3413afc0 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_6676105b6a88bf78daa1667d3413afc0))

:named refinement_interpretation_Tm_refine_6676105b6a88bf78daa1667d3413afc0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6676105b6a88bf78daa1667d3413afc0
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(222,50-230,45); use=BinomialQueue.fst(222,50-230,45)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6676105b6a88bf78daa1667d3413afc0 @x0
@x1)))
(Valid (Prims.hasEq BinomialQueue.tree)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6676105b6a88bf78daa1667d3413afc0 @x0
@x1))))
:qid haseqTm_refine_6676105b6a88bf78daa1667d3413afc0))

:named haseqTm_refine_6676105b6a88bf78daa1667d3413afc0))

; Encoding query formula : forall (d: Prims.pos)
;   (q: BinomialQueue.forest)
;   (t: BinomialQueue.tree)
;   (d: Prims.pos)
;   (q: BinomialQueue.forest)
;   (t: BinomialQueue.tree{q << q}).
;   (BinomialQueue.is_binomial_queue d q ==> FStar.List.Tot.Base.length q + d > 0) /\
;   (forall (any_result: Prims.logical).
;       BinomialQueue.is_binomial_queue d q /\
;       BinomialQueue.is_pow2heap (FStar.List.Tot.Base.length q + d) t ==
;       any_result ==>
;       BinomialQueue.is_binomial_queue d q ==> FStar.List.Tot.Base.length q + d > 0)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec binomial_queue_append`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(222,0-230,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest)
(HasType @x2
BinomialQueue.tree)
(HasType @x3
Prims.pos)
(HasType @x4
BinomialQueue.forest)
(HasType @x5
(Tm_refine_6676105b6a88bf78daa1667d3413afc0 @x4
@x1)))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(222,33-230,45)
(and (implies 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(225,9-225,30)
(Valid 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(225,9-225,30)
(BinomialQueue.is_binomial_queue @x3
@x4)
)


;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(225,46-225,62)
(or label_1

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(225,46-225,62)
(> (BoxInt_proj_0 (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
@x4)
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(222,33-230,45)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=BinomialQueue.fst(222,33-230,45)
(= (Prims.l_and (BinomialQueue.is_binomial_queue @x3
@x4)
(BinomialQueue.is_pow2heap (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
@x4)
@x3)
@x5))
@x6)


;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(226,15-226,51)
(Valid 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(226,15-226,51)
(BinomialQueue.is_binomial_queue @x3
@x4)
)
)

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(223,4-223,9)
(or label_2

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(226,15-226,51)
(> (BoxInt_proj_0 (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
@x4)
@x3))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.binomial_queue_append, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented, @query, equation_BinomialQueue.forest, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented, kinding_BinomialQueue.tree@tok, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec binomial_queue_append


; <Start encoding let rec binomial_queue_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.binomial_queue_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.binomial_queue_append@tok () Term)

; </end encoding let rec binomial_queue_append>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.op_At; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(124,4-124,9); use=FStar.List.Tot.Base.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.op_At @x0
@x1
@x2)
(Prims.list @x0)))
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
@x2))
:qid typing_FStar.List.Tot.Base.op_At))

:named typing_FStar.List.Tot.Base.op_At))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.append_length
;;; Fact-ids: Name FStar.List.Tot.Properties.append_length; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(139,17-139,57); use=FStar.List.Tot.Properties.fsti(139,17-139,57)
(= (FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
(FStar.List.Tot.Base.op_At @x0
@x1
@x2))
(Prims.op_Addition (FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
@x1)
(FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
@x2)))
)
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
(FStar.List.Tot.Base.op_At @x0
@x1
@x2)))
:qid lemma_FStar.List.Tot.Properties.append_length))
:named lemma_FStar.List.Tot.Properties.append_length))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.append_l_nil
;;; Fact-ids: Name FStar.List.Tot.Properties.append_l_nil; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(123,17-123,28); use=FStar.List.Tot.Properties.fsti(123,17-123,28)
(= (FStar.List.Tot.Base.op_At @x0
@x1
(Prims.Nil @x0))
@x1)
)
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
(Prims.Nil @x0)))
:qid lemma_FStar.List.Tot.Properties.append_l_nil))
:named lemma_FStar.List.Tot.Properties.append_l_nil))
;;;;;;;;;;;;;;;;Equation for FStar.List.Tot.Base.op_At
;;; Fact-ids: Name FStar.List.Tot.Base.op_At; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(124,4-124,9); use=FStar.List.Tot.Base.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.op_At @x0
@x1
@x2)
(FStar.List.Tot.Base.append @x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
@x2))
:qid equation_FStar.List.Tot.Base.op_At))

:named equation_FStar.List.Tot.Base.op_At))
(push) ;; push{2

; Starting query at BinomialQueue.fst(245,2-252,37)

;;;;;;;;;;;;;;;;d : Prims.nat (Prims.nat)
(declare-fun x_bb4e1c9af0265270f8e7a5f250f730e2_0 () Term)
;;;;;;;;;;;;;;;;binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0
;;; Fact-ids: 
(assert (! (HasType x_bb4e1c9af0265270f8e7a5f250f730e2_0
Prims.nat)
:named binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0))
;;;;;;;;;;;;;;;;upper_bound : BinomialQueue.key_t (BinomialQueue.key_t)
(declare-fun x_b19ee3ff3f4f676fe283c4905f1b1f83_1 () Term)
;;;;;;;;;;;;;;;;binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1
;;; Fact-ids: 
(assert (! (HasType x_b19ee3ff3f4f676fe283c4905f1b1f83_1
BinomialQueue.key_t)
:named binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1))
;;;;;;;;;;;;;;;;t : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_2 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2))
(declare-fun Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d))

:named refinement_kinding_Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d @x2
@x3))
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)

;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(or 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(245,2-252,37)
(Prims.precedes Prims.nat
Prims.nat
@x2
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(and 
;; def=BinomialQueue.fst(240,15-240,16); use=BinomialQueue.fst(240,15-240,16)
(Valid 
;; def=BinomialQueue.fst(240,15-240,16); use=BinomialQueue.fst(240,15-240,16)
(Prims.op_Equals_Equals_Equals Prims.nat
Prims.nat
@x2
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(240,23-252,37); use=BinomialQueue.fst(240,23-252,37)
(or 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(245,2-252,37)
(Prims.precedes BinomialQueue.key_t
BinomialQueue.key_t
@x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_1)
)


;; def=BinomialQueue.fst(240,23-252,37); use=BinomialQueue.fst(240,23-252,37)
(and 
;; def=BinomialQueue.fst(240,23-240,34); use=BinomialQueue.fst(240,23-240,34)
(Valid 
;; def=BinomialQueue.fst(240,23-240,34); use=BinomialQueue.fst(240,23-240,34)
(Prims.op_Equals_Equals_Equals BinomialQueue.key_t
BinomialQueue.key_t
@x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_1)
)


;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(245,2-252,37)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d))

:named refinement_interpretation_Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d @x0
@x1)))
(Valid (Prims.hasEq BinomialQueue.tree)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d @x0
@x1))))
:qid haseqTm_refine_e2e23f7e0dd40d55a03003b6ff448a6d))

:named haseqTm_refine_e2e23f7e0dd40d55a03003b6ff448a6d))
(declare-fun BinomialQueue.unzip (Term Term Term) Term)

(declare-fun Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(241,9-241,13); use=BinomialQueue.fst(241,9-241,13)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8))

:named refinement_kinding_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(241,9-241,13); use=BinomialQueue.fst(241,9-241,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.priq)

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(243,27-243,42)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x2)))
:qid refinement_interpretation_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8))

:named refinement_interpretation_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(241,9-241,13); use=BinomialQueue.fst(241,9-241,13)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0)))
(Valid (Prims.hasEq BinomialQueue.priq)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0))))
:qid haseqTm_refine_0ef537e2d1916c03cee9d0bd5e289de8))

:named haseqTm_refine_0ef537e2d1916c03cee9d0bd5e289de8))
;;;;;;;;;;;;;;;;d: Prims.nat ->     upper_bound: key_t ->     t:       tree         {d << d \/ d === d /\ (upper_bound << upper_bound \/ upper_bound === upper_bound /\ t << t)}   -> Prims.Pure priq
(declare-fun Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71
Tm_type)
:named kinding_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71))
:qid BinomialQueue_pre_typing_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71))

:named BinomialQueue_pre_typing_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71)
(and 
;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(BinomialQueue.pow2heap_pred @x1
@x2
@x3)
)

(HasType @x1
Prims.nat)
(HasType @x2
BinomialQueue.key_t)
(HasType @x3
(Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid BinomialQueue_interpretation_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71.1))

(IsTotFun @x0)

;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71.2))


;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(240,15-252,37)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
BinomialQueue.key_t))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid BinomialQueue_interpretation_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71))
:qid BinomialQueue_interpretation_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71))

:named BinomialQueue_interpretation_Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71))
(declare-fun BinomialQueue.unzip@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT BinomialQueue.unzip@tok
@x0)
@x1)
@x2)
(BinomialQueue.unzip @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT BinomialQueue.unzip@tok
@x0)
@x1)
@x2))
:qid token_correspondence_BinomialQueue.unzip))

:named token_correspondence_BinomialQueue.unzip))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.unzip@tok
Tm_arrow_6e21577cfcb5a44bcad0e7854afbfb71))

;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT BinomialQueue.unzip@tok
@x1)
@x2)
@x3)
(BinomialQueue.unzip @x1
@x2
@x3))
 

:pattern ((BinomialQueue.unzip @x1
@x2
@x3))
:qid function_token_typing_BinomialQueue.unzip.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.unzip@tok))
:qid function_token_typing_BinomialQueue.unzip))

:named function_token_typing_BinomialQueue.unzip))

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(BinomialQueue.pow2heap_pred @x0
@x1
@x2)
)

(HasType @x0
Prims.nat)
(HasType @x1
BinomialQueue.key_t)
(HasType @x2
(Tm_refine_e2e23f7e0dd40d55a03003b6ff448a6d @x0
@x1)))
(HasType (BinomialQueue.unzip @x0
@x1
@x2)
(Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0)))
 

:pattern ((BinomialQueue.unzip @x0
@x1
@x2))
:qid typing_BinomialQueue.unzip))

:named typing_BinomialQueue.unzip))
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : (forall (p: Prims.pure_post BinomialQueue.priq).
;     BinomialQueue.pow2heap_pred d upper_bound t /\
;     (forall (pure_result: BinomialQueue.priq).
;         FStar.List.Tot.Base.length pure_result == d ==> p pure_result) ==>
;     (forall (k: Prims.pure_post BinomialQueue.priq).
;         (forall (x: BinomialQueue.priq). {:pattern Prims.guard_free (k x)}
;             (x ==
;               (match t with
;                 | BinomialQueue.Leaf -> []
;                 | BinomialQueue.Internal left k right ->
;                   BinomialQueue.unzip (d - 1) upper_bound right @
;                   [BinomialQueue.Internal left k BinomialQueue.Leaf]) ==>
;               (forall (return_val: BinomialQueue.priq). return_val == x ==> p return_val)) ==>
;             k x) ==>
;         (~(Leaf? t) /\ ~(Internal? t) ==> Prims.l_False) /\
;         (t == BinomialQueue.Leaf ==>
;           Prims.auto_squash (BinomialQueue.is_priq []) /\
;           (forall (return_val: BinomialQueue.priq). return_val == [] ==> k return_val)) /\
;         (~(Leaf? t) ==>
;           (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t) (b: BinomialQueue.tree).
;               t == BinomialQueue.Internal b b b ==>
;               d - 1 >= 0 /\
;               (forall (return_val: Prims.nat).
;                   return_val == d - 1 ==>
;                   (d - 1 << d \/ d - 1 === d /\ (upper_bound << upper_bound \/ b << t)) /\
;                   (forall (any_result: BinomialQueue.tree).
;                       b == any_result ==>
;                       BinomialQueue.pow2heap_pred (d - 1) upper_bound b /\
;                       (forall (pure_result: BinomialQueue.priq).
;                           FStar.List.Tot.Base.length pure_result == d - 1 ==>
;                           BinomialQueue.unzip (d - 1) upper_bound b == pure_result ==>
;                           BinomialQueue.is_binomial_queue 1
;                             (BinomialQueue.unzip (d - 1) upper_bound b) /\
;                           BinomialQueue.is_pow2heap (FStar.List.Tot.Base.length (BinomialQueue.unzip
;                                     (d - 1)
;                                     upper_bound
;                                     b) +
;                               1)
;                             (BinomialQueue.Internal b b BinomialQueue.Leaf) /\
;                           (forall (pure_result: Prims.unit).
;                               BinomialQueue.is_binomial_queue 1
;                                 (BinomialQueue.unzip (d - 1) upper_bound b @
;                                   [BinomialQueue.Internal b b BinomialQueue.Leaf]) ==>
;                               (forall (pure_result: Prims.unit).
;                                   FStar.List.Tot.Base.length (BinomialQueue.unzip (d - 1)
;                                         upper_bound
;                                         b @
;                                       [BinomialQueue.Internal b b BinomialQueue.Leaf]) =
;                                   FStar.List.Tot.Base.length (BinomialQueue.unzip (d - 1)
;                                         upper_bound
;                                         b) +
;                                   FStar.List.Tot.Base.length [
;                                       BinomialQueue.Internal b b BinomialQueue.Leaf
;                                     ] ==>
;                                   FStar.List.Tot.Base.length [
;                                       BinomialQueue.Internal b b BinomialQueue.Leaf
;                                     ] >
;                                   0 /\
;                                   (forall (pure_result: Prims.unit).
;                                       FStar.List.Tot.Base.last (BinomialQueue.unzip (d - 1)
;                                             upper_bound
;                                             b @
;                                           [BinomialQueue.Internal b b BinomialQueue.Leaf]) ==
;                                       FStar.List.Tot.Base.last [
;                                           BinomialQueue.Internal b b BinomialQueue.Leaf
;                                         ] ==>
;                                       Prims.auto_squash (BinomialQueue.is_priq (BinomialQueue.unzip (
;                                                   d - 1)
;                                                 upper_bound
;                                                 b @
;                                               [BinomialQueue.Internal b b BinomialQueue.Leaf])) /\
;                                       (forall (return_val: BinomialQueue.priq).
;                                           return_val ==
;                                           BinomialQueue.unzip (d - 1) upper_bound b @
;                                           [BinomialQueue.Internal b b BinomialQueue.Leaf] ==>
;                                           k return_val))))))))))) /\
; (forall (p: Prims.pure_post BinomialQueue.priq).
;     BinomialQueue.pow2heap_pred d upper_bound t /\
;     (forall (pure_result: BinomialQueue.priq).
;         FStar.List.Tot.Base.length pure_result == d ==> p pure_result) ==>
;     BinomialQueue.pow2heap_pred d upper_bound t /\
;     (forall (pure_result: BinomialQueue.priq).
;         FStar.List.Tot.Base.length pure_result == d ==>
;         pure_result ==
;         (match t with
;           | BinomialQueue.Leaf -> []
;           | BinomialQueue.Internal left k right ->
;             BinomialQueue.unzip (d - 1) upper_bound right @
;             [BinomialQueue.Internal left k BinomialQueue.Leaf]) ==>
;         (forall (return_val: BinomialQueue.priq). return_val == pure_result ==> p return_val)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec unzip`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.priq))

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(245,2-252,37)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
BinomialQueue.priq))

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(245,2-252,37)
(or label_2

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(245,2-252,37)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x1)
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(245,2-252,37)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(245,2-252,37)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post BinomialQueue.priq))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x2 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(241,9-252,37); use=BinomialQueue.fst(245,2-252,37)
(= @x2
(let ((@lb3 x_c1ab7496c060d1f2d977fd02b92d48e2_2))
(ite (is-BinomialQueue.Leaf @lb3)
(Prims.Nil BinomialQueue.tree)
(ite (is-BinomialQueue.Internal @lb3)
(FStar.List.Tot.Base.append BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
(BinomialQueue.Internal__2 @lb3))
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal (BinomialQueue.Internal__0 @lb3)
(BinomialQueue.Internal__1 @lb3)
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree)))
Tm_unit))))


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.priq)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x3
@x2)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x3)
)
)
 
;;no pats
:qid @query.4))
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(245,2-252,37)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(245,2-252,37)
(and (implies 
;; def=BinomialQueue.fst(240,43-240,44); use=BinomialQueue.fst(245,8-245,9)
(and 
;; def=BinomialQueue.fst(240,43-240,44); use=BinomialQueue.fst(245,8-245,9)
(not 
;; def=BinomialQueue.fst(240,43-240,44); use=BinomialQueue.fst(245,8-245,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=BinomialQueue.fst(240,43-240,44); use=BinomialQueue.fst(245,8-245,9)
(not 
;; def=BinomialQueue.fst(240,43-240,44); use=BinomialQueue.fst(245,8-245,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)

label_3)
(implies 
;; def=BinomialQueue.fst(240,43-246,8); use=BinomialQueue.fst(245,8-246,8)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.Leaf@tok)


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(245,2-252,37)
(and 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(246,12-246,14)
(or label_4

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(246,12-246,14)
(Valid 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(246,12-246,14)
(BinomialQueue.is_priq (Prims.Nil BinomialQueue.tree))
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.priq)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(245,2-252,37)
(= @x2
(Prims.Nil BinomialQueue.tree))
)

;; def=Prims.fst(356,46-356,58); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=Prims.fst(356,46-356,58); use=BinomialQueue.fst(245,2-252,37)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(245,2-252,37)
(not 
;; def=BinomialQueue.fst(240,43-240,44); use=BinomialQueue.fst(245,8-245,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(240,43-247,25); use=BinomialQueue.fst(245,8-247,25)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
(BinomialQueue.Internal @x2
@x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(245,2-252,37)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(248,18-248,25)
(or label_5

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(248,18-248,25)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(245,2-252,37)
(= @x5
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(245,2-252,37)
(and 
;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(248,38-248,43)
(or label_6

;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(248,38-248,43)
(Valid 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(248,38-248,43)
(Prims.precedes Prims.nat
Prims.nat
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(240,15-252,37); use=BinomialQueue.fst(248,38-248,43)
(and 
;; def=BinomialQueue.fst(240,15-240,16); use=BinomialQueue.fst(248,38-248,43)
(Valid 
;; def=BinomialQueue.fst(240,15-240,16); use=BinomialQueue.fst(248,38-248,43)
(Prims.op_Equals_Equals_Equals Prims.nat
Prims.nat
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)


;; def=BinomialQueue.fst(240,23-252,37); use=BinomialQueue.fst(248,38-248,43)
(or 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(248,38-248,43)
(Valid 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(248,38-248,43)
(Prims.precedes BinomialQueue.key_t
BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_b19ee3ff3f4f676fe283c4905f1b1f83_1)
)


;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(248,38-248,43)
(Valid 
;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(248,38-248,43)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x4
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(240,43-247,25); use=BinomialQueue.fst(245,2-252,37)
(= @x4
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(248,12-248,17)
(and 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(248,12-248,17)
(or label_7

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(248,12-248,17)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(248,12-248,17)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(248,12-248,17)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.priq)

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(248,12-248,17)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x7)
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))


;; def=BinomialQueue.fst(248,8-248,43); use=BinomialQueue.fst(248,8-248,43)
(= (BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
@x7)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(249,4-249,25)
(and 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(249,4-249,25)
(or label_8

;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(249,4-249,25)
(Valid 
;; def=BinomialQueue.fst(225,9-225,30); use=BinomialQueue.fst(249,4-249,25)
(BinomialQueue.is_binomial_queue (BoxInt 1)
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4))
)
)


;; def=BinomialQueue.fst(225,34-225,64); use=BinomialQueue.fst(249,4-249,25)
(or label_9

;; def=BinomialQueue.fst(225,34-225,64); use=BinomialQueue.fst(249,4-249,25)
(Valid 
;; def=BinomialQueue.fst(225,34-225,64); use=BinomialQueue.fst(249,4-249,25)
(BinomialQueue.is_pow2heap (Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4))
(BoxInt 1))
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(249,4-249,25)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=BinomialQueue.fst(226,15-226,51); use=BinomialQueue.fst(249,4-249,25)
(Valid 
;; def=BinomialQueue.fst(226,15-226,51); use=BinomialQueue.fst(249,4-249,25)
(BinomialQueue.is_binomial_queue (BoxInt 1)
(FStar.List.Tot.Base.append BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))))
)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(250,6-250,19)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=FStar.List.Tot.Properties.fsti(139,17-139,57); use=BinomialQueue.fst(250,6-250,19)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
(FStar.List.Tot.Base.op_At BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))))
(Prims.op_Addition (FStar.List.Tot.Base.length BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4))
(FStar.List.Tot.Base.length BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree)))))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(251,6-251,23)
(and 
;; def=FStar.List.Tot.Properties.fsti(220,14-220,29); use=BinomialQueue.fst(251,6-251,23)
(or label_10

;; def=FStar.List.Tot.Properties.fsti(220,14-220,29); use=BinomialQueue.fst(251,6-251,23)
(> (BoxInt_proj_0 (FStar.List.Tot.Base.length BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(251,6-251,23)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=FStar.List.Tot.Properties.fsti(221,13-221,40); use=BinomialQueue.fst(251,6-251,23)
(= (FStar.List.Tot.Base.last BinomialQueue.tree
(FStar.List.Tot.Base.op_At BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))))
(FStar.List.Tot.Base.last BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(245,2-252,37)
(and 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(252,4-252,37)
(or label_11

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(252,4-252,37)
(Valid 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(252,4-252,37)
(BinomialQueue.is_priq (FStar.List.Tot.Base.append BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))))
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
BinomialQueue.priq)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(245,2-252,37)
(= @x11
(FStar.List.Tot.Base.append BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))))
)

;; def=Prims.fst(356,46-356,58); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=Prims.fst(356,46-356,58); use=BinomialQueue.fst(245,2-252,37)
(ApplyTT @x1
@x11)
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(245,2-252,37); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.priq))

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(245,2-252,37)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x1 Term))
 (! (implies (and (or label_12
(HasType @x1
BinomialQueue.priq))

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(245,2-252,37)
(or label_13

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(245,2-252,37)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x1)
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(245,2-252,37)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(245,2-252,37)
(ApplyTT @x0
@x1)
)
)
:qid @query.17))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(245,2-252,37)
(and 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(245,2-252,37)
(or label_14

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(245,2-252,37)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(245,2-252,37)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(245,2-252,37)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
BinomialQueue.priq)

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(245,2-252,37)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x1)
x_bb4e1c9af0265270f8e7a5f250f730e2_0)


;; def=BinomialQueue.fst(241,9-252,37); use=BinomialQueue.fst(245,2-252,37)
(= @x1
(let ((@lb2 x_c1ab7496c060d1f2d977fd02b92d48e2_2))
(ite (is-BinomialQueue.Leaf @lb2)
(Prims.Nil BinomialQueue.tree)
(ite (is-BinomialQueue.Internal @lb2)
(FStar.List.Tot.Base.append BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
(BinomialQueue.Internal__2 @lb2))
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal (BinomialQueue.Internal__0 @lb2)
(BinomialQueue.Internal__1 @lb2)
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree)))
Tm_unit))))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.priq)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x2
@x1)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x2)
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.16))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.unzip, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented, @fuel_irrelevance_BinomialQueue.pow2heap_pred.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, Prims_pretyping_ae567c2fb75be05905677af440075565, b2t_def, binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1, binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_BinomialQueue.Internal, data_elim_Prims.Cons, data_typing_intro_BinomialQueue.Internal@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, eq2-interp, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_compact, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.is_priq, equation_BinomialQueue.key_t, equation_BinomialQueue.priq, equation_FStar.List.Tot.Base.op_At, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.last.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, kinding_BinomialQueue.tree@tok, l_and-interp, primitive_Prims.op_Addition, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented, true_interp, typing_FStar.List.Tot.Base.length, typing_tok_BinomialQueue.Leaf@tok, well-founded-ordering-on-nat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec unzip


; <Start encoding let rec unzip>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.unzip.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.unzip.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.unzip (Term Term Term) Term)
(declare-fun BinomialQueue.unzip@tok () Term)
(declare-fun Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 (Term) Term)

;;;;;;;;;;;;;;;;d: Prims.nat -> upper_bound: key_t -> t: tree -> Prims.Pure priq
(declare-fun Tm_arrow_ad7e8f2981c190653d783b840552b82e () Term)


; </end encoding let rec unzip>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.unzip; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(BinomialQueue.pow2heap_pred @x0
@x1
@x2)
)

(HasType @x0
Prims.nat)
(HasType @x1
BinomialQueue.key_t)
(HasType @x2
BinomialQueue.tree))
(HasType (BinomialQueue.unzip @x0
@x1
@x2)
(Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0)))
 

:pattern ((BinomialQueue.unzip @x0
@x1
@x2))
:qid typing_BinomialQueue.unzip))

:named typing_BinomialQueue.unzip))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.unzip; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
BinomialQueue.key_t)
(HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(BinomialQueue.pow2heap_pred @x1
@x2
@x3)
)
)
(HasType (BinomialQueue.unzip.fuel_instrumented @u0
@x1
@x2
@x3)
(Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x1)))
 

:pattern ((BinomialQueue.unzip.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_BinomialQueue.unzip.fuel_instrumented))

:named token_correspondence_BinomialQueue.unzip.fuel_instrumented))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name BinomialQueue.unzip; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(241,9-241,13); use=BinomialQueue.fst(241,9-241,13)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8))

:named refinement_kinding_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name BinomialQueue.unzip; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(241,9-241,13); use=BinomialQueue.fst(241,9-241,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.priq)

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(243,27-243,42)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x2)))
:qid refinement_interpretation_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8))

:named refinement_interpretation_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8
;;; Fact-ids: Name BinomialQueue.unzip; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(241,9-241,13); use=BinomialQueue.fst(241,9-241,13)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0)))
(Valid (Prims.hasEq BinomialQueue.priq)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8 @x0))))
:qid haseqTm_refine_0ef537e2d1916c03cee9d0bd5e289de8))

:named haseqTm_refine_0ef537e2d1916c03cee9d0bd5e289de8))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.unzip
;;; Fact-ids: Name BinomialQueue.unzip; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
BinomialQueue.key_t)
(HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(242,19-242,48)
(BinomialQueue.pow2heap_pred @x1
@x2
@x3)
)
)
(= (BinomialQueue.unzip.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x3))
(ite (is-BinomialQueue.Leaf @lb4)
(Prims.Nil BinomialQueue.tree)
(ite (is-BinomialQueue.Internal @lb4)
(FStar.List.Tot.Base.append BinomialQueue.tree
(BinomialQueue.unzip.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
@x2
(BinomialQueue.Internal__2 @lb4))
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal (BinomialQueue.Internal__0 @lb4)
(BinomialQueue.Internal__1 @lb4)
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree)))
Tm_unit)))))
 :weight 0


:pattern ((BinomialQueue.unzip.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_BinomialQueue.unzip.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.unzip.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.unzip; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (BinomialQueue.unzip.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(BinomialQueue.unzip.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((BinomialQueue.unzip.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_BinomialQueue.unzip.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.unzip.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.unzip; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(240,8-240,13); use=BinomialQueue.fst(240,8-240,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.unzip @x0
@x1
@x2)
(BinomialQueue.unzip.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((BinomialQueue.unzip @x0
@x1
@x2))
:qid @fuel_correspondence_BinomialQueue.unzip.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.unzip.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(261,2-262,48)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (d: Prims.pos) (t: BinomialQueue.tree).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post BinomialQueue.priq).
;     BinomialQueue.is_pow2heap d t /\
;     (forall (pure_result: BinomialQueue.priq).
;         FStar.List.Tot.Base.length pure_result == d - 1 ==> p pure_result) ==>
;     (~(Internal? t && Leaf? t._2) ==> Prims.l_False) /\
;     (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t).
;         t == BinomialQueue.Internal b b BinomialQueue.Leaf ==>
;         d - 1 >= 0 /\
;         (forall (return_val: Prims.nat).
;             return_val == d - 1 ==>
;             BinomialQueue.pow2heap_pred (d - 1) b b /\
;             (forall (pure_result: BinomialQueue.priq).
;                 FStar.List.Tot.Base.length pure_result == d - 1 ==>
;                 pure_result ==
;                 (let BinomialQueue.Internal left k BinomialQueue.Leaf = t in
;                   BinomialQueue.unzip (d - 1) k left) ==>
;                 (forall (return_val: BinomialQueue.priq). return_val == pure_result ==> p return_val
;                 ))))


; Context: While encoding a query
; While typechecking the top-level declaration `let heap_delete_max`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post BinomialQueue.priq))

;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(261,2-262,48)
(Valid 
;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(261,2-262,48)
(BinomialQueue.is_pow2heap @x0
@x1)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(261,2-262,48)
(forall ((@x3 Term))
 (! (implies (and (or label_1
(HasType @x3
BinomialQueue.priq))

;; def=BinomialQueue.fst(259,27-259,46); use=BinomialQueue.fst(261,2-262,48)
(or label_2

;; def=BinomialQueue.fst(259,27-259,46); use=BinomialQueue.fst(261,2-262,48)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x3)
(Prims.op_Subtraction @x0
(BoxInt 1)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(261,2-262,48)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(261,2-262,48)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(261,2-262,48)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(261,2-262,48)
(ApplyTT @x2
@x3)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(261,2-262,48)
(and (implies 
;; def=BinomialQueue.fst(256,29-262,12); use=BinomialQueue.fst(261,8-262,12)
(not 
;; def=BinomialQueue.fst(256,29-262,12); use=BinomialQueue.fst(261,8-262,12)
(and (BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 @x1))))
)

label_3)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(261,2-262,48)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(261,2-262,48)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.key_t)

;; def=BinomialQueue.fst(256,29-262,24); use=BinomialQueue.fst(261,8-262,24)
(= @x1
(BinomialQueue.Internal @x3
@x4
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(261,2-262,48)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(262,34-262,41)
(or label_4

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(262,34-262,41)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(261,2-262,48)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(261,2-262,48)
(= @x5
(Prims.op_Subtraction @x0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(262,28-262,33)
(and 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(262,28-262,33)
(or label_5

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(262,28-262,33)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(262,28-262,33)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction @x0
(BoxInt 1))
@x4
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(262,28-262,33)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.priq)

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(262,28-262,33)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x6)
(Prims.op_Subtraction @x0
(BoxInt 1)))


;; def=BinomialQueue.fst(257,9-262,48); use=BinomialQueue.fst(261,2-262,48)
(= @x6
(let ((@lb7 @x1))
(ite (and (is-BinomialQueue.Internal @lb7)
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 @lb7)))
(BinomialQueue.unzip (Prims.op_Subtraction @x0
(BoxInt 1))
(BinomialQueue.Internal__1 @lb7)
(BinomialQueue.Internal__0 @lb7))
Tm_unit)))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.priq)

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x7
@x6)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x2
@x7)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.heap_delete_max, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_BinomialQueue.Leaf, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.is_pow2heap, equation_Prims.pos, false_interp, int_inversion, primitive_Prims.op_Subtraction, proj_equation_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let heap_delete_max


; <Start encoding let heap_delete_max>

(declare-fun BinomialQueue.heap_delete_max (Term Term) Term)
(declare-fun Tm_refine_3c9cc77bf100a350c17609319bf47840 (Term) Term)
;;;;;;;;;;;;;;;;d: Prims.pos -> t: tree -> Prims.Pure priq
(declare-fun Tm_arrow_e38b1853050060b9d0b9632b7f417eb9 () Term)
(declare-fun BinomialQueue.heap_delete_max@tok () Term)


; </end encoding let heap_delete_max>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.heap_delete_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(256,4-256,19); use=BinomialQueue.fst(256,4-256,19)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(258,19-258,34)
(Valid 
;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(258,19-258,34)
(BinomialQueue.is_pow2heap @x0
@x1)
)

(HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree))
(HasType (BinomialQueue.heap_delete_max @x0
@x1)
(Tm_refine_3c9cc77bf100a350c17609319bf47840 @x0)))
 

:pattern ((BinomialQueue.heap_delete_max @x0
@x1))
:qid typing_BinomialQueue.heap_delete_max))

:named typing_BinomialQueue.heap_delete_max))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name BinomialQueue.heap_delete_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(257,9-257,13); use=BinomialQueue.fst(257,9-257,13)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_3c9cc77bf100a350c17609319bf47840 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_3c9cc77bf100a350c17609319bf47840 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_3c9cc77bf100a350c17609319bf47840))

:named refinement_kinding_Tm_refine_3c9cc77bf100a350c17609319bf47840))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name BinomialQueue.heap_delete_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(257,9-257,13); use=BinomialQueue.fst(257,9-257,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3c9cc77bf100a350c17609319bf47840 @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.priq)

;; def=BinomialQueue.fst(259,27-259,46); use=BinomialQueue.fst(259,27-259,46)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3c9cc77bf100a350c17609319bf47840 @x2)))
:qid refinement_interpretation_Tm_refine_3c9cc77bf100a350c17609319bf47840))

:named refinement_interpretation_Tm_refine_3c9cc77bf100a350c17609319bf47840))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3c9cc77bf100a350c17609319bf47840
;;; Fact-ids: Name BinomialQueue.heap_delete_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(257,9-257,13); use=BinomialQueue.fst(257,9-257,13)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3c9cc77bf100a350c17609319bf47840 @x0)))
(Valid (Prims.hasEq BinomialQueue.priq)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3c9cc77bf100a350c17609319bf47840 @x0))))
:qid haseqTm_refine_3c9cc77bf100a350c17609319bf47840))

:named haseqTm_refine_3c9cc77bf100a350c17609319bf47840))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.heap_delete_max
;;; Fact-ids: Name BinomialQueue.heap_delete_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(256,4-256,19); use=BinomialQueue.fst(256,4-256,19)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.heap_delete_max @x0
@x1)
(let ((@lb2 @x1))
(ite (and (is-BinomialQueue.Internal @lb2)
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 @lb2)))
(BinomialQueue.unzip (Prims.op_Subtraction @x0
(BoxInt 1))
(BinomialQueue.Internal__1 @lb2)
(BinomialQueue.Internal__0 @lb2))
Tm_unit)))
 

:pattern ((BinomialQueue.heap_delete_max @x0
@x1))
:qid equation_BinomialQueue.heap_delete_max))

:named equation_BinomialQueue.heap_delete_max))
(push) ;; push{2

; Starting query at BinomialQueue.fst(275,2-285,62)

;;;;;;;;;;;;;;;;m : BinomialQueue.key_t (BinomialQueue.key_t)
(declare-fun x_b19ee3ff3f4f676fe283c4905f1b1f83_0 () Term)
;;;;;;;;;;;;;;;;binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0
;;; Fact-ids: 
(assert (! (HasType x_b19ee3ff3f4f676fe283c4905f1b1f83_0
BinomialQueue.key_t)
:named binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0))
;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_1
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_1
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_1))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_2 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_2
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_2
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_2))
(declare-fun Tm_refine_415ce98573bef7ed76e40abc9035399e () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_415ce98573bef7ed76e40abc9035399e
Tm_type)
:named refinement_kinding_Tm_refine_415ce98573bef7ed76e40abc9035399e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(269,42-285,62); use=BinomialQueue.fst(269,42-285,62)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_415ce98573bef7ed76e40abc9035399e)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)

;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_415ce98573bef7ed76e40abc9035399e))
:qid refinement_interpretation_Tm_refine_415ce98573bef7ed76e40abc9035399e))

:named refinement_interpretation_Tm_refine_415ce98573bef7ed76e40abc9035399e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_415ce98573bef7ed76e40abc9035399e
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_415ce98573bef7ed76e40abc9035399e))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_415ce98573bef7ed76e40abc9035399e))
(declare-fun BinomialQueue.delete_max_aux (Term Term Term) Term)

(declare-fun Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(270,9-270,32); use=BinomialQueue.fst(270,9-270,32)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))

:named refinement_kinding_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(270,9-270,32); use=BinomialQueue.fst(270,9-270,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))
(let ((@lb4 @x1))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(272,35-272,66)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(272,35-272,41)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb4)))


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(272,45-272,66)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(272,45-272,66)
(BinomialQueue.is_binomial_queue @x3
(FStar.Pervasives.Native.Mktuple3__2 @lb4))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))

:named refinement_interpretation_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(270,9-270,32); use=BinomialQueue.fst(270,9-270,32)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1))))
:qid haseqTm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))

:named haseqTm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))
;;;;;;;;;;;;;;;;m: key_t -> d: Prims.pos -> q: forest{q << q} -> Prims.Pure (key_t & forest & priq)
(declare-fun Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b
Tm_type)
:named kinding_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(269,26-285,62); use=BinomialQueue.fst(269,26-285,62)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b))
:qid BinomialQueue_pre_typing_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b))

:named BinomialQueue_pre_typing_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(269,26-285,62); use=BinomialQueue.fst(269,26-285,62)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b)
(and 
;; def=BinomialQueue.fst(269,26-285,62); use=BinomialQueue.fst(269,26-285,62)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(BinomialQueue.is_binomial_queue @x2
@x3)
)

(HasType @x1
BinomialQueue.key_t)
(HasType @x2
Prims.pos)
(HasType @x3
Tm_refine_415ce98573bef7ed76e40abc9035399e))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid BinomialQueue_interpretation_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b.1))

(IsTotFun @x0)

;; def=BinomialQueue.fst(269,26-285,62); use=BinomialQueue.fst(269,26-285,62)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.key_t)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b.2))


;; def=BinomialQueue.fst(269,26-285,62); use=BinomialQueue.fst(269,26-285,62)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
BinomialQueue.key_t)
(HasType @x2
Prims.pos))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid BinomialQueue_interpretation_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b))
:qid BinomialQueue_interpretation_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b))

:named BinomialQueue_interpretation_Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b))
(declare-fun BinomialQueue.delete_max_aux@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT BinomialQueue.delete_max_aux@tok
@x0)
@x1)
@x2)
(BinomialQueue.delete_max_aux @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT BinomialQueue.delete_max_aux@tok
@x0)
@x1)
@x2))
:qid token_correspondence_BinomialQueue.delete_max_aux))

:named token_correspondence_BinomialQueue.delete_max_aux))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.delete_max_aux@tok
Tm_arrow_b95bc58136b9e5416d04dddbb5deab9b))

;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT BinomialQueue.delete_max_aux@tok
@x1)
@x2)
@x3)
(BinomialQueue.delete_max_aux @x1
@x2
@x3))
 

:pattern ((BinomialQueue.delete_max_aux @x1
@x2
@x3))
:qid function_token_typing_BinomialQueue.delete_max_aux.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.delete_max_aux@tok))
:qid function_token_typing_BinomialQueue.delete_max_aux))

:named function_token_typing_BinomialQueue.delete_max_aux))

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(BinomialQueue.is_binomial_queue @x1
@x2)
)

(HasType @x0
BinomialQueue.key_t)
(HasType @x1
Prims.pos)
(HasType @x2
Tm_refine_415ce98573bef7ed76e40abc9035399e))
(HasType (BinomialQueue.delete_max_aux @x0
@x1
@x2)
(Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1)))
 

:pattern ((BinomialQueue.delete_max_aux @x0
@x1
@x2))
:qid typing_BinomialQueue.delete_max_aux))

:named typing_BinomialQueue.delete_max_aux))
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : (forall (p: Prims.pure_post (BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq)).
;     BinomialQueue.is_binomial_queue d q /\
;     (forall (pure_result: BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;         (let x, q, _ = pure_result in
;           m <= x /\ BinomialQueue.is_binomial_queue d q) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post (BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq)).
;         (forall (x: BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;             {:pattern Prims.guard_free (k x)}
;             (x ==
;               (match q with
;                 | [] -> m + 1, [], []
;                 | BinomialQueue.Leaf :: q ->
;                   (let x, q, new_q = BinomialQueue.delete_max_aux m (d + 1) q in
;                     x, BinomialQueue.Leaf :: q, new_q)
;                   <:
;                   BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq
;                 | BinomialQueue.Internal left x right :: q ->
;                   (match x < m with
;                     | true ->
;                       (let y, q, new_q = BinomialQueue.delete_max_aux m (d + 1) q in
;                         y, BinomialQueue.Internal left x right :: q, new_q)
;                       <:
;                       BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq
;                     | _ ->
;                       x,
;                       BinomialQueue.Leaf :: q,
;                       BinomialQueue.heap_delete_max d (BinomialQueue.Internal left x right))
;                   <:
;                   BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq) ==>
;               (forall (return_val: BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;                   return_val == x ==> p return_val)) ==>
;             k x) ==>
;         (~(Nil? q) /\ ~(Cons? q && Leaf? q.hd) /\ ~(Cons? q && Internal? q.hd) ==> Prims.l_False) /\
;         (q == [] ==>
;           m + 1 >= 0 /\
;           (forall (return_val: BinomialQueue.key_t).
;               return_val == m + 1 ==>
;               Prims.auto_squash (BinomialQueue.is_priq []) /\
;               (forall (return_val: BinomialQueue.priq).
;                   return_val == [] ==>
;                   (forall (any_result:
;                       BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;                       k any_result)))) /\
;         (~(Nil? q) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               q == BinomialQueue.Leaf :: b ==>
;               d + 1 > 0 /\
;               (forall (return_val: Prims.pos).
;                   return_val == d + 1 ==>
;                   b << q /\
;                   (forall (any_result: Prims.list BinomialQueue.tree).
;                       b == any_result ==>
;                       BinomialQueue.is_binomial_queue (d + 1) b /\
;                       (forall (pure_result:
;                           BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;                           (let x, q, _ = pure_result in
;                             m <= x /\ BinomialQueue.is_binomial_queue (d + 1) q) ==>
;                           BinomialQueue.delete_max_aux m (d + 1) b == pure_result ==>
;                           (forall (b: BinomialQueue.key_t)
;                               (b: BinomialQueue.forest)
;                               (b: BinomialQueue.priq).
;                               BinomialQueue.delete_max_aux m (d + 1) b == (b, b, b) ==>
;                               (forall (any_result:
;                                   BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;                                   k any_result)))))) /\
;           (~(Cons? q && Leaf? q.hd) ==>
;             (forall (b: BinomialQueue.tree)
;                 (b: BinomialQueue.key_t)
;                 (b: BinomialQueue.tree)
;                 (b: Prims.list BinomialQueue.tree).
;                 q == BinomialQueue.Internal b b b :: b ==>
;                 (forall (k:
;                     Prims.pure_post (BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq
;                       )).
;                     (forall (x: BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;                         {:pattern Prims.guard_free (k x)}
;                         k x ==> k x) ==>
;                     (b < m == true ==>
;                       d + 1 > 0 /\
;                       (forall (return_val: Prims.pos).
;                           return_val == d + 1 ==>
;                           b << q /\
;                           (forall (any_result: Prims.list BinomialQueue.tree).
;                               b == any_result ==>
;                               BinomialQueue.is_binomial_queue (d + 1) b /\
;                               (forall (pure_result:
;                                   BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;                                   (let x, q, _ = pure_result in
;                                     m <= x /\ BinomialQueue.is_binomial_queue (d + 1) q) ==>
;                                   BinomialQueue.delete_max_aux m (d + 1) b == pure_result ==>
;                                   (forall (b: BinomialQueue.key_t)
;                                       (b: BinomialQueue.forest)
;                                       (b: BinomialQueue.priq).
;                                       BinomialQueue.delete_max_aux m (d + 1) b == (b, b, b) ==>
;                                       (forall (any_result:
;                                           BinomialQueue.key_t &
;                                           BinomialQueue.forest &
;                                           BinomialQueue.priq).
;                                           k any_result)))))) /\
;                     (~(b < m = true) ==>
;                       (forall (b: Prims.bool).
;                           b < m == b ==>
;                           BinomialQueue.is_pow2heap d (BinomialQueue.Internal b b b) /\
;                           (forall (pure_result: BinomialQueue.priq).
;                               FStar.List.Tot.Base.length pure_result == d - 1 ==>
;                               BinomialQueue.heap_delete_max d (BinomialQueue.Internal b b b) ==
;                               pure_result ==>
;                               (forall (any_result:
;                                   BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;                                   k any_result)))))))))) /\
; (forall (p: Prims.pure_post (BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq)).
;     BinomialQueue.is_binomial_queue d q /\
;     (forall (pure_result: BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;         (let x, q, _ = pure_result in
;           m <= x /\ BinomialQueue.is_binomial_queue d q) ==>
;         p pure_result) ==>
;     BinomialQueue.is_binomial_queue d q /\
;     (forall (pure_result: BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;         (let x, q, _ = pure_result in
;           m <= x /\ BinomialQueue.is_binomial_queue d q) ==>
;         pure_result ==
;         (match q with
;           | [] -> m + 1, [], []
;           | BinomialQueue.Leaf :: q ->
;             (let x, q, new_q = BinomialQueue.delete_max_aux m (d + 1) q in
;               x, BinomialQueue.Leaf :: q, new_q)
;             <:
;             BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq
;           | BinomialQueue.Internal left x right :: q ->
;             (match x < m with
;               | true ->
;                 (let y, q, new_q = BinomialQueue.delete_max_aux m (d + 1) q in
;                   y, BinomialQueue.Internal left x right :: q, new_q)
;                 <:
;                 BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq
;               | _ ->
;                 x,
;                 BinomialQueue.Leaf :: q,
;                 BinomialQueue.heap_delete_max d (BinomialQueue.Internal left x right))
;             <:
;             BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq) ==>
;         (forall (return_val: BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;             return_val == pure_result ==> p return_val)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec delete_max_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq)))

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(275,2-285,62)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq)))
(let ((@lb2 @x1))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(275,2-285,62)
(or label_2

;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(275,2-285,62)
(<= (BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb2)))
)


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(275,2-285,62)
(or label_3

;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(275,2-285,62)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
(FStar.Pervasives.Native.Mktuple3__2 @lb2))
)
)
)
))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post (FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq)))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x2 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(270,9-285,62); use=BinomialQueue.fst(275,2-285,62)
(= @x2
(let ((@lb3 x_07642eb27f8c86505049ec727a4a557c_2))
(ite (is-Prims.Nil @lb3)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(Prims.op_Addition x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BoxInt 1))
(Prims.Nil BinomialQueue.tree)
(Prims.Nil BinomialQueue.tree))
(ite (and (is-Prims.Cons @lb3)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb3)))
(let ((@lb4 (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
(Prims.Cons_tl @lb3))))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(FStar.Pervasives.Native.Mktuple3__1 @lb4)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(FStar.Pervasives.Native.Mktuple3__2 @lb4))
(FStar.Pervasives.Native.Mktuple3__3 @lb4)))
(ite (and (is-Prims.Cons @lb3)
(is-BinomialQueue.Internal (Prims.Cons_hd @lb3)))
(let ((@lb4 (Prims.op_LessThan (BinomialQueue.Internal__1 (Prims.Cons_hd @lb3))
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)))
(ite (= @lb4
(BoxBool true))
(let ((@lb5 (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
(Prims.Cons_tl @lb3))))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(FStar.Pervasives.Native.Mktuple3__1 @lb5)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal (BinomialQueue.Internal__0 (Prims.Cons_hd @lb3))
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb3))
(BinomialQueue.Internal__2 (Prims.Cons_hd @lb3)))
(FStar.Pervasives.Native.Mktuple3__2 @lb5))
(FStar.Pervasives.Native.Mktuple3__3 @lb5)))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb3))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(Prims.Cons_tl @lb3))
(BinomialQueue.heap_delete_max x_f26957a7e62b271a8736230b1e9c83c1_1
(BinomialQueue.Internal (BinomialQueue.Internal__0 (Prims.Cons_hd @lb3))
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb3))
(BinomialQueue.Internal__2 (Prims.Cons_hd @lb3)))))))
Tm_unit)))))


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x3
@x2)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x3)
)
)
 
;;no pats
:qid @query.4))
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(275,2-285,62)
(and (implies 
;; def=BinomialQueue.fst(269,42-285,62); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=BinomialQueue.fst(269,42-269,43); use=BinomialQueue.fst(275,8-275,9)
(not 
;; def=BinomialQueue.fst(269,42-269,43); use=BinomialQueue.fst(275,8-275,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
)


;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(not 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
)


;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(not 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
)
)

label_4)
(implies 
;; def=BinomialQueue.fst(269,42-276,6); use=BinomialQueue.fst(275,8-276,6)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(276,10-276,15)
(or label_5

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(276,10-276,15)
(>= (BoxInt_proj_0 (Prims.op_Addition x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.key_t)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(275,2-285,62)
(= @x2
(Prims.op_Addition x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(276,21-276,23)
(or label_6

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(276,21-276,23)
(Valid 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(276,21-276,23)
(BinomialQueue.is_priq (Prims.Nil BinomialQueue.tree))
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.priq)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(275,2-285,62)
(= @x3
(Prims.Nil BinomialQueue.tree))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(275,2-285,62)
(not 
;; def=BinomialQueue.fst(269,42-269,43); use=BinomialQueue.fst(275,8-275,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(269,42-278,11); use=BinomialQueue.fst(275,8-278,11)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(279,39-279,46)
(or label_7

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(279,39-279,46)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(275,2-285,62)
(= @x3
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(279,47-279,48)
(or label_8

;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(279,47-279,48)
(Valid 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(279,47-279,48)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(269,42-278,11); use=BinomialQueue.fst(275,2-285,62)
(= @x2
@x4)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(279,22-279,36)
(and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(279,22-279,36)
(or label_9

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(279,22-279,36)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(279,22-279,36)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(279,22-279,36)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))
(let ((@lb6 @x5))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(279,22-279,36)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(279,22-279,36)
(<= (BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb6)))


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(279,22-279,36)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(279,22-279,36)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
(FStar.Pervasives.Native.Mktuple3__2 @lb6))
)
)
)

;; def=BinomialQueue.fst(279,8-279,48); use=BinomialQueue.fst(279,8-279,48)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x2)
@x5)
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x6 Term))
 (! (implies (HasType @x6
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x7 Term))
 (! (implies (HasType @x7
BinomialQueue.forest)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
BinomialQueue.priq)

;; def=BinomialQueue.fst(279,8-279,19); use=BinomialQueue.fst(279,8-279,19)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x2)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
@x6
@x7
@x8))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x1
@x9)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(275,2-285,62)
(not 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(269,42-281,30); use=BinomialQueue.fst(275,8-281,30)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
@x4)
@x5))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post (FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq)))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x7 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x1
@x7)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x6
@x7)
)
)
 :weight 0


:pattern ((ApplyTT @x6
@x7))
:qid @query.21))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(275,2-285,62)
(and (implies 
;; def=BinomialQueue.fst(282,7-282,12); use=BinomialQueue.fst(282,7-282,12)
(= (Prims.op_LessThan @x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(283,44-283,51)
(or label_10

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(283,44-283,51)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(275,2-285,62)
(= @x7
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(283,52-283,53)
(or label_11

;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(283,52-283,53)
(Valid 
;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(283,52-283,53)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x5
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(269,42-281,30); use=BinomialQueue.fst(275,2-285,62)
(= @x5
@x8)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(283,27-283,41)
(and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(283,27-283,41)
(or label_12

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(283,27-283,41)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(283,27-283,41)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(283,27-283,41)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))
(let ((@lb10 @x9))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(283,27-283,41)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(283,27-283,41)
(<= (BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb10)))


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(283,27-283,41)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(283,27-283,41)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
(FStar.Pervasives.Native.Mktuple3__2 @lb10))
)
)
)

;; def=BinomialQueue.fst(283,13-283,53); use=BinomialQueue.fst(283,13-283,53)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x5)
@x9)
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x10 Term))
 (! (implies (HasType @x10
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x11 Term))
 (! (implies (HasType @x11
BinomialQueue.forest)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
BinomialQueue.priq)

;; def=BinomialQueue.fst(283,13-283,24); use=BinomialQueue.fst(283,13-283,24)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x5)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
@x10
@x11
@x12))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x6
@x13)
)
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(275,2-285,62)
(not 
;; def=BinomialQueue.fst(282,7-282,12); use=BinomialQueue.fst(282,7-282,12)
(= (Prims.op_LessThan @x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.bool)

;; def=BinomialQueue.fst(282,7-285,62); use=BinomialQueue.fst(282,7-285,62)
(= (Prims.op_LessThan @x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
@x7)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(285,21-285,36)
(and 
;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(285,21-285,36)
(or label_13

;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(285,21-285,36)
(Valid 
;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(285,21-285,36)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_1
(BinomialQueue.Internal @x2
@x3
@x4))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(285,21-285,36)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
BinomialQueue.priq)

;; def=BinomialQueue.fst(259,27-259,46); use=BinomialQueue.fst(285,21-285,36)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x8)
(Prims.op_Subtraction x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))


;; def=FStar.Pervasives.Native.fst(65,56-65,58); use=BinomialQueue.fst(275,2-285,62)
(= (BinomialQueue.heap_delete_max x_f26957a7e62b271a8736230b1e9c83c1_1
(BinomialQueue.Internal @x2
@x3
@x4))
@x8)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x6
@x9)
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.29))
))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(275,2-285,62); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq)))

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(275,2-285,62)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x1 Term))
 (! (implies (and (or label_14
(HasType @x1
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq)))
(let ((@lb2 @x1))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(275,2-285,62)
(or label_15

;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(275,2-285,62)
(<= (BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb2)))
)


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(275,2-285,62)
(or label_16

;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(275,2-285,62)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
(FStar.Pervasives.Native.Mktuple3__2 @lb2))
)
)
)
))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(275,2-285,62)
(ApplyTT @x0
@x1)
)
)
:qid @query.33))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(275,2-285,62)
(or label_17

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(275,2-285,62)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(275,2-285,62)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))
(let ((@lb2 @x1))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(275,2-285,62)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(275,2-285,62)
(<= (BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb2)))


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(275,2-285,62)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(275,2-285,62)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
(FStar.Pervasives.Native.Mktuple3__2 @lb2))
)
)
)

;; def=BinomialQueue.fst(270,9-285,62); use=BinomialQueue.fst(275,2-285,62)
(= @x1
(let ((@lb2 x_07642eb27f8c86505049ec727a4a557c_2))
(ite (is-Prims.Nil @lb2)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(Prims.op_Addition x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BoxInt 1))
(Prims.Nil BinomialQueue.tree)
(Prims.Nil BinomialQueue.tree))
(ite (and (is-Prims.Cons @lb2)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb2)))
(let ((@lb3 (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
(Prims.Cons_tl @lb2))))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(FStar.Pervasives.Native.Mktuple3__1 @lb3)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(FStar.Pervasives.Native.Mktuple3__2 @lb3))
(FStar.Pervasives.Native.Mktuple3__3 @lb3)))
(ite (and (is-Prims.Cons @lb2)
(is-BinomialQueue.Internal (Prims.Cons_hd @lb2)))
(let ((@lb3 (Prims.op_LessThan (BinomialQueue.Internal__1 (Prims.Cons_hd @lb2))
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)))
(ite (= @lb3
(BoxBool true))
(let ((@lb4 (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
(Prims.Cons_tl @lb2))))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(FStar.Pervasives.Native.Mktuple3__1 @lb4)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal (BinomialQueue.Internal__0 (Prims.Cons_hd @lb2))
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb2))
(BinomialQueue.Internal__2 (Prims.Cons_hd @lb2)))
(FStar.Pervasives.Native.Mktuple3__2 @lb4))
(FStar.Pervasives.Native.Mktuple3__3 @lb4)))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb2))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(Prims.Cons_tl @lb2))
(BinomialQueue.heap_delete_max x_f26957a7e62b271a8736230b1e9c83c1_1
(BinomialQueue.Internal (BinomialQueue.Internal__0 (Prims.Cons_hd @lb2))
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb2))
(BinomialQueue.Internal__2 (Prims.Cons_hd @lb2)))))))
Tm_unit)))))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x2
@x1)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x2)
)
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.32))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.delete_max_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, b2t_def, binder_x_07642eb27f8c86505049ec727a4a557c_2, binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0, binder_x_f26957a7e62b271a8736230b1e9c83c1_1, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_elim_FStar.Pervasives.Native.Mktuple3, data_elim_Prims.Cons, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_compact, equation_BinomialQueue.is_priq, equation_BinomialQueue.key_t, equation_BinomialQueue.priq, equation_Prims.l_or, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, int_inversion, int_typing, l_and-interp, l_or-interp, primitive_Prims.op_Addition, primitive_Prims.op_LessThan, proj_equation_Prims.Cons_hd, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, subterm_ordering_Prims.Cons, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec delete_max_aux


; <Start encoding let rec delete_max_aux>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.delete_max_aux.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.delete_max_aux.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.delete_max_aux (Term Term Term) Term)
(declare-fun BinomialQueue.delete_max_aux@tok () Term)
(declare-fun Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 (Term Term) Term)

;;;;;;;;;;;;;;;;m: key_t -> d: Prims.pos -> q: forest -> Prims.Pure (key_t & forest & priq)
(declare-fun Tm_arrow_1d470983427f04e417876a721967e0ed () Term)


; </end encoding let rec delete_max_aux>


; encoding sigelt val BinomialQueue.delete_max


; <Skipped val BinomialQueue.delete_max/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.join; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(BinomialQueue.is_binomial_queue @x0
@x1)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(BinomialQueue.is_binomial_queue @x0
@x2)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(172,12-172,40)
(or 
;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(172,13-172,20)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf @x3))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(BinomialQueue.is_pow2heap @x0
@x3)
)
)

(HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.tree))
(HasType (BinomialQueue.join @x0
@x1
@x2
@x3)
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x0)))
 

:pattern ((BinomialQueue.join @x0
@x1
@x2
@x3))
:qid typing_BinomialQueue.join))

:named typing_BinomialQueue.join))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.find_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x1
BinomialQueue.forest))
(HasType (BinomialQueue.find_max @x0
@x1)
(FStar.Pervasives.Native.option BinomialQueue.key_t)))
 

:pattern ((BinomialQueue.find_max @x0
@x1))
:qid typing_BinomialQueue.find_max))

:named typing_BinomialQueue.find_max))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.delete_max_aux; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(BinomialQueue.is_binomial_queue @x1
@x2)
)

(HasType @x0
BinomialQueue.key_t)
(HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest))
(HasType (BinomialQueue.delete_max_aux @x0
@x1
@x2)
(Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1)))
 

:pattern ((BinomialQueue.delete_max_aux @x0
@x1
@x2))
:qid typing_BinomialQueue.delete_max_aux))

:named typing_BinomialQueue.delete_max_aux))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.join; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.forest)
(HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(BinomialQueue.is_binomial_queue @x1
@x2)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(BinomialQueue.is_binomial_queue @x1
@x3)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(172,12-172,40)
(or 
;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(172,13-172,20)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf @x4))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(BinomialQueue.is_pow2heap @x1
@x4)
)
)
)
(HasType (BinomialQueue.join.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
(Tm_refine_ef894c20818013c5faab7b4bf585814b @x1)))
 

:pattern ((BinomialQueue.join.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_BinomialQueue.join.fuel_instrumented))

:named token_correspondence_BinomialQueue.join.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.find_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x2
BinomialQueue.forest))
(HasType (BinomialQueue.find_max.fuel_instrumented @u0
@x1
@x2)
(FStar.Pervasives.Native.option BinomialQueue.key_t)))
 

:pattern ((BinomialQueue.find_max.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_BinomialQueue.find_max.fuel_instrumented))

:named token_correspondence_BinomialQueue.find_max.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.delete_max_aux; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
BinomialQueue.key_t)
(HasType @x2
Prims.pos)
(HasType @x3
BinomialQueue.forest)

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(BinomialQueue.is_binomial_queue @x2
@x3)
)
)
(HasType (BinomialQueue.delete_max_aux.fuel_instrumented @u0
@x1
@x2
@x3)
(Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x1
@x2)))
 

:pattern ((BinomialQueue.delete_max_aux.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_BinomialQueue.delete_max_aux.fuel_instrumented))

:named token_correspondence_BinomialQueue.delete_max_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name BinomialQueue.delete_max_aux; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(270,9-270,32); use=BinomialQueue.fst(270,9-270,32)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))

:named refinement_kinding_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name BinomialQueue.delete_max_aux; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(270,9-270,32); use=BinomialQueue.fst(270,9-270,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))
(let ((@lb4 @x1))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(272,35-272,66)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(272,35-272,41)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb4)))


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(272,45-272,66)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(272,45-272,66)
(BinomialQueue.is_binomial_queue @x3
(FStar.Pervasives.Native.Mktuple3__2 @lb4))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))

:named refinement_interpretation_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4
;;; Fact-ids: Name BinomialQueue.delete_max_aux; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(270,9-270,32); use=BinomialQueue.fst(270,9-270,32)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4 @x0
@x1))))
:qid haseqTm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))

:named haseqTm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.join
;;; Fact-ids: Name BinomialQueue.join; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.forest)
(HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(170,12-170,33)
(BinomialQueue.is_binomial_queue @x1
@x2)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(171,12-171,33)
(BinomialQueue.is_binomial_queue @x1
@x3)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(172,12-172,40)
(or 
;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(172,13-172,20)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf @x4))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(172,24-172,39)
(BinomialQueue.is_pow2heap @x1
@x4)
)
)
)
(= (BinomialQueue.join.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
@x2
@x3
@x4)))
(ite (and (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb5)))
@x3
(ite (and (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb5)))
@x2
(ite (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(BinomialQueue.carry @x1
@x3
@x4)
(ite (is-Prims.Nil (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(BinomialQueue.carry @x1
@x2
@x4)
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb5)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb5))))
(Prims.Cons BinomialQueue.tree
@x4
(BinomialQueue.join.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb5))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb5)))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb5)))
(Prims.Cons BinomialQueue.tree
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(BinomialQueue.join.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb5))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb5)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(is-BinomialQueue.Leaf (FStar.Pervasives.Native.Mktuple3__3 @lb5)))
(Prims.Cons BinomialQueue.tree
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(BinomialQueue.join.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb5))
BinomialQueue.Leaf@tok))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb5)))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb5)))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.join.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(BinomialQueue.smash @x1
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb5))
@x4)))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(is-BinomialQueue.Leaf (Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb5))))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(BinomialQueue.join.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(BinomialQueue.smash @x1
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb5))
@x4)))
(ite (and (is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(is-Prims.Cons (FStar.Pervasives.Native.Mktuple3__2 @lb5)))
(Prims.Cons BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3__3 @lb5)
(BinomialQueue.join.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(Prims.Cons_tl (FStar.Pervasives.Native.Mktuple3__2 @lb5))
(BinomialQueue.smash @x1
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__1 @lb5))
(Prims.Cons_hd (FStar.Pervasives.Native.Mktuple3__2 @lb5)))))
Tm_unit)))))))))))))
 :weight 0


:pattern ((BinomialQueue.join.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_BinomialQueue.join.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.join.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.find_max
;;; Fact-ids: Name BinomialQueue.find_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x2
BinomialQueue.forest))
(= (BinomialQueue.find_max.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-Prims.Nil @lb3)
@x1
(ite (and (is-Prims.Cons @lb3)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb3)))
(BinomialQueue.find_max.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb3))
(ite (and (is-Prims.Cons @lb3)
(is-BinomialQueue.Internal (Prims.Cons_hd @lb3)))
(let ((@lb4 @x1))
(ite (is-FStar.Pervasives.Native.None @lb4)
(BinomialQueue.find_max.fuel_instrumented @u0
(FStar.Pervasives.Native.Some BinomialQueue.key_t
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb3)))
(Prims.Cons_tl @lb3))
(ite (is-FStar.Pervasives.Native.Some @lb4)
(BinomialQueue.find_max.fuel_instrumented @u0
(let ((@lb5 (Prims.op_LessThan (FStar.Pervasives.Native.Some_v @lb4)
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb3)))))
(ite (= @lb5
(BoxBool true))
(FStar.Pervasives.Native.Some BinomialQueue.key_t
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb3)))
(FStar.Pervasives.Native.Some BinomialQueue.key_t
(FStar.Pervasives.Native.Some_v @lb4))))
(Prims.Cons_tl @lb3))
Tm_unit)))
Tm_unit))))))
 :weight 0


:pattern ((BinomialQueue.find_max.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_BinomialQueue.find_max.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.find_max.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.delete_max_aux
;;; Fact-ids: Name BinomialQueue.delete_max_aux; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
BinomialQueue.key_t)
(HasType @x2
Prims.pos)
(HasType @x3
BinomialQueue.forest)

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(271,19-271,40)
(BinomialQueue.is_binomial_queue @x2
@x3)
)
)
(= (BinomialQueue.delete_max_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x3))
(ite (is-Prims.Nil @lb4)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(Prims.op_Addition @x1
(BoxInt 1))
(Prims.Nil BinomialQueue.tree)
(Prims.Nil BinomialQueue.tree))
(ite (and (is-Prims.Cons @lb4)
(is-BinomialQueue.Leaf (Prims.Cons_hd @lb4)))
(let ((@lb5 (BinomialQueue.delete_max_aux.fuel_instrumented @u0
@x1
(Prims.op_Addition @x2
(BoxInt 1))
(Prims.Cons_tl @lb4))))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(FStar.Pervasives.Native.Mktuple3__1 @lb5)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(FStar.Pervasives.Native.Mktuple3__2 @lb5))
(FStar.Pervasives.Native.Mktuple3__3 @lb5)))
(ite (and (is-Prims.Cons @lb4)
(is-BinomialQueue.Internal (Prims.Cons_hd @lb4)))
(let ((@lb5 (Prims.op_LessThan (BinomialQueue.Internal__1 (Prims.Cons_hd @lb4))
@x1)))
(ite (= @lb5
(BoxBool true))
(let ((@lb6 (BinomialQueue.delete_max_aux.fuel_instrumented @u0
@x1
(Prims.op_Addition @x2
(BoxInt 1))
(Prims.Cons_tl @lb4))))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(FStar.Pervasives.Native.Mktuple3__1 @lb6)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal (BinomialQueue.Internal__0 (Prims.Cons_hd @lb4))
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb4))
(BinomialQueue.Internal__2 (Prims.Cons_hd @lb4)))
(FStar.Pervasives.Native.Mktuple3__2 @lb6))
(FStar.Pervasives.Native.Mktuple3__3 @lb6)))
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb4))
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(Prims.Cons_tl @lb4))
(BinomialQueue.heap_delete_max @x2
(BinomialQueue.Internal (BinomialQueue.Internal__0 (Prims.Cons_hd @lb4))
(BinomialQueue.Internal__1 (Prims.Cons_hd @lb4))
(BinomialQueue.Internal__2 (Prims.Cons_hd @lb4)))))))
Tm_unit))))))
 :weight 0


:pattern ((BinomialQueue.delete_max_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_BinomialQueue.delete_max_aux.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.delete_max_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.join; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (BinomialQueue.join.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(BinomialQueue.join.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((BinomialQueue.join.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_BinomialQueue.join.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.join.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.find_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.find_max.fuel_instrumented (SFuel @u0)
@x1
@x2)
(BinomialQueue.find_max.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((BinomialQueue.find_max.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_BinomialQueue.find_max.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.find_max.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.delete_max_aux; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (BinomialQueue.delete_max_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(BinomialQueue.delete_max_aux.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((BinomialQueue.delete_max_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_BinomialQueue.delete_max_aux.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.delete_max_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.join; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(167,8-167,12); use=BinomialQueue.fst(167,8-167,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (BinomialQueue.join @x0
@x1
@x2
@x3)
(BinomialQueue.join.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((BinomialQueue.join @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_BinomialQueue.join.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.join.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.find_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(206,8-206,16); use=BinomialQueue.fst(206,8-206,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.find_max @x0
@x1)
(BinomialQueue.find_max.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((BinomialQueue.find_max @x0
@x1))
:qid @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.delete_max_aux; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(269,8-269,22); use=BinomialQueue.fst(269,8-269,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (BinomialQueue.delete_max_aux @x0
@x1
@x2)
(BinomialQueue.delete_max_aux.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((BinomialQueue.delete_max_aux @x0
@x1
@x2))
:qid @fuel_correspondence_BinomialQueue.delete_max_aux.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.delete_max_aux.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(291,2-297,26)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (q: BinomialQueue.priq).
;   (*  - Could not prove post-condition
; *)
;   forall (k:
;     Prims.pure_post (FStar.Pervasives.Native.option (BinomialQueue.key_t & BinomialQueue.priq))).
;     (forall (x: FStar.Pervasives.Native.option (BinomialQueue.key_t & BinomialQueue.priq)).
;         {:pattern Prims.guard_free (k x)}
;         Prims.auto_squash (k x)) ==>
;     (~(None? (BinomialQueue.find_max FStar.Pervasives.Native.None q)) /\
;       ~(Some? (BinomialQueue.find_max FStar.Pervasives.Native.None q)) ==>
;       Prims.l_False) /\
;     (~(None? (BinomialQueue.find_max FStar.Pervasives.Native.None q)) ==>
;       (forall (b: BinomialQueue.key_t).
;           BinomialQueue.find_max FStar.Pervasives.Native.None q == FStar.Pervasives.Native.Some b ==>
;           BinomialQueue.is_binomial_queue 1 q /\
;           (forall (pure_result: BinomialQueue.key_t & BinomialQueue.forest & BinomialQueue.priq).
;               (let x, q, _ = pure_result in
;                 b <= x /\ BinomialQueue.is_binomial_queue 1 q) ==>
;               BinomialQueue.delete_max_aux b 1 q == pure_result ==>
;               (forall (b: BinomialQueue.key_t) (b: BinomialQueue.forest) (b: BinomialQueue.priq).
;                   BinomialQueue.delete_max_aux b 1 q == (b, b, b) ==>
;                   BinomialQueue.is_binomial_queue 1 b /\ BinomialQueue.is_binomial_queue 1 b /\
;                   (Leaf? BinomialQueue.Leaf \/ BinomialQueue.is_pow2heap 1 BinomialQueue.Leaf) /\
;                   (forall (pure_result: BinomialQueue.forest).
;                       BinomialQueue.is_binomial_queue 1 pure_result ==>
;                       BinomialQueue.join 1 b b BinomialQueue.Leaf == pure_result ==>
;                       (forall (pure_result: Prims.unit).
;                           BinomialQueue.is_compact (BinomialQueue.mk_compact (BinomialQueue.join 1
;                                     b
;                                     b
;                                     BinomialQueue.Leaf)) ==>
;                           Prims.auto_squash (BinomialQueue.is_priq (BinomialQueue.mk_compact (BinomialQueue.join
;                                         1
;                                         b
;                                         b
;                                         BinomialQueue.Leaf)))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let delete_max`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.priq)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post (FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq))))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(291,2-297,26)
(forall ((@x2 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(291,2-297,26)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(291,2-297,26)
(ApplyTT @x1
@x2)
)

 

:pattern ((ApplyTT @x1
@x2))
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(291,2-297,26)
(and (implies 
;; def=BinomialQueue.fst(291,8-291,23); use=BinomialQueue.fst(291,8-291,23)
(and 
;; def=BinomialQueue.fst(291,8-291,23); use=BinomialQueue.fst(291,8-291,23)
(not 
;; def=BinomialQueue.fst(291,8-291,23); use=BinomialQueue.fst(291,8-291,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
)


;; def=BinomialQueue.fst(291,8-291,23); use=BinomialQueue.fst(291,8-291,23)
(not 
;; def=BinomialQueue.fst(291,8-291,23); use=BinomialQueue.fst(291,8-291,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(291,2-297,26)
(not 
;; def=BinomialQueue.fst(291,8-291,23); use=BinomialQueue.fst(291,8-291,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(291,2-297,26)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.key_t)

;; def=BinomialQueue.fst(291,8-293,10); use=BinomialQueue.fst(291,8-293,10)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)
(FStar.Pervasives.Native.Some BinomialQueue.key_t
@x2))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(294,22-294,36)
(and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(294,22-294,36)
(or label_2

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(294,22-294,36)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(294,22-294,36)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x0)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(294,22-294,36)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))
(let ((@lb4 @x3))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(294,22-294,36)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(294,22-294,36)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb4)))


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(294,22-294,36)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(294,22-294,36)
(BinomialQueue.is_binomial_queue (BoxInt 1)
(FStar.Pervasives.Native.Mktuple3__2 @lb4))
)
)
)

;; def=BinomialQueue.fst(294,8-294,42); use=BinomialQueue.fst(294,8-294,42)
(= (BinomialQueue.delete_max_aux @x2
(BoxInt 1)
@x0)
@x3)
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(291,2-297,26)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(291,2-297,26)
(forall ((@x5 Term))
 (! (implies (HasType @x5
BinomialQueue.forest)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(291,2-297,26)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.priq)

;; def=BinomialQueue.fst(294,8-294,19); use=BinomialQueue.fst(294,8-294,19)
(= (BinomialQueue.delete_max_aux @x2
(BoxInt 1)
@x0)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
@x4
@x5
@x6))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(295,12-295,16)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(295,12-295,16)
(or label_3

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(295,12-295,16)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(295,12-295,16)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x5)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(295,12-295,16)
(or label_4

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(295,12-295,16)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(295,12-295,16)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x6)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(295,12-295,16)
(or label_5

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(295,12-295,16)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(295,12-295,16)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(295,12-295,16)
(BinomialQueue.is_pow2heap (BoxInt 1)
BinomialQueue.Leaf@tok)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(295,12-295,16)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(295,12-295,16)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(295,12-295,16)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x7)
)


;; def=BinomialQueue.fst(295,8-295,31); use=BinomialQueue.fst(295,8-295,31)
(= (BinomialQueue.join (BoxInt 1)
@x5
@x6
BinomialQueue.Leaf@tok)
@x7)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(296,4-296,26)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(296,4-296,26)
(Valid 
;; def=BinomialQueue.fst(111,10-111,37); use=BinomialQueue.fst(296,4-296,26)
(BinomialQueue.is_compact (BinomialQueue.mk_compact (BinomialQueue.join (BoxInt 1)
@x5
@x6
BinomialQueue.Leaf@tok)))
)
)

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(297,13-297,25)
(or label_6

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(297,13-297,25)
(Valid 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(297,13-297,25)
(BinomialQueue.is_priq (BinomialQueue.mk_compact (BinomialQueue.join (BoxInt 1)
@x5
@x6
BinomialQueue.Leaf@tok)))
)
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
))
)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.delete_max, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented, @query, bool_inversion, constructor_distinct_BinomialQueue.Leaf, data_typing_intro_FStar.Pervasives.Native.None@tok, disc_equation_BinomialQueue.Leaf, disc_equation_FStar.Pervasives.Native.None, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_priq, equation_BinomialQueue.key_t, equation_BinomialQueue.priq, equation_Prims.nat, equation_Prims.pos, int_typing, lemma_BinomialQueue.mk_compact_preserves_binomial_queue, lemma_FStar.Pervasives.invertOption, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_BinomialQueue.find_max, typing_FStar.Pervasives.Native.uu___is_Some

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let delete_max


; <Start encoding let delete_max>

(declare-fun BinomialQueue.delete_max (Term) Term)
;;;;;;;;;;;;;;;;q: priq -> FStar.Pervasives.Native.option (key_t & priq)
(declare-fun Tm_arrow_15199781385a9ed72c8a546335414b31 () Term)
(declare-fun BinomialQueue.delete_max@tok () Term)

; </end encoding let delete_max>


; encoding sigelt val BinomialQueue.merge


; <Skipped val BinomialQueue.merge/>

(push) ;; push{2

; Starting query at BinomialQueue.fst(301,15-303,14)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: BinomialQueue.priq) (q: BinomialQueue.priq).
;   (*  - Could not prove post-condition
; *)
;   BinomialQueue.is_binomial_queue 1 p /\ BinomialQueue.is_binomial_queue 1 q /\
;   (Leaf? BinomialQueue.Leaf \/ BinomialQueue.is_pow2heap 1 BinomialQueue.Leaf) /\
;   (forall (pure_result: BinomialQueue.forest).
;       BinomialQueue.is_binomial_queue 1 pure_result ==>
;       BinomialQueue.join 1 p q BinomialQueue.Leaf == pure_result ==>
;       Prims.auto_squash (BinomialQueue.is_priq (BinomialQueue.mk_compact (BinomialQueue.join 1
;                     p
;                     q
;                     BinomialQueue.Leaf))))


; Context: While encoding a query
; While typechecking the top-level declaration `let merge`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.priq)
(HasType @x1
BinomialQueue.priq))

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(302,10-302,14)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(302,10-302,14)
(or label_1

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(302,10-302,14)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(302,10-302,14)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x0)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(302,10-302,14)
(or label_2

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(302,10-302,14)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(302,10-302,14)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x1)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(302,10-302,14)
(or label_3

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(302,10-302,14)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(302,10-302,14)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(302,10-302,14)
(BinomialQueue.is_pow2heap (BoxInt 1)
BinomialQueue.Leaf@tok)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(302,10-302,14)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(302,10-302,14)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(302,10-302,14)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x2)
)


;; def=BinomialQueue.fst(302,6-302,25); use=BinomialQueue.fst(302,6-302,25)
(= (BinomialQueue.join (BoxInt 1)
@x0
@x1
BinomialQueue.Leaf@tok)
@x2)
)

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(303,2-303,14)
(or label_4

;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(303,2-303,14)
(Valid 
;; def=BinomialQueue.fst(88,20-88,29); use=BinomialQueue.fst(303,2-303,14)
(BinomialQueue.is_priq (BinomialQueue.mk_compact (BinomialQueue.join (BoxInt 1)
@x0
@x1
BinomialQueue.Leaf@tok)))
)
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.merge, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented, @query, constructor_distinct_BinomialQueue.Leaf, disc_equation_BinomialQueue.Leaf, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.is_priq, equation_BinomialQueue.priq, equation_Prims.pos, int_typing, lemma_BinomialQueue.mk_compact_correctness, lemma_BinomialQueue.mk_compact_preserves_binomial_queue, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let merge


; <Start encoding let merge>

(declare-fun BinomialQueue.merge (Term Term) Term)
;;;;;;;;;;;;;;;;p: priq -> q: priq -> priq
(declare-fun Tm_arrow_350646f2797e209087da79cea0b9218f () Term)
(declare-fun BinomialQueue.merge@tok () Term)

; </end encoding let merge>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; Starting query at BinomialQueue.fsti(54,0-57,1)

(declare-fun BinomialQueue.ms () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! (HasType BinomialQueue.ms
Tm_type)
:named function_token_typing_BinomialQueue.ms))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! (HasType BinomialQueue.ms
Tm_type)
:named typing_BinomialQueue.ms))
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: key_t -> Prims.nat
(declare-fun Tm_arrow_e979b9dc6be45dd92c9914c44a112e40 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_e979b9dc6be45dd92c9914c44a112e40
Tm_type)
:named kinding_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(55,13-55,25); use=BinomialQueue.fsti(55,13-55,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
:qid BinomialQueue_pre_typing_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))

:named BinomialQueue_pre_typing_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(55,13-55,25); use=BinomialQueue.fsti(55,13-55,25)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
(and 
;; def=BinomialQueue.fsti(55,13-55,25); use=BinomialQueue.fsti(55,13-55,25)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.key_t)
(HasType (ApplyTT @x0
@x1)
Prims.nat))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
:qid BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))

:named BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))

; Encoding query formula : forall (ms_count: (_: BinomialQueue.key_t -> Prims.nat)).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq BinomialQueue.key_t


; Context: While encoding a query
; While typechecking the top-level declaration `type BinomialQueue.ms`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,19-56,24)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,19-56,24)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,19-56,24)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.ms, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type BinomialQueue.ms


; <Start encoding type BinomialQueue.ms>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BinomialQueue.ms () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun BinomialQueue.Mkms (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BinomialQueue.Mkms_ms_count (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BinomialQueue.Mkms_ms_elems (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: BinomialQueue.Mkms
(declare-fun BinomialQueue.Mkms@tok () Term)
;;;;;;;;;;;;;;;;_: key_t -> Prims.nat
(declare-fun Tm_arrow_e979b9dc6be45dd92c9914c44a112e40 () Term)

;;;;;;;;;;;;;;;;ms_count: (_: key_t -> Prims.nat) -> ms_elems: FStar.Set.set key_t -> ms
(declare-fun Tm_arrow_6cd27eeb8338bebb0e99fa73eb103372 () Term)

; <start constructor BinomialQueue.ms>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BinomialQueue.ms ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
BinomialQueue.ms)))

; </end constructor BinomialQueue.ms>


; <start constructor BinomialQueue.Mkms>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BinomialQueue.Mkms ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
288)
(= __@x0
(BinomialQueue.Mkms (BinomialQueue.Mkms_ms_count __@x0)
(BinomialQueue.Mkms_ms_elems __@x0)))))

; </end constructor BinomialQueue.Mkms>


; </end encoding type BinomialQueue.ms>


; encoding sigelt val BinomialQueue.__proj__Mkms__item__ms_count


; <Start encoding val BinomialQueue.__proj__Mkms__item__ms_count>

(declare-fun BinomialQueue.__proj__Mkms__item__ms_count (Term) Term)

;;;;;;;;;;;;;;;;projectee: ms -> _: key_t -> Prims.nat
(declare-fun Tm_arrow_ff32f7ccb320a566131f772799c7fc50 () Term)
(declare-fun BinomialQueue.__proj__Mkms__item__ms_count@tok () Term)


; </end encoding val BinomialQueue.__proj__Mkms__item__ms_count>


; encoding sigelt let __proj__Mkms__item__ms_count


; <Skipped let __proj__Mkms__item__ms_count/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.set; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(22,4-22,7); use=FStar.Set.fsti(22,4-22,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Set.set @x0)
Tm_type))
 

:pattern ((FStar.Set.set @x0))
:qid typing_FStar.Set.set))

:named typing_FStar.Set.set))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(54,5-54,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(BinomialQueue.Mkms @x1
@x2)
BinomialQueue.ms)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(BinomialQueue.Mkms @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(BinomialQueue.Mkms @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(BinomialQueue.Mkms @x1
@x2)
BinomialQueue.ms))
:qid subterm_ordering_BinomialQueue.Mkms))

:named subterm_ordering_BinomialQueue.Mkms))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(54,5-54,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.Mkms_ms_elems (BinomialQueue.Mkms @x0
@x1))
@x1)
 

:pattern ((BinomialQueue.Mkms @x0
@x1))
:qid projection_inverse_BinomialQueue.Mkms_ms_elems))

:named projection_inverse_BinomialQueue.Mkms_ms_elems))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(54,5-54,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.Mkms_ms_count (BinomialQueue.Mkms @x0
@x1))
@x0)
 

:pattern ((BinomialQueue.Mkms @x0
@x1))
:qid projection_inverse_BinomialQueue.Mkms_ms_count))

:named projection_inverse_BinomialQueue.Mkms_ms_count))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! (HasType Tm_arrow_e979b9dc6be45dd92c9914c44a112e40
Tm_type)
:named kinding_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! (HasType BinomialQueue.ms
Tm_type)
:named kinding_BinomialQueue.ms@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(54,5-54,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
BinomialQueue.ms)
(is-BinomialQueue.Mkms @x1))
 

:pattern ((HasTypeFuel @u0
@x1
BinomialQueue.ms))
:qid fuel_guarded_inversion_BinomialQueue.ms))

:named fuel_guarded_inversion_BinomialQueue.ms))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(54,5-54,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
(HasTypeFuel @u0
@x2
(FStar.Set.set BinomialQueue.key_t)))
(HasTypeFuel @u0
(BinomialQueue.Mkms @x1
@x2)
BinomialQueue.ms))
 

:pattern ((HasTypeFuel @u0
(BinomialQueue.Mkms @x1
@x2)
BinomialQueue.ms))
:qid data_typing_intro_BinomialQueue.Mkms@tok))

:named data_typing_intro_BinomialQueue.Mkms@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(54,5-54,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(BinomialQueue.Mkms @x1
@x2)
BinomialQueue.ms)
(and (HasTypeFuel @u0
@x1
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
(HasTypeFuel @u0
@x2
(FStar.Set.set BinomialQueue.key_t))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(BinomialQueue.Mkms @x1
@x2)
BinomialQueue.ms))
:qid data_elim_BinomialQueue.Mkms))

:named data_elim_BinomialQueue.Mkms))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! (= 280
(Term_constr_id BinomialQueue.ms))
:named constructor_distinct_BinomialQueue.ms))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(54,5-54,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= 288
(Term_constr_id (BinomialQueue.Mkms @x0
@x1)))
 

:pattern ((BinomialQueue.Mkms @x0
@x1))
:qid constructor_distinct_BinomialQueue.Mkms))

:named constructor_distinct_BinomialQueue.Mkms))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(54,5-54,7)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
BinomialQueue.ms)
(= BinomialQueue.ms
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
BinomialQueue.ms))
:qid BinomialQueue_pretyping_2841d97f95e403f3d9b78b0c5aec5c0a))

:named BinomialQueue_pretyping_2841d97f95e403f3d9b78b0c5aec5c0a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(55,13-55,25); use=BinomialQueue.fsti(55,13-55,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
:qid BinomialQueue_pre_typing_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))

:named BinomialQueue_pre_typing_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40
;;; Fact-ids: Name BinomialQueue.ms; Namespace BinomialQueue; Name BinomialQueue.Mkms; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(55,13-55,25); use=BinomialQueue.fsti(55,13-55,25)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
(and 
;; def=BinomialQueue.fsti(55,13-55,25); use=BinomialQueue.fsti(55,13-55,25)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.key_t)
(HasType (ApplyTT @x0
@x1)
Prims.nat))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
:qid BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))

:named BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
(push) ;; push{2

; Starting query at BinomialQueue.fsti(56,2-56,10)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (projectee: BinomialQueue.ms).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq BinomialQueue.key_t


; Context: While encoding a query
; While typechecking the top-level declaration `val BinomialQueue.__proj__Mkms__item__ms_elems`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fsti(56,2-56,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.ms)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,19-56,24)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,2-56,10)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,2-56,10)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.__proj__Mkms__item__ms_elems, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val BinomialQueue.__proj__Mkms__item__ms_elems


; <Start encoding val BinomialQueue.__proj__Mkms__item__ms_elems>

(declare-fun BinomialQueue.__proj__Mkms__item__ms_elems (Term) Term)
;;;;;;;;;;;;;;;;projectee: ms -> FStar.Set.set key_t
(declare-fun Tm_arrow_c82348786676d7f8c6f02fc5068ddb04 () Term)
(declare-fun BinomialQueue.__proj__Mkms__item__ms_elems@tok () Term)

; </end encoding val BinomialQueue.__proj__Mkms__item__ms_elems>

(push) ;; push{2

; Starting query at BinomialQueue.fsti(56,2-56,10)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: BinomialQueue.ms).
;   (forall (proj_ret: BinomialQueue.ms).
;       (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;       Prims.hasEq BinomialQueue.key_t) /\
;   (forall (b: (_: BinomialQueue.key_t -> Prims.nat)) (b: FStar.Set.set BinomialQueue.key_t).
;       projectee == BinomialQueue.Mkms b b ==> Prims.hasEq BinomialQueue.key_t)


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Mkms__item__ms_elems`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.ms)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fsti(56,2-56,10)
(and (forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.ms)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,19-56,24)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,2-56,10)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,2-56,10)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.1))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fsti(56,2-56,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fsti(56,2-56,10)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Set.set BinomialQueue.key_t))

;; def=BinomialQueue.fsti(54,5-54,7); use=BinomialQueue.fsti(56,2-56,10)
(= @x0
(BinomialQueue.Mkms @x1
@x2))
)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,19-56,24)
(or label_2

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,2-56,10)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(56,2-56,10)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.__proj__Mkms__item__ms_elems, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Mkms__item__ms_elems


; <Skipped let __proj__Mkms__item__ms_elems/>

(push) ;; push{2

; Starting query at BinomialQueue.fsti(59,0-62,1)

(declare-fun label_1 () Bool)

; Encoding query formula : Prims.hasEq BinomialQueue.key_t


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let ms_empty`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(61,13-61,20)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(61,13-61,20)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(61,13-61,20)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.ms_empty, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let ms_empty


; <Start encoding let ms_empty>

(declare-fun BinomialQueue.ms_empty (Dummy_sort) Term)

(declare-fun Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c () Term)

; </end encoding let ms_empty>

;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
(push) ;; push{2

; Starting query at BinomialQueue.fsti(65,2-66,27)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


(declare-fun Tm_abs_f4b50fc4dfea96852c92f014d280cd82 (Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_f4b50fc4dfea96852c92f014d280cd82
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(65,24-65,47); use=BinomialQueue.fsti(65,24-65,47)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x0)
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
 

:pattern ((Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x0))
:qid typing_Tm_abs_f4b50fc4dfea96852c92f014d280cd82))

:named typing_Tm_abs_f4b50fc4dfea96852c92f014d280cd82))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(65,24-65,47); use=BinomialQueue.fsti(65,24-65,47)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x1)
@x0)
(let ((@lb2 (Prims.op_Equality BinomialQueue.key_t
@x0
@x1)))
(ite (= @lb2
(BoxBool true))
(BoxInt 1)
(BoxInt 0))))
 

:pattern ((ApplyTT (Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x1)
@x0))
:qid interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82))

:named interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82))

; Encoding query formula : forall (x: BinomialQueue.key_t).
;   (*  - Could not prove post-condition
; *)
;   (forall (x': BinomialQueue.key_t).
;       (*  - Could not prove post-condition
; *) Prims.hasEq BinomialQueue.key_t) /\
;   (forall (any_result: (_: BinomialQueue.key_t -> Prims.nat)).
;       (fun x' ->
;           (match x' = x with
;             | true -> 1
;             | _ -> 0)
;           <:
;           Prims.nat) ==
;       any_result ==>
;       Prims.hasEq BinomialQueue.key_t)


; Context: While encoding a query
; While typechecking the top-level declaration `let ms_singleton`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.key_t)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fsti(65,2-66,27)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fsti(65,2-66,27)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.key_t)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(65,27-65,29)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(65,27-65,29)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(65,27-65,29)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fsti(65,2-66,27)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)

;; def=BinomialQueue.fsti(55,2-65,47); use=BinomialQueue.fsti(65,2-66,27)
(= (Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x0)
@x1)
)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(65,2-66,27)
(or label_2

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(65,2-66,27)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(65,2-66,27)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.ms_singleton, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let ms_singleton


; <Start encoding let ms_singleton>

(declare-fun BinomialQueue.ms_singleton (Term) Term)
;;;;;;;;;;;;;;;;x: key_t -> ms
(declare-fun Tm_arrow_74916f2b3637953f645bcf72a243d53f () Term)
(declare-fun BinomialQueue.ms_singleton@tok () Term)

(declare-fun Tm_abs_f4b50fc4dfea96852c92f014d280cd82 (Term) Term)

; </end encoding let ms_singleton>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_count; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(55,2-55,10); use=BinomialQueue.fsti(55,2-55,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.ms)
(HasType (BinomialQueue.__proj__Mkms__item__ms_count @x0)
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
 

:pattern ((BinomialQueue.__proj__Mkms__item__ms_count @x0))
:qid typing_BinomialQueue.__proj__Mkms__item__ms_count))

:named typing_BinomialQueue.__proj__Mkms__item__ms_count))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_count; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(55,2-55,10); use=BinomialQueue.fsti(55,2-55,10)
(forall ((@x0 Term))
 (! (= (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x0)
(BinomialQueue.__proj__Mkms__item__ms_count @x0))
 

:pattern ((ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x0))
:qid token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count))

:named token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_count; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(55,2-55,10); use=BinomialQueue.fsti(55,2-55,10)
(forall ((@x0 Term))
 (! (= (BinomialQueue.__proj__Mkms__item__ms_count @x0)
(BinomialQueue.Mkms_ms_count @x0))
 

:pattern ((BinomialQueue.__proj__Mkms__item__ms_count @x0))
:qid proj_equation_BinomialQueue.Mkms_ms_count))

:named proj_equation_BinomialQueue.Mkms_ms_count))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ff32f7ccb320a566131f772799c7fc50
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_count; Namespace BinomialQueue
(assert (! (HasType Tm_arrow_ff32f7ccb320a566131f772799c7fc50
Tm_type)
:named kinding_Tm_arrow_ff32f7ccb320a566131f772799c7fc50))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_count; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(55,2-55,10); use=BinomialQueue.fsti(55,2-55,10)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.__proj__Mkms__item__ms_count@tok
Tm_arrow_ff32f7ccb320a566131f772799c7fc50))

;; def=BinomialQueue.fsti(55,2-55,10); use=BinomialQueue.fsti(55,2-55,10)
(forall ((@x1 Term))
 (! (= (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x1)
(BinomialQueue.__proj__Mkms__item__ms_count @x1))
 

:pattern ((BinomialQueue.__proj__Mkms__item__ms_count @x1))
:qid function_token_typing_BinomialQueue.__proj__Mkms__item__ms_count.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.__proj__Mkms__item__ms_count@tok))
:qid function_token_typing_BinomialQueue.__proj__Mkms__item__ms_count))

:named function_token_typing_BinomialQueue.__proj__Mkms__item__ms_count))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_count; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-55,25); use=BinomialQueue.fsti(54,5-55,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ff32f7ccb320a566131f772799c7fc50)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ff32f7ccb320a566131f772799c7fc50))
:qid BinomialQueue_pre_typing_Tm_arrow_ff32f7ccb320a566131f772799c7fc50))

:named BinomialQueue_pre_typing_Tm_arrow_ff32f7ccb320a566131f772799c7fc50))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ff32f7ccb320a566131f772799c7fc50
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_count; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(54,5-55,25); use=BinomialQueue.fsti(54,5-55,25)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ff32f7ccb320a566131f772799c7fc50)
(and 
;; def=BinomialQueue.fsti(54,5-55,25); use=BinomialQueue.fsti(54,5-55,25)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.ms)
(HasType (ApplyTT @x0
@x1)
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_ff32f7ccb320a566131f772799c7fc50.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ff32f7ccb320a566131f772799c7fc50))
:qid BinomialQueue_interpretation_Tm_arrow_ff32f7ccb320a566131f772799c7fc50))

:named BinomialQueue_interpretation_Tm_arrow_ff32f7ccb320a566131f772799c7fc50))
(push) ;; push{2

; Starting query at BinomialQueue.fsti(70,2-71,47)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
BinomialQueue.__proj__Mkms__item__ms_count@tok))
:named @kick_partial_app_7b0d3906ae6c712bfe84b5a7bb19b2f9))





(declare-fun Tm_abs_015f65dc738b17ca923c21bdd897be70 (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_015f65dc738b17ca923c21bdd897be70
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(70,23-70,54); use=BinomialQueue.fsti(70,23-70,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_015f65dc738b17ca923c21bdd897be70 @x0
@x1)
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
 

:pattern ((Tm_abs_015f65dc738b17ca923c21bdd897be70 @x0
@x1))
:qid typing_Tm_abs_015f65dc738b17ca923c21bdd897be70))

:named typing_Tm_abs_015f65dc738b17ca923c21bdd897be70))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(70,23-70,54); use=BinomialQueue.fsti(70,23-70,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_015f65dc738b17ca923c21bdd897be70 @x1
@x2)
@x0)
(Prims.op_Addition (ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x1)
@x0)
(ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x2)
@x0)))
 

:pattern ((ApplyTT (Tm_abs_015f65dc738b17ca923c21bdd897be70 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70))

:named interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70))

; Encoding query formula : forall (ms1: BinomialQueue.ms) (ms2: BinomialQueue.ms).
;   (*  - Could not prove post-condition
; *)
;   (forall (x: BinomialQueue.key_t).
;       (*  - Could not prove post-condition
; *) ms1.ms_count x + ms2.ms_count x >= 0) /\
;   (forall (any_result: (_: BinomialQueue.key_t -> Prims.nat)).
;       (fun x -> ms1.ms_count x + ms2.ms_count x) == any_result ==> Prims.hasEq BinomialQueue.key_t)


; Context: While encoding a query
; While typechecking the top-level declaration `let ms_append`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.ms)
(HasType @x1
BinomialQueue.ms))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fsti(70,2-71,47)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fsti(70,2-71,47)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.key_t)

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fsti(70,23-70,54)
(or label_1

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fsti(70,23-70,54)
(>= (BoxInt_proj_0 (Prims.op_Addition (ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x0)
@x2)
(ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x1)
@x2)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fsti(70,2-71,47)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)

;; def=BinomialQueue.fsti(55,2-70,54); use=BinomialQueue.fsti(70,2-71,47)
(= (Tm_abs_015f65dc738b17ca923c21bdd897be70 @x0
@x1)
@x2)
)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(71,25-71,33)
(or label_2

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(71,25-71,33)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(71,25-71,33)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.ms_append, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, data_elim_BinomialQueue.Mkms, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_BinomialQueue.ms, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, primitive_Prims.op_Addition, proj_equation_BinomialQueue.Mkms_ms_count, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let ms_append


; <Start encoding let ms_append>

(declare-fun BinomialQueue.ms_append (Term Term) Term)
;;;;;;;;;;;;;;;;ms1: ms -> ms2: ms -> ms
(declare-fun Tm_arrow_db89216c436ebefc992e48bc1a7e9578 () Term)
(declare-fun BinomialQueue.ms_append@tok () Term)


(declare-fun Tm_abs_015f65dc738b17ca923c21bdd897be70 (Term Term) Term)

; </end encoding let ms_append>


; encoding sigelt let ms_cons


; <Start encoding let ms_cons>

(declare-fun BinomialQueue.ms_cons (Term Term) Term)
;;;;;;;;;;;;;;;;x: key_t -> ms: ms -> ms
(declare-fun Tm_arrow_4de828314aa90aef2dcb9631ea46be6e () Term)
(declare-fun BinomialQueue.ms_cons@tok () Term)

; </end encoding let ms_cons>

(push) ;; push{2

; Starting query at BinomialQueue.fsti(82,2-84,48)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (ms1: BinomialQueue.ms) (ms2: BinomialQueue.ms).
;   (*  - Could not prove post-condition
; *) Prims.hasEq BinomialQueue.key_t


; Context: While encoding a query
; While typechecking the top-level declaration `let permutation`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.ms)
(HasType @x1
BinomialQueue.ms))

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(82,14-82,22)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(82,14-82,22)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(82,14-82,22)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.permutation, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let permutation


; <Start encoding let permutation>

(declare-fun BinomialQueue.permutation (Term Term) Term)
;;;;;;;;;;;;;;;;ms1: ms -> ms2: ms -> Prims.logical
(declare-fun Tm_arrow_5a00c14061245cea909cb0dddb3e6ffa () Term)
(declare-fun BinomialQueue.permutation@tok () Term)





; </end encoding let permutation>

(push) ;; push{2

; Starting query at BinomialQueue.fst(308,2-312,46)

;;;;;;;;;;;;;;;;t : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_0 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_0
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_0
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_0))
(declare-fun Tm_refine_95a67844e296badc4dc8ab02e501ec63 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_95a67844e296badc4dc8ab02e501ec63
Tm_type)
:named refinement_kinding_Tm_refine_95a67844e296badc4dc8ab02e501ec63))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(307,22-312,46); use=BinomialQueue.fst(307,22-312,46)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_95a67844e296badc4dc8ab02e501ec63)
(and (HasTypeFuel @u0
@x1
BinomialQueue.tree)

;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(308,2-312,46)

;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(308,2-312,46)
(Valid 
;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(308,2-312,46)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x1
x_c1ab7496c060d1f2d977fd02b92d48e2_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_95a67844e296badc4dc8ab02e501ec63))
:qid refinement_interpretation_Tm_refine_95a67844e296badc4dc8ab02e501ec63))

:named refinement_interpretation_Tm_refine_95a67844e296badc4dc8ab02e501ec63))
;;;;;;;;;;;;;;;;haseq for Tm_refine_95a67844e296badc4dc8ab02e501ec63
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_95a67844e296badc4dc8ab02e501ec63))
(Valid (Prims.hasEq BinomialQueue.tree)))
:named haseqTm_refine_95a67844e296badc4dc8ab02e501ec63))
(declare-fun BinomialQueue.keys_of_tree (Term) Term)

;;;;;;;;;;;;;;;;t: tree{t << t} -> ms
(declare-fun Tm_arrow_341bdadb194bd73fb222f03c240a0494 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_341bdadb194bd73fb222f03c240a0494
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_341bdadb194bd73fb222f03c240a0494
Tm_type)
:named kinding_Tm_arrow_341bdadb194bd73fb222f03c240a0494))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(307,22-312,46); use=BinomialQueue.fst(307,22-312,46)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_341bdadb194bd73fb222f03c240a0494)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_341bdadb194bd73fb222f03c240a0494))
:qid BinomialQueue_pre_typing_Tm_arrow_341bdadb194bd73fb222f03c240a0494))

:named BinomialQueue_pre_typing_Tm_arrow_341bdadb194bd73fb222f03c240a0494))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_341bdadb194bd73fb222f03c240a0494
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(307,22-312,46); use=BinomialQueue.fst(307,22-312,46)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_341bdadb194bd73fb222f03c240a0494)
(and 
;; def=BinomialQueue.fst(307,22-312,46); use=BinomialQueue.fst(307,22-312,46)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_95a67844e296badc4dc8ab02e501ec63)
(HasType (ApplyTT @x0
@x1)
BinomialQueue.ms))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_341bdadb194bd73fb222f03c240a0494.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_341bdadb194bd73fb222f03c240a0494))
:qid BinomialQueue_interpretation_Tm_arrow_341bdadb194bd73fb222f03c240a0494))

:named BinomialQueue_interpretation_Tm_arrow_341bdadb194bd73fb222f03c240a0494))
(declare-fun BinomialQueue.keys_of_tree@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@x0 Term))
 (! (= (ApplyTT BinomialQueue.keys_of_tree@tok
@x0)
(BinomialQueue.keys_of_tree @x0))
 

:pattern ((ApplyTT BinomialQueue.keys_of_tree@tok
@x0))
:qid token_correspondence_BinomialQueue.keys_of_tree))

:named token_correspondence_BinomialQueue.keys_of_tree))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.keys_of_tree@tok
Tm_arrow_341bdadb194bd73fb222f03c240a0494))

;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@x1 Term))
 (! (= (ApplyTT BinomialQueue.keys_of_tree@tok
@x1)
(BinomialQueue.keys_of_tree @x1))
 

:pattern ((BinomialQueue.keys_of_tree @x1))
:qid function_token_typing_BinomialQueue.keys_of_tree.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.keys_of_tree@tok))
:qid function_token_typing_BinomialQueue.keys_of_tree))

:named function_token_typing_BinomialQueue.keys_of_tree))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_95a67844e296badc4dc8ab02e501ec63)
(HasType (BinomialQueue.keys_of_tree @x0)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.keys_of_tree @x0))
:qid typing_BinomialQueue.keys_of_tree))

:named typing_BinomialQueue.keys_of_tree))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post BinomialQueue.ms).
;   (forall (x: BinomialQueue.ms). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Leaf? t) /\ ~(Internal? t) ==> Prims.l_False) /\
;   (~(Leaf? t) ==>
;     (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t) (b: BinomialQueue.tree).
;         t == BinomialQueue.Internal b b b ==>
;         b << t /\
;         (forall (any_result: BinomialQueue.tree).
;             b == any_result ==>
;             (forall (any_result: BinomialQueue.ms).
;                 BinomialQueue.keys_of_tree b == any_result ==> b << t))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec keys_of_tree`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.ms))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(308,2-312,46)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(308,2-312,46)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(308,2-312,46)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(308,2-312,46)
(and (implies 
;; def=BinomialQueue.fst(307,22-307,23); use=BinomialQueue.fst(308,8-308,9)
(and 
;; def=BinomialQueue.fst(307,22-307,23); use=BinomialQueue.fst(308,8-308,9)
(not 
;; def=BinomialQueue.fst(307,22-307,23); use=BinomialQueue.fst(308,8-308,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_0))
)


;; def=BinomialQueue.fst(307,22-307,23); use=BinomialQueue.fst(308,8-308,9)
(not 
;; def=BinomialQueue.fst(307,22-307,23); use=BinomialQueue.fst(308,8-308,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal x_c1ab7496c060d1f2d977fd02b92d48e2_0))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(308,2-312,46)
(not 
;; def=BinomialQueue.fst(307,22-307,23); use=BinomialQueue.fst(308,8-308,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_0))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(308,2-312,46)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(308,2-312,46)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(308,2-312,46)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(307,22-310,25); use=BinomialQueue.fst(308,8-310,25)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_0
(BinomialQueue.Internal @x1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(308,2-312,46)
(and 
;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(311,28-311,32)
(or label_2

;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(311,28-311,32)
(Valid 
;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(311,28-311,32)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x1
x_c1ab7496c060d1f2d977fd02b92d48e2_0)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(308,2-312,46)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(307,22-310,17); use=BinomialQueue.fst(308,2-312,46)
(= @x1
@x4)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(308,2-312,46)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.ms)

;; def=BinomialQueue.fsti(69,15-69,18); use=BinomialQueue.fst(308,2-312,46)
(= (BinomialQueue.keys_of_tree @x1)
@x5)
)

;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(312,39-312,44)
(or label_3

;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(312,39-312,44)
(Valid 
;; def=BinomialQueue.fst(308,2-312,46); use=BinomialQueue.fst(312,39-312,44)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_0)
)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.keys_of_tree, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_0, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, equality_tok_BinomialQueue.Leaf@tok, fuel_guarded_inversion_BinomialQueue.tree, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BoxBool_proj_0, subterm_ordering_BinomialQueue.Internal, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec keys_of_tree


; <Start encoding let rec keys_of_tree>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.keys_of_tree.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.keys_of_tree.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.keys_of_tree (Term) Term)
(declare-fun BinomialQueue.keys_of_tree@tok () Term)
;;;;;;;;;;;;;;;;t: tree -> ms
(declare-fun Tm_arrow_8d314e79e77f9ce635afd161cc9062b8 () Term)

; </end encoding let rec keys_of_tree>

(push) ;; push{2

; Starting query at BinomialQueue.fst(315,2-317,51)

;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_0 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_0
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_0
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_0))
(declare-fun Tm_refine_607857699f1f2fc49087b81aa5df485c () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_607857699f1f2fc49087b81aa5df485c
Tm_type)
:named refinement_kinding_Tm_refine_607857699f1f2fc49087b81aa5df485c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(314,14-317,51); use=BinomialQueue.fst(314,14-317,51)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_607857699f1f2fc49087b81aa5df485c)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(315,2-317,51); use=BinomialQueue.fst(315,2-317,51)

;; def=BinomialQueue.fst(315,2-317,51); use=BinomialQueue.fst(315,2-317,51)
(Valid 
;; def=BinomialQueue.fst(315,2-317,51); use=BinomialQueue.fst(315,2-317,51)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_607857699f1f2fc49087b81aa5df485c))
:qid refinement_interpretation_Tm_refine_607857699f1f2fc49087b81aa5df485c))

:named refinement_interpretation_Tm_refine_607857699f1f2fc49087b81aa5df485c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_607857699f1f2fc49087b81aa5df485c
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_607857699f1f2fc49087b81aa5df485c))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_607857699f1f2fc49087b81aa5df485c))
(declare-fun BinomialQueue.keys (Term) Term)

;;;;;;;;;;;;;;;;q: forest{q << q} -> ms
(declare-fun Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b
Tm_type)
:named kinding_Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(314,14-317,51); use=BinomialQueue.fst(314,14-317,51)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b))
:qid BinomialQueue_pre_typing_Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b))

:named BinomialQueue_pre_typing_Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(314,14-317,51); use=BinomialQueue.fst(314,14-317,51)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b)
(and 
;; def=BinomialQueue.fst(314,14-317,51); use=BinomialQueue.fst(314,14-317,51)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_607857699f1f2fc49087b81aa5df485c)
(HasType (ApplyTT @x0
@x1)
BinomialQueue.ms))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b))
:qid BinomialQueue_interpretation_Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b))

:named BinomialQueue_interpretation_Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b))
(declare-fun BinomialQueue.keys@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@x0 Term))
 (! (= (ApplyTT BinomialQueue.keys@tok
@x0)
(BinomialQueue.keys @x0))
 

:pattern ((ApplyTT BinomialQueue.keys@tok
@x0))
:qid token_correspondence_BinomialQueue.keys))

:named token_correspondence_BinomialQueue.keys))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType BinomialQueue.keys@tok
Tm_arrow_ce39c28a41a52fded95d9b1ab688f62b))

;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@x1 Term))
 (! (= (ApplyTT BinomialQueue.keys@tok
@x1)
(BinomialQueue.keys @x1))
 

:pattern ((BinomialQueue.keys @x1))
:qid function_token_typing_BinomialQueue.keys.1))
)
 

:pattern ((ApplyTT @x0
BinomialQueue.keys@tok))
:qid function_token_typing_BinomialQueue.keys))

:named function_token_typing_BinomialQueue.keys))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_607857699f1f2fc49087b81aa5df485c)
(HasType (BinomialQueue.keys @x0)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.keys @x0))
:qid typing_BinomialQueue.keys))

:named typing_BinomialQueue.keys))
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post BinomialQueue.ms).
;   (forall (x: BinomialQueue.ms). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Nil? q) /\ ~(Cons? q) ==> Prims.l_False) /\
;   (~(Nil? q) ==>
;     (forall (b: BinomialQueue.tree) (b: Prims.list BinomialQueue.tree). q == b :: b ==> b << q))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec keys`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post BinomialQueue.ms))

;; def=Prims.fst(402,27-402,88); use=BinomialQueue.fst(315,2-317,51)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(315,2-317,51)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(315,2-317,51)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(315,2-317,51)
(and (implies 
;; def=BinomialQueue.fst(314,14-314,15); use=BinomialQueue.fst(315,8-315,9)
(and 
;; def=BinomialQueue.fst(314,14-314,15); use=BinomialQueue.fst(315,8-315,9)
(not 
;; def=BinomialQueue.fst(314,14-314,15); use=BinomialQueue.fst(315,8-315,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=BinomialQueue.fst(314,14-314,15); use=BinomialQueue.fst(315,8-315,9)
(not 
;; def=BinomialQueue.fst(314,14-314,15); use=BinomialQueue.fst(315,8-315,9)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(315,2-317,51)
(not 
;; def=BinomialQueue.fst(314,14-314,15); use=BinomialQueue.fst(315,8-315,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(315,2-317,51)
(forall ((@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(315,2-317,51)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(314,14-317,10); use=BinomialQueue.fst(315,8-317,10)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Cons BinomialQueue.tree
@x1
@x2))
)

;; def=BinomialQueue.fst(315,2-317,51); use=BinomialQueue.fst(317,48-317,50)
(or label_2

;; def=BinomialQueue.fst(315,2-317,51); use=BinomialQueue.fst(317,48-317,50)
(Valid 
;; def=BinomialQueue.fst(315,2-317,51); use=BinomialQueue.fst(317,48-317,50)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_0)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.keys, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_0, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec keys


; <Start encoding let rec keys>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun BinomialQueue.keys.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun BinomialQueue.keys.fuel_instrumented_token () Term)
(declare-fun BinomialQueue.keys (Term) Term)
(declare-fun BinomialQueue.keys@tok () Term)
;;;;;;;;;;;;;;;;q: forest -> ms
(declare-fun Tm_arrow_a83913b6174ec5d0c4a6a2f4a40303c7 () Term)

; </end encoding let rec keys>

;;;;;;;;;;;;;;;;typing_Tm_abs_f4b50fc4dfea96852c92f014d280cd82
;;; Fact-ids: Name BinomialQueue.ms_singleton; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(65,24-65,47); use=BinomialQueue.fsti(65,24-65,47)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x0)
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
 

:pattern ((Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x0))
:qid typing_Tm_abs_f4b50fc4dfea96852c92f014d280cd82))

:named typing_Tm_abs_f4b50fc4dfea96852c92f014d280cd82))
;;;;;;;;;;;;;;;;typing_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c
;;; Fact-ids: Name BinomialQueue.ms_empty; Namespace BinomialQueue
(assert (! (HasType Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
:named typing_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c))
;;;;;;;;;;;;;;;;typing_Tm_abs_015f65dc738b17ca923c21bdd897be70
;;; Fact-ids: Name BinomialQueue.ms_append; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(70,23-70,54); use=BinomialQueue.fsti(70,23-70,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_015f65dc738b17ca923c21bdd897be70 @x0
@x1)
Tm_arrow_e979b9dc6be45dd92c9914c44a112e40)
 

:pattern ((Tm_abs_015f65dc738b17ca923c21bdd897be70 @x0
@x1))
:qid typing_Tm_abs_015f65dc738b17ca923c21bdd897be70))

:named typing_Tm_abs_015f65dc738b17ca923c21bdd897be70))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.union; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(40,4-40,9); use=FStar.Set.fsti(40,4-40,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.union @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.union @x0
@x1
@x2))
:qid typing_FStar.Set.union))

:named typing_FStar.Set.union))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.singleton; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(37,4-37,13); use=FStar.Set.fsti(37,4-37,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0))
(HasType (FStar.Set.singleton @x0
@x1)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.singleton @x0
@x1))
:qid typing_FStar.Set.singleton))

:named typing_FStar.Set.singleton))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.mem; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(30,4-30,7); use=FStar.Set.fsti(30,4-30,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.mem @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Set.mem @x0
@x1
@x2))
:qid typing_FStar.Set.mem))

:named typing_FStar.Set.mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.equal; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(25,4-25,9); use=FStar.Set.fsti(25,4-25,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.equal @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid typing_FStar.Set.equal))

:named typing_FStar.Set.equal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.empty; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(34,4-34,9); use=FStar.Set.fsti(34,4-34,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Set.empty @x0)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.empty @x0))
:qid typing_FStar.Set.empty))

:named typing_FStar.Set.empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.permutation; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(81,4-81,15); use=BinomialQueue.fsti(81,4-81,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.ms)
(HasType @x1
BinomialQueue.ms))
(HasType (BinomialQueue.permutation @x0
@x1)
Prims.logical))
 

:pattern ((BinomialQueue.permutation @x0
@x1))
:qid typing_BinomialQueue.permutation))

:named typing_BinomialQueue.permutation))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.ms_singleton; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(64,4-64,16); use=BinomialQueue.fsti(64,4-64,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.key_t)
(HasType (BinomialQueue.ms_singleton @x0)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.ms_singleton @x0))
:qid typing_BinomialQueue.ms_singleton))

:named typing_BinomialQueue.ms_singleton))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.ms_empty; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(59,4-59,12); use=BinomialQueue.fsti(59,4-59,12)
(forall ((@u0 Dummy_sort))
 (! (HasType (BinomialQueue.ms_empty @u0)
BinomialQueue.ms)
 

:pattern ((BinomialQueue.ms_empty @u0))
:qid typing_BinomialQueue.ms_empty))

:named typing_BinomialQueue.ms_empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.ms_cons; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(74,4-74,11); use=BinomialQueue.fsti(74,4-74,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.key_t)
(HasType @x1
BinomialQueue.ms))
(HasType (BinomialQueue.ms_cons @x0
@x1)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.ms_cons @x0
@x1))
:qid typing_BinomialQueue.ms_cons))

:named typing_BinomialQueue.ms_cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.ms_append; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(69,4-69,13); use=BinomialQueue.fsti(69,4-69,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.ms)
(HasType @x1
BinomialQueue.ms))
(HasType (BinomialQueue.ms_append @x0
@x1)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.ms_append @x0
@x1))
:qid typing_BinomialQueue.ms_append))

:named typing_BinomialQueue.ms_append))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.keys_of_tree; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.tree)
(HasType (BinomialQueue.keys_of_tree @x0)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.keys_of_tree @x0))
:qid typing_BinomialQueue.keys_of_tree))

:named typing_BinomialQueue.keys_of_tree))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_elems; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(56,2-56,10); use=BinomialQueue.fsti(56,2-56,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.ms)
(HasType (BinomialQueue.__proj__Mkms__item__ms_elems @x0)
(FStar.Set.set BinomialQueue.key_t)))
 

:pattern ((BinomialQueue.__proj__Mkms__item__ms_elems @x0))
:qid typing_BinomialQueue.__proj__Mkms__item__ms_elems))

:named typing_BinomialQueue.__proj__Mkms__item__ms_elems))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.keys_of_tree; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.tree)
(HasType (BinomialQueue.keys_of_tree.fuel_instrumented @u0
@x1)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.keys_of_tree.fuel_instrumented @u0
@x1))
:qid token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented))

:named token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name BinomialQueue.__proj__Mkms__item__ms_elems; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(56,2-56,10); use=BinomialQueue.fsti(56,2-56,10)
(forall ((@x0 Term))
 (! (= (BinomialQueue.__proj__Mkms__item__ms_elems @x0)
(BinomialQueue.Mkms_ms_elems @x0))
 

:pattern ((BinomialQueue.__proj__Mkms__item__ms_elems @x0))
:qid proj_equation_BinomialQueue.Mkms_ms_elems))

:named proj_equation_BinomialQueue.Mkms_ms_elems))
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! 
;; def=Prims.fst(528,4-528,13); use=Prims.fst(528,4-528,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_BarBar @x0
@x1)
(BoxBool (or (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_BarBar @x0
@x1))
:qid primitive_Prims.op_BarBar))

:named primitive_Prims.op_BarBar))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_union
;;; Fact-ids: Name FStar.Set.mem_union; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0))
(HasType @x3
(FStar.Set.set @x0)))

;; def=FStar.Set.fsti(72,12-72,58); use=FStar.Set.fsti(72,12-72,58)
(= (FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3))
(Prims.op_BarBar (FStar.Set.mem @x0
@x1
@x2)
(FStar.Set.mem @x0
@x1
@x3)))
)
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3)))
:qid lemma_FStar.Set.mem_union))
:named lemma_FStar.Set.mem_union))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_singleton
;;; Fact-ids: Name FStar.Set.mem_singleton; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
@x0))

;; def=FStar.Set.fsti(67,12-67,41); use=FStar.Set.fsti(67,12-67,41)
(= (FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1))
(Prims.op_Equality @x0
@x1
@x2))
)
 

:pattern ((FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1)))
:qid lemma_FStar.Set.mem_singleton))
:named lemma_FStar.Set.mem_singleton))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_empty
;;; Fact-ids: Name FStar.Set.mem_empty; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0))
(not (BoxBool_proj_0 (FStar.Set.mem @x0
@x1
(FStar.Set.empty @x0)))))
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.empty @x0)))
:qid lemma_FStar.Set.mem_empty))
:named lemma_FStar.Set.mem_empty))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_refl
;;; Fact-ids: Name FStar.Set.lemma_equal_refl; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(111,14-111,24); use=FStar.Set.fsti(111,14-111,24)
(= @x1
@x2)
)

;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(Valid 
;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_refl))
:named lemma_FStar.Set.lemma_equal_refl))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_intro
;;; Fact-ids: Name FStar.Set.lemma_equal_intro; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(101,15-101,46); use=FStar.Set.fsti(101,15-101,46)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=FStar.Set.fsti(101,26-101,45); use=FStar.Set.fsti(101,26-101,45)
(= (FStar.Set.mem @x0
@x3
@x1)
(FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.lemma_equal_intro.1))
)

;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(Valid 
;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_intro))
:named lemma_FStar.Set.lemma_equal_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_elim
;;; Fact-ids: Name FStar.Set.lemma_equal_elim; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(Valid 
;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)

;; def=FStar.Set.fsti(107,14-107,24); use=FStar.Set.fsti(107,14-107,24)
(= @x1
@x2)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_elim))
:named lemma_FStar.Set.lemma_equal_elim))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82
;;; Fact-ids: Name BinomialQueue.ms_singleton; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(65,24-65,47); use=BinomialQueue.fsti(65,24-65,47)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x1)
@x0)
(let ((@lb2 (Prims.op_Equality BinomialQueue.key_t
@x0
@x1)))
(ite (= @lb2
(BoxBool true))
(BoxInt 1)
(BoxInt 0))))
 

:pattern ((ApplyTT (Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x1)
@x0))
:qid interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82))

:named interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c
;;; Fact-ids: Name BinomialQueue.ms_empty; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(60,23-60,24); use=BinomialQueue.fsti(60,23-60,24)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c
@x0)
(BoxInt 0))
 

:pattern ((ApplyTT Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c
@x0))
:qid interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c))

:named interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70
;;; Fact-ids: Name BinomialQueue.ms_append; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(70,23-70,54); use=BinomialQueue.fsti(70,23-70,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_015f65dc738b17ca923c21bdd897be70 @x1
@x2)
@x0)
(Prims.op_Addition (ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x1)
@x0)
(ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x2)
@x0)))
 

:pattern ((ApplyTT (Tm_abs_015f65dc738b17ca923c21bdd897be70 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70))

:named interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.keys_of_tree
;;; Fact-ids: Name BinomialQueue.keys_of_tree; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.tree)
(= (BinomialQueue.keys_of_tree.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (is-BinomialQueue.Leaf @lb2)
(BinomialQueue.ms_empty Dummy_value)
(ite (is-BinomialQueue.Internal @lb2)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree.fuel_instrumented @u0
(BinomialQueue.Internal__0 @lb2))
(BinomialQueue.ms_cons (BinomialQueue.Internal__1 @lb2)
(BinomialQueue.keys_of_tree.fuel_instrumented @u0
(BinomialQueue.Internal__2 @lb2))))
Tm_unit)))))
 :weight 0


:pattern ((BinomialQueue.keys_of_tree.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.permutation
;;; Fact-ids: Name BinomialQueue.permutation; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(81,4-81,15); use=BinomialQueue.fsti(81,4-81,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (BinomialQueue.permutation @x0
@x1))

;; def=BinomialQueue.fsti(82,2-84,48); use=BinomialQueue.fsti(82,2-84,48)
(and 
;; def=BinomialQueue.fsti(82,2-82,35); use=BinomialQueue.fsti(82,2-82,35)
(Valid 
;; def=BinomialQueue.fsti(82,2-82,35); use=BinomialQueue.fsti(82,2-82,35)
(FStar.Set.equal BinomialQueue.key_t
(BinomialQueue.__proj__Mkms__item__ms_elems @x0)
(BinomialQueue.__proj__Mkms__item__ms_elems @x1))
)


;; def=BinomialQueue.fsti(83,2-84,48); use=BinomialQueue.fsti(83,2-84,48)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.key_t)

;; def=BinomialQueue.fsti(84,15-84,47); use=BinomialQueue.fsti(84,15-84,47)
(= (ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x0)
@x2)
(ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x1)
@x2))
)
 

:pattern ((ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x0)
@x2))

:pattern ((ApplyTT (ApplyTT BinomialQueue.__proj__Mkms__item__ms_count@tok
@x1)
@x2))
:qid equation_BinomialQueue.permutation.1))
)
)
 

:pattern ((BinomialQueue.permutation @x0
@x1))
:qid equation_BinomialQueue.permutation))

:named equation_BinomialQueue.permutation))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.ms_singleton
;;; Fact-ids: Name BinomialQueue.ms_singleton; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(64,4-64,16); use=BinomialQueue.fsti(64,4-64,16)
(forall ((@x0 Term))
 (! (= (BinomialQueue.ms_singleton @x0)
(BinomialQueue.Mkms (Tm_abs_f4b50fc4dfea96852c92f014d280cd82 @x0)
(FStar.Set.singleton BinomialQueue.key_t
@x0)))
 

:pattern ((BinomialQueue.ms_singleton @x0))
:qid equation_BinomialQueue.ms_singleton))

:named equation_BinomialQueue.ms_singleton))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.ms_empty
;;; Fact-ids: Name BinomialQueue.ms_empty; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(59,4-59,12); use=BinomialQueue.fsti(59,4-59,12)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=BinomialQueue.fsti(59,4-59,12); use=BinomialQueue.fsti(59,4-59,12)
(BinomialQueue.ms_empty @u0)

(BinomialQueue.Mkms Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c
(FStar.Set.empty BinomialQueue.key_t)))
 

:pattern (
;; def=BinomialQueue.fsti(59,4-59,12); use=BinomialQueue.fsti(59,4-59,12)
(BinomialQueue.ms_empty @u0)
)
:qid equation_BinomialQueue.ms_empty))

:named equation_BinomialQueue.ms_empty))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.ms_cons
;;; Fact-ids: Name BinomialQueue.ms_cons; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(74,4-74,11); use=BinomialQueue.fsti(74,4-74,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.ms_cons @x0
@x1)
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x0)
@x1))
 

:pattern ((BinomialQueue.ms_cons @x0
@x1))
:qid equation_BinomialQueue.ms_cons))

:named equation_BinomialQueue.ms_cons))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.ms_append
;;; Fact-ids: Name BinomialQueue.ms_append; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(69,4-69,13); use=BinomialQueue.fsti(69,4-69,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.ms_append @x0
@x1)
(BinomialQueue.Mkms (Tm_abs_015f65dc738b17ca923c21bdd897be70 @x0
@x1)
(FStar.Set.union BinomialQueue.key_t
(BinomialQueue.__proj__Mkms__item__ms_elems @x0)
(BinomialQueue.__proj__Mkms__item__ms_elems @x1))))
 

:pattern ((BinomialQueue.ms_append @x0
@x1))
:qid equation_BinomialQueue.ms_append))

:named equation_BinomialQueue.ms_append))
;;;;;;;;;;;;;;;;Prop-typing for BinomialQueue.permutation
;;; Fact-ids: Name BinomialQueue.permutation; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fsti(81,4-81,15); use=BinomialQueue.fsti(81,4-81,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.ms)
(HasType @x1
BinomialQueue.ms))
(Valid (Prims.subtype_of (BinomialQueue.permutation @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (BinomialQueue.permutation @x0
@x1)
Prims.unit))
:qid defn_equation_BinomialQueue.permutation))

:named defn_equation_BinomialQueue.permutation))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name BinomialQueue.ms_append; Namespace BinomialQueue
(assert (! (Valid (ApplyTT __uu__PartialApp
BinomialQueue.__proj__Mkms__item__ms_count@tok))
:named @kick_partial_app_7b0d3906ae6c712bfe84b5a7bb19b2f9))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.keys_of_tree; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (BinomialQueue.keys_of_tree.fuel_instrumented (SFuel @u0)
@x1)
(BinomialQueue.keys_of_tree.fuel_instrumented ZFuel
@x1))
 

:pattern ((BinomialQueue.keys_of_tree.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.keys_of_tree; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(307,8-307,20); use=BinomialQueue.fst(307,8-307,20)
(forall ((@x0 Term))
 (! (= (BinomialQueue.keys_of_tree @x0)
(BinomialQueue.keys_of_tree.fuel_instrumented MaxFuel
@x0))
 

:pattern ((BinomialQueue.keys_of_tree @x0))
:qid @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(320,2-320,32)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (t: BinomialQueue.tree) (l: BinomialQueue.ms).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (Prims.subtype_of (BinomialQueue.permutation (BinomialQueue.keys_of_tree t) l)
;         Prims.unit)


; Context: While encoding a query
; While typechecking the top-level declaration `let repr_t`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.tree)
(HasType @x1
BinomialQueue.ms))

;; def=Prims.fst(304,21-304,40); use=BinomialQueue.fst(320,2-320,32)
(or label_1

;; def=Prims.fst(304,21-304,40); use=BinomialQueue.fst(320,2-320,32)
(Valid 
;; def=Prims.fst(304,21-304,40); use=BinomialQueue.fst(320,2-320,32)
(Prims.subtype_of (BinomialQueue.permutation (BinomialQueue.keys_of_tree @x0)
@x1)
Prims.unit)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.repr_t, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, defn_equation_BinomialQueue.permutation, typing_BinomialQueue.keys_of_tree

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let repr_t


; <Start encoding let repr_t>

(declare-fun BinomialQueue.repr_t (Term Term) Term)
;;;;;;;;;;;;;;;;t: tree -> l: ms -> Prims.prop
(declare-fun Tm_arrow_02fa3bba4dbc5da4566e70d85209ff1e () Term)
(declare-fun BinomialQueue.repr_t@tok () Term)

; </end encoding let repr_t>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.keys; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.forest)
(HasType (BinomialQueue.keys @x0)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.keys @x0))
:qid typing_BinomialQueue.keys))

:named typing_BinomialQueue.keys))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name BinomialQueue.keys; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.forest)
(HasType (BinomialQueue.keys.fuel_instrumented @u0
@x1)
BinomialQueue.ms))
 

:pattern ((BinomialQueue.keys.fuel_instrumented @u0
@x1))
:qid token_correspondence_BinomialQueue.keys.fuel_instrumented))

:named token_correspondence_BinomialQueue.keys.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: BinomialQueue.keys
;;; Fact-ids: Name BinomialQueue.keys; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
BinomialQueue.forest)
(= (BinomialQueue.keys.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (is-Prims.Nil @lb2)
(BinomialQueue.ms_empty Dummy_value)
(ite (is-Prims.Cons @lb2)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree (Prims.Cons_hd @lb2))
(BinomialQueue.keys.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
Tm_unit)))))
 :weight 0


:pattern ((BinomialQueue.keys.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_BinomialQueue.keys.fuel_instrumented))

:named equation_with_fuel_BinomialQueue.keys.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name BinomialQueue.keys; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (BinomialQueue.keys.fuel_instrumented (SFuel @u0)
@x1)
(BinomialQueue.keys.fuel_instrumented ZFuel
@x1))
 

:pattern ((BinomialQueue.keys.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented))

:named @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name BinomialQueue.keys; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(314,8-314,12); use=BinomialQueue.fst(314,8-314,12)
(forall ((@x0 Term))
 (! (= (BinomialQueue.keys @x0)
(BinomialQueue.keys.fuel_instrumented MaxFuel
@x0))
 

:pattern ((BinomialQueue.keys @x0))
:qid @fuel_correspondence_BinomialQueue.keys.fuel_instrumented))

:named @fuel_correspondence_BinomialQueue.keys.fuel_instrumented))
(push) ;; push{2

; Starting query at BinomialQueue.fst(323,2-323,24)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (q: BinomialQueue.forest) (s: BinomialQueue.ms).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (Prims.subtype_of (BinomialQueue.permutation (BinomialQueue.keys q) s)
;         Prims.unit)


; Context: While encoding a query
; While typechecking the top-level declaration `let repr_l`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.forest)
(HasType @x1
BinomialQueue.ms))

;; def=Prims.fst(304,21-304,40); use=BinomialQueue.fst(323,2-323,24)
(or label_1

;; def=Prims.fst(304,21-304,40); use=BinomialQueue.fst(323,2-323,24)
(Valid 
;; def=Prims.fst(304,21-304,40); use=BinomialQueue.fst(323,2-323,24)
(Prims.subtype_of (BinomialQueue.permutation (BinomialQueue.keys @x0)
@x1)
Prims.unit)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.repr_l, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, defn_equation_BinomialQueue.permutation, typing_BinomialQueue.keys

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let repr_l


; <Start encoding let repr_l>

(declare-fun BinomialQueue.repr_l (Term Term) Term)
;;;;;;;;;;;;;;;;q: forest -> s: ms -> Prims.prop
(declare-fun Tm_arrow_6e75f40f9666636a73df1726a399eef4 () Term)
(declare-fun BinomialQueue.repr_l@tok () Term)

; </end encoding let repr_l>


; encoding sigelt val BinomialQueue.repr


; <Skipped val BinomialQueue.repr/>


; encoding sigelt let repr


; <Start encoding let repr>

(declare-fun BinomialQueue.repr (Term Term) Term)
;;;;;;;;;;;;;;;;q: priq -> s: ms -> Prims.prop
(declare-fun Tm_arrow_b7efc23995e8495cf5773e4b0642e07a () Term)
(declare-fun BinomialQueue.repr@tok () Term)

; </end encoding let repr>


; encoding sigelt val BinomialQueue.empty_repr


; <Skipped val BinomialQueue.empty_repr/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.repr_l; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(322,4-322,10); use=BinomialQueue.fst(322,4-322,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.forest)
(HasType @x1
BinomialQueue.ms))
(HasType (BinomialQueue.repr_l @x0
@x1)
Prims.prop))
 

:pattern ((BinomialQueue.repr_l @x0
@x1))
:qid typing_BinomialQueue.repr_l))

:named typing_BinomialQueue.repr_l))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.repr; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(327,4-327,8); use=BinomialQueue.fst(327,4-327,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.priq)
(HasType @x1
BinomialQueue.ms))
(HasType (BinomialQueue.repr @x0
@x1)
Prims.prop))
 

:pattern ((BinomialQueue.repr @x0
@x1))
:qid typing_BinomialQueue.repr))

:named typing_BinomialQueue.repr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.empty; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(90,4-90,9); use=BinomialQueue.fst(90,4-90,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (BinomialQueue.empty @u0)
BinomialQueue.priq)
 

:pattern ((BinomialQueue.empty @u0))
:qid typing_BinomialQueue.empty))

:named typing_BinomialQueue.empty))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.repr_l
;;; Fact-ids: Name BinomialQueue.repr_l; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(322,4-322,10); use=BinomialQueue.fst(322,4-322,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.repr_l @x0
@x1)
(BinomialQueue.permutation (BinomialQueue.keys @x0)
@x1))
 

:pattern ((BinomialQueue.repr_l @x0
@x1))
:qid equation_BinomialQueue.repr_l))

:named equation_BinomialQueue.repr_l))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.repr
;;; Fact-ids: Name BinomialQueue.repr; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(327,4-327,8); use=BinomialQueue.fst(327,4-327,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.repr @x0
@x1)
(BinomialQueue.repr_l @x0
@x1))
 

:pattern ((BinomialQueue.repr @x0
@x1))
:qid equation_BinomialQueue.repr))

:named equation_BinomialQueue.repr))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.empty
;;; Fact-ids: Name BinomialQueue.empty; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(90,4-90,9); use=BinomialQueue.fst(90,4-90,9)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=BinomialQueue.fst(90,4-90,9); use=BinomialQueue.fst(90,4-90,9)
(BinomialQueue.empty @u0)

(Prims.Nil BinomialQueue.tree))
 

:pattern (
;; def=BinomialQueue.fst(90,4-90,9); use=BinomialQueue.fst(90,4-90,9)
(BinomialQueue.empty @u0)
)
:qid equation_BinomialQueue.empty))

:named equation_BinomialQueue.empty))
(push) ;; push{2

; Starting query at BinomialQueue.fst(329,19-329,21)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (_: Prims.unit).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.repr BinomialQueue.empty BinomialQueue.ms_empty ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let empty_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.unit)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(329,19-329,21)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=BinomialQueue.fsti(92,32-92,55); use=BinomialQueue.fst(329,19-329,21)
(or label_2

;; def=BinomialQueue.fsti(92,32-92,55); use=BinomialQueue.fst(329,19-329,21)
(Valid 
;; def=BinomialQueue.fsti(92,32-92,55); use=BinomialQueue.fst(329,19-329,21)
(BinomialQueue.repr (BinomialQueue.empty Dummy_value)
(BinomialQueue.ms_empty Dummy_value))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(329,19-329,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(329,19-329,21)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(329,19-329,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(329,19-329,21)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.empty_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, constructor_distinct_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.empty, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_empty, equation_BinomialQueue.permutation, equation_BinomialQueue.priq, equation_BinomialQueue.repr, equation_BinomialQueue.repr_l, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, lemma_FStar.Set.lemma_equal_intro, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_BinomialQueue.keys.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.empty, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let empty_repr


; <Start encoding let empty_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.empty_repr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.empty_repr@tok () Term)

; </end encoding let empty_repr>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.repr_t; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(319,4-319,10); use=BinomialQueue.fst(319,4-319,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.tree)
(HasType @x1
BinomialQueue.ms))
(HasType (BinomialQueue.repr_t @x0
@x1)
Prims.prop))
 

:pattern ((BinomialQueue.repr_t @x0
@x1))
:qid typing_BinomialQueue.repr_t))

:named typing_BinomialQueue.repr_t))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.repr_t
;;; Fact-ids: Name BinomialQueue.repr_t; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(319,4-319,10); use=BinomialQueue.fst(319,4-319,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.repr_t @x0
@x1)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree @x0)
@x1))
 

:pattern ((BinomialQueue.repr_t @x0
@x1))
:qid equation_BinomialQueue.repr_t))

:named equation_BinomialQueue.repr_t))
(push) ;; push{2

; Starting query at BinomialQueue.fst(340,59-340,61)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_936de7421c69d10a58f5fe5f843f3a55 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(336,9-339,23); use=BinomialQueue.fst(340,59-340,61)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_936de7421c69d10a58f5fe5f843f3a55 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_936de7421c69d10a58f5fe5f843f3a55 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_936de7421c69d10a58f5fe5f843f3a55))

:named refinement_kinding_Tm_refine_936de7421c69d10a58f5fe5f843f3a55))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(336,9-339,23); use=BinomialQueue.fst(340,59-340,61)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_936de7421c69d10a58f5fe5f843f3a55 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.is_pow2heap @x2
@x3)
)


;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.is_pow2heap @x2
@x4)
)


;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.repr_t @x3
@x5)
)


;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.repr_t @x4
@x6)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_936de7421c69d10a58f5fe5f843f3a55 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_936de7421c69d10a58f5fe5f843f3a55))

:named refinement_interpretation_Tm_refine_936de7421c69d10a58f5fe5f843f3a55))
;;;;;;;;;;;;;;;;haseq for Tm_refine_936de7421c69d10a58f5fe5f843f3a55
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(336,9-339,23); use=BinomialQueue.fst(340,59-340,61)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_936de7421c69d10a58f5fe5f843f3a55 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_936de7421c69d10a58f5fe5f843f3a55 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_936de7421c69d10a58f5fe5f843f3a55))

:named haseqTm_refine_936de7421c69d10a58f5fe5f843f3a55))

; Encoding query formula : forall (d: Prims.pos)
;   (t1: BinomialQueue.tree)
;   (t2: BinomialQueue.tree)
;   (l1: BinomialQueue.ms)
;   (l2: BinomialQueue.ms).
;   (forall (_:
;       Prims.squash (BinomialQueue.is_pow2heap d t1 /\ BinomialQueue.is_pow2heap d t2 /\
;           BinomialQueue.repr_t t1 l1 /\ BinomialQueue.repr_t t2 l2)).
;       (*  - Could not prove post-condition
; *)
;       BinomialQueue.is_pow2heap d t1 /\ BinomialQueue.is_pow2heap d t2) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       BinomialQueue.is_pow2heap d t1 /\ BinomialQueue.is_pow2heap d t2 /\ BinomialQueue.repr_t t1 l1 /\
;       BinomialQueue.repr_t t2 l2 /\
;       (forall (pure_result: Prims.unit).
;           BinomialQueue.repr_t (BinomialQueue.smash d t1 t2) (BinomialQueue.ms_append l1 l2) ==>
;           p pure_result) ==>
;       (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let smash_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree)
(HasType @x2
BinomialQueue.tree)
(HasType @x3
BinomialQueue.ms)
(HasType @x4
BinomialQueue.ms))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(340,59-340,61)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_refine_936de7421c69d10a58f5fe5f843f3a55 @x0
@x1
@x2
@x3
@x4))

;; def=BinomialQueue.fst(137,19-137,55); use=BinomialQueue.fst(340,59-340,61)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(340,15-340,55)
(or label_1

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.is_pow2heap @x0
@x1)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(340,15-340,55)
(or label_2

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.is_pow2heap @x0
@x2)
)
)
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.is_pow2heap @x0
@x1)
)


;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.is_pow2heap @x0
@x2)
)


;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.repr_t @x1
@x3)
)


;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.repr_t @x2
@x4)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(340,59-340,61)
(forall ((@x6 Term))
 (! (implies (and (or label_3
(HasType @x6
Prims.unit))

;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(340,59-340,61)
(or label_4

;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(340,59-340,61)
(BinomialQueue.repr_t (BinomialQueue.smash @x0
@x1
@x2)
(BinomialQueue.ms_append @x3
@x4))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(340,59-340,61)
(ApplyTT @x5
@x6)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(340,59-340,61)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(340,59-340,61)
(ApplyTT @x5
@x6)
)
)
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x5
@x6)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.smash_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, Prims_pretyping_ae567c2fb75be05905677af440075565, bool_inversion, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Tm_unit, data_elim_BinomialQueue.Internal, eq2-interp, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_BinomialQueue.permutation, equation_BinomialQueue.repr_t, equation_BinomialQueue.smash, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented, false_interp, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_BinomialQueue.tree, function_token_typing_Prims.__cache_version_number__, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, primitive_Prims.op_Subtraction, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_89e06c024202b7960c7a838d26b7ac36, refinement_interpretation_Tm_refine_936de7421c69d10a58f5fe5f843f3a55, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_append, typing_BinomialQueue.ms_cons, typing_BinomialQueue.ms_singleton, typing_BinomialQueue.smash, typing_FStar.Set.mem, typing_FStar.Set.singleton, typing_FStar.Set.union, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let smash_repr


; <Start encoding let smash_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.smash_repr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.smash_repr@tok () Term)

; </end encoding let smash_repr>

(push) ;; push{2

; Starting query at BinomialQueue.fst(352,2-359,52)

;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_0
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_0
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_0))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;t : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_2 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2))
;;;;;;;;;;;;;;;;lq : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_3 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_3
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3))
;;;;;;;;;;;;;;;;lt : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_4 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_4
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_4
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.carry_repr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.carry_repr@tok () Term)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3
Tm_type)
:named refinement_kinding_Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(345,9-348,22); use=BinomialQueue.fst(352,2-359,52)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_1
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_4)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3))
:qid refinement_interpretation_Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3))

:named refinement_interpretation_Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3))
(declare-fun Tm_refine_55fc43232b5a60fb3670d301ddc41aba (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(342,51-359,52); use=BinomialQueue.fst(357,4-357,14)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_55fc43232b5a60fb3670d301ddc41aba @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_55fc43232b5a60fb3670d301ddc41aba @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_55fc43232b5a60fb3670d301ddc41aba))

:named refinement_kinding_Tm_refine_55fc43232b5a60fb3670d301ddc41aba))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(342,51-359,52); use=BinomialQueue.fst(357,4-357,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_55fc43232b5a60fb3670d301ddc41aba @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.ms)

;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(357,4-357,14)

;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(357,4-357,14)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_55fc43232b5a60fb3670d301ddc41aba @x2)))
:qid refinement_interpretation_Tm_refine_55fc43232b5a60fb3670d301ddc41aba))

:named refinement_interpretation_Tm_refine_55fc43232b5a60fb3670d301ddc41aba))
;;;;;;;;;;;;;;;;haseq for Tm_refine_55fc43232b5a60fb3670d301ddc41aba
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(342,51-359,52); use=BinomialQueue.fst(357,4-357,14)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_55fc43232b5a60fb3670d301ddc41aba @x0)))
(Valid (Prims.hasEq BinomialQueue.ms)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_55fc43232b5a60fb3670d301ddc41aba @x0))))
:qid haseqTm_refine_55fc43232b5a60fb3670d301ddc41aba))

:named haseqTm_refine_55fc43232b5a60fb3670d301ddc41aba))

; Encoding query formula : (forall (_:
;     Prims.squash (BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d t /\
;         BinomialQueue.repr_l q lq /\ BinomialQueue.repr_t t lt)).
;     (*  - Could not prove post-condition
; *)
;     BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d t) /\
; (forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d t /\
;     BinomialQueue.repr_l q lq /\ BinomialQueue.repr_t t lt /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.repr_l (BinomialQueue.carry d q t) (BinomialQueue.ms_append lq lt) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Nil? q) /\ ~(Cons? q && Leaf? q.hd) /\ ~(Cons? q) ==> Prims.l_False) /\
;         (q == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Nil? q) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               q == BinomialQueue.Leaf :: b ==> (forall (any_result: Prims.unit). k any_result)) /\
;           (~(Cons? q && Leaf? q.hd) ==>
;             (forall (b: BinomialQueue.tree) (b: Prims.list BinomialQueue.tree).
;                 q == b :: b ==>
;                 BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d t /\
;                 BinomialQueue.repr_t b (BinomialQueue.keys_of_tree b) /\
;                 BinomialQueue.repr_t t (BinomialQueue.keys_of_tree t) /\
;                 (forall (pure_result: Prims.unit).
;                     BinomialQueue.repr_t (BinomialQueue.smash d b t)
;                       (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                           (BinomialQueue.keys_of_tree t)) ==>
;                     d + 1 > 0 /\
;                     (forall (return_val: Prims.pos).
;                         return_val == d + 1 ==>
;                         BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d t /\
;                         (forall (pure_result: BinomialQueue.tree).
;                             BinomialQueue.is_pow2heap (d + 1) pure_result ==>
;                             BinomialQueue.smash d b t == pure_result ==>
;                             b << q /\
;                             (forall (return_val: lt: BinomialQueue.ms{b << q}).
;                                 return_val ==
;                                 BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                   (BinomialQueue.keys_of_tree t) ==>
;                                 BinomialQueue.is_binomial_queue (d + 1) b /\
;                                 BinomialQueue.is_pow2heap (d + 1) (BinomialQueue.smash d b t) /\
;                                 BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                 BinomialQueue.repr_t (BinomialQueue.smash d b t)
;                                   (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                       (BinomialQueue.keys_of_tree t)) /\
;                                 (forall (pure_result: Prims.unit).
;                                     BinomialQueue.repr_l (BinomialQueue.carry (d + 1)
;                                           b
;                                           (BinomialQueue.smash d b t))
;                                       (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                           (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                               (BinomialQueue.keys_of_tree t))) ==>
;                                     k pure_result))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec carry_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3)

;; def=BinomialQueue.fst(152,19-152,59); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(349,15-349,51)
(or label_1

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(349,15-349,51)
(or label_2

;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_1
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_4)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x1 Term))
 (! (implies (and (or label_3
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(352,2-359,52)
(or label_4

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.repr_l (BinomialQueue.carry x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_3
x_2841d97f95e403f3d9b78b0c5aec5c0a_4))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(352,2-359,52)
(and (implies 
;; def=BinomialQueue.fst(342,28-359,52); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(not 
;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(not 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(not 
;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)

label_5)
(implies 
;; def=BinomialQueue.fst(342,28-353,6); use=BinomialQueue.fst(352,8-353,6)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(352,2-359,52)
(not 
;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(342,28-354,11); use=BinomialQueue.fst(352,8-354,11)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(352,2-359,52)
(not 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(342,28-355,10); use=BinomialQueue.fst(352,8-355,10)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
@x2
@x3))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(356,4-356,14)
(and 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(356,4-356,14)
(or label_6

;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(356,4-356,14)
(or label_7

;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(356,4-356,14)
(or label_8

;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.repr_t @x2
(BinomialQueue.keys_of_tree @x2))
)
)


;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(356,4-356,14)
(or label_9

;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_2
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(356,4-356,14)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(357,15-357,22)
(or label_10

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(357,15-357,22)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(352,2-359,52)
(= @x5
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(357,27-357,32)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(357,27-357,32)
(or label_11

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(357,27-357,32)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(357,27-357,32)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(357,27-357,32)
(or label_12

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(357,27-357,32)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(357,27-357,32)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(357,27-357,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(357,27-357,32)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(357,27-357,32)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x6)
)


;; def=BinomialQueue.fst(342,39-357,40); use=BinomialQueue.fst(352,2-359,52)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
@x6)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(359,6-359,52)
(or label_13

;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(359,6-359,52)
(Valid 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(359,6-359,52)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_refine_55fc43232b5a60fb3670d301ddc41aba @x3))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(352,2-359,52)
(= @x7
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(357,4-357,14)
(and 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(357,4-357,14)
(or label_14

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(357,4-357,14)
(or label_15

;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(357,4-357,14)
(or label_16

;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.repr_l @x3
(BinomialQueue.keys @x3))
)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(357,4-357,14)
(or label_17

;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(357,4-357,14)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.repr_l (BinomialQueue.carry (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2))
(BinomialQueue.ms_append (BinomialQueue.keys @x3)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(357,4-357,14)
(ApplyTT @x1
@x8)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.carry_repr, 1)
; STATUS: unknown because canceled

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='2' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3)

;; def=BinomialQueue.fst(152,19-152,59); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(349,15-349,51)
(or label_1

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(349,15-349,51)
(or label_2

;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_1
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_4)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x1 Term))
 (! (implies (and (or label_3
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(352,2-359,52)
(or label_4

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(352,2-359,52)
(BinomialQueue.repr_l (BinomialQueue.carry x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_3
x_2841d97f95e403f3d9b78b0c5aec5c0a_4))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(352,2-359,52)
(and (implies 
;; def=BinomialQueue.fst(342,28-359,52); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(not 
;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(not 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(not 
;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)
)

label_5)
(implies 
;; def=BinomialQueue.fst(342,28-353,6); use=BinomialQueue.fst(352,8-353,6)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(352,2-359,52)
(not 
;; def=BinomialQueue.fst(342,28-342,29); use=BinomialQueue.fst(352,8-352,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(342,28-354,11); use=BinomialQueue.fst(352,8-354,11)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(352,2-359,52)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(352,2-359,52)
(not 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(342,28-355,10); use=BinomialQueue.fst(352,8-355,10)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
@x2
@x3))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(356,4-356,14)
(and 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(356,4-356,14)
(or label_6

;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(356,4-356,14)
(or label_7

;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(356,4-356,14)
(or label_8

;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.repr_t @x2
(BinomialQueue.keys_of_tree @x2))
)
)


;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(356,4-356,14)
(or label_9

;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_2
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(356,4-356,14)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(356,4-356,14)
(Valid 
;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(356,4-356,14)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(357,15-357,22)
(or label_10

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(357,15-357,22)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(352,2-359,52)
(= @x5
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(357,27-357,32)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(357,27-357,32)
(or label_11

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(357,27-357,32)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(357,27-357,32)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(357,27-357,32)
(or label_12

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(357,27-357,32)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(357,27-357,32)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(357,27-357,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(357,27-357,32)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(357,27-357,32)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x6)
)


;; def=BinomialQueue.fst(342,39-357,40); use=BinomialQueue.fst(352,2-359,52)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
@x6)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(352,2-359,52)
(and 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(359,6-359,52)
(or label_13

;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(359,6-359,52)
(Valid 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(359,6-359,52)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(352,2-359,52)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_refine_55fc43232b5a60fb3670d301ddc41aba @x3))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(352,2-359,52)
(= @x7
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(357,4-357,14)
(and 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(357,4-357,14)
(or label_14

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(357,4-357,14)
(or label_15

;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(357,4-357,14)
(or label_16

;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.repr_l @x3
(BinomialQueue.keys @x3))
)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(357,4-357,14)
(or label_17

;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(357,4-357,14)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(357,4-357,14)
(BinomialQueue.repr_l (BinomialQueue.carry (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2))
(BinomialQueue.ms_append (BinomialQueue.keys @x3)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(357,4-357,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(357,4-357,14)
(ApplyTT @x1
@x8)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.carry_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.carry.fuel_instrumented, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.carry.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, b2t_def, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_4, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2, binder_x_f26957a7e62b271a8736230b1e9c83c1_0, bool_inversion, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_elim_Prims.Cons, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_empty, equation_BinomialQueue.permutation, equation_BinomialQueue.repr_l, equation_BinomialQueue.repr_t, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.carry.fuel_instrumented, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, false_interp, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, l_and-interp, l_or-interp, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_Prims.Cons_hd, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_30bfcc2fbdc54cc3f13520e7d07c70b3, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_ef894c20818013c5faab7b4bf585814b, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.carry, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_append, typing_FStar.Set.empty, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_Tm_abs_015f65dc738b17ca923c21bdd897be70, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(342,0-359,52)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_13790a55386959da3c29764b6f2452d4 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(342,51-359,52); use=BinomialQueue.fst(342,51-359,52)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_13790a55386959da3c29764b6f2452d4 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_13790a55386959da3c29764b6f2452d4 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_13790a55386959da3c29764b6f2452d4))

:named refinement_kinding_Tm_refine_13790a55386959da3c29764b6f2452d4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(342,51-359,52); use=BinomialQueue.fst(342,51-359,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_13790a55386959da3c29764b6f2452d4 @x2
@x3))
(and (HasTypeFuel @u0
@x1
BinomialQueue.ms)

;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)

;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(Valid 
;; def=BinomialQueue.fst(352,2-359,52); use=BinomialQueue.fst(352,2-359,52)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
@x3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_13790a55386959da3c29764b6f2452d4 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_13790a55386959da3c29764b6f2452d4))

:named refinement_interpretation_Tm_refine_13790a55386959da3c29764b6f2452d4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_13790a55386959da3c29764b6f2452d4
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(342,51-359,52); use=BinomialQueue.fst(342,51-359,52)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_13790a55386959da3c29764b6f2452d4 @x0
@x1)))
(Valid (Prims.hasEq BinomialQueue.ms)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_13790a55386959da3c29764b6f2452d4 @x0
@x1))))
:qid haseqTm_refine_13790a55386959da3c29764b6f2452d4))

:named haseqTm_refine_13790a55386959da3c29764b6f2452d4))
(declare-fun Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(345,9-348,22); use=BinomialQueue.fst(343,4-343,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407))

:named refinement_kinding_Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(345,9-348,22); use=BinomialQueue.fst(343,4-343,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(343,4-343,9)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(343,4-343,9)
(BinomialQueue.is_binomial_queue @x2
@x3)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(343,4-343,9)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(343,4-343,9)
(BinomialQueue.is_pow2heap @x2
@x4)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(343,4-343,9)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(343,4-343,9)
(BinomialQueue.repr_l @x3
@x5)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(343,4-343,9)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(343,4-343,9)
(BinomialQueue.repr_t @x4
@x6)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407))

:named refinement_interpretation_Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(345,9-348,22); use=BinomialQueue.fst(343,4-343,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_f92f3e6b3863a3cc9f2f0700b6474407))

:named haseqTm_refine_f92f3e6b3863a3cc9f2f0700b6474407))

; Encoding query formula : forall (d: Prims.pos) (q: BinomialQueue.forest) (t: BinomialQueue.tree) (lq: BinomialQueue.ms)
;   (lt: BinomialQueue.ms) (d: Prims.pos) (q: BinomialQueue.forest) (t: BinomialQueue.tree)
;   (lq: BinomialQueue.ms) (lt: BinomialQueue.ms{q << q})
;   (_:
;   Prims.squash (BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d t /\
;       BinomialQueue.repr_l q lq /\ BinomialQueue.repr_t t lt)).
;   (*  - Could not prove post-condition
; *)
;   BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d t


; Context: While encoding a query
; While typechecking the top-level declaration `let rec carry_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(342,0-359,52)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest)
(HasType @x2
BinomialQueue.tree)
(HasType @x3
BinomialQueue.ms)
(HasType @x4
BinomialQueue.ms)
(HasType @x5
Prims.pos)
(HasType @x6
BinomialQueue.forest)
(HasType @x7
BinomialQueue.tree)
(HasType @x8
BinomialQueue.ms)
(HasType @x9
(Tm_refine_13790a55386959da3c29764b6f2452d4 @x6
@x1))
(HasType @x10
(Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407 @x5
@x6
@x7
@x8
@x9)))

;; def=BinomialQueue.fst(152,19-152,59); use=BinomialQueue.fst(349,15-349,20)
(and 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(349,15-349,20)
(or label_1

;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(349,15-349,20)
(Valid 
;; def=BinomialQueue.fst(152,19-152,40); use=BinomialQueue.fst(349,15-349,20)
(BinomialQueue.is_binomial_queue @x5
@x6)
)
)


;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(349,15-349,20)
(or label_2

;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(349,15-349,20)
(Valid 
;; def=BinomialQueue.fst(152,44-152,59); use=BinomialQueue.fst(349,15-349,20)
(BinomialQueue.is_pow2heap @x5
@x7)
)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.carry_repr, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_f92f3e6b3863a3cc9f2f0700b6474407

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec carry_repr


; <Start encoding let rec carry_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.carry_repr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.carry_repr@tok () Term)

; </end encoding let rec carry_repr>


; encoding sigelt #push-options "--z3rlimit 50 --fuel 1 --ifuel 1"


; <Skipped #push-options "--z3rlimit 50 --fuel 1 --ifuel 1"/>

(push) ;; push{2

; Starting query at BinomialQueue.fst(375,2-407,57)

;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_0
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_0
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_0))
;;;;;;;;;;;;;;;;p : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_2 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_2
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_2
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_2))
;;;;;;;;;;;;;;;;c : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_3 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_3
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_3
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_3))
;;;;;;;;;;;;;;;;lp : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_4 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_4
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_4
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_4))
;;;;;;;;;;;;;;;;lq : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_5 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_5
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_5
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_5))
;;;;;;;;;;;;;;;;lc : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_6 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_6
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_6
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_6))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.join_repr (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.join_repr@tok () Term)
(declare-fun label_80 () Bool)
(declare-fun label_79 () Bool)
(declare-fun label_78 () Bool)
(declare-fun label_77 () Bool)
(declare-fun label_76 () Bool)
(declare-fun label_75 () Bool)
(declare-fun label_74 () Bool)
(declare-fun label_73 () Bool)
(declare-fun label_72 () Bool)
(declare-fun label_71 () Bool)
(declare-fun label_70 () Bool)
(declare-fun label_69 () Bool)
(declare-fun label_68 () Bool)
(declare-fun label_67 () Bool)
(declare-fun label_66 () Bool)
(declare-fun label_65 () Bool)
(declare-fun label_64 () Bool)
(declare-fun label_63 () Bool)
(declare-fun label_62 () Bool)
(declare-fun label_61 () Bool)
(declare-fun label_60 () Bool)
(declare-fun label_59 () Bool)
(declare-fun label_58 () Bool)
(declare-fun label_57 () Bool)
(declare-fun label_56 () Bool)
(declare-fun label_55 () Bool)
(declare-fun label_54 () Bool)
(declare-fun label_53 () Bool)
(declare-fun label_52 () Bool)
(declare-fun label_51 () Bool)
(declare-fun label_50 () Bool)
(declare-fun label_49 () Bool)
(declare-fun label_48 () Bool)
(declare-fun label_47 () Bool)
(declare-fun label_46 () Bool)
(declare-fun label_45 () Bool)
(declare-fun label_44 () Bool)
(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_0126be480748f7241b165d1b758f5fc8 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_0126be480748f7241b165d1b758f5fc8
Tm_type)
:named refinement_kinding_Tm_refine_0126be480748f7241b165d1b758f5fc8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(366,9-371,22); use=BinomialQueue.fst(375,2-407,57)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0126be480748f7241b165d1b758f5fc8)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(375,2-407,57)
(or 
;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(375,2-407,57)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_3))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_1
x_2841d97f95e403f3d9b78b0c5aec5c0a_4)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_5)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_3
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0126be480748f7241b165d1b758f5fc8))
:qid refinement_interpretation_Tm_refine_0126be480748f7241b165d1b758f5fc8))

:named refinement_interpretation_Tm_refine_0126be480748f7241b165d1b758f5fc8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0126be480748f7241b165d1b758f5fc8
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0126be480748f7241b165d1b758f5fc8))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_0126be480748f7241b165d1b758f5fc8))
(declare-fun Tm_refine_00f6d20721c5abf47b5d3d958c0969ab (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(363,9-407,57); use=BinomialQueue.fst(393,4-393,13)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_00f6d20721c5abf47b5d3d958c0969ab))

:named refinement_kinding_Tm_refine_00f6d20721c5abf47b5d3d958c0969ab))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(363,9-407,57); use=BinomialQueue.fst(393,4-393,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.ms)

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(393,4-393,13)

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(393,4-393,13)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x2)))
:qid refinement_interpretation_Tm_refine_00f6d20721c5abf47b5d3d958c0969ab))

:named refinement_interpretation_Tm_refine_00f6d20721c5abf47b5d3d958c0969ab))
;;;;;;;;;;;;;;;;haseq for Tm_refine_00f6d20721c5abf47b5d3d958c0969ab
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(363,9-407,57); use=BinomialQueue.fst(393,4-393,13)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x0)))
(Valid (Prims.hasEq BinomialQueue.ms)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x0))))
:qid haseqTm_refine_00f6d20721c5abf47b5d3d958c0969ab))

:named haseqTm_refine_00f6d20721c5abf47b5d3d958c0969ab))



; Encoding query formula : (forall (_:
;     Prims.squash (BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_binomial_queue d q /\
;         (Leaf? c \/ BinomialQueue.is_pow2heap d c) /\ BinomialQueue.repr_l p lp /\
;         BinomialQueue.repr_l q lq /\ BinomialQueue.repr_t c lc)).
;     (*  - Could not prove post-condition
; *)
;     BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_binomial_queue d q /\
;     (Leaf? c \/ BinomialQueue.is_pow2heap d c)) /\
; (forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_binomial_queue d q /\
;     (Leaf? c \/ BinomialQueue.is_pow2heap d c) /\ BinomialQueue.repr_l p lp /\
;     BinomialQueue.repr_l q lq /\ BinomialQueue.repr_t c lc /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.repr_l (BinomialQueue.join d p q c)
;           (BinomialQueue.ms_append lp (BinomialQueue.ms_append lq lc)) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Nil? (p, q, c)._1 && Leaf? (p, q, c)._3) /\ ~(Nil? (p, q, c)._2 && Leaf? (p, q, c)._3) /\
;           ~(Nil? (p, q, c)._1) /\ ~(Nil? (p, q, c)._2) /\
;           ~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2 &&
;             Leaf? (p, q, c)._2.hd) /\
;           ~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2 && Leaf? (p, q, c)._2.hd && Leaf? (p, q, c)._3) /\
;           ~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2 && Leaf? (p, q, c)._3) /\
;           ~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2) /\
;           ~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2 && Leaf? (p, q, c)._2.hd) /\
;           ~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2) ==>
;           Prims.l_False) /\
;         (forall (b: Prims.list BinomialQueue.tree).
;             (p, q, c) == ([], b, BinomialQueue.Leaf) ==>
;             (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Nil? (p, q, c)._1 && Leaf? (p, q, c)._3) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               (p, q, c) == (b, [], BinomialQueue.Leaf) ==>
;               (forall (any_result: Prims.unit). k any_result)) /\
;           (~(Nil? (p, q, c)._2 && Leaf? (p, q, c)._3) ==>
;             (forall (b: Prims.list BinomialQueue.tree) (b: BinomialQueue.tree).
;                 (p, q, c) == ([], b, b) ==>
;                 BinomialQueue.is_binomial_queue d q /\ BinomialQueue.is_pow2heap d c /\
;                 BinomialQueue.repr_l q lq /\ BinomialQueue.repr_t c lc /\
;                 (forall (pure_result: Prims.unit).
;                     BinomialQueue.repr_l (BinomialQueue.carry d q c) (BinomialQueue.ms_append lq lc) ==>
;                     k pure_result)) /\
;             (~(Nil? (p, q, c)._1) ==>
;               (forall (b: Prims.list BinomialQueue.tree) (b: BinomialQueue.tree).
;                   (p, q, c) == (b, [], b) ==>
;                   BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_pow2heap d c /\
;                   BinomialQueue.repr_l p lp /\ BinomialQueue.repr_t c lc /\
;                   (forall (pure_result: Prims.unit).
;                       BinomialQueue.repr_l (BinomialQueue.carry d p c)
;                         (BinomialQueue.ms_append lp lc) ==>
;                       k pure_result)) /\
;               (~(Nil? (p, q, c)._2) ==>
;                 (forall (b: Prims.list BinomialQueue.tree)
;                     (b: Prims.list BinomialQueue.tree)
;                     (b: BinomialQueue.tree).
;                     (p, q, c) == (BinomialQueue.Leaf :: b, BinomialQueue.Leaf :: b, b) ==>
;                     d + 1 > 0 /\
;                     (forall (return_val: Prims.pos).
;                         return_val == d + 1 ==>
;                         b << p /\
;                         (forall (any_result: BinomialQueue.ms).
;                             BinomialQueue.ms_empty == any_result ==>
;                             BinomialQueue.is_binomial_queue (d + 1) b /\
;                             BinomialQueue.is_binomial_queue (d + 1) b /\
;                             (Leaf? BinomialQueue.Leaf \/
;                               BinomialQueue.is_pow2heap (d + 1) BinomialQueue.Leaf) /\
;                             BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                             BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                             BinomialQueue.repr_t BinomialQueue.Leaf BinomialQueue.ms_empty /\
;                             (forall (pure_result: Prims.unit).
;                                 BinomialQueue.repr_l (BinomialQueue.join (d + 1)
;                                       b
;                                       b
;                                       BinomialQueue.Leaf)
;                                   (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                       (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                           BinomialQueue.ms_empty)) ==>
;                                 k pure_result)))) /\
;                 (~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2 &&
;                     Leaf? (p, q, c)._2.hd) ==>
;                   (forall (b: BinomialQueue.tree)
;                       (b: Prims.list BinomialQueue.tree)
;                       (b: Prims.list BinomialQueue.tree).
;                       (p, q, c) == (b :: b, BinomialQueue.Leaf :: b, BinomialQueue.Leaf) ==>
;                       d + 1 > 0 /\
;                       (forall (return_val: Prims.pos).
;                           return_val == d + 1 ==>
;                           b << p /\
;                           (forall (any_result: BinomialQueue.ms).
;                               BinomialQueue.ms_empty == any_result ==>
;                               BinomialQueue.is_binomial_queue (d + 1) b /\
;                               BinomialQueue.is_binomial_queue (d + 1) b /\
;                               (Leaf? BinomialQueue.Leaf \/
;                                 BinomialQueue.is_pow2heap (d + 1) BinomialQueue.Leaf) /\
;                               BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                               BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                               BinomialQueue.repr_t BinomialQueue.Leaf BinomialQueue.ms_empty /\
;                               (forall (pure_result: Prims.unit).
;                                   BinomialQueue.repr_l (BinomialQueue.join (d + 1)
;                                         b
;                                         b
;                                         BinomialQueue.Leaf)
;                                     (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                         (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                             BinomialQueue.ms_empty)) ==>
;                                   k pure_result)))) /\
;                   (~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2 && Leaf? (p, q, c)._2.hd &&
;                       Leaf? (p, q, c)._3) ==>
;                     (forall (b: Prims.list BinomialQueue.tree)
;                         (b: BinomialQueue.tree)
;                         (b: Prims.list BinomialQueue.tree).
;                         (p, q, c) == (BinomialQueue.Leaf :: b, b :: b, BinomialQueue.Leaf) ==>
;                         d + 1 > 0 /\
;                         (forall (return_val: Prims.pos).
;                             return_val == d + 1 ==>
;                             b << p /\
;                             (forall (any_result: BinomialQueue.ms).
;                                 BinomialQueue.ms_empty == any_result ==>
;                                 BinomialQueue.is_binomial_queue (d + 1) b /\
;                                 BinomialQueue.is_binomial_queue (d + 1) b /\
;                                 (Leaf? BinomialQueue.Leaf \/
;                                   BinomialQueue.is_pow2heap (d + 1) BinomialQueue.Leaf) /\
;                                 BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                 BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                 BinomialQueue.repr_t BinomialQueue.Leaf BinomialQueue.ms_empty /\
;                                 (forall (pure_result: Prims.unit).
;                                     BinomialQueue.repr_l (BinomialQueue.join (d + 1)
;                                           b
;                                           b
;                                           BinomialQueue.Leaf)
;                                       (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                           (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                               BinomialQueue.ms_empty)) ==>
;                                     k pure_result)))) /\
;                     (~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2 &&
;                         Leaf? (p, q, c)._3) ==>
;                       (forall (b: Prims.list BinomialQueue.tree)
;                           (b: BinomialQueue.tree)
;                           (b: Prims.list BinomialQueue.tree)
;                           (b: BinomialQueue.tree).
;                           (p, q, c) == (BinomialQueue.Leaf :: b, b :: b, b) ==>
;                           BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d c /\
;                           BinomialQueue.repr_t b (BinomialQueue.keys_of_tree b) /\
;                           BinomialQueue.repr_t c (BinomialQueue.keys_of_tree c) /\
;                           (forall (pure_result: Prims.unit).
;                               BinomialQueue.repr_t (BinomialQueue.smash d b c)
;                                 (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                     (BinomialQueue.keys_of_tree c)) ==>
;                               d + 1 > 0 /\
;                               (forall (return_val: Prims.pos).
;                                   return_val == d + 1 ==>
;                                   BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d c /\
;                                   (forall (pure_result: BinomialQueue.tree).
;                                       BinomialQueue.is_pow2heap (d + 1) pure_result ==>
;                                       BinomialQueue.smash d b c == pure_result ==>
;                                       b << p /\
;                                       (forall (return_val: lc: BinomialQueue.ms{b << p}).
;                                           return_val ==
;                                           BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                             (BinomialQueue.keys_of_tree c) ==>
;                                           BinomialQueue.is_binomial_queue (d + 1) b /\
;                                           BinomialQueue.is_binomial_queue (d + 1) b /\
;                                           (Leaf? (BinomialQueue.smash d b c) \/
;                                             BinomialQueue.is_pow2heap (d + 1)
;                                               (BinomialQueue.smash d b c)) /\
;                                           BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                           BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                           BinomialQueue.repr_t (BinomialQueue.smash d b c)
;                                             (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                                 (BinomialQueue.keys_of_tree c)) /\
;                                           (forall (pure_result: Prims.unit).
;                                               BinomialQueue.repr_l (BinomialQueue.join (d + 1)
;                                                     b
;                                                     b
;                                                     (BinomialQueue.smash d b c))
;                                                 (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                                     (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                                         (BinomialQueue.ms_append (BinomialQueue.keys_of_tree
;                                                                 b)
;                                                             (BinomialQueue.keys_of_tree c)))) ==>
;                                               k pure_result)))))) /\
;                       (~(Cons? (p, q, c)._1 && Leaf? (p, q, c)._1.hd && Cons? (p, q, c)._2) ==>
;                         (forall (b: BinomialQueue.tree)
;                             (b: Prims.list BinomialQueue.tree)
;                             (b: Prims.list BinomialQueue.tree)
;                             (b: BinomialQueue.tree).
;                             (p, q, c) == (b :: b, BinomialQueue.Leaf :: b, b) ==>
;                             BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d c /\
;                             BinomialQueue.repr_t b (BinomialQueue.keys_of_tree b) /\
;                             BinomialQueue.repr_t c (BinomialQueue.keys_of_tree c) /\
;                             (forall (pure_result: Prims.unit).
;                                 BinomialQueue.repr_t (BinomialQueue.smash d b c)
;                                   (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                       (BinomialQueue.keys_of_tree c)) ==>
;                                 d + 1 > 0 /\
;                                 (forall (return_val: Prims.pos).
;                                     return_val == d + 1 ==>
;                                     BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d c /\
;                                     (forall (pure_result: BinomialQueue.tree).
;                                         BinomialQueue.is_pow2heap (d + 1) pure_result ==>
;                                         BinomialQueue.smash d b c == pure_result ==>
;                                         b << p /\
;                                         (forall (return_val: lc: BinomialQueue.ms{b << p}).
;                                             return_val ==
;                                             BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                               (BinomialQueue.keys_of_tree c) ==>
;                                             BinomialQueue.is_binomial_queue (d + 1) b /\
;                                             BinomialQueue.is_binomial_queue (d + 1) b /\
;                                             (Leaf? (BinomialQueue.smash d b c) \/
;                                               BinomialQueue.is_pow2heap (d + 1)
;                                                 (BinomialQueue.smash d b c)) /\
;                                             BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                             BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                             BinomialQueue.repr_t (BinomialQueue.smash d b c)
;                                               (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b
;                                                   )
;                                                   (BinomialQueue.keys_of_tree c)) /\
;                                             (forall (pure_result: Prims.unit).
;                                                 BinomialQueue.repr_l (BinomialQueue.join (d + 1)
;                                                       b
;                                                       b
;                                                       (BinomialQueue.smash d b c))
;                                                   (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                                       (BinomialQueue.ms_append (BinomialQueue.keys b
;                                                           )
;                                                           (BinomialQueue.ms_append (BinomialQueue.keys_of_tree
;                                                                   b)
;                                                               (BinomialQueue.keys_of_tree c)))) ==>
;                                                 k pure_result)))))) /\
;                         (~(Cons? (p, q, c)._1 && Cons? (p, q, c)._2 && Leaf? (p, q, c)._2.hd) ==>
;                           (forall (b: BinomialQueue.tree)
;                               (b: Prims.list BinomialQueue.tree)
;                               (b: BinomialQueue.tree)
;                               (b: Prims.list BinomialQueue.tree)
;                               (b: BinomialQueue.tree).
;                               (p, q, c) == (b :: b, b :: b, b) ==>
;                               BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d b /\
;                               BinomialQueue.repr_t b (BinomialQueue.keys_of_tree b) /\
;                               BinomialQueue.repr_t b (BinomialQueue.keys_of_tree b) /\
;                               (forall (pure_result: Prims.unit).
;                                   BinomialQueue.repr_t (BinomialQueue.smash d b b)
;                                     (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                         (BinomialQueue.keys_of_tree b)) ==>
;                                   d + 1 > 0 /\
;                                   (forall (return_val: Prims.pos).
;                                       return_val == d + 1 ==>
;                                       BinomialQueue.is_pow2heap d b /\ BinomialQueue.is_pow2heap d b /\
;                                       (forall (pure_result: BinomialQueue.tree).
;                                           BinomialQueue.is_pow2heap (d + 1) pure_result ==>
;                                           BinomialQueue.smash d b b == pure_result ==>
;                                           b << p /\
;                                           (forall (return_val: lc: BinomialQueue.ms{b << p}).
;                                               return_val ==
;                                               BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                                 (BinomialQueue.keys_of_tree b) ==>
;                                               BinomialQueue.is_binomial_queue (d + 1) b /\
;                                               BinomialQueue.is_binomial_queue (d + 1) b /\
;                                               (Leaf? (BinomialQueue.smash d b b) \/
;                                                 BinomialQueue.is_pow2heap (d + 1)
;                                                   (BinomialQueue.smash d b b)) /\
;                                               BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                               BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                               BinomialQueue.repr_t (BinomialQueue.smash d b b)
;                                                 (BinomialQueue.ms_append (BinomialQueue.keys_of_tree
;                                                         b)
;                                                     (BinomialQueue.keys_of_tree b)) /\
;                                               (forall (pure_result: Prims.unit).
;                                                   BinomialQueue.repr_l (BinomialQueue.join (d + 1)
;                                                         b
;                                                         b
;                                                         (BinomialQueue.smash d b b))
;                                                     (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                                         (BinomialQueue.ms_append (BinomialQueue.keys
;                                                                 b)
;                                                             (BinomialQueue.ms_append (BinomialQueue.keys_of_tree
;                                                                     b)
;                                                                 (BinomialQueue.keys_of_tree b)))) ==>
;                                                   k pure_result)))))))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec join_repr`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_0126be480748f7241b165d1b758f5fc8)

;; def=BinomialQueue.fst(170,12-172,40); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(372,15-372,67)
(or label_1

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(372,15-372,67)
(or label_2

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(372,15-372,67)
(or label_3

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(375,2-407,57)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_3))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(375,2-407,57)
(or 
;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(375,2-407,57)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_3))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_1
x_2841d97f95e403f3d9b78b0c5aec5c0a_4)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_5)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_3
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x1 Term))
 (! (implies (and (or label_4
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(375,2-407,57)
(or label_5

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(375,2-407,57)
(BinomialQueue.repr_l (BinomialQueue.join x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_4
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_5
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(375,2-407,57)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(375,2-407,57)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(375,2-407,57)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(375,2-407,57)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and (implies 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=BinomialQueue.fst(376,4-376,15); use=BinomialQueue.fst(376,4-376,15)
(not 
;; def=BinomialQueue.fst(376,4-376,15); use=BinomialQueue.fst(376,4-376,15)
(and (BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(377,4-377,15); use=BinomialQueue.fst(377,4-377,15)
(not 
;; def=BinomialQueue.fst(377,4-377,15); use=BinomialQueue.fst(377,4-377,15)
(and (BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(378,4-378,12); use=BinomialQueue.fst(378,4-378,12)
(not 
;; def=BinomialQueue.fst(378,4-378,12); use=BinomialQueue.fst(378,4-378,12)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
)


;; def=BinomialQueue.fst(379,4-379,12); use=BinomialQueue.fst(379,4-379,12)
(not 
;; def=BinomialQueue.fst(379,4-379,12); use=BinomialQueue.fst(379,4-379,12)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
)


;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
)


;; def=BinomialQueue.fst(385,4-385,32); use=BinomialQueue.fst(385,4-385,32)
(not 
;; def=BinomialQueue.fst(385,4-385,32); use=BinomialQueue.fst(385,4-385,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(388,4-388,32); use=BinomialQueue.fst(388,4-388,32)
(not 
;; def=BinomialQueue.fst(388,4-388,32); use=BinomialQueue.fst(388,4-388,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(391,4-391,29); use=BinomialQueue.fst(391,4-391,29)
(not 
;; def=BinomialQueue.fst(391,4-391,29); use=BinomialQueue.fst(391,4-391,29)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
)


;; def=BinomialQueue.fst(403,4-403,29); use=BinomialQueue.fst(403,4-403,29)
(not 
;; def=BinomialQueue.fst(403,4-403,29); use=BinomialQueue.fst(403,4-403,29)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)
)

label_6)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(375,8-376,15); use=BinomialQueue.fst(375,8-376,15)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Nil BinomialQueue.tree)
@x2
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(375,2-407,57)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(376,4-376,15); use=BinomialQueue.fst(376,4-376,15)
(and (BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(375,8-377,15); use=BinomialQueue.fst(375,8-377,15)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
@x2
(Prims.Nil BinomialQueue.tree)
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(375,2-407,57)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(377,4-377,15); use=BinomialQueue.fst(377,4-377,15)
(and (BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(375,8-378,12); use=BinomialQueue.fst(375,8-378,12)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Nil BinomialQueue.tree)
@x2
@x3))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(378,16-378,26)
(and 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(378,16-378,26)
(or label_7

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(378,16-378,26)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(378,16-378,26)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(378,16-378,26)
(or label_8

;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(378,16-378,26)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(378,16-378,26)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(378,16-378,26)
(or label_9

;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(378,16-378,26)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(378,16-378,26)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_5)
)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(378,16-378,26)
(or label_10

;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(378,16-378,26)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(378,16-378,26)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_3
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(378,16-378,26)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(378,16-378,26)
(Valid 
;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(378,16-378,26)
(BinomialQueue.repr_l (BinomialQueue.carry x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_5
x_2841d97f95e403f3d9b78b0c5aec5c0a_6))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(378,16-378,26)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(378,16-378,26)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(378,4-378,12); use=BinomialQueue.fst(378,4-378,12)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.tree)

;; def=BinomialQueue.fst(375,8-379,12); use=BinomialQueue.fst(375,8-379,12)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
@x2
(Prims.Nil BinomialQueue.tree)
@x3))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(379,16-379,26)
(and 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(379,16-379,26)
(or label_11

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(379,16-379,26)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(379,16-379,26)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(379,16-379,26)
(or label_12

;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(379,16-379,26)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(379,16-379,26)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(379,16-379,26)
(or label_13

;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(379,16-379,26)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(379,16-379,26)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_1
x_2841d97f95e403f3d9b78b0c5aec5c0a_4)
)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(379,16-379,26)
(or label_14

;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(379,16-379,26)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(379,16-379,26)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_3
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(379,16-379,26)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(379,16-379,26)
(Valid 
;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(379,16-379,26)
(BinomialQueue.repr_l (BinomialQueue.carry x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_1
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_4
x_2841d97f95e403f3d9b78b0c5aec5c0a_6))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(379,16-379,26)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(379,16-379,26)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(379,4-379,12); use=BinomialQueue.fst(379,4-379,12)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(375,8-381,29); use=BinomialQueue.fst(375,8-381,29)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x3)
@x4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(382,14-382,21)
(or label_15

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(382,14-382,21)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x5
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(383,30-383,38)
(or label_16

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(383,30-383,38)
(Valid 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(383,30-383,38)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.ms)

;; def=BinomialQueue.fst(363,9-383,38); use=BinomialQueue.fst(375,2-407,57)
(= (BinomialQueue.ms_empty Dummy_value)
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(382,4-382,13)
(and 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(382,4-382,13)
(or label_17

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(382,4-382,13)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(382,4-382,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2)
)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(382,4-382,13)
(or label_18

;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(382,4-382,13)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(382,4-382,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(382,4-382,13)
(or label_19

;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(382,4-382,13)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(382,4-382,13)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(382,4-382,13)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
BinomialQueue.Leaf@tok)
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(382,4-382,13)
(or label_20

;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(382,4-382,13)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(382,4-382,13)
(BinomialQueue.repr_l @x2
(BinomialQueue.keys @x2))
)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(382,4-382,13)
(or label_21

;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(382,4-382,13)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(382,4-382,13)
(BinomialQueue.repr_l @x3
(BinomialQueue.keys @x3))
)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(382,4-382,13)
(or label_22

;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(382,4-382,13)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(382,4-382,13)
(BinomialQueue.repr_t BinomialQueue.Leaf@tok
(BinomialQueue.ms_empty Dummy_value))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(382,4-382,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(382,4-382,13)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(382,4-382,13)
(BinomialQueue.repr_l (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2
@x3
BinomialQueue.Leaf@tok)
(BinomialQueue.ms_append (BinomialQueue.keys @x2)
(BinomialQueue.ms_append (BinomialQueue.keys @x3)
(BinomialQueue.ms_empty Dummy_value))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(382,4-382,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(382,4-382,13)
(ApplyTT @x1
@x7)
)
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(375,8-385,32); use=BinomialQueue.fst(375,8-385,32)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
@x2
@x3)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x4)
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(386,14-386,21)
(or label_23

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(386,14-386,21)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x5
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(387,30-387,38)
(or label_24

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(387,30-387,38)
(Valid 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(387,30-387,38)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.ms)

;; def=BinomialQueue.fst(363,9-387,38); use=BinomialQueue.fst(375,2-407,57)
(= (BinomialQueue.ms_empty Dummy_value)
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(386,4-386,13)
(and 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(386,4-386,13)
(or label_25

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(386,4-386,13)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(386,4-386,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(386,4-386,13)
(or label_26

;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(386,4-386,13)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(386,4-386,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(386,4-386,13)
(or label_27

;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(386,4-386,13)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(386,4-386,13)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(386,4-386,13)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
BinomialQueue.Leaf@tok)
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(386,4-386,13)
(or label_28

;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(386,4-386,13)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(386,4-386,13)
(BinomialQueue.repr_l @x3
(BinomialQueue.keys @x3))
)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(386,4-386,13)
(or label_29

;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(386,4-386,13)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(386,4-386,13)
(BinomialQueue.repr_l @x4
(BinomialQueue.keys @x4))
)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(386,4-386,13)
(or label_30

;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(386,4-386,13)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(386,4-386,13)
(BinomialQueue.repr_t BinomialQueue.Leaf@tok
(BinomialQueue.ms_empty Dummy_value))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(386,4-386,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(386,4-386,13)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(386,4-386,13)
(BinomialQueue.repr_l (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
@x4
BinomialQueue.Leaf@tok)
(BinomialQueue.ms_append (BinomialQueue.keys @x3)
(BinomialQueue.ms_append (BinomialQueue.keys @x4)
(BinomialQueue.ms_empty Dummy_value))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(386,4-386,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(386,4-386,13)
(ApplyTT @x1
@x7)
)
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(385,4-385,32); use=BinomialQueue.fst(385,4-385,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(375,8-388,32); use=BinomialQueue.fst(375,8-388,32)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2)
(Prims.Cons BinomialQueue.tree
@x3
@x4)
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(389,14-389,21)
(or label_31

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(389,14-389,21)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x5
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(390,30-390,38)
(or label_32

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(390,30-390,38)
(Valid 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(390,30-390,38)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.ms)

;; def=BinomialQueue.fst(363,9-390,38); use=BinomialQueue.fst(375,2-407,57)
(= (BinomialQueue.ms_empty Dummy_value)
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(389,4-389,13)
(and 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(389,4-389,13)
(or label_33

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(389,4-389,13)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(389,4-389,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2)
)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(389,4-389,13)
(or label_34

;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(389,4-389,13)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(389,4-389,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(389,4-389,13)
(or label_35

;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(389,4-389,13)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(389,4-389,13)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(389,4-389,13)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
BinomialQueue.Leaf@tok)
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(389,4-389,13)
(or label_36

;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(389,4-389,13)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(389,4-389,13)
(BinomialQueue.repr_l @x2
(BinomialQueue.keys @x2))
)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(389,4-389,13)
(or label_37

;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(389,4-389,13)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(389,4-389,13)
(BinomialQueue.repr_l @x4
(BinomialQueue.keys @x4))
)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(389,4-389,13)
(or label_38

;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(389,4-389,13)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(389,4-389,13)
(BinomialQueue.repr_t BinomialQueue.Leaf@tok
(BinomialQueue.ms_empty Dummy_value))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(389,4-389,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(389,4-389,13)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(389,4-389,13)
(BinomialQueue.repr_l (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2
@x4
BinomialQueue.Leaf@tok)
(BinomialQueue.ms_append (BinomialQueue.keys @x2)
(BinomialQueue.ms_append (BinomialQueue.keys @x4)
(BinomialQueue.ms_empty Dummy_value))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(389,4-389,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(389,4-389,13)
(ApplyTT @x1
@x7)
)
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(388,4-388,32); use=BinomialQueue.fst(388,4-388,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.tree)

;; def=BinomialQueue.fst(375,8-391,29); use=BinomialQueue.fst(375,8-391,29)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2)
(Prims.Cons BinomialQueue.tree
@x3
@x4)
@x5))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(392,4-392,14)
(and 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(392,4-392,14)
(or label_39

;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(392,4-392,14)
(Valid 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(392,4-392,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x3)
)
)


;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(392,4-392,14)
(or label_40

;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(392,4-392,14)
(Valid 
;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(392,4-392,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(392,4-392,14)
(or label_41

;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(392,4-392,14)
(Valid 
;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(392,4-392,14)
(BinomialQueue.repr_t @x3
(BinomialQueue.keys_of_tree @x3))
)
)


;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(392,4-392,14)
(or label_42

;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(392,4-392,14)
(Valid 
;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(392,4-392,14)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_3
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(392,4-392,14)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(392,4-392,14)
(Valid 
;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(392,4-392,14)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x3)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(393,14-393,21)
(or label_43

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(393,14-393,21)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x7
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(393,33-393,38)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(393,33-393,38)
(or label_44

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(393,33-393,38)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(393,33-393,38)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x3)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(393,33-393,38)
(or label_45

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(393,33-393,38)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(393,33-393,38)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(393,33-393,38)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(393,33-393,38)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(393,33-393,38)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x8)
)


;; def=BinomialQueue.fst(362,40-393,48); use=BinomialQueue.fst(375,2-407,57)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(395,6-395,54)
(or label_46

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(395,6-395,54)
(Valid 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(395,6-395,54)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x2))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x9
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x3)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(393,4-393,13)
(and 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(393,4-393,13)
(or label_47

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(393,4-393,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2)
)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(393,4-393,13)
(or label_48

;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(393,4-393,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(393,4-393,13)
(or label_49

;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(393,4-393,13)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(393,4-393,13)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3))
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(393,4-393,13)
(or label_50

;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(393,4-393,13)
(BinomialQueue.repr_l @x2
(BinomialQueue.keys @x2))
)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(393,4-393,13)
(or label_51

;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(393,4-393,13)
(BinomialQueue.repr_l @x4
(BinomialQueue.keys @x4))
)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(393,4-393,13)
(or label_52

;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(393,4-393,13)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x3)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(393,4-393,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(393,4-393,13)
(BinomialQueue.repr_l (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2
@x4
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x3
x_c1ab7496c060d1f2d977fd02b92d48e2_3))
(BinomialQueue.ms_append (BinomialQueue.keys @x2)
(BinomialQueue.ms_append (BinomialQueue.keys @x4)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x3)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(393,4-393,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(393,4-393,13)
(ApplyTT @x1
@x10)
)
)
 
;;no pats
:qid @query.41))
)
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(391,4-391,29); use=BinomialQueue.fst(391,4-391,29)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.tree)

;; def=BinomialQueue.fst(375,8-397,29); use=BinomialQueue.fst(375,8-397,29)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
@x2
@x3)
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x4)
@x5))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(398,4-398,14)
(and 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(398,4-398,14)
(or label_53

;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(398,4-398,14)
(Valid 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(398,4-398,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(398,4-398,14)
(or label_54

;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(398,4-398,14)
(Valid 
;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(398,4-398,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(398,4-398,14)
(or label_55

;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(398,4-398,14)
(Valid 
;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(398,4-398,14)
(BinomialQueue.repr_t @x2
(BinomialQueue.keys_of_tree @x2))
)
)


;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(398,4-398,14)
(or label_56

;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(398,4-398,14)
(Valid 
;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(398,4-398,14)
(BinomialQueue.repr_t x_c1ab7496c060d1f2d977fd02b92d48e2_3
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(398,4-398,14)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(398,4-398,14)
(Valid 
;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(398,4-398,14)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(399,14-399,21)
(or label_57

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(399,14-399,21)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x7
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(399,33-399,38)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(399,33-399,38)
(or label_58

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(399,33-399,38)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(399,33-399,38)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(399,33-399,38)
(or label_59

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(399,33-399,38)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(399,33-399,38)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(399,33-399,38)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(399,33-399,38)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(399,33-399,38)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x8)
)


;; def=BinomialQueue.fst(362,40-399,48); use=BinomialQueue.fst(375,2-407,57)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(401,6-401,54)
(or label_60

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(401,6-401,54)
(Valid 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(401,6-401,54)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x3))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x9
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(399,4-399,13)
(and 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(399,4-399,13)
(or label_61

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(399,4-399,13)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(399,4-399,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(399,4-399,13)
(or label_62

;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(399,4-399,13)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(399,4-399,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(399,4-399,13)
(or label_63

;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(399,4-399,13)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(399,4-399,13)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(399,4-399,13)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(399,4-399,13)
(or label_64

;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(399,4-399,13)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(399,4-399,13)
(BinomialQueue.repr_l @x3
(BinomialQueue.keys @x3))
)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(399,4-399,13)
(or label_65

;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(399,4-399,13)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(399,4-399,13)
(BinomialQueue.repr_l @x4
(BinomialQueue.keys @x4))
)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(399,4-399,13)
(or label_66

;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(399,4-399,13)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(399,4-399,13)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(399,4-399,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(399,4-399,13)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(399,4-399,13)
(BinomialQueue.repr_l (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
@x4
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))
(BinomialQueue.ms_append (BinomialQueue.keys @x3)
(BinomialQueue.ms_append (BinomialQueue.keys @x4)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(399,4-399,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(399,4-399,13)
(ApplyTT @x1
@x10)
)
)
 
;;no pats
:qid @query.50))
)
)
 
;;no pats
:qid @query.49))
)
)
 
;;no pats
:qid @query.48))
)
)
 
;;no pats
:qid @query.47))
)
)
 
;;no pats
:qid @query.46))
)
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(375,2-407,57)
(not 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))
(Prims.uu___is_Cons BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
(FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3))))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Prims.list BinomialQueue.tree))

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(375,8-403,29); use=BinomialQueue.fst(375,8-403,29)
(= (FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_2
x_c1ab7496c060d1f2d977fd02b92d48e2_3)
(FStar.Pervasives.Native.Mktuple3 (Prims.list BinomialQueue.tree)
(Prims.list BinomialQueue.tree)
BinomialQueue.tree
(Prims.Cons BinomialQueue.tree
@x2
@x3)
(Prims.Cons BinomialQueue.tree
@x4
@x5)
@x6))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(404,4-404,14)
(and 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(404,4-404,14)
(or label_67

;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(404,4-404,14)
(Valid 
;; def=BinomialQueue.fst(336,9-336,25); use=BinomialQueue.fst(404,4-404,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(404,4-404,14)
(or label_68

;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(404,4-404,14)
(Valid 
;; def=BinomialQueue.fst(337,9-337,25); use=BinomialQueue.fst(404,4-404,14)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x4)
)
)


;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(404,4-404,14)
(or label_69

;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(404,4-404,14)
(Valid 
;; def=BinomialQueue.fst(338,9-338,23); use=BinomialQueue.fst(404,4-404,14)
(BinomialQueue.repr_t @x2
(BinomialQueue.keys_of_tree @x2))
)
)


;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(404,4-404,14)
(or label_70

;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(404,4-404,14)
(Valid 
;; def=BinomialQueue.fst(339,9-339,23); use=BinomialQueue.fst(404,4-404,14)
(BinomialQueue.repr_t @x4
(BinomialQueue.keys_of_tree @x4))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(404,4-404,14)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(404,4-404,14)
(Valid 
;; def=BinomialQueue.fst(340,15-340,55); use=BinomialQueue.fst(404,4-404,14)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree @x4)))
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(405,14-405,21)
(or label_71

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(405,14-405,21)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x8
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(405,33-405,38)
(and 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(405,33-405,38)
(or label_72

;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(405,33-405,38)
(Valid 
;; def=BinomialQueue.fst(137,19-137,35); use=BinomialQueue.fst(405,33-405,38)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x2)
)
)


;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(405,33-405,38)
(or label_73

;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(405,33-405,38)
(Valid 
;; def=BinomialQueue.fst(137,39-137,55); use=BinomialQueue.fst(405,33-405,38)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(405,33-405,38)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
BinomialQueue.tree)

;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(405,33-405,38)
(Valid 
;; def=BinomialQueue.fst(138,27-138,48); use=BinomialQueue.fst(405,33-405,38)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x9)
)


;; def=BinomialQueue.fst(362,40-405,51); use=BinomialQueue.fst(375,2-407,57)
(= (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(375,2-407,57)
(and 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(407,6-407,57)
(or label_74

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(407,6-407,57)
(Valid 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(407,6-407,57)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(375,2-407,57)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_00f6d20721c5abf47b5d3d958c0969ab @x3))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(375,2-407,57)
(= @x10
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree @x4)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(405,4-405,13)
(and 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(405,4-405,13)
(or label_75

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(405,4-405,13)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(405,4-405,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3)
)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(405,4-405,13)
(or label_76

;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(405,4-405,13)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(405,4-405,13)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x5)
)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(405,4-405,13)
(or label_77

;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(405,4-405,13)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4)))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(405,4-405,13)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(405,4-405,13)
(BinomialQueue.is_pow2heap (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4))
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(405,4-405,13)
(or label_78

;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(405,4-405,13)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(405,4-405,13)
(BinomialQueue.repr_l @x3
(BinomialQueue.keys @x3))
)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(405,4-405,13)
(or label_79

;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(405,4-405,13)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(405,4-405,13)
(BinomialQueue.repr_l @x5
(BinomialQueue.keys @x5))
)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(405,4-405,13)
(or label_80

;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(405,4-405,13)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(405,4-405,13)
(BinomialQueue.repr_t (BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree @x4)))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(405,4-405,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(405,4-405,13)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(405,4-405,13)
(BinomialQueue.repr_l (BinomialQueue.join (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x3
@x5
(BinomialQueue.smash x_f26957a7e62b271a8736230b1e9c83c1_0
@x2
@x4))
(BinomialQueue.ms_append (BinomialQueue.keys @x3)
(BinomialQueue.ms_append (BinomialQueue.keys @x5)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.keys_of_tree @x4)))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(405,4-405,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(405,4-405,13)
(ApplyTT @x1
@x11)
)
)
 
;;no pats
:qid @query.60))
)
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
)
 
;;no pats
:qid @query.57))
)
)
 
;;no pats
:qid @query.56))
)
)
 
;;no pats
:qid @query.55))
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
 
;;no pats
:qid @query.51))
))
))
))
))
))
))
))
))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 27232800)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_80")
(eval label_80)
(echo "label_79")
(eval label_79)
(echo "label_78")
(eval label_78)
(echo "label_77")
(eval label_77)
(echo "label_76")
(eval label_76)
(echo "label_75")
(eval label_75)
(echo "label_74")
(eval label_74)
(echo "label_73")
(eval label_73)
(echo "label_72")
(eval label_72)
(echo "label_71")
(eval label_71)
(echo "label_70")
(eval label_70)
(echo "label_69")
(eval label_69)
(echo "label_68")
(eval label_68)
(echo "label_67")
(eval label_67)
(echo "label_66")
(eval label_66)
(echo "label_65")
(eval label_65)
(echo "label_64")
(eval label_64)
(echo "label_63")
(eval label_63)
(echo "label_62")
(eval label_62)
(echo "label_61")
(eval label_61)
(echo "label_60")
(eval label_60)
(echo "label_59")
(eval label_59)
(echo "label_58")
(eval label_58)
(echo "label_57")
(eval label_57)
(echo "label_56")
(eval label_56)
(echo "label_55")
(eval label_55)
(echo "label_54")
(eval label_54)
(echo "label_53")
(eval label_53)
(echo "label_52")
(eval label_52)
(echo "label_51")
(eval label_51)
(echo "label_50")
(eval label_50)
(echo "label_49")
(eval label_49)
(echo "label_48")
(eval label_48)
(echo "label_47")
(eval label_47)
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.join_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.carry.fuel_instrumented, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.join.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.join.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_interpretation_Tm_arrow_ff32f7ccb320a566131f772799c7fc50, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, b2t_def, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_07642eb27f8c86505049ec727a4a557c_2, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_4, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_5, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_6, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_3, binder_x_f26957a7e62b271a8736230b1e9c83c1_0, bool_inversion, bool_typing, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_elim_BinomialQueue.Internal, data_elim_BinomialQueue.Mkms, data_elim_Prims.Cons, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_BinomialQueue.permutation, equation_BinomialQueue.repr_l, equation_BinomialQueue.repr_t, equation_BinomialQueue.smash, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.carry.fuel_instrumented, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, equation_with_fuel_BinomialQueue.join.fuel_instrumented, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, false_interp, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, function_token_typing_BinomialQueue.__proj__Mkms__item__ms_count, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82, l_and-interp, l_or-interp, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_FStar.Pervasives.Native.Mktuple3__1, proj_equation_FStar.Pervasives.Native.Mktuple3__2, proj_equation_FStar.Pervasives.Native.Mktuple3__3, proj_equation_Prims.Cons_hd, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_0126be480748f7241b165d1b758f5fc8, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_89e06c024202b7960c7a838d26b7ac36, refinement_interpretation_Tm_refine_ef894c20818013c5faab7b4bf585814b, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.join.fuel_instrumented, token_correspondence_BinomialQueue.keys.fuel_instrumented, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.carry, typing_BinomialQueue.join, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_append, typing_BinomialQueue.ms_cons, typing_BinomialQueue.smash, typing_BinomialQueue.uu___is_Leaf, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_Tm_abs_015f65dc738b17ca923c21bdd897be70, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(362,0-407,57)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(363,9-407,57); use=BinomialQueue.fst(363,9-407,57)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6))

:named refinement_kinding_Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(363,9-407,57); use=BinomialQueue.fst(363,9-407,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6 @x2
@x3))
(and (HasTypeFuel @u0
@x1
BinomialQueue.ms)

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)

;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(Valid 
;; def=BinomialQueue.fst(375,2-407,57); use=BinomialQueue.fst(375,2-407,57)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
@x3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6))

:named refinement_interpretation_Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(363,9-407,57); use=BinomialQueue.fst(363,9-407,57)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6 @x0
@x1)))
(Valid (Prims.hasEq BinomialQueue.ms)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6 @x0
@x1))))
:qid haseqTm_refine_a8156ec692c87aa8bd9359d48b90f8a6))

:named haseqTm_refine_a8156ec692c87aa8bd9359d48b90f8a6))
(declare-fun Tm_refine_4aaacdbe6aef23914ad906053a7ec01c (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(366,9-371,22); use=BinomialQueue.fst(364,4-364,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_4aaacdbe6aef23914ad906053a7ec01c @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_4aaacdbe6aef23914ad906053a7ec01c @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_4aaacdbe6aef23914ad906053a7ec01c))

:named refinement_kinding_Tm_refine_4aaacdbe6aef23914ad906053a7ec01c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(366,9-371,22); use=BinomialQueue.fst(364,4-364,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4aaacdbe6aef23914ad906053a7ec01c @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(364,4-364,9)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(364,4-364,9)
(BinomialQueue.is_binomial_queue @x2
@x3)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(364,4-364,9)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(364,4-364,9)
(BinomialQueue.is_binomial_queue @x2
@x4)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(364,4-364,9)
(or 
;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(364,4-364,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf @x5))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(364,4-364,9)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(364,4-364,9)
(BinomialQueue.is_pow2heap @x2
@x5)
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(364,4-364,9)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(364,4-364,9)
(BinomialQueue.repr_l @x3
@x6)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(364,4-364,9)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(364,4-364,9)
(BinomialQueue.repr_l @x4
@x7)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(364,4-364,9)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(364,4-364,9)
(BinomialQueue.repr_t @x5
@x8)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4aaacdbe6aef23914ad906053a7ec01c @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_4aaacdbe6aef23914ad906053a7ec01c))

:named refinement_interpretation_Tm_refine_4aaacdbe6aef23914ad906053a7ec01c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4aaacdbe6aef23914ad906053a7ec01c
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(366,9-371,22); use=BinomialQueue.fst(364,4-364,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4aaacdbe6aef23914ad906053a7ec01c @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4aaacdbe6aef23914ad906053a7ec01c @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_4aaacdbe6aef23914ad906053a7ec01c))

:named haseqTm_refine_4aaacdbe6aef23914ad906053a7ec01c))

; Encoding query formula : forall (d: Prims.pos) (p: BinomialQueue.forest) (q: BinomialQueue.forest) (c: BinomialQueue.tree)
;   (lp: BinomialQueue.ms) (lq: BinomialQueue.ms) (lc: BinomialQueue.ms) (d: Prims.pos)
;   (p: BinomialQueue.forest) (q: BinomialQueue.forest) (c: BinomialQueue.tree) (lp: BinomialQueue.ms)
;   (lq: BinomialQueue.ms) (lc: BinomialQueue.ms{p << p})
;   (_:
;   Prims.squash (BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_binomial_queue d q /\
;       (Leaf? c \/ BinomialQueue.is_pow2heap d c) /\ BinomialQueue.repr_l p lp /\
;       BinomialQueue.repr_l q lq /\ BinomialQueue.repr_t c lc)).
;   (*  - Could not prove post-condition
; *)
;   BinomialQueue.is_binomial_queue d p /\ BinomialQueue.is_binomial_queue d q /\
;   (Leaf? c \/ BinomialQueue.is_pow2heap d c)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec join_repr`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(362,0-407,57)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.forest)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.tree)
(HasType @x4
BinomialQueue.ms)
(HasType @x5
BinomialQueue.ms)
(HasType @x6
BinomialQueue.ms)
(HasType @x7
Prims.pos)
(HasType @x8
BinomialQueue.forest)
(HasType @x9
BinomialQueue.forest)
(HasType @x10
BinomialQueue.tree)
(HasType @x11
BinomialQueue.ms)
(HasType @x12
BinomialQueue.ms)
(HasType @x13
(Tm_refine_a8156ec692c87aa8bd9359d48b90f8a6 @x8
@x1))
(HasType @x14
(Tm_refine_4aaacdbe6aef23914ad906053a7ec01c @x7
@x8
@x9
@x10
@x11
@x12
@x13)))

;; def=BinomialQueue.fst(170,12-172,40); use=BinomialQueue.fst(372,15-372,19)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(372,15-372,19)
(or label_1

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(372,15-372,19)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(372,15-372,19)
(BinomialQueue.is_binomial_queue @x7
@x8)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(372,15-372,19)
(or label_2

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(372,15-372,19)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(372,15-372,19)
(BinomialQueue.is_binomial_queue @x7
@x9)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(372,15-372,19)
(or label_3

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(372,15-372,19)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf @x10))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(372,15-372,19)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(372,15-372,19)
(BinomialQueue.is_pow2heap @x7
@x10)
)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 27232800)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.join_repr, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_4aaacdbe6aef23914ad906053a7ec01c

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec join_repr


; <Start encoding let rec join_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.join_repr (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.join_repr@tok () Term)

; </end encoding let rec join_repr>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

(push) ;; push{2

; Starting query at BinomialQueue.fst(416,2-418,32)

;;;;;;;;;;;;;;;;l : l: BinomialQueue.forest{Cons? l} (l: BinomialQueue.forest{Cons? l})
(declare-fun x_92cc3092b50378b9697de1162e4e2190_0 () Term)

;;;;;;;;;;;;;;;;binder_x_92cc3092b50378b9697de1162e4e2190_0
;;; Fact-ids: 
(assert (! (HasType x_92cc3092b50378b9697de1162e4e2190_0
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc)
:named binder_x_92cc3092b50378b9697de1162e4e2190_0))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.all_leaf_keys (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.all_leaf_keys@tok () Term)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   Cons? l /\ BinomialQueue.all_leaf l /\
;   (forall (pure_result: Prims.unit).
;       BinomialQueue.permutation (BinomialQueue.keys l) BinomialQueue.ms_empty ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Cons? l && Leaf? l.hd && Nil? l.tl) /\ ~(Cons? l && Leaf? l.hd) ==> Prims.l_False) /\
;       (l == [BinomialQueue.Leaf] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Cons? l && Leaf? l.hd && Nil? l.tl) ==>
;         (forall (b: Prims.list BinomialQueue.tree).
;             l == BinomialQueue.Leaf :: b ==>
;             Cons? b /\ b << l /\
;             (forall (any_result: Prims.list BinomialQueue.tree).
;                 b == any_result ==>
;                 Cons? b /\ BinomialQueue.all_leaf b /\
;                 (forall (pure_result: Prims.unit).
;                     BinomialQueue.permutation (BinomialQueue.keys b) BinomialQueue.ms_empty ==>
;                     k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec all_leaf_keys`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(414,16-414,23); use=BinomialQueue.fst(416,2-418,32)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))


;; def=BinomialQueue.fst(414,27-414,37); use=BinomialQueue.fst(416,2-418,32)
(BoxBool_proj_0 (BinomialQueue.all_leaf x_92cc3092b50378b9697de1162e4e2190_0))


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(416,2-418,32)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(415,15-415,44); use=BinomialQueue.fst(416,2-418,32)
(or label_2

;; def=BinomialQueue.fst(415,15-415,44); use=BinomialQueue.fst(416,2-418,32)
(Valid 
;; def=BinomialQueue.fst(415,15-415,44); use=BinomialQueue.fst(416,2-418,32)
(BinomialQueue.permutation (BinomialQueue.keys x_92cc3092b50378b9697de1162e4e2190_0)
(BinomialQueue.ms_empty Dummy_value))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(416,2-418,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(416,2-418,32)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(416,2-418,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(416,2-418,32)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(416,2-418,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(416,2-418,32)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(416,2-418,32)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(416,2-418,32)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(416,2-418,32)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(416,2-418,32)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(416,2-418,32)
(and (implies 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(and 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(not 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0)
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))))
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(Prims.__proj__Cons__item__tl BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))))
)


;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(not 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))))
)
)

label_3)
(implies 
;; def=BinomialQueue.fst(412,23-417,10); use=BinomialQueue.fst(416,8-417,10)
(= x_92cc3092b50378b9697de1162e4e2190_0
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
(Prims.Nil BinomialQueue.tree)))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(416,2-418,32)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(416,2-418,32)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(416,2-418,32)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(416,2-418,32)
(not 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0)
(BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))))
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(Prims.__proj__Cons__item__tl BinomialQueue.tree
x_92cc3092b50378b9697de1162e4e2190_0))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(416,2-418,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(412,23-418,12); use=BinomialQueue.fst(416,8-418,12)
(= x_92cc3092b50378b9697de1162e4e2190_0
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(416,2-418,32)
(and 
;; def=BinomialQueue.fst(412,32-412,39); use=BinomialQueue.fst(418,30-418,32)
(or label_4

;; def=BinomialQueue.fst(412,32-412,39); use=BinomialQueue.fst(418,30-418,32)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x2))
)


;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(418,30-418,32)
(or label_5

;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(418,30-418,32)
(Valid 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(418,30-418,32)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_92cc3092b50378b9697de1162e4e2190_0)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(416,2-418,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(412,23-418,12); use=BinomialQueue.fst(416,2-418,32)
(= @x2
@x3)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(418,16-418,29)
(and 
;; def=BinomialQueue.fst(414,16-414,23); use=BinomialQueue.fst(418,16-418,29)
(or label_6

;; def=BinomialQueue.fst(414,16-414,23); use=BinomialQueue.fst(418,16-418,29)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x2))
)


;; def=BinomialQueue.fst(414,27-414,37); use=BinomialQueue.fst(418,16-418,29)
(or label_7

;; def=BinomialQueue.fst(414,27-414,37); use=BinomialQueue.fst(418,16-418,29)
(BoxBool_proj_0 (BinomialQueue.all_leaf @x2))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(418,16-418,29)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(415,15-415,44); use=BinomialQueue.fst(418,16-418,29)
(Valid 
;; def=BinomialQueue.fst(415,15-415,44); use=BinomialQueue.fst(418,16-418,29)
(BinomialQueue.permutation (BinomialQueue.keys @x2)
(BinomialQueue.ms_empty Dummy_value))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(418,16-418,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(418,16-418,29)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.all_leaf_keys, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.all_leaf.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.all_leaf.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_92cc3092b50378b9697de1162e4e2190_0, bool_inversion, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_BinomialQueue.Mkms, data_typing_intro_Prims.Nil@tok, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_empty, equation_BinomialQueue.permutation, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.all_leaf.fuel_instrumented, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.ms, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, kinding_BinomialQueue.tree@tok, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_BarBar, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_Prims.Cons_hd, proj_equation_Prims.Cons_tl, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_8012675a32ad22b7f12e5227bdcb55bc, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.all_leaf, typing_BinomialQueue.keys, typing_FStar.Set.empty, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(412,0-418,32)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_7f051b3c793351a9c8edce64f76defe9 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(412,23-418,32); use=BinomialQueue.fst(412,23-418,32)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7f051b3c793351a9c8edce64f76defe9 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7f051b3c793351a9c8edce64f76defe9 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7f051b3c793351a9c8edce64f76defe9))

:named refinement_kinding_Tm_refine_7f051b3c793351a9c8edce64f76defe9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(412,23-418,32); use=BinomialQueue.fst(412,23-418,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7f051b3c793351a9c8edce64f76defe9 @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(412,32-412,39); use=BinomialQueue.fst(412,32-412,39)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))


;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)

;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(Valid 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(416,2-418,32)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7f051b3c793351a9c8edce64f76defe9 @x2)))
:qid refinement_interpretation_Tm_refine_7f051b3c793351a9c8edce64f76defe9))

:named refinement_interpretation_Tm_refine_7f051b3c793351a9c8edce64f76defe9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7f051b3c793351a9c8edce64f76defe9
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(412,23-418,32); use=BinomialQueue.fst(412,23-418,32)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7f051b3c793351a9c8edce64f76defe9 @x0)))
(Valid (Prims.hasEq BinomialQueue.forest)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7f051b3c793351a9c8edce64f76defe9 @x0))))
:qid haseqTm_refine_7f051b3c793351a9c8edce64f76defe9))

:named haseqTm_refine_7f051b3c793351a9c8edce64f76defe9))

; Encoding query formula : forall (l: BinomialQueue.forest{Cons? l}) (l: (l: BinomialQueue.forest{Cons? l}){l << l}).
;   (Cons? l ==> Cons? l /\ l << l ==> Cons? l) /\
;   (forall (any_result: Prims.logical).
;       Cons? l /\ BinomialQueue.all_leaf l == any_result ==>
;       Cons? l ==> Cons? l /\ l << l ==> Cons? l)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec all_leaf_keys`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(412,0-418,32)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_refine_8012675a32ad22b7f12e5227bdcb55bc)
(HasType @x1
(Tm_refine_7f051b3c793351a9c8edce64f76defe9 @x0)))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(412,23-418,32)
(and (implies (and 
;; def=BinomialQueue.fst(414,16-414,23); use=BinomialQueue.fst(414,16-414,23)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))


;; def=BinomialQueue.fst(412,32-412,39); use=BinomialQueue.fst(414,36-414,37)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))


;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(414,36-414,37)

;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(414,36-414,37)
(Valid 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(414,36-414,37)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x0)
)

)

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(414,36-414,37)
(or label_1

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(414,36-414,37)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))
)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(412,23-418,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=BinomialQueue.fst(412,23-418,32)
(= (Prims.l_and (Prims.b2t (Prims.uu___is_Cons BinomialQueue.tree
@x1))
(Prims.b2t (BinomialQueue.all_leaf @x1)))
@x2)


;; def=BinomialQueue.fst(414,16-414,23); use=BinomialQueue.fst(415,15-415,44)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))


;; def=BinomialQueue.fst(412,32-412,39); use=BinomialQueue.fst(415,15-415,44)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))


;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(415,15-415,44)

;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(415,15-415,44)
(Valid 
;; def=BinomialQueue.fst(416,2-418,32); use=BinomialQueue.fst(415,15-415,44)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x0)
)

)

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(414,36-414,37)
(or label_2

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(415,15-415,44)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.all_leaf_keys, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec all_leaf_keys


; <Start encoding let rec all_leaf_keys>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.all_leaf_keys (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.all_leaf_keys@tok () Term)

; </end encoding let rec all_leaf_keys>

(push) ;; push{2

; Starting query at BinomialQueue.fst(424,2-429,40)

;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_0 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_0
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_0
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_0))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.compact_preserves_keys (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.compact_preserves_keys@tok () Term)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_ae567e62d141c46e7824136b5f3e53ce () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_ae567e62d141c46e7824136b5f3e53ce
Tm_type)
:named refinement_kinding_Tm_refine_ae567e62d141c46e7824136b5f3e53ce))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(420,32-429,40); use=BinomialQueue.fst(429,9-429,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ae567e62d141c46e7824136b5f3e53ce)
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(424,2-429,40); use=BinomialQueue.fst(429,9-429,31)

;; def=BinomialQueue.fst(424,2-429,40); use=BinomialQueue.fst(429,9-429,31)
(Valid 
;; def=BinomialQueue.fst(424,2-429,40); use=BinomialQueue.fst(429,9-429,31)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
x_07642eb27f8c86505049ec727a4a557c_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ae567e62d141c46e7824136b5f3e53ce))
:qid refinement_interpretation_Tm_refine_ae567e62d141c46e7824136b5f3e53ce))

:named refinement_interpretation_Tm_refine_ae567e62d141c46e7824136b5f3e53ce))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ae567e62d141c46e7824136b5f3e53ce
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ae567e62d141c46e7824136b5f3e53ce))
(Valid (Prims.hasEq BinomialQueue.forest)))
:named haseqTm_refine_ae567e62d141c46e7824136b5f3e53ce))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       BinomialQueue.permutation (BinomialQueue.keys q)
;         (BinomialQueue.keys (BinomialQueue.mk_compact q)) ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (q == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? q) ==>
;         (forall (b: Prims.list BinomialQueue.tree).
;             q == b ==>
;             Cons? q /\
;             (forall (any_result: BinomialQueue.forest).
;                 q == any_result ==>
;                 (forall (any_result: Prims.bool).
;                     BinomialQueue.all_leaf q == any_result ==>
;                     (forall (k: Prims.pure_post Prims.unit).
;                         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                         (BinomialQueue.all_leaf q == true ==>
;                           Cons? q /\
;                           (forall (any_result: BinomialQueue.forest).
;                               q == any_result ==>
;                               Cons? q /\ BinomialQueue.all_leaf q /\
;                               (forall (pure_result: Prims.unit).
;                                   BinomialQueue.permutation (BinomialQueue.keys q)
;                                     BinomialQueue.ms_empty ==>
;                                   k pure_result))) /\
;                         (~(BinomialQueue.all_leaf q = true) ==>
;                           (forall (b: Prims.bool).
;                               BinomialQueue.all_leaf q == b ==>
;                               Cons? q /\
;                               (forall (any_result: BinomialQueue.forest).
;                                   q == any_result ==>
;                                   (forall (any_result: Prims.list BinomialQueue.tree).
;                                       FStar.List.Tot.Base.tl q == any_result ==>
;                                       FStar.List.Tot.Base.tl q << q /\
;                                       (forall (return_val: q: BinomialQueue.forest{q << q}).
;                                           return_val == FStar.List.Tot.Base.tl q ==>
;                                           FStar.List.Tot.Base.tl q == return_val ==>
;                                           (forall (pure_result: Prims.unit).
;                                               BinomialQueue.permutation (BinomialQueue.keys (FStar.List.Tot.Base.tl
;                                                         q))
;                                                 (BinomialQueue.keys (BinomialQueue.mk_compact (FStar.List.Tot.Base.tl
;                                                             q))) ==>
;                                               k pure_result))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec compact_preserves_keys`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(424,2-429,40); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(424,2-429,40)
(or label_2

;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(424,2-429,40)
(Valid 
;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(424,2-429,40)
(BinomialQueue.permutation (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_0)
(BinomialQueue.keys (BinomialQueue.mk_compact x_07642eb27f8c86505049ec727a4a557c_0)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(424,2-429,40)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(424,2-429,40)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(424,2-429,40)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(424,2-429,40)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(424,2-429,40)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(424,2-429,40)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(424,2-429,40)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(424,2-429,40)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(424,2-429,40)
(and (implies 
;; def=BinomialQueue.fst(420,32-425,6); use=BinomialQueue.fst(424,8-425,6)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(424,2-429,40)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(424,2-429,40)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(424,2-429,40)
(not 
;; def=BinomialQueue.fst(420,32-420,33); use=BinomialQueue.fst(424,8-424,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(420,32-426,5); use=BinomialQueue.fst(424,8-426,5)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x2)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(424,2-429,40)
(and 
;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(427,16-427,17)
(or label_3

;; def=BinomialQueue.fst(94,27-94,34); use=BinomialQueue.fst(427,16-427,17)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.forest)

;; def=BinomialQueue.fst(94,18-420,33); use=BinomialQueue.fst(424,2-429,40)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x3)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=BinomialQueue.fst(427,7-427,17); use=BinomialQueue.fst(427,7-427,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
@x4)
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x6 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(424,2-429,40)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(424,2-429,40)
(ApplyTT @x1
@x6)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(424,2-429,40)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(424,2-429,40)
(ApplyTT @x5
@x6)
)
)
 :weight 0


:pattern ((ApplyTT @x5
@x6))
:qid @query.9))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(424,2-429,40)
(and (implies 
;; def=BinomialQueue.fst(427,7-427,17); use=BinomialQueue.fst(427,7-427,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(424,2-429,40)
(and 
;; def=BinomialQueue.fst(412,32-412,39); use=BinomialQueue.fst(428,23-428,24)
(or label_4

;; def=BinomialQueue.fst(412,32-412,39); use=BinomialQueue.fst(428,23-428,24)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.forest)

;; def=BinomialQueue.fst(412,23-420,33); use=BinomialQueue.fst(424,2-429,40)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(428,9-428,22)
(and 
;; def=BinomialQueue.fst(414,16-414,23); use=BinomialQueue.fst(428,9-428,22)
(or label_5

;; def=BinomialQueue.fst(414,16-414,23); use=BinomialQueue.fst(428,9-428,22)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=BinomialQueue.fst(414,27-414,37); use=BinomialQueue.fst(428,9-428,22)
(or label_6

;; def=BinomialQueue.fst(414,27-414,37); use=BinomialQueue.fst(428,9-428,22)
(BoxBool_proj_0 (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(428,9-428,22)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(415,15-415,44); use=BinomialQueue.fst(428,9-428,22)
(Valid 
;; def=BinomialQueue.fst(415,15-415,44); use=BinomialQueue.fst(428,9-428,22)
(BinomialQueue.permutation (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_0)
(BinomialQueue.ms_empty Dummy_value))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(428,9-428,22)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(428,9-428,22)
(ApplyTT @x5
@x7)
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(424,2-429,40)
(not 
;; def=BinomialQueue.fst(427,7-427,17); use=BinomialQueue.fst(427,7-427,17)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=BinomialQueue.fst(427,7-429,40); use=BinomialQueue.fst(427,7-429,40)
(= (BinomialQueue.all_leaf x_07642eb27f8c86505049ec727a4a557c_0)
@x6)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(424,2-429,40)
(and 
;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(429,38-429,39)
(or label_7

;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(429,38-429,39)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.forest)

;; def=FStar.List.Tot.Base.fst(52,8-52,9); use=BinomialQueue.fst(424,2-429,40)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x7)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(420,32-429,40); use=BinomialQueue.fst(429,9-429,40)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(424,2-429,40)
(and 
;; def=BinomialQueue.fst(424,2-429,40); use=BinomialQueue.fst(429,32-429,40)
(or label_8

;; def=BinomialQueue.fst(424,2-429,40); use=BinomialQueue.fst(429,32-429,40)
(Valid 
;; def=BinomialQueue.fst(424,2-429,40); use=BinomialQueue.fst(429,32-429,40)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
x_07642eb27f8c86505049ec727a4a557c_0)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(424,2-429,40)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Tm_refine_ae567e62d141c46e7824136b5f3e53ce)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(424,2-429,40)
(= @x9
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))


;; def=BinomialQueue.fst(420,32-429,40); use=BinomialQueue.fst(424,2-429,40)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
@x9)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(429,9-429,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(429,9-429,31)
(Valid 
;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(429,9-429,31)
(BinomialQueue.permutation (BinomialQueue.keys (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
(BinomialQueue.keys (BinomialQueue.mk_compact (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(429,9-429,31)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(429,9-429,31)
(ApplyTT @x5
@x10)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.compact_preserves_keys, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_0, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_empty, equation_BinomialQueue.permutation, equation_FStar.List.Tot.Base.tail, equation_FStar.List.Tot.Base.tl, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.mk_compact.fuel_instrumented, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys, typing_BinomialQueue.mk_compact, typing_FStar.Set.empty, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec compact_preserves_keys


; <Start encoding let rec compact_preserves_keys>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.compact_preserves_keys (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.compact_preserves_keys@tok () Term)

; </end encoding let rec compact_preserves_keys>


; encoding sigelt val BinomialQueue.insert_repr


; <Skipped val BinomialQueue.insert_repr/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.insert; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(196,4-196,10); use=BinomialQueue.fst(196,4-196,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.key_t)
(HasType @x1
BinomialQueue.priq))
(HasType (BinomialQueue.insert @x0
@x1)
BinomialQueue.priq))
 

:pattern ((BinomialQueue.insert @x0
@x1))
:qid typing_BinomialQueue.insert))

:named typing_BinomialQueue.insert))
;;;;;;;;;;;;;;;;Lemma: BinomialQueue.compact_preserves_keys
;;; Fact-ids: Name BinomialQueue.compact_preserves_keys; Namespace BinomialQueue
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.forest)

;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(421,10-421,54)
(Valid 
;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(421,10-421,54)
(BinomialQueue.permutation (BinomialQueue.keys.fuel_instrumented ZFuel
@x0)
(BinomialQueue.keys.fuel_instrumented ZFuel
(BinomialQueue.mk_compact.fuel_instrumented ZFuel
@x0)))
)
)
 

:pattern ((BinomialQueue.keys.fuel_instrumented ZFuel
(BinomialQueue.mk_compact.fuel_instrumented ZFuel
@x0)))
:qid lemma_BinomialQueue.compact_preserves_keys))
:named lemma_BinomialQueue.compact_preserves_keys))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.insert
;;; Fact-ids: Name BinomialQueue.insert; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(196,4-196,10); use=BinomialQueue.fst(196,4-196,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.insert @x0
@x1)
(BinomialQueue.mk_compact (BinomialQueue.carry (BoxInt 1)
@x1
(BinomialQueue.Internal BinomialQueue.Leaf@tok
@x0
BinomialQueue.Leaf@tok))))
 

:pattern ((BinomialQueue.insert @x0
@x1))
:qid equation_BinomialQueue.insert))

:named equation_BinomialQueue.insert))
(push) ;; push{2

; Starting query at BinomialQueue.fst(434,2-434,58)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (x: BinomialQueue.key_t) (q: BinomialQueue.priq) (s: BinomialQueue.ms).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.repr q s /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.repr (BinomialQueue.insert x q) (BinomialQueue.ms_cons x s) ==> p pure_result) ==>
;     BinomialQueue.is_binomial_queue 1 q /\
;     BinomialQueue.is_pow2heap 1 (BinomialQueue.Internal BinomialQueue.Leaf x BinomialQueue.Leaf) /\
;     BinomialQueue.repr_l q s /\
;     BinomialQueue.repr_t (BinomialQueue.Internal BinomialQueue.Leaf x BinomialQueue.Leaf)
;       (BinomialQueue.ms_singleton x) /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.repr_l (BinomialQueue.carry 1
;               q
;               (BinomialQueue.Internal BinomialQueue.Leaf x BinomialQueue.Leaf))
;           (BinomialQueue.ms_append s (BinomialQueue.ms_singleton x)) ==>
;         p pure_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let insert_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
BinomialQueue.key_t)
(HasType @x1
BinomialQueue.priq)
(HasType @x2
BinomialQueue.ms))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fsti(95,20-95,30); use=BinomialQueue.fst(434,2-434,58)
(Valid 
;; def=BinomialQueue.fsti(95,20-95,30); use=BinomialQueue.fst(434,2-434,58)
(BinomialQueue.repr @x1
@x2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(434,2-434,58)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=BinomialQueue.fsti(96,19-96,50); use=BinomialQueue.fst(434,2-434,58)
(or label_2

;; def=BinomialQueue.fsti(96,19-96,50); use=BinomialQueue.fst(434,2-434,58)
(Valid 
;; def=BinomialQueue.fsti(96,19-96,50); use=BinomialQueue.fst(434,2-434,58)
(BinomialQueue.repr (BinomialQueue.insert @x0
@x1)
(BinomialQueue.ms_cons @x0
@x2))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(434,2-434,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(434,2-434,58)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(434,2-434,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(434,2-434,58)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(434,2-434,58)
(and 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(434,2-434,12)
(or label_3

;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(434,2-434,12)
(Valid 
;; def=BinomialQueue.fst(345,9-345,30); use=BinomialQueue.fst(434,2-434,12)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x1)
)
)


;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(434,2-434,12)
(or label_4

;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(434,2-434,12)
(Valid 
;; def=BinomialQueue.fst(346,9-346,24); use=BinomialQueue.fst(434,2-434,12)
(BinomialQueue.is_pow2heap (BoxInt 1)
(BinomialQueue.Internal BinomialQueue.Leaf@tok
@x0
BinomialQueue.Leaf@tok))
)
)


;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(434,2-434,12)
(or label_5

;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(434,2-434,12)
(Valid 
;; def=BinomialQueue.fst(347,9-347,22); use=BinomialQueue.fst(434,2-434,12)
(BinomialQueue.repr_l @x1
@x2)
)
)


;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(434,2-434,12)
(or label_6

;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(434,2-434,12)
(Valid 
;; def=BinomialQueue.fst(348,9-348,22); use=BinomialQueue.fst(434,2-434,12)
(BinomialQueue.repr_t (BinomialQueue.Internal BinomialQueue.Leaf@tok
@x0
BinomialQueue.Leaf@tok)
(BinomialQueue.ms_singleton @x0))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(434,2-434,58)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(434,2-434,12)
(Valid 
;; def=BinomialQueue.fst(349,15-349,51); use=BinomialQueue.fst(434,2-434,12)
(BinomialQueue.repr_l (BinomialQueue.carry (BoxInt 1)
@x1
(BinomialQueue.Internal BinomialQueue.Leaf@tok
@x0
BinomialQueue.Leaf@tok))
(BinomialQueue.ms_append @x2
(BinomialQueue.ms_singleton @x0)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(434,2-434,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(434,2-434,58)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.insert_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.carry.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented, @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, Prims_pretyping_ae567c2fb75be05905677af440075565, bool_inversion, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, data_elim_BinomialQueue.Mkms, data_typing_intro_BinomialQueue.Internal@tok, eq2-interp, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.insert, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.is_priq, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_BinomialQueue.permutation, equation_BinomialQueue.priq, equation_BinomialQueue.repr, equation_BinomialQueue.repr_l, equation_BinomialQueue.repr_t, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.ms, function_token_typing_BinomialQueue.__proj__Mkms__item__ms_count, function_token_typing_Prims.__cache_version_number__, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82, lemma_BinomialQueue.compact_preserves_keys, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_Subtraction, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_interpretation_Tm_refine_ef894c20818013c5faab7b4bf585814b, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys.fuel_instrumented, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.carry, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.mk_compact, typing_BinomialQueue.ms_append, typing_BinomialQueue.ms_cons, typing_BinomialQueue.ms_singleton, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_Tm_abs_015f65dc738b17ca923c21bdd897be70, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let insert_repr


; <Start encoding let insert_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.insert_repr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.insert_repr@tok () Term)

; </end encoding let insert_repr>


; encoding sigelt #push-options "--z3rlimit_factor 10"


; <Skipped #push-options "--z3rlimit_factor 10"/>


; encoding sigelt val BinomialQueue.merge_repr


; <Skipped val BinomialQueue.merge_repr/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.merge; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(301,4-301,9); use=BinomialQueue.fst(301,4-301,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.priq)
(HasType @x1
BinomialQueue.priq))
(HasType (BinomialQueue.merge @x0
@x1)
BinomialQueue.priq))
 

:pattern ((BinomialQueue.merge @x0
@x1))
:qid typing_BinomialQueue.merge))

:named typing_BinomialQueue.merge))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.merge
;;; Fact-ids: Name BinomialQueue.merge; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(301,4-301,9); use=BinomialQueue.fst(301,4-301,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (BinomialQueue.merge @x0
@x1)
(BinomialQueue.mk_compact (BinomialQueue.join (BoxInt 1)
@x0
@x1
BinomialQueue.Leaf@tok)))
 

:pattern ((BinomialQueue.merge @x0
@x1))
:qid equation_BinomialQueue.merge))

:named equation_BinomialQueue.merge))
(push) ;; push{2

; Starting query at BinomialQueue.fst(438,2-438,37)

(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: BinomialQueue.priq)
;   (q: BinomialQueue.priq)
;   (sp: BinomialQueue.ms)
;   (sq: BinomialQueue.ms).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.repr p sp /\ BinomialQueue.repr q sq /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.repr (BinomialQueue.merge p q) (BinomialQueue.ms_append sp sq) ==>
;         p pure_result) ==>
;     BinomialQueue.is_binomial_queue 1 p /\ BinomialQueue.is_binomial_queue 1 q /\
;     (Leaf? BinomialQueue.Leaf \/ BinomialQueue.is_pow2heap 1 BinomialQueue.Leaf) /\
;     BinomialQueue.repr_l p sp /\ BinomialQueue.repr_l q sq /\
;     BinomialQueue.repr_t BinomialQueue.Leaf BinomialQueue.ms_empty /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.repr_l (BinomialQueue.join 1 p q BinomialQueue.Leaf)
;           (BinomialQueue.ms_append sp (BinomialQueue.ms_append sq BinomialQueue.ms_empty)) ==>
;         p pure_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let merge_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
BinomialQueue.priq)
(HasType @x1
BinomialQueue.priq)
(HasType @x2
BinomialQueue.ms)
(HasType @x3
BinomialQueue.ms))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fsti(99,20-99,31); use=BinomialQueue.fst(438,2-438,37)
(Valid 
;; def=BinomialQueue.fsti(99,20-99,31); use=BinomialQueue.fst(438,2-438,37)
(BinomialQueue.repr @x0
@x2)
)


;; def=BinomialQueue.fsti(99,35-99,46); use=BinomialQueue.fst(438,2-438,37)
(Valid 
;; def=BinomialQueue.fsti(99,35-99,46); use=BinomialQueue.fst(438,2-438,37)
(BinomialQueue.repr @x1
@x3)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(438,2-438,37)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=BinomialQueue.fsti(100,19-100,51); use=BinomialQueue.fst(438,2-438,37)
(or label_2

;; def=BinomialQueue.fsti(100,19-100,51); use=BinomialQueue.fst(438,2-438,37)
(Valid 
;; def=BinomialQueue.fsti(100,19-100,51); use=BinomialQueue.fst(438,2-438,37)
(BinomialQueue.repr (BinomialQueue.merge @x0
@x1)
(BinomialQueue.ms_append @x2
@x3))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(438,2-438,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(438,2-438,37)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(438,2-438,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(438,2-438,37)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(438,2-438,37)
(and 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(438,2-438,11)
(or label_3

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(438,2-438,11)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(438,2-438,11)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x0)
)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(438,2-438,11)
(or label_4

;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(438,2-438,11)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(438,2-438,11)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x1)
)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(438,2-438,11)
(or label_5

;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(438,2-438,11)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(438,2-438,11)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(438,2-438,11)
(BinomialQueue.is_pow2heap (BoxInt 1)
BinomialQueue.Leaf@tok)
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(438,2-438,11)
(or label_6

;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(438,2-438,11)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(438,2-438,11)
(BinomialQueue.repr_l @x0
@x2)
)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(438,2-438,11)
(or label_7

;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(438,2-438,11)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(438,2-438,11)
(BinomialQueue.repr_l @x1
@x3)
)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(438,2-438,11)
(or label_8

;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(438,2-438,11)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(438,2-438,11)
(BinomialQueue.repr_t BinomialQueue.Leaf@tok
(BinomialQueue.ms_empty Dummy_value))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(438,2-438,37)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(438,2-438,11)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(438,2-438,11)
(BinomialQueue.repr_l (BinomialQueue.join (BoxInt 1)
@x0
@x1
BinomialQueue.Leaf@tok)
(BinomialQueue.ms_append @x2
(BinomialQueue.ms_append @x3
(BinomialQueue.ms_empty Dummy_value))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(438,2-438,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(438,2-438,37)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 27232800)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.merge_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.join.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_BinomialQueue.mk_compact.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_BinomialQueue.mk_compact.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, bool_inversion, constructor_distinct_BinomialQueue.Leaf, data_elim_BinomialQueue.Mkms, disc_equation_BinomialQueue.Leaf, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.is_priq, equation_BinomialQueue.key_t, equation_BinomialQueue.merge, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_empty, equation_BinomialQueue.permutation, equation_BinomialQueue.priq, equation_BinomialQueue.repr, equation_BinomialQueue.repr_l, equation_BinomialQueue.repr_t, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.ms, function_token_typing_BinomialQueue.__proj__Mkms__item__ms_count, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, lemma_BinomialQueue.compact_preserves_keys, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_interpretation_Tm_refine_ef894c20818013c5faab7b4bf585814b, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.join, typing_BinomialQueue.keys, typing_BinomialQueue.merge, typing_BinomialQueue.ms_append, typing_BinomialQueue.ms_empty, typing_FStar.Set.empty, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let merge_repr


; <Start encoding let merge_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.merge_repr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.merge_repr@tok () Term)

; </end encoding let merge_repr>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.subset; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(50,4-50,10); use=FStar.Set.fsti(50,4-50,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.subset @x0
@x1
@x2)
Prims.logical))
 

:pattern ((FStar.Set.subset @x0
@x1
@x2))
:qid typing_FStar.Set.subset))

:named typing_FStar.Set.subset))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.subset_mem
;;; Fact-ids: Name FStar.Set.subset_mem; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(95,13-95,27); use=FStar.Set.fsti(95,13-95,27)
(Valid 
;; def=FStar.Set.fsti(95,13-95,27); use=FStar.Set.fsti(95,13-95,27)
(FStar.Set.subset @x0
@x1
@x2)
)
)

;; def=FStar.Set.fsti(96,12-96,45); use=FStar.Set.fsti(96,12-96,45)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
@x0)

;; def=FStar.Set.fsti(96,23-96,31); use=FStar.Set.fsti(96,23-96,31)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x1))
)

;; def=FStar.Set.fsti(96,36-96,44); use=FStar.Set.fsti(96,36-96,44)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.subset_mem.1))
)
 

:pattern ((FStar.Set.subset @x0
@x1
@x2))
:qid lemma_FStar.Set.subset_mem))
:named lemma_FStar.Set.subset_mem))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_subset
;;; Fact-ids: Name FStar.Set.mem_subset; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(90,13-90,46); use=FStar.Set.fsti(90,13-90,46)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
@x0)

;; def=FStar.Set.fsti(90,24-90,32); use=FStar.Set.fsti(90,24-90,32)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x1))
)

;; def=FStar.Set.fsti(90,37-90,45); use=FStar.Set.fsti(90,37-90,45)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.mem_subset.1))
)

;; def=FStar.Set.fsti(91,12-91,26); use=FStar.Set.fsti(91,12-91,26)
(Valid 
;; def=FStar.Set.fsti(91,12-91,26); use=FStar.Set.fsti(91,12-91,26)
(FStar.Set.subset @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.subset @x0
@x1
@x2))
:qid lemma_FStar.Set.mem_subset))
:named lemma_FStar.Set.mem_subset))
;;;;;;;;;;;;;;;;Equation for FStar.Set.subset
;;; Fact-ids: Name FStar.Set.subset; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(50,4-50,10); use=FStar.Set.fsti(50,4-50,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.Set.subset @x0
@x1
@x2))

;; def=FStar.Set.fsti(51,2-51,33); use=FStar.Set.fsti(51,2-51,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
@x0)

;; def=FStar.Set.fsti(51,12-51,20); use=FStar.Set.fsti(51,12-51,20)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x1))
)

;; def=FStar.Set.fsti(51,25-51,33); use=FStar.Set.fsti(51,25-51,33)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid equation_FStar.Set.subset.1))
)
 

:pattern ((FStar.Set.subset @x0
@x1
@x2))
:qid equation_FStar.Set.subset))

:named equation_FStar.Set.subset))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Set.subset
;;; Fact-ids: Name FStar.Set.subset; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(50,4-50,10); use=FStar.Set.fsti(50,4-50,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(Valid (Prims.subtype_of (FStar.Set.subset @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Set.subset @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_FStar.Set.subset))

:named defn_equation_FStar.Set.subset))
(push) ;; push{2

; Starting query at BinomialQueue.fst(450,2-452,32)

;;;;;;;;;;;;;;;;l : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_0 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_0
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_0
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_0))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.last_key_in_keys (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.last_key_in_keys@tok () Term)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_b5c97da7ef7d1b184a7889eebba792ab () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_b5c97da7ef7d1b184a7889eebba792ab
Tm_type)
:named refinement_kinding_Tm_refine_b5c97da7ef7d1b184a7889eebba792ab))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(446,9-447,29); use=BinomialQueue.fst(450,2-452,32)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b5c97da7ef7d1b184a7889eebba792ab)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(450,2-452,32)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))


;; def=BinomialQueue.fst(447,9-447,29); use=BinomialQueue.fst(450,2-452,32)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b5c97da7ef7d1b184a7889eebba792ab))
:qid refinement_interpretation_Tm_refine_b5c97da7ef7d1b184a7889eebba792ab))

:named refinement_interpretation_Tm_refine_b5c97da7ef7d1b184a7889eebba792ab))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b5c97da7ef7d1b184a7889eebba792ab
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b5c97da7ef7d1b184a7889eebba792ab))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_b5c97da7ef7d1b184a7889eebba792ab))

; Encoding query formula : (forall (_: Prims.squash (Cons? l /\ Internal? (FStar.List.Tot.Base.last l))).
;     (*  - Could not prove post-condition
; *)
;     Cons? l /\
;     (forall (any_result: BinomialQueue.forest).
;         l == any_result ==>
;         (forall (any_result: BinomialQueue.tree).
;             FStar.List.Tot.Base.last l == any_result ==>
;             (~(Internal? (FStar.List.Tot.Base.last l)) ==> Prims.l_False) /\
;             (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t) (b: BinomialQueue.tree).
;                 FStar.List.Tot.Base.last l == BinomialQueue.Internal b b b ==>
;                 Prims.hasEq BinomialQueue.key_t /\
;                 (forall (any_result: Type0).
;                     BinomialQueue.key_t == any_result ==> Prims.hasEq BinomialQueue.key_t))))) /\
; (forall (p: Prims.pure_post Prims.unit).
;     Cons? l /\ Internal? (FStar.List.Tot.Base.last l) /\
;     (forall (pure_result: Prims.unit).
;         (let BinomialQueue.Internal _ k _ = FStar.List.Tot.Base.last l in
;           FStar.Set.subset (FStar.Set.singleton k) (BinomialQueue.keys l).ms_elems) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Cons? l && Internal? l.hd && Nil? l.tl) /\ ~(Cons? l) ==> Prims.l_False) /\
;         (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t) (b: BinomialQueue.tree).
;             l == [BinomialQueue.Internal b b b] ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Cons? l && Internal? l.hd && Nil? l.tl) ==>
;           (forall (b: BinomialQueue.tree) (b: Prims.list BinomialQueue.tree).
;               l == b :: b ==>
;               b << l /\
;               (forall (any_result: Prims.list BinomialQueue.tree).
;                   b == any_result ==>
;                   Cons? b /\ Internal? (FStar.List.Tot.Base.last b) /\
;                   (forall (pure_result: Prims.unit).
;                       (let BinomialQueue.Internal _ k _ = FStar.List.Tot.Base.last b in
;                         FStar.Set.subset (FStar.Set.singleton k) (BinomialQueue.keys b).ms_elems) ==>
;                       k pure_result))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec last_key_in_keys`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_b5c97da7ef7d1b184a7889eebba792ab)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(450,2-452,32)
(and 
;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(443,26-443,27)
(or label_1

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(450,2-452,32)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
BinomialQueue.forest)

;; def=FStar.List.Tot.Base.fst(58,10-58,11); use=BinomialQueue.fst(450,2-452,32)
(= x_07642eb27f8c86505049ec727a4a557c_0
@x1)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.tree)

;; def=BinomialQueue.fst(448,20-448,45); use=BinomialQueue.fst(450,2-452,32)
(= (FStar.List.Tot.Base.last BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
@x2)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(450,2-452,32)
(and (implies 
;; def=BinomialQueue.fst(448,20-448,34); use=BinomialQueue.fst(450,2-452,32)
(not 
;; def=BinomialQueue.fst(448,20-448,34); use=BinomialQueue.fst(450,2-452,32)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)))
)

label_2)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.tree)

;; def=BinomialQueue.fst(448,20-448,34); use=BinomialQueue.fst(450,2-452,32)
(= (FStar.List.Tot.Base.last BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
(BinomialQueue.Internal @x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(450,2-452,32)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(449,50-449,58)
(or label_3

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(450,2-452,32)
(Prims.hasEq BinomialQueue.key_t)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Tm_type)

;; def=FStar.Set.fsti(50,13-50,14); use=BinomialQueue.fst(450,2-452,32)
(= BinomialQueue.key_t
@x6)
)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(449,50-449,58)
(or label_4

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(450,2-452,32)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(450,2-452,32)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))


;; def=BinomialQueue.fst(447,9-447,29); use=BinomialQueue.fst(450,2-452,32)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)))


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x1 Term))
 (! (implies (and (or label_5
(HasType @x1
Prims.unit))
(let ((@lb2 (FStar.List.Tot.Base.last BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)))
(ite (is-BinomialQueue.Internal @lb2)

;; def=BinomialQueue.fst(449,16-449,58); use=BinomialQueue.fst(450,2-452,32)
(or label_6

;; def=BinomialQueue.fst(449,16-449,58); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=BinomialQueue.fst(449,16-449,58); use=BinomialQueue.fst(450,2-452,32)
(FStar.Set.subset BinomialQueue.key_t
(FStar.Set.singleton BinomialQueue.key_t
(BinomialQueue.Internal__1 @lb2))
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_0)))
)
)

Unreachable)))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(450,2-452,32)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(450,2-452,32)
(ApplyTT @x0
@x1)
)
)
:qid @query.8))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(450,2-452,32)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(450,2-452,32)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.10))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(450,2-452,32)
(and (implies 
;; def=BinomialQueue.fst(443,26-452,32); use=BinomialQueue.fst(450,2-452,32)
(and 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(450,2-452,32)
(not 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(450,2-452,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
(BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))))
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(Prims.__proj__Cons__item__tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))))
)


;; def=BinomialQueue.fst(443,26-443,27); use=BinomialQueue.fst(450,8-450,9)
(not 
;; def=BinomialQueue.fst(443,26-443,27); use=BinomialQueue.fst(450,8-450,9)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)
)

label_7)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(443,26-451,20); use=BinomialQueue.fst(450,8-451,20)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
@x4)
(Prims.Nil BinomialQueue.tree)))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(450,2-452,32)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(450,2-452,32)
(not 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(450,2-452,32)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0)
(BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))))
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
(Prims.__proj__Cons__item__tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(443,26-452,9); use=BinomialQueue.fst(450,8-452,9)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Cons BinomialQueue.tree
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(450,2-452,32)
(and 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(452,30-452,32)
(or label_8

;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(452,30-452,32)
(Valid 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(452,30-452,32)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_0)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(450,2-452,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(443,26-452,9); use=BinomialQueue.fst(450,2-452,32)
(= @x3
@x4)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(452,13-452,29)
(and 
;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(452,13-452,29)
(or label_9

;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(452,13-452,29)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x3))
)


;; def=BinomialQueue.fst(447,9-447,29); use=BinomialQueue.fst(452,13-452,29)
(or label_10

;; def=BinomialQueue.fst(447,9-447,29); use=BinomialQueue.fst(452,13-452,29)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
@x3)))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(452,13-452,29)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)
(let ((@lb6 (FStar.List.Tot.Base.last BinomialQueue.tree
@x3)))
(ite (is-BinomialQueue.Internal @lb6)

;; def=BinomialQueue.fst(449,16-449,58); use=BinomialQueue.fst(452,13-452,29)
(Valid 
;; def=BinomialQueue.fst(449,16-449,58); use=BinomialQueue.fst(452,13-452,29)
(FStar.Set.subset BinomialQueue.key_t
(FStar.Set.singleton BinomialQueue.key_t
(BinomialQueue.Internal__1 @lb6))
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x3)))
)

Unreachable)))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(452,13-452,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(452,13-452,29)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.7))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.last_key_in_keys, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_0, bool_inversion, constructor_distinct_Prims.Nil, data_elim_BinomialQueue.Internal, data_typing_intro_Prims.Nil@tok, disc_equation_BinomialQueue.Internal, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_singleton, equation_FStar.Set.subset, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.last.fuel_instrumented, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, kinding_BinomialQueue.tree@tok, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_subset, lemma_FStar.Set.mem_union, primitive_Prims.op_AmpAmp, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_Prims.Cons_hd, proj_equation_Prims.Cons_tl, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, refinement_interpretation_Tm_refine_b5c97da7ef7d1b184a7889eebba792ab, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.keys.fuel_instrumented, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_cons, typing_FStar.List.Tot.Base.last, typing_FStar.Set.mem, typing_FStar.Set.singleton, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(443,0-452,32)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_659e0239578fd09dda875978bb7ffa4c (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(443,26-452,32); use=BinomialQueue.fst(443,26-452,32)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_659e0239578fd09dda875978bb7ffa4c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_659e0239578fd09dda875978bb7ffa4c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_659e0239578fd09dda875978bb7ffa4c))

:named refinement_kinding_Tm_refine_659e0239578fd09dda875978bb7ffa4c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(443,26-452,32); use=BinomialQueue.fst(443,26-452,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_659e0239578fd09dda875978bb7ffa4c @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(450,2-452,32)

;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(450,2-452,32)
(Valid 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(450,2-452,32)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_659e0239578fd09dda875978bb7ffa4c @x2)))
:qid refinement_interpretation_Tm_refine_659e0239578fd09dda875978bb7ffa4c))

:named refinement_interpretation_Tm_refine_659e0239578fd09dda875978bb7ffa4c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_659e0239578fd09dda875978bb7ffa4c
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(443,26-452,32); use=BinomialQueue.fst(443,26-452,32)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_659e0239578fd09dda875978bb7ffa4c @x0)))
(Valid (Prims.hasEq BinomialQueue.forest)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_659e0239578fd09dda875978bb7ffa4c @x0))))
:qid haseqTm_refine_659e0239578fd09dda875978bb7ffa4c))

:named haseqTm_refine_659e0239578fd09dda875978bb7ffa4c))
(declare-fun Tm_refine_a4694aff90882905e013f7442fc2a587 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(446,9-447,29); use=BinomialQueue.fst(444,4-444,9)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_a4694aff90882905e013f7442fc2a587 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_a4694aff90882905e013f7442fc2a587 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_a4694aff90882905e013f7442fc2a587))

:named refinement_kinding_Tm_refine_a4694aff90882905e013f7442fc2a587))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(446,9-447,29); use=BinomialQueue.fst(444,4-444,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a4694aff90882905e013f7442fc2a587 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(444,4-444,9)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x2))


;; def=BinomialQueue.fst(447,9-447,29); use=BinomialQueue.fst(444,4-444,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
@x2)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a4694aff90882905e013f7442fc2a587 @x2)))
:qid refinement_interpretation_Tm_refine_a4694aff90882905e013f7442fc2a587))

:named refinement_interpretation_Tm_refine_a4694aff90882905e013f7442fc2a587))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a4694aff90882905e013f7442fc2a587
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(446,9-447,29); use=BinomialQueue.fst(444,4-444,9)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a4694aff90882905e013f7442fc2a587 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a4694aff90882905e013f7442fc2a587 @x0))))
:qid haseqTm_refine_a4694aff90882905e013f7442fc2a587))

:named haseqTm_refine_a4694aff90882905e013f7442fc2a587))


; Encoding query formula : forall (l: BinomialQueue.forest) (l: BinomialQueue.forest{l << l}).
;   (Cons? l ==> l << l ==> Cons? l) /\
;   (forall (any_result: Prims.logical).
;       Cons? l /\ Internal? (FStar.List.Tot.Base.last l) == any_result ==>
;       (Cons? l ==> l << l ==> Cons? l) /\
;       (forall (_: Prims.squash (Cons? l /\ Internal? (FStar.List.Tot.Base.last l))).
;           (*  - Could not prove post-condition
; *)
;           (l << l ==> Cons? l) /\
;           (forall (any_result: l: BinomialQueue.forest{l << l}).
;               l == any_result ==>
;               (forall (any_result: BinomialQueue.tree).
;                   FStar.List.Tot.Base.last l == any_result ==>
;                   (~(Internal? (FStar.List.Tot.Base.last l)) ==> Prims.l_False) /\
;                   (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t) (b: BinomialQueue.tree).
;                       FStar.List.Tot.Base.last l == BinomialQueue.Internal b b b ==>
;                       Prims.hasEq BinomialQueue.key_t /\
;                       (forall (any_result: Type0).
;                           BinomialQueue.key_t == any_result ==> Prims.hasEq BinomialQueue.key_t)))))
;   )


; Context: While encoding a query
; While typechecking the top-level declaration `let rec last_key_in_keys`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(443,0-452,32)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.forest)
(HasType @x1
(Tm_refine_659e0239578fd09dda875978bb7ffa4c @x0)))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(443,26-452,32)
(and (implies (and 
;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(446,9-446,16)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))


;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(447,27-447,28)

;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(447,27-447,28)
(Valid 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(447,27-447,28)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x0)
)

)

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(447,27-447,28)
(or label_1

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(447,27-447,28)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))
)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(443,26-452,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=BinomialQueue.fst(443,26-452,32)
(= (Prims.l_and (Prims.b2t (Prims.uu___is_Cons BinomialQueue.tree
@x1))
(Prims.b2t (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
@x1))))
@x2)
)

;; def=dummy(0,0-0,0); use=BinomialQueue.fst(443,26-452,32)
(and (implies (and 
;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(448,15-449,59)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))


;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(448,15-449,59)

;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(448,15-449,59)
(Valid 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(448,15-449,59)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x0)
)

)

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(447,27-447,28)
(or label_2

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(448,15-449,59)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))
)
)

;; def=dummy(0,0-0,0); use=BinomialQueue.fst(443,26-452,32)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_a4694aff90882905e013f7442fc2a587 @x1))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(448,15-449,59)
(and (implies 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(448,44-448,45)

;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(448,44-448,45)
(Valid 
;; def=BinomialQueue.fst(450,2-452,32); use=BinomialQueue.fst(448,44-448,45)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x0)
)



;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(448,44-448,45)
(or label_3

;; def=FStar.List.Tot.Base.fst(58,21-58,28); use=BinomialQueue.fst(448,44-448,45)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x1))
)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(448,15-449,59)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Tm_refine_659e0239578fd09dda875978bb7ffa4c @x0))

;; def=FStar.List.Tot.Base.fst(58,10-58,11); use=BinomialQueue.fst(448,15-449,59)
(= @x1
@x4)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(448,15-449,59)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.tree)

;; def=BinomialQueue.fst(448,20-448,45); use=BinomialQueue.fst(448,20-448,45)
(= (FStar.List.Tot.Base.last BinomialQueue.tree
@x1)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(448,15-449,59)
(and (implies 
;; def=BinomialQueue.fst(448,20-448,34); use=BinomialQueue.fst(448,20-448,34)
(not 
;; def=BinomialQueue.fst(448,20-448,34); use=BinomialQueue.fst(448,20-448,34)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
@x1)))
)

label_4)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(448,15-449,59)
(forall ((@x6 Term))
 (! (implies (HasType @x6
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(448,15-449,59)
(forall ((@x7 Term))
 (! (implies (HasType @x7
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(448,15-449,59)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
BinomialQueue.tree)

;; def=BinomialQueue.fst(448,20-448,34); use=BinomialQueue.fst(448,20-448,34)
(= (FStar.List.Tot.Base.last BinomialQueue.tree
@x1)
(BinomialQueue.Internal @x6
@x7
@x8))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(448,15-449,59)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(449,50-449,58)
(or label_5

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(449,50-449,58)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(449,50-449,58)
(Prims.hasEq BinomialQueue.key_t)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(448,15-449,59)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Tm_type)

;; def=FStar.Set.fsti(50,13-50,14); use=BinomialQueue.fst(448,15-449,59)
(= BinomialQueue.key_t
@x9)
)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(449,50-449,58)
(or label_6

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(449,50-449,58)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(449,50-449,58)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.last_key_in_keys, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_a4694aff90882905e013f7442fc2a587, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec last_key_in_keys


; <Start encoding let rec last_key_in_keys>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.last_key_in_keys (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.last_key_in_keys@tok () Term)

; </end encoding let rec last_key_in_keys>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(HasType (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid typing_FStar.Pervasives.Native.__proj__Some__item__v))

:named typing_FStar.Pervasives.Native.__proj__Some__item__v))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option @x2))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2)))
:qid refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
(FStar.Pervasives.Native.Some_v @x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid proj_equation_FStar.Pervasives.Native.Some_v))

:named proj_equation_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4d5241eb6fe198666a8101195bbd4a2a
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0))))
:qid haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))
(push) ;; push{2

; Starting query at BinomialQueue.fst(458,2-463,30)

;;;;;;;;;;;;;;;;k : BinomialQueue.key_t (BinomialQueue.key_t)
(declare-fun x_b19ee3ff3f4f676fe283c4905f1b1f83_0 () Term)
;;;;;;;;;;;;;;;;binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0
;;; Fact-ids: 
(assert (! (HasType x_b19ee3ff3f4f676fe283c4905f1b1f83_0
BinomialQueue.key_t)
:named binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0))
;;;;;;;;;;;;;;;;l : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_some_is_some (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_some_is_some@tok () Term)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some k) l) /\
;       k <= (BinomialQueue.find_max (FStar.Pervasives.Native.Some k) l).v ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l) /\ ~(Cons? l && Leaf? l.hd) /\ ~(Cons? l && Internal? l.hd) ==> Prims.l_False) /\
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: Prims.list BinomialQueue.tree).
;             l == BinomialQueue.Leaf :: b ==>
;             b << l /\
;             (forall (any_result: Prims.list BinomialQueue.tree).
;                 b == any_result ==>
;                 (forall (pure_result: Prims.unit).
;                     Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some k) b) /\
;                     k <= (BinomialQueue.find_max (FStar.Pervasives.Native.Some k) b).v ==>
;                     k pure_result))) /\
;         (~(Cons? l && Leaf? l.hd) ==>
;           (forall (b: BinomialQueue.tree)
;               (b: BinomialQueue.key_t)
;               (b: BinomialQueue.tree)
;               (b: Prims.list BinomialQueue.tree).
;               l == BinomialQueue.Internal b b b :: b ==>
;               (forall (k: Prims.pure_post BinomialQueue.key_t).
;                   (forall (x: BinomialQueue.key_t). {:pattern Prims.guard_free (k x)}
;                       ((match k < b with
;                           | true -> b
;                           | _ -> k) ==
;                         x ==>
;                         b << l /\
;                         (forall (any_result: Prims.list BinomialQueue.tree).
;                             b == any_result ==>
;                             (forall (pure_result: Prims.unit).
;                                 Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                         (match k < b with
;                                           | true -> b
;                                           | _ -> k))
;                                       b) /\
;                                 (match k < b with
;                                   | true -> b
;                                   | _ -> k) <=
;                                 (BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                       (match k < b with
;                                         | true -> b
;                                         | _ -> k))
;                                     b)
;                                   .v ==>
;                                 k pure_result))) ==>
;                       k x) ==>
;                   (k < b == true ==> (forall (any_result: BinomialQueue.key_t). k any_result)) /\
;                   (~(k < b = true) ==>
;                     (forall (b: Prims.bool).
;                         k < b == b ==> (forall (any_result: BinomialQueue.key_t). k any_result))))))
;       ))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec find_max_some_is_some`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(455,19-455,46); use=BinomialQueue.fst(458,2-463,30)
(or label_2

;; def=BinomialQueue.fst(455,19-455,46); use=BinomialQueue.fst(458,2-463,30)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
x_07642eb27f8c86505049ec727a4a557c_1)))
)


;; def=BinomialQueue.fst(456,19-456,53); use=BinomialQueue.fst(458,2-463,30)
(or label_3

;; def=BinomialQueue.fst(456,19-456,53); use=BinomialQueue.fst(458,2-463,30)
(<= (BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxInt_proj_0 (FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
x_07642eb27f8c86505049ec727a4a557c_1))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(458,2-463,30)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(458,2-463,30)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(458,2-463,30)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(458,2-463,30)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(458,2-463,30)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(458,2-463,30)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(458,2-463,30)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(458,2-463,30)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(458,2-463,30)
(and (implies 
;; def=BinomialQueue.fst(454,41-463,30); use=BinomialQueue.fst(458,2-463,30)
(and 
;; def=BinomialQueue.fst(454,41-454,42); use=BinomialQueue.fst(458,8-458,9)
(not 
;; def=BinomialQueue.fst(454,41-454,42); use=BinomialQueue.fst(458,8-458,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(458,2-463,30)
(not 
;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(458,2-463,30)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(458,2-463,30)
(not 
;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(458,2-463,30)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)
)

label_4)
(implies 
;; def=BinomialQueue.fst(454,41-459,6); use=BinomialQueue.fst(458,8-459,6)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(458,2-463,30)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(458,2-463,30)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(458,2-463,30)
(not 
;; def=BinomialQueue.fst(454,41-454,42); use=BinomialQueue.fst(458,8-458,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(458,2-463,30)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(454,41-460,12); use=BinomialQueue.fst(458,8-460,12)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(458,2-463,30)
(and 
;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(460,40-460,42)
(or label_5

;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(460,40-460,42)
(Valid 
;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(460,40-460,42)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(454,41-460,12); use=BinomialQueue.fst(458,2-463,30)
(= @x2
@x3)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(460,16-460,37)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(455,19-455,46); use=BinomialQueue.fst(460,16-460,37)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
@x2)))


;; def=BinomialQueue.fst(456,19-456,53); use=BinomialQueue.fst(460,16-460,37)
(<= (BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxInt_proj_0 (FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
@x2))))
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(460,16-460,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(460,16-460,37)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(458,2-463,30)
(not 
;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(458,2-463,30)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(454,41-461,25); use=BinomialQueue.fst(458,8-461,25)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
@x4)
@x5))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post BinomialQueue.key_t))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x7 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(462,8-462,36); use=BinomialQueue.fst(462,8-462,36)
(= (let ((@lb8 (Prims.op_LessThan x_b19ee3ff3f4f676fe283c4905f1b1f83_0
@x3)))
(ite (= @lb8
(BoxBool true))
@x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0))
@x7)


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(458,2-463,30)
(and 
;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(463,28-463,30)
(or label_6

;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(463,28-463,30)
(Valid 
;; def=BinomialQueue.fst(458,2-463,30); use=BinomialQueue.fst(463,28-463,30)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x5
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(454,41-461,25); use=BinomialQueue.fst(458,2-463,30)
(= @x5
@x8)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(463,4-463,25)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=BinomialQueue.fst(455,19-455,46); use=BinomialQueue.fst(463,4-463,25)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb10 (Prims.op_LessThan x_b19ee3ff3f4f676fe283c4905f1b1f83_0
@x3)))
(ite (= @lb10
(BoxBool true))
@x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)))
@x5)))


;; def=BinomialQueue.fst(456,19-456,53); use=BinomialQueue.fst(463,4-463,25)
(<= (BoxInt_proj_0 (let ((@lb10 (Prims.op_LessThan x_b19ee3ff3f4f676fe283c4905f1b1f83_0
@x3)))
(ite (= @lb10
(BoxBool true))
@x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)))
(BoxInt_proj_0 (FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb10 (Prims.op_LessThan x_b19ee3ff3f4f676fe283c4905f1b1f83_0
@x3)))
(ite (= @lb10
(BoxBool true))
@x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)))
@x5))))
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(463,4-463,25)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(463,4-463,25)
(ApplyTT @x1
@x9)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(458,2-463,30)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(458,2-463,30)
(ApplyTT @x6
@x7)
)
)
 :weight 0


:pattern ((ApplyTT @x6
@x7))
:qid @query.13))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(458,2-463,30)
(and (implies 
;; def=BinomialQueue.fst(462,15-462,21); use=BinomialQueue.fst(462,15-462,21)
(= (Prims.op_LessThan x_b19ee3ff3f4f676fe283c4905f1b1f83_0
@x3)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x7 Term))
 (! (implies (HasType @x7
BinomialQueue.key_t)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(458,2-463,30)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(458,2-463,30)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.16))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(458,2-463,30)
(not 
;; def=BinomialQueue.fst(462,15-462,21); use=BinomialQueue.fst(462,15-462,21)
(= (Prims.op_LessThan x_b19ee3ff3f4f676fe283c4905f1b1f83_0
@x3)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.bool)

;; def=BinomialQueue.fst(462,15-462,36); use=BinomialQueue.fst(462,15-462,36)
(= (Prims.op_LessThan x_b19ee3ff3f4f676fe283c4905f1b1f83_0
@x3)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(458,2-463,30)
(forall ((@x8 Term))
 (! (implies (HasType @x8
BinomialQueue.key_t)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(458,2-463,30)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(458,2-463,30)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.find_max_some_is_some, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented, @fuel_irrelevance_BinomialQueue.find_max.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Some@tok, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_Prims.nat, equation_with_fuel_BinomialQueue.find_max.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, int_inversion, kinding_BinomialQueue.tree@tok, lemma_FStar.Pervasives.invertOption, primitive_Prims.op_LessThan, proj_equation_FStar.Pervasives.Native.Some_v, proj_equation_Prims.Cons_hd, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, typing_BinomialQueue.find_max, typing_Prims.__proj__Cons__item__hd, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec find_max_some_is_some


; <Start encoding let rec find_max_some_is_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_some_is_some (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_some_is_some@tok () Term)

; </end encoding let rec find_max_some_is_some>

(push) ;; push{2

; Starting query at BinomialQueue.fst(469,2-471,27)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: BinomialQueue.priq).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.repr_l l BinomialQueue.ms_empty /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.find_max FStar.Pervasives.Native.None l == FStar.Pervasives.Native.None ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Nil? l) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               l == b ==>
;               Cons? l /\ Internal? (FStar.List.Tot.Base.last l) /\
;               (forall (pure_result: Prims.unit).
;                   (let BinomialQueue.Internal _ k _ = FStar.List.Tot.Base.last l in
;                     FStar.Set.subset (FStar.Set.singleton k) (BinomialQueue.keys l).ms_elems) ==>
;                   k pure_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let find_max_emp_repr_l`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.priq)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(467,16-467,35); use=BinomialQueue.fst(469,2-471,27)
(Valid 
;; def=BinomialQueue.fst(467,16-467,35); use=BinomialQueue.fst(469,2-471,27)
(BinomialQueue.repr_l @x0
(BinomialQueue.ms_empty Dummy_value))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(469,2-471,27)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=BinomialQueue.fst(468,15-468,38); use=BinomialQueue.fst(469,2-471,27)
(or label_2

;; def=BinomialQueue.fst(468,15-468,38); use=BinomialQueue.fst(469,2-471,27)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)
(FStar.Pervasives.Native.None BinomialQueue.key_t))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(469,2-471,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(469,2-471,27)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(469,2-471,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(469,2-471,27)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(469,2-471,27)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(469,2-471,27)
(forall ((@x3 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(469,2-471,27)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(469,2-471,27)
(ApplyTT @x1
@x3)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(469,2-471,27)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(469,2-471,27)
(ApplyTT @x2
@x3)
)
)
 :weight 0


:pattern ((ApplyTT @x2
@x3))
:qid @query.4))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(469,2-471,27)
(and (implies 
;; def=BinomialQueue.fst(465,25-470,6); use=BinomialQueue.fst(469,8-470,6)
(= @x0
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(469,2-471,27)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(469,2-471,27)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(469,2-471,27)
(ApplyTT @x2
@x3)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(469,2-471,27)
(not 
;; def=BinomialQueue.fst(465,25-465,26); use=BinomialQueue.fst(469,8-469,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
@x0))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(469,2-471,27)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(465,25-471,5); use=BinomialQueue.fst(469,8-471,5)
(= @x0
@x3)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(471,9-471,25)
(and 
;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(471,9-471,25)
(or label_3

;; def=BinomialQueue.fst(446,9-446,16); use=BinomialQueue.fst(471,9-471,25)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
@x0))
)


;; def=BinomialQueue.fst(447,9-447,29); use=BinomialQueue.fst(471,9-471,25)
(or label_4

;; def=BinomialQueue.fst(447,9-447,29); use=BinomialQueue.fst(471,9-471,25)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (FStar.List.Tot.Base.last BinomialQueue.tree
@x0)))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(471,9-471,25)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)
(let ((@lb5 (FStar.List.Tot.Base.last BinomialQueue.tree
@x0)))
(ite (is-BinomialQueue.Internal @lb5)

;; def=BinomialQueue.fst(449,16-449,58); use=BinomialQueue.fst(471,9-471,25)
(Valid 
;; def=BinomialQueue.fst(449,16-449,58); use=BinomialQueue.fst(471,9-471,25)
(FStar.Set.subset BinomialQueue.key_t
(FStar.Set.singleton BinomialQueue.key_t
(BinomialQueue.Internal__1 @lb5))
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x0)))
)

Unreachable)))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(471,9-471,25)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(471,9-471,25)
(ApplyTT @x2
@x4)
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.find_max_emp_repr_l, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, constructor_distinct_Prims.Nil, data_elim_BinomialQueue.Internal, data_typing_intro_FStar.Pervasives.Native.None@tok, disc_equation_BinomialQueue.Internal, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_compact, equation_BinomialQueue.is_priq, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_empty, equation_BinomialQueue.permutation, equation_BinomialQueue.priq, equation_BinomialQueue.repr_l, equation_FStar.Set.subset, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.find_max.fuel_instrumented, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, kinding_BinomialQueue.tree@tok, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, primitive_Prims.op_Equality, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_BinomialQueue.keys.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.ms_empty, typing_FStar.List.Tot.Base.last, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let find_max_emp_repr_l


; <Start encoding let find_max_emp_repr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_emp_repr_l (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_emp_repr_l@tok () Term)

; </end encoding let find_max_emp_repr_l>

(push) ;; push{2

; Starting query at BinomialQueue.fst(477,2-480,54)

;;;;;;;;;;;;;;;;l : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_0 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_0
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_0
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_0))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_emp_repr_r (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_emp_repr_r@tok () Term)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   BinomialQueue.find_max FStar.Pervasives.Native.None l == FStar.Pervasives.Native.None /\
;   (forall (pure_result: Prims.unit).
;       BinomialQueue.permutation (BinomialQueue.keys l) BinomialQueue.ms_empty ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l) /\ ~(Cons? l && Leaf? l.hd) /\ ~(Cons? l && Internal? l.hd) ==> Prims.l_False) /\
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: Prims.list BinomialQueue.tree).
;             l == BinomialQueue.Leaf :: b ==>
;             b << l /\
;             (forall (any_result: Prims.list BinomialQueue.tree).
;                 b == any_result ==>
;                 BinomialQueue.find_max FStar.Pervasives.Native.None b ==
;                 FStar.Pervasives.Native.None /\
;                 (forall (pure_result: Prims.unit).
;                     BinomialQueue.permutation (BinomialQueue.keys b) BinomialQueue.ms_empty ==>
;                     k pure_result))) /\
;         (~(Cons? l && Leaf? l.hd) ==>
;           (forall (b: BinomialQueue.tree)
;               (b: BinomialQueue.key_t)
;               (b: BinomialQueue.tree)
;               (b: Prims.list BinomialQueue.tree).
;               l == BinomialQueue.Internal b b b :: b ==>
;               (forall (pure_result: Prims.unit).
;                   Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some b) b) /\
;                   b <= (BinomialQueue.find_max (FStar.Pervasives.Native.Some b) b).v ==>
;                   k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec find_max_emp_repr_r`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(475,16-475,39); use=BinomialQueue.fst(477,2-480,54)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
x_07642eb27f8c86505049ec727a4a557c_0)
(FStar.Pervasives.Native.None BinomialQueue.key_t))


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(476,15-476,44); use=BinomialQueue.fst(477,2-480,54)
(or label_2

;; def=BinomialQueue.fst(476,15-476,44); use=BinomialQueue.fst(477,2-480,54)
(Valid 
;; def=BinomialQueue.fst(476,15-476,44); use=BinomialQueue.fst(477,2-480,54)
(BinomialQueue.permutation (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_0)
(BinomialQueue.ms_empty Dummy_value))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(477,2-480,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(477,2-480,54)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(477,2-480,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(477,2-480,54)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(477,2-480,54)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(477,2-480,54)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(477,2-480,54)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(477,2-480,54)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(477,2-480,54)
(and (implies 
;; def=BinomialQueue.fst(473,29-480,54); use=BinomialQueue.fst(477,2-480,54)
(and 
;; def=BinomialQueue.fst(473,29-473,30); use=BinomialQueue.fst(477,8-477,9)
(not 
;; def=BinomialQueue.fst(473,29-473,30); use=BinomialQueue.fst(477,8-477,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(477,2-480,54)
(not 
;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(477,2-480,54)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))))
)


;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(477,2-480,54)
(not 
;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(477,2-480,54)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))))
)
)

label_3)
(implies 
;; def=BinomialQueue.fst(473,29-478,6); use=BinomialQueue.fst(477,8-478,6)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(477,2-480,54)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(477,2-480,54)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(477,2-480,54)
(not 
;; def=BinomialQueue.fst(473,29-473,30); use=BinomialQueue.fst(477,8-477,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(477,2-480,54)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(473,29-479,12); use=BinomialQueue.fst(477,8-479,12)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(477,2-480,54)
(and 
;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(479,36-479,38)
(or label_4

;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(479,36-479,38)
(Valid 
;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(479,36-479,38)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_0)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(473,29-479,12); use=BinomialQueue.fst(477,2-480,54)
(= @x2
@x3)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(479,16-479,35)
(and 
;; def=BinomialQueue.fst(475,16-475,39); use=BinomialQueue.fst(479,16-479,35)
(or label_5

;; def=BinomialQueue.fst(475,16-475,39); use=BinomialQueue.fst(479,16-479,35)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x2)
(FStar.Pervasives.Native.None BinomialQueue.key_t))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(479,16-479,35)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(476,15-476,44); use=BinomialQueue.fst(479,16-479,35)
(Valid 
;; def=BinomialQueue.fst(476,15-476,44); use=BinomialQueue.fst(479,16-479,35)
(BinomialQueue.permutation (BinomialQueue.keys @x2)
(BinomialQueue.ms_empty Dummy_value))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(479,16-479,35)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(479,16-479,35)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(477,2-480,54)
(not 
;; def=BinomialQueue.fst(477,2-480,54); use=BinomialQueue.fst(477,2-480,54)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(477,2-480,54)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(473,29-480,24); use=BinomialQueue.fst(477,8-480,24)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
@x4)
@x5))
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(480,28-480,49)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=BinomialQueue.fst(455,19-455,46); use=BinomialQueue.fst(480,28-480,49)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x5)))


;; def=BinomialQueue.fst(456,19-456,53); use=BinomialQueue.fst(480,28-480,49)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x5))))
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(480,28-480,49)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(480,28-480,49)
(ApplyTT @x1
@x6)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.find_max_emp_repr_r, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.find_max.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_0, bool_inversion, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_BinomialQueue.Mkms, data_elim_Prims.Cons, data_typing_intro_FStar.Pervasives.Native.None@tok, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, disc_equation_FStar.Pervasives.Native.Some, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_empty, equation_BinomialQueue.permutation, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.find_max.fuel_instrumented, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_Prims.Cons_hd, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.None_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys, typing_FStar.Set.empty, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec find_max_emp_repr_r


; <Start encoding let rec find_max_emp_repr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_emp_repr_r (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_emp_repr_r@tok () Term)

; </end encoding let rec find_max_emp_repr_r>


; encoding sigelt #push-options "--warn_error -271"


; <Skipped #push-options "--warn_error -271"/>


; encoding sigelt val BinomialQueue.delete_max_none_repr


; <Skipped val BinomialQueue.delete_max_none_repr/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.delete_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(290,4-290,14); use=BinomialQueue.fst(290,4-290,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.priq)
(HasType (BinomialQueue.delete_max @x0)
(FStar.Pervasives.Native.option (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq))))
 

:pattern ((BinomialQueue.delete_max @x0))
:qid typing_BinomialQueue.delete_max))

:named typing_BinomialQueue.delete_max))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.delete_max
;;; Fact-ids: Name BinomialQueue.delete_max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(290,4-290,14); use=BinomialQueue.fst(290,4-290,14)
(forall ((@x0 Term))
 (! (= (BinomialQueue.delete_max @x0)
(let ((@lb1 (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
(ite (is-FStar.Pervasives.Native.None @lb1)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq))
(ite (is-FStar.Pervasives.Native.Some @lb1)
(let ((@lb2 (BinomialQueue.delete_max_aux (FStar.Pervasives.Native.Some_v @lb1)
(BoxInt 1)
@x0)))
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)
(FStar.Pervasives.Native.Mktuple2 BinomialQueue.key_t
BinomialQueue.priq
(FStar.Pervasives.Native.Mktuple3__1 @lb2)
(BinomialQueue.mk_compact (BinomialQueue.join (BoxInt 1)
(FStar.Pervasives.Native.Mktuple3__2 @lb2)
(FStar.Pervasives.Native.Mktuple3__3 @lb2)
BinomialQueue.Leaf@tok)))))
Tm_unit))))
 

:pattern ((BinomialQueue.delete_max @x0))
:qid equation_BinomialQueue.delete_max))

:named equation_BinomialQueue.delete_max))
(push) ;; push{2

; Starting query at BinomialQueue.fst(484,28-496,4)

(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_b4715f7cc377985b14abc27c073f9b34 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(486,6-489,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_b4715f7cc377985b14abc27c073f9b34 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_b4715f7cc377985b14abc27c073f9b34 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_b4715f7cc377985b14abc27c073f9b34))

:named refinement_kinding_Tm_refine_b4715f7cc377985b14abc27c073f9b34))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(486,6-489,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b4715f7cc377985b14abc27c073f9b34 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=BinomialQueue.fst(484,28-496,4)
(not 
;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(484,28-496,4)
(and 
;; def=BinomialQueue.fst(487,18-487,35); use=BinomialQueue.fst(484,28-496,4)
(Valid 
;; def=BinomialQueue.fst(487,18-487,35); use=BinomialQueue.fst(484,28-496,4)
(BinomialQueue.repr @x2
(BinomialQueue.ms_empty Dummy_value))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=BinomialQueue.fst(488,17-488,37); use=BinomialQueue.fst(484,28-496,4)
(= (BinomialQueue.delete_max @x2)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)))
)

;; def=Prims.fst(635,86-635,95); use=BinomialQueue.fst(484,28-496,4)
(not 
;; def=Prims.fst(635,86-635,95); use=BinomialQueue.fst(484,28-496,4)
(= @x3
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_b4715f7cc377985b14abc27c073f9b34.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b4715f7cc377985b14abc27c073f9b34 @x2)))
:qid refinement_interpretation_Tm_refine_b4715f7cc377985b14abc27c073f9b34))

:named refinement_interpretation_Tm_refine_b4715f7cc377985b14abc27c073f9b34))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b4715f7cc377985b14abc27c073f9b34
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(486,6-489,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b4715f7cc377985b14abc27c073f9b34 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b4715f7cc377985b14abc27c073f9b34 @x0))))
:qid haseqTm_refine_b4715f7cc377985b14abc27c073f9b34))

:named haseqTm_refine_b4715f7cc377985b14abc27c073f9b34))
;;;;;;;;;;;;;;;;l: priq   -> FStar.Pervasives.Lemma (requires repr l ms_empty)       (ensures delete_max l == FStar.Pervasives.Native.None)       [SMTPat ()]
(declare-fun Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45
Tm_type)
:named kinding_Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(485,32-489,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45))
:qid BinomialQueue_pre_typing_Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45))

:named BinomialQueue_pre_typing_Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(485,32-489,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45)
(and 
;; def=BinomialQueue.fst(485,32-489,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x1 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(484,28-496,4)
(Valid 
;; def=BinomialQueue.fst(487,18-487,35); use=BinomialQueue.fst(484,28-496,4)
(BinomialQueue.repr @x1
(BinomialQueue.ms_empty Dummy_value))
)

(HasType @x1
BinomialQueue.priq))
(HasType (ApplyTT @x0
@x1)
(Tm_refine_b4715f7cc377985b14abc27c073f9b34 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45))
:qid BinomialQueue_interpretation_Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45))

:named BinomialQueue_interpretation_Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45))
(declare-fun Tm_refine_808db825a206bd9ef7e631ade655c2d7 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(492,6-495,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_808db825a206bd9ef7e631ade655c2d7 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_808db825a206bd9ef7e631ade655c2d7 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_808db825a206bd9ef7e631ade655c2d7))

:named refinement_kinding_Tm_refine_808db825a206bd9ef7e631ade655c2d7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(492,6-495,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_808db825a206bd9ef7e631ade655c2d7 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=BinomialQueue.fst(484,28-496,4)
(not 
;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(484,28-496,4)
(and 
;; def=BinomialQueue.fst(493,18-493,38); use=BinomialQueue.fst(484,28-496,4)
(= (BinomialQueue.delete_max @x2)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)))


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=BinomialQueue.fst(494,17-494,34); use=BinomialQueue.fst(484,28-496,4)
(Valid 
;; def=BinomialQueue.fst(494,17-494,34); use=BinomialQueue.fst(484,28-496,4)
(BinomialQueue.repr @x2
(BinomialQueue.ms_empty Dummy_value))
)
)

;; def=Prims.fst(635,86-635,95); use=BinomialQueue.fst(484,28-496,4)
(not 
;; def=Prims.fst(635,86-635,95); use=BinomialQueue.fst(484,28-496,4)
(= @x3
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_808db825a206bd9ef7e631ade655c2d7.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_808db825a206bd9ef7e631ade655c2d7 @x2)))
:qid refinement_interpretation_Tm_refine_808db825a206bd9ef7e631ade655c2d7))

:named refinement_interpretation_Tm_refine_808db825a206bd9ef7e631ade655c2d7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_808db825a206bd9ef7e631ade655c2d7
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(492,6-495,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_808db825a206bd9ef7e631ade655c2d7 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_808db825a206bd9ef7e631ade655c2d7 @x0))))
:qid haseqTm_refine_808db825a206bd9ef7e631ade655c2d7))

:named haseqTm_refine_808db825a206bd9ef7e631ade655c2d7))
;;;;;;;;;;;;;;;;l: priq   -> FStar.Pervasives.Lemma (requires delete_max l == FStar.Pervasives.Native.None)       (ensures repr l ms_empty)       [SMTPat ()]
(declare-fun Tm_arrow_552246d10885e096d8183a8b4fc96fbe () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_552246d10885e096d8183a8b4fc96fbe
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_552246d10885e096d8183a8b4fc96fbe
Tm_type)
:named kinding_Tm_arrow_552246d10885e096d8183a8b4fc96fbe))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(491,32-495,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_552246d10885e096d8183a8b4fc96fbe)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_552246d10885e096d8183a8b4fc96fbe))
:qid BinomialQueue_pre_typing_Tm_arrow_552246d10885e096d8183a8b4fc96fbe))

:named BinomialQueue_pre_typing_Tm_arrow_552246d10885e096d8183a8b4fc96fbe))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_552246d10885e096d8183a8b4fc96fbe
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(491,32-495,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_552246d10885e096d8183a8b4fc96fbe)
(and 
;; def=BinomialQueue.fst(491,32-495,19); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x1 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(484,28-496,4)
(= (BinomialQueue.delete_max @x1)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)))

(HasType @x1
BinomialQueue.priq))
(HasType (ApplyTT @x0
@x1)
(Tm_refine_808db825a206bd9ef7e631ade655c2d7 @x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid BinomialQueue_interpretation_Tm_arrow_552246d10885e096d8183a8b4fc96fbe.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_552246d10885e096d8183a8b4fc96fbe))
:qid BinomialQueue_interpretation_Tm_arrow_552246d10885e096d8183a8b4fc96fbe))

:named BinomialQueue_interpretation_Tm_arrow_552246d10885e096d8183a8b4fc96fbe))

; Encoding query formula : forall (p: BinomialQueue.priq).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (BinomialQueue.delete_max p == FStar.Pervasives.Native.None <==>
;           BinomialQueue.repr p BinomialQueue.ms_empty) ==>
;         p pure_result) ==>
;     (forall (l: BinomialQueue.priq).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           BinomialQueue.repr l BinomialQueue.ms_empty /\
;           (forall (pure_result: Prims.unit).
;               BinomialQueue.delete_max l == FStar.Pervasives.Native.None ==> p pure_result) ==>
;           BinomialQueue.repr_l l BinomialQueue.ms_empty /\
;           (forall (pure_result: Prims.unit).
;               BinomialQueue.find_max FStar.Pervasives.Native.None l == FStar.Pervasives.Native.None ==>
;               p pure_result)) /\
;     (forall (any_result:
;         (l: BinomialQueue.priq
;             -> FStar.Pervasives.Lemma (requires BinomialQueue.repr l BinomialQueue.ms_empty)
;                 (ensures BinomialQueue.delete_max l == FStar.Pervasives.Native.None)
;                 [SMTPat ()])).
;         (forall (l: BinomialQueue.priq). {:pattern ()}
;             BinomialQueue.repr l BinomialQueue.ms_empty ==>
;             BinomialQueue.delete_max l == FStar.Pervasives.Native.None) ==>
;         (forall (l: BinomialQueue.priq).
;             (*  - Could not prove post-condition
; *)
;             forall (p: Prims.pure_post Prims.unit).
;               BinomialQueue.delete_max l == FStar.Pervasives.Native.None /\
;               (forall (pure_result: Prims.unit).
;                   BinomialQueue.repr l BinomialQueue.ms_empty ==> p pure_result) ==>
;               BinomialQueue.find_max FStar.Pervasives.Native.None l == FStar.Pervasives.Native.None /\
;               (forall (pure_result: Prims.unit).
;                   BinomialQueue.permutation (BinomialQueue.keys l) BinomialQueue.ms_empty ==>
;                   p pure_result)) /\
;         (forall (any_result:
;             (l: BinomialQueue.priq
;                 -> FStar.Pervasives.Lemma
;                     (requires BinomialQueue.delete_max l == FStar.Pervasives.Native.None)
;                     (ensures BinomialQueue.repr l BinomialQueue.ms_empty)
;                     [SMTPat ()])).
;             (forall (l: BinomialQueue.priq). {:pattern ()}
;                 BinomialQueue.delete_max l == FStar.Pervasives.Native.None ==>
;                 BinomialQueue.repr l BinomialQueue.ms_empty) ==>
;             (forall (any_result: Prims.unit). p any_result)))


; Context: While encoding a query
; While typechecking the top-level declaration `let delete_max_none_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.priq)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=BinomialQueue.fsti(103,10-103,55); use=BinomialQueue.fst(484,28-496,4)
(or label_2

;; def=BinomialQueue.fsti(103,10-103,55); use=BinomialQueue.fst(484,28-496,4)
(iff 
;; def=BinomialQueue.fsti(103,11-103,31); use=BinomialQueue.fst(484,28-496,4)
(= (BinomialQueue.delete_max @x0)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)))


;; def=BinomialQueue.fsti(103,37-103,54); use=BinomialQueue.fst(484,28-496,4)
(Valid 
;; def=BinomialQueue.fsti(103,37-103,54); use=BinomialQueue.fst(484,28-496,4)
(BinomialQueue.repr @x0
(BinomialQueue.ms_empty Dummy_value))
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(484,28-496,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(484,28-496,4)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(484,28-496,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(484,28-496,4)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(484,28-496,4)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.priq)

;; def=Prims.fst(406,51-406,91); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(487,18-487,35); use=BinomialQueue.fst(489,22-489,43)
(Valid 
;; def=BinomialQueue.fst(487,18-487,35); use=BinomialQueue.fst(489,22-489,43)
(BinomialQueue.repr @x2
(BinomialQueue.ms_empty Dummy_value))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(489,22-489,43)
(forall ((@x4 Term))
 (! (implies (and (or label_3
(HasType @x4
Prims.unit))

;; def=BinomialQueue.fst(488,17-488,37); use=BinomialQueue.fst(489,22-489,43)
(or label_4

;; def=BinomialQueue.fst(488,17-488,37); use=BinomialQueue.fst(489,22-489,43)
(= (BinomialQueue.delete_max @x2)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(489,22-489,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(489,22-489,43)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(489,22-489,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(489,22-489,43)
(ApplyTT @x3
@x4)
)
)
:qid @query.5))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(489,22-489,43)
(and 
;; def=BinomialQueue.fst(467,16-467,35); use=BinomialQueue.fst(489,22-489,41)
(or label_5

;; def=BinomialQueue.fst(467,16-467,35); use=BinomialQueue.fst(489,22-489,41)
(Valid 
;; def=BinomialQueue.fst(467,16-467,35); use=BinomialQueue.fst(489,22-489,41)
(BinomialQueue.repr_l @x2
(BinomialQueue.ms_empty Dummy_value))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(489,22-489,43)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(468,15-468,38); use=BinomialQueue.fst(489,22-489,41)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x2)
(FStar.Pervasives.Native.None BinomialQueue.key_t))
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(489,22-489,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(489,22-489,43)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_arrow_2799e4bffcaf5df3d2fbe278c5c34a45)

;; def=dummy(0,0-0,0); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
BinomialQueue.priq)

;; def=BinomialQueue.fst(487,18-487,35); use=BinomialQueue.fst(487,18-487,35)
(Valid 
;; def=BinomialQueue.fst(487,18-487,35); use=BinomialQueue.fst(487,18-487,35)
(BinomialQueue.repr @x3
(BinomialQueue.ms_empty Dummy_value))
)
)

;; def=BinomialQueue.fst(488,17-488,37); use=BinomialQueue.fst(488,17-488,37)
(= (BinomialQueue.delete_max @x3)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)))
)
 

:pattern (Tm_unit)
:qid @query.8))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(484,28-496,4)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.priq)

;; def=Prims.fst(406,51-406,91); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(493,18-493,38); use=BinomialQueue.fst(495,22-495,43)
(= (BinomialQueue.delete_max @x3)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)))


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(495,22-495,43)
(forall ((@x5 Term))
 (! (implies (and (or label_6
(HasType @x5
Prims.unit))

;; def=BinomialQueue.fst(494,17-494,34); use=BinomialQueue.fst(495,22-495,43)
(or label_7

;; def=BinomialQueue.fst(494,17-494,34); use=BinomialQueue.fst(495,22-495,43)
(Valid 
;; def=BinomialQueue.fst(494,17-494,34); use=BinomialQueue.fst(495,22-495,43)
(BinomialQueue.repr @x3
(BinomialQueue.ms_empty Dummy_value))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(495,22-495,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(495,22-495,43)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(495,22-495,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(495,22-495,43)
(ApplyTT @x4
@x5)
)
)
:qid @query.11))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(495,22-495,43)
(and 
;; def=BinomialQueue.fst(475,16-475,39); use=BinomialQueue.fst(495,22-495,41)
(or label_8

;; def=BinomialQueue.fst(475,16-475,39); use=BinomialQueue.fst(495,22-495,41)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x3)
(FStar.Pervasives.Native.None BinomialQueue.key_t))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(495,22-495,43)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=BinomialQueue.fst(476,15-476,44); use=BinomialQueue.fst(495,22-495,41)
(Valid 
;; def=BinomialQueue.fst(476,15-476,44); use=BinomialQueue.fst(495,22-495,41)
(BinomialQueue.permutation (BinomialQueue.keys @x3)
(BinomialQueue.ms_empty Dummy_value))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(495,22-495,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(495,22-495,43)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_arrow_552246d10885e096d8183a8b4fc96fbe)

;; def=dummy(0,0-0,0); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.priq)

;; def=BinomialQueue.fst(493,18-493,38); use=BinomialQueue.fst(493,18-493,38)
(= (BinomialQueue.delete_max @x4)
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)))
)

;; def=BinomialQueue.fst(494,17-494,34); use=BinomialQueue.fst(494,17-494,34)
(Valid 
;; def=BinomialQueue.fst(494,17-494,34); use=BinomialQueue.fst(494,17-494,34)
(BinomialQueue.repr @x4
(BinomialQueue.ms_empty Dummy_value))
)
)
 

:pattern (Tm_unit)
:qid @query.14))
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(484,28-496,4)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(484,28-496,4)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(484,28-496,4)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.delete_max_none_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented, @query, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Tm_unit, data_typing_intro_FStar.Pervasives.Native.None@tok, equation_BinomialQueue.delete_max, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_empty, equation_BinomialQueue.priq, equation_BinomialQueue.repr, equation_BinomialQueue.repr_l, equation_Prims.nat, equation_with_fuel_BinomialQueue.find_max.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.option, projection_inverse_FStar.Pervasives.Native.None_a, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_BinomialQueue.find_max

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let delete_max_none_repr


; <Start encoding let delete_max_none_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.delete_max_none_repr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.delete_max_none_repr@tok () Term)

; </end encoding let delete_max_none_repr>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

(push) ;; push{2

; Starting query at BinomialQueue.fst(503,2-505,44)

;;;;;;;;;;;;;;;;l1 : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_0 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_0
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_0
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_0))
;;;;;;;;;;;;;;;;l2 : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;ms1 : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_2 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_2
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_2
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_2))
;;;;;;;;;;;;;;;;ms2 : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_3 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_3
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.keys_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.keys_append@tok () Term)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   BinomialQueue.repr_l l1 ms1 /\ BinomialQueue.repr_l l2 ms2 /\
;   (forall (pure_result: Prims.unit).
;       BinomialQueue.repr_l (l1 @ l2) (BinomialQueue.ms_append ms1 ms2) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l1) /\ ~(Cons? l1) ==> Prims.l_False) /\
;       (l1 == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l1) ==>
;         (forall (b: BinomialQueue.tree) (b: Prims.list BinomialQueue.tree).
;             l1 == b :: b ==>
;             (b << l1 \/
;               b === l1 /\
;               (l2 << l2 \/
;                 (BinomialQueue.keys b << ms1 \/ BinomialQueue.keys b === ms1 /\ ms2 << ms2))) /\
;             (forall (any_result: BinomialQueue.ms).
;                 ms2 == any_result ==>
;                 BinomialQueue.repr_l b (BinomialQueue.keys b) /\ BinomialQueue.repr_l l2 ms2 /\
;                 (forall (pure_result: Prims.unit).
;                     BinomialQueue.repr_l (b @ l2)
;                       (BinomialQueue.ms_append (BinomialQueue.keys b) ms2) ==>
;                     k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec keys_append`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(503,2-505,44)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(503,2-505,44)
(Valid 
;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(503,2-505,44)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_0
x_2841d97f95e403f3d9b78b0c5aec5c0a_2)
)


;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(503,2-505,44)
(Valid 
;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(503,2-505,44)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_1
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(503,2-505,44)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(503,2-505,44)
(or label_2

;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(503,2-505,44)
(Valid 
;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(503,2-505,44)
(BinomialQueue.repr_l (FStar.List.Tot.Base.append BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0
x_07642eb27f8c86505049ec727a4a557c_1)
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_3))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(503,2-505,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(503,2-505,44)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(503,2-505,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(503,2-505,44)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(503,2-505,44)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(503,2-505,44)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(503,2-505,44)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(503,2-505,44)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(503,2-505,44)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(503,2-505,44)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(503,2-505,44)
(and (implies 
;; def=BinomialQueue.fst(499,21-499,23); use=BinomialQueue.fst(503,8-503,10)
(and 
;; def=BinomialQueue.fst(499,21-499,23); use=BinomialQueue.fst(503,8-503,10)
(not 
;; def=BinomialQueue.fst(499,21-499,23); use=BinomialQueue.fst(503,8-503,10)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=BinomialQueue.fst(499,21-499,23); use=BinomialQueue.fst(503,8-503,10)
(not 
;; def=BinomialQueue.fst(499,21-499,23); use=BinomialQueue.fst(503,8-503,10)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)
)

label_3)
(implies 
;; def=BinomialQueue.fst(499,21-504,6); use=BinomialQueue.fst(503,8-504,6)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(503,2-505,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(503,2-505,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(503,2-505,44)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(503,2-505,44)
(not 
;; def=BinomialQueue.fst(499,21-499,23); use=BinomialQueue.fst(503,8-503,10)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_0))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(503,2-505,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(503,2-505,44)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(499,21-505,9); use=BinomialQueue.fst(503,8-505,9)
(= x_07642eb27f8c86505049ec727a4a557c_0
(Prims.Cons BinomialQueue.tree
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(503,2-505,44)
(and 
;; def=BinomialQueue.fst(499,21-505,44); use=BinomialQueue.fst(505,41-505,44)
(or label_4

;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(505,41-505,44)
(Valid 
;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(505,41-505,44)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_0)
)


;; def=BinomialQueue.fst(499,21-505,44); use=BinomialQueue.fst(505,41-505,44)
(and 
;; def=BinomialQueue.fst(499,21-499,23); use=BinomialQueue.fst(505,41-505,44)
(Valid 
;; def=BinomialQueue.fst(499,21-499,23); use=BinomialQueue.fst(505,41-505,44)
(Prims.op_Equals_Equals_Equals BinomialQueue.forest
BinomialQueue.forest
@x3
x_07642eb27f8c86505049ec727a4a557c_0)
)


;; def=BinomialQueue.fst(499,24-505,44); use=BinomialQueue.fst(505,41-505,44)
(or 
;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(505,41-505,44)
(Valid 
;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(505,41-505,44)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
x_07642eb27f8c86505049ec727a4a557c_1
x_07642eb27f8c86505049ec727a4a557c_1)
)


;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(505,41-505,44)
(Valid 
;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(505,41-505,44)
(Prims.precedes BinomialQueue.ms
BinomialQueue.ms
(BinomialQueue.keys @x3)
x_2841d97f95e403f3d9b78b0c5aec5c0a_2)
)


;; def=BinomialQueue.fst(499,36-505,44); use=BinomialQueue.fst(505,41-505,44)
(and 
;; def=BinomialQueue.fst(499,36-499,39); use=BinomialQueue.fst(505,41-505,44)
(Valid 
;; def=BinomialQueue.fst(499,36-499,39); use=BinomialQueue.fst(505,41-505,44)
(Prims.op_Equals_Equals_Equals BinomialQueue.ms
BinomialQueue.ms
(BinomialQueue.keys @x3)
x_2841d97f95e403f3d9b78b0c5aec5c0a_2)
)


;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(505,41-505,44)
(Valid 
;; def=BinomialQueue.fst(503,2-505,44); use=BinomialQueue.fst(505,41-505,44)
(Prims.precedes BinomialQueue.ms
BinomialQueue.ms
x_2841d97f95e403f3d9b78b0c5aec5c0a_3
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(503,2-505,44)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.ms)

;; def=BinomialQueue.fst(499,40-499,43); use=BinomialQueue.fst(503,2-505,44)
(= x_2841d97f95e403f3d9b78b0c5aec5c0a_3
@x4)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(505,13-505,24)
(and 
;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(505,13-505,24)
(or label_5

;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(505,13-505,24)
(Valid 
;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(505,13-505,24)
(BinomialQueue.repr_l @x3
(BinomialQueue.keys @x3))
)
)


;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(505,13-505,24)
(or label_6

;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(505,13-505,24)
(Valid 
;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(505,13-505,24)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_1
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(505,13-505,24)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(505,13-505,24)
(Valid 
;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(505,13-505,24)
(BinomialQueue.repr_l (FStar.List.Tot.Base.append BinomialQueue.tree
@x3
x_07642eb27f8c86505049ec727a4a557c_1)
(BinomialQueue.ms_append (BinomialQueue.keys @x3)
x_2841d97f95e403f3d9b78b0c5aec5c0a_3))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(505,13-505,24)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(505,13-505,24)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.keys_append, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_0, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_2, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_BinomialQueue.Mkms, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_empty, equation_BinomialQueue.permutation, equation_BinomialQueue.repr_l, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, kinding_BinomialQueue.tree@tok, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_append, typing_FStar.List.Tot.Base.append, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec keys_append


; <Start encoding let rec keys_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.keys_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.keys_append@tok () Term)

; </end encoding let rec keys_append>

(push) ;; push{2

; Starting query at BinomialQueue.fst(514,2-522,59)

;;;;;;;;;;;;;;;;d : Prims.nat (Prims.nat)
(declare-fun x_bb4e1c9af0265270f8e7a5f250f730e2_0 () Term)
;;;;;;;;;;;;;;;;binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0
;;; Fact-ids: 
(assert (! (HasType x_bb4e1c9af0265270f8e7a5f250f730e2_0
Prims.nat)
:named binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0))
;;;;;;;;;;;;;;;;upper_bound : BinomialQueue.key_t (BinomialQueue.key_t)
(declare-fun x_b19ee3ff3f4f676fe283c4905f1b1f83_1 () Term)
;;;;;;;;;;;;;;;;binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1
;;; Fact-ids: 
(assert (! (HasType x_b19ee3ff3f4f676fe283c4905f1b1f83_1
BinomialQueue.key_t)
:named binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1))
;;;;;;;;;;;;;;;;t : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_2 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2))
;;;;;;;;;;;;;;;;lt : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_3 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_3
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.unzip_repr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.unzip_repr@tok () Term)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76
Tm_type)
:named refinement_kinding_Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(510,9-511,40); use=BinomialQueue.fst(514,2-522,59)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76))
:qid refinement_interpretation_Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76))

:named refinement_interpretation_Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76))
(declare-fun Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(507,57-522,59); use=BinomialQueue.fst(518,4-518,14)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f))

:named refinement_kinding_Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(507,57-522,59); use=BinomialQueue.fst(518,4-518,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.ms)

;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,4-518,14)

;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,4-518,14)
(Valid 
;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,4-518,14)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f @x2)))
:qid refinement_interpretation_Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f))

:named refinement_interpretation_Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(507,57-522,59); use=BinomialQueue.fst(518,4-518,14)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f @x0)))
(Valid (Prims.hasEq BinomialQueue.ms)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f @x0))))
:qid haseqTm_refine_22f0ffa5e28edeef5760bb57a7044c1f))

:named haseqTm_refine_22f0ffa5e28edeef5760bb57a7044c1f))

; Encoding query formula : (forall (_:
;     Prims.squash (BinomialQueue.pow2heap_pred d upper_bound t /\
;         BinomialQueue.permutation (BinomialQueue.keys_of_tree t) lt)).
;     (*  - Could not prove post-condition
; *)
;     Prims.auto_squash (BinomialQueue.pow2heap_pred d upper_bound t)) /\
; (forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.pow2heap_pred d upper_bound t /\
;     BinomialQueue.permutation (BinomialQueue.keys_of_tree t) lt /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.permutation lt (BinomialQueue.keys (BinomialQueue.unzip d upper_bound t)) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Leaf? t) /\ ~(Internal? t) ==> Prims.l_False) /\
;         (t == BinomialQueue.Leaf ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Leaf? t) ==>
;           (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t) (b: BinomialQueue.tree).
;               t == BinomialQueue.Internal b b b ==>
;               d - 1 >= 0 /\
;               (forall (return_val: Prims.nat).
;                   return_val == d - 1 ==>
;                   BinomialQueue.pow2heap_pred (d - 1) upper_bound b /\
;                   (forall (pure_result: BinomialQueue.priq).
;                       FStar.List.Tot.Base.length pure_result == d - 1 ==>
;                       BinomialQueue.unzip (d - 1) upper_bound b == pure_result ==>
;                       d - 1 >= 0 /\
;                       (forall (return_val: Prims.nat).
;                           return_val == d - 1 ==>
;                           b << t /\
;                           (forall (return_val: lt: BinomialQueue.ms{b << t}).
;                               return_val == BinomialQueue.keys_of_tree b ==>
;                               BinomialQueue.pow2heap_pred (d - 1) upper_bound b /\
;                               BinomialQueue.permutation (BinomialQueue.keys_of_tree b)
;                                 (BinomialQueue.keys_of_tree b) /\
;                               (forall (pure_result: Prims.unit).
;                                   BinomialQueue.permutation (BinomialQueue.keys_of_tree b)
;                                     (BinomialQueue.keys (BinomialQueue.unzip (d - 1) upper_bound b)) ==>
;                                   BinomialQueue.repr_l (BinomialQueue.unzip (d - 1) upper_bound b)
;                                     (BinomialQueue.keys_of_tree b) /\
;                                   BinomialQueue.repr_l [
;                                       BinomialQueue.Internal b b BinomialQueue.Leaf
;                                     ]
;                                     (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                         (BinomialQueue.ms_append (BinomialQueue.ms_singleton b)
;                                             BinomialQueue.ms_empty)) /\
;                                   (forall (pure_result: Prims.unit).
;                                       BinomialQueue.repr_l (BinomialQueue.unzip (d - 1)
;                                             upper_bound
;                                             b @
;                                           [BinomialQueue.Internal b b BinomialQueue.Leaf])
;                                         (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                             (BinomialQueue.ms_append (BinomialQueue.keys_of_tree b)
;                                                 (BinomialQueue.ms_append (BinomialQueue.ms_singleton
;                                                         b)
;                                                     BinomialQueue.ms_empty))) ==>
;                                       k pure_result))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec unzip_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76)

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(512,15-512,60)
(or label_1

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x1 Term))
 (! (implies (and (or label_2
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(514,2-522,59)
(or label_3

;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.permutation x_2841d97f95e403f3d9b78b0c5aec5c0a_3
(BinomialQueue.keys (BinomialQueue.unzip x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(514,2-522,59)
(and (implies 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(and 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(not 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(not 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)

label_4)
(implies 
;; def=BinomialQueue.fst(507,48-515,8); use=BinomialQueue.fst(514,8-515,8)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.Leaf@tok)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(514,2-522,59)
(not 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(507,48-516,25); use=BinomialQueue.fst(514,8-516,25)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
(BinomialQueue.Internal @x2
@x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(514,2-522,59)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(517,18-517,25)
(or label_5

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(517,18-517,25)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(514,2-522,59)
(= @x5
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(517,12-517,17)
(and 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(517,12-517,17)
(or label_6

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(517,12-517,17)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(517,12-517,17)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(517,12-517,17)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.priq)

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(517,12-517,17)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x6)
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))


;; def=BinomialQueue.fst(517,8-517,43); use=BinomialQueue.fst(517,8-517,43)
(= (BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
@x6)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(514,2-522,59)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(518,15-518,22)
(or label_7

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(518,15-518,22)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(514,2-522,59)
(= @x7
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(514,2-522,59)
(and 
;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,41-518,61)
(or label_8

;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,41-518,61)
(Valid 
;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,41-518,61)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x4
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f @x4))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(514,2-522,59)
(= @x8
(BinomialQueue.keys_of_tree @x4))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(518,4-518,14)
(and 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(518,4-518,14)
(or label_9

;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(518,4-518,14)
(Valid 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(518,4-518,14)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
)
)


;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(518,4-518,14)
(or label_10

;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(518,4-518,14)
(Valid 
;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(518,4-518,14)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree @x4)
(BinomialQueue.keys_of_tree @x4))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(518,4-518,14)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(518,4-518,14)
(Valid 
;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(518,4-518,14)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree @x4)
(BinomialQueue.keys (BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)))
)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(519,4-519,15)
(and 
;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(519,4-519,15)
(or label_11

;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(519,4-519,15)
(Valid 
;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(519,4-519,15)
(BinomialQueue.repr_l (BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(BinomialQueue.keys_of_tree @x4))
)
)


;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(519,4-519,15)
(or label_12

;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(519,4-519,15)
(Valid 
;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(519,4-519,15)
(BinomialQueue.repr_l (Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x3)
(BinomialQueue.ms_empty Dummy_value))))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(519,4-519,15)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(519,4-519,15)
(Valid 
;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(519,4-519,15)
(BinomialQueue.repr_l (FStar.List.Tot.Base.append BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree)))
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x4)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x3)
(BinomialQueue.ms_empty Dummy_value)))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(519,4-519,15)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(519,4-519,15)
(ApplyTT @x1
@x10)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.unzip_repr, 1)
; STATUS: unknown because canceled

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='2' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76)

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(512,15-512,60)
(or label_1

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)
x_2841d97f95e403f3d9b78b0c5aec5c0a_3)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x1 Term))
 (! (implies (and (or label_2
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(514,2-522,59)
(or label_3

;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(514,2-522,59)
(BinomialQueue.permutation x_2841d97f95e403f3d9b78b0c5aec5c0a_3
(BinomialQueue.keys (BinomialQueue.unzip x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(514,2-522,59)
(and (implies 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(and 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(not 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(not 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)

label_4)
(implies 
;; def=BinomialQueue.fst(507,48-515,8); use=BinomialQueue.fst(514,8-515,8)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.Leaf@tok)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(514,2-522,59)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(514,2-522,59)
(not 
;; def=BinomialQueue.fst(507,48-507,49); use=BinomialQueue.fst(514,8-514,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(507,48-516,25); use=BinomialQueue.fst(514,8-516,25)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
(BinomialQueue.Internal @x2
@x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(514,2-522,59)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(517,18-517,25)
(or label_5

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(517,18-517,25)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(514,2-522,59)
(= @x5
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(517,12-517,17)
(and 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(517,12-517,17)
(or label_6

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(517,12-517,17)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(517,12-517,17)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(517,12-517,17)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.priq)

;; def=BinomialQueue.fst(243,27-243,42); use=BinomialQueue.fst(517,12-517,17)
(= (FStar.List.Tot.Base.length BinomialQueue.tree
@x6)
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))


;; def=BinomialQueue.fst(517,8-517,43); use=BinomialQueue.fst(517,8-517,43)
(= (BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
@x6)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(514,2-522,59)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(518,15-518,22)
(or label_7

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(518,15-518,22)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(514,2-522,59)
(= @x7
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(514,2-522,59)
(and 
;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,41-518,61)
(or label_8

;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,41-518,61)
(Valid 
;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(518,41-518,61)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x4
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(514,2-522,59)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_22f0ffa5e28edeef5760bb57a7044c1f @x4))

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(514,2-522,59)
(= @x8
(BinomialQueue.keys_of_tree @x4))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(518,4-518,14)
(and 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(518,4-518,14)
(or label_9

;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(518,4-518,14)
(Valid 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(518,4-518,14)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
)
)


;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(518,4-518,14)
(or label_10

;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(518,4-518,14)
(Valid 
;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(518,4-518,14)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree @x4)
(BinomialQueue.keys_of_tree @x4))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(518,4-518,14)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(518,4-518,14)
(Valid 
;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(518,4-518,14)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree @x4)
(BinomialQueue.keys (BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)))
)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(519,4-519,15)
(and 
;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(519,4-519,15)
(or label_11

;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(519,4-519,15)
(Valid 
;; def=BinomialQueue.fst(500,20-500,35); use=BinomialQueue.fst(519,4-519,15)
(BinomialQueue.repr_l (BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(BinomialQueue.keys_of_tree @x4))
)
)


;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(519,4-519,15)
(or label_12

;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(519,4-519,15)
(Valid 
;; def=BinomialQueue.fst(500,39-500,54); use=BinomialQueue.fst(519,4-519,15)
(BinomialQueue.repr_l (Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree))
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x3)
(BinomialQueue.ms_empty Dummy_value))))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(519,4-519,15)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(519,4-519,15)
(Valid 
;; def=BinomialQueue.fst(501,19-501,64); use=BinomialQueue.fst(519,4-519,15)
(BinomialQueue.repr_l (FStar.List.Tot.Base.append BinomialQueue.tree
(BinomialQueue.unzip (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(Prims.Nil BinomialQueue.tree)))
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x4)
(BinomialQueue.ms_append (BinomialQueue.keys_of_tree @x2)
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x3)
(BinomialQueue.ms_empty Dummy_value)))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(519,4-519,15)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(519,4-519,15)
(ApplyTT @x1
@x10)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.unzip_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_correspondence_BinomialQueue.unzip.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_irrelevance_BinomialQueue.unzip.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, Prims_pretyping_ae567c2fb75be05905677af440075565, b2t_def, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_3, binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1, binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2, bool_inversion, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_elim_BinomialQueue.Internal, data_elim_BinomialQueue.Mkms, data_typing_intro_BinomialQueue.Internal@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, eq2-interp, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_BinomialQueue.permutation, equation_BinomialQueue.priq, equation_BinomialQueue.repr_l, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented, equation_with_fuel_BinomialQueue.unzip.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_BinomialQueue.tree, function_token_typing_Prims.__cache_version_number__, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82, kinding_BinomialQueue.tree@tok, l_and-interp, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_5c3c9c367f72c5b0c52f5e58bcc77e76, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_BinomialQueue.Internal, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys.fuel_instrumented, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_append, typing_BinomialQueue.ms_cons, typing_BinomialQueue.ms_empty, typing_BinomialQueue.ms_singleton, typing_FStar.List.Tot.Base.append, typing_FStar.Set.empty, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_Tm_abs_015f65dc738b17ca923c21bdd897be70, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(507,0-522,59)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(507,57-522,59); use=BinomialQueue.fst(507,57-522,59)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f))

:named refinement_kinding_Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(507,57-522,59); use=BinomialQueue.fst(507,57-522,59)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f @x2
@x3))
(and (HasTypeFuel @u0
@x1
BinomialQueue.ms)

;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(514,2-522,59)

;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(514,2-522,59)
(Valid 
;; def=BinomialQueue.fst(514,2-522,59); use=BinomialQueue.fst(514,2-522,59)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x2
@x3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f @x2
@x3)))
:qid refinement_interpretation_Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f))

:named refinement_interpretation_Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(507,57-522,59); use=BinomialQueue.fst(507,57-522,59)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f @x0
@x1)))
(Valid (Prims.hasEq BinomialQueue.ms)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f @x0
@x1))))
:qid haseqTm_refine_d9bca3c3a827aa2e6f6de22b031a123f))

:named haseqTm_refine_d9bca3c3a827aa2e6f6de22b031a123f))
(declare-fun Tm_refine_76adbb251afae091ffb3b3578bcabcfe (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(510,9-511,40); use=BinomialQueue.fst(508,4-508,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_76adbb251afae091ffb3b3578bcabcfe @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_76adbb251afae091ffb3b3578bcabcfe @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_76adbb251afae091ffb3b3578bcabcfe))

:named refinement_kinding_Tm_refine_76adbb251afae091ffb3b3578bcabcfe))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(510,9-511,40); use=BinomialQueue.fst(508,4-508,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_76adbb251afae091ffb3b3578bcabcfe @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(508,4-508,9)
(Valid 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(508,4-508,9)
(BinomialQueue.pow2heap_pred @x2
@x3
@x4)
)


;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(508,4-508,9)
(Valid 
;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(508,4-508,9)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree @x4)
@x5)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_76adbb251afae091ffb3b3578bcabcfe @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_76adbb251afae091ffb3b3578bcabcfe))

:named refinement_interpretation_Tm_refine_76adbb251afae091ffb3b3578bcabcfe))
;;;;;;;;;;;;;;;;haseq for Tm_refine_76adbb251afae091ffb3b3578bcabcfe
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(510,9-511,40); use=BinomialQueue.fst(508,4-508,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_76adbb251afae091ffb3b3578bcabcfe @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_76adbb251afae091ffb3b3578bcabcfe @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_76adbb251afae091ffb3b3578bcabcfe))

:named haseqTm_refine_76adbb251afae091ffb3b3578bcabcfe))

; Encoding query formula : forall (d: Prims.nat)
;   (upper_bound: BinomialQueue.key_t)
;   (t: BinomialQueue.tree)
;   (lt: BinomialQueue.ms)
;   (d: Prims.nat)
;   (upper_bound: BinomialQueue.key_t)
;   (t: BinomialQueue.tree)
;   (lt: BinomialQueue.ms{t << t})
;   (_:
;   Prims.squash (BinomialQueue.pow2heap_pred d upper_bound t /\
;       BinomialQueue.permutation (BinomialQueue.keys_of_tree t) lt)).
;   (*  - Could not prove post-condition
; *)
;   Prims.auto_squash (BinomialQueue.pow2heap_pred d upper_bound t)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec unzip_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(507,0-522,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
BinomialQueue.key_t)
(HasType @x2
BinomialQueue.tree)
(HasType @x3
BinomialQueue.ms)
(HasType @x4
Prims.nat)
(HasType @x5
BinomialQueue.key_t)
(HasType @x6
BinomialQueue.tree)
(HasType @x7
(Tm_refine_d9bca3c3a827aa2e6f6de22b031a123f @x6
@x2))
(HasType @x8
(Tm_refine_76adbb251afae091ffb3b3578bcabcfe @x4
@x5
@x6
@x7)))

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(512,37-512,42)
(or label_1

;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(512,37-512,42)
(Valid 
;; def=BinomialQueue.fst(242,19-242,48); use=BinomialQueue.fst(512,37-512,42)
(BinomialQueue.pow2heap_pred @x4
@x5
@x6)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.unzip_repr, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_76adbb251afae091ffb3b3578bcabcfe

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec unzip_repr


; <Start encoding let rec unzip_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.unzip_repr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.unzip_repr@tok () Term)

; </end encoding let rec unzip_repr>

(push) ;; push{2

; Starting query at BinomialQueue.fst(530,68-533,47)

(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(526,16-526,48); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677))

:named refinement_kinding_Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(526,16-526,48); use=BinomialQueue.fst(530,68-533,47)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(526,16-526,31); use=BinomialQueue.fst(530,68-533,47)
(Valid 
;; def=BinomialQueue.fst(526,16-526,31); use=BinomialQueue.fst(530,68-533,47)
(BinomialQueue.is_pow2heap @x2
@x3)
)


;; def=BinomialQueue.fst(526,35-526,48); use=BinomialQueue.fst(530,68-533,47)
(Valid 
;; def=BinomialQueue.fst(526,35-526,48); use=BinomialQueue.fst(530,68-533,47)
(BinomialQueue.repr_t @x3
@x4)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677))

:named refinement_interpretation_Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(526,16-526,48); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677 @x0
@x1
@x2))))
:qid haseqTm_refine_cac45ff9a964d7cd41d1ef2a8dc06677))

:named haseqTm_refine_cac45ff9a964d7cd41d1ef2a8dc06677))

; Encoding query formula : forall (d: Prims.pos) (t: BinomialQueue.tree) (lt: BinomialQueue.ms).
;   (forall (_: Prims.squash (BinomialQueue.is_pow2heap d t /\ BinomialQueue.repr_t t lt)).
;       (*  - Could not prove post-condition
; *)
;       (~(Internal? t && Leaf? t._2) ==> Prims.l_False) /\
;       (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t).
;           t == BinomialQueue.Internal b b BinomialQueue.Leaf ==> BinomialQueue.is_pow2heap d t)) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       BinomialQueue.is_pow2heap d t /\ BinomialQueue.repr_t t lt /\
;       (forall (pure_result: Prims.unit).
;           (let BinomialQueue.Internal _ k BinomialQueue.Leaf = t in
;             BinomialQueue.permutation lt
;               (BinomialQueue.ms_append (BinomialQueue.ms_singleton k)
;                   (BinomialQueue.keys (BinomialQueue.heap_delete_max d t)))) ==>
;           p pure_result) ==>
;       (~(Internal? t && Leaf? t._2) ==> Prims.l_False) /\
;       (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t).
;           t == BinomialQueue.Internal b b BinomialQueue.Leaf ==>
;           d - 1 >= 0 /\
;           (forall (return_val: Prims.nat).
;               return_val == d - 1 ==>
;               BinomialQueue.pow2heap_pred (d - 1) b b /\
;               BinomialQueue.permutation (BinomialQueue.keys_of_tree b)
;                 (BinomialQueue.keys_of_tree b) /\
;               (forall (pure_result: Prims.unit).
;                   BinomialQueue.permutation (BinomialQueue.keys_of_tree b)
;                     (BinomialQueue.keys (BinomialQueue.unzip (d - 1) b b)) ==>
;                   p pure_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let heap_delete_max_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree)
(HasType @x2
BinomialQueue.ms))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677 @x0
@x1
@x2))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(530,68-533,47)
(and (implies 
;; def=BinomialQueue.fst(528,13-528,33); use=BinomialQueue.fst(530,68-533,47)
(not 
;; def=BinomialQueue.fst(528,13-528,33); use=BinomialQueue.fst(530,68-533,47)
(and (BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 @x1))))
)

label_1)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.key_t)

;; def=BinomialQueue.fst(528,13-528,33); use=BinomialQueue.fst(530,68-533,47)
(= @x1
(BinomialQueue.Internal @x4
@x5
BinomialQueue.Leaf@tok))
)

;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(527,15-530,65)
(or label_2

;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(530,68-533,47)
(Valid 
;; def=BinomialQueue.fst(258,19-258,34); use=BinomialQueue.fst(530,68-533,47)
(BinomialQueue.is_pow2heap @x0
@x1)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(526,16-526,31); use=BinomialQueue.fst(530,68-533,47)
(Valid 
;; def=BinomialQueue.fst(526,16-526,31); use=BinomialQueue.fst(530,68-533,47)
(BinomialQueue.is_pow2heap @x0
@x1)
)


;; def=BinomialQueue.fst(526,35-526,48); use=BinomialQueue.fst(530,68-533,47)
(Valid 
;; def=BinomialQueue.fst(526,35-526,48); use=BinomialQueue.fst(530,68-533,47)
(BinomialQueue.repr_t @x1
@x2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x4 Term))
 (! (implies (and (or label_3
(HasType @x4
Prims.unit))
(let ((@lb5 @x1))
(ite (and (is-BinomialQueue.Internal @lb5)
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 @lb5)))

;; def=BinomialQueue.fst(529,9-530,64); use=BinomialQueue.fst(530,68-533,47)
(or label_4

;; def=BinomialQueue.fst(529,9-530,64); use=BinomialQueue.fst(530,68-533,47)
(Valid 
;; def=BinomialQueue.fst(529,9-530,64); use=BinomialQueue.fst(530,68-533,47)
(BinomialQueue.permutation @x2
(BinomialQueue.ms_append (BinomialQueue.ms_singleton (BinomialQueue.Internal__1 @lb5))
(BinomialQueue.keys (BinomialQueue.heap_delete_max @x0
@x1))))
)
)

Unreachable)))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(530,68-533,47)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(530,68-533,47)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(530,68-533,47)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(530,68-533,47)
(ApplyTT @x3
@x4)
)
)
:qid @query.5))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(530,68-533,47)
(and (implies 
;; def=BinomialQueue.fst(532,6-532,26); use=BinomialQueue.fst(532,6-532,26)
(not 
;; def=BinomialQueue.fst(532,6-532,26); use=BinomialQueue.fst(532,6-532,26)
(and (BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 @x1))))
)

label_5)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
BinomialQueue.key_t)

;; def=BinomialQueue.fst(532,6-532,26); use=BinomialQueue.fst(532,6-532,26)
(= @x1
(BinomialQueue.Internal @x4
@x5
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(530,68-533,47)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(533,13-533,20)
(or label_6

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(533,13-533,20)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(530,68-533,47)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(530,68-533,47)
(= @x6
(Prims.op_Subtraction @x0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(533,2-533,12)
(and 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(533,2-533,12)
(or label_7

;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(533,2-533,12)
(Valid 
;; def=BinomialQueue.fst(510,9-510,38); use=BinomialQueue.fst(533,2-533,12)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction @x0
(BoxInt 1))
@x5
@x4)
)
)


;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(533,2-533,12)
(or label_8

;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(533,2-533,12)
(Valid 
;; def=BinomialQueue.fst(511,9-511,40); use=BinomialQueue.fst(533,2-533,12)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree @x4)
(BinomialQueue.keys_of_tree @x4))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(533,2-533,12)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(533,2-533,12)
(Valid 
;; def=BinomialQueue.fst(512,15-512,60); use=BinomialQueue.fst(533,2-533,12)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree @x4)
(BinomialQueue.keys (BinomialQueue.unzip (Prims.op_Subtraction @x0
(BoxInt 1))
@x5
@x4)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(533,2-533,12)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(533,2-533,12)
(ApplyTT @x3
@x7)
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.heap_delete_max_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_correspondence_BinomialQueue.unzip.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, Prims_pretyping_ae567c2fb75be05905677af440075565, bool_inversion, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Nil, data_elim_BinomialQueue.Internal, data_elim_BinomialQueue.Mkms, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, eq2-interp, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.heap_delete_max, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_BinomialQueue.permutation, equation_BinomialQueue.priq, equation_BinomialQueue.repr_t, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented, equation_with_fuel_BinomialQueue.unzip.fuel_instrumented, false_interp, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_BinomialQueue.tree, function_token_typing_Prims.__cache_version_number__, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, primitive_Prims.op_Subtraction, proj_equation_BinomialQueue.Internal__2, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_0ef537e2d1916c03cee9d0bd5e289de8, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_interpretation_Tm_refine_cac45ff9a964d7cd41d1ef2a8dc06677, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_append, typing_BinomialQueue.ms_singleton, typing_BinomialQueue.unzip, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let heap_delete_max_repr


; <Start encoding let heap_delete_max_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.heap_delete_max_repr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.heap_delete_max_repr@tok () Term)

; </end encoding let heap_delete_max_repr>

(push) ;; push{2

; Starting query at BinomialQueue.fst(536,2-536,42)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: BinomialQueue.key_t) (s: FStar.Set.set BinomialQueue.key_t).
;   (*  - Could not prove post-condition
; *)
;   forall (x: BinomialQueue.key_t).
;     (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;     Prims.hasEq BinomialQueue.key_t


; Context: While encoding a query
; While typechecking the top-level declaration `let max`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.key_t)
(HasType @x1
(FStar.Set.set BinomialQueue.key_t)))

;; def=dummy(0,0-0,0); use=BinomialQueue.fst(536,2-536,42)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.key_t)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(536,30-536,31)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(536,30-536,31)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(536,30-536,31)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.max, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(535,0-536,42)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: BinomialQueue.key_t).
;   (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;   Prims.hasEq BinomialQueue.key_t


; Context: While encoding a query
; While checking for top-level effects
; While typechecking the top-level declaration `let max`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
BinomialQueue.key_t)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(535,27-535,32)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(536,2-536,42)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(536,2-536,42)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.max, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let max


; <Start encoding let max>

(declare-fun BinomialQueue.max (Term Term) Term)
;;;;;;;;;;;;;;;;k: key_t -> s: FStar.Set.set key_t -> Prims.logical
(declare-fun Tm_arrow_4d79ce8c24dda75a6726cbabdbcfb6a7 () Term)
(declare-fun BinomialQueue.max@tok () Term)

; </end encoding let max>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name BinomialQueue.max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(535,4-535,7); use=BinomialQueue.fst(535,4-535,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.key_t)
(HasType @x1
(FStar.Set.set BinomialQueue.key_t)))
(HasType (BinomialQueue.max @x0
@x1)
Prims.logical))
 

:pattern ((BinomialQueue.max @x0
@x1))
:qid typing_BinomialQueue.max))

:named typing_BinomialQueue.max))
;;;;;;;;;;;;;;;;Equation for BinomialQueue.max
;;; Fact-ids: Name BinomialQueue.max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(535,4-535,7); use=BinomialQueue.fst(535,4-535,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (BinomialQueue.max @x0
@x1))

;; def=BinomialQueue.fst(536,2-536,42); use=BinomialQueue.fst(536,2-536,42)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
BinomialQueue.key_t)

;; def=BinomialQueue.fst(536,20-536,31); use=BinomialQueue.fst(536,20-536,31)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
@x2
@x1))
)

;; def=BinomialQueue.fst(536,36-536,42); use=BinomialQueue.fst(536,36-536,42)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x0))
)
 
;;no pats
:qid equation_BinomialQueue.max.1))
)
 

:pattern ((BinomialQueue.max @x0
@x1))
:qid equation_BinomialQueue.max))

:named equation_BinomialQueue.max))
;;;;;;;;;;;;;;;;Prop-typing for BinomialQueue.max
;;; Fact-ids: Name BinomialQueue.max; Namespace BinomialQueue
(assert (! 
;; def=BinomialQueue.fst(535,4-535,7); use=BinomialQueue.fst(535,4-535,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
BinomialQueue.key_t)
(HasType @x1
(FStar.Set.set BinomialQueue.key_t)))
(Valid (Prims.subtype_of (BinomialQueue.max @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (BinomialQueue.max @x0
@x1)
Prims.unit))
:qid defn_equation_BinomialQueue.max))

:named defn_equation_BinomialQueue.max))
(push) ;; push{2

; Starting query at BinomialQueue.fst(544,2-548,50)

;;;;;;;;;;;;;;;;d : Prims.nat (Prims.nat)
(declare-fun x_bb4e1c9af0265270f8e7a5f250f730e2_0 () Term)
;;;;;;;;;;;;;;;;binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0
;;; Fact-ids: 
(assert (! (HasType x_bb4e1c9af0265270f8e7a5f250f730e2_0
Prims.nat)
:named binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0))
;;;;;;;;;;;;;;;;upper_bound : BinomialQueue.key_t (BinomialQueue.key_t)
(declare-fun x_b19ee3ff3f4f676fe283c4905f1b1f83_1 () Term)
;;;;;;;;;;;;;;;;binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1
;;; Fact-ids: 
(assert (! (HasType x_b19ee3ff3f4f676fe283c4905f1b1f83_1
BinomialQueue.key_t)
:named binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1))
;;;;;;;;;;;;;;;;t : BinomialQueue.tree (BinomialQueue.tree)
(declare-fun x_c1ab7496c060d1f2d977fd02b92d48e2_2 () Term)
;;;;;;;;;;;;;;;;binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2
;;; Fact-ids: 
(assert (! (HasType x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.tree)
:named binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.tree_root_is_max_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.tree_root_is_max_aux@tok () Term)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   BinomialQueue.pow2heap_pred d upper_bound t /\
;   (forall (pure_result: Prims.unit).
;       BinomialQueue.max upper_bound (BinomialQueue.keys_of_tree t).ms_elems ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Leaf? t) /\ ~(Internal? t) ==> Prims.l_False) /\
;       (t == BinomialQueue.Leaf ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Leaf? t) ==>
;         (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t) (b: BinomialQueue.tree).
;             t == BinomialQueue.Internal b b b ==>
;             d - 1 >= 0 /\
;             (forall (return_val: Prims.nat).
;                 return_val == d - 1 ==>
;                 b << t /\
;                 (forall (any_result: BinomialQueue.tree).
;                     b == any_result ==>
;                     BinomialQueue.pow2heap_pred (d - 1) b b /\
;                     (forall (pure_result: Prims.unit).
;                         BinomialQueue.max b (BinomialQueue.keys_of_tree b).ms_elems ==>
;                         d - 1 >= 0 /\
;                         (forall (return_val: Prims.nat).
;                             return_val == d - 1 ==>
;                             b << t /\
;                             (forall (any_result: BinomialQueue.tree).
;                                 b == any_result ==>
;                                 BinomialQueue.pow2heap_pred (d - 1) upper_bound b /\
;                                 (forall (pure_result: Prims.unit).
;                                     BinomialQueue.max upper_bound
;                                       (BinomialQueue.keys_of_tree b).ms_elems ==>
;                                     k pure_result)))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec tree_root_is_max_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=BinomialQueue.fst(544,2-548,50); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(544,2-548,50)
(Valid 
;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(544,2-548,50)
(BinomialQueue.pow2heap_pred x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(544,2-548,50)
(or label_2

;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(544,2-548,50)
(Valid 
;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(544,2-548,50)
(BinomialQueue.max x_b19ee3ff3f4f676fe283c4905f1b1f83_1
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree x_c1ab7496c060d1f2d977fd02b92d48e2_2)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(544,2-548,50)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(544,2-548,50)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(544,2-548,50)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(544,2-548,50)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(544,2-548,50)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(544,2-548,50)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(544,2-548,50)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(544,2-548,50)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(544,2-548,50)
(and (implies 
;; def=BinomialQueue.fst(538,58-538,59); use=BinomialQueue.fst(544,8-544,9)
(and 
;; def=BinomialQueue.fst(538,58-538,59); use=BinomialQueue.fst(544,8-544,9)
(not 
;; def=BinomialQueue.fst(538,58-538,59); use=BinomialQueue.fst(544,8-544,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=BinomialQueue.fst(538,58-538,59); use=BinomialQueue.fst(544,8-544,9)
(not 
;; def=BinomialQueue.fst(538,58-538,59); use=BinomialQueue.fst(544,8-544,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)
)

label_3)
(implies 
;; def=BinomialQueue.fst(538,58-545,8); use=BinomialQueue.fst(544,8-545,8)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
BinomialQueue.Leaf@tok)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(544,2-548,50)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(544,2-548,50)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(544,2-548,50)
(not 
;; def=BinomialQueue.fst(538,58-538,59); use=BinomialQueue.fst(544,8-544,9)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf x_c1ab7496c060d1f2d977fd02b92d48e2_2))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.tree)

;; def=BinomialQueue.fst(538,58-546,25); use=BinomialQueue.fst(544,8-546,25)
(= x_c1ab7496c060d1f2d977fd02b92d48e2_2
(BinomialQueue.Internal @x2
@x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(544,2-548,50)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(547,25-547,32)
(or label_4

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(547,25-547,32)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(544,2-548,50)
(= @x5
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(544,2-548,50)
(and 
;; def=BinomialQueue.fst(544,2-548,50); use=BinomialQueue.fst(547,35-547,39)
(or label_5

;; def=BinomialQueue.fst(544,2-548,50); use=BinomialQueue.fst(547,35-547,39)
(Valid 
;; def=BinomialQueue.fst(544,2-548,50); use=BinomialQueue.fst(547,35-547,39)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x2
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.tree)

;; def=BinomialQueue.fst(538,58-546,17); use=BinomialQueue.fst(544,2-548,50)
(= @x2
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(547,4-547,24)
(and 
;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(547,4-547,24)
(or label_6

;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(547,4-547,24)
(Valid 
;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(547,4-547,24)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
@x3
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(547,4-547,24)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(547,4-547,24)
(Valid 
;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(547,4-547,24)
(BinomialQueue.max @x3
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x2)))
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(544,2-548,50)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(548,25-548,32)
(or label_7

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(548,25-548,32)
(>= (BoxInt_proj_0 (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(544,2-548,50)
(= @x8
(Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(544,2-548,50)
(and 
;; def=BinomialQueue.fst(544,2-548,50); use=BinomialQueue.fst(548,45-548,50)
(or label_8

;; def=BinomialQueue.fst(544,2-548,50); use=BinomialQueue.fst(548,45-548,50)
(Valid 
;; def=BinomialQueue.fst(544,2-548,50); use=BinomialQueue.fst(548,45-548,50)
(Prims.precedes BinomialQueue.tree
BinomialQueue.tree
@x4
x_c1ab7496c060d1f2d977fd02b92d48e2_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(544,2-548,50)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
BinomialQueue.tree)

;; def=BinomialQueue.fst(538,58-546,25); use=BinomialQueue.fst(544,2-548,50)
(= @x4
@x9)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(548,4-548,24)
(and 
;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(548,4-548,24)
(or label_9

;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(548,4-548,24)
(Valid 
;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(548,4-548,24)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction x_bb4e1c9af0265270f8e7a5f250f730e2_0
(BoxInt 1))
x_b19ee3ff3f4f676fe283c4905f1b1f83_1
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(548,4-548,24)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(548,4-548,24)
(Valid 
;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(548,4-548,24)
(BinomialQueue.max x_b19ee3ff3f4f676fe283c4905f1b1f83_1
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x4)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(548,4-548,24)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(548,4-548,24)
(ApplyTT @x1
@x10)
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.tree_root_is_max_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_correspondence_BinomialQueue.pow2heap_pred.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.pow2heap_pred.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, b2t_def, binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_1, binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0, binder_x_c1ab7496c060d1f2d977fd02b92d48e2_2, bool_inversion, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.key_t, equation_BinomialQueue.max, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, equation_with_fuel_BinomialQueue.pow2heap_pred.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.tree, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, l_and-interp, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, proj_equation_BinomialQueue.Mkms_ms_elems, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_BinomialQueue.Internal, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_cons, typing_BinomialQueue.ms_singleton, typing_FStar.Set.mem, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec tree_root_is_max_aux


; <Start encoding let rec tree_root_is_max_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.tree_root_is_max_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.tree_root_is_max_aux@tok () Term)

; </end encoding let rec tree_root_is_max_aux>

(push) ;; push{2

; Starting query at BinomialQueue.fst(555,48-557,37)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (d: Prims.pos) (t: BinomialQueue.tree).
;   (forall (_: Prims.squash (BinomialQueue.is_pow2heap d t)).
;       (*  - Could not prove post-condition
; *) ~(Internal? t && Leaf? t._2) ==> Prims.l_False) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       BinomialQueue.is_pow2heap d t /\
;       (forall (pure_result: Prims.unit).
;           (let BinomialQueue.Internal left k BinomialQueue.Leaf = t in
;             BinomialQueue.max k (BinomialQueue.keys_of_tree left).ms_elems) ==>
;           p pure_result) ==>
;       (~(Internal? t && Leaf? t._2) ==> Prims.l_False) /\
;       (forall (b: BinomialQueue.tree) (b: BinomialQueue.key_t).
;           t == BinomialQueue.Internal b b BinomialQueue.Leaf ==>
;           d - 1 >= 0 /\
;           (forall (return_val: Prims.nat).
;               return_val == d - 1 ==>
;               BinomialQueue.pow2heap_pred (d - 1) b b /\
;               (forall (pure_result: Prims.unit).
;                   BinomialQueue.max b (BinomialQueue.keys_of_tree b).ms_elems ==> p pure_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let tree_root_is_max`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
BinomialQueue.tree))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(555,48-557,37)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.squash (BinomialQueue.is_pow2heap @x0
@x1)))

;; def=BinomialQueue.fst(554,14-554,34); use=BinomialQueue.fst(555,48-557,37)
(not 
;; def=BinomialQueue.fst(554,14-554,34); use=BinomialQueue.fst(555,48-557,37)
(and (BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 @x1))))
)
)
label_1)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(552,16-552,31); use=BinomialQueue.fst(555,48-557,37)
(Valid 
;; def=BinomialQueue.fst(552,16-552,31); use=BinomialQueue.fst(555,48-557,37)
(BinomialQueue.is_pow2heap @x0
@x1)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(555,48-557,37)
(forall ((@x3 Term))
 (! (implies (and (or label_2
(HasType @x3
Prims.unit))
(let ((@lb4 @x1))
(ite (and (is-BinomialQueue.Internal @lb4)
(is-BinomialQueue.Leaf (BinomialQueue.Internal__2 @lb4)))

;; def=BinomialQueue.fst(555,10-555,44); use=BinomialQueue.fst(555,48-557,37)
(or label_3

;; def=BinomialQueue.fst(555,10-555,44); use=BinomialQueue.fst(555,48-557,37)
(Valid 
;; def=BinomialQueue.fst(555,10-555,44); use=BinomialQueue.fst(555,48-557,37)
(BinomialQueue.max (BinomialQueue.Internal__1 @lb4)
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree (BinomialQueue.Internal__0 @lb4))))
)
)

Unreachable)))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(555,48-557,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(555,48-557,37)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(555,48-557,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(555,48-557,37)
(ApplyTT @x2
@x3)
)
)
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(555,48-557,37)
(and (implies 
;; def=BinomialQueue.fst(556,6-556,26); use=BinomialQueue.fst(556,6-556,26)
(not 
;; def=BinomialQueue.fst(556,6-556,26); use=BinomialQueue.fst(556,6-556,26)
(and (BoxBool_proj_0 (BinomialQueue.uu___is_Internal @x1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 @x1))))
)

label_4)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(555,48-557,37)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(555,48-557,37)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.key_t)

;; def=BinomialQueue.fst(556,6-556,26); use=BinomialQueue.fst(556,6-556,26)
(= @x1
(BinomialQueue.Internal @x3
@x4
BinomialQueue.Leaf@tok))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(555,48-557,37)
(and 
;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(557,23-557,30)
(or label_5

;; def=Prims.fst(680,18-680,24); use=BinomialQueue.fst(557,23-557,30)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(555,48-557,37)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(555,48-557,37)
(= @x5
(Prims.op_Subtraction @x0
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(557,2-557,22)
(and 
;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(557,2-557,22)
(or label_6

;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(557,2-557,22)
(Valid 
;; def=BinomialQueue.fst(540,16-540,45); use=BinomialQueue.fst(557,2-557,22)
(BinomialQueue.pow2heap_pred (Prims.op_Subtraction @x0
(BoxInt 1))
@x4
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(557,2-557,22)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(557,2-557,22)
(Valid 
;; def=BinomialQueue.fst(541,15-541,56); use=BinomialQueue.fst(557,2-557,22)
(BinomialQueue.max @x4
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(557,2-557,22)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(557,2-557,22)
(ApplyTT @x2
@x6)
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.tree_root_is_max, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_BinomialQueue.Leaf, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.is_pow2heap, equation_Prims.pos, equation_Prims.squash, false_interp, int_inversion, primitive_Prims.op_Subtraction, proj_equation_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let tree_root_is_max


; <Start encoding let tree_root_is_max>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.tree_root_is_max (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.tree_root_is_max@tok () Term)

; </end encoding let tree_root_is_max>


; encoding sigelt #push-options "--z3rlimit 40"


; <Skipped #push-options "--z3rlimit 40"/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! 
;; def=Prims.fst(214,5-214,10); use=Prims.fst(214,5-214,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.logical)
(HasType (Prims.l_not @x0)
Prims.logical))
 

:pattern ((Prims.l_not @x0))
:qid typing_Prims.l_not))

:named typing_Prims.l_not))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,5-204,10); use=Prims.fst(204,5-204,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_imp @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid typing_Prims.l_imp))

:named typing_Prims.l_imp))
;;;;;;;;;;;;;;;;not interpretation
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (not (Valid @x0))
(Valid (Prims.l_not @x0)))
 

:pattern ((Prims.l_not @x0))
:qid l_not-interp))
:named l_not-interp))
;;;;;;;;;;;;;;;;==> interpretation
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (implies (Valid @x0)
(Valid @x1))
(Valid (Prims.l_imp @x0
@x1)))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid l_imp-interp))
:named l_imp-interp))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;Equation for Prims.l_not
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! 
;; def=Prims.fst(214,5-214,10); use=Prims.fst(214,5-214,10)
(forall ((@x0 Term))
 (! (= (Prims.l_not @x0)
(Prims.l_imp @x0
Prims.l_False))
 

:pattern ((Prims.l_not @x0))
:qid equation_Prims.l_not))

:named equation_Prims.l_not))
;;;;;;;;;;;;;;;;Equation for Prims.l_imp
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,5-204,10); use=Prims.fst(204,5-204,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_imp @x0
@x1)
(Prims.squash (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0)))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid equation_Prims.l_imp))

:named equation_Prims.l_imp))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3)))
:qid Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2))

;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2)))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
(push) ;; push{2

; Starting query at BinomialQueue.fst(576,2-588,92)

;;;;;;;;;;;;;;;;m : BinomialQueue.key_t (BinomialQueue.key_t)
(declare-fun x_b19ee3ff3f4f676fe283c4905f1b1f83_0 () Term)
;;;;;;;;;;;;;;;;binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0
;;; Fact-ids: 
(assert (! (HasType x_b19ee3ff3f4f676fe283c4905f1b1f83_0
BinomialQueue.key_t)
:named binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0))
;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_1 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_1
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_1
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_1))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_2 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_2
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_2
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_2))
;;;;;;;;;;;;;;;;x : BinomialQueue.key_t (BinomialQueue.key_t)
(declare-fun x_b19ee3ff3f4f676fe283c4905f1b1f83_3 () Term)
;;;;;;;;;;;;;;;;binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_3
;;; Fact-ids: 
(assert (! (HasType x_b19ee3ff3f4f676fe283c4905f1b1f83_3
BinomialQueue.key_t)
:named binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_3))
;;;;;;;;;;;;;;;;r : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_4 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_4
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_4
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_4))
;;;;;;;;;;;;;;;;p : BinomialQueue.priq (BinomialQueue.priq)
(declare-fun x_3250053aa2b9928fcbec76591a895969_5 () Term)
;;;;;;;;;;;;;;;;binder_x_3250053aa2b9928fcbec76591a895969_5
;;; Fact-ids: 
(assert (! (HasType x_3250053aa2b9928fcbec76591a895969_5
BinomialQueue.priq)
:named binder_x_3250053aa2b9928fcbec76591a895969_5))
;;;;;;;;;;;;;;;;lq : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_6 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_6
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_6
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_6))
;;;;;;;;;;;;;;;;lr : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_7 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_7
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_7
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_7))
;;;;;;;;;;;;;;;;lp : BinomialQueue.ms (BinomialQueue.ms)
(declare-fun x_2841d97f95e403f3d9b78b0c5aec5c0a_8 () Term)
;;;;;;;;;;;;;;;;binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_8
;;; Fact-ids: 
(assert (! (HasType x_2841d97f95e403f3d9b78b0c5aec5c0a_8
BinomialQueue.ms)
:named binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_8))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.delete_max_aux_repr (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.delete_max_aux_repr@tok () Term)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : Prims.hasEq BinomialQueue.key_t /\
; (FStar.Set.mem m (BinomialQueue.keys q).ms_elems /\ BinomialQueue.is_binomial_queue d q /\
;   BinomialQueue.repr_l q lq ==>
;   BinomialQueue.is_binomial_queue d q) /\
; (forall (any_result: Prims.logical).
;     FStar.Set.mem m (BinomialQueue.keys q).ms_elems /\ BinomialQueue.is_binomial_queue d q /\
;     BinomialQueue.repr_l q lq /\
;     (BinomialQueue.delete_max_aux m d q == (x, r, p)) /\
;     BinomialQueue.repr_l r lr /\
;     BinomialQueue.repr_l p lp ==
;     any_result ==>
;     Prims.hasEq BinomialQueue.key_t /\
;     (FStar.Set.mem m (BinomialQueue.keys q).ms_elems /\ BinomialQueue.is_binomial_queue d q /\
;       BinomialQueue.repr_l q lq ==>
;       BinomialQueue.is_binomial_queue d q)) /\
; (forall (p: Prims.pure_post Prims.unit).
;     FStar.Set.mem m (BinomialQueue.keys q).ms_elems /\ BinomialQueue.is_binomial_queue d q /\
;     BinomialQueue.repr_l q lq /\ BinomialQueue.delete_max_aux m d q == (x, r, p) /\
;     BinomialQueue.repr_l r lr /\ BinomialQueue.repr_l p lp /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.permutation lq
;           (BinomialQueue.ms_append (BinomialQueue.ms_singleton x) (BinomialQueue.ms_append lr lp)) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Nil? q) /\ ~(Cons? q && Leaf? q.hd) /\ ~(Cons? q && Internal? q.hd && Leaf? q.hd._2) ==>
;           Prims.l_False) /\
;         (q == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Nil? q) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               q == BinomialQueue.Leaf :: b ==>
;               d + 1 > 0 /\
;               (forall (return_val: Prims.pos).
;                   return_val == d + 1 ==>
;                   Cons? r /\
;                   (forall (any_result: BinomialQueue.forest).
;                       r == any_result ==>
;                       (forall (any_result: Prims.list BinomialQueue.tree).
;                           FStar.List.Tot.Base.tl r == any_result ==>
;                           b << q /\
;                           (forall (any_result: BinomialQueue.ms).
;                               lp == any_result ==>
;                               FStar.Set.mem m (BinomialQueue.keys b).ms_elems /\
;                               BinomialQueue.is_binomial_queue (d + 1) b /\ BinomialQueue.repr_l b lq /\
;                               BinomialQueue.delete_max_aux m (d + 1) b ==
;                               (x,
;                               FStar.List.Tot.Base.tl r,
;                               p) /\ BinomialQueue.repr_l (FStar.List.Tot.Base.tl r) lr /\
;                               BinomialQueue.repr_l p lp /\
;                               (forall (pure_result: Prims.unit).
;                                   BinomialQueue.permutation lq
;                                     (BinomialQueue.ms_append (BinomialQueue.ms_singleton x)
;                                         (BinomialQueue.ms_append lr lp)) ==>
;                                   k pure_result)))))) /\
;           (~(Cons? q && Leaf? q.hd) ==>
;             (forall (b: BinomialQueue.tree)
;                 (b: BinomialQueue.key_t)
;                 (b: Prims.list BinomialQueue.tree).
;                 q == BinomialQueue.Internal b b BinomialQueue.Leaf :: b ==>
;                 (forall (k: Prims.pure_post Prims.unit).
;                     (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                     (b < m == true ==>
;                       BinomialQueue.is_pow2heap d (BinomialQueue.Internal b b BinomialQueue.Leaf) /\
;                       (forall (pure_result: Prims.unit).
;                           BinomialQueue.max b (BinomialQueue.keys_of_tree b).ms_elems ==>
;                           Prims.hasEq BinomialQueue.key_t /\
;                           (forall (any_result: Type0).
;                               BinomialQueue.key_t == any_result ==>
;                               (forall (any_result: Prims.bool).
;                                   FStar.Set.mem m (BinomialQueue.keys_of_tree b).ms_elems ==
;                                   any_result ==>
;                                   (forall (any_result: Prims.logical).
;                                       FStar.Set.mem m (BinomialQueue.keys_of_tree b).ms_elems ==
;                                       any_result ==>
;                                       (forall (any_result: Prims.logical).
;                                           ~(FStar.Set.mem m (BinomialQueue.keys_of_tree b).ms_elems) ==
;                                           any_result ==>
;                                           ~(FStar.Set.mem m (BinomialQueue.keys_of_tree b).ms_elems) /\
;                                           (forall (pure_result: Prims.unit).
;                                               ~(FStar.Set.mem m
;                                                   (BinomialQueue.keys_of_tree b).ms_elems) ==>
;                                               d + 1 > 0 /\
;                                               (forall (return_val: Prims.pos).
;                                                   return_val == d + 1 ==>
;                                                   BinomialQueue.is_binomial_queue (d + 1) b /\
;                                                   (forall (pure_result:
;                                                       BinomialQueue.key_t &
;                                                       BinomialQueue.forest &
;                                                       BinomialQueue.priq).
;                                                       (let x, q, _ = pure_result in
;                                                         m <= x /\
;                                                         BinomialQueue.is_binomial_queue (d + 1) q) ==>
;                                                       BinomialQueue.delete_max_aux m (d + 1) b ==
;                                                       pure_result ==>
;                                                       (forall (b: BinomialQueue.key_t)
;                                                           (b: BinomialQueue.forest)
;                                                           (b: BinomialQueue.priq).
;                                                           BinomialQueue.delete_max_aux m (d + 1) b ==
;                                                           (b,
;                                                           b,
;                                                           b) ==>
;                                                           d + 1 > 0 /\
;                                                           (forall (return_val: Prims.pos).
;                                                               return_val == d + 1 ==>
;                                                               Cons? r /\
;                                                               (forall (any_result:
;                                                                   BinomialQueue.forest).
;                                                                   r == any_result ==>
;                                                                   (forall (any_result:
;                                                                       Prims.list BinomialQueue.tree)
;                                                                     .
;                                                                       FStar.List.Tot.Base.tl r ==
;                                                                       any_result ==>
;                                                                       Cons? r /\
;                                                                       (forall (any_result:
;                                                                           BinomialQueue.forest).
;                                                                           r == any_result ==>
;                                                                           (forall (any_result:
;                                                                               Prims.list BinomialQueue.tree
;                                                                               ).
;                                                                               FStar.List.Tot.Base.tl
;                                                                                 r ==
;                                                                               any_result ==>
;                                                                               (forall (any_result:
;                                                                                   BinomialQueue.ms).
;                                                                                   BinomialQueue.keys
;                                                                                     (FStar.List.Tot.Base.tl
;                                                                                         r) ==
;                                                                                   any_result ==>
;                                                                                   b << q /\
;                                                                                   (forall (any_result:
;                                                                                       BinomialQueue.ms)
;                                                                                     .
;                                                                                       lp ==
;                                                                                       any_result ==>
;                                                                                       FStar.Set.mem m
;                                                                                         (BinomialQueue.keys
;                                                                                             b)
;                                                                                           .ms_elems /\
;                                                                                       BinomialQueue.is_binomial_queue
;                                                                                         (d + 1)
;                                                                                         b /\
;                                                                                       BinomialQueue.repr_l
;                                                                                         b
;                                                                                         (BinomialQueue.keys
;                                                                                             b) /\
;                                                                                       BinomialQueue.delete_max_aux
;                                                                                         m
;                                                                                         (d + 1)
;                                                                                         b ==
;                                                                                       (b,
;                                                                                       FStar.List.Tot.Base.tl
;                                                                                         r,
;                                                                                       p) /\
;                                                                                       BinomialQueue.repr_l
;                                                                                         (FStar.List.Tot.Base.tl
;                                                                                             r)
;                                                                                         (BinomialQueue.keys
;                                                                                             (FStar.List.Tot.Base.tl
;                                                                                                 r)) /\
;                                                                                       BinomialQueue.repr_l
;                                                                                         p
;                                                                                         lp /\
;                                                                                       (forall (pure_result:
;                                                                                           Prims.unit)
;                                                                                         .
;                                                                                           BinomialQueue.permutation
;                                                                                             (BinomialQueue.keys
;                                                                                                 b)
;                                                                                             (BinomialQueue.ms_append
;                                                                                                 (BinomialQueue.ms_singleton
;                                                                                                     b
;                                                                                                   )
;                                                                                                 (BinomialQueue.ms_append
;                                                                                                     (
;                                                                                                       BinomialQueue.keys
;                                                                                                         (
;                                                                                                           FStar.List.Tot.Base.tl
;                                                                                                             r
; 
;                                                                                                         )
; 
;                                                                                                     )
;                                                                                                     lp
;                                                                                                   )) ==>
;                                                                                           k pure_result
;                                                                                           ))))))))))
;                                               )))))))) /\
;                     (~(b < m = true) ==>
;                       (forall (b: Prims.bool).
;                           b < m == b ==>
;                           BinomialQueue.is_pow2heap d
;                             (BinomialQueue.Internal b b BinomialQueue.Leaf) /\
;                           BinomialQueue.repr_t (BinomialQueue.Internal b b BinomialQueue.Leaf)
;                             (BinomialQueue.keys_of_tree (BinomialQueue.Internal b
;                                     b
;                                     BinomialQueue.Leaf)) /\
;                           (forall (pure_result: Prims.unit).
;                               BinomialQueue.permutation (BinomialQueue.keys_of_tree (BinomialQueue.Internal
;                                         b b BinomialQueue.Leaf))
;                                 (BinomialQueue.ms_append (BinomialQueue.ms_singleton b)
;                                     (BinomialQueue.keys (BinomialQueue.heap_delete_max d
;                                             (BinomialQueue.Internal b b BinomialQueue.Leaf)))) ==>
;                               k pure_result)))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec delete_max_aux_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-459,89); use=Prims.fst(430,19-430,32)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(565,26-565,34)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(576,2-588,92)
(Prims.hasEq BinomialQueue.key_t)
)
)

(implies 
;; def=BinomialQueue.fst(565,9-567,22); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(576,2-588,92)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_2))))


;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)
)
)


;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(576,2-588,92)
(or label_2

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
)
)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=BinomialQueue.fst(576,2-588,92)
(= (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.b2t (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_2))))
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2))
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_6))
(Prims.eq2 (FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq)
(BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
x_b19ee3ff3f4f676fe283c4905f1b1f83_3
x_07642eb27f8c86505049ec727a4a557c_4
x_3250053aa2b9928fcbec76591a895969_5)))
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_4
x_2841d97f95e403f3d9b78b0c5aec5c0a_7))
(BinomialQueue.repr_l x_3250053aa2b9928fcbec76591a895969_5
x_2841d97f95e403f3d9b78b0c5aec5c0a_8))
@x0)
)

;; def=BinomialQueue.fst(271,19-567,22); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(563,4-563,9)
(or label_3

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(576,2-588,92)
(Prims.hasEq BinomialQueue.key_t)
)
)

(implies 
;; def=BinomialQueue.fst(565,9-567,22); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(576,2-588,92)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_2))))


;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)
)
)


;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(576,2-588,92)
(or label_4

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
)
)
))
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(576,2-588,92)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_2))))


;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_2
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)
)


;; def=BinomialQueue.fst(568,9-568,42); use=BinomialQueue.fst(576,2-588,92)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
x_f26957a7e62b271a8736230b1e9c83c1_1
x_07642eb27f8c86505049ec727a4a557c_2)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
x_b19ee3ff3f4f676fe283c4905f1b1f83_3
x_07642eb27f8c86505049ec727a4a557c_4
x_3250053aa2b9928fcbec76591a895969_5))


;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.repr_l x_07642eb27f8c86505049ec727a4a557c_4
x_2841d97f95e403f3d9b78b0c5aec5c0a_7)
)


;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.repr_l x_3250053aa2b9928fcbec76591a895969_5
x_2841d97f95e403f3d9b78b0c5aec5c0a_8)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x1 Term))
 (! (implies (and (or label_5
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(576,2-588,92)
(or label_6

;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(576,2-588,92)
(BinomialQueue.permutation x_2841d97f95e403f3d9b78b0c5aec5c0a_6
(BinomialQueue.ms_append (BinomialQueue.ms_singleton x_b19ee3ff3f4f676fe283c4905f1b1f83_3)
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_7
x_2841d97f95e403f3d9b78b0c5aec5c0a_8)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(576,2-588,92)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(576,2-588,92)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(576,2-588,92)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(576,2-588,92)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and (implies 
;; def=BinomialQueue.fst(560,47-588,92); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=BinomialQueue.fst(560,47-560,48); use=BinomialQueue.fst(576,8-576,9)
(not 
;; def=BinomialQueue.fst(560,47-560,48); use=BinomialQueue.fst(576,8-576,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
)


;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(576,2-588,92)
(not 
;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(576,2-588,92)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
)


;; def=BinomialQueue.fst(580,5-580,13); use=BinomialQueue.fst(580,5-580,13)
(not 
;; def=BinomialQueue.fst(580,5-580,13); use=BinomialQueue.fst(580,5-580,13)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2)
(BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2)))))
)
)

label_7)
(implies 
;; def=BinomialQueue.fst(560,47-577,6); use=BinomialQueue.fst(576,8-577,6)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(576,2-588,92)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(576,2-588,92)
(not 
;; def=BinomialQueue.fst(560,47-560,48); use=BinomialQueue.fst(576,8-576,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(560,47-578,11); use=BinomialQueue.fst(576,8-578,11)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(579,26-579,33)
(or label_8

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(579,26-579,33)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(576,2-588,92)
(= @x3
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(579,44-579,45)
(or label_9

;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(579,44-579,45)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
BinomialQueue.forest)

;; def=FStar.List.Tot.Base.fst(52,8-52,9); use=BinomialQueue.fst(576,2-588,92)
(= x_07642eb27f8c86505049ec727a4a557c_4
@x4)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(561,13-579,46); use=BinomialQueue.fst(576,2-588,92)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(579,55-579,57)
(or label_10

;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(579,55-579,57)
(Valid 
;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(579,55-579,57)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
BinomialQueue.ms)

;; def=BinomialQueue.fst(562,9-562,11); use=BinomialQueue.fst(576,2-588,92)
(= x_2841d97f95e403f3d9b78b0c5aec5c0a_8
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(579,4-579,23)
(and 
;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(579,4-579,23)
(or label_11

;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(579,4-579,23)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x2))))
)


;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(579,4-579,23)
(or label_12

;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(579,4-579,23)
(Valid 
;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(579,4-579,23)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x2)
)
)


;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(579,4-579,23)
(or label_13

;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(579,4-579,23)
(Valid 
;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(579,4-579,23)
(BinomialQueue.repr_l @x2
x_2841d97f95e403f3d9b78b0c5aec5c0a_6)
)
)


;; def=BinomialQueue.fst(568,9-568,42); use=BinomialQueue.fst(579,4-579,23)
(or label_14

;; def=BinomialQueue.fst(568,9-568,42); use=BinomialQueue.fst(579,4-579,23)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x2)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
x_b19ee3ff3f4f676fe283c4905f1b1f83_3
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4)
x_3250053aa2b9928fcbec76591a895969_5))
)


;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(579,4-579,23)
(or label_15

;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(579,4-579,23)
(Valid 
;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(579,4-579,23)
(BinomialQueue.repr_l (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4)
x_2841d97f95e403f3d9b78b0c5aec5c0a_7)
)
)


;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(579,4-579,23)
(or label_16

;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(579,4-579,23)
(Valid 
;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(579,4-579,23)
(BinomialQueue.repr_l x_3250053aa2b9928fcbec76591a895969_5
x_2841d97f95e403f3d9b78b0c5aec5c0a_8)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(579,4-579,23)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(579,4-579,23)
(Valid 
;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(579,4-579,23)
(BinomialQueue.permutation x_2841d97f95e403f3d9b78b0c5aec5c0a_6
(BinomialQueue.ms_append (BinomialQueue.ms_singleton x_b19ee3ff3f4f676fe283c4905f1b1f83_3)
(BinomialQueue.ms_append x_2841d97f95e403f3d9b78b0c5aec5c0a_7
x_2841d97f95e403f3d9b78b0c5aec5c0a_8)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(579,4-579,23)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(579,4-579,23)
(ApplyTT @x1
@x7)
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(576,2-588,92)
(not 
;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(576,2-588,92)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(560,47-580,29); use=BinomialQueue.fst(576,8-580,29)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
@x4))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x6 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(576,2-588,92)
(ApplyTT @x1
@x6)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(576,2-588,92)
(ApplyTT @x5
@x6)
)
)
 :weight 0


:pattern ((ApplyTT @x5
@x6))
:qid @query.16))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(576,2-588,92)
(and (implies 
;; def=BinomialQueue.fst(581,7-581,12); use=BinomialQueue.fst(581,7-581,12)
(= (Prims.op_LessThan @x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxBool true))


;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(583,6-583,22)
(and 
;; def=BinomialQueue.fst(552,16-552,31); use=BinomialQueue.fst(583,6-583,22)
(or label_17

;; def=BinomialQueue.fst(552,16-552,31); use=BinomialQueue.fst(583,6-583,22)
(Valid 
;; def=BinomialQueue.fst(552,16-552,31); use=BinomialQueue.fst(583,6-583,22)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_1
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(583,6-583,22)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=BinomialQueue.fst(555,10-555,44); use=BinomialQueue.fst(583,6-583,22)
(Valid 
;; def=BinomialQueue.fst(555,10-555,44); use=BinomialQueue.fst(583,6-583,22)
(BinomialQueue.max @x3
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x2)))
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(584,45-584,53)
(or label_18

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(584,45-584,53)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(584,45-584,53)
(Prims.hasEq BinomialQueue.key_t)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Tm_type)

;; def=FStar.Set.fsti(30,10-30,11); use=BinomialQueue.fst(576,2-588,92)
(= BinomialQueue.key_t
@x7)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=BinomialQueue.fst(576,2-588,92)
(= (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x2)))
@x8)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.logical)

;; def=Prims.fst(214,12-214,13); use=BinomialQueue.fst(576,2-588,92)
(= (Prims.b2t (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x2))))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=BinomialQueue.fst(576,2-588,92)
(= (Prims.l_not (Prims.b2t (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x2)))))
@x10)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(584,6-584,12)
(and 
;; def=BinomialQueue.fst(584,13-584,55); use=BinomialQueue.fst(584,6-584,12)
(or label_19

;; def=BinomialQueue.fst(584,13-584,55); use=BinomialQueue.fst(584,6-584,12)
(not 
;; def=BinomialQueue.fst(584,16-584,54); use=BinomialQueue.fst(584,6-584,12)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x2))))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(584,6-584,12)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=BinomialQueue.fst(584,13-584,55); use=BinomialQueue.fst(584,6-584,12)
(not 
;; def=BinomialQueue.fst(584,16-584,54); use=BinomialQueue.fst(584,6-584,12)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x2))))
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(585,37-585,44)
(or label_20

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(585,37-585,44)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(576,2-588,92)
(= @x12
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(585,20-585,34)
(and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(585,20-585,34)
(or label_21

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(585,20-585,34)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(585,20-585,34)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x4)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(585,20-585,34)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))
(let ((@lb14 @x13))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(585,20-585,34)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(585,20-585,34)
(<= (BoxInt_proj_0 x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb14)))


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(585,20-585,34)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(585,20-585,34)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
(FStar.Pervasives.Native.Mktuple3__2 @lb14))
)
)
)

;; def=BinomialQueue.fst(585,10-585,46); use=BinomialQueue.fst(585,10-585,46)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x4)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x14 Term))
 (! (implies (HasType @x14
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x15 Term))
 (! (implies (HasType @x15
BinomialQueue.forest)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
BinomialQueue.priq)

;; def=BinomialQueue.fst(585,10-585,17); use=BinomialQueue.fst(585,10-585,17)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x4)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
@x14
@x15
@x16))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(586,28-586,35)
(or label_22

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(586,28-586,35)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(576,2-588,92)
(= @x17
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(586,46-586,47)
(or label_23

;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(586,46-586,47)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
BinomialQueue.forest)

;; def=FStar.List.Tot.Base.fst(52,8-52,9); use=BinomialQueue.fst(576,2-588,92)
(= x_07642eb27f8c86505049ec727a4a557c_4
@x18)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(561,13-586,48); use=BinomialQueue.fst(576,2-588,92)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4)
@x19)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(586,72-586,73)
(or label_24

;; def=FStar.List.Tot.Base.fst(52,19-52,26); use=BinomialQueue.fst(586,72-586,73)
(BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4))
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
BinomialQueue.forest)

;; def=FStar.List.Tot.Base.fst(52,8-52,9); use=BinomialQueue.fst(576,2-588,92)
(= x_07642eb27f8c86505049ec727a4a557c_4
@x20)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(314,14-586,74); use=BinomialQueue.fst(576,2-588,92)
(= (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4)
@x21)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
BinomialQueue.ms)

;; def=BinomialQueue.fst(562,6-586,75); use=BinomialQueue.fst(576,2-588,92)
(= (BinomialQueue.keys (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4))
@x22)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(576,2-588,92)
(and 
;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(586,76-586,78)
(or label_25

;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(586,76-586,78)
(Valid 
;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(586,76-586,78)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x4
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
BinomialQueue.ms)

;; def=BinomialQueue.fst(562,9-562,11); use=BinomialQueue.fst(576,2-588,92)
(= x_2841d97f95e403f3d9b78b0c5aec5c0a_8
@x23)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(586,6-586,25)
(and 
;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(586,6-586,25)
(or label_26

;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(586,6-586,25)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x4))))
)


;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(586,6-586,25)
(or label_27

;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(586,6-586,25)
(Valid 
;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(586,6-586,25)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(586,6-586,25)
(or label_28

;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(586,6-586,25)
(Valid 
;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(586,6-586,25)
(BinomialQueue.repr_l @x4
(BinomialQueue.keys @x4))
)
)


;; def=BinomialQueue.fst(568,9-568,42); use=BinomialQueue.fst(586,6-586,25)
(or label_29

;; def=BinomialQueue.fst(568,9-568,42); use=BinomialQueue.fst(586,6-586,25)
(= (BinomialQueue.delete_max_aux x_b19ee3ff3f4f676fe283c4905f1b1f83_0
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_1
(BoxInt 1))
@x4)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
@x14
(FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4)
x_3250053aa2b9928fcbec76591a895969_5))
)


;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(586,6-586,25)
(or label_30

;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(586,6-586,25)
(Valid 
;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(586,6-586,25)
(BinomialQueue.repr_l (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4)
(BinomialQueue.keys (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4)))
)
)


;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(586,6-586,25)
(or label_31

;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(586,6-586,25)
(Valid 
;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(586,6-586,25)
(BinomialQueue.repr_l x_3250053aa2b9928fcbec76591a895969_5
x_2841d97f95e403f3d9b78b0c5aec5c0a_8)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(586,6-586,25)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
Prims.unit)

;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(586,6-586,25)
(Valid 
;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(586,6-586,25)
(BinomialQueue.permutation (BinomialQueue.keys @x4)
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x14)
(BinomialQueue.ms_append (BinomialQueue.keys (FStar.List.Tot.Base.tl BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_4))
x_2841d97f95e403f3d9b78b0c5aec5c0a_8)))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(586,6-586,25)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(586,6-586,25)
(ApplyTT @x5
@x24)
)
)
 
;;no pats
:qid @query.35))
)
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(576,2-588,92)
(not 
;; def=BinomialQueue.fst(581,7-581,12); use=BinomialQueue.fst(581,7-581,12)
(= (Prims.op_LessThan @x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(576,2-588,92)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=BinomialQueue.fst(581,7-588,92); use=BinomialQueue.fst(581,7-588,92)
(= (Prims.op_LessThan @x3
x_b19ee3ff3f4f676fe283c4905f1b1f83_0)
@x6)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(588,9-588,29)
(and 
;; def=BinomialQueue.fst(526,16-526,31); use=BinomialQueue.fst(588,9-588,29)
(or label_32

;; def=BinomialQueue.fst(526,16-526,31); use=BinomialQueue.fst(588,9-588,29)
(Valid 
;; def=BinomialQueue.fst(526,16-526,31); use=BinomialQueue.fst(588,9-588,29)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_1
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok))
)
)


;; def=BinomialQueue.fst(526,35-526,48); use=BinomialQueue.fst(588,9-588,29)
(or label_33

;; def=BinomialQueue.fst(526,35-526,48); use=BinomialQueue.fst(588,9-588,29)
(Valid 
;; def=BinomialQueue.fst(526,35-526,48); use=BinomialQueue.fst(588,9-588,29)
(BinomialQueue.repr_t (BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
(BinomialQueue.keys_of_tree (BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(588,9-588,29)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=BinomialQueue.fst(529,9-530,64); use=BinomialQueue.fst(588,9-588,29)
(Valid 
;; def=BinomialQueue.fst(529,9-530,64); use=BinomialQueue.fst(588,9-588,29)
(BinomialQueue.permutation (BinomialQueue.keys_of_tree (BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok))
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x3)
(BinomialQueue.keys (BinomialQueue.heap_delete_max x_f26957a7e62b271a8736230b1e9c83c1_1
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)))))
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(588,9-588,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(588,9-588,29)
(ApplyTT @x5
@x7)
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 21786240)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.delete_max_aux_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.delete_max_aux.fuel_instrumented, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.delete_max_aux.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, b2t_def, binder_x_07642eb27f8c86505049ec727a4a557c_2, binder_x_07642eb27f8c86505049ec727a4a557c_4, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_6, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_7, binder_x_2841d97f95e403f3d9b78b0c5aec5c0a_8, binder_x_3250053aa2b9928fcbec76591a895969_5, binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_0, binder_x_b19ee3ff3f4f676fe283c4905f1b1f83_3, binder_x_f26957a7e62b271a8736230b1e9c83c1_1, bool_inversion, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Tm_unit, data_elim_BinomialQueue.Mkms, data_elim_Prims.Cons, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.key_t, equation_BinomialQueue.max, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_BinomialQueue.permutation, equation_BinomialQueue.priq, equation_BinomialQueue.repr_l, equation_BinomialQueue.repr_t, equation_FStar.List.Tot.Base.tail, equation_FStar.List.Tot.Base.tl, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.delete_max_aux.fuel_instrumented, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, false_interp, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_FStar.Pervasives.Native.tuple3, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, interpretation_Tm_abs_f4b50fc4dfea96852c92f014d280cd82, l_and-interp, l_or-interp, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, proj_equation_BinomialQueue.Internal__2, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_Prims.Cons_hd, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_interpretation_Tm_refine_c21cb3fc8fd1bc7797f179f682cf1dc4, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.delete_max_aux.fuel_instrumented, token_correspondence_BinomialQueue.keys.fuel_instrumented, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_append, typing_BinomialQueue.ms_cons, typing_BinomialQueue.ms_singleton, typing_FStar.Set.mem, typing_FStar.Set.union, typing_Prims.int, typing_Tm_abs_015f65dc738b17ca923c21bdd897be70, typing_tok_BinomialQueue.Leaf@tok, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(560,0-588,92)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_ce633916b3865015c243af43b3bfb770 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(562,9-588,92); use=BinomialQueue.fst(562,9-588,92)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_ce633916b3865015c243af43b3bfb770 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_ce633916b3865015c243af43b3bfb770 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_ce633916b3865015c243af43b3bfb770))

:named refinement_kinding_Tm_refine_ce633916b3865015c243af43b3bfb770))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(562,9-588,92); use=BinomialQueue.fst(562,9-588,92)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ce633916b3865015c243af43b3bfb770 @x2
@x3))
(and (HasTypeFuel @u0
@x1
BinomialQueue.ms)

;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(576,2-588,92)

;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(576,2-588,92)
(Valid 
;; def=BinomialQueue.fst(576,2-588,92); use=BinomialQueue.fst(576,2-588,92)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
@x3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ce633916b3865015c243af43b3bfb770 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_ce633916b3865015c243af43b3bfb770))

:named refinement_interpretation_Tm_refine_ce633916b3865015c243af43b3bfb770))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ce633916b3865015c243af43b3bfb770
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(562,9-588,92); use=BinomialQueue.fst(562,9-588,92)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ce633916b3865015c243af43b3bfb770 @x0
@x1)))
(Valid (Prims.hasEq BinomialQueue.ms)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ce633916b3865015c243af43b3bfb770 @x0
@x1))))
:qid haseqTm_refine_ce633916b3865015c243af43b3bfb770))

:named haseqTm_refine_ce633916b3865015c243af43b3bfb770))

; Encoding query formula : forall (m: BinomialQueue.key_t) (d: Prims.pos) (q: BinomialQueue.forest) (x: BinomialQueue.key_t)
;   (r: BinomialQueue.forest) (p: BinomialQueue.priq) (lq: BinomialQueue.ms) (lr: BinomialQueue.ms)
;   (lp: BinomialQueue.ms) (m: BinomialQueue.key_t) (d: Prims.pos) (q: BinomialQueue.forest)
;   (x: BinomialQueue.key_t) (r: BinomialQueue.forest) (p: BinomialQueue.priq) (lq: BinomialQueue.ms)
;   (lr: BinomialQueue.ms) (lp: BinomialQueue.ms{q << q}).
;   Prims.hasEq BinomialQueue.key_t /\
;   (FStar.Set.mem m (BinomialQueue.keys q).ms_elems /\ BinomialQueue.is_binomial_queue d q /\
;     BinomialQueue.repr_l q lq ==>
;     BinomialQueue.is_binomial_queue d q) /\
;   (forall (any_result: Prims.logical).
;       FStar.Set.mem m (BinomialQueue.keys q).ms_elems /\ BinomialQueue.is_binomial_queue d q /\
;       BinomialQueue.repr_l q lq /\
;       (BinomialQueue.delete_max_aux m d q == (x, r, p)) /\
;       BinomialQueue.repr_l r lr /\
;       BinomialQueue.repr_l p lp ==
;       any_result ==>
;       Prims.hasEq BinomialQueue.key_t /\
;       (FStar.Set.mem m (BinomialQueue.keys q).ms_elems /\ BinomialQueue.is_binomial_queue d q /\
;         BinomialQueue.repr_l q lq ==>
;         BinomialQueue.is_binomial_queue d q))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec delete_max_aux_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(560,0-588,92)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x0
BinomialQueue.key_t)
(HasType @x1
Prims.pos)
(HasType @x2
BinomialQueue.forest)
(HasType @x3
BinomialQueue.key_t)
(HasType @x4
BinomialQueue.forest)
(HasType @x5
BinomialQueue.priq)
(HasType @x6
BinomialQueue.ms)
(HasType @x7
BinomialQueue.ms)
(HasType @x8
BinomialQueue.ms)
(HasType @x9
BinomialQueue.key_t)
(HasType @x10
Prims.pos)
(HasType @x11
BinomialQueue.forest)
(HasType @x12
BinomialQueue.key_t)
(HasType @x13
BinomialQueue.forest)
(HasType @x14
BinomialQueue.priq)
(HasType @x15
BinomialQueue.ms)
(HasType @x16
BinomialQueue.ms)
(HasType @x17
(Tm_refine_ce633916b3865015c243af43b3bfb770 @x11
@x2)))

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(560,31-588,92)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(565,26-565,34)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(565,26-565,34)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(565,26-565,34)
(Prims.hasEq BinomialQueue.key_t)
)
)

(implies 
;; def=BinomialQueue.fst(565,9-567,22); use=BinomialQueue.fst(565,9-567,22)
(and 
;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(565,9-565,34)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
@x9
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x11))))


;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(566,9-566,30)
(Valid 
;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(566,9-566,30)
(BinomialQueue.is_binomial_queue @x10
@x11)
)


;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(567,9-567,22)
(Valid 
;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(567,9-567,22)
(BinomialQueue.repr_l @x11
@x15)
)
)


;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(568,9-568,23)
(or label_2

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(568,9-568,23)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(568,9-568,23)
(BinomialQueue.is_binomial_queue @x10
@x11)
)
)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(560,31-588,92)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.logical)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=BinomialQueue.fst(560,31-588,92)
(= (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.l_and (Prims.b2t (FStar.Set.mem BinomialQueue.key_t
@x9
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x11))))
(BinomialQueue.is_binomial_queue @x10
@x11))
(BinomialQueue.repr_l @x11
@x15))
(Prims.eq2 (FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq)
(BinomialQueue.delete_max_aux @x9
@x10
@x11)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
@x12
@x13
@x14)))
(BinomialQueue.repr_l @x13
@x16))
(BinomialQueue.repr_l @x14
@x17))
@x18)
)

;; def=BinomialQueue.fst(271,19-567,22); use=BinomialQueue.fst(572,9-573,53)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(563,4-563,9)
(or label_3

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(572,9-573,53)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(572,9-573,53)
(Prims.hasEq BinomialQueue.key_t)
)
)

(implies 
;; def=BinomialQueue.fst(565,9-567,22); use=BinomialQueue.fst(572,9-573,53)
(and 
;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(572,9-573,53)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
@x9
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x11))))


;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(572,9-573,53)
(Valid 
;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(572,9-573,53)
(BinomialQueue.is_binomial_queue @x10
@x11)
)


;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(572,9-573,53)
(Valid 
;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(572,9-573,53)
(BinomialQueue.repr_l @x11
@x15)
)
)


;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(572,9-573,53)
(or label_4

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(572,9-573,53)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(572,9-573,53)
(BinomialQueue.is_binomial_queue @x10
@x11)
)
)
))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 21786240)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.delete_max_aux_repr, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec delete_max_aux_repr


; <Start encoding let rec delete_max_aux_repr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.delete_max_aux_repr (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.delete_max_aux_repr@tok () Term)

; </end encoding let rec delete_max_aux_repr>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

(push) ;; push{2

; Starting query at BinomialQueue.fst(598,2-607,34)

;;;;;;;;;;;;;;;;kopt : FStar.Pervasives.Native.option BinomialQueue.key_t (FStar.Pervasives.Native.option BinomialQueue.key_t)
(declare-fun x_0cce611505b3cbcad4bc1226ec25500d_0 () Term)
;;;;;;;;;;;;;;;;binder_x_0cce611505b3cbcad4bc1226ec25500d_0
;;; Fact-ids: 
(assert (! (HasType x_0cce611505b3cbcad4bc1226ec25500d_0
(FStar.Pervasives.Native.option BinomialQueue.key_t))
:named binder_x_0cce611505b3cbcad4bc1226ec25500d_0))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_1 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_1
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_1
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_1))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_mem_keys (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_mem_keys@tok () Term)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(592,4-597,19); use=BinomialQueue.fst(598,2-607,34)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

; Encoding query formula : (forall (_: Prims.squash Prims.l_True).
;     (*  - Could not prove post-condition
; *)
;     ~(BinomialQueue.find_max kopt q == kopt) ==>
;     Some? (BinomialQueue.find_max kopt q) ==>
;     Prims.hasEq BinomialQueue.key_t /\
;     (forall (any_result: Type0).
;         BinomialQueue.key_t == any_result ==> Some? (BinomialQueue.find_max kopt q))) /\
; (forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.find_max kopt q == kopt \/
;         Some? (BinomialQueue.find_max kopt q) /\
;         FStar.Set.mem (BinomialQueue.find_max kopt q).v (BinomialQueue.keys q).ms_elems ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Nil? q) /\ ~(Cons? q && Leaf? q.hd) /\ ~(Cons? q && Internal? q.hd) ==> Prims.l_False) /\
;         (q == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Nil? q) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               q == BinomialQueue.Leaf :: b ==>
;               b << q /\
;               (forall (any_result: Prims.list BinomialQueue.tree).
;                   b == any_result ==>
;                   (forall (pure_result: Prims.unit).
;                       BinomialQueue.find_max kopt b == kopt \/
;                       Some? (BinomialQueue.find_max kopt b) /\
;                       FStar.Set.mem (BinomialQueue.find_max kopt b).v
;                         (BinomialQueue.keys b).ms_elems ==>
;                       k pure_result))) /\
;           (~(Cons? q && Leaf? q.hd) ==>
;             (forall (b: BinomialQueue.tree)
;                 (b: BinomialQueue.key_t)
;                 (b: BinomialQueue.tree)
;                 (b: Prims.list BinomialQueue.tree).
;                 q == BinomialQueue.Internal b b b :: b ==>
;                 (forall (k: Prims.pure_post Prims.unit).
;                     (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                     (~(None? kopt) /\ ~(Some? kopt) ==> Prims.l_False) /\
;                     (kopt == FStar.Pervasives.Native.None ==>
;                       b << q /\
;                       (forall (any_result: Prims.list BinomialQueue.tree).
;                           b == any_result ==>
;                           (forall (pure_result: Prims.unit).
;                               BinomialQueue.find_max (FStar.Pervasives.Native.Some b) b ==
;                               FStar.Pervasives.Native.Some b \/
;                               Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some b) b) /\
;                               FStar.Set.mem (BinomialQueue.find_max (FStar.Pervasives.Native.Some b)
;                                     b)
;                                   .v
;                                 (BinomialQueue.keys b).ms_elems ==>
;                               k pure_result))) /\
;                     (~(None? kopt) ==>
;                       (forall (b: BinomialQueue.key_t).
;                           kopt == FStar.Pervasives.Native.Some b ==>
;                           (forall (k: Prims.pure_post BinomialQueue.key_t).
;                               (forall (x: BinomialQueue.key_t). {:pattern Prims.guard_free (k x)}
;                                   ((match b < b with
;                                       | true -> b
;                                       | _ -> b) ==
;                                     x ==>
;                                     b << q /\
;                                     (forall (any_result: Prims.list BinomialQueue.tree).
;                                         b == any_result ==>
;                                         (forall (pure_result: Prims.unit).
;                                             BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                                 (match b < b with
;                                                   | true -> b
;                                                   | _ -> b))
;                                               b ==
;                                             FStar.Pervasives.Native.Some
;                                             (match b < b with
;                                               | true -> b
;                                               | _ -> b) \/
;                                             Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                                     (match b < b with
;                                                       | true -> b
;                                                       | _ -> b))
;                                                   b) /\
;                                             FStar.Set.mem (BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                                     (match b < b with
;                                                       | true -> b
;                                                       | _ -> b))
;                                                   b)
;                                                 .v
;                                               (BinomialQueue.keys b).ms_elems ==>
;                                             k pure_result))) ==>
;                                   k x) ==>
;                               (b < b == true ==>
;                                 (forall (any_result: BinomialQueue.key_t). k any_result)) /\
;                               (~(b < b = true) ==>
;                                 (forall (b: Prims.bool).
;                                     b < b == b ==>
;                                     (forall (any_result: BinomialQueue.key_t). k any_result)))))))))
;         )))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec find_max_mem_keys`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(598,2-607,34)
(not 
;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(598,2-607,34)
(= (BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
x_07642eb27f8c86505049ec727a4a557c_1)
x_0cce611505b3cbcad4bc1226ec25500d_0)
)


;; def=BinomialQueue.fst(596,10-596,20); use=BinomialQueue.fst(598,2-607,34)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
x_07642eb27f8c86505049ec727a4a557c_1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(598,2-607,34)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(596,54-596,62)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(598,2-607,34)
(Prims.hasEq BinomialQueue.key_t)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_type)

;; def=FStar.Set.fsti(30,10-30,11); use=BinomialQueue.fst(598,2-607,34)
(= BinomialQueue.key_t
@x1)
)

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=BinomialQueue.fst(596,39-596,43)
(or label_2

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=BinomialQueue.fst(598,2-607,34)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
x_07642eb27f8c86505049ec727a4a557c_1)))
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x1 Term))
 (! (implies (and (or label_3
(HasType @x1
Prims.unit))

;; def=BinomialQueue.fst(594,9-596,63); use=BinomialQueue.fst(598,2-607,34)
(or label_4

;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(598,2-607,34)
(= (BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
x_07642eb27f8c86505049ec727a4a557c_1)
x_0cce611505b3cbcad4bc1226ec25500d_0)


;; def=BinomialQueue.fst(596,10-596,62); use=BinomialQueue.fst(598,2-607,34)
(and 
;; def=BinomialQueue.fst(596,10-596,20); use=BinomialQueue.fst(598,2-607,34)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
x_07642eb27f8c86505049ec727a4a557c_1)))


;; def=BinomialQueue.fst(596,24-596,62); use=BinomialQueue.fst(598,2-607,34)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
(FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
x_07642eb27f8c86505049ec727a4a557c_1))
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_1))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x0
@x1)
)
)
:qid @query.3))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.5))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(598,2-607,34)
(and (implies 
;; def=BinomialQueue.fst(591,47-607,34); use=BinomialQueue.fst(598,2-607,34)
(and 
;; def=BinomialQueue.fst(591,47-591,48); use=BinomialQueue.fst(598,8-598,9)
(not 
;; def=BinomialQueue.fst(591,47-591,48); use=BinomialQueue.fst(598,8-598,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)
(not 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)
(not 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)
)

label_5)
(implies 
;; def=BinomialQueue.fst(591,47-599,6); use=BinomialQueue.fst(598,8-599,6)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.6))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(598,2-607,34)
(not 
;; def=BinomialQueue.fst(591,47-591,48); use=BinomialQueue.fst(598,8-598,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(598,2-607,34)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(591,47-600,11); use=BinomialQueue.fst(598,8-600,11)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(598,2-607,34)
(and 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(600,38-600,39)
(or label_6

;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(600,38-600,39)
(Valid 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(600,38-600,39)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(591,47-600,11); use=BinomialQueue.fst(598,2-607,34)
(= @x2
@x3)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(600,15-600,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=BinomialQueue.fst(594,9-596,63); use=BinomialQueue.fst(600,15-600,32)
(or 
;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(600,15-600,32)
(= (BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
@x2)
x_0cce611505b3cbcad4bc1226ec25500d_0)


;; def=BinomialQueue.fst(596,10-596,62); use=BinomialQueue.fst(600,15-600,32)
(and 
;; def=BinomialQueue.fst(596,10-596,20); use=BinomialQueue.fst(600,15-600,32)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
@x2)))


;; def=BinomialQueue.fst(596,24-596,62); use=BinomialQueue.fst(600,15-600,32)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
(FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_0
@x2))
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x2))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(600,15-600,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(600,15-600,32)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(598,2-607,34)
(not 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_1))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x4 Term))
 (! (implies (HasType @x4
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(591,47-601,23); use=BinomialQueue.fst(598,8-601,23)
(= x_07642eb27f8c86505049ec727a4a557c_1
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
@x4)
@x5))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x7 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x1
@x7)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x6
@x7)
)
)
 :weight 0


:pattern ((ApplyTT @x6
@x7))
:qid @query.15))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(598,2-607,34)
(and (implies 
;; def=BinomialQueue.fst(591,27-591,31); use=BinomialQueue.fst(602,10-602,14)
(and 
;; def=BinomialQueue.fst(591,27-591,31); use=BinomialQueue.fst(602,10-602,14)
(not 
;; def=BinomialQueue.fst(591,27-591,31); use=BinomialQueue.fst(602,10-602,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_0))
)


;; def=BinomialQueue.fst(591,27-591,31); use=BinomialQueue.fst(602,10-602,14)
(not 
;; def=BinomialQueue.fst(591,27-591,31); use=BinomialQueue.fst(602,10-602,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_0))
)
)

label_7)
(implies 
;; def=BinomialQueue.fst(591,27-603,10); use=BinomialQueue.fst(602,10-603,10)
(= x_0cce611505b3cbcad4bc1226ec25500d_0
(FStar.Pervasives.Native.None BinomialQueue.key_t))


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(598,2-607,34)
(and 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(604,33-604,34)
(or label_8

;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(604,33-604,34)
(Valid 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(604,33-604,34)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x5
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(591,47-601,23); use=BinomialQueue.fst(598,2-607,34)
(= @x5
@x7)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(604,6-604,23)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=BinomialQueue.fst(594,9-596,63); use=BinomialQueue.fst(604,6-604,23)
(or 
;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(604,6-604,23)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x5)
(FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3))


;; def=BinomialQueue.fst(596,10-596,62); use=BinomialQueue.fst(604,6-604,23)
(and 
;; def=BinomialQueue.fst(596,10-596,20); use=BinomialQueue.fst(604,6-604,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x5)))


;; def=BinomialQueue.fst(596,24-596,62); use=BinomialQueue.fst(604,6-604,23)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
(FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x5))
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x5))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(604,6-604,23)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(604,6-604,23)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(598,2-607,34)
(not 
;; def=BinomialQueue.fst(591,27-591,31); use=BinomialQueue.fst(602,10-602,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_0))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.key_t)

;; def=BinomialQueue.fst(591,27-605,13); use=BinomialQueue.fst(602,10-605,13)
(= x_0cce611505b3cbcad4bc1226ec25500d_0
(FStar.Pervasives.Native.Some BinomialQueue.key_t
@x7))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post BinomialQueue.key_t))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x9 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(606,10-606,38); use=BinomialQueue.fst(606,10-606,38)
(= (let ((@lb10 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb10
(BoxBool true))
@x3
@x7))
@x9)


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(598,2-607,34)
(and 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(607,33-607,34)
(or label_9

;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(607,33-607,34)
(Valid 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(607,33-607,34)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x5
x_07642eb27f8c86505049ec727a4a557c_1)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(591,47-601,23); use=BinomialQueue.fst(598,2-607,34)
(= @x5
@x10)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(607,6-607,23)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=BinomialQueue.fst(594,9-596,63); use=BinomialQueue.fst(607,6-607,23)
(or 
;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(607,6-607,23)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb12 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb12
(BoxBool true))
@x3
@x7)))
@x5)
(FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb12 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb12
(BoxBool true))
@x3
@x7))))


;; def=BinomialQueue.fst(596,10-596,62); use=BinomialQueue.fst(607,6-607,23)
(and 
;; def=BinomialQueue.fst(596,10-596,20); use=BinomialQueue.fst(607,6-607,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb12 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb12
(BoxBool true))
@x3
@x7)))
@x5)))


;; def=BinomialQueue.fst(596,24-596,62); use=BinomialQueue.fst(607,6-607,23)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
(FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb12 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb12
(BoxBool true))
@x3
@x7)))
@x5))
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x5))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(607,6-607,23)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(607,6-607,23)
(ApplyTT @x6
@x11)
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x8
@x9)
)
)
 :weight 0


:pattern ((ApplyTT @x8
@x9))
:qid @query.20))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(598,2-607,34)
(and (implies 
;; def=BinomialQueue.fst(606,17-606,23); use=BinomialQueue.fst(606,17-606,23)
(= (Prims.op_LessThan @x7
@x3)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x9 Term))
 (! (implies (HasType @x9
BinomialQueue.key_t)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x8
@x9)
)
)
 
;;no pats
:qid @query.23))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(598,2-607,34)
(not 
;; def=BinomialQueue.fst(606,17-606,23); use=BinomialQueue.fst(606,17-606,23)
(= (Prims.op_LessThan @x7
@x3)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.bool)

;; def=BinomialQueue.fst(606,17-606,38); use=BinomialQueue.fst(606,17-606,38)
(= (Prims.op_LessThan @x7
@x3)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(598,2-607,34)
(forall ((@x10 Term))
 (! (implies (HasType @x10
BinomialQueue.key_t)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(598,2-607,34)
(ApplyTT @x8
@x10)
)
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
))
))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.2))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.find_max_mem_keys, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.find_max.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, binder_x_07642eb27f8c86505049ec727a4a557c_1, binder_x_0cce611505b3cbcad4bc1226ec25500d_0, bool_inversion, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Prims.Nil, data_elim_FStar.Pervasives.Native.Some, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.key_t, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_singleton, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.find_max.fuel_instrumented, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, kinding_BinomialQueue.tree@tok, lemma_FStar.Pervasives.invertOption, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_FStar.Pervasives.Native.Some_v, proj_equation_Prims.Cons_hd, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.None_a, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.keys.fuel_instrumented, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.find_max, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_cons, typing_FStar.Pervasives.Native.__proj__Some__item__v, typing_FStar.Set.mem, typing_FStar.Set.singleton, typing_Prims.__proj__Cons__item__hd, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(591,0-607,34)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(591,47-607,34); use=BinomialQueue.fst(591,47-607,34)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c))

:named refinement_kinding_Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(591,47-607,34); use=BinomialQueue.fst(591,47-607,34)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)

;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)
(Valid 
;; def=BinomialQueue.fst(598,2-607,34); use=BinomialQueue.fst(598,2-607,34)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c @x2)))
:qid refinement_interpretation_Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c))

:named refinement_interpretation_Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(591,47-607,34); use=BinomialQueue.fst(591,47-607,34)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c @x0)))
(Valid (Prims.hasEq BinomialQueue.forest)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c @x0))))
:qid haseqTm_refine_9ed09bb635be4b1e49cbe949026d7d4c))

:named haseqTm_refine_9ed09bb635be4b1e49cbe949026d7d4c))
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(592,4-597,19); use=BinomialQueue.fst(592,4-592,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

; Encoding query formula : forall (kopt: FStar.Pervasives.Native.option BinomialQueue.key_t)
;   (q: BinomialQueue.forest)
;   (kopt: FStar.Pervasives.Native.option BinomialQueue.key_t)
;   (q: BinomialQueue.forest{q << q})
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *)
;   ~(BinomialQueue.find_max kopt q == kopt) ==>
;   Some? (BinomialQueue.find_max kopt q) ==>
;   Prims.hasEq BinomialQueue.key_t /\
;   (forall (any_result: Type0).
;       BinomialQueue.key_t == any_result ==> Some? (BinomialQueue.find_max kopt q))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec find_max_mem_keys`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(591,0-607,34)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x1
BinomialQueue.forest)
(HasType @x2
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x3
(Tm_refine_9ed09bb635be4b1e49cbe949026d7d4c @x1))
(HasType @x4
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(594,9-594,32)
(not 
;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(594,9-594,32)
(= (BinomialQueue.find_max @x2
@x3)
@x2)
)


;; def=BinomialQueue.fst(596,10-596,20); use=BinomialQueue.fst(596,10-596,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max @x2
@x3)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(596,10-596,62)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(596,54-596,62)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(596,54-596,62)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(596,54-596,62)
(Prims.hasEq BinomialQueue.key_t)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(596,10-596,62)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_type)

;; def=FStar.Set.fsti(30,10-30,11); use=BinomialQueue.fst(596,10-596,62)
(= BinomialQueue.key_t
@x5)
)

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=BinomialQueue.fst(596,39-596,43)
(or label_2

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=BinomialQueue.fst(596,39-596,43)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max @x2
@x3)))
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.find_max_mem_keys, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec find_max_mem_keys


; <Start encoding let rec find_max_mem_keys>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_mem_keys (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_mem_keys@tok () Term)

; </end encoding let rec find_max_mem_keys>

(push) ;; push{2

; Starting query at BinomialQueue.fst(618,2-631,32)

;;;;;;;;;;;;;;;;d : Prims.pos (Prims.pos)
(declare-fun x_f26957a7e62b271a8736230b1e9c83c1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_f26957a7e62b271a8736230b1e9c83c1_0
;;; Fact-ids: 
(assert (! (HasType x_f26957a7e62b271a8736230b1e9c83c1_0
Prims.pos)
:named binder_x_f26957a7e62b271a8736230b1e9c83c1_0))
;;;;;;;;;;;;;;;;kopt : FStar.Pervasives.Native.option BinomialQueue.key_t (FStar.Pervasives.Native.option BinomialQueue.key_t)
(declare-fun x_0cce611505b3cbcad4bc1226ec25500d_1 () Term)
;;;;;;;;;;;;;;;;binder_x_0cce611505b3cbcad4bc1226ec25500d_1
;;; Fact-ids: 
(assert (! (HasType x_0cce611505b3cbcad4bc1226ec25500d_1
(FStar.Pervasives.Native.option BinomialQueue.key_t))
:named binder_x_0cce611505b3cbcad4bc1226ec25500d_1))
;;;;;;;;;;;;;;;;q : BinomialQueue.forest (BinomialQueue.forest)
(declare-fun x_07642eb27f8c86505049ec727a4a557c_2 () Term)
;;;;;;;;;;;;;;;;binder_x_07642eb27f8c86505049ec727a4a557c_2
;;; Fact-ids: 
(assert (! (HasType x_07642eb27f8c86505049ec727a4a557c_2
BinomialQueue.forest)
:named binder_x_07642eb27f8c86505049ec727a4a557c_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_is_max (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_is_max@tok () Term)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_46e76d937374da81295260936d0fc3b2 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_46e76d937374da81295260936d0fc3b2
Tm_type)
:named refinement_kinding_Tm_refine_46e76d937374da81295260936d0fc3b2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(612,9-613,32); use=BinomialQueue.fst(618,2-631,32)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_46e76d937374da81295260936d0fc3b2)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(618,2-631,32)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(618,2-631,32)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_1
x_07642eb27f8c86505049ec727a4a557c_2)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_46e76d937374da81295260936d0fc3b2))
:qid refinement_interpretation_Tm_refine_46e76d937374da81295260936d0fc3b2))

:named refinement_interpretation_Tm_refine_46e76d937374da81295260936d0fc3b2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_46e76d937374da81295260936d0fc3b2
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_46e76d937374da81295260936d0fc3b2))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_46e76d937374da81295260936d0fc3b2))

; Encoding query formula : (forall (_:
;     Prims.squash (BinomialQueue.is_binomial_queue d q /\ Some? (BinomialQueue.find_max kopt q))).
;     (*  - Could not prove post-condition
; *)
;     ~(Some? (BinomialQueue.find_max kopt q)) ==> Prims.l_False) /\
; (forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.is_binomial_queue d q /\ Some? (BinomialQueue.find_max kopt q) /\
;     (forall (pure_result: Prims.unit).
;         (let FStar.Pervasives.Native.Some k = BinomialQueue.find_max kopt q in
;           BinomialQueue.max k (BinomialQueue.keys q).ms_elems) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Nil? q) /\ ~(Cons? q && Leaf? q.hd) /\ ~(Cons? q && Internal? q.hd && Leaf? q.hd._2) ==>
;           Prims.l_False) /\
;         (q == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Nil? q) ==>
;           (forall (b: Prims.list BinomialQueue.tree).
;               q == BinomialQueue.Leaf :: b ==>
;               d + 1 > 0 /\
;               (forall (return_val: Prims.pos).
;                   return_val == d + 1 ==>
;                   b << q /\
;                   (forall (any_result: Prims.list BinomialQueue.tree).
;                       b == any_result ==>
;                       BinomialQueue.is_binomial_queue (d + 1) b /\
;                       Some? (BinomialQueue.find_max kopt b) /\
;                       (forall (pure_result: Prims.unit).
;                           (let FStar.Pervasives.Native.Some k = BinomialQueue.find_max kopt b in
;                             BinomialQueue.max k (BinomialQueue.keys b).ms_elems) ==>
;                           k pure_result)))) /\
;           (~(Cons? q && Leaf? q.hd) ==>
;             (forall (b: BinomialQueue.tree)
;                 (b: BinomialQueue.key_t)
;                 (b: Prims.list BinomialQueue.tree).
;                 q == BinomialQueue.Internal b b BinomialQueue.Leaf :: b ==>
;                 BinomialQueue.is_pow2heap d (BinomialQueue.Internal b b BinomialQueue.Leaf) /\
;                 (forall (pure_result: Prims.unit).
;                     BinomialQueue.max b (BinomialQueue.keys_of_tree b).ms_elems ==>
;                     (forall (k: Prims.pure_post Prims.unit).
;                         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                         (~(None? kopt) /\ ~(Some? kopt) ==> Prims.l_False) /\
;                         (kopt == FStar.Pervasives.Native.None ==>
;                           d + 1 > 0 /\
;                           (forall (return_val: Prims.pos).
;                               return_val == d + 1 ==>
;                               b << q /\
;                               (forall (any_result: Prims.list BinomialQueue.tree).
;                                   b == any_result ==>
;                                   BinomialQueue.is_binomial_queue (d + 1) b /\
;                                   Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some b) b) /\
;                                   (forall (pure_result: Prims.unit).
;                                       (let FStar.Pervasives.Native.Some k =
;                                           BinomialQueue.find_max (FStar.Pervasives.Native.Some b) b
;                                         in
;                                         BinomialQueue.max k (BinomialQueue.keys b).ms_elems) ==>
;                                       (forall (pure_result: Prims.unit).
;                                           Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                                   b)
;                                                 b) /\
;                                           b <=
;                                           (BinomialQueue.find_max (FStar.Pervasives.Native.Some b) b
;                                           )
;                                             .v ==>
;                                           k pure_result))))) /\
;                         (~(None? kopt) ==>
;                           (forall (b: BinomialQueue.key_t).
;                               kopt == FStar.Pervasives.Native.Some b ==>
;                               (forall (k: Prims.pure_post BinomialQueue.key_t).
;                                   (forall (x: BinomialQueue.key_t).
;                                       {:pattern Prims.guard_free (k x)}
;                                       ((match b < b with
;                                           | true -> b
;                                           | _ -> b) ==
;                                         x ==>
;                                         d + 1 > 0 /\
;                                         (forall (return_val: Prims.pos).
;                                             return_val == d + 1 ==>
;                                             b << q /\
;                                             (forall (any_result: Prims.list BinomialQueue.tree).
;                                                 b == any_result ==>
;                                                 BinomialQueue.is_binomial_queue (d + 1) b /\
;                                                 Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                                         (match b < b with
;                                                           | true -> b
;                                                           | _ -> b))
;                                                       b) /\
;                                                 (forall (pure_result: Prims.unit).
;                                                     (let FStar.Pervasives.Native.Some k =
;                                                         BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                                             (match b < b with
;                                                               | true -> b
;                                                               | _ -> b))
;                                                           b
;                                                       in
;                                                       BinomialQueue.max k
;                                                         (BinomialQueue.keys b).ms_elems) ==>
;                                                     (forall (pure_result: Prims.unit).
;                                                         Some? (BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                                                 (match b < b with
;                                                                   | true -> b
;                                                                   | _ -> b))
;                                                               b) /\
;                                                         (match b < b with
;                                                           | true -> b
;                                                           | _ -> b) <=
;                                                         (BinomialQueue.find_max (FStar.Pervasives.Native.Some
;                                                               (match b < b with
;                                                                 | true -> b
;                                                                 | _ -> b))
;                                                             b)
;                                                           .v ==>
;                                                         k pure_result))))) ==>
;                                       k x) ==>
;                                   (b < b == true ==>
;                                     (forall (any_result: BinomialQueue.key_t). k any_result)) /\
;                                   (~(b < b = true) ==>
;                                     (forall (b: Prims.bool).
;                                         b < b == b ==>
;                                         (forall (any_result: BinomialQueue.key_t). k any_result)))))
;                         ))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec find_max_is_max`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_46e76d937374da81295260936d0fc3b2)

;; def=BinomialQueue.fst(615,14-615,20); use=BinomialQueue.fst(618,2-631,32)
(not 
;; def=BinomialQueue.fst(615,14-615,20); use=BinomialQueue.fst(618,2-631,32)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_1
x_07642eb27f8c86505049ec727a4a557c_2)))
)
)
label_1)
 
;;no pats
:qid @query))


;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(618,2-631,32)
(BinomialQueue.is_binomial_queue x_f26957a7e62b271a8736230b1e9c83c1_0
x_07642eb27f8c86505049ec727a4a557c_2)
)


;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(618,2-631,32)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_1
x_07642eb27f8c86505049ec727a4a557c_2)))


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x1 Term))
 (! (implies (and (or label_2
(HasType @x1
Prims.unit))
(let ((@lb2 (BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_1
x_07642eb27f8c86505049ec727a4a557c_2)))
(ite (is-FStar.Pervasives.Native.Some @lb2)

;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(618,2-631,32)
(or label_3

;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(618,2-631,32)
(BinomialQueue.max (FStar.Pervasives.Native.Some_v @lb2)
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys x_07642eb27f8c86505049ec727a4a557c_2)))
)
)

Unreachable)))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(618,2-631,32)
(and (implies 
;; def=BinomialQueue.fst(609,53-631,32); use=BinomialQueue.fst(618,2-631,32)
(and 
;; def=BinomialQueue.fst(609,53-609,54); use=BinomialQueue.fst(618,8-618,9)
(not 
;; def=BinomialQueue.fst(609,53-609,54); use=BinomialQueue.fst(618,8-618,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
)


;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(618,2-631,32)
(not 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(618,2-631,32)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
)


;; def=BinomialQueue.fst(622,5-622,13); use=BinomialQueue.fst(622,5-622,13)
(not 
;; def=BinomialQueue.fst(622,5-622,13); use=BinomialQueue.fst(622,5-622,13)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2)
(BinomialQueue.uu___is_Internal (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (BinomialQueue.__proj__Internal__item___2 (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2)))))
)
)

label_4)
(implies 
;; def=BinomialQueue.fst(609,53-619,6); use=BinomialQueue.fst(618,8-619,6)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Nil BinomialQueue.tree))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(618,2-631,32)
(not 
;; def=BinomialQueue.fst(609,53-609,54); use=BinomialQueue.fst(618,8-618,9)
(BoxBool_proj_0 (Prims.uu___is_Nil BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
)


;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(618,2-631,32)
(and 
;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(609,53-620,11); use=BinomialQueue.fst(618,8-620,11)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Cons BinomialQueue.tree
BinomialQueue.Leaf@tok
@x2))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(618,2-631,32)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(621,20-621,27)
(or label_5

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(621,20-621,27)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(618,2-631,32)
(= @x3
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(618,2-631,32)
(and 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(621,33-621,34)
(or label_6

;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(621,33-621,34)
(Valid 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(621,33-621,34)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x2
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(609,53-620,11); use=BinomialQueue.fst(618,2-631,32)
(= @x2
@x4)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(621,4-621,19)
(and 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(621,4-621,19)
(or label_7

;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(621,4-621,19)
(Valid 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(621,4-621,19)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x2)
)
)


;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(621,4-621,19)
(or label_8

;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(621,4-621,19)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_1
@x2)))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(621,4-621,19)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)
(let ((@lb6 (BinomialQueue.find_max x_0cce611505b3cbcad4bc1226ec25500d_1
@x2)))
(ite (is-FStar.Pervasives.Native.Some @lb6)

;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(621,4-621,19)
(Valid 
;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(621,4-621,19)
(BinomialQueue.max (FStar.Pervasives.Native.Some_v @lb6)
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x2)))
)

Unreachable)))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(621,4-621,19)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(621,4-621,19)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(618,2-631,32)
(not 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(618,2-631,32)
(and (BoxBool_proj_0 (Prims.uu___is_Cons BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf (Prims.__proj__Cons__item__hd BinomialQueue.tree
x_07642eb27f8c86505049ec727a4a557c_2))))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x2 Term))
 (! (implies (HasType @x2
BinomialQueue.tree)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x3 Term))
 (! (implies (HasType @x3
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(609,53-622,30); use=BinomialQueue.fst(618,8-622,30)
(= x_07642eb27f8c86505049ec727a4a557c_2
(Prims.Cons BinomialQueue.tree
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok)
@x4))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(623,4-623,20)
(and 
;; def=BinomialQueue.fst(552,16-552,31); use=BinomialQueue.fst(623,4-623,20)
(or label_9

;; def=BinomialQueue.fst(552,16-552,31); use=BinomialQueue.fst(623,4-623,20)
(Valid 
;; def=BinomialQueue.fst(552,16-552,31); use=BinomialQueue.fst(623,4-623,20)
(BinomialQueue.is_pow2heap x_f26957a7e62b271a8736230b1e9c83c1_0
(BinomialQueue.Internal @x2
@x3
BinomialQueue.Leaf@tok))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(623,4-623,20)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=BinomialQueue.fst(555,10-555,44); use=BinomialQueue.fst(623,4-623,20)
(Valid 
;; def=BinomialQueue.fst(555,10-555,44); use=BinomialQueue.fst(623,4-623,20)
(BinomialQueue.max @x3
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys_of_tree @x2)))
)
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x7 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x1
@x7)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x6
@x7)
)
)
 :weight 0


:pattern ((ApplyTT @x6
@x7))
:qid @query.15))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(618,2-631,32)
(and (implies 
;; def=BinomialQueue.fst(609,33-609,37); use=BinomialQueue.fst(624,10-624,14)
(and 
;; def=BinomialQueue.fst(609,33-609,37); use=BinomialQueue.fst(624,10-624,14)
(not 
;; def=BinomialQueue.fst(609,33-609,37); use=BinomialQueue.fst(624,10-624,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_1))
)


;; def=BinomialQueue.fst(609,33-609,37); use=BinomialQueue.fst(624,10-624,14)
(not 
;; def=BinomialQueue.fst(609,33-609,37); use=BinomialQueue.fst(624,10-624,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_1))
)
)

label_10)
(implies 
;; def=BinomialQueue.fst(609,33-625,10); use=BinomialQueue.fst(624,10-625,10)
(= x_0cce611505b3cbcad4bc1226ec25500d_1
(FStar.Pervasives.Native.None BinomialQueue.key_t))


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(618,2-631,32)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(626,22-626,29)
(or label_11

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(626,22-626,29)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(618,2-631,32)
(= @x7
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(618,2-631,32)
(and 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(626,39-626,41)
(or label_12

;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(626,39-626,41)
(Valid 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(626,39-626,41)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x4
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(609,53-622,30); use=BinomialQueue.fst(618,2-631,32)
(= @x4
@x8)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(626,6-626,21)
(and 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(626,6-626,21)
(or label_13

;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(626,6-626,21)
(Valid 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(626,6-626,21)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(626,6-626,21)
(or label_14

;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(626,6-626,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x4)))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(626,6-626,21)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)
(let ((@lb10 (BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x4)))
(ite (is-FStar.Pervasives.Native.Some @lb10)

;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(626,6-626,21)
(Valid 
;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(626,6-626,21)
(BinomialQueue.max (FStar.Pervasives.Native.Some_v @lb10)
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x4)))
)

Unreachable)))

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(627,6-627,27)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=BinomialQueue.fst(455,19-455,46); use=BinomialQueue.fst(627,6-627,27)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x4)))


;; def=BinomialQueue.fst(456,19-456,53); use=BinomialQueue.fst(627,6-627,27)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
@x3)
@x4))))
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(627,6-627,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(627,6-627,27)
(ApplyTT @x6
@x10)
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(618,2-631,32)
(not 
;; def=BinomialQueue.fst(609,33-609,37); use=BinomialQueue.fst(624,10-624,14)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
x_0cce611505b3cbcad4bc1226ec25500d_1))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.key_t)

;; def=BinomialQueue.fst(609,33-628,13); use=BinomialQueue.fst(624,10-628,13)
(= x_0cce611505b3cbcad4bc1226ec25500d_1
(FStar.Pervasives.Native.Some BinomialQueue.key_t
@x7))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post BinomialQueue.key_t))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x9 Term))
 (! (implies (implies 
;; def=BinomialQueue.fst(629,10-629,38); use=BinomialQueue.fst(629,10-629,38)
(= (let ((@lb10 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb10
(BoxBool true))
@x3
@x7))
@x9)


;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(618,2-631,32)
(and 
;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(630,22-630,29)
(or label_15

;; def=Prims.fst(683,18-683,23); use=BinomialQueue.fst(630,22-630,29)
(> (BoxInt_proj_0 (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.pos)

;; def=Prims.fst(356,26-356,41); use=BinomialQueue.fst(618,2-631,32)
(= @x10
(Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(618,2-631,32)
(and 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(630,39-630,41)
(or label_16

;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(630,39-630,41)
(Valid 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(630,39-630,41)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x4
x_07642eb27f8c86505049ec727a4a557c_2)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.list BinomialQueue.tree))

;; def=BinomialQueue.fst(609,53-622,30); use=BinomialQueue.fst(618,2-631,32)
(= @x4
@x11)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(630,6-630,21)
(and 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(630,6-630,21)
(or label_17

;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(630,6-630,21)
(Valid 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(630,6-630,21)
(BinomialQueue.is_binomial_queue (Prims.op_Addition x_f26957a7e62b271a8736230b1e9c83c1_0
(BoxInt 1))
@x4)
)
)


;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(630,6-630,21)
(or label_18

;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(630,6-630,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb12 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb12
(BoxBool true))
@x3
@x7)))
@x4)))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(630,6-630,21)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)
(let ((@lb13 (BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb13 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb13
(BoxBool true))
@x3
@x7)))
@x4)))
(ite (is-FStar.Pervasives.Native.Some @lb13)

;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(630,6-630,21)
(Valid 
;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(630,6-630,21)
(BinomialQueue.max (FStar.Pervasives.Native.Some_v @lb13)
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x4)))
)

Unreachable)))

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(631,6-631,27)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=BinomialQueue.fst(455,19-455,46); use=BinomialQueue.fst(631,6-631,27)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb14 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb14
(BoxBool true))
@x3
@x7)))
@x4)))


;; def=BinomialQueue.fst(456,19-456,53); use=BinomialQueue.fst(631,6-631,27)
(<= (BoxInt_proj_0 (let ((@lb14 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb14
(BoxBool true))
@x3
@x7)))
(BoxInt_proj_0 (FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.Some BinomialQueue.key_t
(let ((@lb14 (Prims.op_LessThan @x7
@x3)))
(ite (= @lb14
(BoxBool true))
@x3
@x7)))
@x4))))
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(631,6-631,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(631,6-631,27)
(ApplyTT @x6
@x13)
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
)

;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x8
@x9)
)
)
 :weight 0


:pattern ((ApplyTT @x8
@x9))
:qid @query.22))
)

;; def=Prims.fst(389,2-389,39); use=BinomialQueue.fst(618,2-631,32)
(and (implies 
;; def=BinomialQueue.fst(629,17-629,23); use=BinomialQueue.fst(629,17-629,23)
(= (Prims.op_LessThan @x7
@x3)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x9 Term))
 (! (implies (HasType @x9
BinomialQueue.key_t)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x8
@x9)
)
)
 
;;no pats
:qid @query.27))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(618,2-631,32)
(not 
;; def=BinomialQueue.fst(629,17-629,23); use=BinomialQueue.fst(629,17-629,23)
(= (Prims.op_LessThan @x7
@x3)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.bool)

;; def=BinomialQueue.fst(629,17-629,38); use=BinomialQueue.fst(629,17-629,38)
(= (Prims.op_LessThan @x7
@x3)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(618,2-631,32)
(forall ((@x10 Term))
 (! (implies (HasType @x10
BinomialQueue.key_t)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(618,2-631,32)
(ApplyTT @x8
@x10)
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
))
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.find_max_is_max, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented, @fuel_correspondence_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @fuel_irrelevance_BinomialQueue.find_max.fuel_instrumented, @fuel_irrelevance_BinomialQueue.is_binomial_queue.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys.fuel_instrumented, @fuel_irrelevance_BinomialQueue.keys_of_tree.fuel_instrumented, @query, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, b2t_def, binder_x_07642eb27f8c86505049ec727a4a557c_2, binder_x_0cce611505b3cbcad4bc1226ec25500d_1, binder_x_f26957a7e62b271a8736230b1e9c83c1_0, bool_inversion, bool_typing, constructor_distinct_BinomialQueue.Internal, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_elim_BinomialQueue.Internal, data_elim_FStar.Pervasives.Native.Some, data_elim_Prims.Cons, disc_equation_BinomialQueue.Internal, disc_equation_BinomialQueue.Leaf, disc_equation_FStar.Pervasives.Native.Some, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.forest, equation_BinomialQueue.is_pow2heap, equation_BinomialQueue.key_t, equation_BinomialQueue.max, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_Prims.eqtype, equation_Prims.nat, equation_Prims.pos, equation_with_fuel_BinomialQueue.find_max.fuel_instrumented, equation_with_fuel_BinomialQueue.is_binomial_queue.fuel_instrumented, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, false_interp, fuel_guarded_inversion_BinomialQueue.tree, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, int_typing, kinding_BinomialQueue.tree@tok, l_and-interp, l_or-interp, lemma_FStar.Pervasives.invertOption, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, proj_equation_BinomialQueue.Internal__2, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_FStar.Pervasives.Native.Some_v, proj_equation_Prims.Cons_hd, projection_inverse_BinomialQueue.Internal__0, projection_inverse_BinomialQueue.Internal__1, projection_inverse_BinomialQueue.Internal__2, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.None_a, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_46e76d937374da81295260936d0fc3b2, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_Prims.Cons, token_correspondence_BinomialQueue.keys.fuel_instrumented, token_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.find_max, typing_BinomialQueue.keys, typing_BinomialQueue.keys_of_tree, typing_BinomialQueue.ms_cons, typing_FStar.Set.empty, typing_FStar.Set.mem, typing_FStar.Set.singleton, typing_Prims.__proj__Cons__item__hd, typing_Prims.int, typing_tok_BinomialQueue.Leaf@tok, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at BinomialQueue.fst(609,0-631,32)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_5cd870f8e152479d09e6fa89918ec0de (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(609,53-631,32); use=BinomialQueue.fst(609,53-631,32)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_5cd870f8e152479d09e6fa89918ec0de @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_5cd870f8e152479d09e6fa89918ec0de @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_5cd870f8e152479d09e6fa89918ec0de))

:named refinement_kinding_Tm_refine_5cd870f8e152479d09e6fa89918ec0de))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(609,53-631,32); use=BinomialQueue.fst(609,53-631,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5cd870f8e152479d09e6fa89918ec0de @x2))
(and (HasTypeFuel @u0
@x1
BinomialQueue.forest)

;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(618,2-631,32)

;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(618,2-631,32)
(Valid 
;; def=BinomialQueue.fst(618,2-631,32); use=BinomialQueue.fst(618,2-631,32)
(Prims.precedes BinomialQueue.forest
BinomialQueue.forest
@x1
@x2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5cd870f8e152479d09e6fa89918ec0de @x2)))
:qid refinement_interpretation_Tm_refine_5cd870f8e152479d09e6fa89918ec0de))

:named refinement_interpretation_Tm_refine_5cd870f8e152479d09e6fa89918ec0de))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5cd870f8e152479d09e6fa89918ec0de
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(609,53-631,32); use=BinomialQueue.fst(609,53-631,32)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5cd870f8e152479d09e6fa89918ec0de @x0)))
(Valid (Prims.hasEq BinomialQueue.forest)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5cd870f8e152479d09e6fa89918ec0de @x0))))
:qid haseqTm_refine_5cd870f8e152479d09e6fa89918ec0de))

:named haseqTm_refine_5cd870f8e152479d09e6fa89918ec0de))
(declare-fun Tm_refine_40004e77c501d0d7faf8da16dffd8ea1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(612,9-613,32); use=BinomialQueue.fst(610,4-610,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_40004e77c501d0d7faf8da16dffd8ea1 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_40004e77c501d0d7faf8da16dffd8ea1 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_40004e77c501d0d7faf8da16dffd8ea1))

:named refinement_kinding_Tm_refine_40004e77c501d0d7faf8da16dffd8ea1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(612,9-613,32); use=BinomialQueue.fst(610,4-610,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_40004e77c501d0d7faf8da16dffd8ea1 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(610,4-610,9)
(Valid 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(610,4-610,9)
(BinomialQueue.is_binomial_queue @x2
@x3)
)


;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(610,4-610,9)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max @x4
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_40004e77c501d0d7faf8da16dffd8ea1 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_40004e77c501d0d7faf8da16dffd8ea1))

:named refinement_interpretation_Tm_refine_40004e77c501d0d7faf8da16dffd8ea1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_40004e77c501d0d7faf8da16dffd8ea1
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fst(612,9-613,32); use=BinomialQueue.fst(610,4-610,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_40004e77c501d0d7faf8da16dffd8ea1 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_40004e77c501d0d7faf8da16dffd8ea1 @x0
@x1
@x2))))
:qid haseqTm_refine_40004e77c501d0d7faf8da16dffd8ea1))

:named haseqTm_refine_40004e77c501d0d7faf8da16dffd8ea1))

; Encoding query formula : forall (d: Prims.pos)
;   (kopt: FStar.Pervasives.Native.option BinomialQueue.key_t)
;   (q: BinomialQueue.forest)
;   (d: Prims.pos)
;   (kopt: FStar.Pervasives.Native.option BinomialQueue.key_t)
;   (q: BinomialQueue.forest{q << q})
;   (_: Prims.squash (BinomialQueue.is_binomial_queue d q /\ Some? (BinomialQueue.find_max kopt q))).
;   (*  - Could not prove post-condition
; *) ~(Some? (BinomialQueue.find_max kopt q)) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let rec find_max_is_max`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fst(609,0-631,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x2
BinomialQueue.forest)
(HasType @x3
Prims.pos)
(HasType @x4
(FStar.Pervasives.Native.option BinomialQueue.key_t))
(HasType @x5
(Tm_refine_5cd870f8e152479d09e6fa89918ec0de @x2))
(HasType @x6
(Tm_refine_40004e77c501d0d7faf8da16dffd8ea1 @x3
@x5
@x4))

;; def=BinomialQueue.fst(615,14-615,20); use=BinomialQueue.fst(615,14-615,20)
(not 
;; def=BinomialQueue.fst(615,14-615,20); use=BinomialQueue.fst(615,14-615,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max @x4
@x5)))
)
)
label_1)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.find_max_is_max, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_40004e77c501d0d7faf8da16dffd8ea1

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec find_max_is_max


; <Start encoding let rec find_max_is_max>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun BinomialQueue.find_max_is_max (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun BinomialQueue.find_max_is_max@tok () Term)

; </end encoding let rec find_max_is_max>


; encoding sigelt #push-options "--z3rlimit_factor 4"


; <Skipped #push-options "--z3rlimit_factor 4"/>

(push) ;; push{2

; Starting query at BinomialQueue.fsti(105,0-113,64)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(108,13-110,24); use=BinomialQueue.fsti(107,4-107,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20))

:named refinement_kinding_Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(108,13-110,24); use=BinomialQueue.fsti(107,4-107,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=BinomialQueue.fsti(108,13-108,24); use=BinomialQueue.fsti(107,4-107,9)
(Valid 
;; def=BinomialQueue.fsti(108,13-108,24); use=BinomialQueue.fsti(107,4-107,9)
(BinomialQueue.repr @x2
@x3)
)


;; def=BinomialQueue.fsti(109,13-109,40); use=BinomialQueue.fsti(107,4-107,9)
(= (BinomialQueue.delete_max @x2)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)
(FStar.Pervasives.Native.Mktuple2 BinomialQueue.key_t
BinomialQueue.priq
@x4
@x5)))


;; def=BinomialQueue.fsti(110,13-110,24); use=BinomialQueue.fsti(107,4-107,9)
(Valid 
;; def=BinomialQueue.fsti(110,13-110,24); use=BinomialQueue.fsti(107,4-107,9)
(BinomialQueue.repr @x5
@x6)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20))

:named refinement_interpretation_Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20
;;; Fact-ids: 
(assert (! 
;; def=BinomialQueue.fsti(108,13-110,24); use=BinomialQueue.fsti(107,4-107,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_da14f3f96e9a76aeccbe8a3e4e403e20))

:named haseqTm_refine_da14f3f96e9a76aeccbe8a3e4e403e20))

; Encoding query formula : forall (p: BinomialQueue.priq)
;   (sp: BinomialQueue.ms)
;   (k: BinomialQueue.key_t)
;   (q: BinomialQueue.priq)
;   (sq: BinomialQueue.ms)
;   (_:
;   Prims.squash (BinomialQueue.repr p sp /\
;       BinomialQueue.delete_max p == FStar.Pervasives.Native.Some (k, q) /\ BinomialQueue.repr q sq))
; .
;   (*  - Could not prove post-condition
; *)
;   BinomialQueue.permutation sp (BinomialQueue.ms_cons k sq) ==>
;   (forall (x: BinomialQueue.key_t).
;       (*  - Subtyping check failed
;   - Expected type Prims.eqtype got type Type0
; *)
;       Prims.hasEq BinomialQueue.key_t)


; Context: While encoding a query
; While typechecking the top-level declaration `val BinomialQueue.delete_max_some_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=BinomialQueue.fsti(105,0-113,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
BinomialQueue.priq)
(HasType @x1
BinomialQueue.ms)
(HasType @x2
BinomialQueue.key_t)
(HasType @x3
BinomialQueue.priq)
(HasType @x4
BinomialQueue.ms)
(HasType @x5
(Tm_refine_da14f3f96e9a76aeccbe8a3e4e403e20 @x0
@x1
@x2
@x3
@x4))

;; def=BinomialQueue.fsti(112,13-112,42); use=BinomialQueue.fsti(112,13-112,42)
(Valid 
;; def=BinomialQueue.fsti(112,13-112,42); use=BinomialQueue.fsti(112,13-112,42)
(BinomialQueue.permutation @x1
(BinomialQueue.ms_cons @x2
@x4))
)
)

;; def=dummy(0,0-0,0); use=BinomialQueue.fsti(112,13-113,63)
(forall ((@x6 Term))
 (! (implies (HasType @x6
BinomialQueue.key_t)

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(113,43-113,51)
(or label_1

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(113,43-113,51)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fsti(113,43-113,51)
(Prims.hasEq BinomialQueue.key_t)
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.delete_max_some_repr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_BinomialQueue.key_t, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val BinomialQueue.delete_max_some_repr


; <Skipped val BinomialQueue.delete_max_some_repr/>

(push) ;; push{2

; Starting query at BinomialQueue.fst(635,2-647,28)

(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: BinomialQueue.priq)
;   (pl: BinomialQueue.ms)
;   (k: BinomialQueue.key_t)
;   (q: BinomialQueue.priq)
;   (ql: BinomialQueue.ms).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     BinomialQueue.repr p pl /\ BinomialQueue.delete_max p == FStar.Pervasives.Native.Some (k, q) /\
;     BinomialQueue.repr q ql /\
;     (forall (pure_result: Prims.unit).
;         BinomialQueue.permutation pl (BinomialQueue.ms_cons k ql) /\
;         (forall (x: BinomialQueue.key_t). FStar.Set.mem x pl.ms_elems ==> x <= k) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(None? (BinomialQueue.find_max FStar.Pervasives.Native.None p)) /\
;           ~(Some? (BinomialQueue.find_max FStar.Pervasives.Native.None p)) ==>
;           Prims.l_False) /\
;         (BinomialQueue.find_max FStar.Pervasives.Native.None p == FStar.Pervasives.Native.None ==>
;           (forall (any_result: Prims.unit). k any_result)) /\
;         (~(None? (BinomialQueue.find_max FStar.Pervasives.Native.None p)) ==>
;           (forall (b: BinomialQueue.key_t).
;               BinomialQueue.find_max FStar.Pervasives.Native.None p ==
;               FStar.Pervasives.Native.Some b ==>
;               (forall (pure_result: Prims.unit).
;                   BinomialQueue.find_max FStar.Pervasives.Native.None p ==
;                   FStar.Pervasives.Native.None \/
;                   Some? (BinomialQueue.find_max FStar.Pervasives.Native.None p) /\
;                   FStar.Set.mem (BinomialQueue.find_max FStar.Pervasives.Native.None p).v
;                     (BinomialQueue.keys p).ms_elems ==>
;                   Prims.hasEq BinomialQueue.key_t /\
;                   (forall (any_result: Type0).
;                       BinomialQueue.key_t == any_result ==>
;                       (forall (any_result: Prims.bool).
;                           FStar.Set.mem b (BinomialQueue.keys p).ms_elems == any_result ==>
;                           (forall (any_result: Prims.logical).
;                               FStar.Set.mem b (BinomialQueue.keys p).ms_elems == any_result ==>
;                               FStar.Set.mem b (BinomialQueue.keys p).ms_elems /\
;                               (forall (pure_result: Prims.unit).
;                                   FStar.Set.mem b (BinomialQueue.keys p).ms_elems ==>
;                                   BinomialQueue.is_binomial_queue 1 p /\
;                                   (forall (pure_result:
;                                       BinomialQueue.key_t &
;                                       BinomialQueue.forest &
;                                       BinomialQueue.priq).
;                                       (let x, q, _ = pure_result in
;                                         b <= x /\ BinomialQueue.is_binomial_queue 1 q) ==>
;                                       BinomialQueue.delete_max_aux b 1 p == pure_result ==>
;                                       (forall (b: BinomialQueue.key_t)
;                                           (b: BinomialQueue.forest)
;                                           (b: BinomialQueue.priq).
;                                           BinomialQueue.delete_max_aux b 1 p == (b, b, b) ==>
;                                           FStar.Set.mem b (BinomialQueue.keys p).ms_elems /\
;                                           BinomialQueue.is_binomial_queue 1 p /\
;                                           BinomialQueue.repr_l p pl /\
;                                           BinomialQueue.delete_max_aux b 1 p == (b, b, b) /\
;                                           BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                           BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                           (forall (pure_result: Prims.unit).
;                                               BinomialQueue.permutation pl
;                                                 (BinomialQueue.ms_append (BinomialQueue.ms_singleton
;                                                         b)
;                                                     (BinomialQueue.ms_append (BinomialQueue.keys b)
;                                                         (BinomialQueue.keys b))) ==>
;                                               BinomialQueue.is_binomial_queue 1 b /\
;                                               BinomialQueue.is_binomial_queue 1 b /\
;                                               (Leaf? BinomialQueue.Leaf \/
;                                                 BinomialQueue.is_pow2heap 1 BinomialQueue.Leaf) /\
;                                               (forall (pure_result: BinomialQueue.forest).
;                                                   BinomialQueue.is_binomial_queue 1 pure_result ==>
;                                                   BinomialQueue.join 1 b b BinomialQueue.Leaf ==
;                                                   pure_result ==>
;                                                   BinomialQueue.is_binomial_queue 1 b /\
;                                                   BinomialQueue.is_binomial_queue 1 b /\
;                                                   (Leaf? BinomialQueue.Leaf \/
;                                                     BinomialQueue.is_pow2heap 1 BinomialQueue.Leaf) /\
;                                                   BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                                   BinomialQueue.repr_l b (BinomialQueue.keys b) /\
;                                                   BinomialQueue.repr_t BinomialQueue.Leaf
;                                                     BinomialQueue.ms_empty /\
;                                                   (forall (pure_result: Prims.unit).
;                                                       BinomialQueue.repr_l (BinomialQueue.join 1
;                                                             b
;                                                             b
;                                                             BinomialQueue.Leaf)
;                                                         (BinomialQueue.ms_append (BinomialQueue.keys
;                                                                 b)
;                                                             (BinomialQueue.ms_append (BinomialQueue.keys
;                                                                     b)
;                                                                 BinomialQueue.ms_empty)) ==>
;                                                       (forall (pure_result: Prims.unit).
;                                                           BinomialQueue.permutation (BinomialQueue.keys
;                                                                 (BinomialQueue.join 1
;                                                                     b
;                                                                     b
;                                                                     BinomialQueue.Leaf))
;                                                             (BinomialQueue.keys (BinomialQueue.mk_compact
;                                                                     (BinomialQueue.join 1
;                                                                         b
;                                                                         b
;                                                                         BinomialQueue.Leaf))) ==>
;                                                           BinomialQueue.permutation pl
;                                                             (BinomialQueue.ms_append (BinomialQueue.ms_singleton
;                                                                     k)
;                                                                 ql) /\
;                                                           (forall (pure_result: Prims.unit).
;                                                               BinomialQueue.permutation pl
;                                                                 (BinomialQueue.ms_append (BinomialQueue.ms_singleton
;                                                                         k)
;                                                                     ql) ==>
;                                                               BinomialQueue.is_binomial_queue 1 p /\
;                                                               Some? (BinomialQueue.find_max FStar.Pervasives.Native.None
;                                                                     p) /\
;                                                               (forall (pure_result: Prims.unit).
;                                                                   (let
;                                                                     FStar.Pervasives.Native.Some k =
;                                                                       BinomialQueue.find_max FStar.Pervasives.Native.None
;                                                                         p
;                                                                     in
;                                                                     BinomialQueue.max k
;                                                                       (BinomialQueue.keys p)
;                                                                         .ms_elems) ==>
;                                                                   k pure_result))))))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let delete_max_some_repr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
BinomialQueue.priq)
(HasType @x1
BinomialQueue.ms)
(HasType @x2
BinomialQueue.key_t)
(HasType @x3
BinomialQueue.priq)
(HasType @x4
BinomialQueue.ms))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=BinomialQueue.fsti(108,13-108,24); use=BinomialQueue.fst(635,2-647,28)
(Valid 
;; def=BinomialQueue.fsti(108,13-108,24); use=BinomialQueue.fst(635,2-647,28)
(BinomialQueue.repr @x0
@x1)
)


;; def=BinomialQueue.fsti(109,13-109,40); use=BinomialQueue.fst(635,2-647,28)
(= (BinomialQueue.delete_max @x0)
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.tuple2 BinomialQueue.key_t
BinomialQueue.priq)
(FStar.Pervasives.Native.Mktuple2 BinomialQueue.key_t
BinomialQueue.priq
@x2
@x3)))


;; def=BinomialQueue.fsti(110,13-110,24); use=BinomialQueue.fst(635,2-647,28)
(Valid 
;; def=BinomialQueue.fsti(110,13-110,24); use=BinomialQueue.fst(635,2-647,28)
(BinomialQueue.repr @x3
@x4)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x6 Term))
 (! (implies (and (or label_1
(HasType @x6
Prims.unit))

;; def=BinomialQueue.fsti(112,13-112,42); use=BinomialQueue.fst(635,2-647,28)
(or label_2

;; def=BinomialQueue.fsti(112,13-112,42); use=BinomialQueue.fst(635,2-647,28)
(Valid 
;; def=BinomialQueue.fsti(112,13-112,42); use=BinomialQueue.fst(635,2-647,28)
(BinomialQueue.permutation @x1
(BinomialQueue.ms_cons @x2
@x4))
)
)


;; def=BinomialQueue.fsti(113,13-113,63); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.key_t)

;; def=BinomialQueue.fsti(113,32-113,51); use=BinomialQueue.fst(635,2-647,28)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
@x7
(BinomialQueue.__proj__Mkms__item__ms_elems @x1)))
)

;; def=BinomialQueue.fsti(113,56-113,62); use=BinomialQueue.fst(635,2-647,28)
(or label_3

;; def=BinomialQueue.fsti(113,56-113,62); use=BinomialQueue.fst(635,2-647,28)
(<= (BoxInt_proj_0 @x7)
(BoxInt_proj_0 @x2))
)
)
 
;;no pats
:qid @query.3))
)

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(635,2-647,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(635,2-647,28)
(ApplyTT @x5
@x6)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(635,2-647,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(635,2-647,28)
(ApplyTT @x5
@x6)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x7 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(635,2-647,28)
(Valid 
;; def=Prims.fst(402,73-402,79); use=BinomialQueue.fst(635,2-647,28)
(ApplyTT @x5
@x7)
)


;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(635,2-647,28)
(Valid 
;; def=Prims.fst(402,84-402,87); use=BinomialQueue.fst(635,2-647,28)
(ApplyTT @x6
@x7)
)
)
 :weight 0


:pattern ((ApplyTT @x6
@x7))
:qid @query.5))
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(635,2-647,28)
(and (implies 
;; def=BinomialQueue.fst(635,8-635,23); use=BinomialQueue.fst(635,8-635,23)
(and 
;; def=BinomialQueue.fst(635,8-635,23); use=BinomialQueue.fst(635,8-635,23)
(not 
;; def=BinomialQueue.fst(635,8-635,23); use=BinomialQueue.fst(635,8-635,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
)


;; def=BinomialQueue.fst(635,8-635,23); use=BinomialQueue.fst(635,8-635,23)
(not 
;; def=BinomialQueue.fst(635,8-635,23); use=BinomialQueue.fst(635,8-635,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
)
)

label_4)
(implies 
;; def=BinomialQueue.fst(635,8-636,8); use=BinomialQueue.fst(635,8-636,8)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)
(FStar.Pervasives.Native.None BinomialQueue.key_t))


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(635,2-647,28)
(Valid 
;; def=Prims.fst(451,90-451,102); use=BinomialQueue.fst(635,2-647,28)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.6))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=BinomialQueue.fst(635,2-647,28)
(not 
;; def=BinomialQueue.fst(635,8-635,23); use=BinomialQueue.fst(635,8-635,23)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
)


;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
BinomialQueue.key_t)

;; def=BinomialQueue.fst(635,8-637,10); use=BinomialQueue.fst(635,8-637,10)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)
(FStar.Pervasives.Native.Some BinomialQueue.key_t
@x7))
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(638,4-638,21)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=BinomialQueue.fst(594,9-596,63); use=BinomialQueue.fst(638,4-638,21)
(or 
;; def=BinomialQueue.fst(594,9-594,32); use=BinomialQueue.fst(638,4-638,21)
(= (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)
(FStar.Pervasives.Native.None BinomialQueue.key_t))


;; def=BinomialQueue.fst(596,10-596,62); use=BinomialQueue.fst(638,4-638,21)
(and 
;; def=BinomialQueue.fst(596,10-596,20); use=BinomialQueue.fst(638,4-638,21)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))


;; def=BinomialQueue.fst(596,24-596,62); use=BinomialQueue.fst(638,4-638,21)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
(FStar.Pervasives.Native.__proj__Some__item__v BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0))
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x0))))
)
)
)

;; def=Prims.fst(459,77-459,89); use=BinomialQueue.fst(635,2-647,28)
(and 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(639,29-639,37)
(or label_5

;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(639,29-639,37)
(Valid 
;; def=Prims.fst(73,23-73,30); use=BinomialQueue.fst(639,29-639,37)
(Prims.hasEq BinomialQueue.key_t)
)
)


;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Tm_type)

;; def=FStar.Set.fsti(30,10-30,11); use=BinomialQueue.fst(635,2-647,28)
(= BinomialQueue.key_t
@x9)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=BinomialQueue.fst(635,2-647,28)
(= (FStar.Set.mem BinomialQueue.key_t
@x7
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x0)))
@x10)
)

;; def=Prims.fst(451,66-451,102); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=BinomialQueue.fst(635,2-647,28)
(= (Prims.b2t (FStar.Set.mem BinomialQueue.key_t
@x7
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x0))))
@x11)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(639,4-639,10)
(and 
;; def=BinomialQueue.fst(639,11-639,38); use=BinomialQueue.fst(639,4-639,10)
(or label_6

;; def=BinomialQueue.fst(639,11-639,38); use=BinomialQueue.fst(639,4-639,10)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
@x7
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x0))))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(639,4-639,10)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=BinomialQueue.fst(639,11-639,38); use=BinomialQueue.fst(639,4-639,10)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
@x7
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x0))))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(640,22-640,36)
(and 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(640,22-640,36)
(or label_7

;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(640,22-640,36)
(Valid 
;; def=BinomialQueue.fst(271,19-271,40); use=BinomialQueue.fst(640,22-640,36)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x0)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(640,22-640,36)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq))
(let ((@lb14 @x13))

;; def=BinomialQueue.fst(272,35-272,66); use=BinomialQueue.fst(640,22-640,36)
(and 
;; def=BinomialQueue.fst(272,35-272,41); use=BinomialQueue.fst(640,22-640,36)
(<= (BoxInt_proj_0 @x7)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple3__1 @lb14)))


;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(640,22-640,36)
(Valid 
;; def=BinomialQueue.fst(272,45-272,66); use=BinomialQueue.fst(640,22-640,36)
(BinomialQueue.is_binomial_queue (BoxInt 1)
(FStar.Pervasives.Native.Mktuple3__2 @lb14))
)
)
)

;; def=BinomialQueue.fst(640,8-640,42); use=BinomialQueue.fst(640,8-640,42)
(= (BinomialQueue.delete_max_aux @x7
(BoxInt 1)
@x0)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x14 Term))
 (! (implies (HasType @x14
BinomialQueue.key_t)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x15 Term))
 (! (implies (HasType @x15
BinomialQueue.forest)

;; def=Prims.fst(413,99-413,120); use=BinomialQueue.fst(635,2-647,28)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
BinomialQueue.priq)

;; def=BinomialQueue.fst(640,8-640,19); use=BinomialQueue.fst(640,8-640,19)
(= (BinomialQueue.delete_max_aux @x7
(BoxInt 1)
@x0)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
@x14
@x15
@x16))
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(641,4-641,23)
(and 
;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(641,4-641,23)
(or label_8

;; def=BinomialQueue.fst(565,9-565,34); use=BinomialQueue.fst(641,4-641,23)
(BoxBool_proj_0 (FStar.Set.mem BinomialQueue.key_t
@x7
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x0))))
)


;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(641,4-641,23)
(or label_9

;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(641,4-641,23)
(Valid 
;; def=BinomialQueue.fst(566,9-566,30); use=BinomialQueue.fst(641,4-641,23)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x0)
)
)


;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(641,4-641,23)
(or label_10

;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(641,4-641,23)
(Valid 
;; def=BinomialQueue.fst(567,9-567,22); use=BinomialQueue.fst(641,4-641,23)
(BinomialQueue.repr_l @x0
@x1)
)
)


;; def=BinomialQueue.fst(568,9-568,42); use=BinomialQueue.fst(641,4-641,23)
(or label_11

;; def=BinomialQueue.fst(568,9-568,42); use=BinomialQueue.fst(641,4-641,23)
(= (BinomialQueue.delete_max_aux @x7
(BoxInt 1)
@x0)
(FStar.Pervasives.Native.Mktuple3 BinomialQueue.key_t
BinomialQueue.forest
BinomialQueue.priq
@x14
@x15
@x16))
)


;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(641,4-641,23)
(or label_12

;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(641,4-641,23)
(Valid 
;; def=BinomialQueue.fst(569,9-569,22); use=BinomialQueue.fst(641,4-641,23)
(BinomialQueue.repr_l @x15
(BinomialQueue.keys @x15))
)
)


;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(641,4-641,23)
(or label_13

;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(641,4-641,23)
(Valid 
;; def=BinomialQueue.fst(570,9-570,22); use=BinomialQueue.fst(641,4-641,23)
(BinomialQueue.repr_l @x16
(BinomialQueue.keys @x16))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(641,4-641,23)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(641,4-641,23)
(Valid 
;; def=BinomialQueue.fst(572,9-573,53); use=BinomialQueue.fst(641,4-641,23)
(BinomialQueue.permutation @x1
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x14)
(BinomialQueue.ms_append (BinomialQueue.keys @x15)
(BinomialQueue.keys @x16))))
)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(643,12-643,16)
(and 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(643,12-643,16)
(or label_14

;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(643,12-643,16)
(Valid 
;; def=BinomialQueue.fst(170,12-170,33); use=BinomialQueue.fst(643,12-643,16)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x15)
)
)


;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(643,12-643,16)
(or label_15

;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(643,12-643,16)
(Valid 
;; def=BinomialQueue.fst(171,12-171,33); use=BinomialQueue.fst(643,12-643,16)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x16)
)
)


;; def=BinomialQueue.fst(172,12-172,40); use=BinomialQueue.fst(643,12-643,16)
(or label_16

;; def=BinomialQueue.fst(172,13-172,20); use=BinomialQueue.fst(643,12-643,16)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(643,12-643,16)
(Valid 
;; def=BinomialQueue.fst(172,24-172,39); use=BinomialQueue.fst(643,12-643,16)
(BinomialQueue.is_pow2heap (BoxInt 1)
BinomialQueue.Leaf@tok)
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(643,12-643,16)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
BinomialQueue.forest)

;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(643,12-643,16)
(Valid 
;; def=BinomialQueue.fst(173,27-173,48); use=BinomialQueue.fst(643,12-643,16)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x18)
)


;; def=BinomialQueue.fst(643,8-643,31); use=BinomialQueue.fst(643,8-643,31)
(= (BinomialQueue.join (BoxInt 1)
@x15
@x16
BinomialQueue.Leaf@tok)
@x18)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(644,4-644,13)
(and 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(644,4-644,13)
(or label_17

;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(644,4-644,13)
(Valid 
;; def=BinomialQueue.fst(366,9-366,30); use=BinomialQueue.fst(644,4-644,13)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x15)
)
)


;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(644,4-644,13)
(or label_18

;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(644,4-644,13)
(Valid 
;; def=BinomialQueue.fst(367,9-367,30); use=BinomialQueue.fst(644,4-644,13)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x16)
)
)


;; def=BinomialQueue.fst(368,9-368,37); use=BinomialQueue.fst(644,4-644,13)
(or label_19

;; def=BinomialQueue.fst(368,10-368,17); use=BinomialQueue.fst(644,4-644,13)
(BoxBool_proj_0 (BinomialQueue.uu___is_Leaf BinomialQueue.Leaf@tok))


;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(644,4-644,13)
(Valid 
;; def=BinomialQueue.fst(368,21-368,36); use=BinomialQueue.fst(644,4-644,13)
(BinomialQueue.is_pow2heap (BoxInt 1)
BinomialQueue.Leaf@tok)
)
)


;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(644,4-644,13)
(or label_20

;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(644,4-644,13)
(Valid 
;; def=BinomialQueue.fst(369,9-369,22); use=BinomialQueue.fst(644,4-644,13)
(BinomialQueue.repr_l @x15
(BinomialQueue.keys @x15))
)
)


;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(644,4-644,13)
(or label_21

;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(644,4-644,13)
(Valid 
;; def=BinomialQueue.fst(370,9-370,22); use=BinomialQueue.fst(644,4-644,13)
(BinomialQueue.repr_l @x16
(BinomialQueue.keys @x16))
)
)


;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(644,4-644,13)
(or label_22

;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(644,4-644,13)
(Valid 
;; def=BinomialQueue.fst(371,9-371,22); use=BinomialQueue.fst(644,4-644,13)
(BinomialQueue.repr_t BinomialQueue.Leaf@tok
(BinomialQueue.ms_empty Dummy_value))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(644,4-644,13)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Prims.unit)

;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(644,4-644,13)
(Valid 
;; def=BinomialQueue.fst(372,15-372,67); use=BinomialQueue.fst(644,4-644,13)
(BinomialQueue.repr_l (BinomialQueue.join (BoxInt 1)
@x15
@x16
BinomialQueue.Leaf@tok)
(BinomialQueue.ms_append (BinomialQueue.keys @x15)
(BinomialQueue.ms_append (BinomialQueue.keys @x16)
(BinomialQueue.ms_empty Dummy_value))))
)
)

;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(645,4-645,26)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.unit)

;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(645,4-645,26)
(Valid 
;; def=BinomialQueue.fst(421,10-421,54); use=BinomialQueue.fst(645,4-645,26)
(BinomialQueue.permutation (BinomialQueue.keys (BinomialQueue.join (BoxInt 1)
@x15
@x16
BinomialQueue.Leaf@tok))
(BinomialQueue.keys (BinomialQueue.mk_compact (BinomialQueue.join (BoxInt 1)
@x15
@x16
BinomialQueue.Leaf@tok))))
)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(646,4-646,10)
(and 
;; def=BinomialQueue.fst(646,11-646,59); use=BinomialQueue.fst(646,4-646,10)
(or label_23

;; def=BinomialQueue.fst(646,11-646,59); use=BinomialQueue.fst(646,4-646,10)
(Valid 
;; def=BinomialQueue.fst(646,11-646,59); use=BinomialQueue.fst(646,4-646,10)
(BinomialQueue.permutation @x1
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x2)
@x4))
)
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(646,4-646,10)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.unit)

;; def=BinomialQueue.fst(646,11-646,59); use=BinomialQueue.fst(646,4-646,10)
(Valid 
;; def=BinomialQueue.fst(646,11-646,59); use=BinomialQueue.fst(646,4-646,10)
(BinomialQueue.permutation @x1
(BinomialQueue.ms_append (BinomialQueue.ms_singleton @x2)
@x4))
)
)

;; def=Prims.fst(441,29-441,97); use=BinomialQueue.fst(647,4-647,19)
(and 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(647,4-647,19)
(or label_24

;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(647,4-647,19)
(Valid 
;; def=BinomialQueue.fst(612,9-612,30); use=BinomialQueue.fst(647,4-647,19)
(BinomialQueue.is_binomial_queue (BoxInt 1)
@x0)
)
)


;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(647,4-647,19)
(or label_25

;; def=BinomialQueue.fst(613,9-613,32); use=BinomialQueue.fst(647,4-647,19)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some BinomialQueue.key_t
(BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
)


;; def=Prims.fst(441,36-441,97); use=BinomialQueue.fst(647,4-647,19)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)
(let ((@lb23 (BinomialQueue.find_max (FStar.Pervasives.Native.None BinomialQueue.key_t)
@x0)))
(ite (is-FStar.Pervasives.Native.Some @lb23)

;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(647,4-647,19)
(Valid 
;; def=BinomialQueue.fst(616,10-616,33); use=BinomialQueue.fst(647,4-647,19)
(BinomialQueue.max (FStar.Pervasives.Native.Some_v @lb23)
(BinomialQueue.__proj__Mkms__item__ms_elems (BinomialQueue.keys @x0)))
)

Unreachable)))

;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(647,4-647,19)
(Valid 
;; def=Prims.fst(441,83-441,96); use=BinomialQueue.fst(647,4-647,19)
(ApplyTT @x6
@x22)
)
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (BinomialQueue.delete_max_some_repr, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_BinomialQueue.find_max.fuel_instrumented, @fuel_correspondence_BinomialQueue.join.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys.fuel_instrumented, @fuel_correspondence_BinomialQueue.keys_of_tree.fuel_instrumented, @query, BinomialQueue_interpretation_Tm_arrow_e979b9dc6be45dd92c9914c44a112e40, BinomialQueue_pretyping_c1ab7496c060d1f2d977fd02b92d48e2, bool_inversion, constructor_distinct_BinomialQueue.Leaf, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, data_elim_BinomialQueue.Mkms, data_typing_intro_FStar.Pervasives.Native.None@tok, disc_equation_BinomialQueue.Leaf, equality_tok_BinomialQueue.Leaf@tok, equation_BinomialQueue.delete_max, equation_BinomialQueue.forest, equation_BinomialQueue.is_priq, equation_BinomialQueue.key_t, equation_BinomialQueue.max, equation_BinomialQueue.ms_append, equation_BinomialQueue.ms_cons, equation_BinomialQueue.ms_empty, equation_BinomialQueue.ms_singleton, equation_BinomialQueue.permutation, equation_BinomialQueue.priq, equation_BinomialQueue.repr, equation_BinomialQueue.repr_l, equation_BinomialQueue.repr_t, equation_Prims.eqtype, equation_Prims.nat, equation_with_fuel_BinomialQueue.keys.fuel_instrumented, equation_with_fuel_BinomialQueue.keys_of_tree.fuel_instrumented, fuel_guarded_inversion_BinomialQueue.ms, fuel_guarded_inversion_Prims.list, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_015f65dc738b17ca923c21bdd897be70, interpretation_Tm_abs_0750d50e859fe4be4a1d3b6be7ce934c, lemma_FStar.Pervasives.invertOption, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, proj_equation_BinomialQueue.Mkms_ms_count, proj_equation_BinomialQueue.Mkms_ms_elems, proj_equation_FStar.Pervasives.Native.Some_v, projection_inverse_BinomialQueue.Mkms_ms_count, projection_inverse_BinomialQueue.Mkms_ms_elems, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.None_a, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_bf9b8da8f290823f0b11be068baec869, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_BinomialQueue.__proj__Mkms__item__ms_count, token_correspondence_BinomialQueue.keys.fuel_instrumented, typing_BinomialQueue.__proj__Mkms__item__ms_elems, typing_BinomialQueue.find_max, typing_BinomialQueue.keys, typing_BinomialQueue.ms_append, typing_BinomialQueue.ms_empty, typing_BinomialQueue.ms_singleton, typing_FStar.Pervasives.Native.uu___is_None, typing_FStar.Set.empty, typing_FStar.Set.mem, typing_FStar.Set.singleton, typing_FStar.Set.union, typing_Prims.int, typing_Tm_abs_015f65dc738b17ca923c21bdd897be70, typing_tok_BinomialQueue.Leaf@tok
