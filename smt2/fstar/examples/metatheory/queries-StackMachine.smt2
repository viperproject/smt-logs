
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)
(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)

(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot

(push) ;; push{1

; Internals for StackMachine


; encoding sigelt type StackMachine.binop


; <Start encoding type StackMachine.binop>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.binop () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.Plus () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.Plus
(declare-fun StackMachine.Plus@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.Times () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.Times
(declare-fun StackMachine.Times@tok () Term)

; <start constructor StackMachine.binop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.binop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
StackMachine.binop)))

; </end constructor StackMachine.binop>


; <start constructor StackMachine.Plus>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.Plus ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
128)
(= __@x0
StackMachine.Plus)))

; </end constructor StackMachine.Plus>


; <start constructor StackMachine.Times>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.Times ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
StackMachine.Times)))

; </end constructor StackMachine.Times>


; </end encoding type StackMachine.binop>


; encoding sigelt assume StackMachine.binop__uu___haseq


; <Start encoding assume StackMachine.binop__uu___haseq>


; </end encoding assume StackMachine.binop__uu___haseq>


; encoding sigelt val StackMachine.uu___is_Plus


; <Start encoding val StackMachine.uu___is_Plus>

(declare-fun StackMachine.uu___is_Plus (Term) Term)
;;;;;;;;;;;;;;;;projectee: binop -> Prims.bool
(declare-fun Tm_arrow_aea1ce93fd1b3d4a6b224383ab53013a () Term)
(declare-fun StackMachine.uu___is_Plus@tok () Term)

; </end encoding val StackMachine.uu___is_Plus>


; encoding sigelt let uu___is_Plus


; <Skipped let uu___is_Plus/>


; encoding sigelt val StackMachine.uu___is_Times


; <Start encoding val StackMachine.uu___is_Times>

(declare-fun StackMachine.uu___is_Times (Term) Term)

(declare-fun StackMachine.uu___is_Times@tok () Term)

; </end encoding val StackMachine.uu___is_Times>


; encoding sigelt let uu___is_Times


; <Skipped let uu___is_Times/>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type StackMachine.exp


; <Start encoding type StackMachine.exp>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.exp () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.Const
(declare-fun StackMachine.Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.Binop (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.Binop__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.Binop__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.Binop__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.Binop
(declare-fun StackMachine.Binop@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> exp
(declare-fun Tm_arrow_5a34f572f0dcbfbd1514f42038af137e () Term)
;;;;;;;;;;;;;;;;_0: binop -> _1: exp -> _2: exp -> exp
(declare-fun Tm_arrow_1ba101b73eb6dfd5bfda93b8739649bb () Term)

; <start constructor StackMachine.exp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.exp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(= __@x0
StackMachine.exp)))

; </end constructor StackMachine.exp>


; <start constructor StackMachine.Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
156)
(= __@x0
(StackMachine.Const (StackMachine.Const__0 __@x0)))))

; </end constructor StackMachine.Const>


; <start constructor StackMachine.Binop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.Binop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
161)
(= __@x0
(StackMachine.Binop (StackMachine.Binop__0 __@x0)
(StackMachine.Binop__1 __@x0)
(StackMachine.Binop__2 __@x0)))))

; </end constructor StackMachine.Binop>


; </end encoding type StackMachine.exp>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (HasType StackMachine.Times@tok
StackMachine.binop)
:named typing_tok_StackMachine.Times@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (HasType StackMachine.Plus@tok
StackMachine.binop)
:named typing_tok_StackMachine.Plus@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.Const @x1)
StackMachine.exp)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.Const @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.Const @x1)
StackMachine.exp))
:qid subterm_ordering_StackMachine.Const))

:named subterm_ordering_StackMachine.Const))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.Binop @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.Binop @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StackMachine.Binop @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp))
:qid subterm_ordering_StackMachine.Binop))

:named subterm_ordering_StackMachine.Binop))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@x0 Term))
 (! (= (StackMachine.Const__0 (StackMachine.Const @x0))
@x0)
 

:pattern ((StackMachine.Const @x0))
:qid projection_inverse_StackMachine.Const__0))

:named projection_inverse_StackMachine.Const__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.Binop__2 (StackMachine.Binop @x0
@x1
@x2))
@x2)
 

:pattern ((StackMachine.Binop @x0
@x1
@x2))
:qid projection_inverse_StackMachine.Binop__2))

:named projection_inverse_StackMachine.Binop__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.Binop__1 (StackMachine.Binop @x0
@x1
@x2))
@x1)
 

:pattern ((StackMachine.Binop @x0
@x1
@x2))
:qid projection_inverse_StackMachine.Binop__1))

:named projection_inverse_StackMachine.Binop__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.Binop__0 (StackMachine.Binop @x0
@x1
@x2))
@x0)
 

:pattern ((StackMachine.Binop @x0
@x1
@x2))
:qid projection_inverse_StackMachine.Binop__0))

:named projection_inverse_StackMachine.Binop__0))
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! (HasType StackMachine.exp
Tm_type)
:named kinding_StackMachine.exp@tok))
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (HasType StackMachine.binop
Tm_type)
:named kinding_StackMachine.binop@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(26,5-26,8); use=StackMachine.fst(26,5-26,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StackMachine.exp)
(or (is-StackMachine.Const @x1)
(is-StackMachine.Binop @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StackMachine.exp))
:qid fuel_guarded_inversion_StackMachine.exp))

:named fuel_guarded_inversion_StackMachine.exp))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,5-24,10); use=StackMachine.fst(24,5-24,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StackMachine.binop)
(or (is-StackMachine.Plus @x1)
(is-StackMachine.Times @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StackMachine.binop))
:qid fuel_guarded_inversion_StackMachine.binop))

:named fuel_guarded_inversion_StackMachine.binop))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= StackMachine.Times@tok
StackMachine.Times)
:named equality_tok_StackMachine.Times@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= StackMachine.Plus@tok
StackMachine.Plus)
:named equality_tok_StackMachine.Plus@tok))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,30-24,35); use=StackMachine.fst(24,30-24,35)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StackMachine.Times
StackMachine.binop)
 

:pattern ((HasTypeFuel @u0
StackMachine.Times
StackMachine.binop))
:qid data_typing_intro_StackMachine.Times@tok))

:named data_typing_intro_StackMachine.Times@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,23-24,27); use=StackMachine.fst(24,23-24,27)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StackMachine.Plus
StackMachine.binop)
 

:pattern ((HasTypeFuel @u0
StackMachine.Plus
StackMachine.binop))
:qid data_typing_intro_StackMachine.Plus@tok))

:named data_typing_intro_StackMachine.Plus@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
(StackMachine.Const @x1)
StackMachine.exp))
 

:pattern ((HasTypeFuel @u0
(StackMachine.Const @x1)
StackMachine.exp))
:qid data_typing_intro_StackMachine.Const@tok))

:named data_typing_intro_StackMachine.Const@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.binop)
(HasTypeFuel @u0
@x2
StackMachine.exp)
(HasTypeFuel @u0
@x3
StackMachine.exp))
(HasTypeFuel @u0
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp))
 

:pattern ((HasTypeFuel @u0
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp))
:qid data_typing_intro_StackMachine.Binop@tok))

:named data_typing_intro_StackMachine.Binop@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.Const @x1)
StackMachine.exp)
(HasTypeFuel @u0
@x1
Prims.nat))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.Const @x1)
StackMachine.exp))
:qid data_elim_StackMachine.Const))

:named data_elim_StackMachine.Const))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp)
(and (HasTypeFuel @u0
@x1
StackMachine.binop)
(HasTypeFuel @u0
@x2
StackMachine.exp)
(HasTypeFuel @u0
@x3
StackMachine.exp)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp))
:qid data_elim_StackMachine.Binop))

:named data_elim_StackMachine.Binop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! (= 150
(Term_constr_id StackMachine.exp))
:named constructor_distinct_StackMachine.exp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= 122
(Term_constr_id StackMachine.binop))
:named constructor_distinct_StackMachine.binop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= 130
(Term_constr_id StackMachine.Times))
:named constructor_distinct_StackMachine.Times))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= 128
(Term_constr_id StackMachine.Plus))
:named constructor_distinct_StackMachine.Plus))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@x0 Term))
 (! (= 156
(Term_constr_id (StackMachine.Const @x0)))
 

:pattern ((StackMachine.Const @x0))
:qid constructor_distinct_StackMachine.Const))

:named constructor_distinct_StackMachine.Const))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 161
(Term_constr_id (StackMachine.Binop @x0
@x1
@x2)))
 

:pattern ((StackMachine.Binop @x0
@x1
@x2))
:qid constructor_distinct_StackMachine.Binop))

:named constructor_distinct_StackMachine.Binop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Assumption: StackMachine.binop__uu___haseq
;;; Fact-ids: Name StackMachine.binop__uu___haseq; Namespace StackMachine
(assert (! (Valid (Prims.hasEq StackMachine.binop))
:named assumption_StackMachine.binop__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,5-24,10); use=StackMachine.fst(24,5-24,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StackMachine.binop)
(= StackMachine.binop
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StackMachine.binop))
:qid StackMachine_pretyping_348f082711510f298b6584ad3416d399))

:named StackMachine_pretyping_348f082711510f298b6584ad3416d399))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(26,5-26,8); use=StackMachine.fst(26,5-26,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StackMachine.exp)
(= StackMachine.exp
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StackMachine.exp))
:qid StackMachine_pretyping_2a319081b764dd27a6651686e4e88bbc))

:named StackMachine_pretyping_2a319081b764dd27a6651686e4e88bbc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
(push) ;; push{4

; Starting query at StackMachine.fst(26,0-28,36)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : Prims.hasEq StackMachine.exp ==>
; (forall (_0: Prims.nat).
;     (*  - Failed to prove that the type
;     'StackMachine.exp'
;     supports decidable equality because of this argument.
;   - Add either the 'noeq' or 'unopteq' qualifier
; *)
;     Prims.hasEq Prims.nat) /\
; (forall (_0: StackMachine.binop) (_1: StackMachine.exp) (_2: StackMachine.exp).
;     Prims.hasEq StackMachine.binop /\ Prims.hasEq StackMachine.exp /\ Prims.hasEq StackMachine.exp)


; Context: While encoding a query
; While typechecking the top-level declaration `type StackMachine.exp`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (implies 
;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Valid 
;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Prims.hasEq StackMachine.exp)
)


;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(and 
;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)

;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(27,10-27,13)
(or label_1

;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Valid 
;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query))


;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.binop)
(HasType @x1
StackMachine.exp)
(HasType @x2
StackMachine.exp))

;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(and 
;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(28,10-28,15)
(or label_2

;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Valid 
;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Prims.hasEq StackMachine.binop)
)
)


;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(28,19-28,22)
(or label_3

;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Valid 
;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Prims.hasEq StackMachine.exp)
)
)


;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(28,26-28,29)
(or label_4

;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Valid 
;; def=StackMachine.fst(26,0-28,36); use=StackMachine.fst(26,0-28,36)
(Prims.hasEq StackMachine.exp)
)
)
)
)
 
;;no pats
:qid @query.1))
)
))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.exp, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_StackMachine.binop__uu___haseq, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type StackMachine.exp


; <Start encoding type StackMachine.exp>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.exp () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.Const
(declare-fun StackMachine.Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.Binop (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.Binop__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.Binop__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.Binop__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.Binop
(declare-fun StackMachine.Binop@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> exp
(declare-fun Tm_arrow_5a34f572f0dcbfbd1514f42038af137e () Term)
;;;;;;;;;;;;;;;;_0: binop -> _1: exp -> _2: exp -> exp
(declare-fun Tm_arrow_1ba101b73eb6dfd5bfda93b8739649bb () Term)

; <start constructor StackMachine.exp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.exp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(= __@x0
StackMachine.exp)))

; </end constructor StackMachine.exp>


; <start constructor StackMachine.Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
171)
(= __@x0
(StackMachine.Const (StackMachine.Const__0 __@x0)))))

; </end constructor StackMachine.Const>


; <start constructor StackMachine.Binop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.Binop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(StackMachine.Binop (StackMachine.Binop__0 __@x0)
(StackMachine.Binop__1 __@x0)
(StackMachine.Binop__2 __@x0)))))

; </end constructor StackMachine.Binop>


; </end encoding type StackMachine.exp>


; encoding sigelt assume StackMachine.exp__uu___haseq


; <Start encoding assume StackMachine.exp__uu___haseq>


; </end encoding assume StackMachine.exp__uu___haseq>


; encoding sigelt val StackMachine.uu___is_Const


; <Start encoding val StackMachine.uu___is_Const>

(declare-fun StackMachine.uu___is_Const (Term) Term)
;;;;;;;;;;;;;;;;projectee: exp -> Prims.bool
(declare-fun Tm_arrow_f8a982fa742fb422923124e3aed57d4f () Term)
(declare-fun StackMachine.uu___is_Const@tok () Term)

; </end encoding val StackMachine.uu___is_Const>


; encoding sigelt let uu___is_Const


; <Skipped let uu___is_Const/>


; encoding sigelt val StackMachine.__proj__Const__item___0


; <Start encoding val StackMachine.__proj__Const__item___0>

(declare-fun Tm_refine_733535f472f5bce64316080d16cf1692 () Term)
(declare-fun StackMachine.__proj__Const__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: exp{Const? _} -> Prims.nat
(declare-fun Tm_arrow_97d226c82cb8f05a40fa9ab26a69db3c () Term)
(declare-fun StackMachine.__proj__Const__item___0@tok () Term)

; </end encoding val StackMachine.__proj__Const__item___0>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (HasType StackMachine.Times@tok
StackMachine.binop)
:named typing_tok_StackMachine.Times@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (HasType StackMachine.Plus@tok
StackMachine.binop)
:named typing_tok_StackMachine.Plus@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_Const; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.exp)
(HasType (StackMachine.uu___is_Const @x0)
Prims.bool))
 

:pattern ((StackMachine.uu___is_Const @x0))
:qid typing_StackMachine.uu___is_Const))

:named typing_StackMachine.uu___is_Const))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.Const @x1)
StackMachine.exp)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.Const @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.Const @x1)
StackMachine.exp))
:qid subterm_ordering_StackMachine.Const))

:named subterm_ordering_StackMachine.Const))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.Binop @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.Binop @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StackMachine.Binop @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp))
:qid subterm_ordering_StackMachine.Binop))

:named subterm_ordering_StackMachine.Binop))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__Const__item___0; Namespace StackMachine
(assert (! (HasType Tm_refine_733535f472f5bce64316080d16cf1692
Tm_type)
:named refinement_kinding_Tm_refine_733535f472f5bce64316080d16cf1692))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__Const__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_733535f472f5bce64316080d16cf1692)
(and (HasTypeFuel @u0
@x1
StackMachine.exp)

;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(BoxBool_proj_0 (StackMachine.uu___is_Const @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_733535f472f5bce64316080d16cf1692))
:qid refinement_interpretation_Tm_refine_733535f472f5bce64316080d16cf1692))

:named refinement_interpretation_Tm_refine_733535f472f5bce64316080d16cf1692))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@x0 Term))
 (! (= (StackMachine.Const__0 (StackMachine.Const @x0))
@x0)
 

:pattern ((StackMachine.Const @x0))
:qid projection_inverse_StackMachine.Const__0))

:named projection_inverse_StackMachine.Const__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.Binop__2 (StackMachine.Binop @x0
@x1
@x2))
@x2)
 

:pattern ((StackMachine.Binop @x0
@x1
@x2))
:qid projection_inverse_StackMachine.Binop__2))

:named projection_inverse_StackMachine.Binop__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.Binop__1 (StackMachine.Binop @x0
@x1
@x2))
@x1)
 

:pattern ((StackMachine.Binop @x0
@x1
@x2))
:qid projection_inverse_StackMachine.Binop__1))

:named projection_inverse_StackMachine.Binop__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.Binop__0 (StackMachine.Binop @x0
@x1
@x2))
@x0)
 

:pattern ((StackMachine.Binop @x0
@x1
@x2))
:qid projection_inverse_StackMachine.Binop__0))

:named projection_inverse_StackMachine.Binop__0))
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! (HasType StackMachine.exp
Tm_type)
:named kinding_StackMachine.exp@tok))
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (HasType StackMachine.binop
Tm_type)
:named kinding_StackMachine.binop@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_733535f472f5bce64316080d16cf1692
;;; Fact-ids: Name StackMachine.__proj__Const__item___0; Namespace StackMachine
(assert (! (iff (Valid (Prims.hasEq Tm_refine_733535f472f5bce64316080d16cf1692))
(Valid (Prims.hasEq StackMachine.exp)))
:named haseqTm_refine_733535f472f5bce64316080d16cf1692))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(26,5-26,8); use=StackMachine.fst(26,5-26,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StackMachine.exp)
(or (is-StackMachine.Const @x1)
(is-StackMachine.Binop @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StackMachine.exp))
:qid fuel_guarded_inversion_StackMachine.exp))

:named fuel_guarded_inversion_StackMachine.exp))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,5-24,10); use=StackMachine.fst(24,5-24,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StackMachine.binop)
(or (is-StackMachine.Plus @x1)
(is-StackMachine.Times @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StackMachine.binop))
:qid fuel_guarded_inversion_StackMachine.binop))

:named fuel_guarded_inversion_StackMachine.binop))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= StackMachine.Times@tok
StackMachine.Times)
:named equality_tok_StackMachine.Times@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= StackMachine.Plus@tok
StackMachine.Plus)
:named equality_tok_StackMachine.Plus@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_Const; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@x0 Term))
 (! (= (StackMachine.uu___is_Const @x0)
(BoxBool (is-StackMachine.Const @x0)))
 

:pattern ((StackMachine.uu___is_Const @x0))
:qid disc_equation_StackMachine.Const))

:named disc_equation_StackMachine.Const))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,30-24,35); use=StackMachine.fst(24,30-24,35)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StackMachine.Times
StackMachine.binop)
 

:pattern ((HasTypeFuel @u0
StackMachine.Times
StackMachine.binop))
:qid data_typing_intro_StackMachine.Times@tok))

:named data_typing_intro_StackMachine.Times@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,23-24,27); use=StackMachine.fst(24,23-24,27)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StackMachine.Plus
StackMachine.binop)
 

:pattern ((HasTypeFuel @u0
StackMachine.Plus
StackMachine.binop))
:qid data_typing_intro_StackMachine.Plus@tok))

:named data_typing_intro_StackMachine.Plus@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
(StackMachine.Const @x1)
StackMachine.exp))
 

:pattern ((HasTypeFuel @u0
(StackMachine.Const @x1)
StackMachine.exp))
:qid data_typing_intro_StackMachine.Const@tok))

:named data_typing_intro_StackMachine.Const@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.binop)
(HasTypeFuel @u0
@x2
StackMachine.exp)
(HasTypeFuel @u0
@x3
StackMachine.exp))
(HasTypeFuel @u0
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp))
 

:pattern ((HasTypeFuel @u0
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp))
:qid data_typing_intro_StackMachine.Binop@tok))

:named data_typing_intro_StackMachine.Binop@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.Const @x1)
StackMachine.exp)
(HasTypeFuel @u0
@x1
Prims.nat))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.Const @x1)
StackMachine.exp))
:qid data_elim_StackMachine.Const))

:named data_elim_StackMachine.Const))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp)
(and (HasTypeFuel @u0
@x1
StackMachine.binop)
(HasTypeFuel @u0
@x2
StackMachine.exp)
(HasTypeFuel @u0
@x3
StackMachine.exp)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.Binop @x1
@x2
@x3)
StackMachine.exp))
:qid data_elim_StackMachine.Binop))

:named data_elim_StackMachine.Binop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! (= 165
(Term_constr_id StackMachine.exp))
:named constructor_distinct_StackMachine.exp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= 122
(Term_constr_id StackMachine.binop))
:named constructor_distinct_StackMachine.binop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= 130
(Term_constr_id StackMachine.Times))
:named constructor_distinct_StackMachine.Times))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! (= 128
(Term_constr_id StackMachine.Plus))
:named constructor_distinct_StackMachine.Plus))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(forall ((@x0 Term))
 (! (= 171
(Term_constr_id (StackMachine.Const @x0)))
 

:pattern ((StackMachine.Const @x0))
:qid constructor_distinct_StackMachine.Const))

:named constructor_distinct_StackMachine.Const))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 176
(Term_constr_id (StackMachine.Binop @x0
@x1
@x2)))
 

:pattern ((StackMachine.Binop @x0
@x1
@x2))
:qid constructor_distinct_StackMachine.Binop))

:named constructor_distinct_StackMachine.Binop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;Assumption: StackMachine.exp__uu___haseq
;;; Fact-ids: Name StackMachine.exp__uu___haseq; Namespace StackMachine
(assert (! (Valid (Prims.hasEq StackMachine.exp))
:named assumption_StackMachine.exp__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: StackMachine.binop__uu___haseq
;;; Fact-ids: Name StackMachine.binop__uu___haseq; Namespace StackMachine
(assert (! (Valid (Prims.hasEq StackMachine.binop))
:named assumption_StackMachine.binop__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.binop; Namespace StackMachine; Name StackMachine.Plus; Namespace StackMachine; Name StackMachine.Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,5-24,10); use=StackMachine.fst(24,5-24,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StackMachine.binop)
(= StackMachine.binop
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StackMachine.binop))
:qid StackMachine_pretyping_348f082711510f298b6584ad3416d399))

:named StackMachine_pretyping_348f082711510f298b6584ad3416d399))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.exp; Namespace StackMachine; Name StackMachine.Const; Namespace StackMachine; Name StackMachine.Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(26,5-26,8); use=StackMachine.fst(26,5-26,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StackMachine.exp)
(= StackMachine.exp
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StackMachine.exp))
:qid StackMachine_pretyping_2a319081b764dd27a6651686e4e88bbc))

:named StackMachine_pretyping_2a319081b764dd27a6651686e4e88bbc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: StackMachine.exp{Const? _}).
;   (*  - Could not prove post-condition
; *) ~(Const? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Const__item___0`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_733535f472f5bce64316080d16cf1692)

;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(not 
;; def=StackMachine.fst(27,2-27,7); use=StackMachine.fst(27,2-27,7)
(BoxBool_proj_0 (StackMachine.uu___is_Const @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__Const__item___0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_733535f472f5bce64316080d16cf1692

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Const__item___0


; <Skipped let __proj__Const__item___0/>


; encoding sigelt val StackMachine.uu___is_Binop


; <Start encoding val StackMachine.uu___is_Binop>

(declare-fun StackMachine.uu___is_Binop (Term) Term)

(declare-fun StackMachine.uu___is_Binop@tok () Term)

; </end encoding val StackMachine.uu___is_Binop>


; encoding sigelt let uu___is_Binop


; <Skipped let uu___is_Binop/>


; encoding sigelt val StackMachine.__proj__Binop__item___0


; <Start encoding val StackMachine.__proj__Binop__item___0>

(declare-fun Tm_refine_e48d81fdfb07e4d145eded198c44af89 () Term)
(declare-fun StackMachine.__proj__Binop__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: exp{Binop? _} -> binop
(declare-fun Tm_arrow_1508108c5e8884e89965fb7c5138de59 () Term)
(declare-fun StackMachine.__proj__Binop__item___0@tok () Term)

; </end encoding val StackMachine.__proj__Binop__item___0>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.exp)
(HasType (StackMachine.uu___is_Binop @x0)
Prims.bool))
 

:pattern ((StackMachine.uu___is_Binop @x0))
:qid typing_StackMachine.uu___is_Binop))

:named typing_StackMachine.uu___is_Binop))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__Binop__item___0; Namespace StackMachine
(assert (! (HasType Tm_refine_e48d81fdfb07e4d145eded198c44af89
Tm_type)
:named refinement_kinding_Tm_refine_e48d81fdfb07e4d145eded198c44af89))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__Binop__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e48d81fdfb07e4d145eded198c44af89)
(and (HasTypeFuel @u0
@x1
StackMachine.exp)

;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(BoxBool_proj_0 (StackMachine.uu___is_Binop @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e48d81fdfb07e4d145eded198c44af89))
:qid refinement_interpretation_Tm_refine_e48d81fdfb07e4d145eded198c44af89))

:named refinement_interpretation_Tm_refine_e48d81fdfb07e4d145eded198c44af89))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e48d81fdfb07e4d145eded198c44af89
;;; Fact-ids: Name StackMachine.__proj__Binop__item___0; Namespace StackMachine
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e48d81fdfb07e4d145eded198c44af89))
(Valid (Prims.hasEq StackMachine.exp)))
:named haseqTm_refine_e48d81fdfb07e4d145eded198c44af89))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_Binop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(forall ((@x0 Term))
 (! (= (StackMachine.uu___is_Binop @x0)
(BoxBool (is-StackMachine.Binop @x0)))
 

:pattern ((StackMachine.uu___is_Binop @x0))
:qid disc_equation_StackMachine.Binop))

:named disc_equation_StackMachine.Binop))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: StackMachine.exp{Binop? _}).
;   (*  - Could not prove post-condition
; *) ~(Binop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Binop__item___0`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_e48d81fdfb07e4d145eded198c44af89)

;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(not 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(BoxBool_proj_0 (StackMachine.uu___is_Binop @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__Binop__item___0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_e48d81fdfb07e4d145eded198c44af89

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Binop__item___0


; <Skipped let __proj__Binop__item___0/>


; encoding sigelt val StackMachine.__proj__Binop__item___1


; <Start encoding val StackMachine.__proj__Binop__item___1>


(declare-fun StackMachine.__proj__Binop__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: exp{Binop? _} -> exp
(declare-fun Tm_arrow_833ddb19dcc5ee78030ebd2bca3f4939 () Term)
(declare-fun StackMachine.__proj__Binop__item___1@tok () Term)

; </end encoding val StackMachine.__proj__Binop__item___1>

(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: StackMachine.exp{Binop? _}).
;   (*  - Could not prove post-condition
; *) ~(Binop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Binop__item___1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_e48d81fdfb07e4d145eded198c44af89)

;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(not 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(BoxBool_proj_0 (StackMachine.uu___is_Binop @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__Binop__item___1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_e48d81fdfb07e4d145eded198c44af89

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Binop__item___1


; <Skipped let __proj__Binop__item___1/>


; encoding sigelt val StackMachine.__proj__Binop__item___2


; <Start encoding val StackMachine.__proj__Binop__item___2>


(declare-fun StackMachine.__proj__Binop__item___2 (Term) Term)


(declare-fun StackMachine.__proj__Binop__item___2@tok () Term)

; </end encoding val StackMachine.__proj__Binop__item___2>

(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: StackMachine.exp{Binop? _}).
;   (*  - Could not prove post-condition
; *) ~(Binop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Binop__item___2`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_e48d81fdfb07e4d145eded198c44af89)

;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(not 
;; def=StackMachine.fst(28,2-28,7); use=StackMachine.fst(28,2-28,7)
(BoxBool_proj_0 (StackMachine.uu___is_Binop @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__Binop__item___2, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_e48d81fdfb07e4d145eded198c44af89

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Binop__item___2


; <Skipped let __proj__Binop__item___2/>

;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
(push) ;; push{2

; Starting query at StackMachine.fst(30,42-30,49)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (n1: Prims.nat) (n2: Prims.nat). (*  - Could not prove post-condition
; *) n1 + n2 >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `let add_nat`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=Prims.fst(680,18-680,24); use=StackMachine.fst(30,42-30,49)
(or label_1

;; def=Prims.fst(680,18-680,24); use=StackMachine.fst(30,42-30,49)
(>= (BoxInt_proj_0 (Prims.op_Addition @x0
@x1))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.add_nat, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let add_nat


; <Start encoding let add_nat>

(declare-fun StackMachine.add_nat (Term Term) Term)
;;;;;;;;;;;;;;;;n1: Prims.nat -> n2: Prims.nat -> Prims.nat
(declare-fun Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba () Term)
(declare-fun StackMachine.add_nat@tok () Term)

; </end encoding let add_nat>

;;; Fact-ids: Name Prims.op_Multiply; Namespace Prims
(assert (! 
;; def=Prims.fst(540,4-540,15); use=Prims.fst(540,4-540,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Multiply @x0
@x1)
(BoxInt (* (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Multiply @x0
@x1))
:qid primitive_Prims.op_Multiply))

:named primitive_Prims.op_Multiply))
(push) ;; push{2

; Starting query at StackMachine.fst(31,42-31,61)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (n1: Prims.nat) (n2: Prims.nat). (*  - Could not prove post-condition
; *) n1 * n2 >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `let mul_nat`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=Prims.fst(680,18-680,24); use=StackMachine.fst(31,42-31,61)
(or label_1

;; def=Prims.fst(680,18-680,24); use=StackMachine.fst(31,42-31,61)
(>= (BoxInt_proj_0 (Prims.op_Multiply @x0
@x1))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.mul_nat, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, primitive_Prims.op_Multiply, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let mul_nat


; <Start encoding let mul_nat>

(declare-fun StackMachine.mul_nat (Term Term) Term)

(declare-fun StackMachine.mul_nat@tok () Term)

; </end encoding let mul_nat>

(push) ;; push{2

; Starting query at StackMachine.fst(32,42-32,49)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (n1: Prims.nat) (n2: Prims.nat).
;   (*  - Could not prove post-condition
; *) Prims.hasEq Prims.nat


; Context: While encoding a query
; While typechecking the top-level declaration `let eq_nat`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))

;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(32,42-32,44)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(32,42-32,44)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(32,42-32,44)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.eq_nat, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let eq_nat


; <Start encoding let eq_nat>

(declare-fun StackMachine.eq_nat (Term Term) Term)
;;;;;;;;;;;;;;;;n1: Prims.nat -> n2: Prims.nat -> Prims.bool
(declare-fun Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0 () Term)
(declare-fun StackMachine.eq_nat@tok () Term)

; </end encoding let eq_nat>


; encoding sigelt let eq_bool


; <Start encoding let eq_bool>

(declare-fun StackMachine.eq_bool (Term Term) Term)
;;;;;;;;;;;;;;;;b1: Prims.bool -> b2: Prims.bool -> Prims.bool
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun StackMachine.eq_bool@tok () Term)

; </end encoding let eq_bool>


; encoding sigelt let lt_nat


; <Start encoding let lt_nat>

(declare-fun StackMachine.lt_nat (Term Term) Term)

(declare-fun StackMachine.lt_nat@tok () Term)

; </end encoding let lt_nat>

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,30-24,35); use=StackMachine.fst(24,30-24,35)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.binop)
(HasType (StackMachine.uu___is_Times @x0)
Prims.bool))
 

:pattern ((StackMachine.uu___is_Times @x0))
:qid typing_StackMachine.uu___is_Times))

:named typing_StackMachine.uu___is_Times))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_Plus; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,23-24,27); use=StackMachine.fst(24,23-24,27)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.binop)
(HasType (StackMachine.uu___is_Plus @x0)
Prims.bool))
 

:pattern ((StackMachine.uu___is_Plus @x0))
:qid typing_StackMachine.uu___is_Plus))

:named typing_StackMachine.uu___is_Plus))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba
;;; Fact-ids: Name StackMachine.add_nat; Namespace StackMachine
(assert (! (HasType Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba
Tm_type)
:named kinding_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_Times; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,30-24,35); use=StackMachine.fst(24,30-24,35)
(forall ((@x0 Term))
 (! (= (StackMachine.uu___is_Times @x0)
(BoxBool (is-StackMachine.Times @x0)))
 

:pattern ((StackMachine.uu___is_Times @x0))
:qid disc_equation_StackMachine.Times))

:named disc_equation_StackMachine.Times))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_Plus; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(24,23-24,27); use=StackMachine.fst(24,23-24,27)
(forall ((@x0 Term))
 (! (= (StackMachine.uu___is_Plus @x0)
(BoxBool (is-StackMachine.Plus @x0)))
 

:pattern ((StackMachine.uu___is_Plus @x0))
:qid disc_equation_StackMachine.Plus))

:named disc_equation_StackMachine.Plus))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StackMachine.add_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(30,16-30,39); use=StackMachine.fst(30,16-30,39)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))
:qid StackMachine_pre_typing_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))

:named StackMachine_pre_typing_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba
;;; Fact-ids: Name StackMachine.add_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(30,16-30,39); use=StackMachine.fst(30,16-30,39)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba)
(and 
;; def=StackMachine.fst(30,16-30,39); use=StackMachine.fst(30,16-30,39)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Prims.nat))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.nat))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba.1))

(IsTotFun @x0)

;; def=StackMachine.fst(30,16-30,39); use=StackMachine.fst(30,16-30,39)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))
:qid StackMachine_interpretation_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))

:named StackMachine_interpretation_Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
(push) ;; push{2

; Starting query at StackMachine.fst(37,2-39,22)

(declare-fun label_1 () Bool)



; Encoding query formula : forall (b: StackMachine.binop).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post (_: Prims.nat -> _: Prims.nat -> Prims.nat)).
;     (forall (x: (_: Prims.nat -> _: Prims.nat -> Prims.nat)). {:pattern Prims.guard_free (k x)}
;         Prims.auto_squash (k x)) ==>
;     ~(Plus? b) /\ ~(Times? b) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let binopDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.binop)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(37,2-39,22)
(forall ((@x2 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(37,2-39,22)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(37,2-39,22)
(ApplyTT @x1
@x2)
)

 

:pattern ((ApplyTT @x1
@x2))
:qid @query.2))


;; def=StackMachine.fst(36,17-36,18); use=StackMachine.fst(37,8-37,9)
(not 
;; def=StackMachine.fst(36,17-36,18); use=StackMachine.fst(37,8-37,9)
(BoxBool_proj_0 (StackMachine.uu___is_Plus @x0))
)


;; def=StackMachine.fst(36,17-36,18); use=StackMachine.fst(37,8-37,9)
(not 
;; def=StackMachine.fst(36,17-36,18); use=StackMachine.fst(37,8-37,9)
(BoxBool_proj_0 (StackMachine.uu___is_Times @x0))
)
)
label_1)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.binopDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_StackMachine.Plus, disc_equation_StackMachine.Times, fuel_guarded_inversion_StackMachine.binop, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let binopDenote


; <Start encoding let binopDenote>

(declare-fun StackMachine.binopDenote (Term) Term)

;;;;;;;;;;;;;;;;b: binop -> _: Prims.nat -> _: Prims.nat -> Prims.nat
(declare-fun Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34 () Term)
(declare-fun StackMachine.binopDenote@tok () Term)


; </end encoding let binopDenote>

(push) ;; push{2

; Starting query at StackMachine.fst(42,2-44,68)

;;;;;;;;;;;;;;;;e : StackMachine.exp (StackMachine.exp)
(declare-fun x_2a319081b764dd27a6651686e4e88bbc_0 () Term)
;;;;;;;;;;;;;;;;binder_x_2a319081b764dd27a6651686e4e88bbc_0
;;; Fact-ids: 
(assert (! (HasType x_2a319081b764dd27a6651686e4e88bbc_0
StackMachine.exp)
:named binder_x_2a319081b764dd27a6651686e4e88bbc_0))
(declare-fun Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8
Tm_type)
:named refinement_kinding_Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(41,19-44,68); use=StackMachine.fst(41,19-44,68)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8)
(and (HasTypeFuel @u0
@x1
StackMachine.exp)

;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(42,2-44,68)

;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(42,2-44,68)
(Valid 
;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(42,2-44,68)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x1
x_2a319081b764dd27a6651686e4e88bbc_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8))
:qid refinement_interpretation_Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8))

:named refinement_interpretation_Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8))
(Valid (Prims.hasEq StackMachine.exp)))
:named haseqTm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8))
(declare-fun StackMachine.expDenote (Term) Term)

;;;;;;;;;;;;;;;;e: exp{e << e} -> Prims.nat
(declare-fun Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62
Tm_type)
:named kinding_Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(41,19-44,68); use=StackMachine.fst(41,19-44,68)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62))
:qid StackMachine_pre_typing_Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62))

:named StackMachine_pre_typing_Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(41,19-44,68); use=StackMachine.fst(41,19-44,68)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62)
(and 
;; def=StackMachine.fst(41,19-44,68); use=StackMachine.fst(41,19-44,68)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8)
(HasType (ApplyTT @x0
@x1)
Prims.nat))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62))
:qid StackMachine_interpretation_Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62))

:named StackMachine_interpretation_Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62))
(declare-fun StackMachine.expDenote@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@x0 Term))
 (! (= (ApplyTT StackMachine.expDenote@tok
@x0)
(StackMachine.expDenote @x0))
 

:pattern ((ApplyTT StackMachine.expDenote@tok
@x0))
:qid token_correspondence_StackMachine.expDenote))

:named token_correspondence_StackMachine.expDenote))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.expDenote@tok
Tm_arrow_8befc71b6f7fdfab8e526b08dd489a62))

;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@x1 Term))
 (! (= (ApplyTT StackMachine.expDenote@tok
@x1)
(StackMachine.expDenote @x1))
 

:pattern ((StackMachine.expDenote @x1))
:qid function_token_typing_StackMachine.expDenote.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.expDenote@tok))
:qid function_token_typing_StackMachine.expDenote))

:named function_token_typing_StackMachine.expDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_6ff7ec05c3a1f9caf8aea3cfb64dd3b8)
(HasType (StackMachine.expDenote @x0)
Prims.nat))
 

:pattern ((StackMachine.expDenote @x0))
:qid typing_StackMachine.expDenote))

:named typing_StackMachine.expDenote))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.nat).
;   (forall (x: Prims.nat). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Const? e) /\ ~(Binop? e) ==> Prims.l_False) /\
;   (~(Const? e) ==>
;     (forall (b: StackMachine.binop) (b: StackMachine.exp) (b: StackMachine.exp).
;         e == StackMachine.Binop b b b ==>
;         b << e /\
;         (forall (any_result: StackMachine.exp).
;             b == any_result ==>
;             (forall (any_result: Prims.nat). StackMachine.expDenote b == any_result ==> b << e))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec expDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.nat))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(42,2-44,68)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(42,2-44,68)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(42,2-44,68)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(42,2-44,68)
(and (implies 
;; def=StackMachine.fst(41,19-41,20); use=StackMachine.fst(42,8-42,9)
(and 
;; def=StackMachine.fst(41,19-41,20); use=StackMachine.fst(42,8-42,9)
(not 
;; def=StackMachine.fst(41,19-41,20); use=StackMachine.fst(42,8-42,9)
(BoxBool_proj_0 (StackMachine.uu___is_Const x_2a319081b764dd27a6651686e4e88bbc_0))
)


;; def=StackMachine.fst(41,19-41,20); use=StackMachine.fst(42,8-42,9)
(not 
;; def=StackMachine.fst(41,19-41,20); use=StackMachine.fst(42,8-42,9)
(BoxBool_proj_0 (StackMachine.uu___is_Binop x_2a319081b764dd27a6651686e4e88bbc_0))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(42,2-44,68)
(not 
;; def=StackMachine.fst(41,19-41,20); use=StackMachine.fst(42,8-42,9)
(BoxBool_proj_0 (StackMachine.uu___is_Const x_2a319081b764dd27a6651686e4e88bbc_0))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(42,2-44,68)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.binop)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(42,2-44,68)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.exp)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(42,2-44,68)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
StackMachine.exp)

;; def=StackMachine.fst(41,19-44,19); use=StackMachine.fst(42,8-44,19)
(= x_2a319081b764dd27a6651686e4e88bbc_0
(StackMachine.Binop @x1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(42,2-44,68)
(and 
;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(44,50-44,52)
(or label_2

;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(44,50-44,52)
(Valid 
;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(44,50-44,52)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x2
x_2a319081b764dd27a6651686e4e88bbc_0)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(42,2-44,68)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
StackMachine.exp)

;; def=StackMachine.fst(41,19-44,16); use=StackMachine.fst(42,2-44,68)
(= @x2
@x4)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(42,2-44,68)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.nat)

;; def=dummy(0,0-0,0); use=StackMachine.fst(42,2-44,68)
(= (StackMachine.expDenote @x2)
@x5)
)

;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(44,65-44,67)
(or label_3

;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(44,65-44,67)
(Valid 
;; def=StackMachine.fst(42,2-44,68); use=StackMachine.fst(44,65-44,67)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x3
x_2a319081b764dd27a6651686e4e88bbc_0)
)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.expDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StackMachine_pretyping_2a319081b764dd27a6651686e4e88bbc, binder_x_2a319081b764dd27a6651686e4e88bbc_0, disc_equation_StackMachine.Binop, disc_equation_StackMachine.Const, fuel_guarded_inversion_StackMachine.exp, projection_inverse_BoxBool_proj_0, projection_inverse_StackMachine.Binop__1, projection_inverse_StackMachine.Binop__2, subterm_ordering_StackMachine.Binop

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec expDenote


; <Start encoding let rec expDenote>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.expDenote.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.expDenote.fuel_instrumented_token () Term)
(declare-fun StackMachine.expDenote (Term) Term)
(declare-fun StackMachine.expDenote@tok () Term)
;;;;;;;;;;;;;;;;e: exp -> Prims.nat
(declare-fun Tm_arrow_65acd3f4646795c553f7e9a2306a6485 () Term)

; </end encoding let rec expDenote>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type StackMachine.instr


; <Start encoding type StackMachine.instr>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.instr () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.IConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.IConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.IConst
(declare-fun StackMachine.IConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.IBinop (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.IBinop__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.IBinop
(declare-fun StackMachine.IBinop@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> instr
(declare-fun Tm_arrow_f4e6ea3d247d7fd6fd1ce240a1c775e6 () Term)
;;;;;;;;;;;;;;;;_0: binop -> instr
(declare-fun Tm_arrow_dcb37b0924afae23f7cc359a29f20b4c () Term)

; <start constructor StackMachine.instr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.instr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
246)
(= __@x0
StackMachine.instr)))

; </end constructor StackMachine.instr>


; <start constructor StackMachine.IConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.IConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
252)
(= __@x0
(StackMachine.IConst (StackMachine.IConst__0 __@x0)))))

; </end constructor StackMachine.IConst>


; <start constructor StackMachine.IBinop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.IBinop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
257)
(= __@x0
(StackMachine.IBinop (StackMachine.IBinop__0 __@x0)))))

; </end constructor StackMachine.IBinop>


; </end encoding type StackMachine.instr>

;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.IConst @x1)
StackMachine.instr)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.IConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.IConst @x1)
StackMachine.instr))
:qid subterm_ordering_StackMachine.IConst))

:named subterm_ordering_StackMachine.IConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.IBinop @x1)
StackMachine.instr)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.IBinop @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.IBinop @x1)
StackMachine.instr))
:qid subterm_ordering_StackMachine.IBinop))

:named subterm_ordering_StackMachine.IBinop))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@x0 Term))
 (! (= (StackMachine.IConst__0 (StackMachine.IConst @x0))
@x0)
 

:pattern ((StackMachine.IConst @x0))
:qid projection_inverse_StackMachine.IConst__0))

:named projection_inverse_StackMachine.IConst__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@x0 Term))
 (! (= (StackMachine.IBinop__0 (StackMachine.IBinop @x0))
@x0)
 

:pattern ((StackMachine.IBinop @x0))
:qid projection_inverse_StackMachine.IBinop__0))

:named projection_inverse_StackMachine.IBinop__0))
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! (HasType StackMachine.instr
Tm_type)
:named kinding_StackMachine.instr@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(46,5-46,10); use=StackMachine.fst(46,5-46,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StackMachine.instr)
(or (is-StackMachine.IConst @x1)
(is-StackMachine.IBinop @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StackMachine.instr))
:qid fuel_guarded_inversion_StackMachine.instr))

:named fuel_guarded_inversion_StackMachine.instr))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
(StackMachine.IConst @x1)
StackMachine.instr))
 

:pattern ((HasTypeFuel @u0
(StackMachine.IConst @x1)
StackMachine.instr))
:qid data_typing_intro_StackMachine.IConst@tok))

:named data_typing_intro_StackMachine.IConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
StackMachine.binop)
(HasTypeFuel @u0
(StackMachine.IBinop @x1)
StackMachine.instr))
 

:pattern ((HasTypeFuel @u0
(StackMachine.IBinop @x1)
StackMachine.instr))
:qid data_typing_intro_StackMachine.IBinop@tok))

:named data_typing_intro_StackMachine.IBinop@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.IConst @x1)
StackMachine.instr)
(HasTypeFuel @u0
@x1
Prims.nat))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.IConst @x1)
StackMachine.instr))
:qid data_elim_StackMachine.IConst))

:named data_elim_StackMachine.IConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.IBinop @x1)
StackMachine.instr)
(HasTypeFuel @u0
@x1
StackMachine.binop))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.IBinop @x1)
StackMachine.instr))
:qid data_elim_StackMachine.IBinop))

:named data_elim_StackMachine.IBinop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! (= 246
(Term_constr_id StackMachine.instr))
:named constructor_distinct_StackMachine.instr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@x0 Term))
 (! (= 252
(Term_constr_id (StackMachine.IConst @x0)))
 

:pattern ((StackMachine.IConst @x0))
:qid constructor_distinct_StackMachine.IConst))

:named constructor_distinct_StackMachine.IConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@x0 Term))
 (! (= 257
(Term_constr_id (StackMachine.IBinop @x0)))
 

:pattern ((StackMachine.IBinop @x0))
:qid constructor_distinct_StackMachine.IBinop))

:named constructor_distinct_StackMachine.IBinop))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(46,5-46,10); use=StackMachine.fst(46,5-46,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StackMachine.instr)
(= StackMachine.instr
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StackMachine.instr))
:qid StackMachine_pretyping_eb8c09fa82264f866cff5ab806796db1))

:named StackMachine_pretyping_eb8c09fa82264f866cff5ab806796db1))
(push) ;; push{4

; Starting query at StackMachine.fst(46,0-48,25)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : Prims.hasEq StackMachine.instr ==>
; (forall (_0: Prims.nat).
;     (*  - Failed to prove that the type
;     'StackMachine.instr'
;     supports decidable equality because of this argument.
;   - Add either the 'noeq' or 'unopteq' qualifier
; *)
;     Prims.hasEq Prims.nat) /\
; (forall (_0: StackMachine.binop).
;     (*  - Failed to prove that the type
;     'StackMachine.instr'
;     supports decidable equality because of this argument.
;   - Add either the 'noeq' or 'unopteq' qualifier
; *)
;     Prims.hasEq StackMachine.binop)


; Context: While encoding a query
; While typechecking the top-level declaration `type StackMachine.instr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (implies 
;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(Valid 
;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(Prims.hasEq StackMachine.instr)
)


;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(and 
;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)

;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(47,11-47,14)
(or label_1

;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(Valid 
;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query))


;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.binop)

;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(48,11-48,16)
(or label_2

;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(Valid 
;; def=StackMachine.fst(46,0-48,25); use=StackMachine.fst(46,0-48,25)
(Prims.hasEq StackMachine.binop)
)
)
)
 
;;no pats
:qid @query.1))
)
))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.instr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_StackMachine.binop__uu___haseq, equation_Prims.eqtype, equation_Prims.nat, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type StackMachine.instr


; <Start encoding type StackMachine.instr>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.instr () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.IConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.IConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.IConst
(declare-fun StackMachine.IConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.IBinop (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.IBinop__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.IBinop
(declare-fun StackMachine.IBinop@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> instr
(declare-fun Tm_arrow_f4e6ea3d247d7fd6fd1ce240a1c775e6 () Term)
;;;;;;;;;;;;;;;;_0: binop -> instr
(declare-fun Tm_arrow_dcb37b0924afae23f7cc359a29f20b4c () Term)

; <start constructor StackMachine.instr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.instr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(= __@x0
StackMachine.instr)))

; </end constructor StackMachine.instr>


; <start constructor StackMachine.IConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.IConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(StackMachine.IConst (StackMachine.IConst__0 __@x0)))))

; </end constructor StackMachine.IConst>


; <start constructor StackMachine.IBinop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.IBinop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
272)
(= __@x0
(StackMachine.IBinop (StackMachine.IBinop__0 __@x0)))))

; </end constructor StackMachine.IBinop>


; </end encoding type StackMachine.instr>


; encoding sigelt assume StackMachine.instr__uu___haseq


; <Start encoding assume StackMachine.instr__uu___haseq>


; </end encoding assume StackMachine.instr__uu___haseq>


; encoding sigelt val StackMachine.uu___is_IConst


; <Start encoding val StackMachine.uu___is_IConst>

(declare-fun StackMachine.uu___is_IConst (Term) Term)
;;;;;;;;;;;;;;;;projectee: instr -> Prims.bool
(declare-fun Tm_arrow_71aa2528df30609b9c789ea89ef048aa () Term)
(declare-fun StackMachine.uu___is_IConst@tok () Term)

; </end encoding val StackMachine.uu___is_IConst>


; encoding sigelt let uu___is_IConst


; <Skipped let uu___is_IConst/>


; encoding sigelt val StackMachine.__proj__IConst__item___0


; <Start encoding val StackMachine.__proj__IConst__item___0>

(declare-fun Tm_refine_a31651c68d304738b29495c5aeb6aa44 () Term)
(declare-fun StackMachine.__proj__IConst__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: instr{IConst? _} -> Prims.nat
(declare-fun Tm_arrow_e7fbd0a8d135688e13ae33d1718f3d67 () Term)
(declare-fun StackMachine.__proj__IConst__item___0@tok () Term)

; </end encoding val StackMachine.__proj__IConst__item___0>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_IConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.instr)
(HasType (StackMachine.uu___is_IConst @x0)
Prims.bool))
 

:pattern ((StackMachine.uu___is_IConst @x0))
:qid typing_StackMachine.uu___is_IConst))

:named typing_StackMachine.uu___is_IConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.IConst @x1)
StackMachine.instr)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.IConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.IConst @x1)
StackMachine.instr))
:qid subterm_ordering_StackMachine.IConst))

:named subterm_ordering_StackMachine.IConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.IBinop @x1)
StackMachine.instr)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.IBinop @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.IBinop @x1)
StackMachine.instr))
:qid subterm_ordering_StackMachine.IBinop))

:named subterm_ordering_StackMachine.IBinop))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__IConst__item___0; Namespace StackMachine
(assert (! (HasType Tm_refine_a31651c68d304738b29495c5aeb6aa44
Tm_type)
:named refinement_kinding_Tm_refine_a31651c68d304738b29495c5aeb6aa44))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__IConst__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a31651c68d304738b29495c5aeb6aa44)
(and (HasTypeFuel @u0
@x1
StackMachine.instr)

;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(BoxBool_proj_0 (StackMachine.uu___is_IConst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a31651c68d304738b29495c5aeb6aa44))
:qid refinement_interpretation_Tm_refine_a31651c68d304738b29495c5aeb6aa44))

:named refinement_interpretation_Tm_refine_a31651c68d304738b29495c5aeb6aa44))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@x0 Term))
 (! (= (StackMachine.IConst__0 (StackMachine.IConst @x0))
@x0)
 

:pattern ((StackMachine.IConst @x0))
:qid projection_inverse_StackMachine.IConst__0))

:named projection_inverse_StackMachine.IConst__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@x0 Term))
 (! (= (StackMachine.IBinop__0 (StackMachine.IBinop @x0))
@x0)
 

:pattern ((StackMachine.IBinop @x0))
:qid projection_inverse_StackMachine.IBinop__0))

:named projection_inverse_StackMachine.IBinop__0))
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! (HasType StackMachine.instr
Tm_type)
:named kinding_StackMachine.instr@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a31651c68d304738b29495c5aeb6aa44
;;; Fact-ids: Name StackMachine.__proj__IConst__item___0; Namespace StackMachine
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a31651c68d304738b29495c5aeb6aa44))
(Valid (Prims.hasEq StackMachine.instr)))
:named haseqTm_refine_a31651c68d304738b29495c5aeb6aa44))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(46,5-46,10); use=StackMachine.fst(46,5-46,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StackMachine.instr)
(or (is-StackMachine.IConst @x1)
(is-StackMachine.IBinop @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StackMachine.instr))
:qid fuel_guarded_inversion_StackMachine.instr))

:named fuel_guarded_inversion_StackMachine.instr))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_IConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@x0 Term))
 (! (= (StackMachine.uu___is_IConst @x0)
(BoxBool (is-StackMachine.IConst @x0)))
 

:pattern ((StackMachine.uu___is_IConst @x0))
:qid disc_equation_StackMachine.IConst))

:named disc_equation_StackMachine.IConst))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.nat)
(HasTypeFuel @u0
(StackMachine.IConst @x1)
StackMachine.instr))
 

:pattern ((HasTypeFuel @u0
(StackMachine.IConst @x1)
StackMachine.instr))
:qid data_typing_intro_StackMachine.IConst@tok))

:named data_typing_intro_StackMachine.IConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
StackMachine.binop)
(HasTypeFuel @u0
(StackMachine.IBinop @x1)
StackMachine.instr))
 

:pattern ((HasTypeFuel @u0
(StackMachine.IBinop @x1)
StackMachine.instr))
:qid data_typing_intro_StackMachine.IBinop@tok))

:named data_typing_intro_StackMachine.IBinop@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.IConst @x1)
StackMachine.instr)
(HasTypeFuel @u0
@x1
Prims.nat))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.IConst @x1)
StackMachine.instr))
:qid data_elim_StackMachine.IConst))

:named data_elim_StackMachine.IConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.IBinop @x1)
StackMachine.instr)
(HasTypeFuel @u0
@x1
StackMachine.binop))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.IBinop @x1)
StackMachine.instr))
:qid data_elim_StackMachine.IBinop))

:named data_elim_StackMachine.IBinop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! (= 261
(Term_constr_id StackMachine.instr))
:named constructor_distinct_StackMachine.instr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(forall ((@x0 Term))
 (! (= 267
(Term_constr_id (StackMachine.IConst @x0)))
 

:pattern ((StackMachine.IConst @x0))
:qid constructor_distinct_StackMachine.IConst))

:named constructor_distinct_StackMachine.IConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@x0 Term))
 (! (= 272
(Term_constr_id (StackMachine.IBinop @x0)))
 

:pattern ((StackMachine.IBinop @x0))
:qid constructor_distinct_StackMachine.IBinop))

:named constructor_distinct_StackMachine.IBinop))
;;;;;;;;;;;;;;;;Assumption: StackMachine.instr__uu___haseq
;;; Fact-ids: Name StackMachine.instr__uu___haseq; Namespace StackMachine
(assert (! (Valid (Prims.hasEq StackMachine.instr))
:named assumption_StackMachine.instr__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.instr; Namespace StackMachine; Name StackMachine.IConst; Namespace StackMachine; Name StackMachine.IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(46,5-46,10); use=StackMachine.fst(46,5-46,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StackMachine.instr)
(= StackMachine.instr
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StackMachine.instr))
:qid StackMachine_pretyping_eb8c09fa82264f866cff5ab806796db1))

:named StackMachine_pretyping_eb8c09fa82264f866cff5ab806796db1))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: StackMachine.instr{IConst? _}).
;   (*  - Could not prove post-condition
; *) ~(IConst? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__IConst__item___0`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_a31651c68d304738b29495c5aeb6aa44)

;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(not 
;; def=StackMachine.fst(47,2-47,8); use=StackMachine.fst(47,2-47,8)
(BoxBool_proj_0 (StackMachine.uu___is_IConst @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__IConst__item___0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_a31651c68d304738b29495c5aeb6aa44

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__IConst__item___0


; <Skipped let __proj__IConst__item___0/>


; encoding sigelt val StackMachine.uu___is_IBinop


; <Start encoding val StackMachine.uu___is_IBinop>

(declare-fun StackMachine.uu___is_IBinop (Term) Term)

(declare-fun StackMachine.uu___is_IBinop@tok () Term)

; </end encoding val StackMachine.uu___is_IBinop>


; encoding sigelt let uu___is_IBinop


; <Skipped let uu___is_IBinop/>


; encoding sigelt val StackMachine.__proj__IBinop__item___0


; <Start encoding val StackMachine.__proj__IBinop__item___0>

(declare-fun Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34 () Term)
(declare-fun StackMachine.__proj__IBinop__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: instr{IBinop? _} -> binop
(declare-fun Tm_arrow_48dbe7270c083785218d6b8d2c4fca9f () Term)
(declare-fun StackMachine.__proj__IBinop__item___0@tok () Term)

; </end encoding val StackMachine.__proj__IBinop__item___0>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.instr)
(HasType (StackMachine.uu___is_IBinop @x0)
Prims.bool))
 

:pattern ((StackMachine.uu___is_IBinop @x0))
:qid typing_StackMachine.uu___is_IBinop))

:named typing_StackMachine.uu___is_IBinop))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__IBinop__item___0; Namespace StackMachine
(assert (! (HasType Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34
Tm_type)
:named refinement_kinding_Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__IBinop__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34)
(and (HasTypeFuel @u0
@x1
StackMachine.instr)

;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(BoxBool_proj_0 (StackMachine.uu___is_IBinop @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34))
:qid refinement_interpretation_Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34))

:named refinement_interpretation_Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34))
;;;;;;;;;;;;;;;;haseq for Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34
;;; Fact-ids: Name StackMachine.__proj__IBinop__item___0; Namespace StackMachine
(assert (! (iff (Valid (Prims.hasEq Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34))
(Valid (Prims.hasEq StackMachine.instr)))
:named haseqTm_refine_94dbe5757f232f1d6a06d4d6dfaafd34))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_IBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(forall ((@x0 Term))
 (! (= (StackMachine.uu___is_IBinop @x0)
(BoxBool (is-StackMachine.IBinop @x0)))
 

:pattern ((StackMachine.uu___is_IBinop @x0))
:qid disc_equation_StackMachine.IBinop))

:named disc_equation_StackMachine.IBinop))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: StackMachine.instr{IBinop? _}).
;   (*  - Could not prove post-condition
; *) ~(IBinop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__IBinop__item___0`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34)

;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(not 
;; def=StackMachine.fst(48,2-48,8); use=StackMachine.fst(48,2-48,8)
(BoxBool_proj_0 (StackMachine.uu___is_IBinop @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__IBinop__item___0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_94dbe5757f232f1d6a06d4d6dfaafd34

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__IBinop__item___0


; <Skipped let __proj__IBinop__item___0/>


; encoding sigelt let prog


; <Start encoding let prog>

(declare-fun StackMachine.prog () Term)

; </end encoding let prog>


; encoding sigelt let stack


; <Start encoding let stack>

(declare-fun StackMachine.stack () Term)

; </end encoding let stack>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.stack; Namespace StackMachine
(assert (! (HasType StackMachine.stack
Tm_type)
:named typing_StackMachine.stack))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= (ApplyTT Prims.list@tok
@x0)
(Prims.list @x0))
 

:pattern ((ApplyTT Prims.list@tok
@x0))

:pattern ((Prims.list @x0))
:qid token_correspondence_Prims.list@tok))

:named token_correspondence_Prims.list@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Prims.Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid subterm_ordering_Prims.Cons))

:named subterm_ordering_Prims.Cons))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= (Prims.Nil_a (Prims.Nil @x0))
@x0)
 

:pattern ((Prims.Nil @x0))
:qid projection_inverse_Prims.Nil_a))

:named projection_inverse_Prims.Nil_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_tl (Prims.Cons @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_tl))

:named projection_inverse_Prims.Cons_tl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_hd (Prims.Cons @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_hd))

:named projection_inverse_Prims.Cons_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_a (Prims.Cons @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_a))

:named projection_inverse_Prims.Cons_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.list@tok))
:named pre_kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (and (IsTotFun Prims.list@tok)

;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.list @x0)
Tm_type))
 

:pattern ((Prims.list @x0))
:qid kinding_Prims.list@tok))
)
:named kinding_Prims.list@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.stack; Namespace StackMachine
(assert (! (HasType StackMachine.stack
Tm_type)
:named function_token_typing_StackMachine.stack))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2))
(or (and (is-Prims.Nil @x1)
(= @x2
(Prims.Nil_a @x1)))
(and (is-Prims.Cons @x1)
(= @x2
(Prims.Cons_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2)))
:qid fuel_guarded_inversion_Prims.list))

:named fuel_guarded_inversion_Prims.list))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 319
(Term_constr_id Prims.list@tok))
:named fresh_token_Prims.list@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Equation for StackMachine.stack
;;; Fact-ids: Name StackMachine.stack; Namespace StackMachine
(assert (! (= StackMachine.stack
(Prims.list Prims.nat))
:named equation_StackMachine.stack))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Nil@tok))

:named data_typing_intro_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1)))
(HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Cons@tok))

:named data_typing_intro_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2)))
:qid data_elim_Prims.Nil))

:named data_elim_Prims.Nil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
(Prims.list @x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid data_elim_Prims.Cons))

:named data_elim_Prims.Cons))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= 318
(Term_constr_id (Prims.list @x0)))
 

:pattern ((Prims.list @x0))
:qid constructor_distinct_Prims.list))

:named constructor_distinct_Prims.list))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= 325
(Term_constr_id (Prims.Nil @x0)))
 

:pattern ((Prims.Nil @x0))
:qid constructor_distinct_Prims.Nil))

:named constructor_distinct_Prims.Nil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 330
(Term_constr_id (Prims.Cons @x0
@x1
@x2)))
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid constructor_distinct_Prims.Cons))

:named constructor_distinct_Prims.Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Assumption: Prims.list__uu___haseq
;;; Fact-ids: Name Prims.list__uu___haseq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Prims.hasEq (Prims.list @x0)))
:qid assumption_Prims.list__uu___haseq))
:named assumption_Prims.list__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.list @x2))
(= (Prims.list @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.list @x2)))
:qid Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))

:named Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
(push) ;; push{2

; Starting query at StackMachine.fst(54,2-59,19)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (i: StackMachine.instr) (s: StackMachine.stack).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post (FStar.Pervasives.Native.option StackMachine.stack)).
;     (forall (x: FStar.Pervasives.Native.option StackMachine.stack).
;         {:pattern Prims.guard_free (k x)}
;         Prims.auto_squash (k x)) ==>
;     ~(IConst? i) /\ ~(IBinop? i) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let instrDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.instr)
(HasType @x1
StackMachine.stack))
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post (FStar.Pervasives.Native.option StackMachine.stack)))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(54,2-59,19)
(forall ((@x3 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(54,2-59,19)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(54,2-59,19)
(ApplyTT @x2
@x3)
)

 

:pattern ((ApplyTT @x2
@x3))
:qid @query.2))


;; def=StackMachine.fst(53,17-53,18); use=StackMachine.fst(54,8-54,9)
(not 
;; def=StackMachine.fst(53,17-53,18); use=StackMachine.fst(54,8-54,9)
(BoxBool_proj_0 (StackMachine.uu___is_IConst @x0))
)


;; def=StackMachine.fst(53,17-53,18); use=StackMachine.fst(54,8-54,9)
(not 
;; def=StackMachine.fst(53,17-53,18); use=StackMachine.fst(54,8-54,9)
(BoxBool_proj_0 (StackMachine.uu___is_IBinop @x0))
)
)
label_1)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.instrDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_StackMachine.IBinop, disc_equation_StackMachine.IConst, fuel_guarded_inversion_StackMachine.instr, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let instrDenote


; <Start encoding let instrDenote>

(declare-fun StackMachine.instrDenote (Term Term) Term)
;;;;;;;;;;;;;;;;i: instr -> s: stack -> FStar.Pervasives.Native.option stack
(declare-fun Tm_arrow_e70eb8bd60a38f0c5060e79ba44cb75c () Term)
(declare-fun StackMachine.instrDenote@tok () Term)


; </end encoding let instrDenote>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.prog; Namespace StackMachine
(assert (! (HasType StackMachine.prog
Tm_type)
:named typing_StackMachine.prog))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.mul_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(31,4-31,11); use=StackMachine.fst(31,4-31,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))
(HasType (StackMachine.mul_nat @x0
@x1)
Prims.nat))
 

:pattern ((StackMachine.mul_nat @x0
@x1))
:qid typing_StackMachine.mul_nat))

:named typing_StackMachine.mul_nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.instrDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(53,4-53,15); use=StackMachine.fst(53,4-53,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.instr)
(HasType @x1
StackMachine.stack))
(HasType (StackMachine.instrDenote @x0
@x1)
(FStar.Pervasives.Native.option StackMachine.stack)))
 

:pattern ((StackMachine.instrDenote @x0
@x1))
:qid typing_StackMachine.instrDenote))

:named typing_StackMachine.instrDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(36,4-36,15); use=StackMachine.fst(36,4-36,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.binop)
(HasType (StackMachine.binopDenote @x0)
Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))
 

:pattern ((StackMachine.binopDenote @x0))
:qid typing_StackMachine.binopDenote))

:named typing_StackMachine.binopDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.add_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(30,4-30,11); use=StackMachine.fst(30,4-30,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))
(HasType (StackMachine.add_nat @x0
@x1)
Prims.nat))
 

:pattern ((StackMachine.add_nat @x0
@x1))
:qid typing_StackMachine.add_nat))

:named typing_StackMachine.add_nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Nil @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid typing_Prims.uu___is_Nil))

:named typing_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Cons @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid typing_Prims.uu___is_Cons))

:named typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(HasType (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid typing_Prims.op_Equals_Equals_Equals))

:named typing_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StackMachine.mul_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(31,4-31,11); use=StackMachine.fst(31,4-31,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.mul_nat@tok
@x0)
@x1)
(StackMachine.mul_nat @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.mul_nat@tok
@x0)
@x1))
:qid token_correspondence_StackMachine.mul_nat))

:named token_correspondence_StackMachine.mul_nat))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(36,4-36,15); use=StackMachine.fst(36,4-36,15)
(forall ((@x0 Term))
 (! (= (ApplyTT StackMachine.binopDenote@tok
@x0)
(StackMachine.binopDenote @x0))
 

:pattern ((ApplyTT StackMachine.binopDenote@tok
@x0))
:qid token_correspondence_StackMachine.binopDenote))

:named token_correspondence_StackMachine.binopDenote))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StackMachine.add_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(30,4-30,11); use=StackMachine.fst(30,4-30,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.add_nat@tok
@x0)
@x1)
(StackMachine.add_nat @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.add_nat@tok
@x0)
@x1))
:qid token_correspondence_StackMachine.add_nat))

:named token_correspondence_StackMachine.add_nat))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! (HasType Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34
Tm_type)
:named kinding_Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.prog; Namespace StackMachine
(assert (! (HasType StackMachine.prog
Tm_type)
:named function_token_typing_StackMachine.prog))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.mul_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(31,4-31,11); use=StackMachine.fst(31,4-31,11)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.mul_nat@tok
Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))

;; def=StackMachine.fst(31,4-31,11); use=StackMachine.fst(31,4-31,11)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.mul_nat@tok
@x1)
@x2)
(StackMachine.mul_nat @x1
@x2))
 

:pattern ((StackMachine.mul_nat @x1
@x2))
:qid function_token_typing_StackMachine.mul_nat.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.mul_nat@tok))
:qid function_token_typing_StackMachine.mul_nat))

:named function_token_typing_StackMachine.mul_nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(36,4-36,15); use=StackMachine.fst(36,4-36,15)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.binopDenote@tok
Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34))

;; def=StackMachine.fst(36,4-36,15); use=StackMachine.fst(36,4-36,15)
(forall ((@x1 Term))
 (! (= (ApplyTT StackMachine.binopDenote@tok
@x1)
(StackMachine.binopDenote @x1))
 

:pattern ((StackMachine.binopDenote @x1))
:qid function_token_typing_StackMachine.binopDenote.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.binopDenote@tok))
:qid function_token_typing_StackMachine.binopDenote))

:named function_token_typing_StackMachine.binopDenote))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.add_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(30,4-30,11); use=StackMachine.fst(30,4-30,11)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.add_nat@tok
Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))

;; def=StackMachine.fst(30,4-30,11); use=StackMachine.fst(30,4-30,11)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.add_nat@tok
@x1)
@x2)
(StackMachine.add_nat @x1
@x2))
 

:pattern ((StackMachine.add_nat @x1
@x2))
:qid function_token_typing_StackMachine.add_nat.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.add_nat@tok))
:qid function_token_typing_StackMachine.add_nat))

:named function_token_typing_StackMachine.add_nat))
;;;;;;;;;;;;;;;;Equation for StackMachine.prog
;;; Fact-ids: Name StackMachine.prog; Namespace StackMachine
(assert (! (= StackMachine.prog
(Prims.list StackMachine.instr))
:named equation_StackMachine.prog))
;;;;;;;;;;;;;;;;Equation for StackMachine.mul_nat
;;; Fact-ids: Name StackMachine.mul_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(31,4-31,11); use=StackMachine.fst(31,4-31,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.mul_nat @x0
@x1)
(Prims.op_Multiply @x0
@x1))
 

:pattern ((StackMachine.mul_nat @x0
@x1))
:qid equation_StackMachine.mul_nat))

:named equation_StackMachine.mul_nat))
;;;;;;;;;;;;;;;;Equation for StackMachine.instrDenote
;;; Fact-ids: Name StackMachine.instrDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(53,4-53,15); use=StackMachine.fst(53,4-53,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.instrDenote @x0
@x1)
(let ((@lb2 @x0))
(ite (is-StackMachine.IConst @lb2)
(FStar.Pervasives.Native.Some StackMachine.stack
(Prims.Cons Prims.nat
(StackMachine.IConst__0 @lb2)
@x1))
(ite (is-StackMachine.IBinop @lb2)
(let ((@lb3 @x1))
(ite (and (is-Prims.Cons @lb3)
(is-Prims.Cons (Prims.Cons_tl @lb3)))
(FStar.Pervasives.Native.Some StackMachine.stack
(Prims.Cons Prims.nat
(ApplyTT (ApplyTT (ApplyTT StackMachine.binopDenote@tok
(StackMachine.IBinop__0 @lb2))
(Prims.Cons_hd @lb3))
(Prims.Cons_hd (Prims.Cons_tl @lb3)))
(Prims.Cons_tl (Prims.Cons_tl @lb3))))
(FStar.Pervasives.Native.None StackMachine.stack)))
Tm_unit))))
 

:pattern ((StackMachine.instrDenote @x0
@x1))
:qid equation_StackMachine.instrDenote))

:named equation_StackMachine.instrDenote))
;;;;;;;;;;;;;;;;Equation for StackMachine.binopDenote
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(36,4-36,15); use=StackMachine.fst(36,4-36,15)
(forall ((@x0 Term))
 (! (= (StackMachine.binopDenote @x0)
(let ((@lb1 @x0))
(ite (is-StackMachine.Plus @lb1)
StackMachine.add_nat@tok
(ite (is-StackMachine.Times @lb1)
StackMachine.mul_nat@tok
Tm_unit))))
 

:pattern ((StackMachine.binopDenote @x0))
:qid equation_StackMachine.binopDenote))

:named equation_StackMachine.binopDenote))
;;;;;;;;;;;;;;;;Equation for StackMachine.add_nat
;;; Fact-ids: Name StackMachine.add_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(30,4-30,11); use=StackMachine.fst(30,4-30,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.add_nat @x0
@x1)
(Prims.op_Addition @x0
@x1))
 

:pattern ((StackMachine.add_nat @x0
@x1))
:qid equation_StackMachine.add_nat))

:named equation_StackMachine.add_nat))
;;;;;;;;;;;;;;;;Equation for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))

;; def=Prims.fst(498,52-498,68); use=Prims.fst(498,52-498,68)
(and 
;; def=Prims.fst(498,52-498,58); use=Prims.fst(498,52-498,58)
(= @x0
@x1)


;; def=Prims.fst(498,62-498,68); use=Prims.fst(498,62-498,68)
(= @x2
@x3)
)
)
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid equation_Prims.op_Equals_Equals_Equals))

:named equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Nil @x0
@x1)
(BoxBool (is-Prims.Nil @x1)))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid disc_equation_Prims.Nil))

:named disc_equation_Prims.Nil))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Cons @x0
@x1)
(BoxBool (is-Prims.Cons @x1)))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid disc_equation_Prims.Cons))

:named disc_equation_Prims.Cons))
;;;;;;;;;;;;;;;;Prop-typing for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(Valid (Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_Prims.op_Equals_Equals_Equals))

:named defn_equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(36,21-36,51); use=StackMachine.fst(36,21-36,51)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34))
:qid StackMachine_pre_typing_Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34))

:named StackMachine_pre_typing_Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(36,21-36,51); use=StackMachine.fst(36,21-36,51)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34)
(and 
;; def=StackMachine.fst(36,21-36,51); use=StackMachine.fst(36,21-36,51)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.binop)
(HasType (ApplyTT @x0
@x1)
Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34))
:qid StackMachine_interpretation_Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34))

:named StackMachine_interpretation_Tm_arrow_02b8bc2a3d19c4498218881ea4a52b34))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! (Valid (ApplyTT __uu__PartialApp
StackMachine.mul_nat@tok))
:named @kick_partial_app_8c9c4fbf0d5225f555e60df6a083e642))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StackMachine.expDenote; Namespace StackMachine
(assert (! (Valid (ApplyTT __uu__PartialApp
StackMachine.binopDenote@tok))
:named @kick_partial_app_2077112e514fe58e2c0aaec5bb119695))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StackMachine.binopDenote; Namespace StackMachine
(assert (! (Valid (ApplyTT __uu__PartialApp
StackMachine.add_nat@tok))
:named @kick_partial_app_0e114ce678db2417f58bc07d325a3b19))
(push) ;; push{2

; Starting query at StackMachine.fst(62,2-67,37)

;;;;;;;;;;;;;;;;p : StackMachine.prog (StackMachine.prog)
(declare-fun x_fe682cb2a18a2940e86b58f8bbe9df33_0 () Term)
;;;;;;;;;;;;;;;;binder_x_fe682cb2a18a2940e86b58f8bbe9df33_0
;;; Fact-ids: 
(assert (! (HasType x_fe682cb2a18a2940e86b58f8bbe9df33_0
StackMachine.prog)
:named binder_x_fe682cb2a18a2940e86b58f8bbe9df33_0))
;;;;;;;;;;;;;;;;s : StackMachine.stack (StackMachine.stack)
(declare-fun x_3c9ae8002a222e92248c26cdf9185c83_1 () Term)
;;;;;;;;;;;;;;;;binder_x_3c9ae8002a222e92248c26cdf9185c83_1
;;; Fact-ids: 
(assert (! (HasType x_3c9ae8002a222e92248c26cdf9185c83_1
StackMachine.stack)
:named binder_x_3c9ae8002a222e92248c26cdf9185c83_1))
(declare-fun Tm_refine_b4db6cc76d49b8e05c5c2b593743972f (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_b4db6cc76d49b8e05c5c2b593743972f @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_b4db6cc76d49b8e05c5c2b593743972f @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_b4db6cc76d49b8e05c5c2b593743972f))

:named refinement_kinding_Tm_refine_b4db6cc76d49b8e05c5c2b593743972f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b4db6cc76d49b8e05c5c2b593743972f @x2))
(and (HasTypeFuel @u0
@x1
StackMachine.stack)

;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)

;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(or 
;; def=StackMachine.fst(62,2-67,37); use=StackMachine.fst(62,2-67,37)
(Valid 
;; def=StackMachine.fst(62,2-67,37); use=StackMachine.fst(62,2-67,37)
(Prims.precedes StackMachine.prog
StackMachine.prog
@x2
x_fe682cb2a18a2940e86b58f8bbe9df33_0)
)


;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(and 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(61,20-61,21)
(Valid 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(61,20-61,21)
(Prims.op_Equals_Equals_Equals StackMachine.prog
StackMachine.prog
@x2
x_fe682cb2a18a2940e86b58f8bbe9df33_0)
)


;; def=StackMachine.fst(62,2-67,37); use=StackMachine.fst(62,2-67,37)
(Valid 
;; def=StackMachine.fst(62,2-67,37); use=StackMachine.fst(62,2-67,37)
(Prims.precedes StackMachine.stack
StackMachine.stack
@x1
x_3c9ae8002a222e92248c26cdf9185c83_1)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b4db6cc76d49b8e05c5c2b593743972f @x2)))
:qid refinement_interpretation_Tm_refine_b4db6cc76d49b8e05c5c2b593743972f))

:named refinement_interpretation_Tm_refine_b4db6cc76d49b8e05c5c2b593743972f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b4db6cc76d49b8e05c5c2b593743972f
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b4db6cc76d49b8e05c5c2b593743972f @x0)))
(Valid (Prims.hasEq StackMachine.stack)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b4db6cc76d49b8e05c5c2b593743972f @x0))))
:qid haseqTm_refine_b4db6cc76d49b8e05c5c2b593743972f))

:named haseqTm_refine_b4db6cc76d49b8e05c5c2b593743972f))
(declare-fun StackMachine.progDenote (Term Term) Term)

;;;;;;;;;;;;;;;;p: prog -> s: stack{p << p \/ p === p /\ s << s} -> FStar.Pervasives.Native.option stack
(declare-fun Tm_arrow_517c0970fa1bbaba87f27b641444dd3d () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_517c0970fa1bbaba87f27b641444dd3d
Tm_type)
:named kinding_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_517c0970fa1bbaba87f27b641444dd3d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_517c0970fa1bbaba87f27b641444dd3d))
:qid StackMachine_pre_typing_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d))

:named StackMachine_pre_typing_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_517c0970fa1bbaba87f27b641444dd3d)
(and 
;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.prog)
(HasType @x2
(Tm_refine_b4db6cc76d49b8e05c5c2b593743972f @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(FStar.Pervasives.Native.option StackMachine.stack)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d.1))

(IsTotFun @x0)

;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(61,20-67,37)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.prog)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_517c0970fa1bbaba87f27b641444dd3d))
:qid StackMachine_interpretation_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d))

:named StackMachine_interpretation_Tm_arrow_517c0970fa1bbaba87f27b641444dd3d))
(declare-fun StackMachine.progDenote@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.progDenote@tok
@x0)
@x1)
(StackMachine.progDenote @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.progDenote@tok
@x0)
@x1))
:qid token_correspondence_StackMachine.progDenote))

:named token_correspondence_StackMachine.progDenote))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.progDenote@tok
Tm_arrow_517c0970fa1bbaba87f27b641444dd3d))

;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.progDenote@tok
@x1)
@x2)
(StackMachine.progDenote @x1
@x2))
 

:pattern ((StackMachine.progDenote @x1
@x2))
:qid function_token_typing_StackMachine.progDenote.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.progDenote@tok))
:qid function_token_typing_StackMachine.progDenote))

:named function_token_typing_StackMachine.progDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.prog)
(HasType @x1
(Tm_refine_b4db6cc76d49b8e05c5c2b593743972f @x0)))
(HasType (StackMachine.progDenote @x0
@x1)
(FStar.Pervasives.Native.option StackMachine.stack)))
 

:pattern ((StackMachine.progDenote @x0
@x1))
:qid typing_StackMachine.progDenote))

:named typing_StackMachine.progDenote))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post (FStar.Pervasives.Native.option StackMachine.stack)).
;   (forall (x: FStar.Pervasives.Native.option StackMachine.stack). {:pattern Prims.guard_free (k x)}
;       Prims.auto_squash (k x)) ==>
;   (~(Nil? p) /\ ~(Cons? p) ==> Prims.l_False) /\
;   (~(Nil? p) ==>
;     (forall (b: StackMachine.instr) (b: Prims.list StackMachine.instr).
;         p == b :: b ==>
;         (forall (k: Prims.pure_post (FStar.Pervasives.Native.option StackMachine.stack)).
;             (forall (x: FStar.Pervasives.Native.option StackMachine.stack).
;                 {:pattern Prims.guard_free (k x)}
;                 Prims.auto_squash (k x)) ==>
;             (~(None? (StackMachine.instrDenote b s)) /\ ~(Some? (StackMachine.instrDenote b s)) ==>
;               Prims.l_False) /\
;             (~(None? (StackMachine.instrDenote b s)) ==>
;               (forall (b: StackMachine.stack).
;                   StackMachine.instrDenote b s == FStar.Pervasives.Native.Some b ==>
;                   b << p \/ b === p /\ b << s)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec progDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (FStar.Pervasives.Native.option StackMachine.stack)))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(62,2-67,37)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(62,2-67,37)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(62,2-67,37)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(62,2-67,37)
(and (implies 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(62,8-62,9)
(and 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(62,8-62,9)
(not 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(62,8-62,9)
(BoxBool_proj_0 (Prims.uu___is_Nil StackMachine.instr
x_fe682cb2a18a2940e86b58f8bbe9df33_0))
)


;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(62,8-62,9)
(not 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(62,8-62,9)
(BoxBool_proj_0 (Prims.uu___is_Cons StackMachine.instr
x_fe682cb2a18a2940e86b58f8bbe9df33_0))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(62,2-67,37)
(not 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(62,8-62,9)
(BoxBool_proj_0 (Prims.uu___is_Nil StackMachine.instr
x_fe682cb2a18a2940e86b58f8bbe9df33_0))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(62,2-67,37)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.instr)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(62,2-67,37)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list StackMachine.instr))

;; def=StackMachine.fst(61,20-64,13); use=StackMachine.fst(62,8-64,13)
(= x_fe682cb2a18a2940e86b58f8bbe9df33_0
(Prims.Cons StackMachine.instr
@x1
@x2))
)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (FStar.Pervasives.Native.option StackMachine.stack)))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(62,2-67,37)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(62,2-67,37)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(62,2-67,37)
(ApplyTT @x3
@x4)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid @query.5))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(62,2-67,37)
(and (implies 
;; def=StackMachine.fst(65,12-65,27); use=StackMachine.fst(65,12-65,27)
(and 
;; def=StackMachine.fst(65,12-65,27); use=StackMachine.fst(65,12-65,27)
(not 
;; def=StackMachine.fst(65,12-65,27); use=StackMachine.fst(65,12-65,27)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None StackMachine.stack
(StackMachine.instrDenote @x1
x_3c9ae8002a222e92248c26cdf9185c83_1)))
)


;; def=StackMachine.fst(65,12-65,27); use=StackMachine.fst(65,12-65,27)
(not 
;; def=StackMachine.fst(65,12-65,27); use=StackMachine.fst(65,12-65,27)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StackMachine.stack
(StackMachine.instrDenote @x1
x_3c9ae8002a222e92248c26cdf9185c83_1)))
)
)

label_2)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(62,2-67,37)
(not 
;; def=StackMachine.fst(65,12-65,27); use=StackMachine.fst(65,12-65,27)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None StackMachine.stack
(StackMachine.instrDenote @x1
x_3c9ae8002a222e92248c26cdf9185c83_1)))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(62,2-67,37)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
StackMachine.stack)

;; def=StackMachine.fst(65,12-67,17); use=StackMachine.fst(65,12-67,17)
(= (StackMachine.instrDenote @x1
x_3c9ae8002a222e92248c26cdf9185c83_1)
(FStar.Pervasives.Native.Some StackMachine.stack
@x4))
)

;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(67,35-67,37)
(or label_3

;; def=StackMachine.fst(62,2-67,37); use=StackMachine.fst(67,35-67,37)
(Valid 
;; def=StackMachine.fst(62,2-67,37); use=StackMachine.fst(67,35-67,37)
(Prims.precedes StackMachine.prog
StackMachine.prog
@x2
x_fe682cb2a18a2940e86b58f8bbe9df33_0)
)


;; def=StackMachine.fst(61,20-67,37); use=StackMachine.fst(67,35-67,37)
(and 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(67,35-67,37)
(Valid 
;; def=StackMachine.fst(61,20-61,21); use=StackMachine.fst(67,35-67,37)
(Prims.op_Equals_Equals_Equals StackMachine.prog
StackMachine.prog
@x2
x_fe682cb2a18a2940e86b58f8bbe9df33_0)
)


;; def=StackMachine.fst(62,2-67,37); use=StackMachine.fst(67,35-67,37)
(Valid 
;; def=StackMachine.fst(62,2-67,37); use=StackMachine.fst(67,35-67,37)
(Prims.precedes StackMachine.stack
StackMachine.stack
@x4
x_3c9ae8002a222e92248c26cdf9185c83_1)
)
)
)
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.4)))
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.progDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_3c9ae8002a222e92248c26cdf9185c83_1, binder_x_fe682cb2a18a2940e86b58f8bbe9df33_0, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_StackMachine.prog, equation_StackMachine.stack, fuel_guarded_inversion_Prims.list, lemma_FStar.Pervasives.invertOption, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons, typing_StackMachine.instrDenote, typing_StackMachine.stack

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec progDenote


; <Start encoding let rec progDenote>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.progDenote.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.progDenote.fuel_instrumented_token () Term)
(declare-fun StackMachine.progDenote (Term Term) Term)
(declare-fun StackMachine.progDenote@tok () Term)
;;;;;;;;;;;;;;;;p: prog -> s: stack -> FStar.Pervasives.Native.option stack
(declare-fun Tm_arrow_66a0fa8f3dfc68d1e2d7619519adfaa0 () Term)

; </end encoding let rec progDenote>

(push) ;; push{2

; Starting query at StackMachine.fst(70,2-72,59)

;;;;;;;;;;;;;;;;e : StackMachine.exp (StackMachine.exp)
(declare-fun x_2a319081b764dd27a6651686e4e88bbc_0 () Term)
;;;;;;;;;;;;;;;;binder_x_2a319081b764dd27a6651686e4e88bbc_0
;;; Fact-ids: 
(assert (! (HasType x_2a319081b764dd27a6651686e4e88bbc_0
StackMachine.exp)
:named binder_x_2a319081b764dd27a6651686e4e88bbc_0))
(declare-fun Tm_refine_04dcbba8927e984c6a004198fe4671c6 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_04dcbba8927e984c6a004198fe4671c6
Tm_type)
:named refinement_kinding_Tm_refine_04dcbba8927e984c6a004198fe4671c6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(69,17-72,59); use=StackMachine.fst(69,17-72,59)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_04dcbba8927e984c6a004198fe4671c6)
(and (HasTypeFuel @u0
@x1
StackMachine.exp)

;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(70,2-72,59)

;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(70,2-72,59)
(Valid 
;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(70,2-72,59)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x1
x_2a319081b764dd27a6651686e4e88bbc_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_04dcbba8927e984c6a004198fe4671c6))
:qid refinement_interpretation_Tm_refine_04dcbba8927e984c6a004198fe4671c6))

:named refinement_interpretation_Tm_refine_04dcbba8927e984c6a004198fe4671c6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_04dcbba8927e984c6a004198fe4671c6
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_04dcbba8927e984c6a004198fe4671c6))
(Valid (Prims.hasEq StackMachine.exp)))
:named haseqTm_refine_04dcbba8927e984c6a004198fe4671c6))
(declare-fun StackMachine.compile (Term) Term)

;;;;;;;;;;;;;;;;e: exp{e << e} -> prog
(declare-fun Tm_arrow_aeed3661a17335ec78a2aa470f940dc4 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_aeed3661a17335ec78a2aa470f940dc4
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_aeed3661a17335ec78a2aa470f940dc4
Tm_type)
:named kinding_Tm_arrow_aeed3661a17335ec78a2aa470f940dc4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(69,17-72,59); use=StackMachine.fst(69,17-72,59)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_aeed3661a17335ec78a2aa470f940dc4)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_aeed3661a17335ec78a2aa470f940dc4))
:qid StackMachine_pre_typing_Tm_arrow_aeed3661a17335ec78a2aa470f940dc4))

:named StackMachine_pre_typing_Tm_arrow_aeed3661a17335ec78a2aa470f940dc4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_aeed3661a17335ec78a2aa470f940dc4
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(69,17-72,59); use=StackMachine.fst(69,17-72,59)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_aeed3661a17335ec78a2aa470f940dc4)
(and 
;; def=StackMachine.fst(69,17-72,59); use=StackMachine.fst(69,17-72,59)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_04dcbba8927e984c6a004198fe4671c6)
(HasType (ApplyTT @x0
@x1)
StackMachine.prog))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_aeed3661a17335ec78a2aa470f940dc4.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_aeed3661a17335ec78a2aa470f940dc4))
:qid StackMachine_interpretation_Tm_arrow_aeed3661a17335ec78a2aa470f940dc4))

:named StackMachine_interpretation_Tm_arrow_aeed3661a17335ec78a2aa470f940dc4))
(declare-fun StackMachine.compile@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@x0 Term))
 (! (= (ApplyTT StackMachine.compile@tok
@x0)
(StackMachine.compile @x0))
 

:pattern ((ApplyTT StackMachine.compile@tok
@x0))
:qid token_correspondence_StackMachine.compile))

:named token_correspondence_StackMachine.compile))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.compile@tok
Tm_arrow_aeed3661a17335ec78a2aa470f940dc4))

;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@x1 Term))
 (! (= (ApplyTT StackMachine.compile@tok
@x1)
(StackMachine.compile @x1))
 

:pattern ((StackMachine.compile @x1))
:qid function_token_typing_StackMachine.compile.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.compile@tok))
:qid function_token_typing_StackMachine.compile))

:named function_token_typing_StackMachine.compile))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_04dcbba8927e984c6a004198fe4671c6)
(HasType (StackMachine.compile @x0)
StackMachine.prog))
 

:pattern ((StackMachine.compile @x0))
:qid typing_StackMachine.compile))

:named typing_StackMachine.compile))
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post StackMachine.prog).
;   (forall (x: StackMachine.prog). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Const? e) /\ ~(Binop? e) ==> Prims.l_False) /\
;   (~(Const? e) ==>
;     (forall (b: StackMachine.binop) (b: StackMachine.exp) (b: StackMachine.exp).
;         e == StackMachine.Binop b b b ==>
;         b << e /\
;         (forall (any_result: StackMachine.exp).
;             b == any_result ==>
;             (forall (any_result: StackMachine.prog). StackMachine.compile b == any_result ==> b << e
;             ))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec compile`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post StackMachine.prog))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(70,2-72,59)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(70,2-72,59)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(70,2-72,59)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(70,2-72,59)
(and (implies 
;; def=StackMachine.fst(69,17-69,18); use=StackMachine.fst(70,8-70,9)
(and 
;; def=StackMachine.fst(69,17-69,18); use=StackMachine.fst(70,8-70,9)
(not 
;; def=StackMachine.fst(69,17-69,18); use=StackMachine.fst(70,8-70,9)
(BoxBool_proj_0 (StackMachine.uu___is_Const x_2a319081b764dd27a6651686e4e88bbc_0))
)


;; def=StackMachine.fst(69,17-69,18); use=StackMachine.fst(70,8-70,9)
(not 
;; def=StackMachine.fst(69,17-69,18); use=StackMachine.fst(70,8-70,9)
(BoxBool_proj_0 (StackMachine.uu___is_Binop x_2a319081b764dd27a6651686e4e88bbc_0))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(70,2-72,59)
(not 
;; def=StackMachine.fst(69,17-69,18); use=StackMachine.fst(70,8-70,9)
(BoxBool_proj_0 (StackMachine.uu___is_Const x_2a319081b764dd27a6651686e4e88bbc_0))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(70,2-72,59)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.binop)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(70,2-72,59)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.exp)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(70,2-72,59)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
StackMachine.exp)

;; def=StackMachine.fst(69,17-72,19); use=StackMachine.fst(70,8-72,19)
(= x_2a319081b764dd27a6651686e4e88bbc_0
(StackMachine.Binop @x1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(70,2-72,59)
(and 
;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(72,31-72,33)
(or label_2

;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(72,31-72,33)
(Valid 
;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(72,31-72,33)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x3
x_2a319081b764dd27a6651686e4e88bbc_0)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(70,2-72,59)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
StackMachine.exp)

;; def=StackMachine.fst(69,17-72,19); use=StackMachine.fst(70,2-72,59)
(= @x3
@x4)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(70,2-72,59)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
StackMachine.prog)

;; def=FStar.List.Tot.Base.fst(124,10-124,11); use=StackMachine.fst(70,2-72,59)
(= (StackMachine.compile @x3)
@x5)
)

;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(72,44-72,46)
(or label_3

;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(72,44-72,46)
(Valid 
;; def=StackMachine.fst(70,2-72,59); use=StackMachine.fst(72,44-72,46)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x2
x_2a319081b764dd27a6651686e4e88bbc_0)
)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.compile, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StackMachine_pretyping_2a319081b764dd27a6651686e4e88bbc, binder_x_2a319081b764dd27a6651686e4e88bbc_0, disc_equation_StackMachine.Binop, disc_equation_StackMachine.Const, fuel_guarded_inversion_StackMachine.exp, projection_inverse_BoxBool_proj_0, projection_inverse_StackMachine.Binop__1, projection_inverse_StackMachine.Binop__2, subterm_ordering_StackMachine.Binop

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec compile


; <Start encoding let rec compile>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.compile.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.compile.fuel_instrumented_token () Term)
(declare-fun StackMachine.compile (Term) Term)
(declare-fun StackMachine.compile@tok () Term)
;;;;;;;;;;;;;;;;e: exp -> prog
(declare-fun Tm_arrow_32dad7500a7c5072b34d4c5a337d1da9 () Term)

; </end encoding let rec compile>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.op_At; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(124,4-124,9); use=FStar.List.Tot.Base.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.op_At @x0
@x1
@x2)
(Prims.list @x0)))
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
@x2))
:qid typing_FStar.List.Tot.Base.op_At))

:named typing_FStar.List.Tot.Base.op_At))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.append @x0
@x1
@x2)
(Prims.list @x0)))
 

:pattern ((FStar.List.Tot.Base.append @x0
@x1
@x2))
:qid typing_FStar.List.Tot.Base.append))

:named typing_FStar.List.Tot.Base.append))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1))
(HasType @x3
(Prims.list @x1)))
(HasType (FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.precedes_append_cons_r
;;; Fact-ids: Name FStar.List.Tot.Properties.precedes_append_cons_r; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
@x0)
(HasType @x3
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(754,11-754,37); use=FStar.List.Tot.Properties.fsti(754,11-754,37)
(Valid 
;; def=FStar.List.Tot.Properties.fsti(754,11-754,37); use=FStar.List.Tot.Properties.fsti(754,11-754,37)
(Prims.precedes @x0
(Prims.list @x0)
@x2
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x0
@x1
(Prims.Cons @x0
@x2
@x3)))
)
)
 

:pattern ((Prims.precedes @x0
(Prims.list @x0)
@x2
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x0
@x1
(Prims.Cons @x0
@x2
@x3))))
:qid lemma_FStar.List.Tot.Properties.precedes_append_cons_r))
:named lemma_FStar.List.Tot.Properties.precedes_append_cons_r))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.append_l_nil
;;; Fact-ids: Name FStar.List.Tot.Properties.append_l_nil; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(123,17-123,28); use=FStar.List.Tot.Properties.fsti(123,17-123,28)
(= (FStar.List.Tot.Base.op_At @x0
@x1
(Prims.Nil @x0))
@x1)
)
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
(Prims.Nil @x0)))
:qid lemma_FStar.List.Tot.Properties.append_l_nil))
:named lemma_FStar.List.Tot.Properties.append_l_nil))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.append
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1))
(HasType @x3
(Prims.list @x1)))
(= (FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x2))
(ite (is-Prims.Nil @lb4)
@x3
(ite (is-Prims.Cons @lb4)
(Prims.Cons @x1
(Prims.Cons_hd @lb4)
(FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb4)
@x3))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for FStar.List.Tot.Base.op_At
;;; Fact-ids: Name FStar.List.Tot.Base.op_At; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(124,4-124,9); use=FStar.List.Tot.Base.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.op_At @x0
@x1
@x2)
(FStar.List.Tot.Base.append @x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
@x2))
:qid equation_FStar.List.Tot.Base.op_At))

:named equation_FStar.List.Tot.Base.op_At))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.append @x0
@x1
@x2)
(FStar.List.Tot.Base.append.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.append @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))
(push) ;; push{2

; Starting query at StackMachine.fst(76,2-78,37)

;;;;;;;;;;;;;;;;a : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;l : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_2 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2))
;;;;;;;;;;;;;;;;m : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_3 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3))
;;;;;;;;;;;;;;;;n : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_4 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.app_assoc_reverse (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.app_assoc_reverse@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit). (l @ m) @ n == l @ m @ n ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: a) (b: Prims.list a).
;             l == b :: b ==>
;             (b << l \/ b === l /\ (m << m \/ n << n)) /\
;             (forall (any_result: Prims.list a).
;                 n == any_result ==>
;                 (forall (pure_result: Prims.unit). (b @ m) @ n == b @ m @ n ==> k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec app_assoc_reverse`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StackMachine.fst(76,2-78,37); use=StackMachine.fst(76,2-78,37)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(76,2-78,37)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=StackMachine.fst(75,35-75,61); use=StackMachine.fst(76,2-78,37)
(or label_2

;; def=StackMachine.fst(75,35-75,61); use=StackMachine.fst(76,2-78,37)
(= (FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
x_0a56e3de562c08d8ab59f4ac6f626a98_4)
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3
x_0a56e3de562c08d8ab59f4ac6f626a98_4)))
)
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(76,2-78,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(76,2-78,37)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(76,2-78,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(76,2-78,37)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(76,2-78,37)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(76,2-78,37)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(76,2-78,37)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(76,2-78,37)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(76,2-78,37)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(76,2-78,37)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(76,2-78,37)
(and (implies 
;; def=StackMachine.fst(74,37-74,38); use=StackMachine.fst(76,8-76,9)
(and 
;; def=StackMachine.fst(74,37-74,38); use=StackMachine.fst(76,8-76,9)
(not 
;; def=StackMachine.fst(74,37-74,38); use=StackMachine.fst(76,8-76,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)


;; def=StackMachine.fst(74,37-74,38); use=StackMachine.fst(76,8-76,9)
(not 
;; def=StackMachine.fst(74,37-74,38); use=StackMachine.fst(76,8-76,9)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)
)

label_3)
(implies 
;; def=StackMachine.fst(74,37-77,6); use=StackMachine.fst(76,8-77,6)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1))


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(76,2-78,37)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(76,2-78,37)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(76,2-78,37)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(76,2-78,37)
(not 
;; def=StackMachine.fst(74,37-74,38); use=StackMachine.fst(76,8-76,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(76,2-78,37)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(76,2-78,37)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=StackMachine.fst(74,37-78,9); use=StackMachine.fst(76,8-78,9)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(76,2-78,37)
(and 
;; def=StackMachine.fst(74,37-78,37); use=StackMachine.fst(78,36-78,37)
(or label_4

;; def=StackMachine.fst(76,2-78,37); use=StackMachine.fst(78,36-78,37)
(Valid 
;; def=StackMachine.fst(76,2-78,37); use=StackMachine.fst(78,36-78,37)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_2)
)


;; def=StackMachine.fst(74,37-78,37); use=StackMachine.fst(78,36-78,37)
(and 
;; def=StackMachine.fst(74,37-74,38); use=StackMachine.fst(78,36-78,37)
(Valid 
;; def=StackMachine.fst(74,37-74,38); use=StackMachine.fst(78,36-78,37)
(Prims.op_Equals_Equals_Equals (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_2)
)


;; def=StackMachine.fst(74,50-78,37); use=StackMachine.fst(78,36-78,37)
(or 
;; def=StackMachine.fst(76,2-78,37); use=StackMachine.fst(78,36-78,37)
(Valid 
;; def=StackMachine.fst(76,2-78,37); use=StackMachine.fst(78,36-78,37)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
x_0a56e3de562c08d8ab59f4ac6f626a98_3
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
)


;; def=StackMachine.fst(76,2-78,37); use=StackMachine.fst(78,36-78,37)
(Valid 
;; def=StackMachine.fst(76,2-78,37); use=StackMachine.fst(78,36-78,37)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
x_0a56e3de562c08d8ab59f4ac6f626a98_4
x_0a56e3de562c08d8ab59f4ac6f626a98_4)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(76,2-78,37)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=StackMachine.fst(74,63-74,64); use=StackMachine.fst(76,2-78,37)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_4
@x4)
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(78,13-78,30)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=StackMachine.fst(75,35-75,61); use=StackMachine.fst(78,13-78,30)
(= (FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
x_0a56e3de562c08d8ab59f4ac6f626a98_4)
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
@x3
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3
x_0a56e3de562c08d8ab59f4ac6f626a98_4)))
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(78,13-78,30)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(78,13-78,30)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.app_assoc_reverse, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented, @query, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4, binder_x_fe28d8bcde588226b4e538b35321de05_1, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_FStar.List.Tot.Base.op_At, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_Prims.Cons, typing_FStar.List.Tot.Base.op_At

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec app_assoc_reverse


; <Start encoding let rec app_assoc_reverse>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.app_assoc_reverse (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.app_assoc_reverse@tok () Term)

; </end encoding let rec app_assoc_reverse>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.progDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.prog)
(HasType @x1
StackMachine.stack))
(HasType (StackMachine.progDenote @x0
@x1)
(FStar.Pervasives.Native.option StackMachine.stack)))
 

:pattern ((StackMachine.progDenote @x0
@x1))
:qid typing_StackMachine.progDenote))

:named typing_StackMachine.progDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.expDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.exp)
(HasType (StackMachine.expDenote @x0)
Prims.nat))
 

:pattern ((StackMachine.expDenote @x0))
:qid typing_StackMachine.expDenote))

:named typing_StackMachine.expDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.compile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.exp)
(HasType (StackMachine.compile @x0)
StackMachine.prog))
 

:pattern ((StackMachine.compile @x0))
:qid typing_StackMachine.compile))

:named typing_StackMachine.compile))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.progDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.prog)
(HasType @x2
StackMachine.stack))
(HasType (StackMachine.progDenote.fuel_instrumented @u0
@x1
@x2)
(FStar.Pervasives.Native.option StackMachine.stack)))
 

:pattern ((StackMachine.progDenote.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_StackMachine.progDenote.fuel_instrumented))

:named token_correspondence_StackMachine.progDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.expDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
StackMachine.exp)
(HasType (StackMachine.expDenote.fuel_instrumented @u0
@x1)
Prims.nat))
 

:pattern ((StackMachine.expDenote.fuel_instrumented @u0
@x1))
:qid token_correspondence_StackMachine.expDenote.fuel_instrumented))

:named token_correspondence_StackMachine.expDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.compile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
StackMachine.exp)
(HasType (StackMachine.compile.fuel_instrumented @u0
@x1)
StackMachine.prog))
 

:pattern ((StackMachine.compile.fuel_instrumented @u0
@x1))
:qid token_correspondence_StackMachine.compile.fuel_instrumented))

:named token_correspondence_StackMachine.compile.fuel_instrumented))
;;;;;;;;;;;;;;;;Lemma: StackMachine.app_assoc_reverse
;;; Fact-ids: Name StackMachine.app_assoc_reverse; Namespace StackMachine
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0))
(HasType @x3
(Prims.list @x0)))

;; def=StackMachine.fst(75,35-75,61); use=StackMachine.fst(75,35-75,61)
(= (FStar.List.Tot.Base.op_At @x0
(FStar.List.Tot.Base.op_At @x0
@x1
@x2)
@x3)
(FStar.List.Tot.Base.op_At @x0
@x1
(FStar.List.Tot.Base.op_At @x0
@x2
@x3)))
)
 

:pattern ((FStar.List.Tot.Base.op_At @x0
(FStar.List.Tot.Base.op_At @x0
@x1
@x2)
@x3))
:qid lemma_StackMachine.app_assoc_reverse))
:named lemma_StackMachine.app_assoc_reverse))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.progDenote
;;; Fact-ids: Name StackMachine.progDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.prog)
(HasType @x2
StackMachine.stack))
(= (StackMachine.progDenote.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x1))
(ite (is-Prims.Nil @lb3)
(FStar.Pervasives.Native.Some StackMachine.stack
@x2)
(ite (is-Prims.Cons @lb3)
(let ((@lb4 (StackMachine.instrDenote (Prims.Cons_hd @lb3)
@x2)))
(ite (is-FStar.Pervasives.Native.None @lb4)
(FStar.Pervasives.Native.None StackMachine.stack)
(ite (is-FStar.Pervasives.Native.Some @lb4)
(StackMachine.progDenote.fuel_instrumented @u0
(Prims.Cons_tl @lb3)
(FStar.Pervasives.Native.Some_v @lb4))
Tm_unit)))
Tm_unit)))))
 :weight 0


:pattern ((StackMachine.progDenote.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_StackMachine.progDenote.fuel_instrumented))

:named equation_with_fuel_StackMachine.progDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.expDenote
;;; Fact-ids: Name StackMachine.expDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
StackMachine.exp)
(= (StackMachine.expDenote.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (is-StackMachine.Const @lb2)
(StackMachine.Const__0 @lb2)
(ite (is-StackMachine.Binop @lb2)
(ApplyTT (ApplyTT (ApplyTT StackMachine.binopDenote@tok
(StackMachine.Binop__0 @lb2))
(StackMachine.expDenote.fuel_instrumented @u0
(StackMachine.Binop__1 @lb2)))
(StackMachine.expDenote.fuel_instrumented @u0
(StackMachine.Binop__2 @lb2)))
Tm_unit)))))
 :weight 0


:pattern ((StackMachine.expDenote.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_StackMachine.expDenote.fuel_instrumented))

:named equation_with_fuel_StackMachine.expDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.compile
;;; Fact-ids: Name StackMachine.compile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
StackMachine.exp)
(= (StackMachine.compile.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (is-StackMachine.Const @lb2)
(Prims.Cons StackMachine.instr
(StackMachine.IConst (StackMachine.Const__0 @lb2))
(Prims.Nil StackMachine.instr))
(ite (is-StackMachine.Binop @lb2)
(FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile.fuel_instrumented @u0
(StackMachine.Binop__2 @lb2))
(FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile.fuel_instrumented @u0
(StackMachine.Binop__1 @lb2))
(Prims.Cons StackMachine.instr
(StackMachine.IBinop (StackMachine.Binop__0 @lb2))
(Prims.Nil StackMachine.instr))))
Tm_unit)))))
 :weight 0


:pattern ((StackMachine.compile.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_StackMachine.compile.fuel_instrumented))

:named equation_with_fuel_StackMachine.compile.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.progDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.progDenote.fuel_instrumented (SFuel @u0)
@x1
@x2)
(StackMachine.progDenote.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((StackMachine.progDenote.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_StackMachine.progDenote.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.progDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.expDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (StackMachine.expDenote.fuel_instrumented (SFuel @u0)
@x1)
(StackMachine.expDenote.fuel_instrumented ZFuel
@x1))
 

:pattern ((StackMachine.expDenote.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_StackMachine.expDenote.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.expDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.compile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (StackMachine.compile.fuel_instrumented (SFuel @u0)
@x1)
(StackMachine.compile.fuel_instrumented ZFuel
@x1))
 

:pattern ((StackMachine.compile.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_StackMachine.compile.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.compile.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.progDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(61,8-61,18); use=StackMachine.fst(61,8-61,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.progDenote @x0
@x1)
(StackMachine.progDenote.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((StackMachine.progDenote @x0
@x1))
:qid @fuel_correspondence_StackMachine.progDenote.fuel_instrumented))

:named @fuel_correspondence_StackMachine.progDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.expDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(41,8-41,17); use=StackMachine.fst(41,8-41,17)
(forall ((@x0 Term))
 (! (= (StackMachine.expDenote @x0)
(StackMachine.expDenote.fuel_instrumented MaxFuel
@x0))
 

:pattern ((StackMachine.expDenote @x0))
:qid @fuel_correspondence_StackMachine.expDenote.fuel_instrumented))

:named @fuel_correspondence_StackMachine.expDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.compile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(69,8-69,15); use=StackMachine.fst(69,8-69,15)
(forall ((@x0 Term))
 (! (= (StackMachine.compile @x0)
(StackMachine.compile.fuel_instrumented MaxFuel
@x0))
 

:pattern ((StackMachine.compile @x0))
:qid @fuel_correspondence_StackMachine.compile.fuel_instrumented))

:named @fuel_correspondence_StackMachine.compile.fuel_instrumented))
(push) ;; push{2

; Starting query at StackMachine.fst(82,2-85,74)

;;;;;;;;;;;;;;;;e : StackMachine.exp (StackMachine.exp)
(declare-fun x_2a319081b764dd27a6651686e4e88bbc_0 () Term)
;;;;;;;;;;;;;;;;binder_x_2a319081b764dd27a6651686e4e88bbc_0
;;; Fact-ids: 
(assert (! (HasType x_2a319081b764dd27a6651686e4e88bbc_0
StackMachine.exp)
:named binder_x_2a319081b764dd27a6651686e4e88bbc_0))
;;;;;;;;;;;;;;;;p : Prims.list StackMachine.instr (Prims.list StackMachine.instr)
(declare-fun x_9f48d967f2ac834d566c856feb7a9952_1 () Term)
;;;;;;;;;;;;;;;;binder_x_9f48d967f2ac834d566c856feb7a9952_1
;;; Fact-ids: 
(assert (! (HasType x_9f48d967f2ac834d566c856feb7a9952_1
(Prims.list StackMachine.instr))
:named binder_x_9f48d967f2ac834d566c856feb7a9952_1))
;;;;;;;;;;;;;;;;s : Prims.list Prims.nat (Prims.list Prims.nat)
(declare-fun x_b46f9febde162e476374095e6787c208_2 () Term)
;;;;;;;;;;;;;;;;binder_x_b46f9febde162e476374095e6787c208_2
;;; Fact-ids: 
(assert (! (HasType x_b46f9febde162e476374095e6787c208_2
(Prims.list Prims.nat))
:named binder_x_b46f9febde162e476374095e6787c208_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.compile_correct_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.compile_correct_@tok () Term)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(81,4-81,74); use=StackMachine.fst(82,2-85,74)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(declare-fun Tm_refine_aebc81e2e13c139d05837b86cc180b74 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(84,23-84,39)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_aebc81e2e13c139d05837b86cc180b74 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_aebc81e2e13c139d05837b86cc180b74 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_aebc81e2e13c139d05837b86cc180b74))

:named refinement_kinding_Tm_refine_aebc81e2e13c139d05837b86cc180b74))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(84,23-84,39)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_aebc81e2e13c139d05837b86cc180b74 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Prims.list Prims.nat))

;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(84,23-84,39)

;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(84,23-84,39)
(or 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,23-84,39)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,23-84,39)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x2
x_2a319081b764dd27a6651686e4e88bbc_0)
)


;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(84,23-84,39)
(and 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(84,23-84,39)
(Valid 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(84,23-84,39)
(Prims.op_Equals_Equals_Equals StackMachine.exp
StackMachine.exp
@x2
x_2a319081b764dd27a6651686e4e88bbc_0)
)


;; def=StackMachine.fst(80,27-85,74); use=StackMachine.fst(84,23-84,39)
(or 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,23-84,39)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,23-84,39)
(Prims.precedes (Prims.list StackMachine.instr)
(Prims.list StackMachine.instr)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x3)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1)
x_9f48d967f2ac834d566c856feb7a9952_1)
)


;; def=StackMachine.fst(80,27-85,74); use=StackMachine.fst(84,23-84,39)
(and 
;; def=StackMachine.fst(80,27-80,28); use=StackMachine.fst(84,23-84,39)
(Valid 
;; def=StackMachine.fst(80,27-80,28); use=StackMachine.fst(84,23-84,39)
(Prims.op_Equals_Equals_Equals (Prims.list StackMachine.instr)
(Prims.list StackMachine.instr)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x3)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1)
x_9f48d967f2ac834d566c856feb7a9952_1)
)


;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,23-84,39)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,23-84,39)
(Prims.precedes (Prims.list Prims.nat)
(Prims.list Prims.nat)
@x1
x_b46f9febde162e476374095e6787c208_2)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_aebc81e2e13c139d05837b86cc180b74 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_aebc81e2e13c139d05837b86cc180b74))

:named refinement_interpretation_Tm_refine_aebc81e2e13c139d05837b86cc180b74))
;;;;;;;;;;;;;;;;haseq for Tm_refine_aebc81e2e13c139d05837b86cc180b74
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(84,23-84,39)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_aebc81e2e13c139d05837b86cc180b74 @x0
@x1)))
(Valid (Prims.hasEq (Prims.list Prims.nat))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_aebc81e2e13c139d05837b86cc180b74 @x0
@x1))))
:qid haseqTm_refine_aebc81e2e13c139d05837b86cc180b74))

:named haseqTm_refine_aebc81e2e13c139d05837b86cc180b74))

; Encoding query formula : (forall (_: Prims.squash Prims.l_True).
;     (*  - Could not prove post-condition
; *)
;     Prims.hasEq (FStar.Pervasives.Native.option StackMachine.stack)) /\
; (forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         StackMachine.progDenote (StackMachine.compile e @ p) s =
;         StackMachine.progDenote p (StackMachine.expDenote e :: s) ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (~(Const? e) /\ ~(Binop? e) ==> Prims.l_False) /\
;         (forall (b: Prims.nat).
;             e == StackMachine.Const b ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(Const? e) ==>
;           (forall (b: StackMachine.binop) (b: StackMachine.exp) (b: StackMachine.exp).
;               e == StackMachine.Binop b b b ==>
;               (b << e \/
;                 b === e /\
;                 ([StackMachine.IBinop b] @ p << p \/
;                   [StackMachine.IBinop b] @ p === p /\ StackMachine.expDenote b :: s << s)) /\
;               (forall (return_val:
;                   s:
;                   Prims.list Prims.nat
;                     { b << e \/
;                       b === e /\
;                       ([StackMachine.IBinop b] @ p << p \/
;                         [StackMachine.IBinop b] @ p === p /\ s << s) }).
;                   return_val == StackMachine.expDenote b :: s ==>
;                   (forall (pure_result: Prims.unit).
;                       StackMachine.progDenote (StackMachine.compile b @ [StackMachine.IBinop b] @ p)
;                         (StackMachine.expDenote b :: s) =
;                       StackMachine.progDenote ([StackMachine.IBinop b] @ p)
;                         (StackMachine.expDenote b :: StackMachine.expDenote b :: s) ==>
;                       (b << e \/
;                         b === e /\
;                         (StackMachine.compile b @ [StackMachine.IBinop b] @ p << p \/
;                           StackMachine.compile b @ [StackMachine.IBinop b] @ p === p /\ s << s)) /\
;                       (forall (any_result: Prims.list Prims.nat).
;                           s == any_result ==>
;                           (forall (pure_result: Prims.unit).
;                               StackMachine.progDenote (StackMachine.compile b @
;                                   StackMachine.compile b @ [StackMachine.IBinop b] @ p)
;                                 s =
;                               StackMachine.progDenote (StackMachine.compile b @
;                                   [StackMachine.IBinop b] @ p)
;                                 (StackMachine.expDenote b :: s) ==>
;                               k pure_result))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec compile_correct'`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(82,2-85,74)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(81,11-81,21)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(82,2-85,74)
(Prims.hasEq (FStar.Pervasives.Native.option StackMachine.stack))
)
)
)
 
;;no pats
:qid @query))


;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(82,2-85,74)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(82,2-85,74)
(forall ((@x1 Term))
 (! (implies (and (or label_2
(HasType @x1
Prims.unit))

;; def=StackMachine.fst(81,10-81,74); use=StackMachine.fst(82,2-85,74)
(or label_3

;; def=StackMachine.fst(81,10-81,74); use=StackMachine.fst(82,2-85,74)
(= (StackMachine.progDenote (FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile x_2a319081b764dd27a6651686e4e88bbc_0)
x_9f48d967f2ac834d566c856feb7a9952_1)
x_b46f9febde162e476374095e6787c208_2)
(StackMachine.progDenote x_9f48d967f2ac834d566c856feb7a9952_1
(Prims.Cons Prims.nat
(StackMachine.expDenote x_2a319081b764dd27a6651686e4e88bbc_0)
x_b46f9febde162e476374095e6787c208_2)))
)
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(82,2-85,74)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(82,2-85,74)
(ApplyTT @x0
@x1)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(82,2-85,74)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(82,2-85,74)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(82,2-85,74)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(82,2-85,74)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(82,2-85,74)
(and (implies 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(82,8-82,9)
(and 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(82,8-82,9)
(not 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(82,8-82,9)
(BoxBool_proj_0 (StackMachine.uu___is_Const x_2a319081b764dd27a6651686e4e88bbc_0))
)


;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(82,8-82,9)
(not 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(82,8-82,9)
(BoxBool_proj_0 (StackMachine.uu___is_Binop x_2a319081b764dd27a6651686e4e88bbc_0))
)
)

label_4)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(82,2-85,74)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.nat)

;; def=StackMachine.fst(80,25-83,13); use=StackMachine.fst(82,8-83,13)
(= x_2a319081b764dd27a6651686e4e88bbc_0
(StackMachine.Const @x2))
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(82,2-85,74)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(82,2-85,74)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(82,2-85,74)
(not 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(82,8-82,9)
(BoxBool_proj_0 (StackMachine.uu___is_Const x_2a319081b764dd27a6651686e4e88bbc_0))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(82,2-85,74)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.binop)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(82,2-85,74)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.exp)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(82,2-85,74)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
StackMachine.exp)

;; def=StackMachine.fst(80,25-84,19); use=StackMachine.fst(82,8-84,19)
(= x_2a319081b764dd27a6651686e4e88bbc_0
(StackMachine.Binop @x2
@x3
@x4))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(82,2-85,74)
(and 
;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(84,60-84,78)
(or label_5

;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,60-84,78)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,60-84,78)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x3
x_2a319081b764dd27a6651686e4e88bbc_0)
)


;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(84,60-84,78)
(and 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(84,60-84,78)
(Valid 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(84,60-84,78)
(Prims.op_Equals_Equals_Equals StackMachine.exp
StackMachine.exp
@x3
x_2a319081b764dd27a6651686e4e88bbc_0)
)


;; def=StackMachine.fst(80,27-85,74); use=StackMachine.fst(84,60-84,78)
(or 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,60-84,78)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,60-84,78)
(Prims.precedes (Prims.list StackMachine.instr)
(Prims.list StackMachine.instr)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x2)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1)
x_9f48d967f2ac834d566c856feb7a9952_1)
)


;; def=StackMachine.fst(80,27-85,74); use=StackMachine.fst(84,60-84,78)
(and 
;; def=StackMachine.fst(80,27-80,28); use=StackMachine.fst(84,60-84,78)
(Valid 
;; def=StackMachine.fst(80,27-80,28); use=StackMachine.fst(84,60-84,78)
(Prims.op_Equals_Equals_Equals (Prims.list StackMachine.instr)
(Prims.list StackMachine.instr)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x2)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1)
x_9f48d967f2ac834d566c856feb7a9952_1)
)


;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,60-84,78)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(84,60-84,78)
(Prims.precedes (Prims.list Prims.nat)
(Prims.list Prims.nat)
(Prims.Cons Prims.nat
(StackMachine.expDenote @x4)
x_b46f9febde162e476374095e6787c208_2)
x_b46f9febde162e476374095e6787c208_2)
)
)
)
)
)


;; def=Prims.fst(356,2-356,58); use=StackMachine.fst(82,2-85,74)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Tm_refine_aebc81e2e13c139d05837b86cc180b74 @x3
@x2))

;; def=Prims.fst(356,26-356,41); use=StackMachine.fst(82,2-85,74)
(= @x5
(Prims.Cons Prims.nat
(StackMachine.expDenote @x4)
x_b46f9febde162e476374095e6787c208_2))
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(84,23-84,39)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=StackMachine.fst(81,10-81,74); use=StackMachine.fst(84,23-84,39)
(= (StackMachine.progDenote (FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile @x3)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x2)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1))
(Prims.Cons Prims.nat
(StackMachine.expDenote @x4)
x_b46f9febde162e476374095e6787c208_2))
(StackMachine.progDenote (FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x2)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1)
(Prims.Cons Prims.nat
(StackMachine.expDenote @x3)
(Prims.Cons Prims.nat
(StackMachine.expDenote @x4)
x_b46f9febde162e476374095e6787c208_2))))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(82,2-85,74)
(and 
;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(85,73-85,74)
(or label_6

;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(85,73-85,74)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(85,73-85,74)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x4
x_2a319081b764dd27a6651686e4e88bbc_0)
)


;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(85,73-85,74)
(and 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(85,73-85,74)
(Valid 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(85,73-85,74)
(Prims.op_Equals_Equals_Equals StackMachine.exp
StackMachine.exp
@x4
x_2a319081b764dd27a6651686e4e88bbc_0)
)


;; def=StackMachine.fst(80,27-85,74); use=StackMachine.fst(85,73-85,74)
(or 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(85,73-85,74)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(85,73-85,74)
(Prims.precedes (Prims.list StackMachine.instr)
(Prims.list StackMachine.instr)
(FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile @x3)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x2)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1))
x_9f48d967f2ac834d566c856feb7a9952_1)
)


;; def=StackMachine.fst(80,27-85,74); use=StackMachine.fst(85,73-85,74)
(and 
;; def=StackMachine.fst(80,27-80,28); use=StackMachine.fst(85,73-85,74)
(Valid 
;; def=StackMachine.fst(80,27-80,28); use=StackMachine.fst(85,73-85,74)
(Prims.op_Equals_Equals_Equals (Prims.list StackMachine.instr)
(Prims.list StackMachine.instr)
(FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile @x3)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x2)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1))
x_9f48d967f2ac834d566c856feb7a9952_1)
)


;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(85,73-85,74)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(85,73-85,74)
(Prims.precedes (Prims.list Prims.nat)
(Prims.list Prims.nat)
x_b46f9febde162e476374095e6787c208_2
x_b46f9febde162e476374095e6787c208_2)
)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(82,2-85,74)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.list Prims.nat))

;; def=StackMachine.fst(80,29-80,30); use=StackMachine.fst(82,2-85,74)
(= x_b46f9febde162e476374095e6787c208_2
@x7)
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(85,23-85,39)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=StackMachine.fst(81,10-81,74); use=StackMachine.fst(85,23-85,39)
(= (StackMachine.progDenote (FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile @x4)
(FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile @x3)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x2)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1)))
x_b46f9febde162e476374095e6787c208_2)
(StackMachine.progDenote (FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile @x3)
(FStar.List.Tot.Base.op_At StackMachine.instr
(Prims.Cons StackMachine.instr
(StackMachine.IBinop @x2)
(Prims.Nil StackMachine.instr))
x_9f48d967f2ac834d566c856feb7a9952_1))
(Prims.Cons Prims.nat
(StackMachine.expDenote @x4)
x_b46f9febde162e476374095e6787c208_2)))
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(85,23-85,39)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(85,23-85,39)
(ApplyTT @x1
@x8)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.compile_correct', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_StackMachine.compile.fuel_instrumented, @fuel_correspondence_StackMachine.expDenote.fuel_instrumented, @fuel_correspondence_StackMachine.progDenote.fuel_instrumented, @fuel_irrelevance_StackMachine.compile.fuel_instrumented, @fuel_irrelevance_StackMachine.expDenote.fuel_instrumented, @fuel_irrelevance_StackMachine.progDenote.fuel_instrumented, @query, FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125, Prims_pretyping_f8666440faa91836cc5a13998af863fc, StackMachine_pretyping_2a319081b764dd27a6651686e4e88bbc, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_Prims.list__uu___haseq, binder_x_2a319081b764dd27a6651686e4e88bbc_0, binder_x_9f48d967f2ac834d566c856feb7a9952_1, binder_x_b46f9febde162e476374095e6787c208_2, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_FStar.Pervasives.Native.option, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, constructor_distinct_Prims.unit, constructor_distinct_StackMachine.Binop, constructor_distinct_StackMachine.Const, constructor_distinct_StackMachine.IBinop, constructor_distinct_StackMachine.IConst, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, data_typing_intro_StackMachine.IBinop@tok, disc_equation_StackMachine.Binop, disc_equation_StackMachine.Const, equation_FStar.List.Tot.Base.op_At, equation_Prims.eqtype, equation_Prims.nat, equation_StackMachine.instrDenote, equation_StackMachine.prog, equation_StackMachine.stack, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_StackMachine.compile.fuel_instrumented, equation_with_fuel_StackMachine.expDenote.fuel_instrumented, equation_with_fuel_StackMachine.progDenote.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_Prims.list, fuel_guarded_inversion_StackMachine.exp, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, kinding_StackMachine.instr@tok, lemma_FStar.List.Tot.Properties.append_l_nil, lemma_StackMachine.app_assoc_reverse, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, projection_inverse_StackMachine.Binop__0, projection_inverse_StackMachine.Binop__1, projection_inverse_StackMachine.Binop__2, projection_inverse_StackMachine.Const__0, projection_inverse_StackMachine.IBinop__0, projection_inverse_StackMachine.IConst__0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_aebc81e2e13c139d05837b86cc180b74, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_StackMachine.Binop, token_correspondence_StackMachine.compile.fuel_instrumented, typing_FStar.List.Tot.Base.op_At, typing_Prims.int, typing_StackMachine.compile, typing_StackMachine.expDenote, typing_StackMachine.progDenote, typing_StackMachine.stack, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at StackMachine.fst(80,0-85,74)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_e1057fa64e865153dc61f3bdb63b055a (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(80,25-85,74)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_e1057fa64e865153dc61f3bdb63b055a @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_e1057fa64e865153dc61f3bdb63b055a @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_e1057fa64e865153dc61f3bdb63b055a))

:named refinement_kinding_Tm_refine_e1057fa64e865153dc61f3bdb63b055a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(80,25-85,74)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e1057fa64e865153dc61f3bdb63b055a @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(Prims.list Prims.nat))

;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(80,25-85,74)

;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(80,25-85,74)
(or 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(82,2-85,74)
(Prims.precedes StackMachine.exp
StackMachine.exp
@x2
@x3)
)


;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(80,25-85,74)
(and 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(80,25-80,26)
(Valid 
;; def=StackMachine.fst(80,25-80,26); use=StackMachine.fst(80,25-80,26)
(Prims.op_Equals_Equals_Equals StackMachine.exp
StackMachine.exp
@x2
@x3)
)


;; def=StackMachine.fst(80,27-85,74); use=StackMachine.fst(80,27-85,74)
(or 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(82,2-85,74)
(Prims.precedes (Prims.list StackMachine.instr)
(Prims.list StackMachine.instr)
@x4
@x5)
)


;; def=StackMachine.fst(80,27-85,74); use=StackMachine.fst(80,27-85,74)
(and 
;; def=StackMachine.fst(80,27-80,28); use=StackMachine.fst(80,27-80,28)
(Valid 
;; def=StackMachine.fst(80,27-80,28); use=StackMachine.fst(80,27-80,28)
(Prims.op_Equals_Equals_Equals (Prims.list StackMachine.instr)
(Prims.list StackMachine.instr)
@x4
@x5)
)


;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(82,2-85,74)
(Valid 
;; def=StackMachine.fst(82,2-85,74); use=StackMachine.fst(82,2-85,74)
(Prims.precedes (Prims.list Prims.nat)
(Prims.list Prims.nat)
@x1
@x6)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e1057fa64e865153dc61f3bdb63b055a @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_e1057fa64e865153dc61f3bdb63b055a))

:named refinement_interpretation_Tm_refine_e1057fa64e865153dc61f3bdb63b055a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e1057fa64e865153dc61f3bdb63b055a
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(80,25-85,74); use=StackMachine.fst(80,25-85,74)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e1057fa64e865153dc61f3bdb63b055a @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (Prims.list Prims.nat))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e1057fa64e865153dc61f3bdb63b055a @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_e1057fa64e865153dc61f3bdb63b055a))

:named haseqTm_refine_e1057fa64e865153dc61f3bdb63b055a))
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(81,4-81,74); use=StackMachine.fst(81,4-81,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

; Encoding query formula : forall (e: StackMachine.exp)
;   (p: Prims.list StackMachine.instr)
;   (s: Prims.list Prims.nat)
;   (e: StackMachine.exp)
;   (p: Prims.list StackMachine.instr)
;   (s: Prims.list Prims.nat {e << e \/ e === e /\ (p << p \/ p === p /\ s << s)})
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *)
;   Prims.hasEq (FStar.Pervasives.Native.option StackMachine.stack)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec compile_correct'`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StackMachine.fst(80,0-85,74)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
StackMachine.exp)
(HasType @x1
(Prims.list StackMachine.instr))
(HasType @x2
(Prims.list Prims.nat))
(HasType @x3
StackMachine.exp)
(HasType @x4
(Prims.list StackMachine.instr))
(HasType @x5
(Tm_refine_e1057fa64e865153dc61f3bdb63b055a @x3
@x0
@x4
@x1
@x2))
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(81,42-81,52)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(81,42-81,52)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(81,42-81,52)
(Prims.hasEq (FStar.Pervasives.Native.option StackMachine.stack))
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.compile_correct', 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_Prims.list__uu___haseq, equation_Prims.eqtype, equation_Prims.nat, equation_StackMachine.stack, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_Prims.int, typing_StackMachine.stack

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec compile_correct'


; <Start encoding let rec compile_correct'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.compile_correct_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.compile_correct_@tok () Term)

; </end encoding let rec compile_correct'>

(push) ;; push{2

; Starting query at StackMachine.fst(91,2-93,27)

;;;;;;;;;;;;;;;;a : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;l : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_2 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.app_nil_end (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.app_nil_end@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit). l == l @ [] ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: a) (b: Prims.list a).
;             l == b :: b ==>
;             b << l /\
;             (forall (any_result: Prims.list a).
;                 b == any_result ==>
;                 (forall (pure_result: Prims.unit). b == b @ [] ==> k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec app_nil_end`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StackMachine.fst(91,2-93,27); use=StackMachine.fst(91,2-93,27)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(91,2-93,27)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=StackMachine.fst(90,35-90,48); use=StackMachine.fst(91,2-93,27)
(or label_2

;; def=StackMachine.fst(90,35-90,48); use=StackMachine.fst(91,2-93,27)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_2
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1)))
)
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(91,2-93,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(91,2-93,27)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(91,2-93,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(91,2-93,27)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(91,2-93,27)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(91,2-93,27)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(91,2-93,27)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(91,2-93,27)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(91,2-93,27)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(91,2-93,27)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(91,2-93,27)
(and (implies 
;; def=StackMachine.fst(89,33-89,34); use=StackMachine.fst(91,8-91,9)
(and 
;; def=StackMachine.fst(89,33-89,34); use=StackMachine.fst(91,8-91,9)
(not 
;; def=StackMachine.fst(89,33-89,34); use=StackMachine.fst(91,8-91,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)


;; def=StackMachine.fst(89,33-89,34); use=StackMachine.fst(91,8-91,9)
(not 
;; def=StackMachine.fst(89,33-89,34); use=StackMachine.fst(91,8-91,9)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)
)

label_3)
(implies 
;; def=StackMachine.fst(89,33-92,6); use=StackMachine.fst(91,8-92,6)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1))


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(91,2-93,27)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(91,2-93,27)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(91,2-93,27)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(91,2-93,27)
(not 
;; def=StackMachine.fst(89,33-89,34); use=StackMachine.fst(91,8-91,9)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(91,2-93,27)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(91,2-93,27)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=StackMachine.fst(89,33-93,9); use=StackMachine.fst(91,8-93,9)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(91,2-93,27)
(and 
;; def=StackMachine.fst(91,2-93,27); use=StackMachine.fst(93,25-93,27)
(or label_4

;; def=StackMachine.fst(91,2-93,27); use=StackMachine.fst(93,25-93,27)
(Valid 
;; def=StackMachine.fst(91,2-93,27); use=StackMachine.fst(93,25-93,27)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_2)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(91,2-93,27)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=StackMachine.fst(89,33-93,9); use=StackMachine.fst(91,2-93,27)
(= @x3
@x4)
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(93,13-93,24)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=StackMachine.fst(90,35-90,48); use=StackMachine.fst(93,13-93,24)
(= @x3
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
@x3
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1)))
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(93,13-93,24)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(93,13-93,24)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.app_nil_end, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2, binder_x_fe28d8bcde588226b4e538b35321de05_1, disc_equation_Prims.Cons, disc_equation_Prims.Nil, fuel_guarded_inversion_Prims.list, lemma_FStar.List.Tot.Properties.append_l_nil, projection_inverse_BoxBool_proj_0, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec app_nil_end


; <Start encoding let rec app_nil_end>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.app_nil_end (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.app_nil_end@tok () Term)

; </end encoding let rec app_nil_end>

;;;;;;;;;;;;;;;;Lemma: StackMachine.app_nil_end
;;; Fact-ids: Name StackMachine.app_nil_end; Namespace StackMachine
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))

;; def=StackMachine.fst(90,35-90,48); use=StackMachine.fst(90,35-90,48)
(= @x1
(FStar.List.Tot.Base.op_At @x0
@x1
(Prims.Nil @x0)))
)
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
(Prims.Nil @x0)))
:qid lemma_StackMachine.app_nil_end))
:named lemma_StackMachine.app_nil_end))
(push) ;; push{2

; Starting query at StackMachine.fst(96,4-96,28)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(95,24-95,78); use=StackMachine.fst(96,4-96,28)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

; Encoding query formula : forall (e: StackMachine.exp).
;   (forall (_: Prims.squash Prims.l_True).
;       (*  - Could not prove post-condition
; *)
;       Prims.hasEq (FStar.Pervasives.Native.option StackMachine.stack)) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       (forall (pure_result: Prims.unit).
;           StackMachine.progDenote (StackMachine.compile e) [] =
;           FStar.Pervasives.Native.Some [StackMachine.expDenote e] ==>
;           p pure_result) ==>
;       (forall (pure_result: Prims.unit).
;           StackMachine.progDenote (StackMachine.compile e @ []) [] =
;           StackMachine.progDenote [] [StackMachine.expDenote e] ==>
;           p pure_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let compile_correct`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.exp)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(96,4-96,28)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(95,59-95,63)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(96,4-96,28)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StackMachine.fst(96,4-96,28)
(Prims.hasEq (FStar.Pervasives.Native.option StackMachine.stack))
)
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(96,4-96,28)
(forall ((@x2 Term))
 (! (implies (and (or label_2
(HasType @x2
Prims.unit))

;; def=StackMachine.fst(95,30-95,78); use=StackMachine.fst(96,4-96,28)
(or label_3

;; def=StackMachine.fst(95,30-95,78); use=StackMachine.fst(96,4-96,28)
(= (StackMachine.progDenote (StackMachine.compile @x0)
(Prims.Nil Prims.nat))
(FStar.Pervasives.Native.Some StackMachine.stack
(Prims.Cons Prims.nat
(StackMachine.expDenote @x0)
(Prims.Nil Prims.nat))))
)
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(96,4-96,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(96,4-96,28)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(96,4-96,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(96,4-96,28)
(ApplyTT @x1
@x2)
)
)
:qid @query.3))
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(96,4-96,28)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.unit)

;; def=StackMachine.fst(81,10-81,74); use=StackMachine.fst(96,4-96,20)
(= (StackMachine.progDenote (FStar.List.Tot.Base.op_At StackMachine.instr
(StackMachine.compile @x0)
(Prims.Nil StackMachine.instr))
(Prims.Nil Prims.nat))
(StackMachine.progDenote (Prims.Nil StackMachine.instr)
(Prims.Cons Prims.nat
(StackMachine.expDenote @x0)
(Prims.Nil Prims.nat))))
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(96,4-96,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(96,4-96,28)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.compile_correct, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StackMachine.progDenote.fuel_instrumented, @query, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_Prims.list__uu___haseq, constructor_distinct_Prims.Nil, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_Prims.eqtype, equation_Prims.nat, equation_StackMachine.prog, equation_StackMachine.stack, equation_with_fuel_StackMachine.progDenote.fuel_instrumented, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, kinding_StackMachine.instr@tok, lemma_FStar.List.Tot.Properties.append_l_nil, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_Prims.int, typing_StackMachine.compile, typing_StackMachine.expDenote, typing_StackMachine.stack

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let compile_correct


; <Start encoding let compile_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.compile_correct (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.compile_correct@tok () Term)

; </end encoding let compile_correct>


; encoding sigelt type StackMachine.typ


; <Start encoding type StackMachine.typ>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.typ () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.Nat () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.Nat
(declare-fun StackMachine.Nat@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.Bool () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.Bool
(declare-fun StackMachine.Bool@tok () Term)

; <start constructor StackMachine.typ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.typ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
329)
(= __@x0
StackMachine.typ)))

; </end constructor StackMachine.typ>


; <start constructor StackMachine.Nat>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.Nat ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
335)
(= __@x0
StackMachine.Nat)))

; </end constructor StackMachine.Nat>


; <start constructor StackMachine.Bool>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.Bool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
337)
(= __@x0
StackMachine.Bool)))

; </end constructor StackMachine.Bool>


; </end encoding type StackMachine.typ>


; encoding sigelt assume StackMachine.typ__uu___haseq


; <Start encoding assume StackMachine.typ__uu___haseq>


; </end encoding assume StackMachine.typ__uu___haseq>


; encoding sigelt val StackMachine.uu___is_Nat


; <Start encoding val StackMachine.uu___is_Nat>

(declare-fun StackMachine.uu___is_Nat (Term) Term)
;;;;;;;;;;;;;;;;projectee: typ -> Prims.bool
(declare-fun Tm_arrow_af692ae4fbbef16e649f5463ceb9056e () Term)
(declare-fun StackMachine.uu___is_Nat@tok () Term)

; </end encoding val StackMachine.uu___is_Nat>


; encoding sigelt let uu___is_Nat


; <Skipped let uu___is_Nat/>


; encoding sigelt val StackMachine.uu___is_Bool


; <Start encoding val StackMachine.uu___is_Bool>

(declare-fun StackMachine.uu___is_Bool (Term) Term)

(declare-fun StackMachine.uu___is_Bool@tok () Term)

; </end encoding val StackMachine.uu___is_Bool>


; encoding sigelt let uu___is_Bool


; <Skipped let uu___is_Bool/>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type StackMachine.tbinop


; <Start encoding type StackMachine.tbinop>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.tbinop (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StackMachine.tbinop@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TPlus () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TPlus
(declare-fun StackMachine.TPlus@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TTimes () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TTimes
(declare-fun StackMachine.TTimes@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TEq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TEq_t (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TEq
(declare-fun StackMachine.TEq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TLt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TLt
(declare-fun StackMachine.TLt@tok () Term)
;;;;;;;;;;;;;;;;t: typ -> tbinop t t Bool
(declare-fun Tm_arrow_86edd734389ede97203735e2fa46147d () Term)

; <start constructor StackMachine.tbinop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.tbinop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
371)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(StackMachine.tbinop @x0
@x1
@x2))
 
;;no pats
:qid is-StackMachine.tbinop))))

; </end constructor StackMachine.tbinop>


; <start constructor StackMachine.TPlus>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TPlus ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
378)
(= __@x0
StackMachine.TPlus)))

; </end constructor StackMachine.TPlus>


; <start constructor StackMachine.TTimes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TTimes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
383)
(= __@x0
StackMachine.TTimes)))

; </end constructor StackMachine.TTimes>


; <start constructor StackMachine.TEq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TEq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
388)
(= __@x0
(StackMachine.TEq (StackMachine.TEq_t __@x0)))))

; </end constructor StackMachine.TEq>


; <start constructor StackMachine.TLt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TLt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
StackMachine.TLt)))

; </end constructor StackMachine.TLt>


; </end encoding type StackMachine.tbinop>

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (HasType StackMachine.TTimes@tok
(StackMachine.tbinop StackMachine.Nat@tok
StackMachine.Nat@tok
StackMachine.Nat@tok))
:named typing_tok_StackMachine.TTimes@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (HasType StackMachine.TPlus@tok
(StackMachine.tbinop StackMachine.Nat@tok
StackMachine.Nat@tok
StackMachine.Nat@tok))
:named typing_tok_StackMachine.TPlus@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (HasType StackMachine.TLt@tok
(StackMachine.tbinop StackMachine.Nat@tok
StackMachine.Nat@tok
StackMachine.Bool@tok))
:named typing_tok_StackMachine.TLt@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (HasType StackMachine.Nat@tok
StackMachine.typ)
:named typing_tok_StackMachine.Nat@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (HasType StackMachine.Bool@tok
StackMachine.typ)
:named typing_tok_StackMachine.Bool@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinop@tok
@x0)
@x1)
@x2)
(StackMachine.tbinop @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT StackMachine.tbinop@tok
@x0)
@x1)
@x2))

:pattern ((StackMachine.tbinop @x0
@x1
@x2))
:qid token_correspondence_StackMachine.tbinop@tok))

:named token_correspondence_StackMachine.tbinop@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TEq @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4)))
:qid subterm_ordering_StackMachine.TEq))

:named subterm_ordering_StackMachine.TEq))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@x0 Term))
 (! (= (StackMachine.TEq_t (StackMachine.TEq @x0))
@x0)
 

:pattern ((StackMachine.TEq @x0))
:qid projection_inverse_StackMachine.TEq_t))

:named projection_inverse_StackMachine.TEq_t))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (is-Tm_arrow (PreType StackMachine.tbinop@tok))
:named pre_kinding_StackMachine.tbinop@tok))
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (HasType StackMachine.typ
Tm_type)
:named kinding_StackMachine.typ@tok))
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (and (IsTotFun StackMachine.tbinop@tok)

;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT StackMachine.tbinop@tok
@x0))
 

:pattern ((ApplyTT StackMachine.tbinop@tok
@x0))
:qid kinding_StackMachine.tbinop@tok))


;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT StackMachine.tbinop@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.tbinop@tok
@x0)
@x1))
:qid kinding_StackMachine.tbinop@tok.1))


;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ))
(HasType (StackMachine.tbinop @x0
@x1
@x2)
Tm_type))
 

:pattern ((StackMachine.tbinop @x0
@x1
@x2))
:qid kinding_StackMachine.tbinop@tok.2))
)
:named kinding_StackMachine.tbinop@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,5-100,8); use=StackMachine.fst(100,5-100,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StackMachine.typ)
(or (is-StackMachine.Nat @x1)
(is-StackMachine.Bool @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StackMachine.typ))
:qid fuel_guarded_inversion_StackMachine.typ))

:named fuel_guarded_inversion_StackMachine.typ))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tbinop @x2
@x3
@x4))
(or (and (is-StackMachine.TPlus @x1)
(= @x2
StackMachine.Nat@tok)
(= @x3
StackMachine.Nat@tok)
(= @x4
StackMachine.Nat@tok))
(and (is-StackMachine.TTimes @x1)
(= @x2
StackMachine.Nat@tok)
(= @x3
StackMachine.Nat@tok)
(= @x4
StackMachine.Nat@tok))
(and (is-StackMachine.TEq @x1)
(= @x2
(StackMachine.TEq_t @x1))
(= @x3
(StackMachine.TEq_t @x1))
(= @x4
StackMachine.Bool@tok))
(and (is-StackMachine.TLt @x1)
(= @x2
StackMachine.Nat@tok)
(= @x3
StackMachine.Nat@tok)
(= @x4
StackMachine.Bool@tok))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tbinop @x2
@x3
@x4)))
:qid fuel_guarded_inversion_StackMachine.tbinop))

:named fuel_guarded_inversion_StackMachine.tbinop))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= 372
(Term_constr_id StackMachine.tbinop@tok))
:named fresh_token_StackMachine.tbinop@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= StackMachine.TTimes@tok
StackMachine.TTimes)
:named equality_tok_StackMachine.TTimes@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= StackMachine.TPlus@tok
StackMachine.TPlus)
:named equality_tok_StackMachine.TPlus@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= StackMachine.TLt@tok
StackMachine.TLt)
:named equality_tok_StackMachine.TLt@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= StackMachine.Nat@tok
StackMachine.Nat)
:named equality_tok_StackMachine.Nat@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= StackMachine.Bool@tok
StackMachine.Bool)
:named equality_tok_StackMachine.Bool@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(104,2-104,8); use=StackMachine.fst(104,2-104,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (= StackMachine.Nat@tok
@x1)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x3))
(HasTypeFuel @u0
StackMachine.TTimes
(StackMachine.tbinop @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
StackMachine.TTimes
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_typing_intro_StackMachine.TTimes@tok))

:named data_typing_intro_StackMachine.TTimes@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(103,2-103,7); use=StackMachine.fst(103,2-103,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (= StackMachine.Nat@tok
@x1)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x3))
(HasTypeFuel @u0
StackMachine.TPlus
(StackMachine.tbinop @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
StackMachine.TPlus
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_typing_intro_StackMachine.TPlus@tok))

:named data_typing_intro_StackMachine.TPlus@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(106,2-106,5); use=StackMachine.fst(106,2-106,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (= StackMachine.Nat@tok
@x1)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Bool@tok
@x3))
(HasTypeFuel @u0
StackMachine.TLt
(StackMachine.tbinop @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
StackMachine.TLt
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_typing_intro_StackMachine.TLt@tok))

:named data_typing_intro_StackMachine.TLt@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.typ)
(= @x1
@x2)
(= @x1
@x3)
(= StackMachine.Bool@tok
@x4))
(HasTypeFuel @u0
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4)))
:qid data_typing_intro_StackMachine.TEq@tok))

:named data_typing_intro_StackMachine.TEq@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,21-100,24); use=StackMachine.fst(100,21-100,24)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StackMachine.Nat
StackMachine.typ)
 

:pattern ((HasTypeFuel @u0
StackMachine.Nat
StackMachine.typ))
:qid data_typing_intro_StackMachine.Nat@tok))

:named data_typing_intro_StackMachine.Nat@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,27-100,31); use=StackMachine.fst(100,27-100,31)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StackMachine.Bool
StackMachine.typ)
 

:pattern ((HasTypeFuel @u0
StackMachine.Bool
StackMachine.typ))
:qid data_typing_intro_StackMachine.Bool@tok))

:named data_typing_intro_StackMachine.Bool@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(104,2-104,8); use=StackMachine.fst(104,2-104,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
StackMachine.TTimes
(StackMachine.tbinop @x1
@x2
@x3))
(and (= StackMachine.Nat@tok
@x3)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
StackMachine.TTimes
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_elim_StackMachine.TTimes))

:named data_elim_StackMachine.TTimes))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(103,2-103,7); use=StackMachine.fst(103,2-103,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
StackMachine.TPlus
(StackMachine.tbinop @x1
@x2
@x3))
(and (= StackMachine.Nat@tok
@x3)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
StackMachine.TPlus
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_elim_StackMachine.TPlus))

:named data_elim_StackMachine.TPlus))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(106,2-106,5); use=StackMachine.fst(106,2-106,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
StackMachine.TLt
(StackMachine.tbinop @x1
@x2
@x3))
(and (= StackMachine.Bool@tok
@x3)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
StackMachine.TLt
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_elim_StackMachine.TLt))

:named data_elim_StackMachine.TLt))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4))
(and (= StackMachine.Bool@tok
@x4)
(= @x1
@x3)
(= @x1
@x2)
(HasTypeFuel @u0
@x1
StackMachine.typ)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4)))
:qid data_elim_StackMachine.TEq))

:named data_elim_StackMachine.TEq))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= 329
(Term_constr_id StackMachine.typ))
:named constructor_distinct_StackMachine.typ))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 371
(Term_constr_id (StackMachine.tbinop @x0
@x1
@x2)))
 

:pattern ((StackMachine.tbinop @x0
@x1
@x2))
:qid constructor_distinct_StackMachine.tbinop))

:named constructor_distinct_StackMachine.tbinop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= 383
(Term_constr_id StackMachine.TTimes))
:named constructor_distinct_StackMachine.TTimes))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= 378
(Term_constr_id StackMachine.TPlus))
:named constructor_distinct_StackMachine.TPlus))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= 396
(Term_constr_id StackMachine.TLt))
:named constructor_distinct_StackMachine.TLt))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@x0 Term))
 (! (= 388
(Term_constr_id (StackMachine.TEq @x0)))
 

:pattern ((StackMachine.TEq @x0))
:qid constructor_distinct_StackMachine.TEq))

:named constructor_distinct_StackMachine.TEq))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= 335
(Term_constr_id StackMachine.Nat))
:named constructor_distinct_StackMachine.Nat))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= 337
(Term_constr_id StackMachine.Bool))
:named constructor_distinct_StackMachine.Bool))
;;;;;;;;;;;;;;;;Assumption: StackMachine.typ__uu___haseq
;;; Fact-ids: Name StackMachine.typ__uu___haseq; Namespace StackMachine
(assert (! (Valid (Prims.hasEq StackMachine.typ))
:named assumption_StackMachine.typ__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,5-100,8); use=StackMachine.fst(100,5-100,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StackMachine.typ)
(= StackMachine.typ
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StackMachine.typ))
:qid StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf))

:named StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StackMachine.tbinop @x2
@x3
@x4))
(= (StackMachine.tbinop @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StackMachine.tbinop @x2
@x3
@x4)))
:qid StackMachine_pretyping_82296f4018d086bf2f117419255cd432))

:named StackMachine_pretyping_82296f4018d086bf2f117419255cd432))
(push) ;; push{4

; Starting query at StackMachine.fst(102,0-106,27)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (_: StackMachine.typ) (_: StackMachine.typ) (_: StackMachine.typ).
;   (forall (_: StackMachine.typ) (_: StackMachine.typ) (_: StackMachine.typ).
;       {:pattern Prims.hasEq (StackMachine.tbinop _ _ _)}
;       Prims.hasEq (StackMachine.tbinop _ _ _)) ==>
;   (forall (t: StackMachine.typ).
;       (*  - Failed to prove that the type
;     'StackMachine.tbinop'
;     supports decidable equality because of this argument.
;   - Add either the 'noeq' or 'unopteq' qualifier
; *)
;       Prims.hasEq StackMachine.typ)


; Context: While encoding a query
; While typechecking the top-level declaration `type StackMachine.tbinop`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)

;; def=StackMachine.fst(102,0-106,27); use=StackMachine.fst(102,0-106,27)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
StackMachine.typ)
(HasType @x4
StackMachine.typ)
(HasType @x5
StackMachine.typ))

;; def=StackMachine.fst(102,0-106,27); use=StackMachine.fst(102,0-106,27)
(Valid 
;; def=StackMachine.fst(102,0-106,27); use=StackMachine.fst(102,0-106,27)
(Prims.hasEq (StackMachine.tbinop @x3
@x4
@x5))
)
)
 

:pattern ((Prims.hasEq (StackMachine.tbinop @x3
@x4
@x5)))
:qid @query.1))
)

;; def=StackMachine.fst(102,0-106,27); use=StackMachine.fst(102,0-106,27)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=StackMachine.fst(102,0-106,27); use=StackMachine.fst(105,10-105,13)
(or label_1

;; def=StackMachine.fst(102,0-106,27); use=StackMachine.fst(102,0-106,27)
(Valid 
;; def=StackMachine.fst(102,0-106,27); use=StackMachine.fst(102,0-106,27)
(Prims.hasEq StackMachine.typ)
)
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tbinop, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_StackMachine.typ__uu___haseq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type StackMachine.tbinop


; <Start encoding type StackMachine.tbinop>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.tbinop (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StackMachine.tbinop@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TPlus () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TPlus
(declare-fun StackMachine.TPlus@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TTimes () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TTimes
(declare-fun StackMachine.TTimes@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TEq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TEq_t (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TEq
(declare-fun StackMachine.TEq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TLt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TLt
(declare-fun StackMachine.TLt@tok () Term)
;;;;;;;;;;;;;;;;t: typ -> tbinop t t Bool
(declare-fun Tm_arrow_86edd734389ede97203735e2fa46147d () Term)

; <start constructor StackMachine.tbinop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.tbinop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
400)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(StackMachine.tbinop @x0
@x1
@x2))
 
;;no pats
:qid is-StackMachine.tbinop))))

; </end constructor StackMachine.tbinop>


; <start constructor StackMachine.TPlus>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TPlus ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
407)
(= __@x0
StackMachine.TPlus)))

; </end constructor StackMachine.TPlus>


; <start constructor StackMachine.TTimes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TTimes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
412)
(= __@x0
StackMachine.TTimes)))

; </end constructor StackMachine.TTimes>


; <start constructor StackMachine.TEq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TEq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
417)
(= __@x0
(StackMachine.TEq (StackMachine.TEq_t __@x0)))))

; </end constructor StackMachine.TEq>


; <start constructor StackMachine.TLt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TLt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
425)
(= __@x0
StackMachine.TLt)))

; </end constructor StackMachine.TLt>


; </end encoding type StackMachine.tbinop>


; encoding sigelt assume StackMachine.tbinop__uu___haseq


; <Start encoding assume StackMachine.tbinop__uu___haseq>


; </end encoding assume StackMachine.tbinop__uu___haseq>


; encoding sigelt val StackMachine.uu___is_TPlus


; <Start encoding val StackMachine.uu___is_TPlus>

(declare-fun StackMachine.uu___is_TPlus (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: tbinop _ _ _ -> Prims.bool
(declare-fun Tm_arrow_ec045fc23801222f2b11a625efd4df20 () Term)
(declare-fun StackMachine.uu___is_TPlus@tok () Term)

; </end encoding val StackMachine.uu___is_TPlus>


; encoding sigelt let uu___is_TPlus


; <Skipped let uu___is_TPlus/>


; encoding sigelt val StackMachine.uu___is_TTimes


; <Start encoding val StackMachine.uu___is_TTimes>

(declare-fun StackMachine.uu___is_TTimes (Term Term Term Term) Term)

(declare-fun StackMachine.uu___is_TTimes@tok () Term)

; </end encoding val StackMachine.uu___is_TTimes>


; encoding sigelt let uu___is_TTimes


; <Skipped let uu___is_TTimes/>


; encoding sigelt val StackMachine.uu___is_TEq


; <Start encoding val StackMachine.uu___is_TEq>

(declare-fun StackMachine.uu___is_TEq (Term Term Term Term) Term)

(declare-fun StackMachine.uu___is_TEq@tok () Term)

; </end encoding val StackMachine.uu___is_TEq>


; encoding sigelt let uu___is_TEq


; <Skipped let uu___is_TEq/>


; encoding sigelt val StackMachine.__proj__TEq__item__t


; <Start encoding val StackMachine.__proj__TEq__item__t>

(declare-fun Tm_refine_013f03405ee56e2bee5ec40dee6f6602 (Term Term Term) Term)
(declare-fun StackMachine.__proj__TEq__item__t (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tbinop _ _ _ {TEq? _} -> typ
(declare-fun Tm_arrow_2a772c97429273a33b53657e2b3f290e () Term)
(declare-fun StackMachine.__proj__TEq__item__t@tok () Term)

; </end encoding val StackMachine.__proj__TEq__item__t>

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (HasType StackMachine.TTimes@tok
(StackMachine.tbinop StackMachine.Nat@tok
StackMachine.Nat@tok
StackMachine.Nat@tok))
:named typing_tok_StackMachine.TTimes@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (HasType StackMachine.TPlus@tok
(StackMachine.tbinop StackMachine.Nat@tok
StackMachine.Nat@tok
StackMachine.Nat@tok))
:named typing_tok_StackMachine.TPlus@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (HasType StackMachine.TLt@tok
(StackMachine.tbinop StackMachine.Nat@tok
StackMachine.Nat@tok
StackMachine.Bool@tok))
:named typing_tok_StackMachine.TLt@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (HasType StackMachine.Nat@tok
StackMachine.typ)
:named typing_tok_StackMachine.Nat@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (HasType StackMachine.Bool@tok
StackMachine.typ)
:named typing_tok_StackMachine.Bool@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TEq; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
(StackMachine.tbinop @x0
@x1
@x2)))
(HasType (StackMachine.uu___is_TEq @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TEq @x0
@x1
@x2
@x3))
:qid typing_StackMachine.uu___is_TEq))

:named typing_StackMachine.uu___is_TEq))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinop@tok
@x0)
@x1)
@x2)
(StackMachine.tbinop @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT StackMachine.tbinop@tok
@x0)
@x1)
@x2))

:pattern ((StackMachine.tbinop @x0
@x1
@x2))
:qid token_correspondence_StackMachine.tbinop@tok))

:named token_correspondence_StackMachine.tbinop@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TEq @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4)))
:qid subterm_ordering_StackMachine.TEq))

:named subterm_ordering_StackMachine.TEq))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TEq__item__t; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_013f03405ee56e2bee5ec40dee6f6602 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_013f03405ee56e2bee5ec40dee6f6602 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_013f03405ee56e2bee5ec40dee6f6602))

:named refinement_kinding_Tm_refine_013f03405ee56e2bee5ec40dee6f6602))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TEq__item__t; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_013f03405ee56e2bee5ec40dee6f6602 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(StackMachine.tbinop @x2
@x3
@x4))

;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(BoxBool_proj_0 (StackMachine.uu___is_TEq @x2
@x3
@x4
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_013f03405ee56e2bee5ec40dee6f6602 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_013f03405ee56e2bee5ec40dee6f6602))

:named refinement_interpretation_Tm_refine_013f03405ee56e2bee5ec40dee6f6602))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@x0 Term))
 (! (= (StackMachine.TEq_t (StackMachine.TEq @x0))
@x0)
 

:pattern ((StackMachine.TEq @x0))
:qid projection_inverse_StackMachine.TEq_t))

:named projection_inverse_StackMachine.TEq_t))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (is-Tm_arrow (PreType StackMachine.tbinop@tok))
:named pre_kinding_StackMachine.tbinop@tok))
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (HasType StackMachine.typ
Tm_type)
:named kinding_StackMachine.typ@tok))
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (and (IsTotFun StackMachine.tbinop@tok)

;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT StackMachine.tbinop@tok
@x0))
 

:pattern ((ApplyTT StackMachine.tbinop@tok
@x0))
:qid kinding_StackMachine.tbinop@tok))


;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT StackMachine.tbinop@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.tbinop@tok
@x0)
@x1))
:qid kinding_StackMachine.tbinop@tok.1))


;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ))
(HasType (StackMachine.tbinop @x0
@x1
@x2)
Tm_type))
 

:pattern ((StackMachine.tbinop @x0
@x1
@x2))
:qid kinding_StackMachine.tbinop@tok.2))
)
:named kinding_StackMachine.tbinop@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_013f03405ee56e2bee5ec40dee6f6602
;;; Fact-ids: Name StackMachine.__proj__TEq__item__t; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_013f03405ee56e2bee5ec40dee6f6602 @x0
@x1
@x2)))
(Valid (Prims.hasEq (StackMachine.tbinop @x0
@x1
@x2))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_013f03405ee56e2bee5ec40dee6f6602 @x0
@x1
@x2))))
:qid haseqTm_refine_013f03405ee56e2bee5ec40dee6f6602))

:named haseqTm_refine_013f03405ee56e2bee5ec40dee6f6602))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,5-100,8); use=StackMachine.fst(100,5-100,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StackMachine.typ)
(or (is-StackMachine.Nat @x1)
(is-StackMachine.Bool @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StackMachine.typ))
:qid fuel_guarded_inversion_StackMachine.typ))

:named fuel_guarded_inversion_StackMachine.typ))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tbinop @x2
@x3
@x4))
(or (and (is-StackMachine.TPlus @x1)
(= @x2
StackMachine.Nat@tok)
(= @x3
StackMachine.Nat@tok)
(= @x4
StackMachine.Nat@tok))
(and (is-StackMachine.TTimes @x1)
(= @x2
StackMachine.Nat@tok)
(= @x3
StackMachine.Nat@tok)
(= @x4
StackMachine.Nat@tok))
(and (is-StackMachine.TEq @x1)
(= @x2
(StackMachine.TEq_t @x1))
(= @x3
(StackMachine.TEq_t @x1))
(= @x4
StackMachine.Bool@tok))
(and (is-StackMachine.TLt @x1)
(= @x2
StackMachine.Nat@tok)
(= @x3
StackMachine.Nat@tok)
(= @x4
StackMachine.Bool@tok))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tbinop @x2
@x3
@x4)))
:qid fuel_guarded_inversion_StackMachine.tbinop))

:named fuel_guarded_inversion_StackMachine.tbinop))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= 401
(Term_constr_id StackMachine.tbinop@tok))
:named fresh_token_StackMachine.tbinop@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= StackMachine.TTimes@tok
StackMachine.TTimes)
:named equality_tok_StackMachine.TTimes@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= StackMachine.TPlus@tok
StackMachine.TPlus)
:named equality_tok_StackMachine.TPlus@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= StackMachine.TLt@tok
StackMachine.TLt)
:named equality_tok_StackMachine.TLt@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= StackMachine.Nat@tok
StackMachine.Nat)
:named equality_tok_StackMachine.Nat@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= StackMachine.Bool@tok
StackMachine.Bool)
:named equality_tok_StackMachine.Bool@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TEq; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.uu___is_TEq @x0
@x1
@x2
@x3)
(BoxBool (is-StackMachine.TEq @x3)))
 

:pattern ((StackMachine.uu___is_TEq @x0
@x1
@x2
@x3))
:qid disc_equation_StackMachine.TEq))

:named disc_equation_StackMachine.TEq))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(104,2-104,8); use=StackMachine.fst(104,2-104,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (= StackMachine.Nat@tok
@x1)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x3))
(HasTypeFuel @u0
StackMachine.TTimes
(StackMachine.tbinop @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
StackMachine.TTimes
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_typing_intro_StackMachine.TTimes@tok))

:named data_typing_intro_StackMachine.TTimes@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(103,2-103,7); use=StackMachine.fst(103,2-103,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (= StackMachine.Nat@tok
@x1)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x3))
(HasTypeFuel @u0
StackMachine.TPlus
(StackMachine.tbinop @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
StackMachine.TPlus
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_typing_intro_StackMachine.TPlus@tok))

:named data_typing_intro_StackMachine.TPlus@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(106,2-106,5); use=StackMachine.fst(106,2-106,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (= StackMachine.Nat@tok
@x1)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Bool@tok
@x3))
(HasTypeFuel @u0
StackMachine.TLt
(StackMachine.tbinop @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
StackMachine.TLt
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_typing_intro_StackMachine.TLt@tok))

:named data_typing_intro_StackMachine.TLt@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.typ)
(= @x1
@x2)
(= @x1
@x3)
(= StackMachine.Bool@tok
@x4))
(HasTypeFuel @u0
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4)))
:qid data_typing_intro_StackMachine.TEq@tok))

:named data_typing_intro_StackMachine.TEq@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,21-100,24); use=StackMachine.fst(100,21-100,24)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StackMachine.Nat
StackMachine.typ)
 

:pattern ((HasTypeFuel @u0
StackMachine.Nat
StackMachine.typ))
:qid data_typing_intro_StackMachine.Nat@tok))

:named data_typing_intro_StackMachine.Nat@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,27-100,31); use=StackMachine.fst(100,27-100,31)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StackMachine.Bool
StackMachine.typ)
 

:pattern ((HasTypeFuel @u0
StackMachine.Bool
StackMachine.typ))
:qid data_typing_intro_StackMachine.Bool@tok))

:named data_typing_intro_StackMachine.Bool@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(104,2-104,8); use=StackMachine.fst(104,2-104,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
StackMachine.TTimes
(StackMachine.tbinop @x1
@x2
@x3))
(and (= StackMachine.Nat@tok
@x3)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
StackMachine.TTimes
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_elim_StackMachine.TTimes))

:named data_elim_StackMachine.TTimes))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(103,2-103,7); use=StackMachine.fst(103,2-103,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
StackMachine.TPlus
(StackMachine.tbinop @x1
@x2
@x3))
(and (= StackMachine.Nat@tok
@x3)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
StackMachine.TPlus
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_elim_StackMachine.TPlus))

:named data_elim_StackMachine.TPlus))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(106,2-106,5); use=StackMachine.fst(106,2-106,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
StackMachine.TLt
(StackMachine.tbinop @x1
@x2
@x3))
(and (= StackMachine.Bool@tok
@x3)
(= StackMachine.Nat@tok
@x2)
(= StackMachine.Nat@tok
@x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
StackMachine.TLt
(StackMachine.tbinop @x1
@x2
@x3)))
:qid data_elim_StackMachine.TLt))

:named data_elim_StackMachine.TLt))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4))
(and (= StackMachine.Bool@tok
@x4)
(= @x1
@x3)
(= @x1
@x2)
(HasTypeFuel @u0
@x1
StackMachine.typ)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TEq @x1)
(StackMachine.tbinop @x2
@x3
@x4)))
:qid data_elim_StackMachine.TEq))

:named data_elim_StackMachine.TEq))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= 329
(Term_constr_id StackMachine.typ))
:named constructor_distinct_StackMachine.typ))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 400
(Term_constr_id (StackMachine.tbinop @x0
@x1
@x2)))
 

:pattern ((StackMachine.tbinop @x0
@x1
@x2))
:qid constructor_distinct_StackMachine.tbinop))

:named constructor_distinct_StackMachine.tbinop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= 412
(Term_constr_id StackMachine.TTimes))
:named constructor_distinct_StackMachine.TTimes))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= 407
(Term_constr_id StackMachine.TPlus))
:named constructor_distinct_StackMachine.TPlus))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! (= 425
(Term_constr_id StackMachine.TLt))
:named constructor_distinct_StackMachine.TLt))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,2-105,5)
(forall ((@x0 Term))
 (! (= 417
(Term_constr_id (StackMachine.TEq @x0)))
 

:pattern ((StackMachine.TEq @x0))
:qid constructor_distinct_StackMachine.TEq))

:named constructor_distinct_StackMachine.TEq))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= 335
(Term_constr_id StackMachine.Nat))
:named constructor_distinct_StackMachine.Nat))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! (= 337
(Term_constr_id StackMachine.Bool))
:named constructor_distinct_StackMachine.Bool))
;;;;;;;;;;;;;;;;Assumption: StackMachine.typ__uu___haseq
;;; Fact-ids: Name StackMachine.typ__uu___haseq; Namespace StackMachine
(assert (! (Valid (Prims.hasEq StackMachine.typ))
:named assumption_StackMachine.typ__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: StackMachine.tbinop__uu___haseq
;;; Fact-ids: Name StackMachine.tbinop__uu___haseq; Namespace StackMachine
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ))
(Valid (Prims.hasEq (StackMachine.tbinop @x0
@x1
@x2))))
 

:pattern ((Prims.hasEq (StackMachine.tbinop @x0
@x1
@x2)))
:qid assumption_StackMachine.tbinop__uu___haseq))
:named assumption_StackMachine.tbinop__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.typ; Namespace StackMachine; Name StackMachine.Nat; Namespace StackMachine; Name StackMachine.Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,5-100,8); use=StackMachine.fst(100,5-100,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StackMachine.typ)
(= StackMachine.typ
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StackMachine.typ))
:qid StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf))

:named StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.tbinop; Namespace StackMachine; Name StackMachine.TPlus; Namespace StackMachine; Name StackMachine.TTimes; Namespace StackMachine; Name StackMachine.TEq; Namespace StackMachine; Name StackMachine.TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,5-102,11); use=StackMachine.fst(102,5-102,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StackMachine.tbinop @x2
@x3
@x4))
(= (StackMachine.tbinop @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StackMachine.tbinop @x2
@x3
@x4)))
:qid StackMachine_pretyping_82296f4018d086bf2f117419255cd432))

:named StackMachine_pretyping_82296f4018d086bf2f117419255cd432))
(push) ;; push{2

; Starting query at StackMachine.fst(105,8-105,9)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.typ)
;   (_: StackMachine.typ)
;   (_: StackMachine.typ)
;   (projectee: _: StackMachine.tbinop _ _ _ {TEq? _}).
;   (*  - Could not prove post-condition
; *) ~(TEq? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TEq__item__t`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
(Tm_refine_013f03405ee56e2bee5ec40dee6f6602 @x0
@x1
@x2))

;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,8-105,9)
(not 
;; def=StackMachine.fst(105,2-105,5); use=StackMachine.fst(105,8-105,9)
(BoxBool_proj_0 (StackMachine.uu___is_TEq @x0
@x1
@x2
@x3))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TEq__item__t, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_013f03405ee56e2bee5ec40dee6f6602

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TEq__item__t


; <Skipped let __proj__TEq__item__t/>


; encoding sigelt val StackMachine.uu___is_TLt


; <Start encoding val StackMachine.uu___is_TLt>

(declare-fun StackMachine.uu___is_TLt (Term Term Term Term) Term)

(declare-fun StackMachine.uu___is_TLt@tok () Term)

; </end encoding val StackMachine.uu___is_TLt>


; encoding sigelt let uu___is_TLt


; <Skipped let uu___is_TLt/>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type StackMachine.texp


; <Start encoding type StackMachine.texp>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.texp (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StackMachine.texp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TNConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TNConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TNConst
(declare-fun StackMachine.TNConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TBConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TBConst
(declare-fun StackMachine.TBConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TBinop (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop_t1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop_t2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TBinop
(declare-fun StackMachine.TBinop@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> texp Nat
(declare-fun Tm_arrow_1bce1c0bb6ca4f83e5543b67b0e80263 () Term)
;;;;;;;;;;;;;;;;_0: Prims.bool -> texp Bool
(declare-fun Tm_arrow_8035971eb206ea143a972486aaadbe48 () Term)
;;;;;;;;;;;;;;;;_3: tbinop t1 t2 t -> _4: texp t1 -> _5: texp t2 -> texp t
(declare-fun Tm_arrow_aa51d7cd05e827da733fac95005aba39 () Term)

; <start constructor StackMachine.texp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.texp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
466)
(exists ((@x0 Term))
 (! (= __@x0
(StackMachine.texp @x0))
 
;;no pats
:qid is-StackMachine.texp))))

; </end constructor StackMachine.texp>


; <start constructor StackMachine.TNConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TNConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
473)
(= __@x0
(StackMachine.TNConst (StackMachine.TNConst__0 __@x0)))))

; </end constructor StackMachine.TNConst>


; <start constructor StackMachine.TBConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TBConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
479)
(= __@x0
(StackMachine.TBConst (StackMachine.TBConst__0 __@x0)))))

; </end constructor StackMachine.TBConst>


; <start constructor StackMachine.TBinop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TBinop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
485)
(= __@x0
(StackMachine.TBinop (StackMachine.TBinop_t1 __@x0)
(StackMachine.TBinop_t2 __@x0)
(StackMachine.TBinop_t __@x0)
(StackMachine.TBinop__3 __@x0)
(StackMachine.TBinop__4 __@x0)
(StackMachine.TBinop__5 __@x0)))))

; </end constructor StackMachine.TBinop>


; </end encoding type StackMachine.texp>

;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@x0 Term))
 (! (= (ApplyTT StackMachine.texp@tok
@x0)
(StackMachine.texp @x0))
 

:pattern ((ApplyTT StackMachine.texp@tok
@x0))

:pattern ((StackMachine.texp @x0))
:qid token_correspondence_StackMachine.texp@tok))

:named token_correspondence_StackMachine.texp@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TNConst @x1)
(StackMachine.texp @x2))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TNConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TNConst @x1)
(StackMachine.texp @x2)))
:qid subterm_ordering_StackMachine.TNConst))

:named subterm_ordering_StackMachine.TNConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x6
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7)))
:qid subterm_ordering_StackMachine.TBinop))

:named subterm_ordering_StackMachine.TBinop))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TBConst @x1)
(StackMachine.texp @x2))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TBConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TBConst @x1)
(StackMachine.texp @x2)))
:qid subterm_ordering_StackMachine.TBConst))

:named subterm_ordering_StackMachine.TBConst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@x0 Term))
 (! (= (StackMachine.TNConst__0 (StackMachine.TNConst @x0))
@x0)
 

:pattern ((StackMachine.TNConst @x0))
:qid projection_inverse_StackMachine.TNConst__0))

:named projection_inverse_StackMachine.TNConst__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop_t2 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop_t2))

:named projection_inverse_StackMachine.TBinop_t2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop_t1 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop_t1))

:named projection_inverse_StackMachine.TBinop_t1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop_t (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop_t))

:named projection_inverse_StackMachine.TBinop_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop__5 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop__5))

:named projection_inverse_StackMachine.TBinop__5))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop__4 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop__4))

:named projection_inverse_StackMachine.TBinop__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop__3 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop__3))

:named projection_inverse_StackMachine.TBinop__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@x0 Term))
 (! (= (StackMachine.TBConst__0 (StackMachine.TBConst @x0))
@x0)
 

:pattern ((StackMachine.TBConst @x0))
:qid projection_inverse_StackMachine.TBConst__0))

:named projection_inverse_StackMachine.TBConst__0))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! (is-Tm_arrow (PreType StackMachine.texp@tok))
:named pre_kinding_StackMachine.texp@tok))
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! (and (IsTotFun StackMachine.texp@tok)

;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.typ)
(HasType (StackMachine.texp @x0)
Tm_type))
 

:pattern ((StackMachine.texp @x0))
:qid kinding_StackMachine.texp@tok))
)
:named kinding_StackMachine.texp@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StackMachine.texp @x2))
(or (and (is-StackMachine.TNConst @x1)
(= @x2
StackMachine.Nat@tok))
(and (is-StackMachine.TBConst @x1)
(= @x2
StackMachine.Bool@tok))
(and (is-StackMachine.TBinop @x1)
(= @x2
(StackMachine.TBinop_t @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StackMachine.texp @x2)))
:qid fuel_guarded_inversion_StackMachine.texp))

:named fuel_guarded_inversion_StackMachine.texp))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! (= 467
(Term_constr_id StackMachine.texp@tok))
:named fresh_token_StackMachine.texp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.nat)
(= StackMachine.Nat@tok
@x2))
(HasTypeFuel @u0
(StackMachine.TNConst @x1)
(StackMachine.texp @x2)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TNConst @x1)
(StackMachine.texp @x2)))
:qid data_typing_intro_StackMachine.TNConst@tok))

:named data_typing_intro_StackMachine.TNConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.typ)
(HasTypeFuel @u0
@x2
StackMachine.typ)
(HasTypeFuel @u0
@x3
StackMachine.typ)
(HasTypeFuel @u0
@x4
(StackMachine.tbinop @x1
@x2
@x3))
(HasTypeFuel @u0
@x5
(StackMachine.texp @x1))
(HasTypeFuel @u0
@x6
(StackMachine.texp @x2))
(= @x3
@x7))
(HasTypeFuel @u0
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7)))
:qid data_typing_intro_StackMachine.TBinop@tok))

:named data_typing_intro_StackMachine.TBinop@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.bool)
(= StackMachine.Bool@tok
@x2))
(HasTypeFuel @u0
(StackMachine.TBConst @x1)
(StackMachine.texp @x2)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TBConst @x1)
(StackMachine.texp @x2)))
:qid data_typing_intro_StackMachine.TBConst@tok))

:named data_typing_intro_StackMachine.TBConst@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TNConst @x1)
(StackMachine.texp @x2))
(and (= StackMachine.Nat@tok
@x2)
(HasTypeFuel @u0
@x1
Prims.nat)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TNConst @x1)
(StackMachine.texp @x2)))
:qid data_elim_StackMachine.TNConst))

:named data_elim_StackMachine.TNConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7))
(and (= @x3
@x7)
(HasTypeFuel @u0
@x1
StackMachine.typ)
(HasTypeFuel @u0
@x2
StackMachine.typ)
(HasTypeFuel @u0
@x3
StackMachine.typ)
(HasTypeFuel @u0
@x4
(StackMachine.tbinop @x1
@x2
@x3))
(HasTypeFuel @u0
@x5
(StackMachine.texp @x1))
(HasTypeFuel @u0
@x6
(StackMachine.texp @x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7)))
:qid data_elim_StackMachine.TBinop))

:named data_elim_StackMachine.TBinop))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TBConst @x1)
(StackMachine.texp @x2))
(and (= StackMachine.Bool@tok
@x2)
(HasTypeFuel @u0
@x1
Prims.bool)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TBConst @x1)
(StackMachine.texp @x2)))
:qid data_elim_StackMachine.TBConst))

:named data_elim_StackMachine.TBConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@x0 Term))
 (! (= 466
(Term_constr_id (StackMachine.texp @x0)))
 

:pattern ((StackMachine.texp @x0))
:qid constructor_distinct_StackMachine.texp))

:named constructor_distinct_StackMachine.texp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@x0 Term))
 (! (= 473
(Term_constr_id (StackMachine.TNConst @x0)))
 

:pattern ((StackMachine.TNConst @x0))
:qid constructor_distinct_StackMachine.TNConst))

:named constructor_distinct_StackMachine.TNConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 485
(Term_constr_id (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_StackMachine.TBinop))

:named constructor_distinct_StackMachine.TBinop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@x0 Term))
 (! (= 479
(Term_constr_id (StackMachine.TBConst @x0)))
 

:pattern ((StackMachine.TBConst @x0))
:qid constructor_distinct_StackMachine.TBConst))

:named constructor_distinct_StackMachine.TBConst))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StackMachine.texp @x2))
(= (StackMachine.texp @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StackMachine.texp @x2)))
:qid StackMachine_pretyping_ca4b69fffc5067d1deba31154325e6d3))

:named StackMachine_pretyping_ca4b69fffc5067d1deba31154325e6d3))
(push) ;; push{4

; Starting query at StackMachine.fst(108,0-111,88)

(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (_: StackMachine.typ).
;   (forall (_: StackMachine.typ). {:pattern Prims.hasEq (StackMachine.texp _)}
;       Prims.hasEq (StackMachine.texp _)) ==>
;   (forall (_0: Prims.nat).
;       (*  - Failed to prove that the type
;     'StackMachine.texp'
;     supports decidable equality because of this argument.
;   - Add either the 'noeq' or 'unopteq' qualifier
; *)
;       Prims.hasEq Prims.nat) /\
;   (forall (t1: StackMachine.typ)
;       (t2: StackMachine.typ)
;       (t: StackMachine.typ)
;       (_3: StackMachine.tbinop t1 t2 t)
;       (_4: StackMachine.texp t1)
;       (_5: StackMachine.texp t2).
;       Prims.hasEq StackMachine.typ /\ Prims.hasEq StackMachine.typ /\ Prims.hasEq StackMachine.typ /\
;       Prims.hasEq (StackMachine.tbinop t1 t2 t) /\ Prims.hasEq (StackMachine.texp t1) /\
;       Prims.hasEq (StackMachine.texp t2))


; Context: While encoding a query
; While typechecking the top-level declaration `type StackMachine.texp`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.typ)

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Valid 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Prims.hasEq (StackMachine.texp @x1))
)
)
 

:pattern ((Prims.hasEq (StackMachine.texp @x1)))
:qid @query.1))
)

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(and 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(109,12-109,15)
(or label_1

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Valid 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Prims.hasEq Prims.nat)
)
)
)
 
;;no pats
:qid @query.2))


;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
StackMachine.typ)
(HasType @x4
(StackMachine.tbinop @x1
@x2
@x3))
(HasType @x5
(StackMachine.texp @x1))
(HasType @x6
(StackMachine.texp @x2)))

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(and 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(111,15-111,18)
(or label_2

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Valid 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Prims.hasEq StackMachine.typ)
)
)


;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(111,26-111,29)
(or label_3

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Valid 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Prims.hasEq StackMachine.typ)
)
)


;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(111,36-111,39)
(or label_4

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Valid 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Prims.hasEq StackMachine.typ)
)
)


;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(111,42-111,56)
(or label_5

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Valid 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Prims.hasEq (StackMachine.tbinop @x1
@x2
@x3))
)
)


;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(111,60-111,67)
(or label_6

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Valid 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Prims.hasEq (StackMachine.texp @x1))
)
)


;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(111,71-111,78)
(or label_7

;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Valid 
;; def=StackMachine.fst(108,0-111,88); use=StackMachine.fst(108,0-111,88)
(Prims.hasEq (StackMachine.texp @x2))
)
)
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.texp, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_StackMachine.tbinop__uu___haseq, assumption_StackMachine.typ__uu___haseq, equation_Prims.eqtype, equation_Prims.nat, fuel_guarded_inversion_StackMachine.tbinop, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type StackMachine.texp


; <Start encoding type StackMachine.texp>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.texp (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StackMachine.texp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TNConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TNConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TNConst
(declare-fun StackMachine.TNConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TBConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TBConst
(declare-fun StackMachine.TBConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TBinop (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop_t1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop_t2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TBinop__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TBinop
(declare-fun StackMachine.TBinop@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> texp Nat
(declare-fun Tm_arrow_1bce1c0bb6ca4f83e5543b67b0e80263 () Term)
;;;;;;;;;;;;;;;;_0: Prims.bool -> texp Bool
(declare-fun Tm_arrow_8035971eb206ea143a972486aaadbe48 () Term)
;;;;;;;;;;;;;;;;_3: tbinop t1 t2 t -> _4: texp t1 -> _5: texp t2 -> texp t
(declare-fun Tm_arrow_aa51d7cd05e827da733fac95005aba39 () Term)

; <start constructor StackMachine.texp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.texp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
490)
(exists ((@x0 Term))
 (! (= __@x0
(StackMachine.texp @x0))
 
;;no pats
:qid is-StackMachine.texp))))

; </end constructor StackMachine.texp>


; <start constructor StackMachine.TNConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TNConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
497)
(= __@x0
(StackMachine.TNConst (StackMachine.TNConst__0 __@x0)))))

; </end constructor StackMachine.TNConst>


; <start constructor StackMachine.TBConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TBConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
503)
(= __@x0
(StackMachine.TBConst (StackMachine.TBConst__0 __@x0)))))

; </end constructor StackMachine.TBConst>


; <start constructor StackMachine.TBinop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TBinop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
509)
(= __@x0
(StackMachine.TBinop (StackMachine.TBinop_t1 __@x0)
(StackMachine.TBinop_t2 __@x0)
(StackMachine.TBinop_t __@x0)
(StackMachine.TBinop__3 __@x0)
(StackMachine.TBinop__4 __@x0)
(StackMachine.TBinop__5 __@x0)))))

; </end constructor StackMachine.TBinop>


; </end encoding type StackMachine.texp>


; encoding sigelt assume StackMachine.texp__uu___haseq


; <Start encoding assume StackMachine.texp__uu___haseq>


; </end encoding assume StackMachine.texp__uu___haseq>


; encoding sigelt val StackMachine.uu___is_TNConst


; <Start encoding val StackMachine.uu___is_TNConst>

(declare-fun StackMachine.uu___is_TNConst (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: texp _ -> Prims.bool
(declare-fun Tm_arrow_852cf343425b63ff216d4a9960758b8e () Term)
(declare-fun StackMachine.uu___is_TNConst@tok () Term)

; </end encoding val StackMachine.uu___is_TNConst>


; encoding sigelt let uu___is_TNConst


; <Skipped let uu___is_TNConst/>


; encoding sigelt val StackMachine.__proj__TNConst__item___0


; <Start encoding val StackMachine.__proj__TNConst__item___0>

(declare-fun Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5 (Term) Term)
(declare-fun StackMachine.__proj__TNConst__item___0 (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: texp _ {TNConst? _} -> Prims.nat
(declare-fun Tm_arrow_bf52e985024182db18402e09bc17a00e () Term)
(declare-fun StackMachine.__proj__TNConst__item___0@tok () Term)

; </end encoding val StackMachine.__proj__TNConst__item___0>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TNConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(StackMachine.texp @x0)))
(HasType (StackMachine.uu___is_TNConst @x0
@x1)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TNConst @x0
@x1))
:qid typing_StackMachine.uu___is_TNConst))

:named typing_StackMachine.uu___is_TNConst))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@x0 Term))
 (! (= (ApplyTT StackMachine.texp@tok
@x0)
(StackMachine.texp @x0))
 

:pattern ((ApplyTT StackMachine.texp@tok
@x0))

:pattern ((StackMachine.texp @x0))
:qid token_correspondence_StackMachine.texp@tok))

:named token_correspondence_StackMachine.texp@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TNConst @x1)
(StackMachine.texp @x2))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TNConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TNConst @x1)
(StackMachine.texp @x2)))
:qid subterm_ordering_StackMachine.TNConst))

:named subterm_ordering_StackMachine.TNConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x6
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7)))
:qid subterm_ordering_StackMachine.TBinop))

:named subterm_ordering_StackMachine.TBinop))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TBConst @x1)
(StackMachine.texp @x2))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TBConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TBConst @x1)
(StackMachine.texp @x2)))
:qid subterm_ordering_StackMachine.TBConst))

:named subterm_ordering_StackMachine.TBConst))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TNConst__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5))

:named refinement_kinding_Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TNConst__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5 @x2))
(and (HasTypeFuel @u0
@x1
(StackMachine.texp @x2))

;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNConst @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5 @x2)))
:qid refinement_interpretation_Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5))

:named refinement_interpretation_Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@x0 Term))
 (! (= (StackMachine.TNConst__0 (StackMachine.TNConst @x0))
@x0)
 

:pattern ((StackMachine.TNConst @x0))
:qid projection_inverse_StackMachine.TNConst__0))

:named projection_inverse_StackMachine.TNConst__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop_t2 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop_t2))

:named projection_inverse_StackMachine.TBinop_t2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop_t1 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop_t1))

:named projection_inverse_StackMachine.TBinop_t1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop_t (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop_t))

:named projection_inverse_StackMachine.TBinop_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop__5 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop__5))

:named projection_inverse_StackMachine.TBinop__5))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop__4 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop__4))

:named projection_inverse_StackMachine.TBinop__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.TBinop__3 (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_StackMachine.TBinop__3))

:named projection_inverse_StackMachine.TBinop__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@x0 Term))
 (! (= (StackMachine.TBConst__0 (StackMachine.TBConst @x0))
@x0)
 

:pattern ((StackMachine.TBConst @x0))
:qid projection_inverse_StackMachine.TBConst__0))

:named projection_inverse_StackMachine.TBConst__0))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! (is-Tm_arrow (PreType StackMachine.texp@tok))
:named pre_kinding_StackMachine.texp@tok))
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! (and (IsTotFun StackMachine.texp@tok)

;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.typ)
(HasType (StackMachine.texp @x0)
Tm_type))
 

:pattern ((StackMachine.texp @x0))
:qid kinding_StackMachine.texp@tok))
)
:named kinding_StackMachine.texp@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5
;;; Fact-ids: Name StackMachine.__proj__TNConst__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5 @x0)))
(Valid (Prims.hasEq (StackMachine.texp @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5 @x0))))
:qid haseqTm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5))

:named haseqTm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StackMachine.texp @x2))
(or (and (is-StackMachine.TNConst @x1)
(= @x2
StackMachine.Nat@tok))
(and (is-StackMachine.TBConst @x1)
(= @x2
StackMachine.Bool@tok))
(and (is-StackMachine.TBinop @x1)
(= @x2
(StackMachine.TBinop_t @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StackMachine.texp @x2)))
:qid fuel_guarded_inversion_StackMachine.texp))

:named fuel_guarded_inversion_StackMachine.texp))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! (= 491
(Term_constr_id StackMachine.texp@tok))
:named fresh_token_StackMachine.texp@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TNConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.uu___is_TNConst @x0
@x1)
(BoxBool (is-StackMachine.TNConst @x1)))
 

:pattern ((StackMachine.uu___is_TNConst @x0
@x1))
:qid disc_equation_StackMachine.TNConst))

:named disc_equation_StackMachine.TNConst))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.nat)
(= StackMachine.Nat@tok
@x2))
(HasTypeFuel @u0
(StackMachine.TNConst @x1)
(StackMachine.texp @x2)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TNConst @x1)
(StackMachine.texp @x2)))
:qid data_typing_intro_StackMachine.TNConst@tok))

:named data_typing_intro_StackMachine.TNConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.typ)
(HasTypeFuel @u0
@x2
StackMachine.typ)
(HasTypeFuel @u0
@x3
StackMachine.typ)
(HasTypeFuel @u0
@x4
(StackMachine.tbinop @x1
@x2
@x3))
(HasTypeFuel @u0
@x5
(StackMachine.texp @x1))
(HasTypeFuel @u0
@x6
(StackMachine.texp @x2))
(= @x3
@x7))
(HasTypeFuel @u0
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7)))
:qid data_typing_intro_StackMachine.TBinop@tok))

:named data_typing_intro_StackMachine.TBinop@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.bool)
(= StackMachine.Bool@tok
@x2))
(HasTypeFuel @u0
(StackMachine.TBConst @x1)
(StackMachine.texp @x2)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TBConst @x1)
(StackMachine.texp @x2)))
:qid data_typing_intro_StackMachine.TBConst@tok))

:named data_typing_intro_StackMachine.TBConst@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TNConst @x1)
(StackMachine.texp @x2))
(and (= StackMachine.Nat@tok
@x2)
(HasTypeFuel @u0
@x1
Prims.nat)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TNConst @x1)
(StackMachine.texp @x2)))
:qid data_elim_StackMachine.TNConst))

:named data_elim_StackMachine.TNConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7))
(and (= @x3
@x7)
(HasTypeFuel @u0
@x1
StackMachine.typ)
(HasTypeFuel @u0
@x2
StackMachine.typ)
(HasTypeFuel @u0
@x3
StackMachine.typ)
(HasTypeFuel @u0
@x4
(StackMachine.tbinop @x1
@x2
@x3))
(HasTypeFuel @u0
@x5
(StackMachine.texp @x1))
(HasTypeFuel @u0
@x6
(StackMachine.texp @x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6)
(StackMachine.texp @x7)))
:qid data_elim_StackMachine.TBinop))

:named data_elim_StackMachine.TBinop))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TBConst @x1)
(StackMachine.texp @x2))
(and (= StackMachine.Bool@tok
@x2)
(HasTypeFuel @u0
@x1
Prims.bool)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TBConst @x1)
(StackMachine.texp @x2)))
:qid data_elim_StackMachine.TBConst))

:named data_elim_StackMachine.TBConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@x0 Term))
 (! (= 490
(Term_constr_id (StackMachine.texp @x0)))
 

:pattern ((StackMachine.texp @x0))
:qid constructor_distinct_StackMachine.texp))

:named constructor_distinct_StackMachine.texp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(forall ((@x0 Term))
 (! (= 497
(Term_constr_id (StackMachine.TNConst @x0)))
 

:pattern ((StackMachine.TNConst @x0))
:qid constructor_distinct_StackMachine.TNConst))

:named constructor_distinct_StackMachine.TNConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 509
(Term_constr_id (StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((StackMachine.TBinop @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_StackMachine.TBinop))

:named constructor_distinct_StackMachine.TBinop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@x0 Term))
 (! (= 503
(Term_constr_id (StackMachine.TBConst @x0)))
 

:pattern ((StackMachine.TBConst @x0))
:qid constructor_distinct_StackMachine.TBConst))

:named constructor_distinct_StackMachine.TBConst))
;;;;;;;;;;;;;;;;Assumption: StackMachine.texp__uu___haseq
;;; Fact-ids: Name StackMachine.texp__uu___haseq; Namespace StackMachine
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.typ)
(Valid (Prims.hasEq (StackMachine.texp @x0))))
 

:pattern ((Prims.hasEq (StackMachine.texp @x0)))
:qid assumption_StackMachine.texp__uu___haseq))
:named assumption_StackMachine.texp__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.texp; Namespace StackMachine; Name StackMachine.TNConst; Namespace StackMachine; Name StackMachine.TBConst; Namespace StackMachine; Name StackMachine.TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(108,5-108,9); use=StackMachine.fst(108,5-108,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StackMachine.texp @x2))
(= (StackMachine.texp @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StackMachine.texp @x2)))
:qid StackMachine_pretyping_ca4b69fffc5067d1deba31154325e6d3))

:named StackMachine_pretyping_ca4b69fffc5067d1deba31154325e6d3))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.typ) (projectee: _: StackMachine.texp _ {TNConst? _}).
;   (*  - Could not prove post-condition
; *) ~(TNConst? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TNConst__item___0`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5 @x0))

;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(not 
;; def=StackMachine.fst(109,2-109,9); use=StackMachine.fst(109,2-109,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNConst @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TNConst__item___0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_6dd4891ce41bb7d9b26ab7b05113bdd5

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TNConst__item___0


; <Skipped let __proj__TNConst__item___0/>


; encoding sigelt val StackMachine.uu___is_TBConst


; <Start encoding val StackMachine.uu___is_TBConst>

(declare-fun StackMachine.uu___is_TBConst (Term Term) Term)

(declare-fun StackMachine.uu___is_TBConst@tok () Term)

; </end encoding val StackMachine.uu___is_TBConst>


; encoding sigelt let uu___is_TBConst


; <Skipped let uu___is_TBConst/>


; encoding sigelt val StackMachine.__proj__TBConst__item___0


; <Start encoding val StackMachine.__proj__TBConst__item___0>

(declare-fun Tm_refine_9da0b8f720646900d62e529141346f6a (Term) Term)
(declare-fun StackMachine.__proj__TBConst__item___0 (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: texp _ {TBConst? _} -> Prims.bool
(declare-fun Tm_arrow_f411202fd21272ce4740fc807637a4da () Term)
(declare-fun StackMachine.__proj__TBConst__item___0@tok () Term)

; </end encoding val StackMachine.__proj__TBConst__item___0>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TBConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(StackMachine.texp @x0)))
(HasType (StackMachine.uu___is_TBConst @x0
@x1)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TBConst @x0
@x1))
:qid typing_StackMachine.uu___is_TBConst))

:named typing_StackMachine.uu___is_TBConst))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TBConst__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_9da0b8f720646900d62e529141346f6a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_9da0b8f720646900d62e529141346f6a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_9da0b8f720646900d62e529141346f6a))

:named refinement_kinding_Tm_refine_9da0b8f720646900d62e529141346f6a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TBConst__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9da0b8f720646900d62e529141346f6a @x2))
(and (HasTypeFuel @u0
@x1
(StackMachine.texp @x2))

;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBConst @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9da0b8f720646900d62e529141346f6a @x2)))
:qid refinement_interpretation_Tm_refine_9da0b8f720646900d62e529141346f6a))

:named refinement_interpretation_Tm_refine_9da0b8f720646900d62e529141346f6a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9da0b8f720646900d62e529141346f6a
;;; Fact-ids: Name StackMachine.__proj__TBConst__item___0; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9da0b8f720646900d62e529141346f6a @x0)))
(Valid (Prims.hasEq (StackMachine.texp @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9da0b8f720646900d62e529141346f6a @x0))))
:qid haseqTm_refine_9da0b8f720646900d62e529141346f6a))

:named haseqTm_refine_9da0b8f720646900d62e529141346f6a))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TBConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.uu___is_TBConst @x0
@x1)
(BoxBool (is-StackMachine.TBConst @x1)))
 

:pattern ((StackMachine.uu___is_TBConst @x0
@x1))
:qid disc_equation_StackMachine.TBConst))

:named disc_equation_StackMachine.TBConst))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.typ) (projectee: _: StackMachine.texp _ {TBConst? _}).
;   (*  - Could not prove post-condition
; *) ~(TBConst? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TBConst__item___0`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_9da0b8f720646900d62e529141346f6a @x0))

;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(not 
;; def=StackMachine.fst(110,2-110,9); use=StackMachine.fst(110,2-110,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBConst @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TBConst__item___0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_9da0b8f720646900d62e529141346f6a

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TBConst__item___0


; <Skipped let __proj__TBConst__item___0/>


; encoding sigelt val StackMachine.uu___is_TBinop


; <Start encoding val StackMachine.uu___is_TBinop>

(declare-fun StackMachine.uu___is_TBinop (Term Term) Term)

(declare-fun StackMachine.uu___is_TBinop@tok () Term)

; </end encoding val StackMachine.uu___is_TBinop>


; encoding sigelt let uu___is_TBinop


; <Skipped let uu___is_TBinop/>


; encoding sigelt val StackMachine.__proj__TBinop__item__t1


; <Start encoding val StackMachine.__proj__TBinop__item__t1>

(declare-fun Tm_refine_363d878c15cc50c209fe3698ceb285cf (Term) Term)
(declare-fun StackMachine.__proj__TBinop__item__t1 (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: texp _ {TBinop? _} -> typ
(declare-fun Tm_arrow_ae41ece916b3f54d120eb797527d2b6c () Term)
(declare-fun StackMachine.__proj__TBinop__item__t1@tok () Term)

; </end encoding val StackMachine.__proj__TBinop__item__t1>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(StackMachine.texp @x0)))
(HasType (StackMachine.uu___is_TBinop @x0
@x1)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TBinop @x0
@x1))
:qid typing_StackMachine.uu___is_TBinop))

:named typing_StackMachine.uu___is_TBinop))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TBinop__item__t1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_363d878c15cc50c209fe3698ceb285cf))

:named refinement_kinding_Tm_refine_363d878c15cc50c209fe3698ceb285cf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TBinop__item__t1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x2))
(and (HasTypeFuel @u0
@x1
(StackMachine.texp @x2))

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x2)))
:qid refinement_interpretation_Tm_refine_363d878c15cc50c209fe3698ceb285cf))

:named refinement_interpretation_Tm_refine_363d878c15cc50c209fe3698ceb285cf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_363d878c15cc50c209fe3698ceb285cf
;;; Fact-ids: Name StackMachine.__proj__TBinop__item__t1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0)))
(Valid (Prims.hasEq (StackMachine.texp @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0))))
:qid haseqTm_refine_363d878c15cc50c209fe3698ceb285cf))

:named haseqTm_refine_363d878c15cc50c209fe3698ceb285cf))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.uu___is_TBinop @x0
@x1)
(BoxBool (is-StackMachine.TBinop @x1)))
 

:pattern ((StackMachine.uu___is_TBinop @x0
@x1))
:qid disc_equation_StackMachine.TBinop))

:named disc_equation_StackMachine.TBinop))
(push) ;; push{2

; Starting query at StackMachine.fst(111,12-111,14)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.typ) (projectee: _: StackMachine.texp _ {TBinop? _}).
;   (*  - Could not prove post-condition
; *) ~(TBinop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TBinop__item__t1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0))

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,12-111,14)
(not 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,12-111,14)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TBinop__item__t1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_363d878c15cc50c209fe3698ceb285cf

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TBinop__item__t1


; <Skipped let __proj__TBinop__item__t1/>


; encoding sigelt val StackMachine.__proj__TBinop__item__t2


; <Start encoding val StackMachine.__proj__TBinop__item__t2>


(declare-fun StackMachine.__proj__TBinop__item__t2 (Term Term) Term)


(declare-fun StackMachine.__proj__TBinop__item__t2@tok () Term)

; </end encoding val StackMachine.__proj__TBinop__item__t2>

(push) ;; push{2

; Starting query at StackMachine.fst(111,23-111,25)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.typ) (projectee: _: StackMachine.texp _ {TBinop? _}).
;   (*  - Could not prove post-condition
; *) ~(TBinop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TBinop__item__t2`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0))

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,23-111,25)
(not 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,23-111,25)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TBinop__item__t2, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_363d878c15cc50c209fe3698ceb285cf

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TBinop__item__t2


; <Skipped let __proj__TBinop__item__t2/>


; encoding sigelt val StackMachine.__proj__TBinop__item__t


; <Start encoding val StackMachine.__proj__TBinop__item__t>


(declare-fun StackMachine.__proj__TBinop__item__t (Term Term) Term)


(declare-fun StackMachine.__proj__TBinop__item__t@tok () Term)

; </end encoding val StackMachine.__proj__TBinop__item__t>

(push) ;; push{2

; Starting query at StackMachine.fst(111,34-111,35)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.typ) (projectee: _: StackMachine.texp _ {TBinop? _}).
;   (*  - Could not prove post-condition
; *) ~(TBinop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TBinop__item__t`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0))

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,34-111,35)
(not 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,34-111,35)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
@x1))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TBinop__item__t, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_363d878c15cc50c209fe3698ceb285cf

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TBinop__item__t


; <Skipped let __proj__TBinop__item__t/>


; encoding sigelt val StackMachine.__proj__TBinop__item___3


; <Start encoding val StackMachine.__proj__TBinop__item___3>


(declare-fun StackMachine.__proj__TBinop__item___3 (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: texp _ {TBinop? _} -> tbinop projectee.t1 projectee.t2 projectee.t
(declare-fun Tm_arrow_ab6fa2700e06251c5e681ce02b908dee () Term)
(declare-fun StackMachine.__proj__TBinop__item___3@tok () Term)

; </end encoding val StackMachine.__proj__TBinop__item___3>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.__proj__TBinop__item__t2; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,23-111,25); use=StackMachine.fst(111,23-111,25)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0)))
(HasType (StackMachine.__proj__TBinop__item__t2 @x0
@x1)
StackMachine.typ))
 

:pattern ((StackMachine.__proj__TBinop__item__t2 @x0
@x1))
:qid typing_StackMachine.__proj__TBinop__item__t2))

:named typing_StackMachine.__proj__TBinop__item__t2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.__proj__TBinop__item__t1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,12-111,14); use=StackMachine.fst(111,12-111,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0)))
(HasType (StackMachine.__proj__TBinop__item__t1 @x0
@x1)
StackMachine.typ))
 

:pattern ((StackMachine.__proj__TBinop__item__t1 @x0
@x1))
:qid typing_StackMachine.__proj__TBinop__item__t1))

:named typing_StackMachine.__proj__TBinop__item__t1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name StackMachine.__proj__TBinop__item__t2; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,23-111,25); use=StackMachine.fst(111,23-111,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.__proj__TBinop__item__t2 @x0
@x1)
(StackMachine.TBinop_t2 @x1))
 

:pattern ((StackMachine.__proj__TBinop__item__t2 @x0
@x1))
:qid proj_equation_StackMachine.TBinop_t2))

:named proj_equation_StackMachine.TBinop_t2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name StackMachine.__proj__TBinop__item__t1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(111,12-111,14); use=StackMachine.fst(111,12-111,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.__proj__TBinop__item__t1 @x0
@x1)
(StackMachine.TBinop_t1 @x1))
 

:pattern ((StackMachine.__proj__TBinop__item__t1 @x0
@x1))
:qid proj_equation_StackMachine.TBinop_t1))

:named proj_equation_StackMachine.TBinop_t1))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




; Encoding query formula : forall (_: StackMachine.typ) (projectee: _: StackMachine.texp _ {TBinop? _}).
;   (*  - Could not prove post-condition
; *)
;   (~(TBinop? projectee) ==> Prims.l_False) /\
;   (forall (b: StackMachine.typ)
;       (b: StackMachine.typ)
;       (b: StackMachine.typ)
;       (b: StackMachine.tbinop b b b)
;       (b: StackMachine.texp b)
;       (b: StackMachine.texp b).
;       projectee == StackMachine.TBinop b b b ==>
;       b == _ /\ TBinop? (StackMachine.TBinop b b b) /\
;       (forall (return_val: _: StackMachine.texp _ {TBinop? _}).
;           return_val == StackMachine.TBinop b b b ==>
;           (forall (any_result: StackMachine.typ).
;               (StackMachine.TBinop b b b).t1 == any_result ==>
;               b == _ /\ TBinop? (StackMachine.TBinop b b b) /\
;               (forall (return_val: _: StackMachine.texp _ {TBinop? _}).
;                   return_val == StackMachine.TBinop b b b ==>
;                   (forall (any_result: StackMachine.typ).
;                       (StackMachine.TBinop b b b).t2 == any_result ==>
;                       b == _ /\ TBinop? (StackMachine.TBinop b b b))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TBinop__item___3`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0)))

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (implies 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(not 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
@x1))
)

label_1)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.tbinop @x2
@x3
@x4))

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.texp @x2))

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.texp @x3))

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(= @x1
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(or label_2

;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(= @x4
@x0)
)


;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(or label_3

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7)))
)


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x8
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
StackMachine.typ)
(= (StackMachine.__proj__TBinop__item__t1 @x0
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7))
@x9))

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(or label_4

;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(= @x4
@x0)
)


;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(or label_5

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7)))
)


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x10
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
StackMachine.typ)
(= (StackMachine.__proj__TBinop__item__t2 @x0
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7))
@x11))

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(or label_6

;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(= @x4
@x0)
)


;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(or label_7

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7)))
)
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TBinop__item___3, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_StackMachine.TBinop, refinement_interpretation_Tm_refine_363d878c15cc50c209fe3698ceb285cf

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TBinop__item___3


; <Skipped let __proj__TBinop__item___3/>


; encoding sigelt val StackMachine.__proj__TBinop__item___4


; <Start encoding val StackMachine.__proj__TBinop__item___4>


(declare-fun StackMachine.__proj__TBinop__item___4 (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: texp _ {TBinop? _} -> texp projectee.t1
(declare-fun Tm_arrow_c23a992c1e2b673583a6bd30b3994261 () Term)
(declare-fun StackMachine.__proj__TBinop__item___4@tok () Term)

; </end encoding val StackMachine.__proj__TBinop__item___4>

(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.typ) (projectee: _: StackMachine.texp _ {TBinop? _}).
;   (*  - Could not prove post-condition
; *)
;   (~(TBinop? projectee) ==> Prims.l_False) /\
;   (forall (b: StackMachine.typ)
;       (b: StackMachine.typ)
;       (b: StackMachine.typ)
;       (b: StackMachine.tbinop b b b)
;       (b: StackMachine.texp b)
;       (b: StackMachine.texp b).
;       projectee == StackMachine.TBinop b b b ==> b == _ /\ TBinop? (StackMachine.TBinop b b b))


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TBinop__item___4`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0)))

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (implies 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(not 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
@x1))
)

label_1)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.tbinop @x2
@x3
@x4))

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.texp @x2))

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.texp @x3))

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(= @x1
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(or label_2

;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(= @x4
@x0)
)


;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(or label_3

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7)))
)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TBinop__item___4, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_StackMachine.TBinop, refinement_interpretation_Tm_refine_363d878c15cc50c209fe3698ceb285cf

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TBinop__item___4


; <Skipped let __proj__TBinop__item___4/>


; encoding sigelt val StackMachine.__proj__TBinop__item___5


; <Start encoding val StackMachine.__proj__TBinop__item___5>


(declare-fun StackMachine.__proj__TBinop__item___5 (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: texp _ {TBinop? _} -> texp projectee.t2
(declare-fun Tm_arrow_1631c95fa0088fba91ad619ca3a24dc0 () Term)
(declare-fun StackMachine.__proj__TBinop__item___5@tok () Term)

; </end encoding val StackMachine.__proj__TBinop__item___5>

(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.typ) (projectee: _: StackMachine.texp _ {TBinop? _}).
;   (*  - Could not prove post-condition
; *)
;   (~(TBinop? projectee) ==> Prims.l_False) /\
;   (forall (b: StackMachine.typ)
;       (b: StackMachine.typ)
;       (b: StackMachine.typ)
;       (b: StackMachine.tbinop b b b)
;       (b: StackMachine.texp b)
;       (b: StackMachine.texp b).
;       projectee == StackMachine.TBinop b b b ==> b == _ /\ TBinop? (StackMachine.TBinop b b b))


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TBinop__item___5`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_363d878c15cc50c209fe3698ceb285cf @x0)))

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (implies 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(not 
;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
@x1))
)

label_1)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.tbinop @x2
@x3
@x4))

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.texp @x2))

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.texp @x3))

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(= @x1
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(or label_2

;; def=dummy(0,0-0,0); use=StackMachine.fst(111,2-111,8)
(= @x4
@x0)
)


;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(or label_3

;; def=StackMachine.fst(111,2-111,8); use=StackMachine.fst(111,2-111,8)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop @x0
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7)))
)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TBinop__item___5, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_StackMachine.TBinop, refinement_interpretation_Tm_refine_363d878c15cc50c209fe3698ceb285cf

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TBinop__item___5


; <Skipped let __proj__TBinop__item___5/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_Nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,21-100,24); use=StackMachine.fst(100,21-100,24)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.typ)
(HasType (StackMachine.uu___is_Nat @x0)
Prims.bool))
 

:pattern ((StackMachine.uu___is_Nat @x0))
:qid typing_StackMachine.uu___is_Nat))

:named typing_StackMachine.uu___is_Nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,27-100,31); use=StackMachine.fst(100,27-100,31)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.typ)
(HasType (StackMachine.uu___is_Bool @x0)
Prims.bool))
 

:pattern ((StackMachine.uu___is_Bool @x0))
:qid typing_StackMachine.uu___is_Bool))

:named typing_StackMachine.uu___is_Bool))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_Nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,21-100,24); use=StackMachine.fst(100,21-100,24)
(forall ((@x0 Term))
 (! (= (StackMachine.uu___is_Nat @x0)
(BoxBool (is-StackMachine.Nat @x0)))
 

:pattern ((StackMachine.uu___is_Nat @x0))
:qid disc_equation_StackMachine.Nat))

:named disc_equation_StackMachine.Nat))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_Bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(100,27-100,31); use=StackMachine.fst(100,27-100,31)
(forall ((@x0 Term))
 (! (= (StackMachine.uu___is_Bool @x0)
(BoxBool (is-StackMachine.Bool @x0)))
 

:pattern ((StackMachine.uu___is_Bool @x0))
:qid disc_equation_StackMachine.Bool))

:named disc_equation_StackMachine.Bool))
(push) ;; push{2

; Starting query at StackMachine.fst(114,2-116,18)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (t: StackMachine.typ).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post Type0).
;     (forall (x: Type0). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;     ~(Nat? t) /\ ~(Bool? t) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let typeDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.typ)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Tm_type))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(114,2-116,18)
(forall ((@x2 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(114,2-116,18)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(114,2-116,18)
(ApplyTT @x1
@x2)
)

 

:pattern ((ApplyTT @x1
@x2))
:qid @query.2))


;; def=StackMachine.fst(113,16-113,17); use=StackMachine.fst(114,8-114,9)
(not 
;; def=StackMachine.fst(113,16-113,17); use=StackMachine.fst(114,8-114,9)
(BoxBool_proj_0 (StackMachine.uu___is_Nat @x0))
)


;; def=StackMachine.fst(113,16-113,17); use=StackMachine.fst(114,8-114,9)
(not 
;; def=StackMachine.fst(113,16-113,17); use=StackMachine.fst(114,8-114,9)
(BoxBool_proj_0 (StackMachine.uu___is_Bool @x0))
)
)
label_1)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.typeDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_StackMachine.Bool, disc_equation_StackMachine.Nat, fuel_guarded_inversion_StackMachine.typ, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let typeDenote


; <Start encoding let typeDenote>

(declare-fun StackMachine.typeDenote (Term) Term)
;;;;;;;;;;;;;;;;t: typ -> Type
(declare-fun Tm_arrow_e3a9c53ff04bb5078aec3a3cdd7bde9d () Term)
(declare-fun StackMachine.typeDenote@tok () Term)

; </end encoding let typeDenote>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TTimes; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(104,2-104,8); use=StackMachine.fst(104,2-104,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
(StackMachine.tbinop @x0
@x1
@x2)))
(HasType (StackMachine.uu___is_TTimes @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TTimes @x0
@x1
@x2
@x3))
:qid typing_StackMachine.uu___is_TTimes))

:named typing_StackMachine.uu___is_TTimes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TPlus; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(103,2-103,7); use=StackMachine.fst(103,2-103,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
(StackMachine.tbinop @x0
@x1
@x2)))
(HasType (StackMachine.uu___is_TPlus @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TPlus @x0
@x1
@x2
@x3))
:qid typing_StackMachine.uu___is_TPlus))

:named typing_StackMachine.uu___is_TPlus))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(106,2-106,5); use=StackMachine.fst(106,2-106,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
(StackMachine.tbinop @x0
@x1
@x2)))
(HasType (StackMachine.uu___is_TLt @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TLt @x0
@x1
@x2
@x3))
:qid typing_StackMachine.uu___is_TLt))

:named typing_StackMachine.uu___is_TLt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.typeDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(113,4-113,14); use=StackMachine.fst(113,4-113,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.typ)
(HasType (StackMachine.typeDenote @x0)
Tm_type))
 

:pattern ((StackMachine.typeDenote @x0))
:qid typing_StackMachine.typeDenote))

:named typing_StackMachine.typeDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.__proj__TEq__item__t; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,8-105,9); use=StackMachine.fst(105,8-105,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
(Tm_refine_013f03405ee56e2bee5ec40dee6f6602 @x0
@x1
@x2)))
(HasType (StackMachine.__proj__TEq__item__t @x0
@x1
@x2
@x3)
StackMachine.typ))
 

:pattern ((StackMachine.__proj__TEq__item__t @x0
@x1
@x2
@x3))
:qid typing_StackMachine.__proj__TEq__item__t))

:named typing_StackMachine.__proj__TEq__item__t))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name StackMachine.__proj__TEq__item__t; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(105,8-105,9); use=StackMachine.fst(105,8-105,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.__proj__TEq__item__t @x0
@x1
@x2
@x3)
(StackMachine.TEq_t @x3))
 

:pattern ((StackMachine.__proj__TEq__item__t @x0
@x1
@x2
@x3))
:qid proj_equation_StackMachine.TEq_t))

:named proj_equation_StackMachine.TEq_t))
;;;;;;;;;;;;;;;;Equation for StackMachine.typeDenote
;;; Fact-ids: Name StackMachine.typeDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(113,4-113,14); use=StackMachine.fst(113,4-113,14)
(forall ((@x0 Term))
 (! (= (StackMachine.typeDenote @x0)
(let ((@lb1 @x0))
(ite (is-StackMachine.Nat @lb1)
Prims.nat
(ite (is-StackMachine.Bool @lb1)
Prims.bool
Tm_unit))))
 

:pattern ((StackMachine.typeDenote @x0))
:qid equation_StackMachine.typeDenote))

:named equation_StackMachine.typeDenote))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TTimes; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(104,2-104,8); use=StackMachine.fst(104,2-104,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.uu___is_TTimes @x0
@x1
@x2
@x3)
(BoxBool (is-StackMachine.TTimes @x3)))
 

:pattern ((StackMachine.uu___is_TTimes @x0
@x1
@x2
@x3))
:qid disc_equation_StackMachine.TTimes))

:named disc_equation_StackMachine.TTimes))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TPlus; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(103,2-103,7); use=StackMachine.fst(103,2-103,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.uu___is_TPlus @x0
@x1
@x2
@x3)
(BoxBool (is-StackMachine.TPlus @x3)))
 

:pattern ((StackMachine.uu___is_TPlus @x0
@x1
@x2
@x3))
:qid disc_equation_StackMachine.TPlus))

:named disc_equation_StackMachine.TPlus))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TLt; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(106,2-106,5); use=StackMachine.fst(106,2-106,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.uu___is_TLt @x0
@x1
@x2
@x3)
(BoxBool (is-StackMachine.TLt @x3)))
 

:pattern ((StackMachine.uu___is_TLt @x0
@x1
@x2
@x3))
:qid disc_equation_StackMachine.TLt))

:named disc_equation_StackMachine.TLt))
(push) ;; push{2

; Starting query at StackMachine.fst(120,2-125,19)

(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: typeDenote arg1 -> _: typeDenote arg2 -> typeDenote res
(declare-fun Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(120,2-125,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))

:named kinding_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(120,2-125,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x2
@x3
@x4)))
:qid StackMachine_pre_typing_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))

:named StackMachine_pre_typing_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(120,2-125,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x1
@x2
@x3))
(and 
;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(120,2-125,19)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(StackMachine.typeDenote @x3))
(HasType @x5
(StackMachine.typeDenote @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(StackMachine.typeDenote @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9.1))

(IsTotFun @x0)

;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(120,2-125,19)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(StackMachine.typeDenote @x3))
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x1
@x2
@x3)))
:qid StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))

:named StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))


; Encoding query formula : forall (arg1: StackMachine.typ)
;   (arg2: StackMachine.typ)
;   (res: StackMachine.typ)
;   (b: StackMachine.tbinop arg1 arg2 res).
;   (*  - Could not prove post-condition
; *)
;   forall (k:
;     Prims.pure_post (_: StackMachine.typeDenote arg1 -> _: StackMachine.typeDenote arg2
;           -> StackMachine.typeDenote res)).
;     (forall (x:
;         (_: StackMachine.typeDenote arg1 -> _: StackMachine.typeDenote arg2
;             -> StackMachine.typeDenote res)).
;         {:pattern Prims.guard_free (k x)}
;         Prims.auto_squash (k x)) ==>
;     (~(TPlus? b) /\ ~(TTimes? b) /\ ~(TEq? b && Nat? b.t) /\ ~(TEq? b && Bool? b.t) /\ ~(TLt? b) ==>
;       Prims.l_False) /\
;     (b == StackMachine.TPlus ==>
;       (forall (_: StackMachine.typeDenote arg1). Prims.has_type _ Prims.nat) /\
;       (forall (n1: Prims.nat).
;           (forall (_: StackMachine.typeDenote arg2). Prims.has_type _ Prims.nat) /\
;           (forall (n2: Prims.nat) (_: Prims.nat). Prims.has_type _ (StackMachine.typeDenote res)))) /\
;     (~(TPlus? b) ==>
;       (b == StackMachine.TTimes ==>
;         (forall (_: StackMachine.typeDenote arg1). Prims.has_type _ Prims.nat) /\
;         (forall (n1: Prims.nat).
;             (forall (_: StackMachine.typeDenote arg2). Prims.has_type _ Prims.nat) /\
;             (forall (n2: Prims.nat) (_: Prims.nat). Prims.has_type _ (StackMachine.typeDenote res)))
;       ) /\
;       (~(TTimes? b) ==>
;         (b == StackMachine.TEq StackMachine.Nat ==>
;           (forall (_: StackMachine.typeDenote arg1). Prims.has_type _ Prims.nat) /\
;           (forall (n1: Prims.nat).
;               (forall (_: StackMachine.typeDenote arg2). Prims.has_type _ Prims.nat) /\
;               (forall (n2: Prims.nat) (_: Prims.bool).
;                   Prims.has_type _ (StackMachine.typeDenote res)))) /\
;         (~(TEq? b && Nat? b.t) ==>
;           (b == StackMachine.TEq StackMachine.Bool ==>
;             (forall (_: StackMachine.typeDenote arg1). Prims.has_type _ Prims.bool) /\
;             (forall (b1: Prims.bool).
;                 (forall (_: StackMachine.typeDenote arg2). Prims.has_type _ Prims.bool) /\
;                 (forall (b2: Prims.bool) (_: Prims.bool).
;                     Prims.has_type _ (StackMachine.typeDenote res)))) /\
;           (~(TEq? b && Bool? b.t) ==>
;             b == StackMachine.TLt ==>
;             (forall (_: StackMachine.typeDenote arg1). Prims.has_type _ Prims.nat) /\
;             (forall (n1: Prims.nat).
;                 (forall (_: StackMachine.typeDenote arg2). Prims.has_type _ Prims.nat) /\
;                 (forall (n2: Prims.nat) (_: Prims.bool).
;                     Prims.has_type _ (StackMachine.typeDenote res)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let tbinopDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
(StackMachine.tbinop @x0
@x1
@x2)))
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x2
@x1
@x0)))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(120,2-125,19)
(forall ((@x5 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(120,2-125,19)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(120,2-125,19)
(ApplyTT @x4
@x5)
)

 

:pattern ((ApplyTT @x4
@x5))
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(120,2-125,19)
(and (implies 
;; def=StackMachine.fst(118,35-124,9); use=StackMachine.fst(120,8-124,9)
(and 
;; def=StackMachine.fst(118,35-118,36); use=StackMachine.fst(120,8-120,9)
(not 
;; def=StackMachine.fst(118,35-118,36); use=StackMachine.fst(120,8-120,9)
(BoxBool_proj_0 (StackMachine.uu___is_TPlus @x0
@x1
@x2
@x3))
)


;; def=StackMachine.fst(118,35-118,36); use=StackMachine.fst(120,8-120,9)
(not 
;; def=StackMachine.fst(118,35-118,36); use=StackMachine.fst(120,8-120,9)
(BoxBool_proj_0 (StackMachine.uu___is_TTimes @x0
@x1
@x2
@x3))
)


;; def=StackMachine.fst(118,35-123,9); use=StackMachine.fst(120,8-123,9)
(not 
;; def=StackMachine.fst(118,35-123,9); use=StackMachine.fst(120,8-123,9)
(and (BoxBool_proj_0 (StackMachine.uu___is_TEq @x0
@x1
@x2
@x3))
(BoxBool_proj_0 (StackMachine.uu___is_Nat (StackMachine.__proj__TEq__item__t @x0
@x1
@x2
@x3))))
)


;; def=StackMachine.fst(118,35-124,9); use=StackMachine.fst(120,8-124,9)
(not 
;; def=StackMachine.fst(118,35-124,9); use=StackMachine.fst(120,8-124,9)
(and (BoxBool_proj_0 (StackMachine.uu___is_TEq @x0
@x1
@x2
@x3))
(BoxBool_proj_0 (StackMachine.uu___is_Bool (StackMachine.__proj__TEq__item__t @x0
@x1
@x2
@x3))))
)


;; def=StackMachine.fst(118,35-118,36); use=StackMachine.fst(120,8-120,9)
(not 
;; def=StackMachine.fst(118,35-118,36); use=StackMachine.fst(120,8-120,9)
(BoxBool_proj_0 (StackMachine.uu___is_TLt @x0
@x1
@x2
@x3))
)
)

label_1)
(implies 
;; def=StackMachine.fst(118,35-121,11); use=StackMachine.fst(120,8-121,11)
(= @x3
StackMachine.TPlus@tok)


;; def=dummy(0,0-0,0); use=StackMachine.fst(121,15-121,22)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(121,15-121,22)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.typeDenote @x0))

;; def=StackMachine.fst(121,15-121,22); use=StackMachine.fst(121,15-121,22)
(or label_2
(HasType @x5
Prims.nat))
)
 
;;no pats
:qid @query.3))


;; def=dummy(0,0-0,0); use=StackMachine.fst(121,15-121,22)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.nat)

;; def=dummy(0,0-0,0); use=StackMachine.fst(121,15-121,22)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(121,15-121,22)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.typeDenote @x1))

;; def=StackMachine.fst(121,15-121,22); use=StackMachine.fst(121,15-121,22)
(or label_3
(HasType @x6
Prims.nat))
)
 
;;no pats
:qid @query.5))


;; def=dummy(0,0-0,0); use=StackMachine.fst(121,15-121,22)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
Prims.nat)
(HasType @x7
Prims.nat))

;; def=StackMachine.fst(121,15-121,22); use=StackMachine.fst(121,15-121,22)
(or label_4
(HasType @x7
(StackMachine.typeDenote @x2)))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(120,2-125,19)
(not 
;; def=StackMachine.fst(118,35-118,36); use=StackMachine.fst(120,8-120,9)
(BoxBool_proj_0 (StackMachine.uu___is_TPlus @x0
@x1
@x2
@x3))
)


;; def=Prims.fst(389,2-389,39); use=StackMachine.fst(120,2-125,19)
(and (implies 
;; def=StackMachine.fst(118,35-122,12); use=StackMachine.fst(120,8-122,12)
(= @x3
StackMachine.TTimes@tok)


;; def=dummy(0,0-0,0); use=StackMachine.fst(122,16-122,23)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(122,16-122,23)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.typeDenote @x0))

;; def=StackMachine.fst(122,16-122,23); use=StackMachine.fst(122,16-122,23)
(or label_5
(HasType @x5
Prims.nat))
)
 
;;no pats
:qid @query.7))


;; def=dummy(0,0-0,0); use=StackMachine.fst(122,16-122,23)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.nat)

;; def=dummy(0,0-0,0); use=StackMachine.fst(122,16-122,23)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(122,16-122,23)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.typeDenote @x1))

;; def=StackMachine.fst(122,16-122,23); use=StackMachine.fst(122,16-122,23)
(or label_6
(HasType @x6
Prims.nat))
)
 
;;no pats
:qid @query.9))


;; def=dummy(0,0-0,0); use=StackMachine.fst(122,16-122,23)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
Prims.nat)
(HasType @x7
Prims.nat))

;; def=StackMachine.fst(122,16-122,23); use=StackMachine.fst(122,16-122,23)
(or label_7
(HasType @x7
(StackMachine.typeDenote @x2)))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.8))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(120,2-125,19)
(not 
;; def=StackMachine.fst(118,35-118,36); use=StackMachine.fst(120,8-120,9)
(BoxBool_proj_0 (StackMachine.uu___is_TTimes @x0
@x1
@x2
@x3))
)


;; def=Prims.fst(389,2-389,39); use=StackMachine.fst(120,2-125,19)
(and (implies 
;; def=StackMachine.fst(118,35-123,13); use=StackMachine.fst(120,8-123,13)
(= @x3
(StackMachine.TEq StackMachine.Nat@tok))


;; def=dummy(0,0-0,0); use=StackMachine.fst(123,17-123,23)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(123,17-123,23)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.typeDenote @x0))

;; def=StackMachine.fst(123,17-123,23); use=StackMachine.fst(123,17-123,23)
(or label_8
(HasType @x5
Prims.nat))
)
 
;;no pats
:qid @query.11))


;; def=dummy(0,0-0,0); use=StackMachine.fst(123,17-123,23)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.nat)

;; def=dummy(0,0-0,0); use=StackMachine.fst(123,17-123,23)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(123,17-123,23)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.typeDenote @x1))

;; def=StackMachine.fst(123,17-123,23); use=StackMachine.fst(123,17-123,23)
(or label_9
(HasType @x6
Prims.nat))
)
 
;;no pats
:qid @query.13))


;; def=dummy(0,0-0,0); use=StackMachine.fst(123,17-123,23)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
Prims.nat)
(HasType @x7
Prims.bool))

;; def=StackMachine.fst(123,17-123,23); use=StackMachine.fst(123,17-123,23)
(or label_10
(HasType @x7
(StackMachine.typeDenote @x2)))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.12))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(120,2-125,19)
(not 
;; def=StackMachine.fst(118,35-123,9); use=StackMachine.fst(120,8-123,9)
(and (BoxBool_proj_0 (StackMachine.uu___is_TEq @x0
@x1
@x2
@x3))
(BoxBool_proj_0 (StackMachine.uu___is_Nat (StackMachine.__proj__TEq__item__t @x0
@x1
@x2
@x3))))
)


;; def=Prims.fst(389,2-389,39); use=StackMachine.fst(120,2-125,19)
(and (implies 
;; def=StackMachine.fst(118,35-124,14); use=StackMachine.fst(120,8-124,14)
(= @x3
(StackMachine.TEq StackMachine.Bool@tok))


;; def=dummy(0,0-0,0); use=StackMachine.fst(124,18-124,25)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(124,18-124,25)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.typeDenote @x0))

;; def=StackMachine.fst(124,18-124,25); use=StackMachine.fst(124,18-124,25)
(or label_11
(HasType @x5
Prims.bool))
)
 
;;no pats
:qid @query.15))


;; def=dummy(0,0-0,0); use=StackMachine.fst(124,18-124,25)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.bool)

;; def=dummy(0,0-0,0); use=StackMachine.fst(124,18-124,25)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(124,18-124,25)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.typeDenote @x1))

;; def=StackMachine.fst(124,18-124,25); use=StackMachine.fst(124,18-124,25)
(or label_12
(HasType @x6
Prims.bool))
)
 
;;no pats
:qid @query.17))


;; def=dummy(0,0-0,0); use=StackMachine.fst(124,18-124,25)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
Prims.bool)
(HasType @x7
Prims.bool))

;; def=StackMachine.fst(124,18-124,25); use=StackMachine.fst(124,18-124,25)
(or label_13
(HasType @x7
(StackMachine.typeDenote @x2)))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.16))
)
)
(implies 
;; def=Prims.fst(389,18-389,39); use=StackMachine.fst(120,2-125,19)
(and 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(120,2-125,19)
(not 
;; def=StackMachine.fst(118,35-124,9); use=StackMachine.fst(120,8-124,9)
(and (BoxBool_proj_0 (StackMachine.uu___is_TEq @x0
@x1
@x2
@x3))
(BoxBool_proj_0 (StackMachine.uu___is_Bool (StackMachine.__proj__TEq__item__t @x0
@x1
@x2
@x3))))
)


;; def=StackMachine.fst(118,35-125,9); use=StackMachine.fst(120,8-125,9)
(= @x3
StackMachine.TLt@tok)
)


;; def=dummy(0,0-0,0); use=StackMachine.fst(125,13-125,19)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(125,13-125,19)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.typeDenote @x0))

;; def=StackMachine.fst(125,13-125,19); use=StackMachine.fst(125,13-125,19)
(or label_14
(HasType @x5
Prims.nat))
)
 
;;no pats
:qid @query.19))


;; def=dummy(0,0-0,0); use=StackMachine.fst(125,13-125,19)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.nat)

;; def=dummy(0,0-0,0); use=StackMachine.fst(125,13-125,19)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(125,13-125,19)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.typeDenote @x1))

;; def=StackMachine.fst(125,13-125,19); use=StackMachine.fst(125,13-125,19)
(or label_15
(HasType @x6
Prims.nat))
)
 
;;no pats
:qid @query.21))


;; def=dummy(0,0-0,0); use=StackMachine.fst(125,13-125,19)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
Prims.nat)
(HasType @x7
Prims.bool))

;; def=StackMachine.fst(125,13-125,19); use=StackMachine.fst(125,13-125,19)
(or label_16
(HasType @x7
(StackMachine.typeDenote @x2)))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.20))
)
))
))
))
))
)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tbinopDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StackMachine_pretyping_82296f4018d086bf2f117419255cd432, constructor_distinct_StackMachine.Bool, constructor_distinct_StackMachine.Nat, data_elim_StackMachine.TEq, data_elim_StackMachine.TLt, data_elim_StackMachine.TTimes, disc_equation_StackMachine.Bool, disc_equation_StackMachine.Nat, disc_equation_StackMachine.TEq, disc_equation_StackMachine.TLt, disc_equation_StackMachine.TPlus, disc_equation_StackMachine.TTimes, equality_tok_StackMachine.Bool@tok, equality_tok_StackMachine.Nat@tok, equality_tok_StackMachine.TLt@tok, equality_tok_StackMachine.TPlus@tok, equality_tok_StackMachine.TTimes@tok, equation_StackMachine.typeDenote, fuel_guarded_inversion_StackMachine.tbinop, fuel_guarded_inversion_StackMachine.typ, proj_equation_StackMachine.TEq_t, projection_inverse_BoxBool_proj_0, typing_tok_StackMachine.TLt@tok, typing_tok_StackMachine.TPlus@tok, typing_tok_StackMachine.TTimes@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let tbinopDenote


; <Start encoding let tbinopDenote>

(declare-fun StackMachine.tbinopDenote (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;_: typeDenote arg1 -> _: typeDenote arg2 -> typeDenote res
(declare-fun Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 (Term Term Term) Term)
;;;;;;;;;;;;;;;;b: tbinop arg1 arg2 res -> _: typeDenote arg1 -> _: typeDenote arg2 -> typeDenote res
(declare-fun Tm_arrow_aa95041870b22db0050daf9c687449fb () Term)
(declare-fun StackMachine.tbinopDenote@tok () Term)




; </end encoding let tbinopDenote>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(118,4-118,16); use=StackMachine.fst(118,4-118,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
(StackMachine.tbinop @x0
@x1
@x2)))
(HasType (StackMachine.tbinopDenote @x0
@x1
@x2
@x3)
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x2
@x1
@x0)))
 

:pattern ((StackMachine.tbinopDenote @x0
@x1
@x2
@x3))
:qid typing_StackMachine.tbinopDenote))

:named typing_StackMachine.tbinopDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.lt_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(34,4-34,10); use=StackMachine.fst(34,4-34,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))
(HasType (StackMachine.lt_nat @x0
@x1)
Prims.bool))
 

:pattern ((StackMachine.lt_nat @x0
@x1))
:qid typing_StackMachine.lt_nat))

:named typing_StackMachine.lt_nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.eq_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(32,4-32,10); use=StackMachine.fst(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
Prims.nat))
(HasType (StackMachine.eq_nat @x0
@x1)
Prims.bool))
 

:pattern ((StackMachine.eq_nat @x0
@x1))
:qid typing_StackMachine.eq_nat))

:named typing_StackMachine.eq_nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.eq_bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(33,4-33,11); use=StackMachine.fst(33,4-33,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.bool)
(HasType @x1
Prims.bool))
(HasType (StackMachine.eq_bool @x0
@x1)
Prims.bool))
 

:pattern ((StackMachine.eq_bool @x0
@x1))
:qid typing_StackMachine.eq_bool))

:named typing_StackMachine.eq_bool))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(118,4-118,16); use=StackMachine.fst(118,4-118,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinopDenote@tok
@x0)
@x1)
@x2)
@x3)
(StackMachine.tbinopDenote @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinopDenote@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_StackMachine.tbinopDenote))

:named token_correspondence_StackMachine.tbinopDenote))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StackMachine.lt_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(34,4-34,10); use=StackMachine.fst(34,4-34,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.lt_nat@tok
@x0)
@x1)
(StackMachine.lt_nat @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.lt_nat@tok
@x0)
@x1))
:qid token_correspondence_StackMachine.lt_nat))

:named token_correspondence_StackMachine.lt_nat))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StackMachine.eq_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(32,4-32,10); use=StackMachine.fst(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.eq_nat@tok
@x0)
@x1)
(StackMachine.eq_nat @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.eq_nat@tok
@x0)
@x1))
:qid token_correspondence_StackMachine.eq_nat))

:named token_correspondence_StackMachine.eq_nat))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StackMachine.eq_bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(33,4-33,11); use=StackMachine.fst(33,4-33,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.eq_bool@tok
@x0)
@x1)
(StackMachine.eq_bool @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.eq_bool@tok
@x0)
@x1))
:qid token_correspondence_StackMachine.eq_bool))

:named token_correspondence_StackMachine.eq_bool))
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0
;;; Fact-ids: Name StackMachine.eq_nat; Namespace StackMachine
(assert (! (HasType Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0
Tm_type)
:named kinding_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_aa95041870b22db0050daf9c687449fb
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! (HasType Tm_arrow_aa95041870b22db0050daf9c687449fb
Tm_type)
:named kinding_Tm_arrow_aa95041870b22db0050daf9c687449fb))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5
;;; Fact-ids: Name StackMachine.eq_bool; Namespace StackMachine
(assert (! (HasType Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5
Tm_type)
:named kinding_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(119,4-119,62)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))

:named kinding_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(118,4-118,16); use=StackMachine.fst(118,4-118,16)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.tbinopDenote@tok
Tm_arrow_aa95041870b22db0050daf9c687449fb))

;; def=StackMachine.fst(118,4-118,16); use=StackMachine.fst(118,4-118,16)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinopDenote@tok
@x1)
@x2)
@x3)
@x4)
(StackMachine.tbinopDenote @x1
@x2
@x3
@x4))
 

:pattern ((StackMachine.tbinopDenote @x1
@x2
@x3
@x4))
:qid function_token_typing_StackMachine.tbinopDenote.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.tbinopDenote@tok))
:qid function_token_typing_StackMachine.tbinopDenote))

:named function_token_typing_StackMachine.tbinopDenote))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.lt_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(34,4-34,10); use=StackMachine.fst(34,4-34,10)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.lt_nat@tok
Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))

;; def=StackMachine.fst(34,4-34,10); use=StackMachine.fst(34,4-34,10)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.lt_nat@tok
@x1)
@x2)
(StackMachine.lt_nat @x1
@x2))
 

:pattern ((StackMachine.lt_nat @x1
@x2))
:qid function_token_typing_StackMachine.lt_nat.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.lt_nat@tok))
:qid function_token_typing_StackMachine.lt_nat))

:named function_token_typing_StackMachine.lt_nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.eq_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(32,4-32,10); use=StackMachine.fst(32,4-32,10)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.eq_nat@tok
Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))

;; def=StackMachine.fst(32,4-32,10); use=StackMachine.fst(32,4-32,10)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.eq_nat@tok
@x1)
@x2)
(StackMachine.eq_nat @x1
@x2))
 

:pattern ((StackMachine.eq_nat @x1
@x2))
:qid function_token_typing_StackMachine.eq_nat.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.eq_nat@tok))
:qid function_token_typing_StackMachine.eq_nat))

:named function_token_typing_StackMachine.eq_nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.eq_bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(33,4-33,11); use=StackMachine.fst(33,4-33,11)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.eq_bool@tok
Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5))

;; def=StackMachine.fst(33,4-33,11); use=StackMachine.fst(33,4-33,11)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.eq_bool@tok
@x1)
@x2)
(StackMachine.eq_bool @x1
@x2))
 

:pattern ((StackMachine.eq_bool @x1
@x2))
:qid function_token_typing_StackMachine.eq_bool.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.eq_bool@tok))
:qid function_token_typing_StackMachine.eq_bool))

:named function_token_typing_StackMachine.eq_bool))
;;;;;;;;;;;;;;;;Equation for StackMachine.tbinopDenote
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(118,4-118,16); use=StackMachine.fst(118,4-118,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.tbinopDenote @x0
@x1
@x2
@x3)
(let ((@lb4 @x3))
(ite (is-StackMachine.TPlus @lb4)
StackMachine.add_nat@tok
(ite (is-StackMachine.TTimes @lb4)
StackMachine.mul_nat@tok
(ite (and (is-StackMachine.TEq @lb4)
(is-StackMachine.Nat (StackMachine.TEq_t @lb4)))
StackMachine.eq_nat@tok
(ite (and (is-StackMachine.TEq @lb4)
(is-StackMachine.Bool (StackMachine.TEq_t @lb4)))
StackMachine.eq_bool@tok
(ite (is-StackMachine.TLt @lb4)
StackMachine.lt_nat@tok
Tm_unit)))))))
 

:pattern ((StackMachine.tbinopDenote @x0
@x1
@x2
@x3))
:qid equation_StackMachine.tbinopDenote))

:named equation_StackMachine.tbinopDenote))
;;;;;;;;;;;;;;;;Equation for StackMachine.lt_nat
;;; Fact-ids: Name StackMachine.lt_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(34,4-34,10); use=StackMachine.fst(34,4-34,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.lt_nat @x0
@x1)
(Prims.op_LessThan @x0
@x1))
 

:pattern ((StackMachine.lt_nat @x0
@x1))
:qid equation_StackMachine.lt_nat))

:named equation_StackMachine.lt_nat))
;;;;;;;;;;;;;;;;Equation for StackMachine.eq_nat
;;; Fact-ids: Name StackMachine.eq_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(32,4-32,10); use=StackMachine.fst(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.eq_nat @x0
@x1)
(Prims.op_Equality Prims.nat
@x0
@x1))
 

:pattern ((StackMachine.eq_nat @x0
@x1))
:qid equation_StackMachine.eq_nat))

:named equation_StackMachine.eq_nat))
;;;;;;;;;;;;;;;;Equation for StackMachine.eq_bool
;;; Fact-ids: Name StackMachine.eq_bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(33,4-33,11); use=StackMachine.fst(33,4-33,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.eq_bool @x0
@x1)
(Prims.op_Equality Prims.bool
@x0
@x1))
 

:pattern ((StackMachine.eq_bool @x0
@x1))
:qid equation_StackMachine.eq_bool))

:named equation_StackMachine.eq_bool))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StackMachine.eq_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(32,15-32,39); use=StackMachine.fst(32,15-32,39)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))
:qid StackMachine_pre_typing_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))

:named StackMachine_pre_typing_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,14-119,62); use=StackMachine.fst(118,18-119,62)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_aa95041870b22db0050daf9c687449fb)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_aa95041870b22db0050daf9c687449fb))
:qid StackMachine_pre_typing_Tm_arrow_aa95041870b22db0050daf9c687449fb))

:named StackMachine_pre_typing_Tm_arrow_aa95041870b22db0050daf9c687449fb))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StackMachine.eq_bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(33,16-33,42); use=StackMachine.fst(33,16-33,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5))
:qid StackMachine_pre_typing_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5))

:named StackMachine_pre_typing_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(119,4-119,62)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x2
@x3
@x4)))
:qid StackMachine_pre_typing_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))

:named StackMachine_pre_typing_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0
;;; Fact-ids: Name StackMachine.eq_nat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(32,15-32,39); use=StackMachine.fst(32,15-32,39)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0)
(and 
;; def=StackMachine.fst(32,15-32,39); use=StackMachine.fst(32,15-32,39)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
Prims.nat))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0.1))

(IsTotFun @x0)

;; def=StackMachine.fst(32,15-32,39); use=StackMachine.fst(32,15-32,39)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))
:qid StackMachine_interpretation_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))

:named StackMachine_interpretation_Tm_arrow_d6e7225e69a61b7f50fabfdd79d8cdc0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_aa95041870b22db0050daf9c687449fb
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(102,14-119,62); use=StackMachine.fst(118,18-119,62)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_aa95041870b22db0050daf9c687449fb)
(and 
;; def=StackMachine.fst(102,14-119,62); use=StackMachine.fst(118,18-119,62)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
StackMachine.typ)
(HasType @x4
(StackMachine.tbinop @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x3
@x2
@x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid StackMachine_interpretation_Tm_arrow_aa95041870b22db0050daf9c687449fb.1))

(IsTotFun @x0)

;; def=StackMachine.fst(102,14-119,62); use=StackMachine.fst(118,18-119,62)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.typ)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_aa95041870b22db0050daf9c687449fb.2))


;; def=StackMachine.fst(102,14-119,62); use=StackMachine.fst(118,18-119,62)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_aa95041870b22db0050daf9c687449fb.3))


;; def=StackMachine.fst(102,14-119,62); use=StackMachine.fst(118,18-119,62)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
StackMachine.typ)
(HasType @x3
StackMachine.typ))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StackMachine_interpretation_Tm_arrow_aa95041870b22db0050daf9c687449fb.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_aa95041870b22db0050daf9c687449fb))
:qid StackMachine_interpretation_Tm_arrow_aa95041870b22db0050daf9c687449fb))

:named StackMachine_interpretation_Tm_arrow_aa95041870b22db0050daf9c687449fb))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5
;;; Fact-ids: Name StackMachine.eq_bool; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(33,16-33,42); use=StackMachine.fst(33,16-33,42)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5)
(and 
;; def=StackMachine.fst(33,16-33,42); use=StackMachine.fst(33,16-33,42)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.bool)
(HasType @x2
Prims.bool))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5.1))

(IsTotFun @x0)

;; def=StackMachine.fst(33,16-33,42); use=StackMachine.fst(33,16-33,42)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.bool)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5))
:qid StackMachine_interpretation_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5))

:named StackMachine_interpretation_Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(119,4-119,62)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x1
@x2
@x3))
(and 
;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(119,4-119,62)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(StackMachine.typeDenote @x3))
(HasType @x5
(StackMachine.typeDenote @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(StackMachine.typeDenote @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9.1))

(IsTotFun @x0)

;; def=StackMachine.fst(119,4-119,62); use=StackMachine.fst(119,4-119,62)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(StackMachine.typeDenote @x3))
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9 @x1
@x2
@x3)))
:qid StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))

:named StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! (Valid (ApplyTT __uu__PartialApp
StackMachine.eq_nat@tok))
:named @kick_partial_app_b90b773b92bba539a707a897ae8db54d))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! (Valid (ApplyTT __uu__PartialApp
StackMachine.lt_nat@tok))
:named @kick_partial_app_b2a0a352a759d939682b4290e4a1d31b))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StackMachine.tbinopDenote; Namespace StackMachine
(assert (! (Valid (ApplyTT __uu__PartialApp
StackMachine.eq_bool@tok))
:named @kick_partial_app_2ea7becbafd5b1b3bff2e4215e230994))
(push) ;; push{2

; Starting query at StackMachine.fst(128,2-131,72)

;;;;;;;;;;;;;;;;t : StackMachine.typ (StackMachine.typ)
(declare-fun x_99009f55474bb74b46709f3fb0f7bfdf_0 () Term)
;;;;;;;;;;;;;;;;binder_x_99009f55474bb74b46709f3fb0f7bfdf_0
;;; Fact-ids: 
(assert (! (HasType x_99009f55474bb74b46709f3fb0f7bfdf_0
StackMachine.typ)
:named binder_x_99009f55474bb74b46709f3fb0f7bfdf_0))
;;;;;;;;;;;;;;;;e : StackMachine.texp t (StackMachine.texp t)
(declare-fun x_e9914cc59dbecc2ac85148e3e6b7dd9a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
;;; Fact-ids: 
(assert (! (HasType x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0))
:named binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
(declare-fun Tm_refine_0225c97f916772d3c6c7d58d73236e30 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(127,23-131,72); use=StackMachine.fst(127,23-131,72)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_0225c97f916772d3c6c7d58d73236e30 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_0225c97f916772d3c6c7d58d73236e30 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_0225c97f916772d3c6c7d58d73236e30))

:named refinement_kinding_Tm_refine_0225c97f916772d3c6c7d58d73236e30))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(127,23-131,72); use=StackMachine.fst(127,23-131,72)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0225c97f916772d3c6c7d58d73236e30 @x2))
(and (HasTypeFuel @u0
@x1
(StackMachine.texp @x2))

;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(128,2-131,72)

;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(128,2-131,72)
(Valid 
;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(128,2-131,72)
(Prims.precedes (StackMachine.texp @x2)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x1
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0225c97f916772d3c6c7d58d73236e30 @x2)))
:qid refinement_interpretation_Tm_refine_0225c97f916772d3c6c7d58d73236e30))

:named refinement_interpretation_Tm_refine_0225c97f916772d3c6c7d58d73236e30))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0225c97f916772d3c6c7d58d73236e30
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(127,23-131,72); use=StackMachine.fst(127,23-131,72)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_0225c97f916772d3c6c7d58d73236e30 @x0)))
(Valid (Prims.hasEq (StackMachine.texp @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_0225c97f916772d3c6c7d58d73236e30 @x0))))
:qid haseqTm_refine_0225c97f916772d3c6c7d58d73236e30))

:named haseqTm_refine_0225c97f916772d3c6c7d58d73236e30))
(declare-fun StackMachine.texpDenote (Term Term) Term)

;;;;;;;;;;;;;;;;e: texp t {e << e} -> Prims.Tot (typeDenote t)
(declare-fun Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1
Tm_type)
:named kinding_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(108,12-131,72); use=StackMachine.fst(127,20-131,72)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1))
:qid StackMachine_pre_typing_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1))

:named StackMachine_pre_typing_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(108,12-131,72); use=StackMachine.fst(127,20-131,72)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1)
(and 
;; def=StackMachine.fst(108,12-131,72); use=StackMachine.fst(127,20-131,72)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
(Tm_refine_0225c97f916772d3c6c7d58d73236e30 @x1)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(StackMachine.typeDenote @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1.1))

(IsTotFun @x0)

;; def=StackMachine.fst(108,12-131,72); use=StackMachine.fst(127,20-131,72)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.typ)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1))
:qid StackMachine_interpretation_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1))

:named StackMachine_interpretation_Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1))
(declare-fun StackMachine.texpDenote@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.texpDenote@tok
@x0)
@x1)
(StackMachine.texpDenote @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.texpDenote@tok
@x0)
@x1))
:qid token_correspondence_StackMachine.texpDenote))

:named token_correspondence_StackMachine.texpDenote))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.texpDenote@tok
Tm_arrow_c0f4b27643771ae97a0e1c3b5e709ab1))

;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.texpDenote@tok
@x1)
@x2)
(StackMachine.texpDenote @x1
@x2))
 

:pattern ((StackMachine.texpDenote @x1
@x2))
:qid function_token_typing_StackMachine.texpDenote.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.texpDenote@tok))
:qid function_token_typing_StackMachine.texpDenote))

:named function_token_typing_StackMachine.texpDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(Tm_refine_0225c97f916772d3c6c7d58d73236e30 @x0)))
(HasType (StackMachine.texpDenote @x0
@x1)
(StackMachine.typeDenote @x0)))
 

:pattern ((StackMachine.texpDenote @x0
@x1))
:qid typing_StackMachine.texpDenote))

:named typing_StackMachine.texpDenote))
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
StackMachine.tbinopDenote@tok))
:named @kick_partial_app_7d3131a6cbba5c8c222b425c713d7331))


; Encoding query formula : forall (k: Prims.pure_post (StackMachine.typeDenote t)).
;   (forall (x: StackMachine.typeDenote t). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(TNConst? e) /\ ~(TBConst? e) /\ ~(TBinop? e) ==> Prims.l_False) /\
;   (forall (b: Prims.nat).
;       e == StackMachine.TNConst b ==> Prims.has_type b (StackMachine.typeDenote t)) /\
;   (~(TNConst? e) ==>
;     (forall (b: Prims.bool).
;         e == StackMachine.TBConst b ==> Prims.has_type b (StackMachine.typeDenote t)) /\
;     (~(TBConst? e) ==>
;       (forall (b: StackMachine.typ)
;           (b: StackMachine.typ)
;           (b: StackMachine.typ)
;           (b: StackMachine.tbinop b b b)
;           (b: StackMachine.texp b)
;           (b: StackMachine.texp b).
;           e == StackMachine.TBinop b b b ==>
;           b << e /\
;           (forall (any_result: StackMachine.texp b).
;               b == any_result ==>
;               (forall (any_result: StackMachine.typeDenote b).
;                   StackMachine.texpDenote b == any_result ==>
;                   b << e /\
;                   (forall (any_result: StackMachine.texp b).
;                       b == any_result ==>
;                       (forall (any_result: StackMachine.typeDenote b).
;                           StackMachine.texpDenote b == any_result ==>
;                           (forall (any_result: StackMachine.typeDenote b).
;                               StackMachine.tbinopDenote b
;                                 (StackMachine.texpDenote b)
;                                 (StackMachine.texpDenote b) ==
;                               any_result ==>
;                               Prims.has_type (StackMachine.tbinopDenote b
;                                     (StackMachine.texpDenote b)
;                                     (StackMachine.texpDenote b))
;                                 (match t with
;                                   | StackMachine.Nat -> Prims.nat
;                                   | StackMachine.Bool -> Prims.bool)))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec texpDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (StackMachine.typeDenote x_99009f55474bb74b46709f3fb0f7bfdf_0)))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(128,2-131,72)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(128,2-131,72)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(128,2-131,72)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(128,2-131,72)
(and (implies 
;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(and 
;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(not 
;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(not 
;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(not 
;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(128,2-131,72)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Prims.nat)

;; def=StackMachine.fst(127,23-129,15); use=StackMachine.fst(128,8-129,15)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TNConst @x1))
)

;; def=StackMachine.fst(129,14-129,15); use=StackMachine.fst(129,19-129,20)
(or label_2
(HasType @x1
(StackMachine.typeDenote x_99009f55474bb74b46709f3fb0f7bfdf_0)))
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(128,2-131,72)
(not 
;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=Prims.fst(389,2-389,39); use=StackMachine.fst(128,2-131,72)
(and 
;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(128,2-131,72)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Prims.bool)

;; def=StackMachine.fst(127,23-130,15); use=StackMachine.fst(128,8-130,15)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TBConst @x1))
)

;; def=StackMachine.fst(130,14-130,15); use=StackMachine.fst(130,19-130,20)
(or label_3
(HasType @x1
(StackMachine.typeDenote x_99009f55474bb74b46709f3fb0f7bfdf_0)))
)
 
;;no pats
:qid @query.3))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(128,2-131,72)
(not 
;; def=StackMachine.fst(127,23-127,24); use=StackMachine.fst(128,8-128,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(128,2-131,72)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(128,2-131,72)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(128,2-131,72)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(128,2-131,72)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(StackMachine.tbinop @x1
@x2
@x3))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(128,2-131,72)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.texp @x1))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(128,2-131,72)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StackMachine.texp @x2))

;; def=StackMachine.fst(127,23-131,20); use=StackMachine.fst(128,8-131,20)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(128,2-131,72)
(and 
;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(131,53-131,55)
(or label_4

;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(131,53-131,55)
(Valid 
;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(131,53-131,55)
(Prims.precedes (StackMachine.texp @x1)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x5
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(128,2-131,72)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.texp @x1))

;; def=StackMachine.fst(127,23-131,17); use=StackMachine.fst(128,2-131,72)
(= @x5
@x7)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(128,2-131,72)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StackMachine.typeDenote @x1))

;; def=dummy(0,0-0,0); use=StackMachine.fst(128,2-131,72)
(= (StackMachine.texpDenote @x1
@x5)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(128,2-131,72)
(and 
;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(131,69-131,71)
(or label_5

;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(131,69-131,71)
(Valid 
;; def=StackMachine.fst(128,2-131,72); use=StackMachine.fst(131,69-131,71)
(Prims.precedes (StackMachine.texp @x2)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x6
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(128,2-131,72)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StackMachine.texp @x2))

;; def=StackMachine.fst(127,23-131,20); use=StackMachine.fst(128,2-131,72)
(= @x6
@x9)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(128,2-131,72)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(StackMachine.typeDenote @x2))

;; def=dummy(0,0-0,0); use=StackMachine.fst(128,2-131,72)
(= (StackMachine.texpDenote @x2
@x6)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(128,2-131,72)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(StackMachine.typeDenote @x3))

;; def=StackMachine.fst(127,41-131,72); use=StackMachine.fst(128,2-131,72)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinopDenote@tok
@x1)
@x2)
@x3)
@x4)
(StackMachine.texpDenote @x1
@x5))
(StackMachine.texpDenote @x2
@x6))
@x11)
)

;; def=StackMachine.fst(131,24-131,72); use=StackMachine.fst(131,24-131,72)
(or label_6
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinopDenote@tok
@x1)
@x2)
@x3)
@x4)
(StackMachine.texpDenote @x1
@x5))
(StackMachine.texpDenote @x2
@x6))
(let ((@lb12 x_99009f55474bb74b46709f3fb0f7bfdf_0))
(ite (is-StackMachine.Nat @lb12)
Prims.nat
(ite (is-StackMachine.Bool @lb12)
Prims.bool
Tm_unit)))))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.texpDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_99009f55474bb74b46709f3fb0f7bfdf_0, binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1, constructor_distinct_StackMachine.Bool, constructor_distinct_StackMachine.Nat, data_elim_StackMachine.TBConst, data_elim_StackMachine.TBinop, data_elim_StackMachine.TNConst, disc_equation_StackMachine.TBConst, disc_equation_StackMachine.TBinop, disc_equation_StackMachine.TNConst, equality_tok_StackMachine.Bool@tok, equality_tok_StackMachine.Nat@tok, equation_StackMachine.typeDenote, fuel_guarded_inversion_StackMachine.tbinop, fuel_guarded_inversion_StackMachine.texp, fuel_guarded_inversion_StackMachine.typ, projection_inverse_BoxBool_proj_0, subterm_ordering_StackMachine.TBinop

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec texpDenote


; <Start encoding let rec texpDenote>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.texpDenote.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.texpDenote.fuel_instrumented_token () Term)
(declare-fun StackMachine.texpDenote (Term Term) Term)
(declare-fun StackMachine.texpDenote@tok () Term)
;;;;;;;;;;;;;;;;e: texp t -> Prims.Tot (typeDenote t)
(declare-fun Tm_arrow_e2f1b4a7f92f59a291d4ab8b98d42a9b () Term)

; </end encoding let rec texpDenote>


; encoding sigelt let tstack


; <Start encoding let tstack>

(declare-fun StackMachine.tstack () Term)

; </end encoding let tstack>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type StackMachine.tinstr


; <Start encoding type StackMachine.tinstr>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.tinstr (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StackMachine.tinstr@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TiNConst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiNConst_s (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiNConst__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TiNConst
(declare-fun StackMachine.TiNConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TiBConst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBConst_s (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBConst__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TiBConst
(declare-fun StackMachine.TiBConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TiBinop (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop_arg1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop_arg2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop_res (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop_s (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TiBinop
(declare-fun StackMachine.TiBinop@tok () Term)
;;;;;;;;;;;;;;;;s: tstack -> _1: Prims.nat -> tinstr s (Nat :: s)
(declare-fun Tm_arrow_671b60177a15d7a969354dc63cf4462e () Term)
;;;;;;;;;;;;;;;;s: tstack -> _1: Prims.bool -> tinstr s (Bool :: s)
(declare-fun Tm_arrow_a99c46ed79ba3831d36071565418b0ba () Term)
;;;;;;;;;;;;;;;;_4: tbinop arg1 arg2 res -> tinstr (arg1 :: arg2 :: s) (res :: s)
(declare-fun Tm_arrow_af6450916757221a268c954472b506f6 () Term)

; <start constructor StackMachine.tinstr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.tinstr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
608)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(StackMachine.tinstr @x0
@x1))
 
;;no pats
:qid is-StackMachine.tinstr))))

; </end constructor StackMachine.tinstr>


; <start constructor StackMachine.TiNConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TiNConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
615)
(= __@x0
(StackMachine.TiNConst (StackMachine.TiNConst_s __@x0)
(StackMachine.TiNConst__1 __@x0)))))

; </end constructor StackMachine.TiNConst>


; <start constructor StackMachine.TiBConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TiBConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
622)
(= __@x0
(StackMachine.TiBConst (StackMachine.TiBConst_s __@x0)
(StackMachine.TiBConst__1 __@x0)))))

; </end constructor StackMachine.TiBConst>


; <start constructor StackMachine.TiBinop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TiBinop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
629)
(= __@x0
(StackMachine.TiBinop (StackMachine.TiBinop_arg1 __@x0)
(StackMachine.TiBinop_arg2 __@x0)
(StackMachine.TiBinop_res __@x0)
(StackMachine.TiBinop_s __@x0)
(StackMachine.TiBinop__4 __@x0)))))

; </end constructor StackMachine.TiBinop>


; </end encoding type StackMachine.tinstr>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.tstack; Namespace StackMachine
(assert (! (HasType StackMachine.tstack
Tm_type)
:named typing_StackMachine.tstack))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.tinstr@tok
@x0)
@x1)
(StackMachine.tinstr @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.tinstr@tok
@x0)
@x1))

:pattern ((StackMachine.tinstr @x0
@x1))
:qid token_correspondence_StackMachine.tinstr@tok))

:named token_correspondence_StackMachine.tinstr@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TiNConst @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TiNConst @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid subterm_ordering_StackMachine.TiNConst))

:named subterm_ordering_StackMachine.TiNConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7)))
:qid subterm_ordering_StackMachine.TiBinop))

:named subterm_ordering_StackMachine.TiBinop))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TiBConst @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TiBConst @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid subterm_ordering_StackMachine.TiBConst))

:named subterm_ordering_StackMachine.TiBConst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.TiNConst_s (StackMachine.TiNConst @x0
@x1))
@x0)
 

:pattern ((StackMachine.TiNConst @x0
@x1))
:qid projection_inverse_StackMachine.TiNConst_s))

:named projection_inverse_StackMachine.TiNConst_s))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.TiNConst__1 (StackMachine.TiNConst @x0
@x1))
@x1)
 

:pattern ((StackMachine.TiNConst @x0
@x1))
:qid projection_inverse_StackMachine.TiNConst__1))

:named projection_inverse_StackMachine.TiNConst__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop_s (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop_s))

:named projection_inverse_StackMachine.TiBinop_s))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop_res (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop_res))

:named projection_inverse_StackMachine.TiBinop_res))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop_arg2 (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop_arg2))

:named projection_inverse_StackMachine.TiBinop_arg2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop_arg1 (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop_arg1))

:named projection_inverse_StackMachine.TiBinop_arg1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop__4 (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop__4))

:named projection_inverse_StackMachine.TiBinop__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.TiBConst_s (StackMachine.TiBConst @x0
@x1))
@x0)
 

:pattern ((StackMachine.TiBConst @x0
@x1))
:qid projection_inverse_StackMachine.TiBConst_s))

:named projection_inverse_StackMachine.TiBConst_s))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.TiBConst__1 (StackMachine.TiBConst @x0
@x1))
@x1)
 

:pattern ((StackMachine.TiBConst @x0
@x1))
:qid projection_inverse_StackMachine.TiBConst__1))

:named projection_inverse_StackMachine.TiBConst__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! (is-Tm_arrow (PreType StackMachine.tinstr@tok))
:named pre_kinding_StackMachine.tinstr@tok))
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! (and (IsTotFun StackMachine.tinstr@tok)

;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT StackMachine.tinstr@tok
@x0))
 

:pattern ((ApplyTT StackMachine.tinstr@tok
@x0))
:qid kinding_StackMachine.tinstr@tok))


;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack))
(HasType (StackMachine.tinstr @x0
@x1)
Tm_type))
 

:pattern ((StackMachine.tinstr @x0
@x1))
:qid kinding_StackMachine.tinstr@tok.1))
)
:named kinding_StackMachine.tinstr@tok))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.tstack; Namespace StackMachine
(assert (! (HasType StackMachine.tstack
Tm_type)
:named function_token_typing_StackMachine.tstack))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tinstr @x2
@x3))
(or (and (is-StackMachine.TiNConst @x1)
(= @x2
(StackMachine.TiNConst_s @x1))
(= @x3
(Prims.Cons StackMachine.typ
StackMachine.Nat@tok
(StackMachine.TiNConst_s @x1))))
(and (is-StackMachine.TiBConst @x1)
(= @x2
(StackMachine.TiBConst_s @x1))
(= @x3
(Prims.Cons StackMachine.typ
StackMachine.Bool@tok
(StackMachine.TiBConst_s @x1))))
(and (is-StackMachine.TiBinop @x1)
(= @x2
(Prims.Cons StackMachine.typ
(StackMachine.TiBinop_arg1 @x1)
(Prims.Cons StackMachine.typ
(StackMachine.TiBinop_arg2 @x1)
(StackMachine.TiBinop_s @x1))))
(= @x3
(Prims.Cons StackMachine.typ
(StackMachine.TiBinop_res @x1)
(StackMachine.TiBinop_s @x1))))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tinstr @x2
@x3)))
:qid fuel_guarded_inversion_StackMachine.tinstr))

:named fuel_guarded_inversion_StackMachine.tinstr))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! (= 609
(Term_constr_id StackMachine.tinstr@tok))
:named fresh_token_StackMachine.tinstr@tok))
;;;;;;;;;;;;;;;;Equation for StackMachine.tstack
;;; Fact-ids: Name StackMachine.tstack; Namespace StackMachine
(assert (! (= StackMachine.tstack
(Prims.list StackMachine.typ))
:named equation_StackMachine.tstack))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
Prims.nat)
(= @x1
@x3)
(= (Prims.Cons StackMachine.typ
StackMachine.Nat@tok
@x1)
@x4))
(HasTypeFuel @u0
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid data_typing_intro_StackMachine.TiNConst@tok))

:named data_typing_intro_StackMachine.TiNConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.typ)
(HasTypeFuel @u0
@x2
StackMachine.typ)
(HasTypeFuel @u0
@x3
StackMachine.typ)
(HasTypeFuel @u0
@x4
StackMachine.tstack)
(HasTypeFuel @u0
@x5
(StackMachine.tbinop @x1
@x2
@x3))
(= (Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
@x4))
@x6)
(= (Prims.Cons StackMachine.typ
@x3
@x4)
@x7))
(HasTypeFuel @u0
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7)))
:qid data_typing_intro_StackMachine.TiBinop@tok))

:named data_typing_intro_StackMachine.TiBinop@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
Prims.bool)
(= @x1
@x3)
(= (Prims.Cons StackMachine.typ
StackMachine.Bool@tok
@x1)
@x4))
(HasTypeFuel @u0
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid data_typing_intro_StackMachine.TiBConst@tok))

:named data_typing_intro_StackMachine.TiBConst@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4))
(and (= (Prims.Cons StackMachine.typ
StackMachine.Nat@tok
@x1)
@x4)
(= @x1
@x3)
(HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
Prims.nat)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid data_elim_StackMachine.TiNConst))

:named data_elim_StackMachine.TiNConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7))
(and (= (Prims.Cons StackMachine.typ
@x3
@x4)
@x7)
(= (Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
@x4))
@x6)
(HasTypeFuel @u0
@x1
StackMachine.typ)
(HasTypeFuel @u0
@x2
StackMachine.typ)
(HasTypeFuel @u0
@x3
StackMachine.typ)
(HasTypeFuel @u0
@x4
StackMachine.tstack)
(HasTypeFuel @u0
@x5
(StackMachine.tbinop @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7)))
:qid data_elim_StackMachine.TiBinop))

:named data_elim_StackMachine.TiBinop))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4))
(and (= (Prims.Cons StackMachine.typ
StackMachine.Bool@tok
@x1)
@x4)
(= @x1
@x3)
(HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
Prims.bool)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid data_elim_StackMachine.TiBConst))

:named data_elim_StackMachine.TiBConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 608
(Term_constr_id (StackMachine.tinstr @x0
@x1)))
 

:pattern ((StackMachine.tinstr @x0
@x1))
:qid constructor_distinct_StackMachine.tinstr))

:named constructor_distinct_StackMachine.tinstr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 615
(Term_constr_id (StackMachine.TiNConst @x0
@x1)))
 

:pattern ((StackMachine.TiNConst @x0
@x1))
:qid constructor_distinct_StackMachine.TiNConst))

:named constructor_distinct_StackMachine.TiNConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 629
(Term_constr_id (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_StackMachine.TiBinop))

:named constructor_distinct_StackMachine.TiBinop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 622
(Term_constr_id (StackMachine.TiBConst @x0
@x1)))
 

:pattern ((StackMachine.TiBConst @x0
@x1))
:qid constructor_distinct_StackMachine.TiBConst))

:named constructor_distinct_StackMachine.TiBConst))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StackMachine.tinstr @x2
@x3))
(= (StackMachine.tinstr @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StackMachine.tinstr @x2
@x3)))
:qid StackMachine_pretyping_457f81400423e6ce6c0033ccfce0e99d))

:named StackMachine_pretyping_457f81400423e6ce6c0033ccfce0e99d))
(push) ;; push{4

; Starting query at StackMachine.fst(135,0-139,73)

(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (_: StackMachine.tstack) (_: StackMachine.tstack).
;   (forall (_: StackMachine.tstack) (_: StackMachine.tstack).
;       {:pattern Prims.hasEq (StackMachine.tinstr _ _)}
;       Prims.hasEq (StackMachine.tinstr _ _)) ==>
;   (forall (s: StackMachine.tstack) (_1: Prims.nat).
;       Prims.hasEq StackMachine.tstack /\ Prims.hasEq Prims.nat) /\
;   (forall (s: StackMachine.tstack) (_1: Prims.bool).
;       (*  - Failed to prove that the type
;     'StackMachine.tinstr'
;     supports decidable equality because of this argument.
;   - Add either the 'noeq' or 'unopteq' qualifier
; *)
;       Prims.hasEq StackMachine.tstack) /\
;   (forall (arg1: StackMachine.typ)
;       (arg2: StackMachine.typ)
;       (res: StackMachine.typ)
;       (s: StackMachine.tstack)
;       (_4: StackMachine.tbinop arg1 arg2 res).
;       Prims.hasEq StackMachine.typ /\ Prims.hasEq StackMachine.typ /\ Prims.hasEq StackMachine.typ /\
;       Prims.hasEq StackMachine.tstack /\ Prims.hasEq (StackMachine.tbinop arg1 arg2 res))


; Context: While encoding a query
; While typechecking the top-level declaration `type StackMachine.tinstr`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
StackMachine.tstack)
(HasType @x3
StackMachine.tstack))

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq (StackMachine.tinstr @x2
@x3))
)
)
 

:pattern ((Prims.hasEq (StackMachine.tinstr @x2
@x3)))
:qid @query.1))
)

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(and 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
StackMachine.tstack)
(HasType @x3
Prims.nat))

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(and 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(136,15-136,21)
(or label_1

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq StackMachine.tstack)
)
)


;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(136,25-136,28)
(or label_2

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq Prims.nat)
)
)
)
)
 
;;no pats
:qid @query.2))


;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
StackMachine.tstack)
(HasType @x3
Prims.bool))

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(137,15-137,21)
(or label_3

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq StackMachine.tstack)
)
)
)
 
;;no pats
:qid @query.3))


;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x2
StackMachine.typ)
(HasType @x3
StackMachine.typ)
(HasType @x4
StackMachine.typ)
(HasType @x5
StackMachine.tstack)
(HasType @x6
(StackMachine.tbinop @x2
@x3
@x4)))

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(and 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(138,18-138,21)
(or label_4

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq StackMachine.typ)
)
)


;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(138,31-138,34)
(or label_5

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq StackMachine.typ)
)
)


;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(138,43-138,46)
(or label_6

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq StackMachine.typ)
)
)


;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(138,53-138,59)
(or label_7

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq StackMachine.tstack)
)
)


;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(139,12-139,32)
(or label_8

;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Valid 
;; def=StackMachine.fst(135,0-139,73); use=StackMachine.fst(135,0-139,73)
(Prims.hasEq (StackMachine.tbinop @x2
@x3
@x4))
)
)
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tinstr, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf, assumption_Prims.list__uu___haseq, assumption_StackMachine.tbinop__uu___haseq, assumption_StackMachine.typ__uu___haseq, equality_tok_StackMachine.Nat@tok, equation_Prims.eqtype, equation_Prims.nat, equation_StackMachine.tstack, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, kinding_StackMachine.typ@tok, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int, typing_tok_StackMachine.Nat@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type StackMachine.tinstr


; <Start encoding type StackMachine.tinstr>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.tinstr (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StackMachine.tinstr@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TiNConst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiNConst_s (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiNConst__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TiNConst
(declare-fun StackMachine.TiNConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TiBConst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBConst_s (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBConst__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TiBConst
(declare-fun StackMachine.TiBConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TiBinop (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop_arg1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop_arg2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop_res (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop_s (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TiBinop__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TiBinop
(declare-fun StackMachine.TiBinop@tok () Term)
;;;;;;;;;;;;;;;;s: tstack -> _1: Prims.nat -> tinstr s (Nat :: s)
(declare-fun Tm_arrow_671b60177a15d7a969354dc63cf4462e () Term)
;;;;;;;;;;;;;;;;s: tstack -> _1: Prims.bool -> tinstr s (Bool :: s)
(declare-fun Tm_arrow_a99c46ed79ba3831d36071565418b0ba () Term)
;;;;;;;;;;;;;;;;_4: tbinop arg1 arg2 res -> tinstr (arg1 :: arg2 :: s) (res :: s)
(declare-fun Tm_arrow_af6450916757221a268c954472b506f6 () Term)

; <start constructor StackMachine.tinstr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.tinstr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
635)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(StackMachine.tinstr @x0
@x1))
 
;;no pats
:qid is-StackMachine.tinstr))))

; </end constructor StackMachine.tinstr>


; <start constructor StackMachine.TiNConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TiNConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
642)
(= __@x0
(StackMachine.TiNConst (StackMachine.TiNConst_s __@x0)
(StackMachine.TiNConst__1 __@x0)))))

; </end constructor StackMachine.TiNConst>


; <start constructor StackMachine.TiBConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TiBConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
649)
(= __@x0
(StackMachine.TiBConst (StackMachine.TiBConst_s __@x0)
(StackMachine.TiBConst__1 __@x0)))))

; </end constructor StackMachine.TiBConst>


; <start constructor StackMachine.TiBinop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TiBinop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
656)
(= __@x0
(StackMachine.TiBinop (StackMachine.TiBinop_arg1 __@x0)
(StackMachine.TiBinop_arg2 __@x0)
(StackMachine.TiBinop_res __@x0)
(StackMachine.TiBinop_s __@x0)
(StackMachine.TiBinop__4 __@x0)))))

; </end constructor StackMachine.TiBinop>


; </end encoding type StackMachine.tinstr>


; encoding sigelt assume StackMachine.tinstr__uu___haseq


; <Start encoding assume StackMachine.tinstr__uu___haseq>


; </end encoding assume StackMachine.tinstr__uu___haseq>


; encoding sigelt val StackMachine.uu___is_TiNConst


; <Start encoding val StackMachine.uu___is_TiNConst>

(declare-fun StackMachine.uu___is_TiNConst (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: tinstr _ _ -> Prims.bool
(declare-fun Tm_arrow_96a2a1fc5649078a22e38b6441062e93 () Term)
(declare-fun StackMachine.uu___is_TiNConst@tok () Term)

; </end encoding val StackMachine.uu___is_TiNConst>


; encoding sigelt let uu___is_TiNConst


; <Skipped let uu___is_TiNConst/>


; encoding sigelt val StackMachine.__proj__TiNConst__item__s


; <Start encoding val StackMachine.__proj__TiNConst__item__s>

(declare-fun Tm_refine_a56f6ca6150cb01114a8fab36ff93703 (Term Term) Term)
(declare-fun StackMachine.__proj__TiNConst__item__s (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tinstr _ _ {TiNConst? _} -> tstack
(declare-fun Tm_arrow_f433e9389d87dd0dc2e3578d91b3d6f3 () Term)
(declare-fun StackMachine.__proj__TiNConst__item__s@tok () Term)

; </end encoding val StackMachine.__proj__TiNConst__item__s>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TiNConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tinstr @x0
@x1)))
(HasType (StackMachine.uu___is_TiNConst @x0
@x1
@x2)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TiNConst @x0
@x1
@x2))
:qid typing_StackMachine.uu___is_TiNConst))

:named typing_StackMachine.uu___is_TiNConst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.tstack; Namespace StackMachine
(assert (! (HasType StackMachine.tstack
Tm_type)
:named typing_StackMachine.tstack))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.tinstr@tok
@x0)
@x1)
(StackMachine.tinstr @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.tinstr@tok
@x0)
@x1))

:pattern ((StackMachine.tinstr @x0
@x1))
:qid token_correspondence_StackMachine.tinstr@tok))

:named token_correspondence_StackMachine.tinstr@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TiNConst @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TiNConst @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid subterm_ordering_StackMachine.TiNConst))

:named subterm_ordering_StackMachine.TiNConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7)))
:qid subterm_ordering_StackMachine.TiBinop))

:named subterm_ordering_StackMachine.TiBinop))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TiBConst @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TiBConst @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid subterm_ordering_StackMachine.TiBConst))

:named subterm_ordering_StackMachine.TiBConst))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TiNConst__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_a56f6ca6150cb01114a8fab36ff93703 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_a56f6ca6150cb01114a8fab36ff93703 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_a56f6ca6150cb01114a8fab36ff93703))

:named refinement_kinding_Tm_refine_a56f6ca6150cb01114a8fab36ff93703))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TiNConst__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a56f6ca6150cb01114a8fab36ff93703 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(StackMachine.tinstr @x2
@x3))

;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(BoxBool_proj_0 (StackMachine.uu___is_TiNConst @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a56f6ca6150cb01114a8fab36ff93703 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_a56f6ca6150cb01114a8fab36ff93703))

:named refinement_interpretation_Tm_refine_a56f6ca6150cb01114a8fab36ff93703))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.TiNConst_s (StackMachine.TiNConst @x0
@x1))
@x0)
 

:pattern ((StackMachine.TiNConst @x0
@x1))
:qid projection_inverse_StackMachine.TiNConst_s))

:named projection_inverse_StackMachine.TiNConst_s))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.TiNConst__1 (StackMachine.TiNConst @x0
@x1))
@x1)
 

:pattern ((StackMachine.TiNConst @x0
@x1))
:qid projection_inverse_StackMachine.TiNConst__1))

:named projection_inverse_StackMachine.TiNConst__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop_s (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop_s))

:named projection_inverse_StackMachine.TiBinop_s))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop_res (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop_res))

:named projection_inverse_StackMachine.TiBinop_res))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop_arg2 (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop_arg2))

:named projection_inverse_StackMachine.TiBinop_arg2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop_arg1 (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop_arg1))

:named projection_inverse_StackMachine.TiBinop_arg1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TiBinop__4 (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TiBinop__4))

:named projection_inverse_StackMachine.TiBinop__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.TiBConst_s (StackMachine.TiBConst @x0
@x1))
@x0)
 

:pattern ((StackMachine.TiBConst @x0
@x1))
:qid projection_inverse_StackMachine.TiBConst_s))

:named projection_inverse_StackMachine.TiBConst_s))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.TiBConst__1 (StackMachine.TiBConst @x0
@x1))
@x1)
 

:pattern ((StackMachine.TiBConst @x0
@x1))
:qid projection_inverse_StackMachine.TiBConst__1))

:named projection_inverse_StackMachine.TiBConst__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! (is-Tm_arrow (PreType StackMachine.tinstr@tok))
:named pre_kinding_StackMachine.tinstr@tok))
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! (and (IsTotFun StackMachine.tinstr@tok)

;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT StackMachine.tinstr@tok
@x0))
 

:pattern ((ApplyTT StackMachine.tinstr@tok
@x0))
:qid kinding_StackMachine.tinstr@tok))


;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack))
(HasType (StackMachine.tinstr @x0
@x1)
Tm_type))
 

:pattern ((StackMachine.tinstr @x0
@x1))
:qid kinding_StackMachine.tinstr@tok.1))
)
:named kinding_StackMachine.tinstr@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a56f6ca6150cb01114a8fab36ff93703
;;; Fact-ids: Name StackMachine.__proj__TiNConst__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a56f6ca6150cb01114a8fab36ff93703 @x0
@x1)))
(Valid (Prims.hasEq (StackMachine.tinstr @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a56f6ca6150cb01114a8fab36ff93703 @x0
@x1))))
:qid haseqTm_refine_a56f6ca6150cb01114a8fab36ff93703))

:named haseqTm_refine_a56f6ca6150cb01114a8fab36ff93703))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StackMachine.tstack; Namespace StackMachine
(assert (! (HasType StackMachine.tstack
Tm_type)
:named function_token_typing_StackMachine.tstack))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tinstr @x2
@x3))
(or (and (is-StackMachine.TiNConst @x1)
(= @x2
(StackMachine.TiNConst_s @x1))
(= @x3
(Prims.Cons StackMachine.typ
StackMachine.Nat@tok
(StackMachine.TiNConst_s @x1))))
(and (is-StackMachine.TiBConst @x1)
(= @x2
(StackMachine.TiBConst_s @x1))
(= @x3
(Prims.Cons StackMachine.typ
StackMachine.Bool@tok
(StackMachine.TiBConst_s @x1))))
(and (is-StackMachine.TiBinop @x1)
(= @x2
(Prims.Cons StackMachine.typ
(StackMachine.TiBinop_arg1 @x1)
(Prims.Cons StackMachine.typ
(StackMachine.TiBinop_arg2 @x1)
(StackMachine.TiBinop_s @x1))))
(= @x3
(Prims.Cons StackMachine.typ
(StackMachine.TiBinop_res @x1)
(StackMachine.TiBinop_s @x1))))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tinstr @x2
@x3)))
:qid fuel_guarded_inversion_StackMachine.tinstr))

:named fuel_guarded_inversion_StackMachine.tinstr))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! (= 636
(Term_constr_id StackMachine.tinstr@tok))
:named fresh_token_StackMachine.tinstr@tok))
;;;;;;;;;;;;;;;;Equation for StackMachine.tstack
;;; Fact-ids: Name StackMachine.tstack; Namespace StackMachine
(assert (! (= StackMachine.tstack
(Prims.list StackMachine.typ))
:named equation_StackMachine.tstack))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TiNConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.uu___is_TiNConst @x0
@x1
@x2)
(BoxBool (is-StackMachine.TiNConst @x2)))
 

:pattern ((StackMachine.uu___is_TiNConst @x0
@x1
@x2))
:qid disc_equation_StackMachine.TiNConst))

:named disc_equation_StackMachine.TiNConst))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
Prims.nat)
(= @x1
@x3)
(= (Prims.Cons StackMachine.typ
StackMachine.Nat@tok
@x1)
@x4))
(HasTypeFuel @u0
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid data_typing_intro_StackMachine.TiNConst@tok))

:named data_typing_intro_StackMachine.TiNConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.typ)
(HasTypeFuel @u0
@x2
StackMachine.typ)
(HasTypeFuel @u0
@x3
StackMachine.typ)
(HasTypeFuel @u0
@x4
StackMachine.tstack)
(HasTypeFuel @u0
@x5
(StackMachine.tbinop @x1
@x2
@x3))
(= (Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
@x4))
@x6)
(= (Prims.Cons StackMachine.typ
@x3
@x4)
@x7))
(HasTypeFuel @u0
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7)))
:qid data_typing_intro_StackMachine.TiBinop@tok))

:named data_typing_intro_StackMachine.TiBinop@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
Prims.bool)
(= @x1
@x3)
(= (Prims.Cons StackMachine.typ
StackMachine.Bool@tok
@x1)
@x4))
(HasTypeFuel @u0
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid data_typing_intro_StackMachine.TiBConst@tok))

:named data_typing_intro_StackMachine.TiBConst@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4))
(and (= (Prims.Cons StackMachine.typ
StackMachine.Nat@tok
@x1)
@x4)
(= @x1
@x3)
(HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
Prims.nat)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiNConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid data_elim_StackMachine.TiNConst))

:named data_elim_StackMachine.TiNConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7))
(and (= (Prims.Cons StackMachine.typ
@x3
@x4)
@x7)
(= (Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
@x4))
@x6)
(HasTypeFuel @u0
@x1
StackMachine.typ)
(HasTypeFuel @u0
@x2
StackMachine.typ)
(HasTypeFuel @u0
@x3
StackMachine.typ)
(HasTypeFuel @u0
@x4
StackMachine.tstack)
(HasTypeFuel @u0
@x5
(StackMachine.tbinop @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5)
(StackMachine.tinstr @x6
@x7)))
:qid data_elim_StackMachine.TiBinop))

:named data_elim_StackMachine.TiBinop))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4))
(and (= (Prims.Cons StackMachine.typ
StackMachine.Bool@tok
@x1)
@x4)
(= @x1
@x3)
(HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
Prims.bool)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TiBConst @x1
@x2)
(StackMachine.tinstr @x3
@x4)))
:qid data_elim_StackMachine.TiBConst))

:named data_elim_StackMachine.TiBConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 635
(Term_constr_id (StackMachine.tinstr @x0
@x1)))
 

:pattern ((StackMachine.tinstr @x0
@x1))
:qid constructor_distinct_StackMachine.tinstr))

:named constructor_distinct_StackMachine.tinstr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 642
(Term_constr_id (StackMachine.TiNConst @x0
@x1)))
 

:pattern ((StackMachine.TiNConst @x0
@x1))
:qid constructor_distinct_StackMachine.TiNConst))

:named constructor_distinct_StackMachine.TiNConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 656
(Term_constr_id (StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((StackMachine.TiBinop @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_StackMachine.TiBinop))

:named constructor_distinct_StackMachine.TiBinop))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 649
(Term_constr_id (StackMachine.TiBConst @x0
@x1)))
 

:pattern ((StackMachine.TiBConst @x0
@x1))
:qid constructor_distinct_StackMachine.TiBConst))

:named constructor_distinct_StackMachine.TiBConst))
;;;;;;;;;;;;;;;;Assumption: StackMachine.tinstr__uu___haseq
;;; Fact-ids: Name StackMachine.tinstr__uu___haseq; Namespace StackMachine
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack))
(Valid (Prims.hasEq (StackMachine.tinstr @x0
@x1))))
 

:pattern ((Prims.hasEq (StackMachine.tinstr @x0
@x1)))
:qid assumption_StackMachine.tinstr__uu___haseq))
:named assumption_StackMachine.tinstr__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.tinstr; Namespace StackMachine; Name StackMachine.TiNConst; Namespace StackMachine; Name StackMachine.TiBConst; Namespace StackMachine; Name StackMachine.TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(135,5-135,11); use=StackMachine.fst(135,5-135,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StackMachine.tinstr @x2
@x3))
(= (StackMachine.tinstr @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StackMachine.tinstr @x2
@x3)))
:qid StackMachine_pretyping_457f81400423e6ce6c0033ccfce0e99d))

:named StackMachine_pretyping_457f81400423e6ce6c0033ccfce0e99d))
(push) ;; push{2

; Starting query at StackMachine.fst(136,13-136,14)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiNConst? _}).
;   (*  - Could not prove post-condition
; *) ~(TiNConst? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiNConst__item__s`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_a56f6ca6150cb01114a8fab36ff93703 @x0
@x1))

;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,13-136,14)
(not 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,13-136,14)
(BoxBool_proj_0 (StackMachine.uu___is_TiNConst @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiNConst__item__s, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_a56f6ca6150cb01114a8fab36ff93703

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiNConst__item__s


; <Skipped let __proj__TiNConst__item__s/>


; encoding sigelt val StackMachine.__proj__TiNConst__item___1


; <Start encoding val StackMachine.__proj__TiNConst__item___1>


(declare-fun StackMachine.__proj__TiNConst__item___1 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tinstr _ _ {TiNConst? _} -> Prims.nat
(declare-fun Tm_arrow_7f33685ddd6037e5627eab974c56dcd2 () Term)
(declare-fun StackMachine.__proj__TiNConst__item___1@tok () Term)

; </end encoding val StackMachine.__proj__TiNConst__item___1>

(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiNConst? _}).
;   (*  - Could not prove post-condition
; *) ~(TiNConst? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiNConst__item___1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_a56f6ca6150cb01114a8fab36ff93703 @x0
@x1))

;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(not 
;; def=StackMachine.fst(136,2-136,10); use=StackMachine.fst(136,2-136,10)
(BoxBool_proj_0 (StackMachine.uu___is_TiNConst @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiNConst__item___1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_a56f6ca6150cb01114a8fab36ff93703

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiNConst__item___1


; <Skipped let __proj__TiNConst__item___1/>


; encoding sigelt val StackMachine.uu___is_TiBConst


; <Start encoding val StackMachine.uu___is_TiBConst>

(declare-fun StackMachine.uu___is_TiBConst (Term Term Term) Term)

(declare-fun StackMachine.uu___is_TiBConst@tok () Term)

; </end encoding val StackMachine.uu___is_TiBConst>


; encoding sigelt let uu___is_TiBConst


; <Skipped let uu___is_TiBConst/>


; encoding sigelt val StackMachine.__proj__TiBConst__item__s


; <Start encoding val StackMachine.__proj__TiBConst__item__s>

(declare-fun Tm_refine_55dae19a239461194000bc379645c48e (Term Term) Term)
(declare-fun StackMachine.__proj__TiBConst__item__s (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tinstr _ _ {TiBConst? _} -> tstack
(declare-fun Tm_arrow_b734a223e316d1060b6aeefe4bc00946 () Term)
(declare-fun StackMachine.__proj__TiBConst__item__s@tok () Term)

; </end encoding val StackMachine.__proj__TiBConst__item__s>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TiBConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tinstr @x0
@x1)))
(HasType (StackMachine.uu___is_TiBConst @x0
@x1
@x2)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TiBConst @x0
@x1
@x2))
:qid typing_StackMachine.uu___is_TiBConst))

:named typing_StackMachine.uu___is_TiBConst))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TiBConst__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_55dae19a239461194000bc379645c48e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_55dae19a239461194000bc379645c48e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_55dae19a239461194000bc379645c48e))

:named refinement_kinding_Tm_refine_55dae19a239461194000bc379645c48e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TiBConst__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_55dae19a239461194000bc379645c48e @x2
@x3))
(and (HasTypeFuel @u0
@x1
(StackMachine.tinstr @x2
@x3))

;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(BoxBool_proj_0 (StackMachine.uu___is_TiBConst @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_55dae19a239461194000bc379645c48e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_55dae19a239461194000bc379645c48e))

:named refinement_interpretation_Tm_refine_55dae19a239461194000bc379645c48e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_55dae19a239461194000bc379645c48e
;;; Fact-ids: Name StackMachine.__proj__TiBConst__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_55dae19a239461194000bc379645c48e @x0
@x1)))
(Valid (Prims.hasEq (StackMachine.tinstr @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_55dae19a239461194000bc379645c48e @x0
@x1))))
:qid haseqTm_refine_55dae19a239461194000bc379645c48e))

:named haseqTm_refine_55dae19a239461194000bc379645c48e))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TiBConst; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.uu___is_TiBConst @x0
@x1
@x2)
(BoxBool (is-StackMachine.TiBConst @x2)))
 

:pattern ((StackMachine.uu___is_TiBConst @x0
@x1
@x2))
:qid disc_equation_StackMachine.TiBConst))

:named disc_equation_StackMachine.TiBConst))
(push) ;; push{2

; Starting query at StackMachine.fst(137,13-137,14)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiBConst? _}).
;   (*  - Could not prove post-condition
; *) ~(TiBConst? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiBConst__item__s`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_55dae19a239461194000bc379645c48e @x0
@x1))

;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,13-137,14)
(not 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,13-137,14)
(BoxBool_proj_0 (StackMachine.uu___is_TiBConst @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiBConst__item__s, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_55dae19a239461194000bc379645c48e

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiBConst__item__s


; <Skipped let __proj__TiBConst__item__s/>


; encoding sigelt val StackMachine.__proj__TiBConst__item___1


; <Start encoding val StackMachine.__proj__TiBConst__item___1>


(declare-fun StackMachine.__proj__TiBConst__item___1 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tinstr _ _ {TiBConst? _} -> Prims.bool
(declare-fun Tm_arrow_da5c66319d052266fb5ebccced2f7c03 () Term)
(declare-fun StackMachine.__proj__TiBConst__item___1@tok () Term)

; </end encoding val StackMachine.__proj__TiBConst__item___1>

(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiBConst? _}).
;   (*  - Could not prove post-condition
; *) ~(TiBConst? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiBConst__item___1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_55dae19a239461194000bc379645c48e @x0
@x1))

;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(not 
;; def=StackMachine.fst(137,2-137,10); use=StackMachine.fst(137,2-137,10)
(BoxBool_proj_0 (StackMachine.uu___is_TiBConst @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiBConst__item___1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_55dae19a239461194000bc379645c48e

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiBConst__item___1


; <Skipped let __proj__TiBConst__item___1/>


; encoding sigelt val StackMachine.uu___is_TiBinop


; <Start encoding val StackMachine.uu___is_TiBinop>

(declare-fun StackMachine.uu___is_TiBinop (Term Term Term) Term)

(declare-fun StackMachine.uu___is_TiBinop@tok () Term)

; </end encoding val StackMachine.uu___is_TiBinop>


; encoding sigelt let uu___is_TiBinop


; <Skipped let uu___is_TiBinop/>


; encoding sigelt val StackMachine.__proj__TiBinop__item__arg1


; <Start encoding val StackMachine.__proj__TiBinop__item__arg1>

(declare-fun Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed (Term Term) Term)
(declare-fun StackMachine.__proj__TiBinop__item__arg1 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tinstr _ _ {TiBinop? _} -> typ
(declare-fun Tm_arrow_89ae170918a2f90254145b9b1630627c () Term)
(declare-fun StackMachine.__proj__TiBinop__item__arg1@tok () Term)

; </end encoding val StackMachine.__proj__TiBinop__item__arg1>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tinstr @x0
@x1)))
(HasType (StackMachine.uu___is_TiBinop @x0
@x1
@x2)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TiBinop @x0
@x1
@x2))
:qid typing_StackMachine.uu___is_TiBinop))

:named typing_StackMachine.uu___is_TiBinop))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TiBinop__item__arg1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed))

:named refinement_kinding_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TiBinop__item__arg1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x2
@x3))
(and (HasTypeFuel @u0
@x1
(StackMachine.tinstr @x2
@x3))

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x2
@x3)))
:qid refinement_interpretation_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed))

:named refinement_interpretation_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed
;;; Fact-ids: Name StackMachine.__proj__TiBinop__item__arg1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1)))
(Valid (Prims.hasEq (StackMachine.tinstr @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1))))
:qid haseqTm_refine_ca5cda80d86a5fe3c677897fc0fef6ed))

:named haseqTm_refine_ca5cda80d86a5fe3c677897fc0fef6ed))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TiBinop; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.uu___is_TiBinop @x0
@x1
@x2)
(BoxBool (is-StackMachine.TiBinop @x2)))
 

:pattern ((StackMachine.uu___is_TiBinop @x0
@x1
@x2))
:qid disc_equation_StackMachine.TiBinop))

:named disc_equation_StackMachine.TiBinop))
(push) ;; push{2

; Starting query at StackMachine.fst(138,13-138,17)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiBinop? _}).
;   (*  - Could not prove post-condition
; *) ~(TiBinop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiBinop__item__arg1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1))

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,13-138,17)
(not 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,13-138,17)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiBinop__item__arg1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiBinop__item__arg1


; <Skipped let __proj__TiBinop__item__arg1/>


; encoding sigelt val StackMachine.__proj__TiBinop__item__arg2


; <Start encoding val StackMachine.__proj__TiBinop__item__arg2>


(declare-fun StackMachine.__proj__TiBinop__item__arg2 (Term Term Term) Term)


(declare-fun StackMachine.__proj__TiBinop__item__arg2@tok () Term)

; </end encoding val StackMachine.__proj__TiBinop__item__arg2>

(push) ;; push{2

; Starting query at StackMachine.fst(138,26-138,30)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiBinop? _}).
;   (*  - Could not prove post-condition
; *) ~(TiBinop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiBinop__item__arg2`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1))

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,26-138,30)
(not 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,26-138,30)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiBinop__item__arg2, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiBinop__item__arg2


; <Skipped let __proj__TiBinop__item__arg2/>


; encoding sigelt val StackMachine.__proj__TiBinop__item__res


; <Start encoding val StackMachine.__proj__TiBinop__item__res>


(declare-fun StackMachine.__proj__TiBinop__item__res (Term Term Term) Term)


(declare-fun StackMachine.__proj__TiBinop__item__res@tok () Term)

; </end encoding val StackMachine.__proj__TiBinop__item__res>

(push) ;; push{2

; Starting query at StackMachine.fst(138,39-138,42)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiBinop? _}).
;   (*  - Could not prove post-condition
; *) ~(TiBinop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiBinop__item__res`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1))

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,39-138,42)
(not 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,39-138,42)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiBinop__item__res, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiBinop__item__res


; <Skipped let __proj__TiBinop__item__res/>


; encoding sigelt val StackMachine.__proj__TiBinop__item__s


; <Start encoding val StackMachine.__proj__TiBinop__item__s>


(declare-fun StackMachine.__proj__TiBinop__item__s (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tinstr _ _ {TiBinop? _} -> tstack
(declare-fun Tm_arrow_60371250888664e5f98b0143aa49c916 () Term)
(declare-fun StackMachine.__proj__TiBinop__item__s@tok () Term)

; </end encoding val StackMachine.__proj__TiBinop__item__s>

(push) ;; push{2

; Starting query at StackMachine.fst(138,51-138,52)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiBinop? _}).
;   (*  - Could not prove post-condition
; *) ~(TiBinop? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiBinop__item__s`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1))

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,51-138,52)
(not 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,51-138,52)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiBinop__item__s, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiBinop__item__s


; <Skipped let __proj__TiBinop__item__s/>


; encoding sigelt val StackMachine.__proj__TiBinop__item___4


; <Start encoding val StackMachine.__proj__TiBinop__item___4>


(declare-fun StackMachine.__proj__TiBinop__item___4 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tinstr _ _ {TiBinop? _} -> tbinop projectee.arg1 projectee.arg2 projectee.res
(declare-fun Tm_arrow_f691a01cec9e2891eedcf818f429e7ab () Term)
(declare-fun StackMachine.__proj__TiBinop__item___4@tok () Term)

; </end encoding val StackMachine.__proj__TiBinop__item___4>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.__proj__TiBinop__item__arg2; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,26-138,30); use=StackMachine.fst(138,26-138,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1)))
(HasType (StackMachine.__proj__TiBinop__item__arg2 @x0
@x1
@x2)
StackMachine.typ))
 

:pattern ((StackMachine.__proj__TiBinop__item__arg2 @x0
@x1
@x2))
:qid typing_StackMachine.__proj__TiBinop__item__arg2))

:named typing_StackMachine.__proj__TiBinop__item__arg2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.__proj__TiBinop__item__arg1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,13-138,17); use=StackMachine.fst(138,13-138,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1)))
(HasType (StackMachine.__proj__TiBinop__item__arg1 @x0
@x1
@x2)
StackMachine.typ))
 

:pattern ((StackMachine.__proj__TiBinop__item__arg1 @x0
@x1
@x2))
:qid typing_StackMachine.__proj__TiBinop__item__arg1))

:named typing_StackMachine.__proj__TiBinop__item__arg1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name StackMachine.__proj__TiBinop__item__arg2; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,26-138,30); use=StackMachine.fst(138,26-138,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.__proj__TiBinop__item__arg2 @x0
@x1
@x2)
(StackMachine.TiBinop_arg2 @x2))
 

:pattern ((StackMachine.__proj__TiBinop__item__arg2 @x0
@x1
@x2))
:qid proj_equation_StackMachine.TiBinop_arg2))

:named proj_equation_StackMachine.TiBinop_arg2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name StackMachine.__proj__TiBinop__item__arg1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(138,13-138,17); use=StackMachine.fst(138,13-138,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.__proj__TiBinop__item__arg1 @x0
@x1
@x2)
(StackMachine.TiBinop_arg1 @x2))
 

:pattern ((StackMachine.__proj__TiBinop__item__arg1 @x0
@x1
@x2))
:qid proj_equation_StackMachine.TiBinop_arg1))

:named proj_equation_StackMachine.TiBinop_arg1))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tinstr _ _ {TiBinop? _}).
;   (*  - Could not prove post-condition
; *)
;   (~(TiBinop? projectee) ==> Prims.l_False) /\
;   (forall (b: StackMachine.typ)
;       (b: StackMachine.typ)
;       (b: StackMachine.typ)
;       (b: StackMachine.tstack)
;       (b: StackMachine.tbinop b b b).
;       projectee == StackMachine.TiBinop b ==>
;       b :: b == _ /\ b :: b :: b == _ /\ TiBinop? (StackMachine.TiBinop b) /\
;       (forall (return_val: _: StackMachine.tinstr _ _ {TiBinop? _}).
;           return_val == StackMachine.TiBinop b ==>
;           (forall (any_result: StackMachine.typ).
;               (StackMachine.TiBinop b).arg1 == any_result ==>
;               b :: b == _ /\ b :: b :: b == _ /\ TiBinop? (StackMachine.TiBinop b) /\
;               (forall (return_val: _: StackMachine.tinstr _ _ {TiBinop? _}).
;                   return_val == StackMachine.TiBinop b ==>
;                   (forall (any_result: StackMachine.typ).
;                       (StackMachine.TiBinop b).arg2 == any_result ==>
;                       b :: b == _ /\ b :: b :: b == _ /\ TiBinop? (StackMachine.TiBinop b))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TiBinop__item___4`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1)))

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (implies 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(not 
;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x0
@x1
@x2))
)

label_1)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x6 Term))
 (! (implies (HasType @x6
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.tbinop @x3
@x4
@x5))

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(= @x2
(StackMachine.TiBinop @x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(or label_2

;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(= (Prims.Cons StackMachine.typ
@x5
@x6)
@x1)
)


;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(or label_3

;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(= (Prims.Cons StackMachine.typ
@x3
(Prims.Cons StackMachine.typ
@x4
@x6))
@x0)
)


;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(or label_4

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x0
@x1
(StackMachine.TiBinop @x3
@x4
@x5
@x6
@x7)))
)


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x8
(StackMachine.TiBinop @x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
StackMachine.typ)
(= (StackMachine.__proj__TiBinop__item__arg1 @x0
@x1
(StackMachine.TiBinop @x3
@x4
@x5
@x6
@x7))
@x9))

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(or label_5

;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(= (Prims.Cons StackMachine.typ
@x5
@x6)
@x1)
)


;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(or label_6

;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(= (Prims.Cons StackMachine.typ
@x3
(Prims.Cons StackMachine.typ
@x4
@x6))
@x0)
)


;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(or label_7

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x0
@x1
(StackMachine.TiBinop @x3
@x4
@x5
@x6
@x7)))
)


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed @x0
@x1))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x10
(StackMachine.TiBinop @x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
StackMachine.typ)
(= (StackMachine.__proj__TiBinop__item__arg2 @x0
@x1
(StackMachine.TiBinop @x3
@x4
@x5
@x6
@x7))
@x11))

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(or label_8

;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(= (Prims.Cons StackMachine.typ
@x5
@x6)
@x1)
)


;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(or label_9

;; def=dummy(0,0-0,0); use=StackMachine.fst(138,2-138,9)
(= (Prims.Cons StackMachine.typ
@x3
(Prims.Cons StackMachine.typ
@x4
@x6))
@x0)
)


;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(or label_10

;; def=StackMachine.fst(138,2-138,9); use=StackMachine.fst(138,2-138,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop @x0
@x1
(StackMachine.TiBinop @x3
@x4
@x5
@x6
@x7)))
)
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TiBinop__item___4, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_StackMachine.TiBinop, refinement_interpretation_Tm_refine_ca5cda80d86a5fe3c677897fc0fef6ed

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TiBinop__item___4


; <Skipped let __proj__TiBinop__item___4/>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type StackMachine.tprog


; <Start encoding type StackMachine.tprog>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.tprog (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StackMachine.tprog@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TNil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TNil_s (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TNil
(declare-fun StackMachine.TNil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TCons (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons_s1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons_s2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons_s3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TCons
(declare-fun StackMachine.TCons@tok () Term)
;;;;;;;;;;;;;;;;tprog s s
(declare-fun Tm_arrow_801fcc621345839e0ea46cd27bef2801 () Term)
;;;;;;;;;;;;;;;;_3: tinstr s1 s2 -> _4: tprog s2 s3 -> tprog s1 s3
(declare-fun Tm_arrow_952d68bde6689c28020b61ef9ba8fe07 () Term)

; <start constructor StackMachine.tprog>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.tprog ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
735)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(StackMachine.tprog @x0
@x1))
 
;;no pats
:qid is-StackMachine.tprog))))

; </end constructor StackMachine.tprog>


; <start constructor StackMachine.TNil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TNil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
742)
(= __@x0
(StackMachine.TNil (StackMachine.TNil_s __@x0)))))

; </end constructor StackMachine.TNil>


; <start constructor StackMachine.TCons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TCons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
749)
(= __@x0
(StackMachine.TCons (StackMachine.TCons_s1 __@x0)
(StackMachine.TCons_s2 __@x0)
(StackMachine.TCons_s3 __@x0)
(StackMachine.TCons__3 __@x0)
(StackMachine.TCons__4 __@x0)))))

; </end constructor StackMachine.TCons>


; </end encoding type StackMachine.tprog>

;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.tprog@tok
@x0)
@x1)
(StackMachine.tprog @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.tprog@tok
@x0)
@x1))

:pattern ((StackMachine.tprog @x0
@x1))
:qid token_correspondence_StackMachine.tprog@tok))

:named token_correspondence_StackMachine.tprog@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TNil @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3)))
:qid subterm_ordering_StackMachine.TNil))

:named subterm_ordering_StackMachine.TNil))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7)))
:qid subterm_ordering_StackMachine.TCons))

:named subterm_ordering_StackMachine.TCons))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@x0 Term))
 (! (= (StackMachine.TNil_s (StackMachine.TNil @x0))
@x0)
 

:pattern ((StackMachine.TNil @x0))
:qid projection_inverse_StackMachine.TNil_s))

:named projection_inverse_StackMachine.TNil_s))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons_s3 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons_s3))

:named projection_inverse_StackMachine.TCons_s3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons_s2 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons_s2))

:named projection_inverse_StackMachine.TCons_s2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons_s1 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons_s1))

:named projection_inverse_StackMachine.TCons_s1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons__4 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons__4))

:named projection_inverse_StackMachine.TCons__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons__3 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons__3))

:named projection_inverse_StackMachine.TCons__3))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! (is-Tm_arrow (PreType StackMachine.tprog@tok))
:named pre_kinding_StackMachine.tprog@tok))
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! (and (IsTotFun StackMachine.tprog@tok)

;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT StackMachine.tprog@tok
@x0))
 

:pattern ((ApplyTT StackMachine.tprog@tok
@x0))
:qid kinding_StackMachine.tprog@tok))


;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack))
(HasType (StackMachine.tprog @x0
@x1)
Tm_type))
 

:pattern ((StackMachine.tprog @x0
@x1))
:qid kinding_StackMachine.tprog@tok.1))
)
:named kinding_StackMachine.tprog@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tprog @x2
@x3))
(or (and (is-StackMachine.TNil @x1)
(= @x2
(StackMachine.TNil_s @x1))
(= @x3
(StackMachine.TNil_s @x1)))
(and (is-StackMachine.TCons @x1)
(= @x2
(StackMachine.TCons_s1 @x1))
(= @x3
(StackMachine.TCons_s3 @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tprog @x2
@x3)))
:qid fuel_guarded_inversion_StackMachine.tprog))

:named fuel_guarded_inversion_StackMachine.tprog))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! (= 736
(Term_constr_id StackMachine.tprog@tok))
:named fresh_token_StackMachine.tprog@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.tstack)
(= @x1
@x2)
(= @x1
@x3))
(HasTypeFuel @u0
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3)))
:qid data_typing_intro_StackMachine.TNil@tok))

:named data_typing_intro_StackMachine.TNil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
StackMachine.tstack)
(HasTypeFuel @u0
@x3
StackMachine.tstack)
(HasTypeFuel @u0
@x4
(StackMachine.tinstr @x1
@x2))
(HasTypeFuel @u0
@x5
(StackMachine.tprog @x2
@x3))
(= @x1
@x6)
(= @x3
@x7))
(HasTypeFuel @u0
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7)))
:qid data_typing_intro_StackMachine.TCons@tok))

:named data_typing_intro_StackMachine.TCons@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3))
(and (= @x1
@x3)
(= @x1
@x2)
(HasTypeFuel @u0
@x1
StackMachine.tstack)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3)))
:qid data_elim_StackMachine.TNil))

:named data_elim_StackMachine.TNil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7))
(and (= @x3
@x7)
(= @x1
@x6)
(HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
StackMachine.tstack)
(HasTypeFuel @u0
@x3
StackMachine.tstack)
(HasTypeFuel @u0
@x4
(StackMachine.tinstr @x1
@x2))
(HasTypeFuel @u0
@x5
(StackMachine.tprog @x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7)))
:qid data_elim_StackMachine.TCons))

:named data_elim_StackMachine.TCons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 735
(Term_constr_id (StackMachine.tprog @x0
@x1)))
 

:pattern ((StackMachine.tprog @x0
@x1))
:qid constructor_distinct_StackMachine.tprog))

:named constructor_distinct_StackMachine.tprog))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@x0 Term))
 (! (= 742
(Term_constr_id (StackMachine.TNil @x0)))
 

:pattern ((StackMachine.TNil @x0))
:qid constructor_distinct_StackMachine.TNil))

:named constructor_distinct_StackMachine.TNil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 749
(Term_constr_id (StackMachine.TCons @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_StackMachine.TCons))

:named constructor_distinct_StackMachine.TCons))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StackMachine.tprog @x2
@x3))
(= (StackMachine.tprog @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StackMachine.tprog @x2
@x3)))
:qid StackMachine_pretyping_8c72ad37499c2c6419c92ec7d1109d1a))

:named StackMachine_pretyping_8c72ad37499c2c6419c92ec7d1109d1a))
(push) ;; push{4

; Starting query at StackMachine.fst(141,0-144,52)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (_: StackMachine.tstack) (_: StackMachine.tstack).
;   (forall (_: StackMachine.tstack) (_: StackMachine.tstack).
;       {:pattern Prims.hasEq (StackMachine.tprog _ _)}
;       Prims.hasEq (StackMachine.tprog _ _)) ==>
;   (forall (s: StackMachine.tstack).
;       (*  - Failed to prove that the type
;     'StackMachine.tprog'
;     supports decidable equality because of this argument.
;   - Add either the 'noeq' or 'unopteq' qualifier
; *)
;       Prims.hasEq StackMachine.tstack) /\
;   (forall (s1: StackMachine.tstack)
;       (s2: StackMachine.tstack)
;       (s3: StackMachine.tstack)
;       (_3: StackMachine.tinstr s1 s2)
;       (_4: StackMachine.tprog s2 s3).
;       Prims.hasEq StackMachine.tstack /\ Prims.hasEq StackMachine.tstack /\
;       Prims.hasEq StackMachine.tstack /\ Prims.hasEq (StackMachine.tinstr s1 s2) /\
;       Prims.hasEq (StackMachine.tprog s2 s3))


; Context: While encoding a query
; While typechecking the top-level declaration `type StackMachine.tprog`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
StackMachine.tstack)
(HasType @x3
StackMachine.tstack))

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Valid 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Prims.hasEq (StackMachine.tprog @x2
@x3))
)
)
 

:pattern ((Prims.hasEq (StackMachine.tprog @x2
@x3)))
:qid @query.1))
)

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(and 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.tstack)

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(142,12-142,18)
(or label_1

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Valid 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Prims.hasEq StackMachine.tstack)
)
)
)
 
;;no pats
:qid @query.2))


;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x2
StackMachine.tstack)
(HasType @x3
StackMachine.tstack)
(HasType @x4
StackMachine.tstack)
(HasType @x5
(StackMachine.tinstr @x2
@x3))
(HasType @x6
(StackMachine.tprog @x3
@x4)))

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(and 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(143,14-143,20)
(or label_2

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Valid 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Prims.hasEq StackMachine.tstack)
)
)


;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(143,28-143,34)
(or label_3

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Valid 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Prims.hasEq StackMachine.tstack)
)
)


;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(143,42-143,48)
(or label_4

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Valid 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Prims.hasEq StackMachine.tstack)
)
)


;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(144,10-144,22)
(or label_5

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Valid 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Prims.hasEq (StackMachine.tinstr @x2
@x3))
)
)


;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(144,26-144,37)
(or label_6

;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Valid 
;; def=StackMachine.fst(141,0-144,52); use=StackMachine.fst(141,0-144,52)
(Prims.hasEq (StackMachine.tprog @x3
@x4))
)
)
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tprog, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf, assumption_Prims.list__uu___haseq, assumption_StackMachine.tinstr__uu___haseq, assumption_StackMachine.typ__uu___haseq, equality_tok_StackMachine.Nat@tok, equation_StackMachine.tstack, kinding_StackMachine.typ@tok, typing_tok_StackMachine.Nat@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type StackMachine.tprog


; <Start encoding type StackMachine.tprog>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.tprog (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StackMachine.tprog@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TNil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TNil_s (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TNil
(declare-fun StackMachine.TNil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StackMachine.TCons (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons_s1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons_s2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons_s3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StackMachine.TCons__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StackMachine.TCons
(declare-fun StackMachine.TCons@tok () Term)
;;;;;;;;;;;;;;;;tprog s s
(declare-fun Tm_arrow_801fcc621345839e0ea46cd27bef2801 () Term)
;;;;;;;;;;;;;;;;_3: tinstr s1 s2 -> _4: tprog s2 s3 -> tprog s1 s3
(declare-fun Tm_arrow_952d68bde6689c28020b61ef9ba8fe07 () Term)

; <start constructor StackMachine.tprog>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.tprog ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
755)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(StackMachine.tprog @x0
@x1))
 
;;no pats
:qid is-StackMachine.tprog))))

; </end constructor StackMachine.tprog>


; <start constructor StackMachine.TNil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TNil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
762)
(= __@x0
(StackMachine.TNil (StackMachine.TNil_s __@x0)))))

; </end constructor StackMachine.TNil>


; <start constructor StackMachine.TCons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StackMachine.TCons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
769)
(= __@x0
(StackMachine.TCons (StackMachine.TCons_s1 __@x0)
(StackMachine.TCons_s2 __@x0)
(StackMachine.TCons_s3 __@x0)
(StackMachine.TCons__3 __@x0)
(StackMachine.TCons__4 __@x0)))))

; </end constructor StackMachine.TCons>


; </end encoding type StackMachine.tprog>


; encoding sigelt assume StackMachine.tprog__uu___haseq


; <Start encoding assume StackMachine.tprog__uu___haseq>


; </end encoding assume StackMachine.tprog__uu___haseq>


; encoding sigelt val StackMachine.uu___is_TNil


; <Start encoding val StackMachine.uu___is_TNil>

(declare-fun StackMachine.uu___is_TNil (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: tprog _ _ -> Prims.bool
(declare-fun Tm_arrow_0ff73932c136f6dda0efddbaef052b19 () Term)
(declare-fun StackMachine.uu___is_TNil@tok () Term)

; </end encoding val StackMachine.uu___is_TNil>


; encoding sigelt let uu___is_TNil


; <Skipped let uu___is_TNil/>


; encoding sigelt val StackMachine.__proj__TNil__item__s


; <Start encoding val StackMachine.__proj__TNil__item__s>

(declare-fun Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb (Term Term) Term)
(declare-fun StackMachine.__proj__TNil__item__s (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tprog _ _ {TNil? _} -> tstack
(declare-fun Tm_arrow_b2fcb0d3e52cc42dc589245ba433984c () Term)
(declare-fun StackMachine.__proj__TNil__item__s@tok () Term)

; </end encoding val StackMachine.__proj__TNil__item__s>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TNil; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tprog @x0
@x1)))
(HasType (StackMachine.uu___is_TNil @x0
@x1
@x2)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TNil @x0
@x1
@x2))
:qid typing_StackMachine.uu___is_TNil))

:named typing_StackMachine.uu___is_TNil))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StackMachine.tprog@tok
@x0)
@x1)
(StackMachine.tprog @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StackMachine.tprog@tok
@x0)
@x1))

:pattern ((StackMachine.tprog @x0
@x1))
:qid token_correspondence_StackMachine.tprog@tok))

:named token_correspondence_StackMachine.tprog@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TNil @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3)))
:qid subterm_ordering_StackMachine.TNil))

:named subterm_ordering_StackMachine.TNil))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7)))
:qid subterm_ordering_StackMachine.TCons))

:named subterm_ordering_StackMachine.TCons))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TNil__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb))

:named refinement_kinding_Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TNil__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb @x2
@x3))
(and (HasTypeFuel @u0
@x1
(StackMachine.tprog @x2
@x3))

;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(BoxBool_proj_0 (StackMachine.uu___is_TNil @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb @x2
@x3)))
:qid refinement_interpretation_Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb))

:named refinement_interpretation_Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@x0 Term))
 (! (= (StackMachine.TNil_s (StackMachine.TNil @x0))
@x0)
 

:pattern ((StackMachine.TNil @x0))
:qid projection_inverse_StackMachine.TNil_s))

:named projection_inverse_StackMachine.TNil_s))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons_s3 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons_s3))

:named projection_inverse_StackMachine.TCons_s3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons_s2 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons_s2))

:named projection_inverse_StackMachine.TCons_s2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons_s1 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons_s1))

:named projection_inverse_StackMachine.TCons_s1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons__4 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons__4))

:named projection_inverse_StackMachine.TCons__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.TCons__3 (StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StackMachine.TCons__3))

:named projection_inverse_StackMachine.TCons__3))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! (is-Tm_arrow (PreType StackMachine.tprog@tok))
:named pre_kinding_StackMachine.tprog@tok))
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! (and (IsTotFun StackMachine.tprog@tok)

;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT StackMachine.tprog@tok
@x0))
 

:pattern ((ApplyTT StackMachine.tprog@tok
@x0))
:qid kinding_StackMachine.tprog@tok))


;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack))
(HasType (StackMachine.tprog @x0
@x1)
Tm_type))
 

:pattern ((StackMachine.tprog @x0
@x1))
:qid kinding_StackMachine.tprog@tok.1))
)
:named kinding_StackMachine.tprog@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb
;;; Fact-ids: Name StackMachine.__proj__TNil__item__s; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb @x0
@x1)))
(Valid (Prims.hasEq (StackMachine.tprog @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb @x0
@x1))))
:qid haseqTm_refine_f199955d1c0a09a2e1c2187aa1c27dfb))

:named haseqTm_refine_f199955d1c0a09a2e1c2187aa1c27dfb))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tprog @x2
@x3))
(or (and (is-StackMachine.TNil @x1)
(= @x2
(StackMachine.TNil_s @x1))
(= @x3
(StackMachine.TNil_s @x1)))
(and (is-StackMachine.TCons @x1)
(= @x2
(StackMachine.TCons_s1 @x1))
(= @x3
(StackMachine.TCons_s3 @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StackMachine.tprog @x2
@x3)))
:qid fuel_guarded_inversion_StackMachine.tprog))

:named fuel_guarded_inversion_StackMachine.tprog))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! (= 756
(Term_constr_id StackMachine.tprog@tok))
:named fresh_token_StackMachine.tprog@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TNil; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.uu___is_TNil @x0
@x1
@x2)
(BoxBool (is-StackMachine.TNil @x2)))
 

:pattern ((StackMachine.uu___is_TNil @x0
@x1
@x2))
:qid disc_equation_StackMachine.TNil))

:named disc_equation_StackMachine.TNil))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.tstack)
(= @x1
@x2)
(= @x1
@x3))
(HasTypeFuel @u0
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3)))
:qid data_typing_intro_StackMachine.TNil@tok))

:named data_typing_intro_StackMachine.TNil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
StackMachine.tstack)
(HasTypeFuel @u0
@x3
StackMachine.tstack)
(HasTypeFuel @u0
@x4
(StackMachine.tinstr @x1
@x2))
(HasTypeFuel @u0
@x5
(StackMachine.tprog @x2
@x3))
(= @x1
@x6)
(= @x3
@x7))
(HasTypeFuel @u0
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7)))
 

:pattern ((HasTypeFuel @u0
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7)))
:qid data_typing_intro_StackMachine.TCons@tok))

:named data_typing_intro_StackMachine.TCons@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3))
(and (= @x1
@x3)
(= @x1
@x2)
(HasTypeFuel @u0
@x1
StackMachine.tstack)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TNil @x1)
(StackMachine.tprog @x2
@x3)))
:qid data_elim_StackMachine.TNil))

:named data_elim_StackMachine.TNil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7))
(and (= @x3
@x7)
(= @x1
@x6)
(HasTypeFuel @u0
@x1
StackMachine.tstack)
(HasTypeFuel @u0
@x2
StackMachine.tstack)
(HasTypeFuel @u0
@x3
StackMachine.tstack)
(HasTypeFuel @u0
@x4
(StackMachine.tinstr @x1
@x2))
(HasTypeFuel @u0
@x5
(StackMachine.tprog @x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x6
@x7)))
:qid data_elim_StackMachine.TCons))

:named data_elim_StackMachine.TCons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 755
(Term_constr_id (StackMachine.tprog @x0
@x1)))
 

:pattern ((StackMachine.tprog @x0
@x1))
:qid constructor_distinct_StackMachine.tprog))

:named constructor_distinct_StackMachine.tprog))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,2-142,6)
(forall ((@x0 Term))
 (! (= 762
(Term_constr_id (StackMachine.TNil @x0)))
 

:pattern ((StackMachine.TNil @x0))
:qid constructor_distinct_StackMachine.TNil))

:named constructor_distinct_StackMachine.TNil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 769
(Term_constr_id (StackMachine.TCons @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((StackMachine.TCons @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_StackMachine.TCons))

:named constructor_distinct_StackMachine.TCons))
;;;;;;;;;;;;;;;;Assumption: StackMachine.tprog__uu___haseq
;;; Fact-ids: Name StackMachine.tprog__uu___haseq; Namespace StackMachine
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack))
(Valid (Prims.hasEq (StackMachine.tprog @x0
@x1))))
 

:pattern ((Prims.hasEq (StackMachine.tprog @x0
@x1)))
:qid assumption_StackMachine.tprog__uu___haseq))
:named assumption_StackMachine.tprog__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StackMachine.tprog; Namespace StackMachine; Name StackMachine.TNil; Namespace StackMachine; Name StackMachine.TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(141,5-141,10); use=StackMachine.fst(141,5-141,10)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StackMachine.tprog @x2
@x3))
(= (StackMachine.tprog @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StackMachine.tprog @x2
@x3)))
:qid StackMachine_pretyping_8c72ad37499c2c6419c92ec7d1109d1a))

:named StackMachine_pretyping_8c72ad37499c2c6419c92ec7d1109d1a))
(push) ;; push{2

; Starting query at StackMachine.fst(142,10-142,11)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tprog _ _ {TNil? _}).
;   (*  - Could not prove post-condition
; *) ~(TNil? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TNil__item__s`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb @x0
@x1))

;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,10-142,11)
(not 
;; def=StackMachine.fst(142,2-142,6); use=StackMachine.fst(142,10-142,11)
(BoxBool_proj_0 (StackMachine.uu___is_TNil @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TNil__item__s, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_f199955d1c0a09a2e1c2187aa1c27dfb

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TNil__item__s


; <Skipped let __proj__TNil__item__s/>


; encoding sigelt val StackMachine.uu___is_TCons


; <Start encoding val StackMachine.uu___is_TCons>

(declare-fun StackMachine.uu___is_TCons (Term Term Term) Term)

(declare-fun StackMachine.uu___is_TCons@tok () Term)

; </end encoding val StackMachine.uu___is_TCons>


; encoding sigelt let uu___is_TCons


; <Skipped let uu___is_TCons/>


; encoding sigelt val StackMachine.__proj__TCons__item__s1


; <Start encoding val StackMachine.__proj__TCons__item__s1>

(declare-fun Tm_refine_71c338e63ae841db80789b96cbe806f6 (Term Term) Term)
(declare-fun StackMachine.__proj__TCons__item__s1 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tprog _ _ {TCons? _} -> tstack
(declare-fun Tm_arrow_399029e3d3018404c5d16bd90cdee900 () Term)
(declare-fun StackMachine.__proj__TCons__item__s1@tok () Term)

; </end encoding val StackMachine.__proj__TCons__item__s1>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.uu___is_TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tprog @x0
@x1)))
(HasType (StackMachine.uu___is_TCons @x0
@x1
@x2)
Prims.bool))
 

:pattern ((StackMachine.uu___is_TCons @x0
@x1
@x2))
:qid typing_StackMachine.uu___is_TCons))

:named typing_StackMachine.uu___is_TCons))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StackMachine.__proj__TCons__item__s1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_71c338e63ae841db80789b96cbe806f6))

:named refinement_kinding_Tm_refine_71c338e63ae841db80789b96cbe806f6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StackMachine.__proj__TCons__item__s1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(StackMachine.tprog @x2
@x3))

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x2
@x3
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_71c338e63ae841db80789b96cbe806f6))

:named refinement_interpretation_Tm_refine_71c338e63ae841db80789b96cbe806f6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_71c338e63ae841db80789b96cbe806f6
;;; Fact-ids: Name StackMachine.__proj__TCons__item__s1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1)))
(Valid (Prims.hasEq (StackMachine.tprog @x0
@x1))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1))))
:qid haseqTm_refine_71c338e63ae841db80789b96cbe806f6))

:named haseqTm_refine_71c338e63ae841db80789b96cbe806f6))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StackMachine.uu___is_TCons; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.uu___is_TCons @x0
@x1
@x2)
(BoxBool (is-StackMachine.TCons @x2)))
 

:pattern ((StackMachine.uu___is_TCons @x0
@x1
@x2))
:qid disc_equation_StackMachine.TCons))

:named disc_equation_StackMachine.TCons))
(push) ;; push{2

; Starting query at StackMachine.fst(143,11-143,13)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tprog _ _ {TCons? _}).
;   (*  - Could not prove post-condition
; *) ~(TCons? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TCons__item__s1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1))

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,11-143,13)
(not 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,11-143,13)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TCons__item__s1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_71c338e63ae841db80789b96cbe806f6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TCons__item__s1


; <Skipped let __proj__TCons__item__s1/>


; encoding sigelt val StackMachine.__proj__TCons__item__s2


; <Start encoding val StackMachine.__proj__TCons__item__s2>


(declare-fun StackMachine.__proj__TCons__item__s2 (Term Term Term) Term)


(declare-fun StackMachine.__proj__TCons__item__s2@tok () Term)

; </end encoding val StackMachine.__proj__TCons__item__s2>

(push) ;; push{2

; Starting query at StackMachine.fst(143,25-143,27)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tprog _ _ {TCons? _}).
;   (*  - Could not prove post-condition
; *) ~(TCons? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TCons__item__s2`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1))

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,25-143,27)
(not 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,25-143,27)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TCons__item__s2, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_71c338e63ae841db80789b96cbe806f6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TCons__item__s2


; <Skipped let __proj__TCons__item__s2/>


; encoding sigelt val StackMachine.__proj__TCons__item__s3


; <Start encoding val StackMachine.__proj__TCons__item__s3>


(declare-fun StackMachine.__proj__TCons__item__s3 (Term Term Term) Term)


(declare-fun StackMachine.__proj__TCons__item__s3@tok () Term)

; </end encoding val StackMachine.__proj__TCons__item__s3>

(push) ;; push{2

; Starting query at StackMachine.fst(143,39-143,41)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tprog _ _ {TCons? _}).
;   (*  - Could not prove post-condition
; *) ~(TCons? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TCons__item__s3`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1))

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,39-143,41)
(not 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,39-143,41)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
@x2))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TCons__item__s3, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_71c338e63ae841db80789b96cbe806f6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TCons__item__s3


; <Skipped let __proj__TCons__item__s3/>


; encoding sigelt val StackMachine.__proj__TCons__item___3


; <Start encoding val StackMachine.__proj__TCons__item___3>


(declare-fun StackMachine.__proj__TCons__item___3 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tprog _ _ {TCons? _} -> tinstr projectee.s1 projectee.s2
(declare-fun Tm_arrow_9f8ec3b0487e8b22190b40e5be5bf447 () Term)
(declare-fun StackMachine.__proj__TCons__item___3@tok () Term)

; </end encoding val StackMachine.__proj__TCons__item___3>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.__proj__TCons__item__s1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,11-143,13); use=StackMachine.fst(143,11-143,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1)))
(HasType (StackMachine.__proj__TCons__item__s1 @x0
@x1
@x2)
StackMachine.tstack))
 

:pattern ((StackMachine.__proj__TCons__item__s1 @x0
@x1
@x2))
:qid typing_StackMachine.__proj__TCons__item__s1))

:named typing_StackMachine.__proj__TCons__item__s1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name StackMachine.__proj__TCons__item__s1; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,11-143,13); use=StackMachine.fst(143,11-143,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.__proj__TCons__item__s1 @x0
@x1
@x2)
(StackMachine.TCons_s1 @x2))
 

:pattern ((StackMachine.__proj__TCons__item__s1 @x0
@x1
@x2))
:qid proj_equation_StackMachine.TCons_s1))

:named proj_equation_StackMachine.TCons_s1))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tprog _ _ {TCons? _}).
;   (*  - Could not prove post-condition
; *)
;   (~(TCons? projectee) ==> Prims.l_False) /\
;   (forall (b: StackMachine.tstack)
;       (b: StackMachine.tstack)
;       (b: StackMachine.tstack)
;       (b: StackMachine.tinstr b b)
;       (b: StackMachine.tprog b b).
;       projectee == StackMachine.TCons b b ==>
;       b == _ /\ b == _ /\ TCons? (StackMachine.TCons b b) /\
;       (forall (return_val: _: StackMachine.tprog _ _ {TCons? _}).
;           return_val == StackMachine.TCons b b ==>
;           (forall (any_result: StackMachine.tstack).
;               (StackMachine.TCons b b).s1 == any_result ==>
;               b == _ /\ b == _ /\ TCons? (StackMachine.TCons b b))))


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TCons__item___3`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1)))

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (implies 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(not 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
@x2))
)

label_1)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.tinstr @x3
@x4))

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.tprog @x4
@x5))

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(= @x2
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(or label_2

;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(= @x5
@x1)
)


;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(or label_3

;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(= @x3
@x0)
)


;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(or label_4

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7)))
)


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x8
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
StackMachine.tstack)
(= (StackMachine.__proj__TCons__item__s1 @x0
@x1
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7))
@x9))

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(or label_5

;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(= @x5
@x1)
)


;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(or label_6

;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(= @x3
@x0)
)


;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(or label_7

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7)))
)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TCons__item___3, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_StackMachine.TCons, refinement_interpretation_Tm_refine_71c338e63ae841db80789b96cbe806f6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TCons__item___3


; <Skipped let __proj__TCons__item___3/>


; encoding sigelt val StackMachine.__proj__TCons__item___4


; <Start encoding val StackMachine.__proj__TCons__item___4>


(declare-fun StackMachine.__proj__TCons__item___4 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: tprog _ _ {TCons? _} -> tprog projectee.s2 projectee.s3
(declare-fun Tm_arrow_5c015fbfbc78072273828ea8cf94d384 () Term)
(declare-fun StackMachine.__proj__TCons__item___4@tok () Term)

; </end encoding val StackMachine.__proj__TCons__item___4>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.__proj__TCons__item__s2; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,25-143,27); use=StackMachine.fst(143,25-143,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1)))
(HasType (StackMachine.__proj__TCons__item__s2 @x0
@x1
@x2)
StackMachine.tstack))
 

:pattern ((StackMachine.__proj__TCons__item__s2 @x0
@x1
@x2))
:qid typing_StackMachine.__proj__TCons__item__s2))

:named typing_StackMachine.__proj__TCons__item__s2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name StackMachine.__proj__TCons__item__s2; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(143,25-143,27); use=StackMachine.fst(143,25-143,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.__proj__TCons__item__s2 @x0
@x1
@x2)
(StackMachine.TCons_s2 @x2))
 

:pattern ((StackMachine.__proj__TCons__item__s2 @x0
@x1
@x2))
:qid proj_equation_StackMachine.TCons_s2))

:named proj_equation_StackMachine.TCons_s2))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (_: StackMachine.tstack)
;   (_: StackMachine.tstack)
;   (projectee: _: StackMachine.tprog _ _ {TCons? _}).
;   (*  - Could not prove post-condition
; *)
;   (~(TCons? projectee) ==> Prims.l_False) /\
;   (forall (b: StackMachine.tstack)
;       (b: StackMachine.tstack)
;       (b: StackMachine.tstack)
;       (b: StackMachine.tinstr b b)
;       (b: StackMachine.tprog b b).
;       projectee == StackMachine.TCons b b ==>
;       b == _ /\ b == _ /\ TCons? (StackMachine.TCons b b) /\
;       (forall (return_val: _: StackMachine.tprog _ _ {TCons? _}).
;           return_val == StackMachine.TCons b b ==>
;           (forall (any_result: StackMachine.tstack).
;               (StackMachine.TCons b b).s2 == any_result ==>
;               b == _ /\ b == _ /\ TCons? (StackMachine.TCons b b))))


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__TCons__item___4`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1)))

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and (implies 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(not 
;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
@x2))
)

label_1)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.tinstr @x3
@x4))

;; def=Prims.fst(413,99-413,120); use=Prims.fst(431,19-431,33)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.tprog @x4
@x5))

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(= @x2
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(459,77-459,89); use=Prims.fst(459,77-459,89)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(or label_2

;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(= @x5
@x1)
)


;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(or label_3

;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(= @x3
@x0)
)


;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(or label_4

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7)))
)


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_71c338e63ae841db80789b96cbe806f6 @x0
@x1))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x8
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
StackMachine.tstack)
(= (StackMachine.__proj__TCons__item__s2 @x0
@x1
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7))
@x9))

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(and 
;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(or label_5

;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(= @x5
@x1)
)


;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(or label_6

;; def=dummy(0,0-0,0); use=StackMachine.fst(143,2-143,7)
(= @x3
@x0)
)


;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(or label_7

;; def=StackMachine.fst(143,2-143,7); use=StackMachine.fst(143,2-143,7)
(BoxBool_proj_0 (StackMachine.uu___is_TCons @x0
@x1
(StackMachine.TCons @x3
@x4
@x5
@x6
@x7)))
)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.__proj__TCons__item___4, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_StackMachine.TCons, refinement_interpretation_Tm_refine_71c338e63ae841db80789b96cbe806f6

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__TCons__item___4


; <Skipped let __proj__TCons__item___4/>

(push) ;; push{2

; Starting query at StackMachine.fst(147,2-149,43)

;;;;;;;;;;;;;;;;ts : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_0
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_0
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_0))
(declare-fun Tm_refine_5146f82b7eb47a755e37392326e90677 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_5146f82b7eb47a755e37392326e90677
Tm_type)
:named refinement_kinding_Tm_refine_5146f82b7eb47a755e37392326e90677))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(146,16-149,43); use=StackMachine.fst(146,16-149,43)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_5146f82b7eb47a755e37392326e90677)
(and (HasTypeFuel @u0
@x1
StackMachine.tstack)

;; def=StackMachine.fst(147,2-149,43); use=StackMachine.fst(147,2-149,43)

;; def=StackMachine.fst(147,2-149,43); use=StackMachine.fst(147,2-149,43)
(Valid 
;; def=StackMachine.fst(147,2-149,43); use=StackMachine.fst(147,2-149,43)
(Prims.precedes StackMachine.tstack
StackMachine.tstack
@x1
x_16a921c956d1ccece42ab1b05699fdf1_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_5146f82b7eb47a755e37392326e90677))
:qid refinement_interpretation_Tm_refine_5146f82b7eb47a755e37392326e90677))

:named refinement_interpretation_Tm_refine_5146f82b7eb47a755e37392326e90677))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5146f82b7eb47a755e37392326e90677
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_5146f82b7eb47a755e37392326e90677))
(Valid (Prims.hasEq StackMachine.tstack)))
:named haseqTm_refine_5146f82b7eb47a755e37392326e90677))
(declare-fun StackMachine.vstack (Term) Term)

;;;;;;;;;;;;;;;;ts: tstack{ts << ts} -> Type
(declare-fun Tm_arrow_75ae0893a75bba843493a3ff5c183b6a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_75ae0893a75bba843493a3ff5c183b6a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_75ae0893a75bba843493a3ff5c183b6a
Tm_type)
:named kinding_Tm_arrow_75ae0893a75bba843493a3ff5c183b6a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(146,16-149,43); use=StackMachine.fst(146,16-149,43)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_75ae0893a75bba843493a3ff5c183b6a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_75ae0893a75bba843493a3ff5c183b6a))
:qid StackMachine_pre_typing_Tm_arrow_75ae0893a75bba843493a3ff5c183b6a))

:named StackMachine_pre_typing_Tm_arrow_75ae0893a75bba843493a3ff5c183b6a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_75ae0893a75bba843493a3ff5c183b6a
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(146,16-149,43); use=StackMachine.fst(146,16-149,43)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_75ae0893a75bba843493a3ff5c183b6a)
(and 
;; def=StackMachine.fst(146,16-149,43); use=StackMachine.fst(146,16-149,43)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_5146f82b7eb47a755e37392326e90677)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_75ae0893a75bba843493a3ff5c183b6a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_75ae0893a75bba843493a3ff5c183b6a))
:qid StackMachine_interpretation_Tm_arrow_75ae0893a75bba843493a3ff5c183b6a))

:named StackMachine_interpretation_Tm_arrow_75ae0893a75bba843493a3ff5c183b6a))
(declare-fun StackMachine.vstack@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@x0 Term))
 (! (= (ApplyTT StackMachine.vstack@tok
@x0)
(StackMachine.vstack @x0))
 

:pattern ((ApplyTT StackMachine.vstack@tok
@x0))
:qid token_correspondence_StackMachine.vstack))

:named token_correspondence_StackMachine.vstack))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.vstack@tok
Tm_arrow_75ae0893a75bba843493a3ff5c183b6a))

;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@x1 Term))
 (! (= (ApplyTT StackMachine.vstack@tok
@x1)
(StackMachine.vstack @x1))
 

:pattern ((StackMachine.vstack @x1))
:qid function_token_typing_StackMachine.vstack.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.vstack@tok))
:qid function_token_typing_StackMachine.vstack))

:named function_token_typing_StackMachine.vstack))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_5146f82b7eb47a755e37392326e90677)
(HasType (StackMachine.vstack @x0)
Tm_type))
 

:pattern ((StackMachine.vstack @x0))
:qid typing_StackMachine.vstack))

:named typing_StackMachine.vstack))
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Type0).
;   (forall (x: Type0). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Nil? ts) /\ ~(Cons? ts) ==> Prims.l_False) /\
;   (~(Nil? ts) ==>
;     (forall (b: StackMachine.typ) (b: Prims.list StackMachine.typ). ts == b :: b ==> b << ts))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec vstack`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Tm_type))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(147,2-149,43)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(147,2-149,43)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(147,2-149,43)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(147,2-149,43)
(and (implies 
;; def=StackMachine.fst(146,16-146,18); use=StackMachine.fst(147,8-147,10)
(and 
;; def=StackMachine.fst(146,16-146,18); use=StackMachine.fst(147,8-147,10)
(not 
;; def=StackMachine.fst(146,16-146,18); use=StackMachine.fst(147,8-147,10)
(BoxBool_proj_0 (Prims.uu___is_Nil StackMachine.typ
x_16a921c956d1ccece42ab1b05699fdf1_0))
)


;; def=StackMachine.fst(146,16-146,18); use=StackMachine.fst(147,8-147,10)
(not 
;; def=StackMachine.fst(146,16-146,18); use=StackMachine.fst(147,8-147,10)
(BoxBool_proj_0 (Prims.uu___is_Cons StackMachine.typ
x_16a921c956d1ccece42ab1b05699fdf1_0))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(147,2-149,43)
(not 
;; def=StackMachine.fst(146,16-146,18); use=StackMachine.fst(147,8-147,10)
(BoxBool_proj_0 (Prims.uu___is_Nil StackMachine.typ
x_16a921c956d1ccece42ab1b05699fdf1_0))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(147,2-149,43)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(147,2-149,43)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list StackMachine.typ))

;; def=StackMachine.fst(146,16-149,14); use=StackMachine.fst(147,8-149,14)
(= x_16a921c956d1ccece42ab1b05699fdf1_0
(Prims.Cons StackMachine.typ
@x1
@x2))
)

;; def=StackMachine.fst(147,2-149,43); use=StackMachine.fst(149,40-149,43)
(or label_2

;; def=StackMachine.fst(147,2-149,43); use=StackMachine.fst(149,40-149,43)
(Valid 
;; def=StackMachine.fst(147,2-149,43); use=StackMachine.fst(149,40-149,43)
(Prims.precedes StackMachine.tstack
StackMachine.tstack
@x2
x_16a921c956d1ccece42ab1b05699fdf1_0)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.vstack, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf, binder_x_16a921c956d1ccece42ab1b05699fdf1_0, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_StackMachine.Nat@tok, equation_StackMachine.tstack, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons, typing_tok_StackMachine.Nat@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec vstack


; <Start encoding let rec vstack>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.vstack.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.vstack.fuel_instrumented_token () Term)
(declare-fun StackMachine.vstack (Term) Term)
(declare-fun StackMachine.vstack@tok () Term)
;;;;;;;;;;;;;;;;ts: tstack -> Type
(declare-fun Tm_arrow_9c2aa77e85dd4c5b181f8fa9ad602e74 () Term)

; </end encoding let rec vstack>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.vstack; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StackMachine.tstack)
(HasType (StackMachine.vstack @x0)
Tm_type))
 

:pattern ((StackMachine.vstack @x0))
:qid typing_StackMachine.vstack))

:named typing_StackMachine.vstack))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.vstack; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)
(HasType (StackMachine.vstack.fuel_instrumented @u0
@x1)
Tm_type))
 

:pattern ((StackMachine.vstack.fuel_instrumented @u0
@x1))
:qid token_correspondence_StackMachine.vstack.fuel_instrumented))

:named token_correspondence_StackMachine.vstack.fuel_instrumented))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple2@tok)

;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))


;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok.1))
)
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 126
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.vstack
;;; Fact-ids: Name StackMachine.vstack; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)
(= (StackMachine.vstack.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (is-Prims.Nil @lb2)
Prims.unit
(ite (is-Prims.Cons @lb2)
(FStar.Pervasives.Native.tuple2 (StackMachine.typeDenote (Prims.Cons_hd @lb2))
(StackMachine.vstack.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
Tm_unit)))))
 :weight 0


:pattern ((StackMachine.vstack.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_StackMachine.vstack.fuel_instrumented))

:named equation_with_fuel_StackMachine.vstack.fuel_instrumented))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))

:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 125
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))

:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 132
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple2__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StackMachine.texpDenote; Namespace StackMachine
(assert (! (Valid (ApplyTT __uu__PartialApp
StackMachine.tbinopDenote@tok))
:named @kick_partial_app_7d3131a6cbba5c8c222b425c713d7331))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.vstack; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (StackMachine.vstack.fuel_instrumented (SFuel @u0)
@x1)
(StackMachine.vstack.fuel_instrumented ZFuel
@x1))
 

:pattern ((StackMachine.vstack.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_StackMachine.vstack.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.vstack.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.vstack; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(146,8-146,14); use=StackMachine.fst(146,8-146,14)
(forall ((@x0 Term))
 (! (= (StackMachine.vstack @x0)
(StackMachine.vstack.fuel_instrumented MaxFuel
@x0))
 

:pattern ((StackMachine.vstack @x0))
:qid @fuel_correspondence_StackMachine.vstack.fuel_instrumented))

:named @fuel_correspondence_StackMachine.vstack.fuel_instrumented))
(push) ;; push{2

; Starting query at StackMachine.fst(153,2-174,77)

;;;;;;;;;;;;;;;;ts : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_0
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_0
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_0))
;;;;;;;;;;;;;;;;ts' : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_1 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_1
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_1
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_1))
;;;;;;;;;;;;;;;;i : StackMachine.tinstr ts ts' (StackMachine.tinstr ts ts')
(declare-fun x_4660ce528ccb71fc8bb9d6b825ca3a5a_2 () Term)
;;;;;;;;;;;;;;;;binder_x_4660ce528ccb71fc8bb9d6b825ca3a5a_2
;;; Fact-ids: 
(assert (! (HasType x_4660ce528ccb71fc8bb9d6b825ca3a5a_2
(StackMachine.tinstr x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1))
:named binder_x_4660ce528ccb71fc8bb9d6b825ca3a5a_2))
;;;;;;;;;;;;;;;;s : StackMachine.vstack ts (StackMachine.vstack ts)
(declare-fun x_ec5a2f91b89276de9e637eac70b8acd5_3 () Term)
;;;;;;;;;;;;;;;;binder_x_ec5a2f91b89276de9e637eac70b8acd5_3
;;; Fact-ids: 
(assert (! (HasType x_ec5a2f91b89276de9e637eac70b8acd5_3
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0))
:named binder_x_ec5a2f91b89276de9e637eac70b8acd5_3))
(declare-fun Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2))

:named refinement_kinding_Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(StackMachine.vstack @x2))

;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)

;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(or 
;; def=StackMachine.fst(153,2-174,77); use=StackMachine.fst(153,2-174,77)
(Valid 
;; def=StackMachine.fst(153,2-174,77); use=StackMachine.fst(153,2-174,77)
(Prims.precedes StackMachine.tstack
StackMachine.tstack
@x2
x_16a921c956d1ccece42ab1b05699fdf1_0)
)


;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(and 
;; def=StackMachine.fst(151,23-151,25); use=StackMachine.fst(151,23-151,25)
(Valid 
;; def=StackMachine.fst(151,23-151,25); use=StackMachine.fst(151,23-151,25)
(Prims.op_Equals_Equals_Equals StackMachine.tstack
StackMachine.tstack
@x2
x_16a921c956d1ccece42ab1b05699fdf1_0)
)


;; def=StackMachine.fst(151,36-174,77); use=StackMachine.fst(151,36-174,77)
(or 
;; def=StackMachine.fst(153,2-174,77); use=StackMachine.fst(153,2-174,77)
(Valid 
;; def=StackMachine.fst(153,2-174,77); use=StackMachine.fst(153,2-174,77)
(Prims.precedes StackMachine.tstack
StackMachine.tstack
@x3
x_16a921c956d1ccece42ab1b05699fdf1_1)
)


;; def=StackMachine.fst(151,36-174,77); use=StackMachine.fst(151,36-174,77)
(and 
;; def=StackMachine.fst(151,36-151,39); use=StackMachine.fst(151,36-151,39)
(Valid 
;; def=StackMachine.fst(151,36-151,39); use=StackMachine.fst(151,36-151,39)
(Prims.op_Equals_Equals_Equals StackMachine.tstack
StackMachine.tstack
@x3
x_16a921c956d1ccece42ab1b05699fdf1_1)
)


;; def=StackMachine.fst(152,22-174,77); use=StackMachine.fst(152,22-174,77)
(or 
;; def=StackMachine.fst(153,2-174,77); use=StackMachine.fst(153,2-174,77)
(Valid 
;; def=StackMachine.fst(153,2-174,77); use=StackMachine.fst(153,2-174,77)
(Prims.precedes (StackMachine.tinstr @x2
@x3)
(StackMachine.tinstr x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
@x4
x_4660ce528ccb71fc8bb9d6b825ca3a5a_2)
)


;; def=StackMachine.fst(152,22-174,77); use=StackMachine.fst(152,22-174,77)
(and 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(152,22-152,23)
(Valid 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(152,22-152,23)
(Prims.op_Equals_Equals_Equals (StackMachine.tinstr @x2
@x3)
(StackMachine.tinstr x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
@x4
x_4660ce528ccb71fc8bb9d6b825ca3a5a_2)
)


;; def=StackMachine.fst(153,2-174,77); use=StackMachine.fst(153,2-174,77)
(Valid 
;; def=StackMachine.fst(153,2-174,77); use=StackMachine.fst(153,2-174,77)
(Prims.precedes (StackMachine.vstack @x2)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0)
@x1
x_ec5a2f91b89276de9e637eac70b8acd5_3)
)
)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2))

:named refinement_interpretation_Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 @x0
@x1
@x2)))
(Valid (Prims.hasEq (StackMachine.vstack @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 @x0
@x1
@x2))))
:qid haseqTm_refine_3b65fa7b9adfabe9da85e3c3005782a2))

:named haseqTm_refine_3b65fa7b9adfabe9da85e3c3005782a2))
(declare-fun StackMachine.tinstrDenote (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;i: tinstr ts ts' ->     s:       vstack ts         {ts << ts \/ ts === ts /\ (ts' << ts' \/ ts' === ts' /\ (i << i \/ i === i /\ s << s))}   -> vstack ts'
(declare-fun Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116
Tm_type)
:named kinding_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116))
:qid StackMachine_pre_typing_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116))

:named StackMachine_pre_typing_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116)
(and 
;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tinstr @x1
@x2))
(HasType @x4
(Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(StackMachine.vstack @x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid StackMachine_interpretation_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116.1))

(IsTotFun @x0)

;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116.2))


;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116.3))


;; def=StackMachine.fst(151,23-174,77); use=StackMachine.fst(151,23-174,77)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tinstr @x1
@x2)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StackMachine_interpretation_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116))
:qid StackMachine_interpretation_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116))

:named StackMachine_interpretation_Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116))
(declare-fun StackMachine.tinstrDenote@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tinstrDenote@tok
@x0)
@x1)
@x2)
@x3)
(StackMachine.tinstrDenote @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tinstrDenote@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_StackMachine.tinstrDenote))

:named token_correspondence_StackMachine.tinstrDenote))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.tinstrDenote@tok
Tm_arrow_87dc1ba8b2e84bfdca151cd6e9f5f116))

;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tinstrDenote@tok
@x1)
@x2)
@x3)
@x4)
(StackMachine.tinstrDenote @x1
@x2
@x3
@x4))
 

:pattern ((StackMachine.tinstrDenote @x1
@x2
@x3
@x4))
:qid function_token_typing_StackMachine.tinstrDenote.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.tinstrDenote@tok))
:qid function_token_typing_StackMachine.tinstrDenote))

:named function_token_typing_StackMachine.tinstrDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tinstr @x0
@x1))
(HasType @x3
(Tm_refine_3b65fa7b9adfabe9da85e3c3005782a2 @x0
@x1
@x2)))
(HasType (StackMachine.tinstrDenote @x0
@x1
@x2
@x3)
(StackMachine.vstack @x1)))
 

:pattern ((StackMachine.tinstrDenote @x0
@x1
@x2
@x3))
:qid typing_StackMachine.tinstrDenote))

:named typing_StackMachine.tinstrDenote))
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (k: Prims.pure_post (StackMachine.vstack ts')).
;   (forall (x: StackMachine.vstack ts'). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(TiNConst? i) /\ ~(TiBConst? i) /\ ~(TiBinop? i) ==> Prims.l_False) /\
;   (forall (b: StackMachine.tstack) (b: Prims.nat).
;       i == StackMachine.TiNConst b b ==> Prims.has_type (b, s) (StackMachine.vstack ts')) /\
;   (~(TiNConst? i) ==>
;     (forall (b: StackMachine.tstack) (b: Prims.bool).
;         i == StackMachine.TiBConst b b ==> Prims.has_type (b, s) (StackMachine.vstack ts')) /\
;     (~(TiBConst? i) ==>
;       (forall (b: StackMachine.typ)
;           (b: StackMachine.typ)
;           (b: StackMachine.typ)
;           (b: StackMachine.tstack)
;           (b: StackMachine.tbinop b b b).
;           i == StackMachine.TiBinop b ==>
;           Prims.has_type s
;             (StackMachine.typeDenote b & (StackMachine.typeDenote b & StackMachine.vstack b)) /\
;           (forall (any_result: StackMachine.vstack ts).
;               s == any_result ==>
;               (forall (b: StackMachine.typeDenote b)
;                   (b: StackMachine.typeDenote b)
;                   (b: StackMachine.vstack b).
;                   s == (b, (b, b)) ==>
;                   Prims.has_type (StackMachine.tbinopDenote b b b, b) (StackMachine.vstack ts'))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec tinstrDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_1)))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(153,2-174,77)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(153,2-174,77)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(153,2-174,77)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(153,2-174,77)
(and (implies 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(and 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(not 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiNConst x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_4660ce528ccb71fc8bb9d6b825ca3a5a_2))
)


;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(not 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiBConst x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_4660ce528ccb71fc8bb9d6b825ca3a5a_2))
)


;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(not 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiBinop x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_4660ce528ccb71fc8bb9d6b825ca3a5a_2))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.nat)

;; def=StackMachine.fst(152,22-154,18); use=StackMachine.fst(153,8-154,18)
(= x_4660ce528ccb71fc8bb9d6b825ca3a5a_2
(StackMachine.TiNConst @x1
@x2))
)

;; def=StackMachine.fst(154,22-154,28); use=StackMachine.fst(154,22-154,28)
(or label_2
(HasType (FStar.Pervasives.Native.Mktuple2 Prims.nat
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0)
@x2
x_ec5a2f91b89276de9e637eac70b8acd5_3)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_1)))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(153,2-174,77)
(not 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiNConst x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_4660ce528ccb71fc8bb9d6b825ca3a5a_2))
)


;; def=Prims.fst(389,2-389,39); use=StackMachine.fst(153,2-174,77)
(and 
;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.bool)

;; def=StackMachine.fst(152,22-155,18); use=StackMachine.fst(153,8-155,18)
(= x_4660ce528ccb71fc8bb9d6b825ca3a5a_2
(StackMachine.TiBConst @x1
@x2))
)

;; def=StackMachine.fst(155,22-155,28); use=StackMachine.fst(155,22-155,28)
(or label_3
(HasType (FStar.Pervasives.Native.Mktuple2 Prims.bool
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0)
@x2
x_ec5a2f91b89276de9e637eac70b8acd5_3)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_1)))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(153,2-174,77)
(not 
;; def=StackMachine.fst(152,22-152,23); use=StackMachine.fst(153,8-153,9)
(BoxBool_proj_0 (StackMachine.uu___is_TiBConst x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_4660ce528ccb71fc8bb9d6b825ca3a5a_2))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(StackMachine.tbinop @x1
@x2
@x3))

;; def=StackMachine.fst(152,22-156,40); use=StackMachine.fst(153,8-156,40)
(= x_4660ce528ccb71fc8bb9d6b825ca3a5a_2
(StackMachine.TiBinop @x1
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(153,2-174,77)
(and 
;; def=StackMachine.fst(152,42-152,43); use=StackMachine.fst(172,68-172,69)
(or label_4
(HasType x_ec5a2f91b89276de9e637eac70b8acd5_3
(FStar.Pervasives.Native.tuple2 (StackMachine.typeDenote @x1)
(FStar.Pervasives.Native.tuple2 (StackMachine.typeDenote @x2)
(StackMachine.vstack @x4)))))


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(153,2-174,77)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0))

;; def=StackMachine.fst(152,42-172,12); use=StackMachine.fst(172,10-172,69)
(= x_ec5a2f91b89276de9e637eac70b8acd5_3
@x6)
)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(StackMachine.typeDenote @x1))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(StackMachine.typeDenote @x2))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(153,2-174,77)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StackMachine.vstack @x4))

;; def=StackMachine.fst(173,11-173,28); use=StackMachine.fst(173,11-173,28)
(= x_ec5a2f91b89276de9e637eac70b8acd5_3
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x1)
(FStar.Pervasives.Native.tuple2 (StackMachine.typeDenote @x2)
(StackMachine.vstack @x4))
@x7
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x2)
(StackMachine.vstack @x4)
@x8
@x9)))
)

;; def=StackMachine.fst(174,8-174,77); use=StackMachine.fst(174,8-174,77)
(or label_5
(HasType (FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x3)
(StackMachine.vstack @x4)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinopDenote@tok
@x1)
@x2)
@x3)
@x5)
@x7)
@x8)
@x9)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_1)))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tinstrDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StackMachine.vstack.fuel_instrumented, @fuel_irrelevance_StackMachine.vstack.fuel_instrumented, @query, StackMachine_interpretation_Tm_arrow_2d71a237d1d23d83fe2231dae14f26a9, StackMachine_interpretation_Tm_arrow_aa95041870b22db0050daf9c687449fb, StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf, binder_x_16a921c956d1ccece42ab1b05699fdf1_0, binder_x_16a921c956d1ccece42ab1b05699fdf1_1, binder_x_4660ce528ccb71fc8bb9d6b825ca3a5a_2, binder_x_ec5a2f91b89276de9e637eac70b8acd5_3, constructor_distinct_Prims.Cons, constructor_distinct_StackMachine.Bool, constructor_distinct_StackMachine.Nat, data_elim_FStar.Pervasives.Native.Mktuple2, data_elim_StackMachine.TiBConst, data_elim_StackMachine.TiBinop, data_elim_StackMachine.TiNConst, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, disc_equation_StackMachine.TiBConst, disc_equation_StackMachine.TiBinop, disc_equation_StackMachine.TiNConst, equality_tok_StackMachine.Bool@tok, equality_tok_StackMachine.Nat@tok, equation_Prims.nat, equation_StackMachine.tstack, equation_StackMachine.typeDenote, equation_with_fuel_StackMachine.vstack.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_Prims.list, fuel_guarded_inversion_StackMachine.tbinop, fuel_guarded_inversion_StackMachine.tinstr, function_token_typing_StackMachine.tbinopDenote, kinding_StackMachine.typ@tok, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__b, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_StackMachine.tbinopDenote, token_correspondence_StackMachine.vstack.fuel_instrumented, typing_StackMachine.typeDenote, typing_StackMachine.vstack, typing_tok_StackMachine.Bool@tok, typing_tok_StackMachine.Nat@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec tinstrDenote


; <Start encoding let rec tinstrDenote>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.tinstrDenote.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.tinstrDenote.fuel_instrumented_token () Term)
(declare-fun StackMachine.tinstrDenote (Term Term Term Term) Term)
(declare-fun StackMachine.tinstrDenote@tok () Term)
;;;;;;;;;;;;;;;;i: tinstr ts ts' -> s: vstack ts -> vstack ts'
(declare-fun Tm_arrow_1fb0c594e43671971be4e079a05dde67 () Term)


; </end encoding let rec tinstrDenote>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.tinstrDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tinstr @x0
@x1))
(HasType @x3
(StackMachine.vstack @x0)))
(HasType (StackMachine.tinstrDenote @x0
@x1
@x2
@x3)
(StackMachine.vstack @x1)))
 

:pattern ((StackMachine.tinstrDenote @x0
@x1
@x2
@x3))
:qid typing_StackMachine.tinstrDenote))

:named typing_StackMachine.tinstrDenote))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.tinstrDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tinstr @x1
@x2))
(HasType @x4
(StackMachine.vstack @x1)))
(HasType (StackMachine.tinstrDenote.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
(StackMachine.vstack @x2)))
 

:pattern ((StackMachine.tinstrDenote.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_StackMachine.tinstrDenote.fuel_instrumented))

:named token_correspondence_StackMachine.tinstrDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.tinstrDenote
;;; Fact-ids: Name StackMachine.tinstrDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tinstr @x1
@x2))
(HasType @x4
(StackMachine.vstack @x1)))
(= (StackMachine.tinstrDenote.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 @x3))
(ite (is-StackMachine.TiNConst @lb5)
(FStar.Pervasives.Native.Mktuple2 Prims.nat
(StackMachine.vstack @x1)
(StackMachine.TiNConst__1 @lb5)
@x4)
(ite (is-StackMachine.TiBConst @lb5)
(FStar.Pervasives.Native.Mktuple2 Prims.bool
(StackMachine.vstack @x1)
(StackMachine.TiBConst__1 @lb5)
@x4)
(ite (is-StackMachine.TiBinop @lb5)
(let ((@lb6 @x4))
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote (StackMachine.TiBinop_res @lb5))
(StackMachine.vstack (StackMachine.TiBinop_s @lb5))
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinopDenote@tok
(StackMachine.TiBinop_arg1 @lb5))
(StackMachine.TiBinop_arg2 @lb5))
(StackMachine.TiBinop_res @lb5))
(StackMachine.TiBinop__4 @lb5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6))
(FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2__2 @lb6))))
Tm_unit))))))
 :weight 0


:pattern ((StackMachine.tinstrDenote.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_StackMachine.tinstrDenote.fuel_instrumented))

:named equation_with_fuel_StackMachine.tinstrDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.tinstrDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.tinstrDenote.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(StackMachine.tinstrDenote.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((StackMachine.tinstrDenote.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_StackMachine.tinstrDenote.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.tinstrDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.tinstrDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(151,8-151,20); use=StackMachine.fst(151,8-151,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.tinstrDenote @x0
@x1
@x2
@x3)
(StackMachine.tinstrDenote.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((StackMachine.tinstrDenote @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_StackMachine.tinstrDenote.fuel_instrumented))

:named @fuel_correspondence_StackMachine.tinstrDenote.fuel_instrumented))
(push) ;; push{2

; Starting query at StackMachine.fst(178,2-180,53)

;;;;;;;;;;;;;;;;ts : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_0
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_0
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_0))
;;;;;;;;;;;;;;;;ts' : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_1 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_1
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_1
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_1))
;;;;;;;;;;;;;;;;p : StackMachine.tprog ts ts' (StackMachine.tprog ts ts')
(declare-fun x_974496a40345cd37a4bd3e98318859b9_2 () Term)
;;;;;;;;;;;;;;;;binder_x_974496a40345cd37a4bd3e98318859b9_2
;;; Fact-ids: 
(assert (! (HasType x_974496a40345cd37a4bd3e98318859b9_2
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1))
:named binder_x_974496a40345cd37a4bd3e98318859b9_2))
;;;;;;;;;;;;;;;;s : StackMachine.vstack ts (StackMachine.vstack ts)
(declare-fun x_ec5a2f91b89276de9e637eac70b8acd5_3 () Term)
;;;;;;;;;;;;;;;;binder_x_ec5a2f91b89276de9e637eac70b8acd5_3
;;; Fact-ids: 
(assert (! (HasType x_ec5a2f91b89276de9e637eac70b8acd5_3
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0))
:named binder_x_ec5a2f91b89276de9e637eac70b8acd5_3))
(declare-fun Tm_refine_750912d66c3740855df3aaf2feda08a8 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(176,49-180,53); use=StackMachine.fst(176,49-180,53)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_750912d66c3740855df3aaf2feda08a8 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_750912d66c3740855df3aaf2feda08a8 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_750912d66c3740855df3aaf2feda08a8))

:named refinement_kinding_Tm_refine_750912d66c3740855df3aaf2feda08a8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(176,49-180,53); use=StackMachine.fst(176,49-180,53)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_750912d66c3740855df3aaf2feda08a8 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(StackMachine.vstack @x2))

;; def=StackMachine.fst(178,2-180,53); use=StackMachine.fst(178,2-180,53)

;; def=StackMachine.fst(178,2-180,53); use=StackMachine.fst(178,2-180,53)
(Valid 
;; def=StackMachine.fst(178,2-180,53); use=StackMachine.fst(178,2-180,53)
(Prims.precedes (StackMachine.tprog @x2
@x3)
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
@x4
x_974496a40345cd37a4bd3e98318859b9_2)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_750912d66c3740855df3aaf2feda08a8 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_750912d66c3740855df3aaf2feda08a8))

:named refinement_interpretation_Tm_refine_750912d66c3740855df3aaf2feda08a8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_750912d66c3740855df3aaf2feda08a8
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(176,49-180,53); use=StackMachine.fst(176,49-180,53)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_750912d66c3740855df3aaf2feda08a8 @x0
@x1
@x2)))
(Valid (Prims.hasEq (StackMachine.vstack @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_750912d66c3740855df3aaf2feda08a8 @x0
@x1
@x2))))
:qid haseqTm_refine_750912d66c3740855df3aaf2feda08a8))

:named haseqTm_refine_750912d66c3740855df3aaf2feda08a8))
(declare-fun StackMachine.tprogDenote (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p: tprog ts ts' -> s: vstack ts {p << p} -> Prims.Tot (vstack ts')
(declare-fun Tm_arrow_affad80be5a7d82565fe711caa8aad6f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_affad80be5a7d82565fe711caa8aad6f
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_affad80be5a7d82565fe711caa8aad6f
Tm_type)
:named kinding_Tm_arrow_affad80be5a7d82565fe711caa8aad6f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(141,13-180,53); use=StackMachine.fst(176,21-180,53)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_affad80be5a7d82565fe711caa8aad6f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_affad80be5a7d82565fe711caa8aad6f))
:qid StackMachine_pre_typing_Tm_arrow_affad80be5a7d82565fe711caa8aad6f))

:named StackMachine_pre_typing_Tm_arrow_affad80be5a7d82565fe711caa8aad6f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_affad80be5a7d82565fe711caa8aad6f
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(141,13-180,53); use=StackMachine.fst(176,21-180,53)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_affad80be5a7d82565fe711caa8aad6f)
(and 
;; def=StackMachine.fst(141,13-180,53); use=StackMachine.fst(176,21-180,53)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tprog @x1
@x2))
(HasType @x4
(Tm_refine_750912d66c3740855df3aaf2feda08a8 @x1
@x2
@x3)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
(StackMachine.vstack @x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid StackMachine_interpretation_Tm_arrow_affad80be5a7d82565fe711caa8aad6f.1))

(IsTotFun @x0)

;; def=StackMachine.fst(141,13-180,53); use=StackMachine.fst(176,21-180,53)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_affad80be5a7d82565fe711caa8aad6f.2))


;; def=StackMachine.fst(141,13-180,53); use=StackMachine.fst(176,21-180,53)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_affad80be5a7d82565fe711caa8aad6f.3))


;; def=StackMachine.fst(141,13-180,53); use=StackMachine.fst(176,21-180,53)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tprog @x1
@x2)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StackMachine_interpretation_Tm_arrow_affad80be5a7d82565fe711caa8aad6f.4))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_affad80be5a7d82565fe711caa8aad6f))
:qid StackMachine_interpretation_Tm_arrow_affad80be5a7d82565fe711caa8aad6f))

:named StackMachine_interpretation_Tm_arrow_affad80be5a7d82565fe711caa8aad6f))
(declare-fun StackMachine.tprogDenote@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tprogDenote@tok
@x0)
@x1)
@x2)
@x3)
(StackMachine.tprogDenote @x0
@x1
@x2
@x3))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tprogDenote@tok
@x0)
@x1)
@x2)
@x3))
:qid token_correspondence_StackMachine.tprogDenote))

:named token_correspondence_StackMachine.tprogDenote))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.tprogDenote@tok
Tm_arrow_affad80be5a7d82565fe711caa8aad6f))

;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tprogDenote@tok
@x1)
@x2)
@x3)
@x4)
(StackMachine.tprogDenote @x1
@x2
@x3
@x4))
 

:pattern ((StackMachine.tprogDenote @x1
@x2
@x3
@x4))
:qid function_token_typing_StackMachine.tprogDenote.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.tprogDenote@tok))
:qid function_token_typing_StackMachine.tprogDenote))

:named function_token_typing_StackMachine.tprogDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tprog @x0
@x1))
(HasType @x3
(Tm_refine_750912d66c3740855df3aaf2feda08a8 @x0
@x1
@x2)))
(HasType (StackMachine.tprogDenote @x0
@x1
@x2
@x3)
(StackMachine.vstack @x1)))
 

:pattern ((StackMachine.tprogDenote @x0
@x1
@x2
@x3))
:qid typing_StackMachine.tprogDenote))

:named typing_StackMachine.tprogDenote))
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (k: Prims.pure_post (StackMachine.vstack ts')).
;   (forall (x: StackMachine.vstack ts'). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(TNil? p) /\ ~(TCons? p) ==> Prims.l_False) /\
;   (forall (b: StackMachine.tstack). p == StackMachine.TNil ==> ts == ts') /\
;   (~(TNil? p) ==>
;     (forall (b: StackMachine.tstack)
;         (b: StackMachine.tstack)
;         (b: StackMachine.tstack)
;         (b: StackMachine.tinstr b b)
;         (b: StackMachine.tprog b b).
;         p == StackMachine.TCons b b ==>
;         ts == b /\
;         (forall (any_result: StackMachine.vstack ts).
;             s == any_result ==>
;             (forall (any_result: StackMachine.vstack b).
;                 StackMachine.tinstrDenote b s == any_result ==>
;                 b << p /\
;                 (forall (return_val: s: StackMachine.vstack b {b << p}).
;                     return_val == StackMachine.tinstrDenote b s ==>
;                     StackMachine.tinstrDenote b s == return_val ==>
;                     (forall (any_result: StackMachine.vstack b).
;                         StackMachine.tprogDenote b (StackMachine.tinstrDenote b s) == any_result ==>
;                         b == ts'))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec tprogDenote`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_1)))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(178,2-180,53)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(178,2-180,53)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(178,2-180,53)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(178,2-180,53)
(and (implies 
;; def=StackMachine.fst(176,30-176,31); use=StackMachine.fst(178,8-178,9)
(and 
;; def=StackMachine.fst(176,30-176,31); use=StackMachine.fst(178,8-178,9)
(not 
;; def=StackMachine.fst(176,30-176,31); use=StackMachine.fst(178,8-178,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNil x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_2))
)


;; def=StackMachine.fst(176,30-176,31); use=StackMachine.fst(178,8-178,9)
(not 
;; def=StackMachine.fst(176,30-176,31); use=StackMachine.fst(178,8-178,9)
(BoxBool_proj_0 (StackMachine.uu___is_TCons x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_2))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(178,2-180,53)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)

;; def=StackMachine.fst(176,30-179,10); use=StackMachine.fst(178,8-179,10)
(= x_974496a40345cd37a4bd3e98318859b9_2
(StackMachine.TNil @x1))
)

;; def=StackMachine.fst(176,21-176,28); use=StackMachine.fst(179,14-179,15)
(or label_2

;; def=StackMachine.fst(176,21-176,28); use=StackMachine.fst(179,14-179,15)
(= x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
)
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(178,2-180,53)
(not 
;; def=StackMachine.fst(176,30-176,31); use=StackMachine.fst(178,8-178,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNil x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_2))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(178,2-180,53)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(178,2-180,53)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(178,2-180,53)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(178,2-180,53)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(StackMachine.tinstr @x1
@x2))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(178,2-180,53)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(StackMachine.tprog @x2
@x3))

;; def=StackMachine.fst(176,30-180,16); use=StackMachine.fst(178,8-180,16)
(= x_974496a40345cd37a4bd3e98318859b9_2
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(178,2-180,53)
(and 
;; def=StackMachine.fst(176,21-180,13); use=StackMachine.fst(180,51-180,52)
(or label_3

;; def=StackMachine.fst(176,21-180,13); use=StackMachine.fst(180,51-180,52)
(= x_16a921c956d1ccece42ab1b05699fdf1_0
@x1)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(178,2-180,53)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0))

;; def=StackMachine.fst(152,42-176,50); use=StackMachine.fst(178,2-180,53)
(= x_ec5a2f91b89276de9e637eac70b8acd5_3
@x6)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(178,2-180,53)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.vstack @x2))

;; def=StackMachine.fst(176,49-180,53); use=StackMachine.fst(178,2-180,53)
(= (StackMachine.tinstrDenote @x1
@x2
@x4
x_ec5a2f91b89276de9e637eac70b8acd5_3)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(178,2-180,53)
(and 
;; def=StackMachine.fst(178,2-180,53); use=StackMachine.fst(180,35-180,53)
(or label_4

;; def=StackMachine.fst(178,2-180,53); use=StackMachine.fst(180,35-180,53)
(Valid 
;; def=StackMachine.fst(178,2-180,53); use=StackMachine.fst(180,35-180,53)
(Prims.precedes (StackMachine.tprog @x2
@x3)
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
@x5
x_974496a40345cd37a4bd3e98318859b9_2)
)
)


;; def=Prims.fst(356,2-356,58); use=StackMachine.fst(178,2-180,53)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_750912d66c3740855df3aaf2feda08a8 @x2
@x3
@x5))

;; def=Prims.fst(356,26-356,41); use=StackMachine.fst(178,2-180,53)
(= @x8
(StackMachine.tinstrDenote @x1
@x2
@x4
x_ec5a2f91b89276de9e637eac70b8acd5_3))


;; def=StackMachine.fst(176,49-180,53); use=StackMachine.fst(178,2-180,53)
(= (StackMachine.tinstrDenote @x1
@x2
@x4
x_ec5a2f91b89276de9e637eac70b8acd5_3)
@x8)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(178,2-180,53)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StackMachine.vstack @x3))

;; def=StackMachine.fst(177,8-180,53); use=StackMachine.fst(178,2-180,53)
(= (StackMachine.tprogDenote @x2
@x3
@x5
(StackMachine.tinstrDenote @x1
@x2
@x4
x_ec5a2f91b89276de9e637eac70b8acd5_3))
@x9)
)

;; def=StackMachine.fst(176,25-180,13); use=StackMachine.fst(180,20-180,53)
(or label_5

;; def=StackMachine.fst(176,25-180,13); use=StackMachine.fst(180,20-180,53)
(= @x3
x_16a921c956d1ccece42ab1b05699fdf1_1)
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tprogDenote, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_974496a40345cd37a4bd3e98318859b9_2, data_elim_StackMachine.TCons, data_elim_StackMachine.TNil, disc_equation_StackMachine.TCons, disc_equation_StackMachine.TNil, fuel_guarded_inversion_StackMachine.tprog, projection_inverse_BoxBool_proj_0, subterm_ordering_StackMachine.TCons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec tprogDenote


; <Start encoding let rec tprogDenote>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.tprogDenote.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.tprogDenote.fuel_instrumented_token () Term)
(declare-fun StackMachine.tprogDenote (Term Term Term Term) Term)
(declare-fun StackMachine.tprogDenote@tok () Term)
;;;;;;;;;;;;;;;;p: tprog ts ts' -> s: vstack ts -> Prims.Tot (vstack ts')
(declare-fun Tm_arrow_4062812b3296901308e1cd202a8298b3 () Term)

; </end encoding let rec tprogDenote>

(push) ;; push{2

; Starting query at StackMachine.fst(184,2-186,43)

;;;;;;;;;;;;;;;;ts : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_0
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_0
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_0))
;;;;;;;;;;;;;;;;ts' : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_1 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_1
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_1
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_1))
;;;;;;;;;;;;;;;;ts'' : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_2 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_2
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_2
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_2))
;;;;;;;;;;;;;;;;p : StackMachine.tprog ts ts' (StackMachine.tprog ts ts')
(declare-fun x_974496a40345cd37a4bd3e98318859b9_3 () Term)
;;;;;;;;;;;;;;;;binder_x_974496a40345cd37a4bd3e98318859b9_3
;;; Fact-ids: 
(assert (! (HasType x_974496a40345cd37a4bd3e98318859b9_3
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1))
:named binder_x_974496a40345cd37a4bd3e98318859b9_3))
;;;;;;;;;;;;;;;;p' : StackMachine.tprog ts' ts'' (StackMachine.tprog ts' ts'')
(declare-fun x_6139a6130ce3dbbc55c3991e4703c482_4 () Term)
;;;;;;;;;;;;;;;;binder_x_6139a6130ce3dbbc55c3991e4703c482_4
;;; Fact-ids: 
(assert (! (HasType x_6139a6130ce3dbbc55c3991e4703c482_4
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_1
x_16a921c956d1ccece42ab1b05699fdf1_2))
:named binder_x_6139a6130ce3dbbc55c3991e4703c482_4))
(declare-fun Tm_refine_43999699b1ce060666aa4cdc8393402d (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(182,51-186,43); use=StackMachine.fst(182,51-186,43)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_43999699b1ce060666aa4cdc8393402d @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_43999699b1ce060666aa4cdc8393402d @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_43999699b1ce060666aa4cdc8393402d))

:named refinement_kinding_Tm_refine_43999699b1ce060666aa4cdc8393402d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(182,51-186,43); use=StackMachine.fst(182,51-186,43)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_43999699b1ce060666aa4cdc8393402d @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(StackMachine.tprog @x4
@x2))

;; def=StackMachine.fst(184,2-186,43); use=StackMachine.fst(184,2-186,43)

;; def=StackMachine.fst(184,2-186,43); use=StackMachine.fst(184,2-186,43)
(Valid 
;; def=StackMachine.fst(184,2-186,43); use=StackMachine.fst(184,2-186,43)
(Prims.precedes (StackMachine.tprog @x3
@x4)
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
@x5
x_974496a40345cd37a4bd3e98318859b9_3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_43999699b1ce060666aa4cdc8393402d @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_43999699b1ce060666aa4cdc8393402d))

:named refinement_interpretation_Tm_refine_43999699b1ce060666aa4cdc8393402d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_43999699b1ce060666aa4cdc8393402d
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(182,51-186,43); use=StackMachine.fst(182,51-186,43)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_43999699b1ce060666aa4cdc8393402d @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (StackMachine.tprog @x2
@x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_43999699b1ce060666aa4cdc8393402d @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_43999699b1ce060666aa4cdc8393402d))

:named haseqTm_refine_43999699b1ce060666aa4cdc8393402d))
(declare-fun StackMachine.tconcat (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;p: tprog ts ts' -> p': tprog ts' ts'' {p << p} -> Prims.Tot (tprog ts ts'')
(declare-fun Tm_arrow_a55d3e7bb33b725c899dccef1347645d () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a55d3e7bb33b725c899dccef1347645d
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_a55d3e7bb33b725c899dccef1347645d
Tm_type)
:named kinding_Tm_arrow_a55d3e7bb33b725c899dccef1347645d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(141,13-186,43); use=StackMachine.fst(182,17-186,43)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_a55d3e7bb33b725c899dccef1347645d)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_a55d3e7bb33b725c899dccef1347645d))
:qid StackMachine_pre_typing_Tm_arrow_a55d3e7bb33b725c899dccef1347645d))

:named StackMachine_pre_typing_Tm_arrow_a55d3e7bb33b725c899dccef1347645d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a55d3e7bb33b725c899dccef1347645d
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(141,13-186,43); use=StackMachine.fst(182,17-186,43)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_a55d3e7bb33b725c899dccef1347645d)
(and 
;; def=StackMachine.fst(141,13-186,43); use=StackMachine.fst(182,17-186,43)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
StackMachine.tstack)
(HasType @x4
(StackMachine.tprog @x1
@x2))
(HasType @x5
(Tm_refine_43999699b1ce060666aa4cdc8393402d @x3
@x1
@x2
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
(StackMachine.tprog @x1
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid StackMachine_interpretation_Tm_arrow_a55d3e7bb33b725c899dccef1347645d.1))

(IsTotFun @x0)

;; def=StackMachine.fst(141,13-186,43); use=StackMachine.fst(182,17-186,43)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_a55d3e7bb33b725c899dccef1347645d.2))


;; def=StackMachine.fst(141,13-186,43); use=StackMachine.fst(182,17-186,43)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_a55d3e7bb33b725c899dccef1347645d.3))


;; def=StackMachine.fst(141,13-186,43); use=StackMachine.fst(182,17-186,43)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
StackMachine.tstack))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StackMachine_interpretation_Tm_arrow_a55d3e7bb33b725c899dccef1347645d.4))


;; def=StackMachine.fst(141,13-186,43); use=StackMachine.fst(182,17-186,43)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
StackMachine.tstack)
(HasType @x4
(StackMachine.tprog @x1
@x2)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid StackMachine_interpretation_Tm_arrow_a55d3e7bb33b725c899dccef1347645d.5))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_a55d3e7bb33b725c899dccef1347645d))
:qid StackMachine_interpretation_Tm_arrow_a55d3e7bb33b725c899dccef1347645d))

:named StackMachine_interpretation_Tm_arrow_a55d3e7bb33b725c899dccef1347645d))
(declare-fun StackMachine.tconcat@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tconcat@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(StackMachine.tconcat @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tconcat@tok
@x0)
@x1)
@x2)
@x3)
@x4))
:qid token_correspondence_StackMachine.tconcat))

:named token_correspondence_StackMachine.tconcat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.tconcat@tok
Tm_arrow_a55d3e7bb33b725c899dccef1347645d))

;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tconcat@tok
@x1)
@x2)
@x3)
@x4)
@x5)
(StackMachine.tconcat @x1
@x2
@x3
@x4
@x5))
 

:pattern ((StackMachine.tconcat @x1
@x2
@x3
@x4
@x5))
:qid function_token_typing_StackMachine.tconcat.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.tconcat@tok))
:qid function_token_typing_StackMachine.tconcat))

:named function_token_typing_StackMachine.tconcat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tprog @x0
@x1))
(HasType @x4
(Tm_refine_43999699b1ce060666aa4cdc8393402d @x2
@x0
@x1
@x3)))
(HasType (StackMachine.tconcat @x0
@x1
@x2
@x3
@x4)
(StackMachine.tprog @x0
@x2)))
 

:pattern ((StackMachine.tconcat @x0
@x1
@x2
@x3
@x4))
:qid typing_StackMachine.tconcat))

:named typing_StackMachine.tconcat))
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post (StackMachine.tprog ts ts'')).
;   (forall (x: StackMachine.tprog ts ts''). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)
;   ) ==>
;   (~(TNil? p) /\ ~(TCons? p) ==> Prims.l_False) /\
;   (forall (b: StackMachine.tstack). p == StackMachine.TNil ==> ts' == ts) /\
;   (~(TNil? p) ==>
;     (forall (b: StackMachine.tstack)
;         (b: StackMachine.tstack)
;         (b: StackMachine.tstack)
;         (b: StackMachine.tinstr b b)
;         (b: StackMachine.tprog b b).
;         p == StackMachine.TCons b b ==>
;         ts' == b /\ b << p /\
;         (forall (any_result: StackMachine.tprog ts' ts'').
;             p' == any_result ==>
;             (forall (any_result: StackMachine.tprog b ts'').
;                 StackMachine.tconcat b p' == any_result ==>
;                 (forall (any_result: StackMachine.tprog b ts'').
;                     StackMachine.TCons b (StackMachine.tconcat b p') == any_result ==> b == ts)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec tconcat`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_2)))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(184,2-186,43)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(184,2-186,43)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(184,2-186,43)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(184,2-186,43)
(and (implies 
;; def=StackMachine.fst(182,32-182,33); use=StackMachine.fst(184,8-184,9)
(and 
;; def=StackMachine.fst(182,32-182,33); use=StackMachine.fst(184,8-184,9)
(not 
;; def=StackMachine.fst(182,32-182,33); use=StackMachine.fst(184,8-184,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNil x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_3))
)


;; def=StackMachine.fst(182,32-182,33); use=StackMachine.fst(184,8-184,9)
(not 
;; def=StackMachine.fst(182,32-182,33); use=StackMachine.fst(184,8-184,9)
(BoxBool_proj_0 (StackMachine.uu___is_TCons x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_3))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(184,2-186,43)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)

;; def=StackMachine.fst(182,32-185,10); use=StackMachine.fst(184,8-185,10)
(= x_974496a40345cd37a4bd3e98318859b9_3
(StackMachine.TNil @x1))
)

;; def=StackMachine.fst(182,17-182,24); use=StackMachine.fst(185,14-185,16)
(or label_2

;; def=StackMachine.fst(182,17-182,24); use=StackMachine.fst(185,14-185,16)
(= x_16a921c956d1ccece42ab1b05699fdf1_1
x_16a921c956d1ccece42ab1b05699fdf1_0)
)
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(184,2-186,43)
(not 
;; def=StackMachine.fst(182,32-182,33); use=StackMachine.fst(184,8-184,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNil x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_3))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(184,2-186,43)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(184,2-186,43)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(184,2-186,43)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(184,2-186,43)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(StackMachine.tinstr @x1
@x2))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(184,2-186,43)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(StackMachine.tprog @x2
@x3))

;; def=StackMachine.fst(182,32-186,16); use=StackMachine.fst(184,8-186,16)
(= x_974496a40345cd37a4bd3e98318859b9_3
(StackMachine.TCons @x1
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(184,2-186,43)
(and 
;; def=StackMachine.fst(182,21-186,13); use=StackMachine.fst(186,40-186,42)
(or label_3

;; def=StackMachine.fst(182,21-186,13); use=StackMachine.fst(186,40-186,42)
(= x_16a921c956d1ccece42ab1b05699fdf1_1
@x3)
)


;; def=StackMachine.fst(184,2-186,43); use=StackMachine.fst(186,40-186,42)
(or label_4

;; def=StackMachine.fst(184,2-186,43); use=StackMachine.fst(186,40-186,42)
(Valid 
;; def=StackMachine.fst(184,2-186,43); use=StackMachine.fst(186,40-186,42)
(Prims.precedes (StackMachine.tprog @x2
@x3)
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
@x5
x_974496a40345cd37a4bd3e98318859b9_3)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(184,2-186,43)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_1
x_16a921c956d1ccece42ab1b05699fdf1_2))

;; def=StackMachine.fst(182,51-182,53); use=StackMachine.fst(184,2-186,43)
(= x_6139a6130ce3dbbc55c3991e4703c482_4
@x6)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(184,2-186,43)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.tprog @x2
x_16a921c956d1ccece42ab1b05699fdf1_2))

;; def=dummy(0,0-0,0); use=StackMachine.fst(184,2-186,43)
(= (StackMachine.tconcat @x2
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2
@x5
x_6139a6130ce3dbbc55c3991e4703c482_4)
@x7)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(184,2-186,43)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StackMachine.tprog @x1
x_16a921c956d1ccece42ab1b05699fdf1_2))

;; def=StackMachine.fst(183,8-186,43); use=StackMachine.fst(184,2-186,43)
(= (StackMachine.TCons @x1
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2
@x4
(StackMachine.tconcat @x2
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2
@x5
x_6139a6130ce3dbbc55c3991e4703c482_4))
@x8)
)

;; def=StackMachine.fst(182,17-186,13); use=StackMachine.fst(186,20-186,43)
(or label_5

;; def=StackMachine.fst(182,17-186,13); use=StackMachine.fst(186,20-186,43)
(= @x1
x_16a921c956d1ccece42ab1b05699fdf1_0)
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tconcat, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_974496a40345cd37a4bd3e98318859b9_3, data_elim_StackMachine.TCons, data_elim_StackMachine.TNil, disc_equation_StackMachine.TCons, disc_equation_StackMachine.TNil, fuel_guarded_inversion_StackMachine.tprog, projection_inverse_BoxBool_proj_0, subterm_ordering_StackMachine.TCons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec tconcat


; <Start encoding let rec tconcat>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.tconcat.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.tconcat.fuel_instrumented_token () Term)
(declare-fun StackMachine.tconcat (Term Term Term Term Term) Term)
(declare-fun StackMachine.tconcat@tok () Term)
;;;;;;;;;;;;;;;;p: tprog ts ts' -> p': tprog ts' ts'' -> Prims.Tot (tprog ts ts'')
(declare-fun Tm_arrow_a8167417f4ee572ee04a883cbb254932 () Term)

; </end encoding let rec tconcat>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.tconcat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tprog @x0
@x1))
(HasType @x4
(StackMachine.tprog @x1
@x2)))
(HasType (StackMachine.tconcat @x0
@x1
@x2
@x3
@x4)
(StackMachine.tprog @x0
@x2)))
 

:pattern ((StackMachine.tconcat @x0
@x1
@x2
@x3
@x4))
:qid typing_StackMachine.tconcat))

:named typing_StackMachine.tconcat))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.tconcat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
StackMachine.tstack)
(HasType @x4
(StackMachine.tprog @x1
@x2))
(HasType @x5
(StackMachine.tprog @x2
@x3)))
(HasType (StackMachine.tconcat.fuel_instrumented @u0
@x1
@x2
@x3
@x4
@x5)
(StackMachine.tprog @x1
@x3)))
 

:pattern ((StackMachine.tconcat.fuel_instrumented @u0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_StackMachine.tconcat.fuel_instrumented))

:named token_correspondence_StackMachine.tconcat.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.tconcat
;;; Fact-ids: Name StackMachine.tconcat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
StackMachine.tstack)
(HasType @x4
(StackMachine.tprog @x1
@x2))
(HasType @x5
(StackMachine.tprog @x2
@x3)))
(= (StackMachine.tconcat.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(let ((@lb6 @x4))
(ite (is-StackMachine.TNil @lb6)
@x5
(ite (is-StackMachine.TCons @lb6)
(StackMachine.TCons (StackMachine.TCons_s1 @lb6)
(StackMachine.TCons_s2 @lb6)
@x3
(StackMachine.TCons__3 @lb6)
(StackMachine.tconcat.fuel_instrumented @u0
(StackMachine.TCons_s2 @lb6)
(StackMachine.TCons_s3 @lb6)
@x3
(StackMachine.TCons__4 @lb6)
@x5))
Tm_unit)))))
 :weight 0


:pattern ((StackMachine.tconcat.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid equation_with_fuel_StackMachine.tconcat.fuel_instrumented))

:named equation_with_fuel_StackMachine.tconcat.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.tconcat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StackMachine.tconcat.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(StackMachine.tconcat.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((StackMachine.tconcat.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_StackMachine.tconcat.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.tconcat.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.tconcat; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(182,8-182,15); use=StackMachine.fst(182,8-182,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.tconcat @x0
@x1
@x2
@x3
@x4)
(StackMachine.tconcat.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((StackMachine.tconcat @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_StackMachine.tconcat.fuel_instrumented))

:named @fuel_correspondence_StackMachine.tconcat.fuel_instrumented))
(push) ;; push{2

; Starting query at StackMachine.fst(189,2-194,58)

;;;;;;;;;;;;;;;;t : StackMachine.typ (StackMachine.typ)
(declare-fun x_99009f55474bb74b46709f3fb0f7bfdf_0 () Term)
;;;;;;;;;;;;;;;;binder_x_99009f55474bb74b46709f3fb0f7bfdf_0
;;; Fact-ids: 
(assert (! (HasType x_99009f55474bb74b46709f3fb0f7bfdf_0
StackMachine.typ)
:named binder_x_99009f55474bb74b46709f3fb0f7bfdf_0))
;;;;;;;;;;;;;;;;e : StackMachine.texp t (StackMachine.texp t)
(declare-fun x_e9914cc59dbecc2ac85148e3e6b7dd9a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
;;; Fact-ids: 
(assert (! (HasType x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0))
:named binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
;;;;;;;;;;;;;;;;ts : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_2 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_2
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_2
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_2))
(declare-fun Tm_refine_1cb354550cf7794d3eaddfca17831be4 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(188,34-194,58); use=StackMachine.fst(188,34-194,58)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_1cb354550cf7794d3eaddfca17831be4))

:named refinement_kinding_Tm_refine_1cb354550cf7794d3eaddfca17831be4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(188,34-194,58); use=StackMachine.fst(188,34-194,58)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x2
@x3))
(and (HasTypeFuel @u0
@x1
StackMachine.tstack)

;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(189,2-194,58)

;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(189,2-194,58)
(Valid 
;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(189,2-194,58)
(Prims.precedes (StackMachine.texp @x2)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x3
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_1cb354550cf7794d3eaddfca17831be4))

:named refinement_interpretation_Tm_refine_1cb354550cf7794d3eaddfca17831be4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1cb354550cf7794d3eaddfca17831be4
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(188,34-194,58); use=StackMachine.fst(188,34-194,58)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x0
@x1)))
(Valid (Prims.hasEq StackMachine.tstack)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x0
@x1))))
:qid haseqTm_refine_1cb354550cf7794d3eaddfca17831be4))

:named haseqTm_refine_1cb354550cf7794d3eaddfca17831be4))
(declare-fun StackMachine.tcompile (Term Term Term) Term)

;;;;;;;;;;;;;;;;e: texp t -> ts: tstack{e << e} -> Prims.Tot (tprog ts (t :: ts))
(declare-fun Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734
Tm_type)
:named kinding_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(108,12-194,58); use=StackMachine.fst(188,18-194,58)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734))
:qid StackMachine_pre_typing_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734))

:named StackMachine_pre_typing_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(108,12-194,58); use=StackMachine.fst(188,18-194,58)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734)
(and 
;; def=StackMachine.fst(108,12-194,58); use=StackMachine.fst(188,18-194,58)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
(StackMachine.texp @x1))
(HasType @x3
(Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(StackMachine.tprog @x3
(Prims.Cons StackMachine.typ
@x1
@x3))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StackMachine_interpretation_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734.1))

(IsTotFun @x0)

;; def=StackMachine.fst(108,12-194,58); use=StackMachine.fst(188,18-194,58)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.typ)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StackMachine_interpretation_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734.2))


;; def=StackMachine.fst(108,12-194,58); use=StackMachine.fst(188,18-194,58)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
(StackMachine.texp @x1)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StackMachine_interpretation_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734))
:qid StackMachine_interpretation_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734))

:named StackMachine_interpretation_Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734))
(declare-fun StackMachine.tcompile@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StackMachine.tcompile@tok
@x0)
@x1)
@x2)
(StackMachine.tcompile @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT StackMachine.tcompile@tok
@x0)
@x1)
@x2))
:qid token_correspondence_StackMachine.tcompile))

:named token_correspondence_StackMachine.tcompile))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StackMachine.tcompile@tok
Tm_arrow_3621b3ed31a5abf9dcceb3c31fbfe734))

;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StackMachine.tcompile@tok
@x1)
@x2)
@x3)
(StackMachine.tcompile @x1
@x2
@x3))
 

:pattern ((StackMachine.tcompile @x1
@x2
@x3))
:qid function_token_typing_StackMachine.tcompile.1))
)
 

:pattern ((ApplyTT @x0
StackMachine.tcompile@tok))
:qid function_token_typing_StackMachine.tcompile))

:named function_token_typing_StackMachine.tcompile))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(StackMachine.texp @x0))
(HasType @x2
(Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x0
@x1)))
(HasType (StackMachine.tcompile @x0
@x1
@x2)
(StackMachine.tprog @x2
(Prims.Cons StackMachine.typ
@x0
@x2))))
 

:pattern ((StackMachine.tcompile @x0
@x1
@x2))
:qid typing_StackMachine.tcompile))

:named typing_StackMachine.tcompile))
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (k: Prims.pure_post (StackMachine.tprog ts (t :: ts))).
;   (forall (x: StackMachine.tprog ts (t :: ts)). {:pattern Prims.guard_free (k x)}
;       Prims.auto_squash (k x)) ==>
;   (~(TNConst? e) /\ ~(TBConst? e) /\ ~(TBinop? e) ==> Prims.l_False) /\
;   (forall (b: Prims.nat). e == StackMachine.TNConst b ==> StackMachine.Nat == t) /\
;   (~(TNConst? e) ==>
;     (forall (b: Prims.bool). e == StackMachine.TBConst b ==> StackMachine.Bool == t) /\
;     (~(TBConst? e) ==>
;       (forall (b: StackMachine.typ)
;           (b: StackMachine.typ)
;           (b: StackMachine.typ)
;           (b: StackMachine.tbinop b b b)
;           (b: StackMachine.texp b)
;           (b: StackMachine.texp b).
;           e == StackMachine.TBinop b b b ==>
;           b << e /\
;           (forall (any_result: StackMachine.tstack).
;               ts == any_result ==>
;               (forall (any_result: StackMachine.tprog ts (b :: ts)).
;                   StackMachine.tcompile b ts == any_result ==>
;                   b << e /\
;                   (forall (return_val: ts: StackMachine.tstack{b << e}).
;                       return_val == b :: ts ==>
;                       (forall (any_result: StackMachine.tprog (b :: ts) (b :: b :: ts)).
;                           StackMachine.tcompile b (b :: ts) == any_result ==>
;                           (forall (any_result: StackMachine.tprog (b :: ts) (b :: ts)).
;                               StackMachine.tconcat (StackMachine.tcompile b (b :: ts))
;                                 (StackMachine.TCons (StackMachine.TiBinop b) StackMachine.TNil) ==
;                               any_result ==>
;                               (forall (any_result: StackMachine.tprog ts (b :: ts)).
;                                   StackMachine.tconcat (StackMachine.tcompile b ts)
;                                     (StackMachine.tconcat (StackMachine.tcompile b (b :: ts))
;                                         (StackMachine.TCons (StackMachine.TiBinop b)
;                                             StackMachine.TNil)) ==
;                                   any_result ==>
;                                   b == t)))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec tcompile`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_2
(Prims.Cons StackMachine.typ
x_99009f55474bb74b46709f3fb0f7bfdf_0
x_16a921c956d1ccece42ab1b05699fdf1_2))))

;; def=Prims.fst(402,27-402,88); use=StackMachine.fst(189,2-194,58)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(189,2-194,58)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(189,2-194,58)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(189,2-194,58)
(and (implies 
;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(and 
;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(not 
;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(not 
;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(not 
;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(189,2-194,58)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Prims.nat)

;; def=StackMachine.fst(188,21-190,15); use=StackMachine.fst(189,8-190,15)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TNConst @x1))
)

;; def=StackMachine.fst(136,42-188,19); use=StackMachine.fst(190,19-190,44)
(or label_2

;; def=StackMachine.fst(136,42-188,19); use=StackMachine.fst(190,19-190,44)
(= StackMachine.Nat@tok
x_99009f55474bb74b46709f3fb0f7bfdf_0)
)
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(189,2-194,58)
(not 
;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=Prims.fst(389,2-389,39); use=StackMachine.fst(189,2-194,58)
(and 
;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(189,2-194,58)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Prims.bool)

;; def=StackMachine.fst(188,21-191,15); use=StackMachine.fst(189,8-191,15)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TBConst @x1))
)

;; def=StackMachine.fst(137,43-188,19); use=StackMachine.fst(191,19-191,44)
(or label_3

;; def=StackMachine.fst(137,43-188,19); use=StackMachine.fst(191,19-191,44)
(= StackMachine.Bool@tok
x_99009f55474bb74b46709f3fb0f7bfdf_0)
)
)
 
;;no pats
:qid @query.3))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(189,2-194,58)
(not 
;; def=StackMachine.fst(188,21-188,22); use=StackMachine.fst(189,8-189,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(189,2-194,58)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(189,2-194,58)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(189,2-194,58)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(189,2-194,58)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(StackMachine.tbinop @x1
@x2
@x3))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(189,2-194,58)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.texp @x1))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(189,2-194,58)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StackMachine.texp @x2))

;; def=StackMachine.fst(188,21-192,31); use=StackMachine.fst(189,8-192,31)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TBinop @x1
@x2
@x3
@x4
@x5
@x6))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(189,2-194,58)
(and 
;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(189,2-194,58)
(or label_4

;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(189,2-194,58)
(Valid 
;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(189,2-194,58)
(Prims.precedes (StackMachine.texp @x2)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x6
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(189,2-194,58)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
StackMachine.tstack)

;; def=StackMachine.fst(188,34-188,36); use=StackMachine.fst(189,2-194,58)
(= x_16a921c956d1ccece42ab1b05699fdf1_2
@x7)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(189,2-194,58)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_2
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)))

;; def=StackMachine.fst(182,32-193,29); use=StackMachine.fst(189,2-194,58)
(= (StackMachine.tcompile @x2
@x6
x_16a921c956d1ccece42ab1b05699fdf1_2)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(189,2-194,58)
(and 
;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(194,41-194,48)
(or label_5

;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(194,41-194,48)
(Valid 
;; def=StackMachine.fst(189,2-194,58); use=StackMachine.fst(194,41-194,48)
(Prims.precedes (StackMachine.texp @x1)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x5
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)
)


;; def=Prims.fst(356,2-356,58); use=StackMachine.fst(189,2-194,58)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_1cb354550cf7794d3eaddfca17831be4 @x1
@x5))

;; def=Prims.fst(356,26-356,41); use=StackMachine.fst(189,2-194,58)
(= @x9
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(189,2-194,58)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(StackMachine.tprog (Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))))

;; def=StackMachine.fst(182,32-194,32); use=StackMachine.fst(189,2-194,58)
(= (StackMachine.tcompile @x1
@x5
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
@x10)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(189,2-194,58)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(StackMachine.tprog (Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)))

;; def=StackMachine.fst(182,51-194,58); use=StackMachine.fst(189,2-194,58)
(= (StackMachine.tconcat (Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.tcompile @x1
@x5
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(StackMachine.TCons (Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.TiBinop @x1
@x2
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2
@x4)
(StackMachine.TNil (Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2))))
@x11)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(189,2-194,58)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_2
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)))

;; def=StackMachine.fst(188,53-194,58); use=StackMachine.fst(189,2-194,58)
(= (StackMachine.tconcat x_16a921c956d1ccece42ab1b05699fdf1_2
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.tcompile @x2
@x6
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.tconcat (Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.tcompile @x1
@x5
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(StackMachine.TCons (Prims.Cons StackMachine.typ
@x1
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.TiBinop @x1
@x2
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2
@x4)
(StackMachine.TNil (Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)))))
@x12)
)

;; def=StackMachine.fst(188,18-192,23); use=StackMachine.fst(193,6-194,58)
(or label_6

;; def=StackMachine.fst(188,18-192,23); use=StackMachine.fst(193,6-194,58)
(= @x3
x_99009f55474bb74b46709f3fb0f7bfdf_0)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tcompile, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1, constructor_distinct_StackMachine.TBConst, data_elim_StackMachine.TBinop, data_elim_StackMachine.TNConst, disc_equation_StackMachine.TBConst, disc_equation_StackMachine.TBinop, disc_equation_StackMachine.TNConst, fuel_guarded_inversion_StackMachine.tbinop, fuel_guarded_inversion_StackMachine.texp, projection_inverse_BoxBool_proj_0, subterm_ordering_StackMachine.TBinop

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec tcompile


; <Start encoding let rec tcompile>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StackMachine.tcompile.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StackMachine.tcompile.fuel_instrumented_token () Term)
(declare-fun StackMachine.tcompile (Term Term Term) Term)
(declare-fun StackMachine.tcompile@tok () Term)
;;;;;;;;;;;;;;;;e: texp t -> ts: tstack -> Prims.Tot (tprog ts (t :: ts))
(declare-fun Tm_arrow_17d250be03b1b07b1b9e1ab17103cd1d () Term)

; </end encoding let rec tcompile>


; encoding sigelt #reset-options "--z3rlimit 10"


; <Skipped #reset-options "--z3rlimit 10"/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.tprogDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
(StackMachine.tprog @x0
@x1))
(HasType @x3
(StackMachine.vstack @x0)))
(HasType (StackMachine.tprogDenote @x0
@x1
@x2
@x3)
(StackMachine.vstack @x1)))
 

:pattern ((StackMachine.tprogDenote @x0
@x1
@x2
@x3))
:qid typing_StackMachine.tprogDenote))

:named typing_StackMachine.tprogDenote))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.tprogDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tprog @x1
@x2))
(HasType @x4
(StackMachine.vstack @x1)))
(HasType (StackMachine.tprogDenote.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
(StackMachine.vstack @x2)))
 

:pattern ((StackMachine.tprogDenote.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_StackMachine.tprogDenote.fuel_instrumented))

:named token_correspondence_StackMachine.tprogDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.tprogDenote
;;; Fact-ids: Name StackMachine.tprogDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tprog @x1
@x2))
(HasType @x4
(StackMachine.vstack @x1)))
(= (StackMachine.tprogDenote.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 @x3))
(ite (is-StackMachine.TNil @lb5)
@x4
(ite (is-StackMachine.TCons @lb5)
(StackMachine.tprogDenote.fuel_instrumented @u0
(StackMachine.TCons_s2 @lb5)
(StackMachine.TCons_s3 @lb5)
(StackMachine.TCons__4 @lb5)
(StackMachine.tinstrDenote (StackMachine.TCons_s1 @lb5)
(StackMachine.TCons_s2 @lb5)
(StackMachine.TCons__3 @lb5)
@x4))
Tm_unit)))))
 :weight 0


:pattern ((StackMachine.tprogDenote.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_StackMachine.tprogDenote.fuel_instrumented))

:named equation_with_fuel_StackMachine.tprogDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.tprogDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StackMachine.tprogDenote.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(StackMachine.tprogDenote.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((StackMachine.tprogDenote.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_StackMachine.tprogDenote.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.tprogDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.tprogDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(176,8-176,19); use=StackMachine.fst(176,8-176,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.tprogDenote @x0
@x1
@x2
@x3)
(StackMachine.tprogDenote.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((StackMachine.tprogDenote @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_StackMachine.tprogDenote.fuel_instrumented))

:named @fuel_correspondence_StackMachine.tprogDenote.fuel_instrumented))
(push) ;; push{2

; Starting query at StackMachine.fst(203,2-205,58)

;;;;;;;;;;;;;;;;ts : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_0 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_0
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_0
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_0))
;;;;;;;;;;;;;;;;ts' : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_1 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_1
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_1
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_1))
;;;;;;;;;;;;;;;;ts'' : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_2 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_2
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_2
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_2))
;;;;;;;;;;;;;;;;p : StackMachine.tprog ts ts' (StackMachine.tprog ts ts')
(declare-fun x_974496a40345cd37a4bd3e98318859b9_3 () Term)
;;;;;;;;;;;;;;;;binder_x_974496a40345cd37a4bd3e98318859b9_3
;;; Fact-ids: 
(assert (! (HasType x_974496a40345cd37a4bd3e98318859b9_3
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1))
:named binder_x_974496a40345cd37a4bd3e98318859b9_3))
;;;;;;;;;;;;;;;;p' : StackMachine.tprog ts' ts'' (StackMachine.tprog ts' ts'')
(declare-fun x_6139a6130ce3dbbc55c3991e4703c482_4 () Term)
;;;;;;;;;;;;;;;;binder_x_6139a6130ce3dbbc55c3991e4703c482_4
;;; Fact-ids: 
(assert (! (HasType x_6139a6130ce3dbbc55c3991e4703c482_4
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_1
x_16a921c956d1ccece42ab1b05699fdf1_2))
:named binder_x_6139a6130ce3dbbc55c3991e4703c482_4))
;;;;;;;;;;;;;;;;s : StackMachine.vstack ts (StackMachine.vstack ts)
(declare-fun x_ec5a2f91b89276de9e637eac70b8acd5_5 () Term)
;;;;;;;;;;;;;;;;binder_x_ec5a2f91b89276de9e637eac70b8acd5_5
;;; Fact-ids: 
(assert (! (HasType x_ec5a2f91b89276de9e637eac70b8acd5_5
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0))
:named binder_x_ec5a2f91b89276de9e637eac70b8acd5_5))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.tconcat_correct (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.tconcat_correct@tok () Term)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_d1760e10b707c3062cc6ede605be3f0c (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(199,65-205,58); use=StackMachine.fst(205,18-205,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_d1760e10b707c3062cc6ede605be3f0c @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_d1760e10b707c3062cc6ede605be3f0c @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_d1760e10b707c3062cc6ede605be3f0c))

:named refinement_kinding_Tm_refine_d1760e10b707c3062cc6ede605be3f0c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(199,65-205,58); use=StackMachine.fst(205,18-205,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d1760e10b707c3062cc6ede605be3f0c @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(StackMachine.vstack @x2))

;; def=StackMachine.fst(203,2-205,58); use=StackMachine.fst(205,18-205,33)

;; def=StackMachine.fst(203,2-205,58); use=StackMachine.fst(205,18-205,33)
(Valid 
;; def=StackMachine.fst(203,2-205,58); use=StackMachine.fst(205,18-205,33)
(Prims.precedes (StackMachine.tprog @x2
@x3)
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
@x4
x_974496a40345cd37a4bd3e98318859b9_3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d1760e10b707c3062cc6ede605be3f0c @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_d1760e10b707c3062cc6ede605be3f0c))

:named refinement_interpretation_Tm_refine_d1760e10b707c3062cc6ede605be3f0c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d1760e10b707c3062cc6ede605be3f0c
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(199,65-205,58); use=StackMachine.fst(205,18-205,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d1760e10b707c3062cc6ede605be3f0c @x0
@x1
@x2)))
(Valid (Prims.hasEq (StackMachine.vstack @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d1760e10b707c3062cc6ede605be3f0c @x0
@x1
@x2))))
:qid haseqTm_refine_d1760e10b707c3062cc6ede605be3f0c))

:named haseqTm_refine_d1760e10b707c3062cc6ede605be3f0c))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       StackMachine.tprogDenote (StackMachine.tconcat p p') s ==
;       StackMachine.tprogDenote p' (StackMachine.tprogDenote p s) ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(TNil? p) /\ ~(TCons? p) ==> Prims.l_False) /\
;       (forall (b: StackMachine.tstack).
;           p == StackMachine.TNil ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(TNil? p) ==>
;         (forall (b: StackMachine.tstack)
;             (b: StackMachine.tstack)
;             (b: StackMachine.tstack)
;             (b: StackMachine.tinstr b b)
;             (b: StackMachine.tprog b b).
;             p == StackMachine.TCons b b ==>
;             ts' == b /\
;             (forall (any_result: StackMachine.tprog ts' ts'').
;                 p' == any_result ==>
;                 ts == b /\
;                 (forall (any_result: StackMachine.vstack ts).
;                     s == any_result ==>
;                     (forall (any_result: StackMachine.vstack b).
;                         StackMachine.tinstrDenote b s == any_result ==>
;                         b << p /\
;                         (forall (return_val: s: StackMachine.vstack b {b << p}).
;                             return_val == StackMachine.tinstrDenote b s ==>
;                             StackMachine.tinstrDenote b s == return_val ==>
;                             (forall (pure_result: Prims.unit).
;                                 StackMachine.tprogDenote (StackMachine.tconcat b p')
;                                   (StackMachine.tinstrDenote b s) ==
;                                 StackMachine.tprogDenote p'
;                                   (StackMachine.tprogDenote b (StackMachine.tinstrDenote b s)) ==>
;                                 k pure_result))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec tconcat_correct`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StackMachine.fst(203,2-205,58); use=StackMachine.fst(203,2-205,58)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(203,2-205,58)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=StackMachine.fst(201,19-201,85); use=StackMachine.fst(203,2-205,58)
(or label_2

;; def=StackMachine.fst(201,19-201,85); use=StackMachine.fst(203,2-205,58)
(= (StackMachine.tprogDenote x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_2
(StackMachine.tconcat x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_16a921c956d1ccece42ab1b05699fdf1_2
x_974496a40345cd37a4bd3e98318859b9_3
x_6139a6130ce3dbbc55c3991e4703c482_4)
x_ec5a2f91b89276de9e637eac70b8acd5_5)
(StackMachine.tprogDenote x_16a921c956d1ccece42ab1b05699fdf1_1
x_16a921c956d1ccece42ab1b05699fdf1_2
x_6139a6130ce3dbbc55c3991e4703c482_4
(StackMachine.tprogDenote x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_3
x_ec5a2f91b89276de9e637eac70b8acd5_5)))
)
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(203,2-205,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(203,2-205,58)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(203,2-205,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(203,2-205,58)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(203,2-205,58)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(203,2-205,58)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(203,2-205,58)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(203,2-205,58)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(203,2-205,58)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(203,2-205,58)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(203,2-205,58)
(and (implies 
;; def=StackMachine.fst(199,24-199,25); use=StackMachine.fst(203,8-203,9)
(and 
;; def=StackMachine.fst(199,24-199,25); use=StackMachine.fst(203,8-203,9)
(not 
;; def=StackMachine.fst(199,24-199,25); use=StackMachine.fst(203,8-203,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNil x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_3))
)


;; def=StackMachine.fst(199,24-199,25); use=StackMachine.fst(203,8-203,9)
(not 
;; def=StackMachine.fst(199,24-199,25); use=StackMachine.fst(203,8-203,9)
(BoxBool_proj_0 (StackMachine.uu___is_TCons x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_3))
)
)

label_3)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(203,2-205,58)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StackMachine.tstack)

;; def=StackMachine.fst(199,24-204,8); use=StackMachine.fst(203,8-204,8)
(= x_974496a40345cd37a4bd3e98318859b9_3
(StackMachine.TNil @x2))
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(203,2-205,58)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(203,2-205,58)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(203,2-205,58)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(203,2-205,58)
(not 
;; def=StackMachine.fst(199,24-199,25); use=StackMachine.fst(203,8-203,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNil x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1
x_974496a40345cd37a4bd3e98318859b9_3))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(203,2-205,58)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(203,2-205,58)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(203,2-205,58)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.tstack)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(203,2-205,58)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.tinstr @x2
@x3))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(203,2-205,58)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StackMachine.tprog @x3
@x4))

;; def=StackMachine.fst(199,24-205,14); use=StackMachine.fst(203,8-205,14)
(= x_974496a40345cd37a4bd3e98318859b9_3
(StackMachine.TCons @x2
@x3
@x4
@x5
@x6))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(203,2-205,58)
(and 
;; def=StackMachine.fst(198,29-205,11); use=StackMachine.fst(205,37-205,39)
(or label_4

;; def=StackMachine.fst(198,29-205,11); use=StackMachine.fst(205,37-205,39)
(= x_16a921c956d1ccece42ab1b05699fdf1_1
@x4)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(203,2-205,58)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_1
x_16a921c956d1ccece42ab1b05699fdf1_2))

;; def=StackMachine.fst(199,43-199,45); use=StackMachine.fst(203,2-205,58)
(= x_6139a6130ce3dbbc55c3991e4703c482_4
@x7)
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(203,2-205,58)
(and 
;; def=StackMachine.fst(198,25-205,11); use=StackMachine.fst(205,56-205,57)
(or label_5

;; def=StackMachine.fst(198,25-205,11); use=StackMachine.fst(205,56-205,57)
(= x_16a921c956d1ccece42ab1b05699fdf1_0
@x2)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(203,2-205,58)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_0))

;; def=StackMachine.fst(152,42-199,66); use=StackMachine.fst(203,2-205,58)
(= x_ec5a2f91b89276de9e637eac70b8acd5_5
@x8)
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(203,2-205,58)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StackMachine.vstack @x3))

;; def=StackMachine.fst(199,65-205,58); use=StackMachine.fst(203,2-205,58)
(= (StackMachine.tinstrDenote @x2
@x3
@x5
x_ec5a2f91b89276de9e637eac70b8acd5_5)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(203,2-205,58)
(and 
;; def=StackMachine.fst(203,2-205,58); use=StackMachine.fst(205,40-205,58)
(or label_6

;; def=StackMachine.fst(203,2-205,58); use=StackMachine.fst(205,40-205,58)
(Valid 
;; def=StackMachine.fst(203,2-205,58); use=StackMachine.fst(205,40-205,58)
(Prims.precedes (StackMachine.tprog @x3
@x4)
(StackMachine.tprog x_16a921c956d1ccece42ab1b05699fdf1_0
x_16a921c956d1ccece42ab1b05699fdf1_1)
@x6
x_974496a40345cd37a4bd3e98318859b9_3)
)
)


;; def=Prims.fst(356,2-356,58); use=StackMachine.fst(203,2-205,58)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_d1760e10b707c3062cc6ede605be3f0c @x3
@x4
@x6))

;; def=Prims.fst(356,26-356,41); use=StackMachine.fst(203,2-205,58)
(= @x10
(StackMachine.tinstrDenote @x2
@x3
@x5
x_ec5a2f91b89276de9e637eac70b8acd5_5))


;; def=StackMachine.fst(199,65-205,58); use=StackMachine.fst(203,2-205,58)
(= (StackMachine.tinstrDenote @x2
@x3
@x5
x_ec5a2f91b89276de9e637eac70b8acd5_5)
@x10)
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(205,18-205,33)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=StackMachine.fst(201,19-201,85); use=StackMachine.fst(205,18-205,33)
(= (StackMachine.tprogDenote @x3
x_16a921c956d1ccece42ab1b05699fdf1_2
(StackMachine.tconcat @x3
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2
@x6
x_6139a6130ce3dbbc55c3991e4703c482_4)
(StackMachine.tinstrDenote @x2
@x3
@x5
x_ec5a2f91b89276de9e637eac70b8acd5_5))
(StackMachine.tprogDenote @x4
x_16a921c956d1ccece42ab1b05699fdf1_2
x_6139a6130ce3dbbc55c3991e4703c482_4
(StackMachine.tprogDenote @x3
@x4
@x6
(StackMachine.tinstrDenote @x2
@x3
@x5
x_ec5a2f91b89276de9e637eac70b8acd5_5))))
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(205,18-205,33)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(205,18-205,33)
(ApplyTT @x1
@x11)
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 5446560)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tconcat_correct, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StackMachine.tconcat.fuel_instrumented, @fuel_correspondence_StackMachine.tprogDenote.fuel_instrumented, @fuel_irrelevance_StackMachine.tconcat.fuel_instrumented, @fuel_irrelevance_StackMachine.tprogDenote.fuel_instrumented, @query, binder_x_16a921c956d1ccece42ab1b05699fdf1_2, binder_x_6139a6130ce3dbbc55c3991e4703c482_4, binder_x_974496a40345cd37a4bd3e98318859b9_3, binder_x_ec5a2f91b89276de9e637eac70b8acd5_5, constructor_distinct_StackMachine.TCons, constructor_distinct_StackMachine.TNil, data_elim_StackMachine.TCons, data_elim_StackMachine.TNil, disc_equation_StackMachine.TCons, disc_equation_StackMachine.TNil, equation_with_fuel_StackMachine.tconcat.fuel_instrumented, equation_with_fuel_StackMachine.tprogDenote.fuel_instrumented, fuel_guarded_inversion_StackMachine.tprog, projection_inverse_BoxBool_proj_0, projection_inverse_StackMachine.TCons__3, projection_inverse_StackMachine.TCons__4, projection_inverse_StackMachine.TCons_s1, projection_inverse_StackMachine.TCons_s2, projection_inverse_StackMachine.TCons_s3, projection_inverse_StackMachine.TNil_s, subterm_ordering_StackMachine.TCons, typing_StackMachine.tconcat

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec tconcat_correct


; <Start encoding let rec tconcat_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.tconcat_correct (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.tconcat_correct@tok () Term)

; </end encoding let rec tconcat_correct>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.texpDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(StackMachine.texp @x0)))
(HasType (StackMachine.texpDenote @x0
@x1)
(StackMachine.typeDenote @x0)))
 

:pattern ((StackMachine.texpDenote @x0
@x1))
:qid typing_StackMachine.texpDenote))

:named typing_StackMachine.texpDenote))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StackMachine.tcompile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StackMachine.typ)
(HasType @x1
(StackMachine.texp @x0))
(HasType @x2
StackMachine.tstack))
(HasType (StackMachine.tcompile @x0
@x1
@x2)
(StackMachine.tprog @x2
(Prims.Cons StackMachine.typ
@x0
@x2))))
 

:pattern ((StackMachine.tcompile @x0
@x1
@x2))
:qid typing_StackMachine.tcompile))

:named typing_StackMachine.tcompile))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.texpDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
(StackMachine.texp @x1)))
(HasType (StackMachine.texpDenote.fuel_instrumented @u0
@x1
@x2)
(StackMachine.typeDenote @x1)))
 

:pattern ((StackMachine.texpDenote.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_StackMachine.texpDenote.fuel_instrumented))

:named token_correspondence_StackMachine.texpDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StackMachine.tcompile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
(StackMachine.texp @x1))
(HasType @x3
StackMachine.tstack))
(HasType (StackMachine.tcompile.fuel_instrumented @u0
@x1
@x2
@x3)
(StackMachine.tprog @x3
(Prims.Cons StackMachine.typ
@x1
@x3))))
 

:pattern ((StackMachine.tcompile.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_StackMachine.tcompile.fuel_instrumented))

:named token_correspondence_StackMachine.tcompile.fuel_instrumented))
;;;;;;;;;;;;;;;;Lemma: StackMachine.tconcat_correct
;;; Fact-ids: Name StackMachine.tconcat_correct; Namespace StackMachine
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
StackMachine.tstack)
(HasType @x1
StackMachine.tstack)
(HasType @x2
StackMachine.tstack)
(HasType @x3
(StackMachine.tprog @x0
@x1))
(HasType @x4
(StackMachine.tprog @x1
@x2))
(HasType @x5
(StackMachine.vstack.fuel_instrumented ZFuel
@x0)))

;; def=StackMachine.fst(201,19-201,85); use=StackMachine.fst(201,19-201,85)
(= (StackMachine.tprogDenote.fuel_instrumented ZFuel
@x0
@x2
(StackMachine.tconcat.fuel_instrumented ZFuel
@x0
@x1
@x2
@x3
@x4)
@x5)
(StackMachine.tprogDenote.fuel_instrumented ZFuel
@x1
@x2
@x4
(StackMachine.tprogDenote.fuel_instrumented ZFuel
@x0
@x1
@x3
@x5)))
)
 

:pattern ((StackMachine.tprogDenote.fuel_instrumented ZFuel
@x0
@x2
(StackMachine.tconcat.fuel_instrumented ZFuel
@x0
@x1
@x2
@x3
@x4)
@x5))
:qid lemma_StackMachine.tconcat_correct))
:named lemma_StackMachine.tconcat_correct))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.texpDenote
;;; Fact-ids: Name StackMachine.texpDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
(StackMachine.texp @x1)))
(= (StackMachine.texpDenote.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-StackMachine.TNConst @lb3)
(StackMachine.TNConst__0 @lb3)
(ite (is-StackMachine.TBConst @lb3)
(StackMachine.TBConst__0 @lb3)
(ite (is-StackMachine.TBinop @lb3)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StackMachine.tbinopDenote@tok
(StackMachine.TBinop_t1 @lb3))
(StackMachine.TBinop_t2 @lb3))
(StackMachine.TBinop_t @lb3))
(StackMachine.TBinop__3 @lb3))
(StackMachine.texpDenote.fuel_instrumented @u0
(StackMachine.TBinop_t1 @lb3)
(StackMachine.TBinop__4 @lb3)))
(StackMachine.texpDenote.fuel_instrumented @u0
(StackMachine.TBinop_t2 @lb3)
(StackMachine.TBinop__5 @lb3)))
Tm_unit))))))
 :weight 0


:pattern ((StackMachine.texpDenote.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_StackMachine.texpDenote.fuel_instrumented))

:named equation_with_fuel_StackMachine.texpDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StackMachine.tcompile
;;; Fact-ids: Name StackMachine.tcompile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StackMachine.typ)
(HasType @x2
(StackMachine.texp @x1))
(HasType @x3
StackMachine.tstack))
(= (StackMachine.tcompile.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x2))
(ite (is-StackMachine.TNConst @lb4)
(StackMachine.TCons @x3
(Prims.Cons StackMachine.typ
StackMachine.Nat@tok
@x3)
(Prims.Cons StackMachine.typ
StackMachine.Nat@tok
@x3)
(StackMachine.TiNConst @x3
(StackMachine.TNConst__0 @lb4))
(StackMachine.TNil (Prims.Cons StackMachine.typ
StackMachine.Nat@tok
@x3)))
(ite (is-StackMachine.TBConst @lb4)
(StackMachine.TCons @x3
(Prims.Cons StackMachine.typ
StackMachine.Bool@tok
@x3)
(Prims.Cons StackMachine.typ
StackMachine.Bool@tok
@x3)
(StackMachine.TiBConst @x3
(StackMachine.TBConst__0 @lb4))
(StackMachine.TNil (Prims.Cons StackMachine.typ
StackMachine.Bool@tok
@x3)))
(ite (is-StackMachine.TBinop @lb4)
(StackMachine.tconcat @x3
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t2 @lb4)
@x3)
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t @lb4)
@x3)
(StackMachine.tcompile.fuel_instrumented @u0
(StackMachine.TBinop_t2 @lb4)
(StackMachine.TBinop__5 @lb4)
@x3)
(StackMachine.tconcat (Prims.Cons StackMachine.typ
(StackMachine.TBinop_t2 @lb4)
@x3)
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t1 @lb4)
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t2 @lb4)
@x3))
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t @lb4)
@x3)
(StackMachine.tcompile.fuel_instrumented @u0
(StackMachine.TBinop_t1 @lb4)
(StackMachine.TBinop__4 @lb4)
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t2 @lb4)
@x3))
(StackMachine.TCons (Prims.Cons StackMachine.typ
(StackMachine.TBinop_t1 @lb4)
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t2 @lb4)
@x3))
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t @lb4)
@x3)
(Prims.Cons StackMachine.typ
(StackMachine.TBinop_t @lb4)
@x3)
(StackMachine.TiBinop (StackMachine.TBinop_t1 @lb4)
(StackMachine.TBinop_t2 @lb4)
(StackMachine.TBinop_t @lb4)
@x3
(StackMachine.TBinop__3 @lb4))
(StackMachine.TNil (Prims.Cons StackMachine.typ
(StackMachine.TBinop_t @lb4)
@x3)))))
Tm_unit))))))
 :weight 0


:pattern ((StackMachine.tcompile.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_StackMachine.tcompile.fuel_instrumented))

:named equation_with_fuel_StackMachine.tcompile.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.texpDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.texpDenote.fuel_instrumented (SFuel @u0)
@x1
@x2)
(StackMachine.texpDenote.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((StackMachine.texpDenote.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_StackMachine.texpDenote.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.texpDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StackMachine.tcompile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StackMachine.tcompile.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(StackMachine.tcompile.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((StackMachine.tcompile.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_StackMachine.tcompile.fuel_instrumented))

:named @fuel_irrelevance_StackMachine.tcompile.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.texpDenote; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(127,8-127,18); use=StackMachine.fst(127,8-127,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StackMachine.texpDenote @x0
@x1)
(StackMachine.texpDenote.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((StackMachine.texpDenote @x0
@x1))
:qid @fuel_correspondence_StackMachine.texpDenote.fuel_instrumented))

:named @fuel_correspondence_StackMachine.texpDenote.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StackMachine.tcompile; Namespace StackMachine
(assert (! 
;; def=StackMachine.fst(188,8-188,16); use=StackMachine.fst(188,8-188,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StackMachine.tcompile @x0
@x1
@x2)
(StackMachine.tcompile.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((StackMachine.tcompile @x0
@x1
@x2))
:qid @fuel_correspondence_StackMachine.tcompile.fuel_instrumented))

:named @fuel_correspondence_StackMachine.tcompile.fuel_instrumented))
(push) ;; push{2

; Starting query at StackMachine.fst(212,2-220,45)

;;;;;;;;;;;;;;;;t : StackMachine.typ (StackMachine.typ)
(declare-fun x_99009f55474bb74b46709f3fb0f7bfdf_0 () Term)
;;;;;;;;;;;;;;;;binder_x_99009f55474bb74b46709f3fb0f7bfdf_0
;;; Fact-ids: 
(assert (! (HasType x_99009f55474bb74b46709f3fb0f7bfdf_0
StackMachine.typ)
:named binder_x_99009f55474bb74b46709f3fb0f7bfdf_0))
;;;;;;;;;;;;;;;;e : StackMachine.texp t (StackMachine.texp t)
(declare-fun x_e9914cc59dbecc2ac85148e3e6b7dd9a_1 () Term)
;;;;;;;;;;;;;;;;binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
;;; Fact-ids: 
(assert (! (HasType x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0))
:named binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
;;;;;;;;;;;;;;;;ts : StackMachine.tstack (StackMachine.tstack)
(declare-fun x_16a921c956d1ccece42ab1b05699fdf1_2 () Term)
;;;;;;;;;;;;;;;;binder_x_16a921c956d1ccece42ab1b05699fdf1_2
;;; Fact-ids: 
(assert (! (HasType x_16a921c956d1ccece42ab1b05699fdf1_2
StackMachine.tstack)
:named binder_x_16a921c956d1ccece42ab1b05699fdf1_2))
;;;;;;;;;;;;;;;;s : StackMachine.vstack ts (StackMachine.vstack ts)
(declare-fun x_6c1df4396abfdddfd116f15b23ec8d1a_3 () Term)
;;;;;;;;;;;;;;;;binder_x_6c1df4396abfdddfd116f15b23ec8d1a_3
;;; Fact-ids: 
(assert (! (HasType x_6c1df4396abfdddfd116f15b23ec8d1a_3
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2))
:named binder_x_6c1df4396abfdddfd116f15b23ec8d1a_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StackMachine.tcompile_correct_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StackMachine.tcompile_correct_@tok () Term)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_2792b7e0bc0197bfd71e1499c3a26653 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(208,46-220,45); use=StackMachine.fst(216,6-216,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_2792b7e0bc0197bfd71e1499c3a26653 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_2792b7e0bc0197bfd71e1499c3a26653 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_2792b7e0bc0197bfd71e1499c3a26653))

:named refinement_kinding_Tm_refine_2792b7e0bc0197bfd71e1499c3a26653))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(208,46-220,45); use=StackMachine.fst(216,6-216,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2792b7e0bc0197bfd71e1499c3a26653 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(StackMachine.vstack (Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)))

;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(216,6-216,23)

;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(216,6-216,23)
(Valid 
;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(216,6-216,23)
(Prims.precedes (StackMachine.texp @x3)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x4
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2792b7e0bc0197bfd71e1499c3a26653 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_2792b7e0bc0197bfd71e1499c3a26653))

:named refinement_interpretation_Tm_refine_2792b7e0bc0197bfd71e1499c3a26653))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2792b7e0bc0197bfd71e1499c3a26653
;;; Fact-ids: 
(assert (! 
;; def=StackMachine.fst(208,46-220,45); use=StackMachine.fst(216,6-216,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2792b7e0bc0197bfd71e1499c3a26653 @x0
@x1
@x2)))
(Valid (Prims.hasEq (StackMachine.vstack (Prims.Cons StackMachine.typ
@x0
x_16a921c956d1ccece42ab1b05699fdf1_2)))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2792b7e0bc0197bfd71e1499c3a26653 @x0
@x1
@x2))))
:qid haseqTm_refine_2792b7e0bc0197bfd71e1499c3a26653))

:named haseqTm_refine_2792b7e0bc0197bfd71e1499c3a26653))

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       StackMachine.tprogDenote (StackMachine.tcompile e ts) s == (StackMachine.texpDenote e, s) ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(TNConst? e) /\ ~(TBConst? e) /\ ~(TBinop? e) ==> Prims.l_False) /\
;       (forall (b: Prims.nat).
;           e == StackMachine.TNConst b ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(TNConst? e) ==>
;         (forall (b: Prims.bool).
;             e == StackMachine.TBConst b ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(TBConst? e) ==>
;           (forall (b: StackMachine.typ)
;               (b: StackMachine.typ)
;               (b: StackMachine.typ)
;               (b: StackMachine.tbinop b b b)
;               (b: StackMachine.texp b)
;               (b: StackMachine.texp b).
;               e == StackMachine.TBinop b b b ==>
;               b << e /\
;               (forall (return_val: s: StackMachine.vstack (b :: ts) {b << e}).
;                   return_val == (StackMachine.texpDenote b, s) ==>
;                   (forall (pure_result: Prims.unit).
;                       StackMachine.tprogDenote (StackMachine.tcompile b (b :: ts))
;                         (StackMachine.texpDenote b,
;                         s) ==
;                       (StackMachine.texpDenote b,
;                       (StackMachine.texpDenote b,
;                       s)) ==>
;                       b << e /\
;                       (forall (any_result: StackMachine.vstack ts).
;                           s == any_result ==>
;                           (forall (pure_result: Prims.unit).
;                               StackMachine.tprogDenote (StackMachine.tcompile b ts) s ==
;                               (StackMachine.texpDenote b,
;                               s) ==>
;                               b == b /\
;                               (forall (any_result: StackMachine.tprog (b :: b :: ts) (b :: ts)).
;                                   StackMachine.TCons (StackMachine.TiBinop b) StackMachine.TNil ==
;                                   any_result ==>
;                                   Prims.has_type (StackMachine.texpDenote b)
;                                     (match b with
;                                       | StackMachine.Nat -> Prims.nat
;                                       | StackMachine.Bool -> Prims.bool) /\
;                                   (forall (return_val: StackMachine.typeDenote b).
;                                       return_val == StackMachine.texpDenote b ==>
;                                       (forall (any_result:
;                                           StackMachine.typeDenote b & StackMachine.vstack ts).
;                                           (StackMachine.texpDenote b, s) == any_result ==>
;                                           (forall (pure_result: Prims.unit).
;                                               StackMachine.tprogDenote (StackMachine.tconcat (StackMachine.tcompile
;                                                         b
;                                                         (b :: ts))
;                                                     (StackMachine.TCons (StackMachine.TiBinop b)
;                                                         StackMachine.TNil))
;                                                 (StackMachine.texpDenote b,
;                                                 s) ==
;                                               StackMachine.tprogDenote (StackMachine.TCons
;                                                     (StackMachine.TiBinop b) StackMachine.TNil)
;                                                 (StackMachine.tprogDenote (StackMachine.tcompile b
;                                                         (b :: ts))
;                                                     (StackMachine.texpDenote b,
;                                                     s)) ==>
;                                               k pure_result))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec tcompile_correct'`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(212,2-220,45)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(212,2-220,45)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=StackMachine.fst(210,19-210,71); use=StackMachine.fst(212,2-220,45)
(or label_2

;; def=StackMachine.fst(210,19-210,71); use=StackMachine.fst(212,2-220,45)
(= (StackMachine.tprogDenote x_16a921c956d1ccece42ab1b05699fdf1_2
(Prims.Cons StackMachine.typ
x_99009f55474bb74b46709f3fb0f7bfdf_0
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.tcompile x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
x_16a921c956d1ccece42ab1b05699fdf1_2)
x_6c1df4396abfdddfd116f15b23ec8d1a_3)
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote x_99009f55474bb74b46709f3fb0f7bfdf_0)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.texpDenote x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
x_6c1df4396abfdddfd116f15b23ec8d1a_3))
)
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(212,2-220,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(212,2-220,45)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(212,2-220,45)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(212,2-220,45)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(212,2-220,45)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StackMachine.fst(212,2-220,45)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(212,2-220,45)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StackMachine.fst(212,2-220,45)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(212,2-220,45)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StackMachine.fst(212,2-220,45)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(212,2-220,45)
(and (implies 
;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(and 
;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(not 
;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(not 
;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(not 
;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBinop x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)
)

label_3)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(212,2-220,45)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.nat)

;; def=StackMachine.fst(208,30-213,15); use=StackMachine.fst(212,8-213,15)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TNConst @x2))
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(212,2-220,45)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(212,2-220,45)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(212,2-220,45)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(212,2-220,45)
(not 
;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(BoxBool_proj_0 (StackMachine.uu___is_TNConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=Prims.fst(389,2-389,39); use=StackMachine.fst(212,2-220,45)
(and 
;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(212,2-220,45)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.bool)

;; def=StackMachine.fst(208,30-214,15); use=StackMachine.fst(212,8-214,15)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TBConst @x2))
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(212,2-220,45)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(212,2-220,45)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StackMachine.fst(212,2-220,45)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=StackMachine.fst(212,2-220,45)
(not 
;; def=StackMachine.fst(208,30-208,31); use=StackMachine.fst(212,8-212,9)
(BoxBool_proj_0 (StackMachine.uu___is_TBConst x_99009f55474bb74b46709f3fb0f7bfdf_0
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1))
)


;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(212,2-220,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(212,2-220,45)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(212,2-220,45)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StackMachine.typ)

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(212,2-220,45)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StackMachine.tbinop @x2
@x3
@x4))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(212,2-220,45)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StackMachine.texp @x2))

;; def=Prims.fst(413,99-413,120); use=StackMachine.fst(212,2-220,45)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StackMachine.texp @x3))

;; def=StackMachine.fst(208,30-215,28); use=StackMachine.fst(212,8-215,28)
(= x_e9914cc59dbecc2ac85148e3e6b7dd9a_1
(StackMachine.TBinop @x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(212,2-220,45)
(and 
;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(216,38-216,56)
(or label_4

;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(216,38-216,56)
(Valid 
;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(216,38-216,56)
(Prims.precedes (StackMachine.texp @x2)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x6
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)
)


;; def=Prims.fst(356,2-356,58); use=StackMachine.fst(212,2-220,45)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_2792b7e0bc0197bfd71e1499c3a26653 @x3
@x2
@x6))

;; def=Prims.fst(356,26-356,41); use=StackMachine.fst(212,2-220,45)
(= @x8
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x3)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.texpDenote @x3
@x7)
x_6c1df4396abfdddfd116f15b23ec8d1a_3))
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(216,6-216,23)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=StackMachine.fst(210,19-210,71); use=StackMachine.fst(216,6-216,23)
(= (StackMachine.tprogDenote (Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x2
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2))
(StackMachine.tcompile @x2
@x6
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2))
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x3)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.texpDenote @x3
@x7)
x_6c1df4396abfdddfd116f15b23ec8d1a_3))
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x2)
(StackMachine.vstack (Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2))
(StackMachine.texpDenote @x2
@x6)
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x3)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.texpDenote @x3
@x7)
x_6c1df4396abfdddfd116f15b23ec8d1a_3)))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(212,2-220,45)
(and 
;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(217,30-217,31)
(or label_5

;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(217,30-217,31)
(Valid 
;; def=StackMachine.fst(212,2-220,45); use=StackMachine.fst(217,30-217,31)
(Prims.precedes (StackMachine.texp @x3)
(StackMachine.texp x_99009f55474bb74b46709f3fb0f7bfdf_0)
@x7
x_e9914cc59dbecc2ac85148e3e6b7dd9a_1)
)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(212,2-220,45)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2))

;; def=StackMachine.fst(208,46-208,47); use=StackMachine.fst(212,2-220,45)
(= x_6c1df4396abfdddfd116f15b23ec8d1a_3
@x10)
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(217,6-217,23)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=StackMachine.fst(210,19-210,71); use=StackMachine.fst(217,6-217,23)
(= (StackMachine.tprogDenote x_16a921c956d1ccece42ab1b05699fdf1_2
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.tcompile @x3
@x7
x_16a921c956d1ccece42ab1b05699fdf1_2)
x_6c1df4396abfdddfd116f15b23ec8d1a_3)
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x3)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.texpDenote @x3
@x7)
x_6c1df4396abfdddfd116f15b23ec8d1a_3))
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(212,2-220,45)
(and 
;; def=StackMachine.fst(215,14-215,20); use=StackMachine.fst(220,25-220,26)
(or label_6

;; def=StackMachine.fst(215,14-215,20); use=StackMachine.fst(220,25-220,26)
(= @x3
@x2)
)


;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(212,2-220,45)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(StackMachine.tprog (Prims.Cons StackMachine.typ
@x2
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)))

;; def=StackMachine.fst(199,43-219,11); use=StackMachine.fst(212,2-220,45)
(= (StackMachine.TCons (Prims.Cons StackMachine.typ
@x2
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.TiBinop @x2
@x3
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2
@x5)
(StackMachine.TNil (Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)))
@x12)
)

;; def=Prims.fst(459,77-459,89); use=StackMachine.fst(212,2-220,45)
(and 
;; def=StackMachine.fst(220,28-220,41); use=StackMachine.fst(220,28-220,41)
(or label_7
(HasType (StackMachine.texpDenote @x3
@x7)
(let ((@lb13 @x2))
(ite (is-StackMachine.Nat @lb13)
Prims.nat
(ite (is-StackMachine.Bool @lb13)
Prims.bool
Tm_unit)))))


;; def=Prims.fst(356,2-356,58); use=StackMachine.fst(212,2-220,45)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(StackMachine.typeDenote @x2))

;; def=Prims.fst(356,26-356,41); use=StackMachine.fst(212,2-220,45)
(= @x13
(StackMachine.texpDenote @x3
@x7))
)

;; def=Prims.fst(451,66-451,102); use=StackMachine.fst(212,2-220,45)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(FStar.Pervasives.Native.tuple2 (StackMachine.typeDenote @x2)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)))

;; def=StackMachine.fst(199,65-220,45); use=StackMachine.fst(212,2-220,45)
(= (FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x2)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.texpDenote @x3
@x7)
x_6c1df4396abfdddfd116f15b23ec8d1a_3)
@x14)
)

;; def=Prims.fst(441,36-441,97); use=StackMachine.fst(220,6-220,21)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.unit)

;; def=StackMachine.fst(201,19-201,85); use=StackMachine.fst(220,6-220,21)
(= (StackMachine.tprogDenote (Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.tconcat (Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x2
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.tcompile @x2
@x6
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(StackMachine.TCons (Prims.Cons StackMachine.typ
@x2
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.TiBinop @x2
@x3
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2
@x5)
(StackMachine.TNil (Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2))))
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x2)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.texpDenote @x3
@x7)
x_6c1df4396abfdddfd116f15b23ec8d1a_3))
(StackMachine.tprogDenote (Prims.Cons StackMachine.typ
@x2
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.TCons (Prims.Cons StackMachine.typ
@x2
(Prims.Cons StackMachine.typ
@x3
x_16a921c956d1ccece42ab1b05699fdf1_2))
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.TiBinop @x2
@x3
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2
@x5)
(StackMachine.TNil (Prims.Cons StackMachine.typ
@x4
x_16a921c956d1ccece42ab1b05699fdf1_2)))
(StackMachine.tprogDenote (Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2)
(Prims.Cons StackMachine.typ
@x2
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(StackMachine.tcompile @x2
@x6
(Prims.Cons StackMachine.typ
@x2
x_16a921c956d1ccece42ab1b05699fdf1_2))
(FStar.Pervasives.Native.Mktuple2 (StackMachine.typeDenote @x2)
(StackMachine.vstack x_16a921c956d1ccece42ab1b05699fdf1_2)
(StackMachine.texpDenote @x3
@x7)
x_6c1df4396abfdddfd116f15b23ec8d1a_3))))
)

;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(220,6-220,21)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StackMachine.fst(220,6-220,21)
(ApplyTT @x1
@x15)
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 5446560)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StackMachine.tcompile_correct', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StackMachine.tcompile.fuel_instrumented, @fuel_correspondence_StackMachine.tconcat.fuel_instrumented, @fuel_correspondence_StackMachine.texpDenote.fuel_instrumented, @fuel_correspondence_StackMachine.tinstrDenote.fuel_instrumented, @fuel_correspondence_StackMachine.tprogDenote.fuel_instrumented, @fuel_correspondence_StackMachine.vstack.fuel_instrumented, @fuel_irrelevance_StackMachine.tcompile.fuel_instrumented, @fuel_irrelevance_StackMachine.tconcat.fuel_instrumented, @fuel_irrelevance_StackMachine.texpDenote.fuel_instrumented, @fuel_irrelevance_StackMachine.tprogDenote.fuel_instrumented, @fuel_irrelevance_StackMachine.vstack.fuel_instrumented, @query, StackMachine_pretyping_99009f55474bb74b46709f3fb0f7bfdf, binder_x_16a921c956d1ccece42ab1b05699fdf1_2, binder_x_6c1df4396abfdddfd116f15b23ec8d1a_3, binder_x_e9914cc59dbecc2ac85148e3e6b7dd9a_1, constructor_distinct_StackMachine.Bool, constructor_distinct_StackMachine.Nat, constructor_distinct_StackMachine.TBConst, constructor_distinct_StackMachine.TBinop, constructor_distinct_StackMachine.TCons, constructor_distinct_StackMachine.TNConst, constructor_distinct_StackMachine.TNil, constructor_distinct_StackMachine.TiBConst, constructor_distinct_StackMachine.TiBinop, constructor_distinct_StackMachine.TiNConst, data_elim_StackMachine.TBConst, data_elim_StackMachine.TBinop, data_elim_StackMachine.TCons, data_elim_StackMachine.TNConst, data_typing_intro_Prims.Cons@tok, data_typing_intro_StackMachine.TNil@tok, data_typing_intro_StackMachine.TiBConst@tok, data_typing_intro_StackMachine.TiBinop@tok, data_typing_intro_StackMachine.TiNConst@tok, disc_equation_StackMachine.TBConst, disc_equation_StackMachine.TBinop, disc_equation_StackMachine.TNConst, equality_tok_StackMachine.Bool@tok, equality_tok_StackMachine.Nat@tok, equation_StackMachine.tstack, equation_StackMachine.typeDenote, equation_with_fuel_StackMachine.tcompile.fuel_instrumented, equation_with_fuel_StackMachine.texpDenote.fuel_instrumented, equation_with_fuel_StackMachine.tinstrDenote.fuel_instrumented, equation_with_fuel_StackMachine.tprogDenote.fuel_instrumented, equation_with_fuel_StackMachine.vstack.fuel_instrumented, fuel_guarded_inversion_StackMachine.tbinop, fuel_guarded_inversion_StackMachine.texp, fuel_guarded_inversion_StackMachine.tprog, kinding_StackMachine.typ@tok, lemma_StackMachine.tconcat_correct, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_StackMachine.TBConst__0, projection_inverse_StackMachine.TBinop__3, projection_inverse_StackMachine.TBinop__4, projection_inverse_StackMachine.TBinop__5, projection_inverse_StackMachine.TBinop_t, projection_inverse_StackMachine.TBinop_t1, projection_inverse_StackMachine.TBinop_t2, projection_inverse_StackMachine.TCons__3, projection_inverse_StackMachine.TCons__4, projection_inverse_StackMachine.TCons_s1, projection_inverse_StackMachine.TCons_s2, projection_inverse_StackMachine.TCons_s3, projection_inverse_StackMachine.TNConst__0, projection_inverse_StackMachine.TNil_s, projection_inverse_StackMachine.TiBConst__1, projection_inverse_StackMachine.TiBConst_s, projection_inverse_StackMachine.TiBinop__4, projection_inverse_StackMachine.TiBinop_arg1, projection_inverse_StackMachine.TiBinop_arg2, projection_inverse_StackMachine.TiBinop_res, projection_inverse_StackMachine.TiBinop_s, projection_inverse_StackMachine.TiNConst__1, projection_inverse_StackMachine.TiNConst_s, refinement_interpretation_Tm_refine_2792b7e0bc0197bfd71e1499c3a26653, subterm_ordering_StackMachine.TBinop, typing_StackMachine.tcompile, typing_StackMachine.tconcat, typing_StackMachine.texpDenote, typing_StackMachine.tinstrDenote, typing_StackMachine.tprogDenote, typing_tok_StackMachine.Bool@tok, typing_tok_StackMachine.Nat@tok
