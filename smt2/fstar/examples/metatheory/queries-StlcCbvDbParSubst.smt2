
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for interface FStar.Sealed


; <Start encoding val FStar.Sealed.sealed>

(declare-fun FStar.Sealed.sealed (Term) Term)

(declare-fun FStar.Sealed.sealed@tok () Term)

; </end encoding val FStar.Sealed.sealed>


; <Start encoding val FStar.Sealed.sealed_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.sealed_singl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.sealed_singl@tok () Term)

; </end encoding val FStar.Sealed.sealed_singl>


; <Start encoding val FStar.Sealed.seal>

(declare-fun FStar.Sealed.seal (Term Term) Term)
(declare-fun Tm_arrow_202c0385508095b22536f7b176783182 () Term)
(declare-fun FStar.Sealed.seal@tok () Term)

; </end encoding val FStar.Sealed.seal>


; <Start encoding val FStar.Sealed.map_seal>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Sealed.map_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_8ae919a1b422d31df5f3a30011fa6e98 () Term)
(declare-fun FStar.Sealed.map_seal@tok () Term)

; </end encoding val FStar.Sealed.map_seal>


; <Start encoding val FStar.Sealed.bind_seal>

(declare-fun Tm_arrow_5dc851dfbcbc38067d4415ede8f88e9f (Term Term) Term)
(declare-fun FStar.Sealed.bind_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_4d90a5e6583ddd9ddbd451cbed0e9d01 () Term)
(declare-fun FStar.Sealed.bind_seal@tok () Term)

; </end encoding val FStar.Sealed.bind_seal>


; End Externals for interface FStar.Sealed


; Externals for interface FStar.Range


; <Start encoding val FStar.Range.__range>

(declare-fun FStar.Range.__range () Term)

; </end encoding val FStar.Range.__range>


; <Start encoding let range>

(declare-fun FStar.Range.range () Term)

; </end encoding let range>


; <Start encoding val FStar.Range.__range_0>

(declare-fun FStar.Range.__range_0 (Dummy_sort) Term)

; </end encoding val FStar.Range.__range_0>


; <Start encoding let range_0>

(declare-fun FStar.Range.range_0 (Dummy_sort) Term)

; </end encoding let range_0>


; <Start encoding val FStar.Range.__mk_range>

(declare-fun FStar.Range.__mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_692aa0ebe01353db00b5203de7da6785 () Term)
(declare-fun FStar.Range.__mk_range@tok () Term)

; </end encoding val FStar.Range.__mk_range>


; <Start encoding val FStar.Range.mk_range>

(declare-fun FStar.Range.mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2d3d853349c0a35c0e0c8d13086384ea () Term)
(declare-fun FStar.Range.mk_range@tok () Term)

; </end encoding val FStar.Range.mk_range>


; <Start encoding val FStar.Range.join_range>

(declare-fun FStar.Range.join_range (Term Term) Term)
(declare-fun Tm_arrow_6eaaa31f2d36a5c7cca7eb998962a7fa () Term)
(declare-fun FStar.Range.join_range@tok () Term)

; </end encoding val FStar.Range.join_range>


; <Start encoding let labeled>

(declare-fun FStar.Range.labeled (Term Term Term) Term)
(declare-fun Tm_arrow_ab5899212fc4c148181589be7fd78af1 () Term)
(declare-fun FStar.Range.labeled@tok () Term)

; </end encoding let labeled>


; <Start encoding val FStar.Range.explode>

(declare-fun FStar.Range.explode (Term) Term)
(declare-fun Tm_arrow_f9315f3207257087f0bf3975f13024e3 () Term)
(declare-fun FStar.Range.explode@tok () Term)

; </end encoding val FStar.Range.explode>


; End Externals for interface FStar.Range


; Externals for interface FStar.Float


; <Start encoding val FStar.Float.float>

(declare-fun FStar.Float.float () Term)

; </end encoding val FStar.Float.float>


; <Start encoding let double>

(declare-fun FStar.Float.double () Term)

; </end encoding let double>


; End Externals for interface FStar.Float


; Externals for module FStar.Mul


; <Start encoding let op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding let op_Star>


; End Externals for module FStar.Mul


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>


(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)
(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)

(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; Externals for interface FStar.Seq.Base


; <Start encoding val FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding val FStar.Seq.Base.seq>


; <Start encoding val FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding val FStar.Seq.Base.length>


; <Start encoding val FStar.Seq.Base.seq_to_list>

(declare-fun FStar.Seq.Base.seq_to_list (Term Term) Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)
(declare-fun FStar.Seq.Base.seq_to_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_to_list>


; <Start encoding val FStar.Seq.Base.seq_of_list>

(declare-fun FStar.Seq.Base.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Base.seq_of_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_of_list>


; <Start encoding val FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding val FStar.Seq.Base.index>


; <Start encoding val FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding val FStar.Seq.Base.create>


; <Start encoding val FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux>


; <Start encoding val FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding val FStar.Seq.Base.init>


; <Start encoding val FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux_ghost>


; <Start encoding val FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost>


; <Start encoding val FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding val FStar.Seq.Base.empty>


; <Start encoding let createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding let createEmpty>


; <Start encoding val FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_empty>


; <Start encoding val FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding val FStar.Seq.Base.upd>


; <Start encoding val FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding val FStar.Seq.Base.append>


; <Start encoding let cons>

(declare-fun FStar.Seq.Base.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Base.cons@tok () Term)

; </end encoding let cons>


; <Start encoding let op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding let op_At_Bar>


; <Start encoding val FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding val FStar.Seq.Base.slice>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_create_len>


; <Start encoding val FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_len>


; <Start encoding val FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_len_upd>


; <Start encoding val FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_len_append>


; <Start encoding val FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_len_slice>


; <Start encoding val FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_create>


; <Start encoding val FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_upd1>


; <Start encoding val FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_upd2>


; <Start encoding val FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_app1>


; <Start encoding val FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_app2>


; <Start encoding val FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_slice>


; <Start encoding val FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding val FStar.Seq.Base.hasEq_lemma>


; <Start encoding val FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding val FStar.Seq.Base.equal>


; <Start encoding val FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding val FStar.Seq.Base.eq_i>


; <Start encoding val FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding val FStar.Seq.Base.eq>


; <Start encoding val FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_eq_intro>


; <Start encoding val FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_refl>


; <Start encoding val FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_elim>


; <Start encoding val FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding val FStar.Seq.Base.append_assoc>


; <Start encoding val FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_l>


; <Start encoding val FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_r>


; <Start encoding val FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_index>


; <Start encoding val FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_index_>


; <Start encoding val FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost_index>


; <Start encoding val FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_ghost_index_>


; <Start encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; Externals for interface FStar.Math.Lemmas


; <Start encoding val FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_div_axiom>


; <Start encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Start encoding val FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_cancel_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_right>


; <Start encoding val FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_left>


; <Start encoding val FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_right>


; <Start encoding val FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_left>


; <Start encoding val FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_right>


; <Start encoding val FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding val FStar.Math.Lemmas.addition_is_associative>


; <Start encoding val FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding val FStar.Math.Lemmas.subtraction_is_distributive>


; <Start encoding val FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_add_plus_minus>


; <Start encoding val FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_left>


; <Start encoding val FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_right>


; <Start encoding val FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_neg_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_right>


; <Start encoding val FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_binds_tighter>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_bound>


; <Start encoding val FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_ineq1>


; <Start encoding val FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding val FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Start encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Start encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_sum>


; <Start encoding val FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_mult>


; <Start encoding val FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_lt_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_le_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_plus>


; <Start encoding val FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_minus>


; <Start encoding val FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiply_fractions>


; <Start encoding val FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_lt>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt_nat>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt>


; <Start encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Start encoding val FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_div>


; <Start encoding val FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_mod>


; <Start encoding val FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding val FStar.Math.Lemmas.lt_multiple_is_equal>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod_plus>


; <Start encoding val FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.sub_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_div>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_add_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_0>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_1>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_injective>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_exact>


; <Start encoding val FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.div_exact_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec2>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mod>


; <Start encoding val FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_division_definition>


; <Start encoding val FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_range_lemma>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiplication_order_lemma>


; <Start encoding val FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_propriety>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_1>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_2>


; <Start encoding val FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition>


; <Start encoding val FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_division_lemma>


; <Start encoding val FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_distributivity>


; <Start encoding val FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_le>


; <Start encoding val FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_sub_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Start encoding val FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub>


; <Start encoding val FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mult_exact>


; <Start encoding val FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mul_div_exact>


; <Start encoding val FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_pow2_div2>


; <Start encoding val FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_multiplication_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_division_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_add>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_twice>


; <Start encoding val FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub>


; <Start encoding val FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_add_both>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Start encoding val FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for interface FStar.Math.Lemmas


; Externals for interface FStar.BitVector


; <Start encoding let bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding let bv_t>


; <Start encoding let zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding let zero_vec>


; <Start encoding let elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding let elem_vec>


; <Start encoding let ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding let ones_vec>


; <Start encoding let rec logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)

; </end encoding let rec logand_vec>


; <Start encoding val FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logand_vec_definition>


; <Start encoding let rec logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)


; </end encoding let rec logxor_vec>


; <Start encoding val FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logxor_vec_definition>


; <Start encoding let rec logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)


; </end encoding let rec logor_vec>


; <Start encoding val FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logor_vec_definition>


; <Start encoding let rec lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)

; </end encoding let rec lognot_vec>


; <Start encoding val FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.lognot_vec_definition>


; <Start encoding val FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding val FStar.BitVector.lemma_xor_bounded>


; <Start encoding let is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

; </end encoding let is_subset_vec>


; <Start encoding let is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

; </end encoding let is_superset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding let shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding let shift_left_vec>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding let shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding let shift_right_vec>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding let shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding let shift_arithmetic_right_vec>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for interface FStar.BitVector


; Externals for interface FStar.UInt


; <Start encoding val FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)

; </end encoding val FStar.UInt.pow2_values>


; <Start encoding let max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)

; </end encoding let max_int>


; <Start encoding let min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)

; </end encoding let min_int>


; <Start encoding let fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)

; </end encoding let fits>


; <Start encoding let size>

(declare-fun FStar.UInt.size (Term Term) Term)
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)

; </end encoding let size>


; <Start encoding let uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)

; </end encoding let uint_t>


; <Start encoding let zero>

(declare-fun FStar.UInt.zero (Term) Term)
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding let zero>


; <Start encoding let pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding let pow2_n>


; <Start encoding let one>

(declare-fun FStar.UInt.one (Term) Term)
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding let one>


; <Start encoding let ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding let ones>


; <Start encoding let incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding let incr>


; <Start encoding let decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding let decr>


; <Start encoding val FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding val FStar.UInt.incr_underspec>


; <Start encoding val FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding val FStar.UInt.decr_underspec>


; <Start encoding let incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding let incr_mod>


; <Start encoding let decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding let decr_mod>


; <Start encoding let add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding let add>


; <Start encoding val FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding val FStar.UInt.add_underspec>


; <Start encoding let add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding let add_mod>


; <Start encoding let sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding let sub>


; <Start encoding val FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding val FStar.UInt.sub_underspec>


; <Start encoding let sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding let sub_mod>


; <Start encoding let mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding let mul>


; <Start encoding val FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding val FStar.UInt.mul_underspec>


; <Start encoding let mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding let mul_mod>


; <Start encoding val FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding val FStar.UInt.lt_square_div_lt>


; <Skipped #push-options "--fuel 0 --ifuel 0"/>


; <Start encoding let mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding let mul_div>


; <Skipped #pop-options/>


; <Start encoding let div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding let div>


; <Start encoding val FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding val FStar.UInt.div_underspec>


; <Start encoding val FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding val FStar.UInt.div_size>


; <Start encoding let udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding let udiv>


; <Start encoding let mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding let mod>


; <Start encoding let eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding let to_uint_t>


; <Start encoding let rec to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)

; </end encoding let rec to_vec>


; <Start encoding let rec from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)

; </end encoding let rec from_vec>


; <Start encoding val FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_1>


; <Start encoding val FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_2>


; <Start encoding val FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding val FStar.UInt.inverse_aux>


; <Start encoding val FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_vec_lemma>


; <Start encoding val FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_num_lemma>


; <Start encoding val FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_1>


; <Start encoding val FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_2>


; <Start encoding val FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding val FStar.UInt.from_vec_aux>


; <Start encoding val FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding val FStar.UInt.seq_slice_lemma>


; <Start encoding val FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding val FStar.UInt.from_vec_propriety>


; <Start encoding val FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding val FStar.UInt.append_lemma>


; <Start encoding val FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_left_lemma>


; <Start encoding val FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_right_lemma>


; <Start encoding val FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_to_vec_lemma>


; <Start encoding val FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.zero_from_vec_lemma>


; <Start encoding val FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.one_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.pow2_from_vec_lemma>


; <Start encoding val FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_to_vec_lemma>


; <Start encoding val FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.ones_from_vec_lemma>


; <Start encoding let nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding let nth>


; <Start encoding val FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding val FStar.UInt.nth_lemma>


; <Start encoding val FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_nth_lemma>


; <Start encoding val FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_nth_lemma>


; <Start encoding val FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.one_nth_lemma>


; <Start encoding val FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_nth_lemma>


; <Start encoding let logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding let logor>


; <Start encoding let lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding let lognot>


; <Start encoding val FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding val FStar.UInt.logand_definition>


; <Start encoding val FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding val FStar.UInt.logxor_definition>


; <Start encoding val FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding val FStar.UInt.logor_definition>


; <Start encoding val FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding val FStar.UInt.lognot_definition>


; <Start encoding let minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding let minus>


; <Start encoding val FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding val FStar.UInt.logand_commutative>


; <Start encoding val FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding val FStar.UInt.logand_associative>


; <Start encoding val FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding val FStar.UInt.logand_self>


; <Start encoding val FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_1>


; <Start encoding val FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_2>


; <Start encoding val FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding val FStar.UInt.subset_vec_le_lemma>


; <Start encoding val FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding val FStar.UInt.logand_le>


; <Start encoding val FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding val FStar.UInt.logxor_commutative>


; <Start encoding val FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding val FStar.UInt.logxor_associative>


; <Start encoding val FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding val FStar.UInt.logxor_self>


; <Start encoding val FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_1>


; <Start encoding val FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_2>


; <Start encoding let xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding let xor>


; <Start encoding val FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding val FStar.UInt.xor_lemma>


; <Start encoding val FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding val FStar.UInt.logxor_inv>


; <Start encoding val FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding val FStar.UInt.logxor_neq_nonzero>


; <Start encoding val FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding val FStar.UInt.logor_commutative>


; <Start encoding val FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding val FStar.UInt.logor_associative>


; <Start encoding val FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding val FStar.UInt.logor_self>


; <Start encoding val FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_1>


; <Start encoding val FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_2>


; <Start encoding val FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding val FStar.UInt.superset_vec_ge_lemma>


; <Start encoding val FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding val FStar.UInt.logor_ge>


; <Start encoding val FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding val FStar.UInt.lognot_self>


; <Start encoding val FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding val FStar.UInt.lognot_lemma_1>


; <Start encoding val FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding val FStar.UInt.index_to_vec_ones>


; <Start encoding val FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding val FStar.UInt.logor_disjoint>


; <Start encoding val FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding val FStar.UInt.logand_mask>


; <Start encoding let shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding let shift_left>


; <Start encoding let shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding let shift_right>


; <Start encoding val FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_1>


; <Start encoding val FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_2>


; <Start encoding val FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_1>


; <Start encoding val FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_2>


; <Start encoding val FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logand_lemma>


; <Start encoding val FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logand_lemma>


; <Start encoding val FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logxor_lemma>


; <Start encoding val FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logxor_lemma>


; <Start encoding val FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logor_lemma>


; <Start encoding val FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logor_lemma>


; <Start encoding val FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_1>


; <Start encoding val FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_2>


; <Start encoding val FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_3>


; <Start encoding val FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_lemma>


; <Start encoding val FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_1>


; <Start encoding val FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_2>


; <Start encoding val FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_3>


; <Start encoding val FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_lemma>


; <Start encoding let msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding let msb>


; <Start encoding val FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_pow2>


; <Start encoding val FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_zero>


; <Start encoding val FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_gte>


; <Start encoding val FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_uint_mod>


; <Start encoding val FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_add_sub_cancel>


; <Start encoding val FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding val FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding val FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_sub_add_cancel>


; <Start encoding let zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding let zero_extend_vec>


; <Start encoding let one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding let one_extend_vec>


; <Start encoding let zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding let zero_extend>


; <Start encoding let one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding let one_extend>


; <Start encoding val FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding val FStar.UInt.lemma_zero_extend>


; <Start encoding val FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding val FStar.UInt.lemma_one_extend>


; <Start encoding val FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding val FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_one_ext>


; <Start encoding val FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_mod>


; <Start encoding val FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_zero>


; <Start encoding val FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_one_mod_pow2>


; <Start encoding val FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding val FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value>


; <Start encoding val FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; Externals for interface FStar.UInt32


; <Start encoding let n>

(declare-fun FStar.UInt32.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt32.t>

(declare-fun FStar.UInt32.t (Dummy_sort) Term)

; </end encoding val FStar.UInt32.t>


; <Start encoding val FStar.UInt32.v>

(declare-fun FStar.UInt32.v (Term) Term)
(declare-fun Tm_arrow_33a06d9a3ec1c77524ab958d37ae1453 () Term)
(declare-fun FStar.UInt32.v@tok () Term)

; </end encoding val FStar.UInt32.v>


; <Start encoding val FStar.UInt32.uint_to_t>

(declare-fun FStar.UInt32.uint_to_t (Term) Term)
(declare-fun Tm_refine_0ea1fba779ad5718e28476faeef94d56 (Term) Term)
(declare-fun Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674 () Term)
(declare-fun FStar.UInt32.uint_to_t@tok () Term)


; </end encoding val FStar.UInt32.uint_to_t>


; <Start encoding val FStar.UInt32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.uv_inv@tok () Term)

; </end encoding val FStar.UInt32.uv_inv>


; <Start encoding val FStar.UInt32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.vu_inv@tok () Term)

; </end encoding val FStar.UInt32.vu_inv>


; <Start encoding val FStar.UInt32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.v_inj@tok () Term)

; </end encoding val FStar.UInt32.v_inj>


; <Start encoding val FStar.UInt32.zero>

(declare-fun FStar.UInt32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_7cfa0141116db910fdee890408ebbaf1 () Term)


; </end encoding val FStar.UInt32.zero>


; <Start encoding val FStar.UInt32.one>

(declare-fun FStar.UInt32.one (Dummy_sort) Term)
(declare-fun Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2 () Term)


; </end encoding val FStar.UInt32.one>


; <Start encoding val FStar.UInt32.add>

(declare-fun FStar.UInt32.add (Term Term) Term)
(declare-fun Tm_refine_709aff84c75b0fff77dcbf3b529649dd (Term Term) Term)
(declare-fun Tm_arrow_5558b72197031b1efc1a0f8298859a47 () Term)
(declare-fun FStar.UInt32.add@tok () Term)


; </end encoding val FStar.UInt32.add>


; <Start encoding val FStar.UInt32.add_underspec>

(declare-fun FStar.UInt32.add_underspec (Term Term) Term)
(declare-fun Tm_refine_57eacb083aaa8f3c6200eef2872d40a9 (Term Term) Term)
(declare-fun Tm_arrow_2aa4a786718187783c350fff98c0276d () Term)
(declare-fun FStar.UInt32.add_underspec@tok () Term)


; </end encoding val FStar.UInt32.add_underspec>


; <Start encoding val FStar.UInt32.add_mod>

(declare-fun FStar.UInt32.add_mod (Term Term) Term)
(declare-fun Tm_refine_edc8fb7e909853d860d4ab445ef31337 (Term Term) Term)
(declare-fun Tm_arrow_edbd649f4b12a343efa6ef46e7961890 () Term)
(declare-fun FStar.UInt32.add_mod@tok () Term)


; </end encoding val FStar.UInt32.add_mod>


; <Start encoding val FStar.UInt32.sub>

(declare-fun FStar.UInt32.sub (Term Term) Term)
(declare-fun Tm_refine_aa4b3d268075d84252df525db1f85524 (Term Term) Term)
(declare-fun Tm_arrow_ac932fe6124478fcfd5be99d334122e8 () Term)
(declare-fun FStar.UInt32.sub@tok () Term)


; </end encoding val FStar.UInt32.sub>


; <Start encoding val FStar.UInt32.sub_underspec>

(declare-fun FStar.UInt32.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_01926286fa04b785df0ea0da544f2001 (Term Term) Term)
(declare-fun Tm_arrow_a0c271942b2fe7be43f6ae297698cd0b () Term)
(declare-fun FStar.UInt32.sub_underspec@tok () Term)


; </end encoding val FStar.UInt32.sub_underspec>


; <Start encoding val FStar.UInt32.sub_mod>

(declare-fun FStar.UInt32.sub_mod (Term Term) Term)
(declare-fun Tm_refine_ace23c600fbe87b65e5fc333816f74de (Term Term) Term)
(declare-fun Tm_arrow_4a8c4b67b5977a746f1eeda7c310346f () Term)
(declare-fun FStar.UInt32.sub_mod@tok () Term)


; </end encoding val FStar.UInt32.sub_mod>


; <Start encoding val FStar.UInt32.mul>

(declare-fun FStar.UInt32.mul (Term Term) Term)
(declare-fun Tm_refine_1ccfb21903aa30ace8832f7a4d067d9b (Term Term) Term)
(declare-fun Tm_arrow_f261941925861d12451675f7409141e5 () Term)
(declare-fun FStar.UInt32.mul@tok () Term)


; </end encoding val FStar.UInt32.mul>


; <Start encoding val FStar.UInt32.mul_underspec>

(declare-fun FStar.UInt32.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb4ffd3222952e9ac95fc72e8f9913c6 (Term Term) Term)
(declare-fun Tm_arrow_54623a1c9ed03c94751f7d25d259da67 () Term)
(declare-fun FStar.UInt32.mul_underspec@tok () Term)


; </end encoding val FStar.UInt32.mul_underspec>


; <Start encoding val FStar.UInt32.mul_mod>

(declare-fun FStar.UInt32.mul_mod (Term Term) Term)
(declare-fun Tm_refine_8618df86656cf4c2bc98614452120307 (Term Term) Term)
(declare-fun Tm_arrow_b9ba4f3f3f0a1ea3202a99cc97238a0d () Term)
(declare-fun FStar.UInt32.mul_mod@tok () Term)


; </end encoding val FStar.UInt32.mul_mod>


; <Start encoding val FStar.UInt32.div>

(declare-fun Tm_refine_0941c9ff95557f2d53bc8f8179ab793e () Term)
(declare-fun FStar.UInt32.div (Term Term) Term)

(declare-fun Tm_refine_74d1ae07763cf2ce5f26906c9df0d2cc (Term Term) Term)
(declare-fun Tm_arrow_61dc5944349c0fd1e6ccd916a51fdfe8 () Term)
(declare-fun FStar.UInt32.div@tok () Term)


; </end encoding val FStar.UInt32.div>


; <Start encoding val FStar.UInt32.rem>


(declare-fun FStar.UInt32.rem (Term Term) Term)

(declare-fun Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 (Term Term) Term)
(declare-fun Tm_arrow_a00bbce6d7d4a1d495177d4f11116643 () Term)
(declare-fun FStar.UInt32.rem@tok () Term)


; </end encoding val FStar.UInt32.rem>


; <Start encoding val FStar.UInt32.logand>

(declare-fun FStar.UInt32.logand (Term Term) Term)
(declare-fun Tm_refine_7afd5b0ca8e77c7f6870883658e19d63 (Term Term) Term)
(declare-fun Tm_arrow_eff0426e7af51f8d330de4f569da9534 () Term)
(declare-fun FStar.UInt32.logand@tok () Term)


; </end encoding val FStar.UInt32.logand>


; <Start encoding val FStar.UInt32.logxor>

(declare-fun FStar.UInt32.logxor (Term Term) Term)
(declare-fun Tm_refine_2b25e5c3b25bc06167200cbfa5d36b3e (Term Term) Term)
(declare-fun Tm_arrow_07d2eb0ad8dc47fa48b862c24603f207 () Term)
(declare-fun FStar.UInt32.logxor@tok () Term)


; </end encoding val FStar.UInt32.logxor>


; <Start encoding val FStar.UInt32.logor>

(declare-fun FStar.UInt32.logor (Term Term) Term)
(declare-fun Tm_refine_39cb18a1d289e559096741772432b24f (Term Term) Term)
(declare-fun Tm_arrow_f4c0c09b0ba22212b54bc6a7fb947fac () Term)
(declare-fun FStar.UInt32.logor@tok () Term)


; </end encoding val FStar.UInt32.logor>


; <Start encoding val FStar.UInt32.lognot>

(declare-fun FStar.UInt32.lognot (Term) Term)
(declare-fun Tm_refine_d5743ca0a8d5f3ceec748bdcb132b14f (Term) Term)
(declare-fun Tm_arrow_b6548dae703a0f26a4185c51dee5464b () Term)
(declare-fun FStar.UInt32.lognot@tok () Term)


; </end encoding val FStar.UInt32.lognot>


; <Start encoding val FStar.UInt32.shift_right>

(declare-fun FStar.UInt32.shift_right (Term Term) Term)
(declare-fun Tm_refine_59202c8b625f4b04caf2081d6778d9e7 (Term Term) Term)
(declare-fun Tm_arrow_13c7acc70a3dd34a798f691f2cee4104 () Term)
(declare-fun FStar.UInt32.shift_right@tok () Term)


; </end encoding val FStar.UInt32.shift_right>


; <Start encoding val FStar.UInt32.shift_left>

(declare-fun FStar.UInt32.shift_left (Term Term) Term)
(declare-fun Tm_refine_c642c4de19ebed0b1a9b5f85d40989c0 (Term Term) Term)
(declare-fun Tm_arrow_0709d575329517627fac117b134f4462 () Term)
(declare-fun FStar.UInt32.shift_left@tok () Term)


; </end encoding val FStar.UInt32.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt32.eq (Term Term) Term)
(declare-fun Tm_arrow_6de09abf9de7977da03ee416904d3039 () Term)
(declare-fun FStar.UInt32.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt32.gt (Term Term) Term)

(declare-fun FStar.UInt32.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt32.gte (Term Term) Term)

(declare-fun FStar.UInt32.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt32.lt (Term Term) Term)

(declare-fun FStar.UInt32.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt32.lte (Term Term) Term)

(declare-fun FStar.UInt32.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt32.minus (Term) Term)
(declare-fun Tm_arrow_c4b70260248a2080020c883b42aa875d () Term)
(declare-fun FStar.UInt32.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt32.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt32.eq_mask (Term Term) Term)
(declare-fun Tm_refine_09d9a189c8c7a3bf3fc28db14e6689cd (Term Term) Term)
(declare-fun Tm_arrow_472ed8b8700983a2f5b417531368b430 () Term)
(declare-fun FStar.UInt32.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt32.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt32.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt32.gte_mask (Term Term) Term)
(declare-fun Tm_refine_83df857506788e94d25c8be97271668a (Term Term) Term)
(declare-fun Tm_arrow_a9de8133430dc71a337d9373e485c8b4 () Term)
(declare-fun FStar.UInt32.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt32.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt32.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt32.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt32.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt32.to_string>

(declare-fun FStar.UInt32.to_string (Term) Term)
(declare-fun Tm_arrow_bde0326394a5877aafa8a9dfb4adb318 () Term)
(declare-fun FStar.UInt32.to_string@tok () Term)

; </end encoding val FStar.UInt32.to_string>


; <Start encoding val FStar.UInt32.to_string_hex>

(declare-fun FStar.UInt32.to_string_hex (Term) Term)

(declare-fun FStar.UInt32.to_string_hex@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex>


; <Start encoding val FStar.UInt32.to_string_hex_pad>

(declare-fun FStar.UInt32.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt32.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex_pad>


; <Start encoding val FStar.UInt32.of_string>

(declare-fun FStar.UInt32.of_string (Term) Term)
(declare-fun Tm_arrow_564534749090ea8f842e229c3182e762 () Term)
(declare-fun FStar.UInt32.of_string@tok () Term)

; </end encoding val FStar.UInt32.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt32.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_67ad727682511dd92ce30d8d55620a8e () Term)
(declare-fun FStar.UInt32.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt32


; Externals for interface FStar.Char


; <Start encoding val FStar.Char.char>

(declare-fun FStar.Char.char (Dummy_sort) Term)

; </end encoding val FStar.Char.char>


; <Start encoding let char_code>

(declare-fun FStar.Char.char_code () Term)
(declare-fun Tm_refine_96af4a84eae6a9bae92bc908a1c3c24c () Term)

; </end encoding let char_code>


; <Start encoding val FStar.Char.u32_of_char>

(declare-fun FStar.Char.u32_of_char (Term) Term)
(declare-fun Tm_arrow_09ae08f23212b3776b47464ac075ff69 () Term)
(declare-fun FStar.Char.u32_of_char@tok () Term)

; </end encoding val FStar.Char.u32_of_char>


; <Start encoding val FStar.Char.char_of_u32>

(declare-fun FStar.Char.char_of_u32 (Term) Term)
(declare-fun Tm_arrow_6b2de8c9d183197e10fa8623c8ed0069 () Term)
(declare-fun FStar.Char.char_of_u32@tok () Term)

; </end encoding val FStar.Char.char_of_u32>


; <Start encoding val FStar.Char.char_of_u32_of_char>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Char.char_of_u32_of_char (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Char.char_of_u32_of_char@tok () Term)

; </end encoding val FStar.Char.char_of_u32_of_char>


; <Start encoding val FStar.Char.u32_of_char_of_u32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Char.u32_of_char_of_u32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Char.u32_of_char_of_u32@tok () Term)

; </end encoding val FStar.Char.u32_of_char_of_u32>


; <Start encoding let int_of_char>

(declare-fun FStar.Char.int_of_char (Term) Term)
(declare-fun Tm_arrow_edb4339633bae2b96af63b0dbac8e538 () Term)
(declare-fun FStar.Char.int_of_char@tok () Term)

; </end encoding let int_of_char>


; <Start encoding let char_of_int>

(declare-fun Tm_refine_41bb1fe33d2856748d537571528d32a1 () Term)
(declare-fun FStar.Char.char_of_int (Term) Term)

(declare-fun Tm_arrow_efb6c29a20da126570b0d74fa1074537 () Term)
(declare-fun FStar.Char.char_of_int@tok () Term)


; </end encoding let char_of_int>


; <Start encoding val FStar.Char.lowercase>

(declare-fun FStar.Char.lowercase (Term) Term)
(declare-fun Tm_arrow_410c308158a4312d1307cd758f94e691 () Term)
(declare-fun FStar.Char.lowercase@tok () Term)

; </end encoding val FStar.Char.lowercase>


; <Start encoding val FStar.Char.uppercase>

(declare-fun FStar.Char.uppercase (Term) Term)

(declare-fun FStar.Char.uppercase@tok () Term)

; </end encoding val FStar.Char.uppercase>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __char_of_int>

(declare-fun FStar.Char.__char_of_int (Term) Term)
(declare-fun Tm_arrow_269aaec28d3e769b82922feb9fbb0224 () Term)
(declare-fun FStar.Char.__char_of_int@tok () Term)

; </end encoding let __char_of_int>


; <Skipped #reset-options/>


; End Externals for interface FStar.Char


; Externals for interface FStar.Pprint


; <Start encoding val FStar.Pprint.document>

(declare-fun FStar.Pprint.document () Term)

; </end encoding val FStar.Pprint.document>


; <Start encoding val FStar.Pprint.empty>

(declare-fun FStar.Pprint.empty (Dummy_sort) Term)

; </end encoding val FStar.Pprint.empty>


; <Start encoding val FStar.Pprint.doc_of_char>

(declare-fun FStar.Pprint.doc_of_char (Term) Term)
(declare-fun Tm_arrow_a4acb59fbf005290ad49955f91c28b03 () Term)
(declare-fun FStar.Pprint.doc_of_char@tok () Term)

; </end encoding val FStar.Pprint.doc_of_char>


; <Start encoding val FStar.Pprint.doc_of_string>

(declare-fun FStar.Pprint.doc_of_string (Term) Term)
(declare-fun Tm_arrow_997c5f5d4977b2f7fdf48b0cb622aac1 () Term)
(declare-fun FStar.Pprint.doc_of_string@tok () Term)

; </end encoding val FStar.Pprint.doc_of_string>


; <Start encoding val FStar.Pprint.doc_of_bool>

(declare-fun FStar.Pprint.doc_of_bool (Term) Term)
(declare-fun Tm_arrow_c297ae71bcb61f857565593f192b0ba9 () Term)
(declare-fun FStar.Pprint.doc_of_bool@tok () Term)

; </end encoding val FStar.Pprint.doc_of_bool>


; <Start encoding val FStar.Pprint.substring>

(declare-fun FStar.Pprint.substring (Term Term Term) Term)
(declare-fun Tm_arrow_57d4df6e3bb2ca47134bbb9d1fc71584 () Term)
(declare-fun FStar.Pprint.substring@tok () Term)

; </end encoding val FStar.Pprint.substring>


; <Start encoding val FStar.Pprint.fancystring>

(declare-fun FStar.Pprint.fancystring (Term Term) Term)
(declare-fun Tm_arrow_32174abe6c67513e28543abb3662b06a () Term)
(declare-fun FStar.Pprint.fancystring@tok () Term)

; </end encoding val FStar.Pprint.fancystring>


; <Start encoding val FStar.Pprint.fancysubstring>

(declare-fun FStar.Pprint.fancysubstring (Term Term Term Term) Term)
(declare-fun Tm_arrow_095d1e6b4118e7c85dbeb61c88636be5 () Term)
(declare-fun FStar.Pprint.fancysubstring@tok () Term)

; </end encoding val FStar.Pprint.fancysubstring>


; <Start encoding val FStar.Pprint.utf8string>

(declare-fun FStar.Pprint.utf8string (Term) Term)

(declare-fun FStar.Pprint.utf8string@tok () Term)

; </end encoding val FStar.Pprint.utf8string>


; <Start encoding val FStar.Pprint.hardline>

(declare-fun FStar.Pprint.hardline (Dummy_sort) Term)

; </end encoding val FStar.Pprint.hardline>


; <Start encoding val FStar.Pprint.blank>

(declare-fun FStar.Pprint.blank (Term) Term)
(declare-fun Tm_arrow_75ab32078fe02c79ad1d360245f44dfb () Term)
(declare-fun FStar.Pprint.blank@tok () Term)

; </end encoding val FStar.Pprint.blank>


; <Start encoding val FStar.Pprint.break_>

(declare-fun FStar.Pprint.break_ (Term) Term)

(declare-fun FStar.Pprint.break_@tok () Term)

; </end encoding val FStar.Pprint.break_>


; <Start encoding val FStar.Pprint.op_Hat_Hat>

(declare-fun FStar.Pprint.op_Hat_Hat (Term Term) Term)
(declare-fun Tm_arrow_19abf1e35346678de614defb45741110 () Term)
(declare-fun FStar.Pprint.op_Hat_Hat@tok () Term)

; </end encoding val FStar.Pprint.op_Hat_Hat>


; <Start encoding val FStar.Pprint.op_Hat_Slash_Hat>

(declare-fun FStar.Pprint.op_Hat_Slash_Hat (Term Term) Term)

(declare-fun FStar.Pprint.op_Hat_Slash_Hat@tok () Term)

; </end encoding val FStar.Pprint.op_Hat_Slash_Hat>


; <Start encoding val FStar.Pprint.nest>

(declare-fun FStar.Pprint.nest (Term Term) Term)
(declare-fun Tm_arrow_a087a683fcb5153393871c9b94d28ffc () Term)
(declare-fun FStar.Pprint.nest@tok () Term)

; </end encoding val FStar.Pprint.nest>


; <Start encoding val FStar.Pprint.group>

(declare-fun FStar.Pprint.group (Term) Term)
(declare-fun Tm_arrow_bbc0c5be3085d9d37fef1938353ffda9 () Term)
(declare-fun FStar.Pprint.group@tok () Term)

; </end encoding val FStar.Pprint.group>


; <Start encoding val FStar.Pprint.ifflat>

(declare-fun FStar.Pprint.ifflat (Term Term) Term)

(declare-fun FStar.Pprint.ifflat@tok () Term)

; </end encoding val FStar.Pprint.ifflat>


; <Start encoding val FStar.Pprint.lparen>

(declare-fun FStar.Pprint.lparen (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lparen>


; <Start encoding val FStar.Pprint.rparen>

(declare-fun FStar.Pprint.rparen (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rparen>


; <Start encoding val FStar.Pprint.langle>

(declare-fun FStar.Pprint.langle (Dummy_sort) Term)

; </end encoding val FStar.Pprint.langle>


; <Start encoding val FStar.Pprint.rangle>

(declare-fun FStar.Pprint.rangle (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rangle>


; <Start encoding val FStar.Pprint.lbrace>

(declare-fun FStar.Pprint.lbrace (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lbrace>


; <Start encoding val FStar.Pprint.rbrace>

(declare-fun FStar.Pprint.rbrace (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rbrace>


; <Start encoding val FStar.Pprint.lbracket>

(declare-fun FStar.Pprint.lbracket (Dummy_sort) Term)

; </end encoding val FStar.Pprint.lbracket>


; <Start encoding val FStar.Pprint.rbracket>

(declare-fun FStar.Pprint.rbracket (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rbracket>


; <Start encoding val FStar.Pprint.squote>

(declare-fun FStar.Pprint.squote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.squote>


; <Start encoding val FStar.Pprint.dquote>

(declare-fun FStar.Pprint.dquote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dquote>


; <Start encoding val FStar.Pprint.bquote>

(declare-fun FStar.Pprint.bquote (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bquote>


; <Start encoding val FStar.Pprint.semi>

(declare-fun FStar.Pprint.semi (Dummy_sort) Term)

; </end encoding val FStar.Pprint.semi>


; <Start encoding val FStar.Pprint.colon>

(declare-fun FStar.Pprint.colon (Dummy_sort) Term)

; </end encoding val FStar.Pprint.colon>


; <Start encoding val FStar.Pprint.comma>

(declare-fun FStar.Pprint.comma (Dummy_sort) Term)

; </end encoding val FStar.Pprint.comma>


; <Start encoding val FStar.Pprint.space>

(declare-fun FStar.Pprint.space (Dummy_sort) Term)

; </end encoding val FStar.Pprint.space>


; <Start encoding val FStar.Pprint.dot>

(declare-fun FStar.Pprint.dot (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dot>


; <Start encoding val FStar.Pprint.sharp>

(declare-fun FStar.Pprint.sharp (Dummy_sort) Term)

; </end encoding val FStar.Pprint.sharp>


; <Start encoding val FStar.Pprint.slash>

(declare-fun FStar.Pprint.slash (Dummy_sort) Term)

; </end encoding val FStar.Pprint.slash>


; <Start encoding val FStar.Pprint.backslash>

(declare-fun FStar.Pprint.backslash (Dummy_sort) Term)

; </end encoding val FStar.Pprint.backslash>


; <Start encoding val FStar.Pprint.equals>

(declare-fun FStar.Pprint.equals (Dummy_sort) Term)

; </end encoding val FStar.Pprint.equals>


; <Start encoding val FStar.Pprint.qmark>

(declare-fun FStar.Pprint.qmark (Dummy_sort) Term)

; </end encoding val FStar.Pprint.qmark>


; <Start encoding val FStar.Pprint.tilde>

(declare-fun FStar.Pprint.tilde (Dummy_sort) Term)

; </end encoding val FStar.Pprint.tilde>


; <Start encoding val FStar.Pprint.at>

(declare-fun FStar.Pprint.at (Dummy_sort) Term)

; </end encoding val FStar.Pprint.at>


; <Start encoding val FStar.Pprint.percent>

(declare-fun FStar.Pprint.percent (Dummy_sort) Term)

; </end encoding val FStar.Pprint.percent>


; <Start encoding val FStar.Pprint.dollar>

(declare-fun FStar.Pprint.dollar (Dummy_sort) Term)

; </end encoding val FStar.Pprint.dollar>


; <Start encoding val FStar.Pprint.caret>

(declare-fun FStar.Pprint.caret (Dummy_sort) Term)

; </end encoding val FStar.Pprint.caret>


; <Start encoding val FStar.Pprint.ampersand>

(declare-fun FStar.Pprint.ampersand (Dummy_sort) Term)

; </end encoding val FStar.Pprint.ampersand>


; <Start encoding val FStar.Pprint.star>

(declare-fun FStar.Pprint.star (Dummy_sort) Term)

; </end encoding val FStar.Pprint.star>


; <Start encoding val FStar.Pprint.plus>

(declare-fun FStar.Pprint.plus (Dummy_sort) Term)

; </end encoding val FStar.Pprint.plus>


; <Start encoding val FStar.Pprint.minus>

(declare-fun FStar.Pprint.minus (Dummy_sort) Term)

; </end encoding val FStar.Pprint.minus>


; <Start encoding val FStar.Pprint.underscore>

(declare-fun FStar.Pprint.underscore (Dummy_sort) Term)

; </end encoding val FStar.Pprint.underscore>


; <Start encoding val FStar.Pprint.bang>

(declare-fun FStar.Pprint.bang (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bang>


; <Start encoding val FStar.Pprint.bar>

(declare-fun FStar.Pprint.bar (Dummy_sort) Term)

; </end encoding val FStar.Pprint.bar>


; <Start encoding val FStar.Pprint.rarrow>

(declare-fun FStar.Pprint.rarrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.rarrow>


; <Start encoding val FStar.Pprint.long_left_arrow>

(declare-fun FStar.Pprint.long_left_arrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.long_left_arrow>


; <Start encoding val FStar.Pprint.larrow>

(declare-fun FStar.Pprint.larrow (Dummy_sort) Term)

; </end encoding val FStar.Pprint.larrow>


; <Start encoding val FStar.Pprint.precede>

(declare-fun FStar.Pprint.precede (Term Term) Term)

(declare-fun FStar.Pprint.precede@tok () Term)

; </end encoding val FStar.Pprint.precede>


; <Start encoding val FStar.Pprint.terminate>

(declare-fun FStar.Pprint.terminate (Term Term) Term)

(declare-fun FStar.Pprint.terminate@tok () Term)

; </end encoding val FStar.Pprint.terminate>


; <Start encoding val FStar.Pprint.enclose>

(declare-fun FStar.Pprint.enclose (Term Term Term) Term)
(declare-fun Tm_arrow_f04dd2286d7e3e9f9bc2795066272a5d () Term)
(declare-fun FStar.Pprint.enclose@tok () Term)

; </end encoding val FStar.Pprint.enclose>


; <Start encoding val FStar.Pprint.squotes>

(declare-fun FStar.Pprint.squotes (Term) Term)

(declare-fun FStar.Pprint.squotes@tok () Term)

; </end encoding val FStar.Pprint.squotes>


; <Start encoding val FStar.Pprint.dquotes>

(declare-fun FStar.Pprint.dquotes (Term) Term)

(declare-fun FStar.Pprint.dquotes@tok () Term)

; </end encoding val FStar.Pprint.dquotes>


; <Start encoding val FStar.Pprint.bquotes>

(declare-fun FStar.Pprint.bquotes (Term) Term)

(declare-fun FStar.Pprint.bquotes@tok () Term)

; </end encoding val FStar.Pprint.bquotes>


; <Start encoding val FStar.Pprint.braces>

(declare-fun FStar.Pprint.braces (Term) Term)

(declare-fun FStar.Pprint.braces@tok () Term)

; </end encoding val FStar.Pprint.braces>


; <Start encoding val FStar.Pprint.parens>

(declare-fun FStar.Pprint.parens (Term) Term)

(declare-fun FStar.Pprint.parens@tok () Term)

; </end encoding val FStar.Pprint.parens>


; <Start encoding val FStar.Pprint.angles>

(declare-fun FStar.Pprint.angles (Term) Term)

(declare-fun FStar.Pprint.angles@tok () Term)

; </end encoding val FStar.Pprint.angles>


; <Start encoding val FStar.Pprint.brackets>

(declare-fun FStar.Pprint.brackets (Term) Term)

(declare-fun FStar.Pprint.brackets@tok () Term)

; </end encoding val FStar.Pprint.brackets>


; <Start encoding val FStar.Pprint.twice>

(declare-fun FStar.Pprint.twice (Term) Term)

(declare-fun FStar.Pprint.twice@tok () Term)

; </end encoding val FStar.Pprint.twice>


; <Start encoding val FStar.Pprint.repeat>

(declare-fun FStar.Pprint.repeat (Term Term) Term)

(declare-fun FStar.Pprint.repeat@tok () Term)

; </end encoding val FStar.Pprint.repeat>


; <Start encoding val FStar.Pprint.concat>

(declare-fun FStar.Pprint.concat (Term) Term)
(declare-fun Tm_arrow_0cbe92f45919c1d7e0f9e026093c317f () Term)
(declare-fun FStar.Pprint.concat@tok () Term)

; </end encoding val FStar.Pprint.concat>


; <Start encoding val FStar.Pprint.separate>

(declare-fun FStar.Pprint.separate (Term Term) Term)
(declare-fun Tm_arrow_eb90f8920e90546abfd27f57e97c7422 () Term)
(declare-fun FStar.Pprint.separate@tok () Term)

; </end encoding val FStar.Pprint.separate>


; <Start encoding val FStar.Pprint.concat_map>

(declare-fun Tm_arrow_ba485b08fe7f6ea3427f366967eb61bb (Term) Term)
(declare-fun FStar.Pprint.concat_map (Term Term Term) Term)

(declare-fun Tm_arrow_9027965ae68389afcb8ffd313ed8431e () Term)
(declare-fun FStar.Pprint.concat_map@tok () Term)

; </end encoding val FStar.Pprint.concat_map>


; <Start encoding val FStar.Pprint.separate_map>


(declare-fun FStar.Pprint.separate_map (Term Term Term Term) Term)

(declare-fun Tm_arrow_afa71873ada30b88e86746ba0816c698 () Term)
(declare-fun FStar.Pprint.separate_map@tok () Term)

; </end encoding val FStar.Pprint.separate_map>


; <Start encoding val FStar.Pprint.separate2>

(declare-fun FStar.Pprint.separate2 (Term Term Term) Term)
(declare-fun Tm_arrow_8d6af16eebdcd806abb4f18d1fad7f62 () Term)
(declare-fun FStar.Pprint.separate2@tok () Term)

; </end encoding val FStar.Pprint.separate2>


; <Start encoding val FStar.Pprint.optional>


(declare-fun FStar.Pprint.optional (Term Term Term) Term)

(declare-fun Tm_arrow_f99776764fec33728f01eff9910545c0 () Term)
(declare-fun FStar.Pprint.optional@tok () Term)

; </end encoding val FStar.Pprint.optional>


; <Start encoding val FStar.Pprint.lines>

(declare-fun FStar.Pprint.lines (Term) Term)
(declare-fun Tm_arrow_800f7873155a13cf11bfde311d66b27a () Term)
(declare-fun FStar.Pprint.lines@tok () Term)

; </end encoding val FStar.Pprint.lines>


; <Start encoding val FStar.Pprint.arbitrary_string>

(declare-fun FStar.Pprint.arbitrary_string (Term) Term)

(declare-fun FStar.Pprint.arbitrary_string@tok () Term)

; </end encoding val FStar.Pprint.arbitrary_string>


; <Start encoding val FStar.Pprint.words>

(declare-fun FStar.Pprint.words (Term) Term)

(declare-fun FStar.Pprint.words@tok () Term)

; </end encoding val FStar.Pprint.words>


; <Start encoding val FStar.Pprint.split>

(declare-fun Tm_arrow_fc1554671c39653ed371206100dcafd3 () Term)
(declare-fun FStar.Pprint.split (Term Term) Term)

(declare-fun Tm_arrow_89c390c93eb8654101fd8617085f3c1d () Term)
(declare-fun FStar.Pprint.split@tok () Term)

; </end encoding val FStar.Pprint.split>


; <Start encoding val FStar.Pprint.flow>

(declare-fun FStar.Pprint.flow (Term Term) Term)

(declare-fun FStar.Pprint.flow@tok () Term)

; </end encoding val FStar.Pprint.flow>


; <Start encoding val FStar.Pprint.flow_map>


(declare-fun FStar.Pprint.flow_map (Term Term Term Term) Term)


(declare-fun FStar.Pprint.flow_map@tok () Term)

; </end encoding val FStar.Pprint.flow_map>


; <Start encoding val FStar.Pprint.url>

(declare-fun FStar.Pprint.url (Term) Term)

(declare-fun FStar.Pprint.url@tok () Term)

; </end encoding val FStar.Pprint.url>


; <Start encoding val FStar.Pprint.align>

(declare-fun FStar.Pprint.align (Term) Term)

(declare-fun FStar.Pprint.align@tok () Term)

; </end encoding val FStar.Pprint.align>


; <Start encoding val FStar.Pprint.hang>

(declare-fun FStar.Pprint.hang (Term Term) Term)

(declare-fun FStar.Pprint.hang@tok () Term)

; </end encoding val FStar.Pprint.hang>


; <Start encoding val FStar.Pprint.prefix>

(declare-fun FStar.Pprint.prefix (Term Term Term Term) Term)
(declare-fun Tm_arrow_8515fd4d138effa981387c8407102abb () Term)
(declare-fun FStar.Pprint.prefix@tok () Term)

; </end encoding val FStar.Pprint.prefix>


; <Start encoding val FStar.Pprint.jump>

(declare-fun FStar.Pprint.jump (Term Term Term) Term)
(declare-fun Tm_arrow_e0d9f0929460140427c016e9e80b19b9 () Term)
(declare-fun FStar.Pprint.jump@tok () Term)

; </end encoding val FStar.Pprint.jump>


; <Start encoding val FStar.Pprint.infix>

(declare-fun FStar.Pprint.infix (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b075afedf9e7cab5a543fb6eb3bed20f () Term)
(declare-fun FStar.Pprint.infix@tok () Term)

; </end encoding val FStar.Pprint.infix>


; <Start encoding val FStar.Pprint.surround>

(declare-fun FStar.Pprint.surround (Term Term Term Term Term) Term)

(declare-fun FStar.Pprint.surround@tok () Term)

; </end encoding val FStar.Pprint.surround>


; <Start encoding val FStar.Pprint.soft_surround>

(declare-fun FStar.Pprint.soft_surround (Term Term Term Term Term) Term)

(declare-fun FStar.Pprint.soft_surround@tok () Term)

; </end encoding val FStar.Pprint.soft_surround>


; <Start encoding val FStar.Pprint.surround_separate>

(declare-fun FStar.Pprint.surround_separate (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5438415d36bec335d2df2e0f427a0374 () Term)
(declare-fun FStar.Pprint.surround_separate@tok () Term)

; </end encoding val FStar.Pprint.surround_separate>


; <Start encoding val FStar.Pprint.surround_separate_map>


(declare-fun FStar.Pprint.surround_separate_map (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_424c593564ee6d82472d4c43a6d0feee () Term)
(declare-fun FStar.Pprint.surround_separate_map@tok () Term)

; </end encoding val FStar.Pprint.surround_separate_map>


; <Start encoding val FStar.Pprint.pretty_string>

(declare-fun FStar.Pprint.pretty_string (Term Term Term) Term)
(declare-fun Tm_arrow_eaf070b7b90e17b9d3a7caa0761705b8 () Term)
(declare-fun FStar.Pprint.pretty_string@tok () Term)

; </end encoding val FStar.Pprint.pretty_string>


; <Start encoding val FStar.Pprint.render>

(declare-fun FStar.Pprint.render (Term) Term)
(declare-fun Tm_arrow_672e94f64f75b66d98089d9b8a8bdd46 () Term)
(declare-fun FStar.Pprint.render@tok () Term)

; </end encoding val FStar.Pprint.render>


; End Externals for interface FStar.Pprint


; Externals for interface FStar.Issue


; <Start encoding val FStar.Issue.issue>

(declare-fun FStar.Issue.issue () Term)

; </end encoding val FStar.Issue.issue>


; <Start encoding let issue_level_string>

(declare-fun FStar.Issue.issue_level_string () Term)
(declare-fun Tm_refine_aa8eedc0ecb86da30f7a24511f57030f () Term)

; </end encoding let issue_level_string>


; <Start encoding val FStar.Issue.message_of_issue>

(declare-fun FStar.Issue.message_of_issue (Term) Term)
(declare-fun Tm_arrow_93ee704a450339197db22b6850c14119 () Term)
(declare-fun FStar.Issue.message_of_issue@tok () Term)

; </end encoding val FStar.Issue.message_of_issue>


; <Start encoding val FStar.Issue.level_of_issue>

(declare-fun FStar.Issue.level_of_issue (Term) Term)
(declare-fun Tm_arrow_baa5bfeaffb7436a922fcee810b3f6e5 () Term)
(declare-fun FStar.Issue.level_of_issue@tok () Term)

; </end encoding val FStar.Issue.level_of_issue>


; <Start encoding val FStar.Issue.number_of_issue>

(declare-fun FStar.Issue.number_of_issue (Term) Term)
(declare-fun Tm_arrow_78394d1c43ffc2ecdd350b139696c115 () Term)
(declare-fun FStar.Issue.number_of_issue@tok () Term)

; </end encoding val FStar.Issue.number_of_issue>


; <Start encoding val FStar.Issue.range_of_issue>

(declare-fun FStar.Issue.range_of_issue (Term) Term)
(declare-fun Tm_arrow_72e8882c08b4ea92dd32d41519ff957b () Term)
(declare-fun FStar.Issue.range_of_issue@tok () Term)

; </end encoding val FStar.Issue.range_of_issue>


; <Start encoding val FStar.Issue.context_of_issue>

(declare-fun FStar.Issue.context_of_issue (Term) Term)
(declare-fun Tm_arrow_546b620b9af82be043f5b40b81574a85 () Term)
(declare-fun FStar.Issue.context_of_issue@tok () Term)

; </end encoding val FStar.Issue.context_of_issue>


; <Start encoding val FStar.Issue.render_issue>

(declare-fun FStar.Issue.render_issue (Term) Term)
(declare-fun Tm_arrow_ac5151aeda0379e1d6b8d444cd3f0526 () Term)
(declare-fun FStar.Issue.render_issue@tok () Term)

; </end encoding val FStar.Issue.render_issue>


; <Start encoding val FStar.Issue.mk_issue_doc>

(declare-fun FStar.Issue.mk_issue_doc (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4a4df377687a551395a6d537c2452cc1 () Term)
(declare-fun FStar.Issue.mk_issue_doc@tok () Term)

; </end encoding val FStar.Issue.mk_issue_doc>


; <Start encoding let mk_issue>

(declare-fun FStar.Issue.mk_issue (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a1628df8c9319e78aab0e01f400423ed () Term)
(declare-fun FStar.Issue.mk_issue@tok () Term)

; </end encoding let mk_issue>


; End Externals for interface FStar.Issue


; Externals for interface FStar.Stubs.TypeChecker.Core


; <Start encoding type FStar.Stubs.TypeChecker.Core.tot_or_ghost>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.tot_or_ghost () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.E_Total () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.E_Total
(declare-fun FStar.Stubs.TypeChecker.Core.E_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.E_Ghost () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.E_Ghost
(declare-fun FStar.Stubs.TypeChecker.Core.E_Ghost@tok () Term)

; <start constructor FStar.Stubs.TypeChecker.Core.tot_or_ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.tot_or_ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.TypeChecker.Core.tot_or_ghost)))

; </end constructor FStar.Stubs.TypeChecker.Core.tot_or_ghost>


; <start constructor FStar.Stubs.TypeChecker.Core.E_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.E_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
FStar.Stubs.TypeChecker.Core.E_Total)))

; </end constructor FStar.Stubs.TypeChecker.Core.E_Total>


; <start constructor FStar.Stubs.TypeChecker.Core.E_Ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.E_Ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Stubs.TypeChecker.Core.E_Ghost)))

; </end constructor FStar.Stubs.TypeChecker.Core.E_Ghost>


; </end encoding type FStar.Stubs.TypeChecker.Core.tot_or_ghost>


; <Start encoding assume FStar.Stubs.TypeChecker.Core.tot_or_ghost__uu___haseq>


; </end encoding assume FStar.Stubs.TypeChecker.Core.tot_or_ghost__uu___haseq>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Total>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Total (Term) Term)
(declare-fun Tm_arrow_28feb685f85e27d6180cee53571913aa () Term)
(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Total@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Total>


; <Skipped let uu___is_E_Total/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_E_Ghost>


; <Skipped let uu___is_E_Ghost/>


; <Start encoding type FStar.Stubs.TypeChecker.Core.unfold_side>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.unfold_side () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Left () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Left
(declare-fun FStar.Stubs.TypeChecker.Core.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Right () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Right
(declare-fun FStar.Stubs.TypeChecker.Core.Right@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Both () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Both
(declare-fun FStar.Stubs.TypeChecker.Core.Both@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.TypeChecker.Core.Neither () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.TypeChecker.Core.Neither
(declare-fun FStar.Stubs.TypeChecker.Core.Neither@tok () Term)

; <start constructor FStar.Stubs.TypeChecker.Core.unfold_side>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.unfold_side ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
FStar.Stubs.TypeChecker.Core.unfold_side)))

; </end constructor FStar.Stubs.TypeChecker.Core.unfold_side>


; <start constructor FStar.Stubs.TypeChecker.Core.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
FStar.Stubs.TypeChecker.Core.Left)))

; </end constructor FStar.Stubs.TypeChecker.Core.Left>


; <start constructor FStar.Stubs.TypeChecker.Core.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
FStar.Stubs.TypeChecker.Core.Right)))

; </end constructor FStar.Stubs.TypeChecker.Core.Right>


; <start constructor FStar.Stubs.TypeChecker.Core.Both>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Both ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
124)
(= __@x0
FStar.Stubs.TypeChecker.Core.Both)))

; </end constructor FStar.Stubs.TypeChecker.Core.Both>


; <start constructor FStar.Stubs.TypeChecker.Core.Neither>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.TypeChecker.Core.Neither ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
126)
(= __@x0
FStar.Stubs.TypeChecker.Core.Neither)))

; </end constructor FStar.Stubs.TypeChecker.Core.Neither>


; </end encoding type FStar.Stubs.TypeChecker.Core.unfold_side>


; <Start encoding assume FStar.Stubs.TypeChecker.Core.unfold_side__uu___haseq>


; </end encoding assume FStar.Stubs.TypeChecker.Core.unfold_side__uu___haseq>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Left>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Left (Term) Term)
(declare-fun Tm_arrow_8ad3479bac3300a48f898c294856a452 () Term)
(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Left@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Left>


; <Skipped let uu___is_Left/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Right>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Right (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Right@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Right>


; <Skipped let uu___is_Right/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Both>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Both (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Both@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Both>


; <Skipped let uu___is_Both/>


; <Start encoding val FStar.Stubs.TypeChecker.Core.uu___is_Neither>

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Neither (Term) Term)

(declare-fun FStar.Stubs.TypeChecker.Core.uu___is_Neither@tok () Term)

; </end encoding val FStar.Stubs.TypeChecker.Core.uu___is_Neither>


; <Skipped let uu___is_Neither/>


; End Externals for interface FStar.Stubs.TypeChecker.Core


; Externals for interface FStar.Stubs.Errors.Msg


; <Start encoding let error_message>

(declare-fun FStar.Stubs.Errors.Msg.error_message () Term)

; </end encoding let error_message>


; <Start encoding val FStar.Stubs.Errors.Msg.text>

(declare-fun FStar.Stubs.Errors.Msg.text (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.text@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.text>


; <Start encoding val FStar.Stubs.Errors.Msg.sublist>

(declare-fun FStar.Stubs.Errors.Msg.sublist (Term Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.sublist@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.sublist>


; <Start encoding val FStar.Stubs.Errors.Msg.bulleted>

(declare-fun FStar.Stubs.Errors.Msg.bulleted (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.bulleted@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.bulleted>


; <Start encoding val FStar.Stubs.Errors.Msg.mkmsg>

(declare-fun FStar.Stubs.Errors.Msg.mkmsg (Term) Term)
(declare-fun Tm_arrow_742ceb0b6d43128379fa1800142a023c () Term)
(declare-fun FStar.Stubs.Errors.Msg.mkmsg@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.mkmsg>


; <Start encoding val FStar.Stubs.Errors.Msg.subdoc>

(declare-fun FStar.Stubs.Errors.Msg.subdoc (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.subdoc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.subdoc>


; <Start encoding val FStar.Stubs.Errors.Msg.renderdoc>

(declare-fun FStar.Stubs.Errors.Msg.renderdoc (Term) Term)

(declare-fun FStar.Stubs.Errors.Msg.renderdoc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.renderdoc>


; <Start encoding val FStar.Stubs.Errors.Msg.backtrace_doc>

(declare-fun FStar.Stubs.Errors.Msg.backtrace_doc (Term) Term)
(declare-fun Tm_arrow_4b1e31e13fd2dbfa31c2cce1a0d2083d () Term)
(declare-fun FStar.Stubs.Errors.Msg.backtrace_doc@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.backtrace_doc>


; <Start encoding val FStar.Stubs.Errors.Msg.rendermsg>

(declare-fun FStar.Stubs.Errors.Msg.rendermsg (Term) Term)
(declare-fun Tm_arrow_0f8aa7390110b002d33168ab1d29eb5e () Term)
(declare-fun FStar.Stubs.Errors.Msg.rendermsg@tok () Term)

; </end encoding val FStar.Stubs.Errors.Msg.rendermsg>


; End Externals for interface FStar.Stubs.Errors.Msg


; Externals for interface FStar.Stubs.Tactics.Common


; <Start encoding datacon FStar.Stubs.Tactics.Common.NotAListLiteral for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.NotAListLiteral
(declare-fun FStar.Stubs.Tactics.Common.NotAListLiteral@tok () Term)

; <start constructor FStar.Stubs.Tactics.Common.NotAListLiteral>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.NotAListLiteral ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
102)
(= __@x0
FStar.Stubs.Tactics.Common.NotAListLiteral)))

; </end constructor FStar.Stubs.Tactics.Common.NotAListLiteral>


; </end encoding datacon FStar.Stubs.Tactics.Common.NotAListLiteral for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral (Term) Term)
(declare-fun Tm_arrow_81ab3356926b82578fcb92e97b412345 () Term)
(declare-fun FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_NotAListLiteral>


; <Skipped let uu___is_NotAListLiteral/>


; <Start encoding datacon FStar.Stubs.Tactics.Common.TacticFailure for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure_uu___ (Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure@base (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.TacticFailure
(declare-fun FStar.Stubs.Tactics.Common.TacticFailure@tok () Term)
(declare-fun Tm_arrow_10aa3b654b3fa877084793298bd2c1fc () Term)

; <start constructor FStar.Stubs.Tactics.Common.TacticFailure>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.TacticFailure ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
106)
(= __@x0
(FStar.Stubs.Tactics.Common.TacticFailure (FStar.Stubs.Tactics.Common.TacticFailure_uu___ __@x0)))))

; </end constructor FStar.Stubs.Tactics.Common.TacticFailure>


; </end encoding datacon FStar.Stubs.Tactics.Common.TacticFailure for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_TacticFailure>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_TacticFailure (Term) Term)

(declare-fun FStar.Stubs.Tactics.Common.uu___is_TacticFailure@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_TacticFailure>


; <Skipped let uu___is_TacticFailure/>


; <Start encoding val FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___>

(declare-fun Tm_refine_30f8904aa237d24acf9aace65cbaa40d () Term)
(declare-fun FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___ (Term) Term)

(declare-fun Tm_arrow_7eb6bd8f5fc49d52c2c9c8f2dd3c567a () Term)
(declare-fun FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.__proj__TacticFailure__item__uu___>


; <Skipped let __proj__TacticFailure__item__uu___/>


; <Start encoding datacon FStar.Stubs.Tactics.Common.SKIP for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Common.SKIP () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Stubs.Tactics.Common.SKIP@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Common.SKIP
(declare-fun FStar.Stubs.Tactics.Common.SKIP@tok () Term)

; <start constructor FStar.Stubs.Tactics.Common.SKIP>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Common.SKIP ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
FStar.Stubs.Tactics.Common.SKIP)))

; </end constructor FStar.Stubs.Tactics.Common.SKIP>


; </end encoding datacon FStar.Stubs.Tactics.Common.SKIP for type Prims.exn>


; <Start encoding val FStar.Stubs.Tactics.Common.uu___is_SKIP>

(declare-fun FStar.Stubs.Tactics.Common.uu___is_SKIP (Term) Term)

(declare-fun FStar.Stubs.Tactics.Common.uu___is_SKIP@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Common.uu___is_SKIP>


; <Skipped let uu___is_SKIP/>


; End Externals for interface FStar.Stubs.Tactics.Common


; Externals for interface FStar.Stubs.Reflection.Types


; <Start encoding val FStar.Stubs.Reflection.Types.namedv>

(declare-fun FStar.Stubs.Reflection.Types.namedv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.namedv>


; <Start encoding val FStar.Stubs.Reflection.Types.bv>

(declare-fun FStar.Stubs.Reflection.Types.bv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.bv>


; <Start encoding val FStar.Stubs.Reflection.Types.binder>

(declare-fun FStar.Stubs.Reflection.Types.binder () Term)

; </end encoding val FStar.Stubs.Reflection.Types.binder>


; <Start encoding val FStar.Stubs.Reflection.Types.term>

(declare-fun FStar.Stubs.Reflection.Types.term () Term)

; </end encoding val FStar.Stubs.Reflection.Types.term>


; <Start encoding val FStar.Stubs.Reflection.Types.env>

(declare-fun FStar.Stubs.Reflection.Types.env () Term)

; </end encoding val FStar.Stubs.Reflection.Types.env>


; <Start encoding val FStar.Stubs.Reflection.Types.fv>

(declare-fun FStar.Stubs.Reflection.Types.fv () Term)

; </end encoding val FStar.Stubs.Reflection.Types.fv>


; <Start encoding val FStar.Stubs.Reflection.Types.comp>

(declare-fun FStar.Stubs.Reflection.Types.comp () Term)

; </end encoding val FStar.Stubs.Reflection.Types.comp>


; <Start encoding val FStar.Stubs.Reflection.Types.sigelt>

(declare-fun FStar.Stubs.Reflection.Types.sigelt () Term)

; </end encoding val FStar.Stubs.Reflection.Types.sigelt>


; <Start encoding val FStar.Stubs.Reflection.Types.ctx_uvar_and_subst>

(declare-fun FStar.Stubs.Reflection.Types.ctx_uvar_and_subst () Term)

; </end encoding val FStar.Stubs.Reflection.Types.ctx_uvar_and_subst>


; <Start encoding val FStar.Stubs.Reflection.Types.letbinding>

(declare-fun FStar.Stubs.Reflection.Types.letbinding () Term)

; </end encoding val FStar.Stubs.Reflection.Types.letbinding>


; <Start encoding val FStar.Stubs.Reflection.Types.ident>

(declare-fun FStar.Stubs.Reflection.Types.ident () Term)

; </end encoding val FStar.Stubs.Reflection.Types.ident>


; <Start encoding val FStar.Stubs.Reflection.Types.universe_uvar>

(declare-fun FStar.Stubs.Reflection.Types.universe_uvar () Term)

; </end encoding val FStar.Stubs.Reflection.Types.universe_uvar>


; <Start encoding val FStar.Stubs.Reflection.Types.universe>

(declare-fun FStar.Stubs.Reflection.Types.universe () Term)

; </end encoding val FStar.Stubs.Reflection.Types.universe>


; <Start encoding let name>

(declare-fun FStar.Stubs.Reflection.Types.name (Dummy_sort) Term)

; </end encoding let name>


; <Start encoding let univ_name>

(declare-fun FStar.Stubs.Reflection.Types.univ_name () Term)

; </end encoding let univ_name>


; <Start encoding let typ>

(declare-fun FStar.Stubs.Reflection.Types.typ () Term)

; </end encoding let typ>


; <Start encoding let binders>

(declare-fun FStar.Stubs.Reflection.Types.binders () Term)

; </end encoding let binders>


; <Start encoding let decls>

(declare-fun FStar.Stubs.Reflection.Types.decls () Term)

; </end encoding let decls>


; End Externals for interface FStar.Stubs.Reflection.Types


; Externals for interface FStar.Stubs.Tactics.Types


; <Start encoding val FStar.Stubs.Tactics.Types.goal>

(declare-fun FStar.Stubs.Tactics.Types.goal () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal>


; <Start encoding val FStar.Stubs.Tactics.Types.proofstate>

(declare-fun FStar.Stubs.Tactics.Types.proofstate () Term)

; </end encoding val FStar.Stubs.Tactics.Types.proofstate>


; <Start encoding val FStar.Stubs.Tactics.Types.goals_of>

(declare-fun FStar.Stubs.Tactics.Types.goals_of (Term) Term)
(declare-fun Tm_arrow_fdfe159a02c2f6afefc6bf5885e11604 () Term)
(declare-fun FStar.Stubs.Tactics.Types.goals_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goals_of>


; <Start encoding val FStar.Stubs.Tactics.Types.smt_goals_of>

(declare-fun FStar.Stubs.Tactics.Types.smt_goals_of (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.smt_goals_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.smt_goals_of>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_env>

(declare-fun FStar.Stubs.Tactics.Types.goal_env (Term) Term)
(declare-fun Tm_arrow_31141c9dd83193809f05a8c783c41d68 () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_env>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_type>

(declare-fun FStar.Stubs.Tactics.Types.goal_type (Term) Term)
(declare-fun Tm_arrow_09c0f5bd92f653a857ae8e8f78bcd3dc () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_type>


; <Start encoding val FStar.Stubs.Tactics.Types.goal_witness>

(declare-fun FStar.Stubs.Tactics.Types.goal_witness (Term) Term)
(declare-fun Tm_arrow_6cd27210e27c05ff825968bc6bf2188a () Term)
(declare-fun FStar.Stubs.Tactics.Types.goal_witness@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.goal_witness>


; <Start encoding val FStar.Stubs.Tactics.Types.is_guard>

(declare-fun FStar.Stubs.Tactics.Types.is_guard (Term) Term)
(declare-fun Tm_arrow_b9f4ed4f47608d8a57b28b62e7620cd6 () Term)
(declare-fun FStar.Stubs.Tactics.Types.is_guard@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.is_guard>


; <Start encoding val FStar.Stubs.Tactics.Types.get_label>

(declare-fun FStar.Stubs.Tactics.Types.get_label (Term) Term)
(declare-fun Tm_arrow_6f90bcff42642c2f6126e1856dbbb24e () Term)
(declare-fun FStar.Stubs.Tactics.Types.get_label@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.get_label>


; <Start encoding val FStar.Stubs.Tactics.Types.set_label>

(declare-fun FStar.Stubs.Tactics.Types.set_label (Term Term) Term)
(declare-fun Tm_arrow_8bcd15f0cfa61565564f083268fce719 () Term)
(declare-fun FStar.Stubs.Tactics.Types.set_label@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.set_label>


; <Start encoding val FStar.Stubs.Tactics.Types.incr_depth>

(declare-fun FStar.Stubs.Tactics.Types.incr_depth (Term) Term)
(declare-fun Tm_arrow_4baa9e22a8426ddb7c829d77e2a29c7f () Term)
(declare-fun FStar.Stubs.Tactics.Types.incr_depth@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.incr_depth>


; <Start encoding val FStar.Stubs.Tactics.Types.decr_depth>

(declare-fun FStar.Stubs.Tactics.Types.decr_depth (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.decr_depth@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.decr_depth>


; <Start encoding val FStar.Stubs.Tactics.Types.tracepoint>

(declare-fun FStar.Stubs.Tactics.Types.tracepoint (Term) Term)
(declare-fun Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f () Term)
(declare-fun Tm_arrow_c0fb9ba582b3414d839b2e294db9292c () Term)
(declare-fun FStar.Stubs.Tactics.Types.tracepoint@tok () Term)


; </end encoding val FStar.Stubs.Tactics.Types.tracepoint>


; <Start encoding val FStar.Stubs.Tactics.Types.set_proofstate_range>

(declare-fun FStar.Stubs.Tactics.Types.set_proofstate_range (Term Term) Term)
(declare-fun Tm_arrow_37afb34f073ac2915b6c2d174d9265a7 () Term)
(declare-fun FStar.Stubs.Tactics.Types.set_proofstate_range@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.set_proofstate_range>


; <Start encoding type FStar.Stubs.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.direction () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.TopDown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.TopDown
(declare-fun FStar.Stubs.Tactics.Types.TopDown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.BottomUp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.BottomUp
(declare-fun FStar.Stubs.Tactics.Types.BottomUp@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.direction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
133)
(= __@x0
FStar.Stubs.Tactics.Types.direction)))

; </end constructor FStar.Stubs.Tactics.Types.direction>


; <start constructor FStar.Stubs.Tactics.Types.TopDown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.TopDown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
139)
(= __@x0
FStar.Stubs.Tactics.Types.TopDown)))

; </end constructor FStar.Stubs.Tactics.Types.TopDown>


; <start constructor FStar.Stubs.Tactics.Types.BottomUp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.BottomUp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
FStar.Stubs.Tactics.Types.BottomUp)))

; </end constructor FStar.Stubs.Tactics.Types.BottomUp>


; </end encoding type FStar.Stubs.Tactics.Types.direction>


; <Start encoding assume FStar.Stubs.Tactics.Types.direction__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.direction__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_TopDown>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_TopDown (Term) Term)
(declare-fun Tm_arrow_9035aafb0268cd6540e6eeb00e64f81e () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_TopDown@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_TopDown>


; <Skipped let uu___is_TopDown/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_BottomUp>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_BottomUp (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_BottomUp@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_BottomUp>


; <Skipped let uu___is_BottomUp/>


; <Start encoding type FStar.Stubs.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.ctrl_flag () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Continue () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Continue
(declare-fun FStar.Stubs.Tactics.Types.Continue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Skip () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Skip
(declare-fun FStar.Stubs.Tactics.Types.Skip@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Abort () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Abort
(declare-fun FStar.Stubs.Tactics.Types.Abort@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.ctrl_flag ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(= __@x0
FStar.Stubs.Tactics.Types.ctrl_flag)))

; </end constructor FStar.Stubs.Tactics.Types.ctrl_flag>


; <start constructor FStar.Stubs.Tactics.Types.Continue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Continue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
FStar.Stubs.Tactics.Types.Continue)))

; </end constructor FStar.Stubs.Tactics.Types.Continue>


; <start constructor FStar.Stubs.Tactics.Types.Skip>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Skip ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(= __@x0
FStar.Stubs.Tactics.Types.Skip)))

; </end constructor FStar.Stubs.Tactics.Types.Skip>


; <start constructor FStar.Stubs.Tactics.Types.Abort>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Abort ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
156)
(= __@x0
FStar.Stubs.Tactics.Types.Abort)))

; </end constructor FStar.Stubs.Tactics.Types.Abort>


; </end encoding type FStar.Stubs.Tactics.Types.ctrl_flag>


; <Start encoding assume FStar.Stubs.Tactics.Types.ctrl_flag__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.ctrl_flag__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Continue>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Continue (Term) Term)
(declare-fun Tm_arrow_e3dfe006e0bb26f56aa3f73f9ed8eb62 () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_Continue@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Continue>


; <Skipped let uu___is_Continue/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Skip>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Skip (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Skip@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Skip>


; <Skipped let uu___is_Skip/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Abort>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Abort (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Abort@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Abort>


; <Skipped let uu___is_Abort/>


; <Start encoding type FStar.Stubs.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.guard_policy () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Goal () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Goal
(declare-fun FStar.Stubs.Tactics.Types.Goal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.SMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.SMT
(declare-fun FStar.Stubs.Tactics.Types.SMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.SMTSync () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.SMTSync
(declare-fun FStar.Stubs.Tactics.Types.SMTSync@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Force () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Force
(declare-fun FStar.Stubs.Tactics.Types.Force@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.ForceSMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.ForceSMT
(declare-fun FStar.Stubs.Tactics.Types.ForceSMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Types.Drop () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Types.Drop
(declare-fun FStar.Stubs.Tactics.Types.Drop@tok () Term)

; <start constructor FStar.Stubs.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.guard_policy ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
163)
(= __@x0
FStar.Stubs.Tactics.Types.guard_policy)))

; </end constructor FStar.Stubs.Tactics.Types.guard_policy>


; <start constructor FStar.Stubs.Tactics.Types.Goal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Goal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(= __@x0
FStar.Stubs.Tactics.Types.Goal)))

; </end constructor FStar.Stubs.Tactics.Types.Goal>


; <start constructor FStar.Stubs.Tactics.Types.SMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.SMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
171)
(= __@x0
FStar.Stubs.Tactics.Types.SMT)))

; </end constructor FStar.Stubs.Tactics.Types.SMT>


; <start constructor FStar.Stubs.Tactics.Types.SMTSync>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.SMTSync ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
173)
(= __@x0
FStar.Stubs.Tactics.Types.SMTSync)))

; </end constructor FStar.Stubs.Tactics.Types.SMTSync>


; <start constructor FStar.Stubs.Tactics.Types.Force>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Force ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
175)
(= __@x0
FStar.Stubs.Tactics.Types.Force)))

; </end constructor FStar.Stubs.Tactics.Types.Force>


; <start constructor FStar.Stubs.Tactics.Types.ForceSMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.ForceSMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
177)
(= __@x0
FStar.Stubs.Tactics.Types.ForceSMT)))

; </end constructor FStar.Stubs.Tactics.Types.ForceSMT>


; <start constructor FStar.Stubs.Tactics.Types.Drop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Types.Drop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
FStar.Stubs.Tactics.Types.Drop)))

; </end constructor FStar.Stubs.Tactics.Types.Drop>


; </end encoding type FStar.Stubs.Tactics.Types.guard_policy>


; <Start encoding assume FStar.Stubs.Tactics.Types.guard_policy__uu___haseq>


; </end encoding assume FStar.Stubs.Tactics.Types.guard_policy__uu___haseq>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Goal>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Goal (Term) Term)
(declare-fun Tm_arrow_6ed889b98ff192e7f7ad79278b84f018 () Term)
(declare-fun FStar.Stubs.Tactics.Types.uu___is_Goal@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Goal>


; <Skipped let uu___is_Goal/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_SMT>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMT (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMT@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_SMT>


; <Skipped let uu___is_SMT/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_SMTSync>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMTSync (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_SMTSync@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_SMTSync>


; <Skipped let uu___is_SMTSync/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Force>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Force (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Force@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Force>


; <Skipped let uu___is_Force/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_ForceSMT>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_ForceSMT (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_ForceSMT@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_ForceSMT>


; <Skipped let uu___is_ForceSMT/>


; <Start encoding val FStar.Stubs.Tactics.Types.uu___is_Drop>

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Drop (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.uu___is_Drop@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.uu___is_Drop>


; <Skipped let uu___is_Drop/>


; <Start encoding val FStar.Stubs.Tactics.Types.non_informative_token>

(declare-fun FStar.Stubs.Tactics.Types.non_informative_token (Term Term) Term)
(declare-fun Tm_arrow_db2142966eaa849f2844e5e64560e291 () Term)
(declare-fun FStar.Stubs.Tactics.Types.non_informative_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.non_informative_token>


; <Start encoding val FStar.Stubs.Tactics.Types.subtyping_token>

(declare-fun FStar.Stubs.Tactics.Types.subtyping_token (Term Term Term) Term)
(declare-fun Tm_arrow_39f91d5aec75d4006e489b79c2d6c16c () Term)
(declare-fun FStar.Stubs.Tactics.Types.subtyping_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.subtyping_token>


; <Start encoding val FStar.Stubs.Tactics.Types.equiv_token>

(declare-fun FStar.Stubs.Tactics.Types.equiv_token (Term Term Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.equiv_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.equiv_token>


; <Start encoding val FStar.Stubs.Tactics.Types.typing_token>

(declare-fun FStar.Stubs.Tactics.Types.typing_token (Term Term Term) Term)
(declare-fun Tm_arrow_b82abfd864fd916809031a4e19332165 () Term)
(declare-fun FStar.Stubs.Tactics.Types.typing_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.typing_token>


; <Start encoding let issues>

(declare-fun FStar.Stubs.Tactics.Types.issues () Term)

; </end encoding let issues>


; <Start encoding val FStar.Stubs.Tactics.Types.tref>

(declare-fun FStar.Stubs.Tactics.Types.tref (Term) Term)

(declare-fun FStar.Stubs.Tactics.Types.tref@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Types.tref>


; End Externals for interface FStar.Stubs.Tactics.Types


; Externals for interface FStar.Stubs.Tactics.Result


; <Start encoding type FStar.Stubs.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.__result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Stubs.Tactics.Result.__result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.Success (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Success_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Result.Success
(declare-fun FStar.Stubs.Tactics.Result.Success@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Tactics.Result.Failed (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_exn (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Tactics.Result.Failed_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Tactics.Result.Failed
(declare-fun FStar.Stubs.Tactics.Result.Failed@tok () Term)
(declare-fun Tm_arrow_b4f72aad67a83b7651f6cbeabda293bd () Term)
(declare-fun Tm_arrow_ed23e62103a6322a76c850acc838838e () Term)

; <start constructor FStar.Stubs.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.__result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Stubs.Tactics.Result.__result @x0))
 
;;no pats
:qid is-FStar.Stubs.Tactics.Result.__result))))

; </end constructor FStar.Stubs.Tactics.Result.__result>


; <start constructor FStar.Stubs.Tactics.Result.Success>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.Success ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Stubs.Tactics.Result.Success (FStar.Stubs.Tactics.Result.Success_a __@x0)
(FStar.Stubs.Tactics.Result.Success_v __@x0)
(FStar.Stubs.Tactics.Result.Success_ps __@x0)))))

; </end constructor FStar.Stubs.Tactics.Result.Success>


; <start constructor FStar.Stubs.Tactics.Result.Failed>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Tactics.Result.Failed ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Stubs.Tactics.Result.Failed (FStar.Stubs.Tactics.Result.Failed_a __@x0)
(FStar.Stubs.Tactics.Result.Failed_exn __@x0)
(FStar.Stubs.Tactics.Result.Failed_ps __@x0)))))

; </end constructor FStar.Stubs.Tactics.Result.Failed>


; </end encoding type FStar.Stubs.Tactics.Result.__result>


; <Start encoding val FStar.Stubs.Tactics.Result.uu___is_Success>

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Success (Term Term) Term)
(declare-fun Tm_arrow_6645d4122074ac8044bb1b5f135eaee8 () Term)
(declare-fun FStar.Stubs.Tactics.Result.uu___is_Success@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.uu___is_Success>


; <Skipped let uu___is_Success/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__v>

(declare-fun Tm_refine_b4c1e6949a3a57698645ab5be039dc6f (Term) Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__v (Term Term) Term)

(declare-fun Tm_arrow_a778adeae3b2f20803ce4aae6d3d3c6d () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__v@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__v>


; <Skipped let __proj__Success__item__v/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__ps>


(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__ps (Term Term) Term)

(declare-fun Tm_arrow_a7938cd808916b4560d42e6706c15631 () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Success__item__ps@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Success__item__ps>


; <Skipped let __proj__Success__item__ps/>


; <Start encoding val FStar.Stubs.Tactics.Result.uu___is_Failed>

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Failed (Term Term) Term)

(declare-fun FStar.Stubs.Tactics.Result.uu___is_Failed@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.uu___is_Failed>


; <Skipped let uu___is_Failed/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__exn>

(declare-fun Tm_refine_3e8cae0c9d54f7b2657be55ddd0643d7 (Term) Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__exn (Term Term) Term)

(declare-fun Tm_arrow_343463ac2c43a023370797ff20c81cf5 () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__exn@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__exn>


; <Skipped let __proj__Failed__item__exn/>


; <Start encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__ps>


(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__ps (Term Term) Term)

(declare-fun Tm_arrow_2747a76e1f36cdc1944263efc5937cdb () Term)
(declare-fun FStar.Stubs.Tactics.Result.__proj__Failed__item__ps@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Result.__proj__Failed__item__ps>


; <Skipped let __proj__Failed__item__ps/>


; End Externals for interface FStar.Stubs.Tactics.Result


; Externals for module FStar.Monotonic.Pure


; <Start encoding let is_monotonic>

(declare-fun FStar.Monotonic.Pure.is_monotonic (Term Term) Term)

(declare-fun FStar.Monotonic.Pure.is_monotonic@tok () Term)

; </end encoding let is_monotonic>


; <Start encoding let elim_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity@tok () Term)

; </end encoding let elim_pure_wp_monotonicity>


; <Start encoding let elim_pure_wp_monotonicity_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall@tok () Term)

; </end encoding let elim_pure_wp_monotonicity_forall>


; <Start encoding let intro_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity@tok () Term)

; </end encoding let intro_pure_wp_monotonicity>


; <Start encoding let as_pure_wp>

(declare-fun FStar.Monotonic.Pure.as_pure_wp (Term Term) Term)
(declare-fun Tm_refine_5578b11cc349512589a3d2a8bfe37c29 (Term Term) Term)
(declare-fun Tm_arrow_169997680175178f95069b947929b45b () Term)
(declare-fun FStar.Monotonic.Pure.as_pure_wp@tok () Term)


; </end encoding let as_pure_wp>


; <Start encoding let elim_pure>



(declare-fun Tm_arrow_61bb9550f39772f18eaab129c43c3788 (Term) Term)
(declare-fun Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 (Term Term) Term)
(declare-fun Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 (Term Term) Term)



(declare-fun Tm_abs_735bfa0400a12573ed48312f042e45e7 (Term) Term)
(declare-fun Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd (Term Term) Term)
(declare-fun FStar.Monotonic.Pure.elim_pure (Term Term Term Term) Term)











(declare-fun Tm_arrow_08f6df717f4cfecbf9659e86cd16d49b () Term)
(declare-fun FStar.Monotonic.Pure.elim_pure@tok () Term)












; </end encoding let elim_pure>


; End Externals for module FStar.Monotonic.Pure


; Externals for interface FStar.Tactics.Effect


; <Start encoding let tac_wp_t0>

(declare-fun FStar.Tactics.Effect.tac_wp_t0 (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t0@tok () Term)
(declare-fun Tm_arrow_79c32bf125dc2af78993da96357547a4 (Term) Term)
(declare-fun Tm_arrow_6b294f3db0bcad9bb190c1392ab01385 (Term) Term)

; </end encoding let tac_wp_t0>


; <Start encoding let tac_wp_monotonic>

(declare-fun FStar.Tactics.Effect.tac_wp_monotonic (Term Term) Term)
(declare-fun Tm_arrow_586e511512340cebc0763f51dd24e52e () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_monotonic@tok () Term)



; </end encoding let tac_wp_monotonic>


; <Start encoding let tac_wp_t>

(declare-fun FStar.Tactics.Effect.tac_wp_t (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t@tok () Term)


(declare-fun Tm_refine_afae78805025dbab8b8be62e7a11c687 (Term) Term)

; </end encoding let tac_wp_t>


; <Start encoding let tac_repr>

(declare-fun FStar.Tactics.Effect.tac_repr (Term Term) Term)
(declare-fun Tm_arrow_3f33249eca490ba8c990fff289934593 () Term)
(declare-fun FStar.Tactics.Effect.tac_repr@tok () Term)
(declare-fun Non_total_Tm_arrow_ef31cf121fb3836b1822f35578f3a2c7 (Term Term) Term)

; </end encoding let tac_repr>


; <Start encoding let tac_return_wp>

(declare-fun FStar.Tactics.Effect.tac_return_wp (Term Term) Term)
(declare-fun Tm_arrow_d45e4c1a61d444b0cb436be42fdd8fff () Term)
(declare-fun FStar.Tactics.Effect.tac_return_wp@tok () Term)



(declare-fun Tm_abs_62c5eb272101ce5d3f5f190695a8c978 (Term Term) Term)

; </end encoding let tac_return_wp>


; <Start encoding let tac_return>

(declare-fun FStar.Tactics.Effect.tac_return (Term Term) Term)




(declare-fun Tm_arrow_57311ad25591b2a0d4e7a881591571c4 () Term)
(declare-fun FStar.Tactics.Effect.tac_return@tok () Term)




;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_144 (Term Term) Term)

; </end encoding let tac_return>


; <Start encoding let tac_bind_wp>

(declare-fun Tm_arrow_615c284bf702a1fbef85424e39380642 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_8fd6de47bf2be2d2417a26df2df3e1fa () Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp@tok () Term)



(declare-fun Tm_abs_79f810e0804f4454fdd99bc6bd3319e9 (Term Term Term Term) Term)


(declare-fun Tm_abs_18350866457823edafacef426e439b94 (Term Term Term Term) Term)

; </end encoding let tac_bind_wp>


; <Start encoding let tac_wp_compact>

(declare-fun FStar.Tactics.Effect.tac_wp_compact (Term Term) Term)
(declare-fun Tm_arrow_d630ba03ac64e20998a0b33887db7f1d () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_compact@tok () Term)
(declare-fun Tm_arrow_1a36c778c34fcf235893cf9fa8e22d86 (Term) Term)



(declare-fun Tm_abs_0ba06e1220483cb697e09fd9eb53fda1 (Term Term Term) Term)

(declare-fun Tm_arrow_03e2759b21e31a5318d40a743e5bbb54 (Term) Term)
(declare-fun Tm_abs_817a13da54c634f81e0b2bf0c6db2fd9 (Term Term Term Term) Term)


(declare-fun Tm_arrow_c4594856dbe7e5b386d54cadda720877 (Term) Term)
(declare-fun Tm_abs_bee6b44d62d7b15a7c1a999c08dbdaa1 (Term Term) Term)

; </end encoding let tac_wp_compact>


; <Start encoding val FStar.Tactics.Effect.tac_bind_interleave_begin>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_begin (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Effect.tac_bind_interleave_begin>


; <Skipped #push-options "--admit_smt_queries true"/>


; <Start encoding let tac_bind>


(declare-fun Tm_arrow_73ffef9431728db285f9b23266829750 (Term Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind (Term Term Term Term Term Term Term Term) Term)












(declare-fun Tm_abs_38525ace133de22e8b3b3636397a13cd (Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_afd910fd71261e3939048d0e1004fda1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_cbc1739ca78054f7e441cea306012951 () Term)
(declare-fun FStar.Tactics.Effect.tac_bind@tok () Term)




















;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_239 (Term Term Term Term Term Term) Term)

; </end encoding let tac_bind>


; <Skipped #pop-options/>


; <Start encoding val FStar.Tactics.Effect.tac_bind_interleave_end>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_end (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Effect.tac_bind_interleave_end>


; <Start encoding let tac_if_then_else_wp>

(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp (Term Term Term Term) Term)
(declare-fun Tm_arrow_0d888f0d0310e06a23a044b7487ca9a3 () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp@tok () Term)


(declare-fun Tm_arrow_2bfa429e0c444d45072542e413efc1c1 (Term) Term)
(declare-fun Tm_abs_86d5c2428199615bc3f8f5172ed82af4 (Term Term Term Term) Term)

; </end encoding let tac_if_then_else_wp>


; <Start encoding let tac_if_then_else>

(declare-fun FStar.Tactics.Effect.tac_if_then_else (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_36fb4b5a399369ef643849e96611ebec () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else@tok () Term)








(declare-fun Tm_abs_2fda180fbbce3bc00549b67fc601e0be (Term Term Term Term Term Term) Term)



(declare-fun Tm_abs_6ed68232224ac13a4995196b297d1f2b (Term Term Term Term) Term)

; </end encoding let tac_if_then_else>


; <Start encoding let tac_subcomp>


(declare-fun FStar.Tactics.Effect.tac_subcomp (Term Term Term Term) Term)
(declare-fun Tm_refine_9688035851d5c5523a806a1df19cb706 (Term Term) Term)

(declare-fun Tm_arrow_dc8ee65b5b33b14f497b382af4ab7512 () Term)
(declare-fun FStar.Tactics.Effect.tac_subcomp@tok () Term)


; </end encoding let tac_subcomp>


; <Start encoding let tac_close>



(declare-fun FStar.Tactics.Effect.tac_close (Term Term Term Term) Term)


(declare-fun Tm_arrow_ddae682ca2e9bd4cfa6e582c3cbda6bf () Term)
(declare-fun FStar.Tactics.Effect.tac_close@tok () Term)




(declare-fun Tm_abs_bd152fc5c12cc6aa125ccf543aa53813 (Term Term Term Term) Term)


(declare-fun Tm_abs_4a490b6642ec805995acda79bfbd79eb (Term Term Term) Term)

; </end encoding let tac_close>


; <Skipped layered_effect { TAC ... }/>


; <Skipped effect TacH a pre post = FStar.Tactics.Effect.TAC a/>


; <Skipped effect Tac a = FStar.Tactics.Effect.TacH a/>


; <Skipped effect TacS a = FStar.Tactics.Effect.TacH a/>


; <Skipped effect TacF a = FStar.Tactics.Effect.TacH a/>


; <Start encoding let lift_div_tac_wp>

(declare-fun FStar.Tactics.Effect.lift_div_tac_wp (Term Term) Term)
(declare-fun Tm_arrow_756b2c443a872ea2d839224a3f915862 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac_wp@tok () Term)


(declare-fun Tm_abs_d19ed2c1cbcc251803f55dea9449b934 (Term Term Term) Term)

(declare-fun Tm_arrow_298f7ec24f68dbe551035ce3db5b5bdd (Term) Term)
(declare-fun Tm_abs_9c642aa783aefa5494cf2caad21c4825 (Term Term) Term)

; </end encoding let lift_div_tac_wp>


; <Start encoding let lift_div_tac>

(declare-fun Non_total_Tm_arrow_da9712c41bd4800828fa87c1bc605521 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac (Term Term Term) Term)







(declare-fun Tm_arrow_69a366f788903d83a59a723310249405 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac@tok () Term)







;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_326 (Term Term) Term)

; </end encoding let lift_div_tac>


; <Skipped sub_effect DIV ~> TAC/>


; <Start encoding let get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.get@tok () Term)

; </end encoding let get>


; <Start encoding let raise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.raise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.raise@tok () Term)

; </end encoding let raise>


; <Start encoding val FStar.Tactics.Effect.with_tactic>

(declare-fun Non_total_Tm_arrow_0df358455d9ffa69782d20c171a72c48 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic (Term Term) Term)

(declare-fun Tm_arrow_0f1a7b132563c41331d8b63d877642f4 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.with_tactic>


; <Start encoding val FStar.Tactics.Effect.rewrite_with_tactic>


(declare-fun FStar.Tactics.Effect.rewrite_with_tactic (Term Term Term) Term)

(declare-fun Tm_arrow_f63ee5eb2c336987d9ae8086208589c0 () Term)
(declare-fun FStar.Tactics.Effect.rewrite_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.rewrite_with_tactic>


; <Start encoding val FStar.Tactics.Effect.synth_by_tactic>


(declare-fun FStar.Tactics.Effect.synth_by_tactic (Term Term) Term)

(declare-fun Tm_arrow_8f10558f8b36216eec81f2c618b5024b () Term)
(declare-fun FStar.Tactics.Effect.synth_by_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.synth_by_tactic>


; <Start encoding val FStar.Tactics.Effect.assert_by_tactic>


(declare-fun FStar.Tactics.Effect.assert_by_tactic (Term Term) Term)


(declare-fun Tm_arrow_62294304586082aabc8d32a2cb34b258 () Term)
(declare-fun FStar.Tactics.Effect.assert_by_tactic@tok () Term)


; </end encoding val FStar.Tactics.Effect.assert_by_tactic>


; <Start encoding val FStar.Tactics.Effect.by_tactic_seman>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman@tok () Term)

; </end encoding val FStar.Tactics.Effect.by_tactic_seman>


; <Start encoding let assume_safe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.assume_safe (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.assume_safe@tok () Term)

; </end encoding let assume_safe>


; <Start encoding let tac>

(declare-fun FStar.Tactics.Effect.tac (Term Term) Term)

(declare-fun FStar.Tactics.Effect.tac@tok () Term)
(declare-fun Non_total_Tm_arrow_d7d295746bb03506a91beb076c0c54c2 (Term Term) Term)

; </end encoding let tac>


; <Start encoding let tactic>

(declare-fun FStar.Tactics.Effect.tactic (Term) Term)

(declare-fun FStar.Tactics.Effect.tactic@tok () Term)

; </end encoding let tactic>


; <Start encoding val FStar.Tactics.Effect.preprocess_with>

(declare-fun Non_total_Tm_arrow_489c5cd52ce0bd6c500497b6a9d25763 () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with (Term) Term)

(declare-fun Tm_arrow_11f5dabe45aec598b26a74d4ae177cec () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.preprocess_with>


; <Start encoding val FStar.Tactics.Effect.postprocess_with>


(declare-fun FStar.Tactics.Effect.postprocess_with (Term) Term)

(declare-fun Tm_arrow_71902d217cf156a1346c71f86a0ea184 () Term)
(declare-fun FStar.Tactics.Effect.postprocess_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.postprocess_with>


; <Start encoding val FStar.Tactics.Effect.postprocess_for_extraction_with>


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with (Term) Term)


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with@tok () Term)

; </end encoding val FStar.Tactics.Effect.postprocess_for_extraction_with>


; <Skipped #set-options "--no_tactics"/>


; <Start encoding val FStar.Tactics.Effect.unfold_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.unfold_with_tactic>


; <Start encoding val FStar.Tactics.Effect.unfold_rewrite_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic@tok () Term)

; </end encoding val FStar.Tactics.Effect.unfold_rewrite_with_tactic>


; End Externals for interface FStar.Tactics.Effect


; Externals for interface FStar.Tactics.Typeclasses


; <Start encoding val FStar.Tactics.Typeclasses.tcclass>

(declare-fun FStar.Tactics.Typeclasses.tcclass (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.tcclass>


; <Start encoding val FStar.Tactics.Typeclasses.tcinstance>

(declare-fun FStar.Tactics.Typeclasses.tcinstance (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.tcinstance>


; <Start encoding val FStar.Tactics.Typeclasses.fundeps>

(declare-fun FStar.Tactics.Typeclasses.fundeps (Term) Term)

(declare-fun FStar.Tactics.Typeclasses.fundeps@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.fundeps>


; <Start encoding val FStar.Tactics.Typeclasses.no_method>

(declare-fun FStar.Tactics.Typeclasses.no_method (Dummy_sort) Term)

; </end encoding val FStar.Tactics.Typeclasses.no_method>


; <Start encoding val FStar.Tactics.Typeclasses.tcresolve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.tcresolve>


; <Start encoding val FStar.Tactics.Typeclasses.mk_class>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class@tok () Term)

; </end encoding val FStar.Tactics.Typeclasses.mk_class>


; <Start encoding let solve>

(declare-fun FStar.Tactics.Typeclasses.solve (Term Term) Term)

(declare-fun FStar.Tactics.Typeclasses.solve@tok () Term)

; </end encoding let solve>


; End Externals for interface FStar.Tactics.Typeclasses


; Externals for interface FStar.Tactics.MApply0


; <Start encoding val FStar.Tactics.MApply0.push1>


(declare-fun FStar.Tactics.MApply0.push1 (Term Term Term Term) Term)

(declare-fun Tm_arrow_72d7db1b0b470fb0bc85c2b74a2a0f95 () Term)
(declare-fun FStar.Tactics.MApply0.push1@tok () Term)

; </end encoding val FStar.Tactics.MApply0.push1>


; <Start encoding val FStar.Tactics.MApply0.push1'>

(declare-fun FStar.Tactics.MApply0.push1_ (Term Term Term Term) Term)
(declare-fun Tm_arrow_156c500bdf0e99cc45ffd26a33a603a8 () Term)
(declare-fun FStar.Tactics.MApply0.push1_@tok () Term)

; </end encoding val FStar.Tactics.MApply0.push1'>


; <Start encoding val FStar.Tactics.MApply0.mapply0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.MApply0.mapply0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.MApply0.mapply0@tok () Term)

; </end encoding val FStar.Tactics.MApply0.mapply0>


; End Externals for interface FStar.Tactics.MApply0


; Externals for module FStar.Sealed.Inhabited


; <Start encoding let sealed_>

(declare-fun FStar.Sealed.Inhabited.sealed_ (Term Term) Term)

(declare-fun FStar.Sealed.Inhabited.sealed_@tok () Term)

; </end encoding let sealed_>


; <Start encoding let is_sealed>

(declare-fun FStar.Sealed.Inhabited.is_sealed (Term Term Term) Term)
(declare-fun Tm_arrow_7b4cc4d4df9da58519ba6828186ddd69 () Term)
(declare-fun FStar.Sealed.Inhabited.is_sealed@tok () Term)

; </end encoding let is_sealed>


; <Start encoding let sealed>

(declare-fun FStar.Sealed.Inhabited.sealed (Term Term) Term)

(declare-fun FStar.Sealed.Inhabited.sealed@tok () Term)
(declare-fun Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 (Term Term) Term)

; </end encoding let sealed>


; <Start encoding let seal>

(declare-fun FStar.Sealed.Inhabited.seal (Term Term Term) Term)
(declare-fun Tm_arrow_4cdc2d8c9a72a03857fe78dec70286c9 () Term)
(declare-fun FStar.Sealed.Inhabited.seal@tok () Term)

; </end encoding let seal>


; <Start encoding let sealed_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.Inhabited.sealed_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.Inhabited.sealed_singleton@tok () Term)

; </end encoding let sealed_singleton>


; End Externals for module FStar.Sealed.Inhabited


; Externals for interface FStar.Stubs.Syntax.Syntax


; <Start encoding type FStar.Stubs.Syntax.Syntax.subst_elt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.subst_elt () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.DB (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DB__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DB__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.DB
(declare-fun FStar.Stubs.Syntax.Syntax.DB@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.DT (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DT__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DT__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.DT
(declare-fun FStar.Stubs.Syntax.Syntax.DT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.NM (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NM__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NM__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.NM
(declare-fun FStar.Stubs.Syntax.Syntax.NM@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.NT (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NT__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NT__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.NT
(declare-fun FStar.Stubs.Syntax.Syntax.NT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.UN (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UN__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UN__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.UN
(declare-fun FStar.Stubs.Syntax.Syntax.UN@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.UD (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UD__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UD__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Syntax.Syntax.UD
(declare-fun FStar.Stubs.Syntax.Syntax.UD@tok () Term)
(declare-fun Tm_arrow_59b160f9db6fa0b43efe141e1871d73d () Term)
(declare-fun Tm_arrow_246b825286743a478677ae7292aeffe2 () Term)
(declare-fun Tm_arrow_e8e4e72698c1da80b99f595602967f71 () Term)
(declare-fun Tm_arrow_46d3e542aa55b7cc03ac081a0f8a9530 () Term)
(declare-fun Tm_arrow_22c6c9dfa3dc835cbf92ac1f80a1d093 () Term)
(declare-fun Tm_arrow_9b76295b547a658a432d0fb98988023c () Term)

; <start constructor FStar.Stubs.Syntax.Syntax.subst_elt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.subst_elt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.Syntax.Syntax.subst_elt)))

; </end constructor FStar.Stubs.Syntax.Syntax.subst_elt>


; <start constructor FStar.Stubs.Syntax.Syntax.DB>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.DB ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Stubs.Syntax.Syntax.DB (FStar.Stubs.Syntax.Syntax.DB__0 __@x0)
(FStar.Stubs.Syntax.Syntax.DB__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.DB>


; <start constructor FStar.Stubs.Syntax.Syntax.DT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.DT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
(FStar.Stubs.Syntax.Syntax.DT (FStar.Stubs.Syntax.Syntax.DT__0 __@x0)
(FStar.Stubs.Syntax.Syntax.DT__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.DT>


; <start constructor FStar.Stubs.Syntax.Syntax.NM>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.NM ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
(FStar.Stubs.Syntax.Syntax.NM (FStar.Stubs.Syntax.Syntax.NM__0 __@x0)
(FStar.Stubs.Syntax.Syntax.NM__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.NM>


; <start constructor FStar.Stubs.Syntax.Syntax.NT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.NT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
(FStar.Stubs.Syntax.Syntax.NT (FStar.Stubs.Syntax.Syntax.NT__0 __@x0)
(FStar.Stubs.Syntax.Syntax.NT__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.NT>


; <start constructor FStar.Stubs.Syntax.Syntax.UN>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.UN ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
(FStar.Stubs.Syntax.Syntax.UN (FStar.Stubs.Syntax.Syntax.UN__0 __@x0)
(FStar.Stubs.Syntax.Syntax.UN__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.UN>


; <start constructor FStar.Stubs.Syntax.Syntax.UD>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.UD ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Stubs.Syntax.Syntax.UD (FStar.Stubs.Syntax.Syntax.UD__0 __@x0)
(FStar.Stubs.Syntax.Syntax.UD__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.UD>


; </end encoding type FStar.Stubs.Syntax.Syntax.subst_elt>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_DB>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DB (Term) Term)
(declare-fun Tm_arrow_ff864b6401b5fc78e14a15c40c1b4753 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DB@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_DB>


; <Skipped let uu___is_DB/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__DB__item___0>

(declare-fun Tm_refine_a60c1955d846f28c14f0dccba675d567 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___0 (Term) Term)

(declare-fun Tm_arrow_fbe5c1d2ec49b638fafab35efe4cb7fc () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__DB__item___0>


; <Skipped let __proj__DB__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__DB__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___1 (Term) Term)

(declare-fun Tm_arrow_521de771e6fe8c8bc30da9efbdc9462b () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__DB__item___1>


; <Skipped let __proj__DB__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_DT>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DT (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DT@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_DT>


; <Skipped let uu___is_DT/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__DT__item___0>

(declare-fun Tm_refine_ae77d74f5b6921008dc31af9e75a50f5 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___0 (Term) Term)

(declare-fun Tm_arrow_ec80e358e0b6c3126a190adc2e7ed82f () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__DT__item___0>


; <Skipped let __proj__DT__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__DT__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___1 (Term) Term)

(declare-fun Tm_arrow_a475afa5fed9c441da094d38434953f3 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__DT__item___1>


; <Skipped let __proj__DT__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_NM>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NM (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NM@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_NM>


; <Skipped let uu___is_NM/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__NM__item___0>

(declare-fun Tm_refine_0267269f45d6fd12cdc74fb6d004d04b () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___0 (Term) Term)

(declare-fun Tm_arrow_af330ae0a0f5e1ff37e5e1285845b0d0 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__NM__item___0>


; <Skipped let __proj__NM__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__NM__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___1 (Term) Term)

(declare-fun Tm_arrow_e5d6161c1e6c19b7586b9d39cf764b0b () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__NM__item___1>


; <Skipped let __proj__NM__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_NT>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NT (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NT@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_NT>


; <Skipped let uu___is_NT/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__NT__item___0>

(declare-fun Tm_refine_99c151968ce40534e3fb9a4c963b1a19 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___0 (Term) Term)

(declare-fun Tm_arrow_982642367e66b4fc9650795f441f7683 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__NT__item___0>


; <Skipped let __proj__NT__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__NT__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___1 (Term) Term)

(declare-fun Tm_arrow_f91e316d0b616017bb48bb979a6cf38e () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__NT__item___1>


; <Skipped let __proj__NT__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_UN>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UN (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UN@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_UN>


; <Skipped let uu___is_UN/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__UN__item___0>

(declare-fun Tm_refine_7f643c5eb6d5b9ca17fe4c5e0fdbe65e () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___0 (Term) Term)

(declare-fun Tm_arrow_d5a928ef007e0924ae61bff0f755601a () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__UN__item___0>


; <Skipped let __proj__UN__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__UN__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___1 (Term) Term)

(declare-fun Tm_arrow_0affefa4e4e707cb5f8472e443aa50ab () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__UN__item___1>


; <Skipped let __proj__UN__item___1/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.uu___is_UD>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UD (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UD@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.uu___is_UD>


; <Skipped let uu___is_UD/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__UD__item___0>

(declare-fun Tm_refine_c8eb10759a737b8258f5bbb6f7ed1381 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___0 (Term) Term)

(declare-fun Tm_arrow_d278c048d3a2513022fba9cbd2b84968 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___0@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__UD__item___0>


; <Skipped let __proj__UD__item___0/>


; <Start encoding val FStar.Stubs.Syntax.Syntax.__proj__UD__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___1 (Term) Term)

(declare-fun Tm_arrow_70d9cc9e254749c84727be5bbadd656e () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___1@tok () Term)

; </end encoding val FStar.Stubs.Syntax.Syntax.__proj__UD__item___1>


; <Skipped let __proj__UD__item___1/>


; <Start encoding let subst_t>

(declare-fun FStar.Stubs.Syntax.Syntax.subst_t () Term)

; </end encoding let subst_t>


; <Start encoding let match_returns_ascription>

(declare-fun FStar.Stubs.Syntax.Syntax.match_returns_ascription () Term)

; </end encoding let match_returns_ascription>


; End Externals for interface FStar.Stubs.Syntax.Syntax


; Externals for interface FStar.Stubs.Reflection.V2.Data


; <Start encoding let ppname_t>

(declare-fun FStar.Stubs.Reflection.V2.Data.ppname_t () Term)

; </end encoding let ppname_t>


; <Start encoding let as_ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.as_ppname (Term) Term)
(declare-fun Tm_arrow_5b573696ae2f7ec9d51570a3337ac496 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.as_ppname@tok () Term)

; </end encoding let as_ppname>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.vconst>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.vconst () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Unit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Unit
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Unit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Int (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Int__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Int
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Int@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_True () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_True
(declare-fun FStar.Stubs.Reflection.V2.Data.C_True@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_False () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_False
(declare-fun FStar.Stubs.Reflection.V2.Data.C_False@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_String (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_String__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_String
(declare-fun FStar.Stubs.Reflection.V2.Data.C_String@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Range (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Range__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Range
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Range@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reify () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Reify
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reify@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reflect (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reflect__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Reflect
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Reflect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Real (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Real__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Real
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Real@tok () Term)
(declare-fun Tm_arrow_a7c0c38a63b643be84a50bf5e1998727 () Term)
(declare-fun Tm_arrow_96d1f949b8f9c876a6b2706ef00131dc () Term)
(declare-fun Tm_arrow_6b540068312468d09d41569e77933600 () Term)
(declare-fun Tm_arrow_7b5cc576f4e46af5d1e44c84309d6afe () Term)


; <start constructor FStar.Stubs.Reflection.V2.Data.vconst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.vconst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
103)
(= __@x0
FStar.Stubs.Reflection.V2.Data.vconst)))

; </end constructor FStar.Stubs.Reflection.V2.Data.vconst>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Unit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Stubs.Reflection.V2.Data.C_Unit)))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Unit>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Int>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Int ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Int (FStar.Stubs.Reflection.V2.Data.C_Int__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Int>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_True>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_True ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
FStar.Stubs.Reflection.V2.Data.C_True)))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_True>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_False>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_False ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
118)
(= __@x0
FStar.Stubs.Reflection.V2.Data.C_False)))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_False>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_String>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_String ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_String (FStar.Stubs.Reflection.V2.Data.C_String__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_String>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Range>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Range ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Range (FStar.Stubs.Reflection.V2.Data.C_Range__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Range>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Reify>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Reify ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
FStar.Stubs.Reflection.V2.Data.C_Reify)))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Reify>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Reflect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Reflect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Reflect (FStar.Stubs.Reflection.V2.Data.C_Reflect__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Reflect>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Real>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Real ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Real (FStar.Stubs.Reflection.V2.Data.C_Real__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Real>


; </end encoding type FStar.Stubs.Reflection.V2.Data.vconst>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Unit>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Unit (Term) Term)
(declare-fun Tm_arrow_d035a9e48bd049715b37c1633fcfbaef () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Unit@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Unit>


; <Skipped let uu___is_C_Unit/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Int>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Int (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Int@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Int>


; <Skipped let uu___is_C_Int/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0>

(declare-fun Tm_refine_418dc7105fe93def0897ac9652872c5e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0 (Term) Term)

(declare-fun Tm_arrow_f8983dc900d20bc309323eff0264761a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Int__item___0>


; <Skipped let __proj__C_Int__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_True>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_True (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_True@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_True>


; <Skipped let uu___is_C_True/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_False>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_False (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_False@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_False>


; <Skipped let uu___is_C_False/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_String>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_String (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_String@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_String>


; <Skipped let uu___is_C_String/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0>

(declare-fun Tm_refine_7df21076da548fc4d6b8c52c485d3bab () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0 (Term) Term)

(declare-fun Tm_arrow_bb851f46d45e0bca86fdc7181db1541f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_String__item___0>


; <Skipped let __proj__C_String__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Range>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Range (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Range@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Range>


; <Skipped let uu___is_C_Range/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0>

(declare-fun Tm_refine_77fa0f7914797f518561cfee6d1d9ee7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0 (Term) Term)

(declare-fun Tm_arrow_1115f0c366d06f9173da38fe7678ea14 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Range__item___0>


; <Skipped let __proj__C_Range__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Reify>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Reify (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Reify@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Reify>


; <Skipped let uu___is_C_Reify/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Reflect>


; <Skipped let uu___is_C_Reflect/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0>

(declare-fun Tm_refine_9030914e45d85a046cc0a6fdb9222232 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0 (Term) Term)

(declare-fun Tm_arrow_d623e14498d42a3988212430a0b0668f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Reflect__item___0>


; <Skipped let __proj__C_Reflect__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Real>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Real (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Real@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Real>


; <Skipped let uu___is_C_Real/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0>

(declare-fun Tm_refine_fe52390e6170c16c172c68852b19e4e7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0 (Term) Term)

(declare-fun Tm_arrow_f7d25fc5d8260511721e863e569251f0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Real__item___0>


; <Skipped let __proj__C_Real__item___0/>


; <Start encoding let universes>

(declare-fun FStar.Stubs.Reflection.V2.Data.universes () Term)

; </end encoding let universes>


; <Start encoding let ident_view>

(declare-fun FStar.Stubs.Reflection.V2.Data.ident_view () Term)

; </end encoding let ident_view>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.pattern>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.pattern () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Constant_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Pat_Constant
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Constant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons_head (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons_subpats (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Pat_Cons
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Cons@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Var (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Var_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Var_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Pat_Var
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term_t (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term
(declare-fun FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term@tok () Term)
(declare-fun Tm_arrow_194a8dcf131ebd656125115cba1ed14c () Term)
(declare-fun Tm_arrow_c954af47400566237a9044bd4f1ba38a () Term)
(declare-fun Tm_arrow_4a255af0ab9044dbd977f62836921da2 () Term)
(declare-fun Tm_arrow_67ec204b32be72aa2992751e1be276a2 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.pattern>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.pattern ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
FStar.Stubs.Reflection.V2.Data.pattern)))

; </end constructor FStar.Stubs.Reflection.V2.Data.pattern>


; <start constructor FStar.Stubs.Reflection.V2.Data.Pat_Constant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Pat_Constant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
185)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Pat_Constant (FStar.Stubs.Reflection.V2.Data.Pat_Constant_c __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Pat_Constant>


; <start constructor FStar.Stubs.Reflection.V2.Data.Pat_Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Pat_Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
190)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Pat_Cons (FStar.Stubs.Reflection.V2.Data.Pat_Cons_head __@x0)
(FStar.Stubs.Reflection.V2.Data.Pat_Cons_univs __@x0)
(FStar.Stubs.Reflection.V2.Data.Pat_Cons_subpats __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Pat_Cons>


; <start constructor FStar.Stubs.Reflection.V2.Data.Pat_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Pat_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
195)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Pat_Var (FStar.Stubs.Reflection.V2.Data.Pat_Var_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Pat_Var_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Pat_Var>


; <start constructor FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
200)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term (FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term_t __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Pat_Dot_Term>


; </end encoding type FStar.Stubs.Reflection.V2.Data.pattern>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant (Term) Term)
(declare-fun Tm_arrow_7a96ae5ea44a813e54305a00e432f866 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Constant>


; <Skipped let uu___is_Pat_Constant/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c>

(declare-fun Tm_refine_26a3ca3c291e017bd04ab88ab3f1bd16 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c (Term) Term)

(declare-fun Tm_arrow_83021c93c7fe4314ddc771e7b24329e0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Constant__item__c>


; <Skipped let __proj__Pat_Constant__item__c/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Cons>


; <Skipped let uu___is_Pat_Cons/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head>

(declare-fun Tm_refine_919c45f7fade48bc58599772159ac06a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head (Term) Term)

(declare-fun Tm_arrow_1cae2dce84c39a8b28219bc12946dcb7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__head>


; <Skipped let __proj__Pat_Cons__item__head/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__univs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__univs (Term) Term)

(declare-fun Tm_arrow_c37b10bcd5b64ae88085a2fa2566aa9d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__univs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__univs>


; <Skipped let __proj__Pat_Cons__item__univs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__subpats>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__subpats (Term) Term)

(declare-fun Tm_arrow_83a841fba2052039ae86f1cd5e6a0aa6 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__subpats@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Cons__item__subpats>


; <Skipped let __proj__Pat_Cons__item__subpats/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Var>


; <Skipped let uu___is_Pat_Var/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort>

(declare-fun Tm_refine_b904eb95f43a094a00ec5951681ff0d1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort (Term) Term)

(declare-fun Tm_arrow_24834d49ce62574d2dad65f36ff53f84 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__sort>


; <Skipped let __proj__Pat_Var__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__ppname>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__ppname (Term) Term)

(declare-fun Tm_arrow_6aea8e53136fb1f0c8d35511959417f5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Var__item__ppname>


; <Skipped let __proj__Pat_Var__item__ppname/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Pat_Dot_Term>


; <Skipped let uu___is_Pat_Dot_Term/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t>

(declare-fun Tm_refine_7fcbc4d4271baad02416b0bc6d22bd6f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t (Term) Term)

(declare-fun Tm_arrow_735bad28f3a470dce3f9163b2d51c9e7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t>


; <Skipped let __proj__Pat_Dot_Term__item__t/>


; <Start encoding let branch>

(declare-fun FStar.Stubs.Reflection.V2.Data.branch () Term)

; </end encoding let branch>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.aqualv>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.aqualv () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Implicit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Q_Implicit
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Implicit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Explicit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Q_Explicit
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Explicit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Equality () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Q_Equality
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Equality@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Meta (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Meta__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Q_Meta
(declare-fun FStar.Stubs.Reflection.V2.Data.Q_Meta@tok () Term)
(declare-fun Tm_arrow_12115b7bb71fe9dad9a2406c8ec886ba () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.aqualv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.aqualv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
240)
(= __@x0
FStar.Stubs.Reflection.V2.Data.aqualv)))

; </end constructor FStar.Stubs.Reflection.V2.Data.aqualv>


; <start constructor FStar.Stubs.Reflection.V2.Data.Q_Implicit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Q_Implicit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
246)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Q_Implicit)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Q_Implicit>


; <start constructor FStar.Stubs.Reflection.V2.Data.Q_Explicit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Q_Explicit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
248)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Q_Explicit)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Q_Explicit>


; <start constructor FStar.Stubs.Reflection.V2.Data.Q_Equality>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Q_Equality ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
250)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Q_Equality)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Q_Equality>


; <start constructor FStar.Stubs.Reflection.V2.Data.Q_Meta>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Q_Meta ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
252)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Q_Meta (FStar.Stubs.Reflection.V2.Data.Q_Meta__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Q_Meta>


; </end encoding type FStar.Stubs.Reflection.V2.Data.aqualv>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Implicit>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Implicit (Term) Term)
(declare-fun Tm_arrow_68286458ba37f8d18f3b89110cd3dd99 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Implicit@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Implicit>


; <Skipped let uu___is_Q_Implicit/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Explicit>


; <Skipped let uu___is_Q_Explicit/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Equality>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Equality (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Equality@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Equality>


; <Skipped let uu___is_Q_Equality/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Q_Meta>


; <Skipped let uu___is_Q_Meta/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0>

(declare-fun Tm_refine_fbfbe764a7047d11d6f7378b2ea1d9c3 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0 (Term) Term)

(declare-fun Tm_arrow_17f054579d664da16efc4322e92d9bc0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Q_Meta__item___0>


; <Skipped let __proj__Q_Meta__item___0/>


; <Start encoding let argv>

(declare-fun FStar.Stubs.Reflection.V2.Data.argv () Term)

; </end encoding let argv>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.namedv_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.namedv_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mknamedv_view
(declare-fun FStar.Stubs.Reflection.V2.Data.Mknamedv_view@tok () Term)
(declare-fun Tm_arrow_165b7d8e6340220e2fb3f69025870b8a () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.namedv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.namedv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
FStar.Stubs.Reflection.V2.Data.namedv_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.namedv_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mknamedv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mknamedv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
274)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view (FStar.Stubs.Reflection.V2.Data.Mknamedv_view_uniq __@x0)
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Mknamedv_view_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mknamedv_view>


; </end encoding type FStar.Stubs.Reflection.V2.Data.namedv_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq (Term) Term)
(declare-fun Tm_arrow_2341a6a7a4326fd6cbbf990ea2e388dc () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq>


; <Skipped let __proj__Mknamedv_view__item__uniq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__sort>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__sort (Term) Term)
(declare-fun Tm_arrow_68f170bf4d5af32cd9e422b1ddd8b44b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__sort>


; <Skipped let __proj__Mknamedv_view__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname (Term) Term)
(declare-fun Tm_arrow_40705fac288ec12c6904d1979851a927 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname>


; <Skipped let __proj__Mknamedv_view__item__ppname/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.bv_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.bv_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view_index (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mkbv_view
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbv_view@tok () Term)
(declare-fun Tm_arrow_f3849ea48051811068c4c1b7b341d6a3 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.bv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.bv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
284)
(= __@x0
FStar.Stubs.Reflection.V2.Data.bv_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.bv_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mkbv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mkbv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mkbv_view (FStar.Stubs.Reflection.V2.Data.Mkbv_view_index __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbv_view_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbv_view_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mkbv_view>


; </end encoding type FStar.Stubs.Reflection.V2.Data.bv_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__index>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__index (Term) Term)
(declare-fun Tm_arrow_d070463d7abd379e80ef34b3beebee94 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__index@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__index>


; <Skipped let __proj__Mkbv_view__item__index/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__sort>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__sort (Term) Term)
(declare-fun Tm_arrow_445f62ad9797a8e02a56d45722380327 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__sort>


; <Skipped let __proj__Mkbv_view__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__ppname (Term) Term)
(declare-fun Tm_arrow_bd1565e15035bd4217b8d4917daae897 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbv_view__item__ppname>


; <Skipped let __proj__Mkbv_view__item__ppname/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.binder_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.binder_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mkbinder_view
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinder_view@tok () Term)
(declare-fun Tm_arrow_97241916599e22b3f721f0b56b2afba4 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.binder_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.binder_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
300)
(= __@x0
FStar.Stubs.Reflection.V2.Data.binder_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.binder_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mkbinder_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mkbinder_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
306)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view (FStar.Stubs.Reflection.V2.Data.Mkbinder_view_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view_qual __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view_attrs __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinder_view_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mkbinder_view>


; </end encoding type FStar.Stubs.Reflection.V2.Data.binder_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__sort>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__sort (Term) Term)
(declare-fun Tm_arrow_f9d63c667cf6a253c7fb55fa1b5bb766 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__sort>


; <Skipped let __proj__Mkbinder_view__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual (Term) Term)
(declare-fun Tm_arrow_3cf7f5dbf67c8477957dd7c3c8c7b88a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__qual>


; <Skipped let __proj__Mkbinder_view__item__qual/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs (Term) Term)
(declare-fun Tm_arrow_37d3ca96044f87f5dc1078c4f388eba4 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs>


; <Skipped let __proj__Mkbinder_view__item__attrs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname (Term) Term)
(declare-fun Tm_arrow_eb9dd443f78ea7123ee510ce8aa140f9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname>


; <Skipped let __proj__Mkbinder_view__item__ppname/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.binding>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.binding () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mkbinding
(declare-fun FStar.Stubs.Reflection.V2.Data.Mkbinding@tok () Term)
(declare-fun Tm_arrow_a41ec7f1cbb5bea02b7eefd476eecf34 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.binding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.binding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(= __@x0
FStar.Stubs.Reflection.V2.Data.binding)))

; </end constructor FStar.Stubs.Reflection.V2.Data.binding>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mkbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mkbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
324)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mkbinding (FStar.Stubs.Reflection.V2.Data.Mkbinding_uniq __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinding_sort __@x0)
(FStar.Stubs.Reflection.V2.Data.Mkbinding_ppname __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mkbinding>


; </end encoding type FStar.Stubs.Reflection.V2.Data.binding>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__uniq>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__uniq (Term) Term)
(declare-fun Tm_arrow_b4fa8882266aa3d734d4b247709a0521 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__uniq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__uniq>


; <Skipped let __proj__Mkbinding__item__uniq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__sort>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__sort (Term) Term)
(declare-fun Tm_arrow_aa7a906604441819519eef9a39bd8f2b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__sort@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__sort>


; <Skipped let __proj__Mkbinding__item__sort/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__ppname>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__ppname (Term) Term)
(declare-fun Tm_arrow_075a9e1c5a2e099441a80cb79f06e34d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__ppname@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mkbinding__item__ppname>


; <Skipped let __proj__Mkbinding__item__ppname/>


; <Start encoding let bindings>

(declare-fun FStar.Stubs.Reflection.V2.Data.bindings () Term)

; </end encoding let bindings>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.binder_is_simple>

(declare-fun FStar.Stubs.Reflection.V2.Data.binder_is_simple (Term) Term)
(declare-fun Tm_arrow_b19550718a671b3c68df5ddade9a9a01 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.binder_is_simple@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.binder_is_simple>


; <Start encoding let simple_binder>

(declare-fun FStar.Stubs.Reflection.V2.Data.simple_binder () Term)
(declare-fun Tm_refine_a8284b5e442b1496d78105f043903ddc () Term)

; </end encoding let simple_binder>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.universe_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.universe_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Zero () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Zero
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Zero@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Succ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Succ__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Succ
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Succ@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Max (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Max__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Max
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Max@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_BVar__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_BVar
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Name
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unif (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unif__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Unif
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unif@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Uv_Unk
(declare-fun FStar.Stubs.Reflection.V2.Data.Uv_Unk@tok () Term)
(declare-fun Tm_arrow_c7d72970247c899e8a55e24fe4918644 () Term)
(declare-fun Tm_arrow_8d30c5dd788812fad6d30a33fbb5654e () Term)
(declare-fun Tm_arrow_341c3e5aa179480f337d49ea28992b1c () Term)
(declare-fun Tm_arrow_1009968111e25b328418eeb4d77633ec () Term)
(declare-fun Tm_arrow_846c798102671787b69029be0f19fa4d () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.universe_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.universe_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
337)
(= __@x0
FStar.Stubs.Reflection.V2.Data.universe_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.universe_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Zero>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Zero ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
343)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Uv_Zero)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Zero>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Succ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Succ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
345)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_Succ (FStar.Stubs.Reflection.V2.Data.Uv_Succ__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Succ>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Max>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Max ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
350)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_Max (FStar.Stubs.Reflection.V2.Data.Uv_Max__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Max>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
355)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_BVar (FStar.Stubs.Reflection.V2.Data.Uv_BVar__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_BVar>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
360)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_Name (FStar.Stubs.Reflection.V2.Data.Uv_Name__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Name>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Unif>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Unif ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
365)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Uv_Unif (FStar.Stubs.Reflection.V2.Data.Uv_Unif__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Unif>


; <start constructor FStar.Stubs.Reflection.V2.Data.Uv_Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Uv_Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
370)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Uv_Unk)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Uv_Unk>


; </end encoding type FStar.Stubs.Reflection.V2.Data.universe_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Zero>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Zero (Term) Term)
(declare-fun Tm_arrow_5162cda8d1702e19cd453fe1b18d259a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Zero@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Zero>


; <Skipped let uu___is_Uv_Zero/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Succ>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Succ (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Succ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Succ>


; <Skipped let uu___is_Uv_Succ/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Succ__item___0>

(declare-fun Tm_refine_cb696a4d6494bfc767fa8ffd03153b72 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Succ__item___0 (Term) Term)

(declare-fun Tm_arrow_b26f9e2f151248cabfbc6503f314cef7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Succ__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Succ__item___0>


; <Skipped let __proj__Uv_Succ__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Max>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Max (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Max@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Max>


; <Skipped let uu___is_Uv_Max/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Max__item___0>

(declare-fun Tm_refine_d8657da60176492ac3a92ebbd75a0986 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Max__item___0 (Term) Term)

(declare-fun Tm_arrow_f0c8849234f0e195786528f64de8b6dd () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Max__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Max__item___0>


; <Skipped let __proj__Uv_Max__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_BVar>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_BVar (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_BVar@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_BVar>


; <Skipped let uu___is_Uv_BVar/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_BVar__item___0>

(declare-fun Tm_refine_8c4e0632856c87e06783b54b0bd598c2 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_BVar__item___0 (Term) Term)

(declare-fun Tm_arrow_b69a5b05a0b20873b6e5a86cd735d1e9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_BVar__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_BVar__item___0>


; <Skipped let __proj__Uv_BVar__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Name>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Name (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Name@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Name>


; <Skipped let uu___is_Uv_Name/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Name__item___0>

(declare-fun Tm_refine_fdd06885f1615f0a9286347a2dd4b4eb () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Name__item___0 (Term) Term)

(declare-fun Tm_arrow_5c801be7ae3db9a1d9bc5fd05af086f6 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Name__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Name__item___0>


; <Skipped let __proj__Uv_Name__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unif>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unif (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unif@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unif>


; <Skipped let uu___is_Uv_Unif/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Unif__item___0>

(declare-fun Tm_refine_710b550dc4f0f58410a48dd8c021aa70 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Unif__item___0 (Term) Term)

(declare-fun Tm_arrow_b3df19f1b7eed51542726cdfce113938 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Uv_Unif__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Uv_Unif__item___0>


; <Skipped let __proj__Uv_Unif__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unk>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unk (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unk@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Uv_Unk>


; <Skipped let uu___is_Uv_Unk/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.term_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.term_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Var_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Var
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_BVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_BVar
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_FVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_FVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_FVar
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_FVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_UInst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_UInst_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_UInst_us (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_UInst
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_UInst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_App_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_App_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_App
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Abs (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Abs_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Abs_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Abs
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Abs@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Arrow (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Arrow_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Arrow_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Arrow
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Arrow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Type (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Type__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Type
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Type@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Refine (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Refine_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Refine_ref (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Refine
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Refine@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Const
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Uvar (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Uvar__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Uvar__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Uvar
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Uvar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_recf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_def (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Let
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match_scrutinee (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match_ret (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match_brs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Match
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Match@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_AscribedT
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_AscribedC
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_AscribedC@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Unknown
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Unknown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Unsupp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Tv_Unsupp
(declare-fun FStar.Stubs.Reflection.V2.Data.Tv_Unsupp@tok () Term)
(declare-fun Tm_arrow_752584adff6406ac9ea8ccc03a0f3fc4 () Term)
(declare-fun Tm_arrow_7aba76f7e7c0cd2d04d0ad01b75c0f3a () Term)
(declare-fun Tm_arrow_5d26b6dc5bd4ecfefa229a5a2feb5542 () Term)
(declare-fun Tm_arrow_db453bb2b094d83021ed25f2d19986c9 () Term)
(declare-fun Tm_arrow_ae43253092025124e5d41ea41ff792a5 () Term)
(declare-fun Tm_arrow_78a91cd3139c0acde68434041f32d223 () Term)
(declare-fun Tm_arrow_4fbb92ed8f6807836d65df7441bed485 () Term)
(declare-fun Tm_arrow_5014d41a773a407636142efad1f55638 () Term)
(declare-fun Tm_arrow_235701cd37e4cd42419d9bd39a6ea548 () Term)
(declare-fun Tm_arrow_d325bb4edbf91cf603a68faf2c534beb () Term)
(declare-fun Tm_arrow_52a3f687ff0901a6d5c1192c82acb17d () Term)
(declare-fun Tm_arrow_28ed6fd76e47abd5164c551831599ee2 () Term)
(declare-fun Tm_arrow_a021f97d3ff35d6d46a612afd8c9422f () Term)
(declare-fun Tm_arrow_2f6429e11f7a998a86518c3e8a06684d () Term)
(declare-fun Tm_arrow_e397736eb9117ce3dbdb6cbfbb8fb030 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.term_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.term_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
405)
(= __@x0
FStar.Stubs.Reflection.V2.Data.term_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.term_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
411)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Var (FStar.Stubs.Reflection.V2.Data.Tv_Var_v __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Var>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
416)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_BVar (FStar.Stubs.Reflection.V2.Data.Tv_BVar_v __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_BVar>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_FVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_FVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
421)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_FVar (FStar.Stubs.Reflection.V2.Data.Tv_FVar_v __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_FVar>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_UInst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_UInst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_UInst (FStar.Stubs.Reflection.V2.Data.Tv_UInst_v __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_UInst_us __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_UInst>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
431)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_App (FStar.Stubs.Reflection.V2.Data.Tv_App_hd __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_App_a __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_App>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Abs>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Abs ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
436)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Abs (FStar.Stubs.Reflection.V2.Data.Tv_Abs_bv __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Abs_body __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Abs>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Arrow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
441)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow (FStar.Stubs.Reflection.V2.Data.Tv_Arrow_bv __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Arrow_c __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Arrow>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Type>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
446)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Type (FStar.Stubs.Reflection.V2.Data.Tv_Type__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Type>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Refine>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Refine ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
451)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Refine (FStar.Stubs.Reflection.V2.Data.Tv_Refine_b __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Refine_ref __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Refine>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
456)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Const (FStar.Stubs.Reflection.V2.Data.Tv_Const__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Const>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Uvar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Uvar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar (FStar.Stubs.Reflection.V2.Data.Tv_Uvar__0 __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Uvar__1 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Uvar>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
466)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Let (FStar.Stubs.Reflection.V2.Data.Tv_Let_recf __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let_attrs __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let_b __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let_def __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Let_body __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Let>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Match>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Match ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
471)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_Match (FStar.Stubs.Reflection.V2.Data.Tv_Match_scrutinee __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Match_ret __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_Match_brs __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Match>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_AscribedT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_AscribedT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
476)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT (FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_e __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_t __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_tac __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedT_use_eq __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_AscribedT>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_AscribedC>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_AscribedC ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
481)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC (FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_e __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_c __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_tac __@x0)
(FStar.Stubs.Reflection.V2.Data.Tv_AscribedC_use_eq __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_AscribedC>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
486)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Tv_Unknown)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Unknown>


; <start constructor FStar.Stubs.Reflection.V2.Data.Tv_Unsupp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Tv_Unsupp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
488)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Tv_Unsupp)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Tv_Unsupp>


; </end encoding type FStar.Stubs.Reflection.V2.Data.term_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var (Term) Term)
(declare-fun Tm_arrow_586e50dde7953c1be706e9840496df0e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Var>


; <Skipped let uu___is_Tv_Var/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v>

(declare-fun Tm_refine_c4248e8eff973519c395e9ad8b18c7f9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v (Term) Term)

(declare-fun Tm_arrow_f91122af922128f8fea5d0a102532402 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Var__item__v>


; <Skipped let __proj__Tv_Var__item__v/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_BVar>


; <Skipped let uu___is_Tv_BVar/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v>

(declare-fun Tm_refine_473c0367e281690ddeb7ba9d7d22f1f6 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v (Term) Term)

(declare-fun Tm_arrow_e7b3f282f3ee98635cb57b8dc0b64246 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_BVar__item__v>


; <Skipped let __proj__Tv_BVar__item__v/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_FVar>


; <Skipped let uu___is_Tv_FVar/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v>

(declare-fun Tm_refine_d2711b61c4b52079f3c5968c061f9fcf () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v (Term) Term)

(declare-fun Tm_arrow_e4636fcbbca506a6cc0eb4cf3ffa39b9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_FVar__item__v>


; <Skipped let __proj__Tv_FVar__item__v/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_UInst>


; <Skipped let uu___is_Tv_UInst/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v>

(declare-fun Tm_refine_1a52b06ee8dfc536800a89f6ecee4ecd () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v (Term) Term)

(declare-fun Tm_arrow_aa6c12b5b1739a2d437a568586bd8137 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__v>


; <Skipped let __proj__Tv_UInst__item__v/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__us>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__us (Term) Term)

(declare-fun Tm_arrow_6832dcae269a233bf516ce19db22453c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__us@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_UInst__item__us>


; <Skipped let __proj__Tv_UInst__item__us/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_App>


; <Skipped let uu___is_Tv_App/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd>

(declare-fun Tm_refine_ce618e257bb72c7bc0890dfed3cccc9e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd (Term) Term)

(declare-fun Tm_arrow_514d38114f2abdfb4818b53a1fe858c2 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__hd>


; <Skipped let __proj__Tv_App__item__hd/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__a>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__a (Term) Term)

(declare-fun Tm_arrow_95229b5e470d791f8e6b2c0dcfd564ff () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__a@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_App__item__a>


; <Skipped let __proj__Tv_App__item__a/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Abs>


; <Skipped let uu___is_Tv_Abs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv>

(declare-fun Tm_refine_37a793ba5704ebbf15042feb27137572 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv (Term) Term)

(declare-fun Tm_arrow_3e1cb319a0949fb66b6c0ef4f9bb9e63 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__bv>


; <Skipped let __proj__Tv_Abs__item__bv/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__body>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__body (Term) Term)

(declare-fun Tm_arrow_efc9db44b85c7f63191cd9cc33164b8a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__body@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Abs__item__body>


; <Skipped let __proj__Tv_Abs__item__body/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Arrow>


; <Skipped let uu___is_Tv_Arrow/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv>

(declare-fun Tm_refine_8d01559daf290c998e8e5548df92339d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv (Term) Term)

(declare-fun Tm_arrow_6dd57cc298d54241f4446218a6adfb28 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__bv>


; <Skipped let __proj__Tv_Arrow__item__bv/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__c>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__c (Term) Term)

(declare-fun Tm_arrow_c55711f43b48ee6bf71468617e2ee828 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__c@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Arrow__item__c>


; <Skipped let __proj__Tv_Arrow__item__c/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Type>


; <Skipped let uu___is_Tv_Type/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0>

(declare-fun Tm_refine_d1b122fd2b90ff0b3deddd8582e5a32a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0 (Term) Term)

(declare-fun Tm_arrow_e779f5b4e3ee70314cfc29dc4c77379d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Type__item___0>


; <Skipped let __proj__Tv_Type__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Refine>


; <Skipped let uu___is_Tv_Refine/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b>

(declare-fun Tm_refine_c4075b916a3bb3afcd075e57f2a2a3f7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b (Term) Term)

(declare-fun Tm_arrow_22e323ff87b433688435fdf5265102f3 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__b>


; <Skipped let __proj__Tv_Refine__item__b/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__ref>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__ref (Term) Term)

(declare-fun Tm_arrow_b640d62e69bec853ec3029e0a203bdc5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__ref@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Refine__item__ref>


; <Skipped let __proj__Tv_Refine__item__ref/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Const>


; <Skipped let uu___is_Tv_Const/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0>

(declare-fun Tm_refine_33501ba90cf97ecf3695ea84cf87adca () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0 (Term) Term)

(declare-fun Tm_arrow_ade43bfff800c0d08b2f4283ea5f94e9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Const__item___0>


; <Skipped let __proj__Tv_Const__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Uvar>


; <Skipped let uu___is_Tv_Uvar/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0>

(declare-fun Tm_refine_dd537019d2f0e727827f0138fef6addd () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0 (Term) Term)

(declare-fun Tm_arrow_92c6d8845669b38b3ee89ae0697d9c3b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___0>


; <Skipped let __proj__Tv_Uvar__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___1>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___1 (Term) Term)

(declare-fun Tm_arrow_cddbe66872e90d2e1d0fff5ac47d540d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___1@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Uvar__item___1>


; <Skipped let __proj__Tv_Uvar__item___1/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Let>


; <Skipped let uu___is_Tv_Let/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf>

(declare-fun Tm_refine_43c986d2cf42f8731bfb915090e09a0b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf (Term) Term)

(declare-fun Tm_arrow_1efe9f119169f82662464992672d7077 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__recf>


; <Skipped let __proj__Tv_Let__item__recf/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__attrs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__attrs (Term) Term)

(declare-fun Tm_arrow_1d0e3f411007788f6703c1dc4f71a32a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__attrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__attrs>


; <Skipped let __proj__Tv_Let__item__attrs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__b>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__b (Term) Term)

(declare-fun Tm_arrow_2cd9c6fcdf8342ced1c796029c45e866 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__b@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__b>


; <Skipped let __proj__Tv_Let__item__b/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__def>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__def (Term) Term)

(declare-fun Tm_arrow_f2a2b238f1218d5faabebadda141a801 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__def@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__def>


; <Skipped let __proj__Tv_Let__item__def/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__body>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__body (Term) Term)


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__body@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Let__item__body>


; <Skipped let __proj__Tv_Let__item__body/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Match>


; <Skipped let uu___is_Tv_Match/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee>

(declare-fun Tm_refine_2565e86b1cc6542a4afc6f6409d3347b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee (Term) Term)

(declare-fun Tm_arrow_0851bb5074051aaa2e8ab5f23f9f5388 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee>


; <Skipped let __proj__Tv_Match__item__scrutinee/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__ret>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__ret (Term) Term)

(declare-fun Tm_arrow_2103f2e612ee3299f7ee1bbb1e530e6d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__ret@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__ret>


; <Skipped let __proj__Tv_Match__item__ret/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__brs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__brs (Term) Term)

(declare-fun Tm_arrow_68cea64fd93f227efb82c93a99ff9230 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__brs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_Match__item__brs>


; <Skipped let __proj__Tv_Match__item__brs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedT>


; <Skipped let uu___is_Tv_AscribedT/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e>

(declare-fun Tm_refine_dc6354cd01f0cd4240123aff4b38cfaa () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e (Term) Term)

(declare-fun Tm_arrow_598328b4c9ddbcd6164f989330ed0593 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__e>


; <Skipped let __proj__Tv_AscribedT__item__e/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__t>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__t (Term) Term)


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__t@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__t>


; <Skipped let __proj__Tv_AscribedT__item__t/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac (Term) Term)

(declare-fun Tm_arrow_ca50fd2be53ab485613dcbe36c246c6b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac>


; <Skipped let __proj__Tv_AscribedT__item__tac/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq (Term) Term)

(declare-fun Tm_arrow_4cd2ec6cb3f7c5a87b3f76c3726a13e2 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq>


; <Skipped let __proj__Tv_AscribedT__item__use_eq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_AscribedC>


; <Skipped let uu___is_Tv_AscribedC/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e>

(declare-fun Tm_refine_1ef62970670d75775a601f0b31c2dc27 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e (Term) Term)

(declare-fun Tm_arrow_30e384a6d915aa451bbc1515d167a8e8 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__e>


; <Skipped let __proj__Tv_AscribedC__item__e/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__c>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__c (Term) Term)

(declare-fun Tm_arrow_3270cecb58d69f8d02ea82c49a0bde67 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__c@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__c>


; <Skipped let __proj__Tv_AscribedC__item__c/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac (Term) Term)

(declare-fun Tm_arrow_521e7be5a27c4f5e206cae967692af1d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac>


; <Skipped let __proj__Tv_AscribedC__item__tac/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq (Term) Term)

(declare-fun Tm_arrow_bfafb32ffbd2fe486b4a1d3d969532b8 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq>


; <Skipped let __proj__Tv_AscribedC__item__use_eq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unknown>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unknown (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unknown@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unknown>


; <Skipped let uu___is_Tv_Unknown/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unsupp>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unsupp (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unsupp@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Tv_Unsupp>


; <Skipped let uu___is_Tv_Unsupp/>


; <Start encoding let notAscription>

(declare-fun FStar.Stubs.Reflection.V2.Data.notAscription (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.notAscription@tok () Term)

; </end encoding let notAscription>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.comp_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.comp_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Total (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Total_ret (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Total
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_GTotal (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_GTotal_ret (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_GTotal
(declare-fun FStar.Stubs.Reflection.V2.Data.C_GTotal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Lemma
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Lemma@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_eff_name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_result (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_eff_args (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff_decrs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.C_Eff
(declare-fun FStar.Stubs.Reflection.V2.Data.C_Eff@tok () Term)
(declare-fun Tm_arrow_3baaad7ff6dbfca53693751a544f3045 () Term)

(declare-fun Tm_arrow_638ea771c3ef1936d33bd493c1b6c96a () Term)
(declare-fun Tm_arrow_3ae8c3d5df5ffffb108540a6b9073255 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.comp_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.comp_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
657)
(= __@x0
FStar.Stubs.Reflection.V2.Data.comp_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.comp_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
663)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Total (FStar.Stubs.Reflection.V2.Data.C_Total_ret __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Total>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_GTotal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_GTotal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
668)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_GTotal (FStar.Stubs.Reflection.V2.Data.C_GTotal_ret __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_GTotal>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Lemma>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Lemma ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
673)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Lemma (FStar.Stubs.Reflection.V2.Data.C_Lemma__0 __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Lemma__1 __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Lemma__2 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Lemma>


; <start constructor FStar.Stubs.Reflection.V2.Data.C_Eff>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.C_Eff ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
678)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.C_Eff (FStar.Stubs.Reflection.V2.Data.C_Eff_us __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Eff_eff_name __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Eff_result __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Eff_eff_args __@x0)
(FStar.Stubs.Reflection.V2.Data.C_Eff_decrs __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.C_Eff>


; </end encoding type FStar.Stubs.Reflection.V2.Data.comp_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Total>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Total (Term) Term)
(declare-fun Tm_arrow_2a9415459fcb962ad895e70e3dd954b4 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Total@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Total>


; <Skipped let uu___is_C_Total/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret>

(declare-fun Tm_refine_74ef9f3102c78539bcc06df8913ee8b1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret (Term) Term)

(declare-fun Tm_arrow_2d5d90f1e75989aa433b5d452bfc3464 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Total__item__ret>


; <Skipped let __proj__C_Total__item__ret/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_GTotal>


; <Skipped let uu___is_C_GTotal/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret>

(declare-fun Tm_refine_f55a5511b0c7b341ac4e0a29f002e4aa () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret (Term) Term)

(declare-fun Tm_arrow_a5d90481aa6a6e28c1bc26051c0efec7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_GTotal__item__ret>


; <Skipped let __proj__C_GTotal__item__ret/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Lemma>


; <Skipped let uu___is_C_Lemma/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0>

(declare-fun Tm_refine_1bc38916a900e5bdd4fb925f184ebe66 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0 (Term) Term)

(declare-fun Tm_arrow_275cdfd15aa9ca9846844ea68ddac594 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___0>


; <Skipped let __proj__C_Lemma__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___1>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___1 (Term) Term)


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___1@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___1>


; <Skipped let __proj__C_Lemma__item___1/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___2>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___2 (Term) Term)


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___2@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Lemma__item___2>


; <Skipped let __proj__C_Lemma__item___2/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_C_Eff>


; <Skipped let uu___is_C_Eff/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us>

(declare-fun Tm_refine_dd0fe4daa6c85dc6cf40f0518ba6e942 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us (Term) Term)

(declare-fun Tm_arrow_19cf433396c9c00d0dd1528935f4c240 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__us>


; <Skipped let __proj__C_Eff__item__us/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_name>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_name (Term) Term)

(declare-fun Tm_arrow_08b5ca17136d7b60f70b513fac9ff590 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_name@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_name>


; <Skipped let __proj__C_Eff__item__eff_name/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__result>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__result (Term) Term)

(declare-fun Tm_arrow_6f04408325289c53b680d6386322c9e5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__result@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__result>


; <Skipped let __proj__C_Eff__item__result/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_args>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_args (Term) Term)

(declare-fun Tm_arrow_6539c5f6748142dcd5cec41c432c8691 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_args@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__eff_args>


; <Skipped let __proj__C_Eff__item__eff_args/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__decrs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__decrs (Term) Term)

(declare-fun Tm_arrow_0b2d076acce9a3b38077b6212097a740 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__decrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__C_Eff__item__decrs>


; <Skipped let __proj__C_Eff__item__decrs/>


; <Start encoding let ctor>

(declare-fun FStar.Stubs.Reflection.V2.Data.ctor () Term)

; </end encoding let ctor>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.lb_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.lb_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_fv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_def (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Mklb_view
(declare-fun FStar.Stubs.Reflection.V2.Data.Mklb_view@tok () Term)
(declare-fun Tm_arrow_c502351c60efd8719ca5b29fc51cfa35 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.lb_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.lb_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
730)
(= __@x0
FStar.Stubs.Reflection.V2.Data.lb_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.lb_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Mklb_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Mklb_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
736)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Mklb_view (FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_fv __@x0)
(FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_us __@x0)
(FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_typ __@x0)
(FStar.Stubs.Reflection.V2.Data.Mklb_view_lb_def __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Mklb_view>


; </end encoding type FStar.Stubs.Reflection.V2.Data.lb_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv (Term) Term)
(declare-fun Tm_arrow_bc18ca13b9b77908c319213977256848 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv>


; <Skipped let __proj__Mklb_view__item__lb_fv/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_us>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_us (Term) Term)
(declare-fun Tm_arrow_46a0677a6bba0a0eac977dc0fd4c4fdf () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_us@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_us>


; <Skipped let __proj__Mklb_view__item__lb_us/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ (Term) Term)
(declare-fun Tm_arrow_1115eb4d52f0dc1c925644add43b1f39 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ>


; <Skipped let __proj__Mklb_view__item__lb_typ/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_def>

(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_def (Term) Term)
(declare-fun Tm_arrow_dbe17bfae175029f58ec29d5c55b0229 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_def@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Mklb_view__item__lb_def>


; <Skipped let __proj__Mklb_view__item__lb_def/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.sigelt_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.sigelt_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Let (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Let_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Let_lbs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Sg_Let
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_params (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive_cts (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Sg_Inductive
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Inductive@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val_typ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Sg_Val
(declare-fun FStar.Stubs.Reflection.V2.Data.Sg_Val@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Unk
(declare-fun FStar.Stubs.Reflection.V2.Data.Unk@tok () Term)
(declare-fun Tm_arrow_4fe53c848b8381ebd79e492ddf765ff8 () Term)
(declare-fun Tm_arrow_dfc12479f5d8f8c60490136810ba7cdc () Term)
(declare-fun Tm_arrow_aeca26ffef4ab5dd9029d909c794c539 () Term)

; <start constructor FStar.Stubs.Reflection.V2.Data.sigelt_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.sigelt_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
748)
(= __@x0
FStar.Stubs.Reflection.V2.Data.sigelt_view)))

; </end constructor FStar.Stubs.Reflection.V2.Data.sigelt_view>


; <start constructor FStar.Stubs.Reflection.V2.Data.Sg_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Sg_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
754)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Sg_Let (FStar.Stubs.Reflection.V2.Data.Sg_Let_r __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Let_lbs __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Sg_Let>


; <start constructor FStar.Stubs.Reflection.V2.Data.Sg_Inductive>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Sg_Inductive ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
759)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive (FStar.Stubs.Reflection.V2.Data.Sg_Inductive_nm __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive_univs __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive_params __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive_typ __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Inductive_cts __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Sg_Inductive>


; <start constructor FStar.Stubs.Reflection.V2.Data.Sg_Val>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Sg_Val ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
764)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Sg_Val (FStar.Stubs.Reflection.V2.Data.Sg_Val_nm __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Val_univs __@x0)
(FStar.Stubs.Reflection.V2.Data.Sg_Val_typ __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Sg_Val>


; <start constructor FStar.Stubs.Reflection.V2.Data.Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
769)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Unk)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Unk>


; </end encoding type FStar.Stubs.Reflection.V2.Data.sigelt_view>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Let>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Let (Term) Term)
(declare-fun Tm_arrow_2b2202c9b63d769a3bd12e4192aca2f1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Let@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Let>


; <Skipped let uu___is_Sg_Let/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__r>

(declare-fun Tm_refine_1b867ceb772281ec4266019ff8d6d9b1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__r (Term) Term)

(declare-fun Tm_arrow_a930941effe801f71b519d3ee5bd478f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__r@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__r>


; <Skipped let __proj__Sg_Let__item__r/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__lbs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__lbs (Term) Term)

(declare-fun Tm_arrow_8132b1ca2ea76f3915ad2e6232303b3a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__lbs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Let__item__lbs>


; <Skipped let __proj__Sg_Let__item__lbs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Inductive>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Inductive (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Inductive@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Inductive>


; <Skipped let uu___is_Sg_Inductive/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__nm>

(declare-fun Tm_refine_df3cc4fabb72f574f0a5381358497b2d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__nm (Term) Term)

(declare-fun Tm_arrow_32cbbc47b662a17bf42ec409569930c9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__nm@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__nm>


; <Skipped let __proj__Sg_Inductive__item__nm/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__univs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__univs (Term) Term)

(declare-fun Tm_arrow_31f4f3a2f58b041a734831504dc9afe7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__univs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__univs>


; <Skipped let __proj__Sg_Inductive__item__univs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__params>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__params (Term) Term)

(declare-fun Tm_arrow_2dd5b4ec86da71e9d40b7e0c96736b4e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__params@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__params>


; <Skipped let __proj__Sg_Inductive__item__params/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__typ>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__typ (Term) Term)

(declare-fun Tm_arrow_ec424eee7e45c860894d502125b5655c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__typ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__typ>


; <Skipped let __proj__Sg_Inductive__item__typ/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__cts>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__cts (Term) Term)

(declare-fun Tm_arrow_9a56ff07ce45d447bc10ef813e2634ed () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__cts@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Inductive__item__cts>


; <Skipped let __proj__Sg_Inductive__item__cts/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Val>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Val (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Val@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Sg_Val>


; <Skipped let uu___is_Sg_Val/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__nm>

(declare-fun Tm_refine_91a9125ccb843bed6e9b9be7bc535b70 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__nm (Term) Term)

(declare-fun Tm_arrow_6af6b0a17cd4e21fc2f5c08ffdf5592d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__nm@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__nm>


; <Skipped let __proj__Sg_Val__item__nm/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__univs>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__univs (Term) Term)

(declare-fun Tm_arrow_6b403f067c7f0b64f3019e843027465d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__univs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__univs>


; <Skipped let __proj__Sg_Val__item__univs/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__typ>


(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__typ (Term) Term)

(declare-fun Tm_arrow_7d4a13f55eb804a2db5aecaf09b0c3d7 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__typ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Sg_Val__item__typ>


; <Skipped let __proj__Sg_Val__item__typ/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unk>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unk (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unk@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unk>


; <Skipped let uu___is_Unk/>


; <Start encoding type FStar.Stubs.Reflection.V2.Data.qualifier>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.qualifier () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Assumption () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Assumption
(declare-fun FStar.Stubs.Reflection.V2.Data.Assumption@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.InternalAssumption () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.InternalAssumption
(declare-fun FStar.Stubs.Reflection.V2.Data.InternalAssumption@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.New () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.New
(declare-fun FStar.Stubs.Reflection.V2.Data.New@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Private () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Private
(declare-fun FStar.Stubs.Reflection.V2.Data.Private@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen
(declare-fun FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Visible_default () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Visible_default
(declare-fun FStar.Stubs.Reflection.V2.Data.Visible_default@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Irreducible () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Irreducible
(declare-fun FStar.Stubs.Reflection.V2.Data.Irreducible@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Inline_for_extraction () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Inline_for_extraction
(declare-fun FStar.Stubs.Reflection.V2.Data.Inline_for_extraction@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.NoExtract () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.NoExtract
(declare-fun FStar.Stubs.Reflection.V2.Data.NoExtract@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Noeq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Noeq
(declare-fun FStar.Stubs.Reflection.V2.Data.Noeq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Unopteq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Unopteq
(declare-fun FStar.Stubs.Reflection.V2.Data.Unopteq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.TotalEffect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.TotalEffect
(declare-fun FStar.Stubs.Reflection.V2.Data.TotalEffect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Logic () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Logic
(declare-fun FStar.Stubs.Reflection.V2.Data.Logic@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Reifiable () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Reifiable
(declare-fun FStar.Stubs.Reflection.V2.Data.Reifiable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Reflectable (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Reflectable__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Reflectable
(declare-fun FStar.Stubs.Reflection.V2.Data.Reflectable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Discriminator (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Discriminator__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Discriminator
(declare-fun FStar.Stubs.Reflection.V2.Data.Discriminator@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Projector (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Projector__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Projector@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordType (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordType__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.RecordType
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordType@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordConstructor (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordConstructor__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.RecordConstructor
(declare-fun FStar.Stubs.Reflection.V2.Data.RecordConstructor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Action (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Reflection.V2.Data.Action__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Action
(declare-fun FStar.Stubs.Reflection.V2.Data.Action@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.ExceptionConstructor () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.ExceptionConstructor
(declare-fun FStar.Stubs.Reflection.V2.Data.ExceptionConstructor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.HasMaskedEffect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.HasMaskedEffect
(declare-fun FStar.Stubs.Reflection.V2.Data.HasMaskedEffect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.Effect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.Effect
(declare-fun FStar.Stubs.Reflection.V2.Data.Effect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Reflection.V2.Data.OnlyName () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.Reflection.V2.Data.OnlyName
(declare-fun FStar.Stubs.Reflection.V2.Data.OnlyName@tok () Term)
(declare-fun Tm_arrow_1082414ab0946354a051120dec66bd44 () Term)

(declare-fun Tm_arrow_d6a5423973f8251c2d38857b68c51c07 () Term)
(declare-fun Tm_arrow_74443d1ee8810189dfae88379494bc4b () Term)



; <start constructor FStar.Stubs.Reflection.V2.Data.qualifier>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.qualifier ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
818)
(= __@x0
FStar.Stubs.Reflection.V2.Data.qualifier)))

; </end constructor FStar.Stubs.Reflection.V2.Data.qualifier>


; <start constructor FStar.Stubs.Reflection.V2.Data.Assumption>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Assumption ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
824)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Assumption)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Assumption>


; <start constructor FStar.Stubs.Reflection.V2.Data.InternalAssumption>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.InternalAssumption ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
826)
(= __@x0
FStar.Stubs.Reflection.V2.Data.InternalAssumption)))

; </end constructor FStar.Stubs.Reflection.V2.Data.InternalAssumption>


; <start constructor FStar.Stubs.Reflection.V2.Data.New>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.New ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
828)
(= __@x0
FStar.Stubs.Reflection.V2.Data.New)))

; </end constructor FStar.Stubs.Reflection.V2.Data.New>


; <start constructor FStar.Stubs.Reflection.V2.Data.Private>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Private ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
830)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Private)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Private>


; <start constructor FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
832)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Unfold_for_unification_and_vcgen>


; <start constructor FStar.Stubs.Reflection.V2.Data.Visible_default>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Visible_default ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
834)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Visible_default)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Visible_default>


; <start constructor FStar.Stubs.Reflection.V2.Data.Irreducible>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Irreducible ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
836)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Irreducible)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Irreducible>


; <start constructor FStar.Stubs.Reflection.V2.Data.Inline_for_extraction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Inline_for_extraction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
838)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Inline_for_extraction)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Inline_for_extraction>


; <start constructor FStar.Stubs.Reflection.V2.Data.NoExtract>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.NoExtract ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
840)
(= __@x0
FStar.Stubs.Reflection.V2.Data.NoExtract)))

; </end constructor FStar.Stubs.Reflection.V2.Data.NoExtract>


; <start constructor FStar.Stubs.Reflection.V2.Data.Noeq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Noeq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
842)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Noeq)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Noeq>


; <start constructor FStar.Stubs.Reflection.V2.Data.Unopteq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Unopteq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
844)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Unopteq)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Unopteq>


; <start constructor FStar.Stubs.Reflection.V2.Data.TotalEffect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.TotalEffect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
846)
(= __@x0
FStar.Stubs.Reflection.V2.Data.TotalEffect)))

; </end constructor FStar.Stubs.Reflection.V2.Data.TotalEffect>


; <start constructor FStar.Stubs.Reflection.V2.Data.Logic>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Logic ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
848)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Logic)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Logic>


; <start constructor FStar.Stubs.Reflection.V2.Data.Reifiable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Reifiable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
850)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Reifiable)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Reifiable>


; <start constructor FStar.Stubs.Reflection.V2.Data.Reflectable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Reflectable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
852)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Reflectable (FStar.Stubs.Reflection.V2.Data.Reflectable__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Reflectable>


; <start constructor FStar.Stubs.Reflection.V2.Data.Discriminator>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Discriminator ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
857)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Discriminator (FStar.Stubs.Reflection.V2.Data.Discriminator__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Discriminator>


; <start constructor FStar.Stubs.Reflection.V2.Data.Projector>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Projector ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
862)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Projector (FStar.Stubs.Reflection.V2.Data.Projector__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Projector>


; <start constructor FStar.Stubs.Reflection.V2.Data.RecordType>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.RecordType ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
867)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.RecordType (FStar.Stubs.Reflection.V2.Data.RecordType__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.RecordType>


; <start constructor FStar.Stubs.Reflection.V2.Data.RecordConstructor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.RecordConstructor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
872)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.RecordConstructor (FStar.Stubs.Reflection.V2.Data.RecordConstructor__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.RecordConstructor>


; <start constructor FStar.Stubs.Reflection.V2.Data.Action>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Action ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
877)
(= __@x0
(FStar.Stubs.Reflection.V2.Data.Action (FStar.Stubs.Reflection.V2.Data.Action__0 __@x0)))))

; </end constructor FStar.Stubs.Reflection.V2.Data.Action>


; <start constructor FStar.Stubs.Reflection.V2.Data.ExceptionConstructor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.ExceptionConstructor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
882)
(= __@x0
FStar.Stubs.Reflection.V2.Data.ExceptionConstructor)))

; </end constructor FStar.Stubs.Reflection.V2.Data.ExceptionConstructor>


; <start constructor FStar.Stubs.Reflection.V2.Data.HasMaskedEffect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.HasMaskedEffect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
884)
(= __@x0
FStar.Stubs.Reflection.V2.Data.HasMaskedEffect)))

; </end constructor FStar.Stubs.Reflection.V2.Data.HasMaskedEffect>


; <start constructor FStar.Stubs.Reflection.V2.Data.Effect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.Effect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
886)
(= __@x0
FStar.Stubs.Reflection.V2.Data.Effect)))

; </end constructor FStar.Stubs.Reflection.V2.Data.Effect>


; <start constructor FStar.Stubs.Reflection.V2.Data.OnlyName>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Reflection.V2.Data.OnlyName ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
888)
(= __@x0
FStar.Stubs.Reflection.V2.Data.OnlyName)))

; </end constructor FStar.Stubs.Reflection.V2.Data.OnlyName>


; </end encoding type FStar.Stubs.Reflection.V2.Data.qualifier>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Assumption>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Assumption (Term) Term)
(declare-fun Tm_arrow_38e97f6f9c4ed28e9e7b2f44588fcc35 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Assumption@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Assumption>


; <Skipped let uu___is_Assumption/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_InternalAssumption>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_InternalAssumption (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_InternalAssumption@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_InternalAssumption>


; <Skipped let uu___is_InternalAssumption/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_New>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_New (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_New@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_New>


; <Skipped let uu___is_New/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Private>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Private (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Private@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Private>


; <Skipped let uu___is_Private/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen>


; <Skipped let uu___is_Unfold_for_unification_and_vcgen/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Visible_default>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Visible_default (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Visible_default@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Visible_default>


; <Skipped let uu___is_Visible_default/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Irreducible>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Irreducible (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Irreducible@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Irreducible>


; <Skipped let uu___is_Irreducible/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Inline_for_extraction>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Inline_for_extraction (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Inline_for_extraction@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Inline_for_extraction>


; <Skipped let uu___is_Inline_for_extraction/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_NoExtract>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_NoExtract (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_NoExtract@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_NoExtract>


; <Skipped let uu___is_NoExtract/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Noeq>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Noeq (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Noeq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Noeq>


; <Skipped let uu___is_Noeq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unopteq>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unopteq (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Unopteq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Unopteq>


; <Skipped let uu___is_Unopteq/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_TotalEffect>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_TotalEffect (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_TotalEffect@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_TotalEffect>


; <Skipped let uu___is_TotalEffect/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Logic>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Logic (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Logic@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Logic>


; <Skipped let uu___is_Logic/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Reifiable>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Reifiable (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Reifiable@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Reifiable>


; <Skipped let uu___is_Reifiable/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Reflectable>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Reflectable (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Reflectable@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Reflectable>


; <Skipped let uu___is_Reflectable/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Reflectable__item___0>

(declare-fun Tm_refine_075243a51708ebd772d3d2e2eaf14013 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Reflectable__item___0 (Term) Term)

(declare-fun Tm_arrow_62c5175067d1159e9bb02ec8cdf74b0d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Reflectable__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Reflectable__item___0>


; <Skipped let __proj__Reflectable__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Discriminator>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Discriminator (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Discriminator@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Discriminator>


; <Skipped let uu___is_Discriminator/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Discriminator__item___0>

(declare-fun Tm_refine_5ef75a4bf40ee1588677374b3b60e2f4 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Discriminator__item___0 (Term) Term)

(declare-fun Tm_arrow_95504ddb98329051558efcc26a3fc289 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Discriminator__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Discriminator__item___0>


; <Skipped let __proj__Discriminator__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Projector>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Projector (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Projector@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Projector>


; <Skipped let uu___is_Projector/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Projector__item___0>

(declare-fun Tm_refine_9a97090f045049b2e1368b937b56bb62 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Projector__item___0 (Term) Term)

(declare-fun Tm_arrow_16712d8a16e94c0d97d3d4b76ad1b84a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Projector__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Projector__item___0>


; <Skipped let __proj__Projector__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_RecordType>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_RecordType (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_RecordType@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_RecordType>


; <Skipped let uu___is_RecordType/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__RecordType__item___0>

(declare-fun Tm_refine_d124b17fb34b3abd56d52517393b5448 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__RecordType__item___0 (Term) Term)

(declare-fun Tm_arrow_6322f3ba3fb547a521c07a45ca7d9c5e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__RecordType__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__RecordType__item___0>


; <Skipped let __proj__RecordType__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_RecordConstructor>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_RecordConstructor (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_RecordConstructor@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_RecordConstructor>


; <Skipped let uu___is_RecordConstructor/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__RecordConstructor__item___0>

(declare-fun Tm_refine_1c0bafc599d6f39cd41d308647aaa42c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__RecordConstructor__item___0 (Term) Term)

(declare-fun Tm_arrow_76756032df1de3823233aa70194e369d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__RecordConstructor__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__RecordConstructor__item___0>


; <Skipped let __proj__RecordConstructor__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Action>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Action (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Action@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Action>


; <Skipped let uu___is_Action/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.__proj__Action__item___0>

(declare-fun Tm_refine_cc2340ef5eb651c7528c5134e77b39ce () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Action__item___0 (Term) Term)

(declare-fun Tm_arrow_6da41690eff8dfcf04167992b03a8cca () Term)
(declare-fun FStar.Stubs.Reflection.V2.Data.__proj__Action__item___0@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.__proj__Action__item___0>


; <Skipped let __proj__Action__item___0/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_ExceptionConstructor>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_ExceptionConstructor (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_ExceptionConstructor@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_ExceptionConstructor>


; <Skipped let uu___is_ExceptionConstructor/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_HasMaskedEffect>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_HasMaskedEffect (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_HasMaskedEffect@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_HasMaskedEffect>


; <Skipped let uu___is_HasMaskedEffect/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Effect>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Effect (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_Effect@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_Effect>


; <Skipped let uu___is_Effect/>


; <Start encoding val FStar.Stubs.Reflection.V2.Data.uu___is_OnlyName>

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_OnlyName (Term) Term)

(declare-fun FStar.Stubs.Reflection.V2.Data.uu___is_OnlyName@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Data.uu___is_OnlyName>


; <Skipped let uu___is_OnlyName/>


; <Start encoding let var>

(declare-fun FStar.Stubs.Reflection.V2.Data.var (Dummy_sort) Term)

; </end encoding let var>


; End Externals for interface FStar.Stubs.Reflection.V2.Data


; Externals for interface FStar.Stubs.VConfig


; <Start encoding type FStar.Stubs.VConfig.vconfig>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.VConfig.vconfig () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.VConfig.Mkvconfig (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_initial_fuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_max_fuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_initial_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_max_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_detail_errors (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_detail_hint_replay (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_no_smt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_quake_lo (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_quake_hi (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_quake_keep (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_retry (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_elim_box (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_nl_arith_repr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_l_arith_repr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_valid_intro (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_smtencoding_valid_elim (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_tcnorm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_no_plugins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_no_tactics (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3cliopt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3smtopt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3refresh (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3rlimit (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3rlimit_factor (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3seed (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_z3version (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_trivial_pre_for_unannotated_effectful_fns (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.VConfig.Mkvconfig_reuse_hint_for (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Stubs.VConfig.Mkvconfig
(declare-fun FStar.Stubs.VConfig.Mkvconfig@tok () Term)
(declare-fun Tm_arrow_6fee5c5ce2c60e9977ea829efd6b53dd () Term)

; <start constructor FStar.Stubs.VConfig.vconfig>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.VConfig.vconfig ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.VConfig.vconfig)))

; </end constructor FStar.Stubs.VConfig.vconfig>


; <start constructor FStar.Stubs.VConfig.Mkvconfig>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.VConfig.Mkvconfig ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Stubs.VConfig.Mkvconfig (FStar.Stubs.VConfig.Mkvconfig_initial_fuel __@x0)
(FStar.Stubs.VConfig.Mkvconfig_max_fuel __@x0)
(FStar.Stubs.VConfig.Mkvconfig_initial_ifuel __@x0)
(FStar.Stubs.VConfig.Mkvconfig_max_ifuel __@x0)
(FStar.Stubs.VConfig.Mkvconfig_detail_errors __@x0)
(FStar.Stubs.VConfig.Mkvconfig_detail_hint_replay __@x0)
(FStar.Stubs.VConfig.Mkvconfig_no_smt __@x0)
(FStar.Stubs.VConfig.Mkvconfig_quake_lo __@x0)
(FStar.Stubs.VConfig.Mkvconfig_quake_hi __@x0)
(FStar.Stubs.VConfig.Mkvconfig_quake_keep __@x0)
(FStar.Stubs.VConfig.Mkvconfig_retry __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_elim_box __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_nl_arith_repr __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_l_arith_repr __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_valid_intro __@x0)
(FStar.Stubs.VConfig.Mkvconfig_smtencoding_valid_elim __@x0)
(FStar.Stubs.VConfig.Mkvconfig_tcnorm __@x0)
(FStar.Stubs.VConfig.Mkvconfig_no_plugins __@x0)
(FStar.Stubs.VConfig.Mkvconfig_no_tactics __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3cliopt __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3smtopt __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3refresh __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3rlimit __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3rlimit_factor __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3seed __@x0)
(FStar.Stubs.VConfig.Mkvconfig_z3version __@x0)
(FStar.Stubs.VConfig.Mkvconfig_trivial_pre_for_unannotated_effectful_fns __@x0)
(FStar.Stubs.VConfig.Mkvconfig_reuse_hint_for __@x0)))))

; </end constructor FStar.Stubs.VConfig.Mkvconfig>


; </end encoding type FStar.Stubs.VConfig.vconfig>


; <Start encoding assume FStar.Stubs.VConfig.vconfig__uu___haseq>


; </end encoding assume FStar.Stubs.VConfig.vconfig__uu___haseq>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_fuel>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_fuel (Term) Term)
(declare-fun Tm_arrow_84d0fca63763979babc70a9f05255e1b () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_fuel@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_fuel>


; <Skipped let __proj__Mkvconfig__item__initial_fuel/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_fuel>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_fuel (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_fuel@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_fuel>


; <Skipped let __proj__Mkvconfig__item__max_fuel/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_ifuel>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_ifuel (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_ifuel@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__initial_ifuel>


; <Skipped let __proj__Mkvconfig__item__initial_ifuel/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_ifuel>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_ifuel (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_ifuel@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__max_ifuel>


; <Skipped let __proj__Mkvconfig__item__max_ifuel/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_errors>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_errors (Term) Term)
(declare-fun Tm_arrow_b74e2fe0711e5bbcb71c4148e67c98b8 () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_errors@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_errors>


; <Skipped let __proj__Mkvconfig__item__detail_errors/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_hint_replay>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_hint_replay (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_hint_replay@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__detail_hint_replay>


; <Skipped let __proj__Mkvconfig__item__detail_hint_replay/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_smt>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_smt (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_smt@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_smt>


; <Skipped let __proj__Mkvconfig__item__no_smt/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_lo>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_lo (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_lo@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_lo>


; <Skipped let __proj__Mkvconfig__item__quake_lo/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_hi>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_hi (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_hi@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_hi>


; <Skipped let __proj__Mkvconfig__item__quake_hi/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_keep>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_keep (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_keep@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__quake_keep>


; <Skipped let __proj__Mkvconfig__item__quake_keep/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__retry>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__retry (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__retry@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__retry>


; <Skipped let __proj__Mkvconfig__item__retry/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box>


; <Skipped let __proj__Mkvconfig__item__smtencoding_elim_box/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr (Term) Term)
(declare-fun Tm_arrow_e57b2f0d8b3b188a2dbb1683213804ea () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr>


; <Skipped let __proj__Mkvconfig__item__smtencoding_nl_arith_repr/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr>


; <Skipped let __proj__Mkvconfig__item__smtencoding_l_arith_repr/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro>


; <Skipped let __proj__Mkvconfig__item__smtencoding_valid_intro/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim>


; <Skipped let __proj__Mkvconfig__item__smtencoding_valid_elim/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__tcnorm>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__tcnorm (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__tcnorm@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__tcnorm>


; <Skipped let __proj__Mkvconfig__item__tcnorm/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_plugins>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_plugins (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_plugins@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_plugins>


; <Skipped let __proj__Mkvconfig__item__no_plugins/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_tactics>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_tactics (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_tactics@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__no_tactics>


; <Skipped let __proj__Mkvconfig__item__no_tactics/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3cliopt>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3cliopt (Term) Term)
(declare-fun Tm_arrow_d840302211225e3d977749e995873bb0 () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3cliopt@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3cliopt>


; <Skipped let __proj__Mkvconfig__item__z3cliopt/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3smtopt>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3smtopt (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3smtopt@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3smtopt>


; <Skipped let __proj__Mkvconfig__item__z3smtopt/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3refresh>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3refresh (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3refresh@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3refresh>


; <Skipped let __proj__Mkvconfig__item__z3refresh/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit>


; <Skipped let __proj__Mkvconfig__item__z3rlimit/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit_factor>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit_factor (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit_factor@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3rlimit_factor>


; <Skipped let __proj__Mkvconfig__item__z3rlimit_factor/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3seed>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3seed (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3seed@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3seed>


; <Skipped let __proj__Mkvconfig__item__z3seed/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3version>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3version (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3version@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__z3version>


; <Skipped let __proj__Mkvconfig__item__z3version/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns (Term) Term)

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns>


; <Skipped let __proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns/>


; <Start encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__reuse_hint_for>

(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__reuse_hint_for (Term) Term)
(declare-fun Tm_arrow_2615d58522b2f0895725cb6e1c0af365 () Term)
(declare-fun FStar.Stubs.VConfig.__proj__Mkvconfig__item__reuse_hint_for@tok () Term)

; </end encoding val FStar.Stubs.VConfig.__proj__Mkvconfig__item__reuse_hint_for>


; <Skipped let __proj__Mkvconfig__item__reuse_hint_for/>


; <Start encoding let check_with>

(declare-fun FStar.Stubs.VConfig.check_with (Term) Term)
(declare-fun Tm_arrow_2552937f3bf7bd107159201b26fc8d51 () Term)
(declare-fun FStar.Stubs.VConfig.check_with@tok () Term)

; </end encoding let check_with>


; End Externals for interface FStar.Stubs.VConfig


; Externals for module FStar.Order


; <Start encoding type FStar.Order.order>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.order () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Lt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Order.Lt
(declare-fun FStar.Order.Lt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Eq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Order.Eq
(declare-fun FStar.Order.Eq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Gt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Order.Gt
(declare-fun FStar.Order.Gt@tok () Term)

; <start constructor FStar.Order.order>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.order ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Order.order)))

; </end constructor FStar.Order.order>


; <start constructor FStar.Order.Lt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Lt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
FStar.Order.Lt)))

; </end constructor FStar.Order.Lt>


; <start constructor FStar.Order.Eq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Eq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Order.Eq)))

; </end constructor FStar.Order.Eq>


; <start constructor FStar.Order.Gt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Gt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
FStar.Order.Gt)))

; </end constructor FStar.Order.Gt>


; </end encoding type FStar.Order.order>


; <Start encoding assume FStar.Order.order__uu___haseq>


; </end encoding assume FStar.Order.order__uu___haseq>


; <Start encoding val FStar.Order.uu___is_Lt>

(declare-fun FStar.Order.uu___is_Lt (Term) Term)
(declare-fun Tm_arrow_f4733f9ca94c256fc110aab69c684315 () Term)
(declare-fun FStar.Order.uu___is_Lt@tok () Term)

; </end encoding val FStar.Order.uu___is_Lt>


; <Skipped let uu___is_Lt/>


; <Start encoding val FStar.Order.uu___is_Eq>

(declare-fun FStar.Order.uu___is_Eq (Term) Term)

(declare-fun FStar.Order.uu___is_Eq@tok () Term)

; </end encoding val FStar.Order.uu___is_Eq>


; <Skipped let uu___is_Eq/>


; <Start encoding val FStar.Order.uu___is_Gt>

(declare-fun FStar.Order.uu___is_Gt (Term) Term)

(declare-fun FStar.Order.uu___is_Gt@tok () Term)

; </end encoding val FStar.Order.uu___is_Gt>


; <Skipped let uu___is_Gt/>


; <Skipped val FStar.Order.ge/>


; <Start encoding let ge>

(declare-fun FStar.Order.ge (Term) Term)

(declare-fun FStar.Order.ge@tok () Term)

; </end encoding let ge>


; <Skipped val FStar.Order.le/>


; <Start encoding let le>

(declare-fun FStar.Order.le (Term) Term)

(declare-fun FStar.Order.le@tok () Term)

; </end encoding let le>


; <Skipped val FStar.Order.ne/>


; <Start encoding let ne>

(declare-fun FStar.Order.ne (Term) Term)

(declare-fun FStar.Order.ne@tok () Term)

; </end encoding let ne>


; <Skipped val FStar.Order.gt/>


; <Start encoding let gt>

(declare-fun FStar.Order.gt (Term) Term)

(declare-fun FStar.Order.gt@tok () Term)

; </end encoding let gt>


; <Skipped val FStar.Order.lt/>


; <Start encoding let lt>

(declare-fun FStar.Order.lt (Term) Term)

(declare-fun FStar.Order.lt@tok () Term)

; </end encoding let lt>


; <Skipped val FStar.Order.eq/>


; <Start encoding let eq>

(declare-fun FStar.Order.eq (Term) Term)

(declare-fun FStar.Order.eq@tok () Term)

; </end encoding let eq>


; <Skipped val FStar.Order.lex/>


; <Start encoding let lex>

(declare-fun Tm_arrow_d033f7df6f155778bf181d0a4bdfb5f0 () Term)
(declare-fun FStar.Order.lex (Term Term) Term)

(declare-fun Tm_arrow_231731d350f71bf65fc5e4ecede26541 () Term)
(declare-fun FStar.Order.lex@tok () Term)


; </end encoding let lex>


; <Skipped val FStar.Order.order_from_int/>


; <Start encoding let order_from_int>

(declare-fun FStar.Order.order_from_int (Term) Term)
(declare-fun Tm_arrow_31eae5dcff218f899aa0b20c8d50d0f2 () Term)
(declare-fun FStar.Order.order_from_int@tok () Term)

; </end encoding let order_from_int>


; <Skipped val FStar.Order.int_of_order/>


; <Start encoding let int_of_order>

(declare-fun FStar.Order.int_of_order (Term) Term)
(declare-fun Tm_arrow_10db853014bf42255ab4fb43c484cc2f () Term)
(declare-fun FStar.Order.int_of_order@tok () Term)

; </end encoding let int_of_order>


; <Skipped val FStar.Order.compare_int/>


; <Start encoding let compare_int>

(declare-fun FStar.Order.compare_int (Term Term) Term)
(declare-fun Tm_arrow_6dc5617877ea21824a3786c54945e754 () Term)
(declare-fun FStar.Order.compare_int@tok () Term)

; </end encoding let compare_int>


; <Start encoding let rec compare_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Order.compare_list.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Order.compare_list.fuel_instrumented_token () Term)
(declare-fun FStar.Order.compare_list (Term Term Term Term) Term)
(declare-fun FStar.Order.compare_list@tok () Term)
(declare-fun Tm_refine_c4ca0045c23e9d6917d9058bb1a95736 (Term Term) Term)

(declare-fun Tm_arrow_e58951d4c03bef7faba3cf2bbc2bc6c9 (Term Term Term) Term)

(declare-fun Tm_abs_119e643a5c05187801d1e234c8b74e97 (Fuel Term Term Term) Term)






(declare-fun Tm_arrow_0cf8a3f58c3073b99b5547c8ff90ce24 () Term)

; </end encoding let rec compare_list>


; <Skipped val FStar.Order.compare_option/>


; <Start encoding let compare_option>

(declare-fun Tm_arrow_ccb3ed22b175455b00531b67b5c7d856 (Term) Term)
(declare-fun FStar.Order.compare_option (Term Term Term Term) Term)

(declare-fun Tm_arrow_c05924edaff2b70dddf604252cd68f59 () Term)
(declare-fun FStar.Order.compare_option@tok () Term)


; </end encoding let compare_option>


; End Externals for module FStar.Order


; Externals for interface FStar.Stubs.Reflection.V2.Builtins


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_ln>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_ln (Term) Term)
(declare-fun Tm_refine_81af2efa33d38022d26acf32f3bb78ef (Term) Term)
(declare-fun Tm_arrow_edfacdf1a39dd2bb9437936ae5571e1b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_ln@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_ln>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_ln>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_ln (Term) Term)
(declare-fun Tm_arrow_ae5f5761de5ce126089c4c93d95fa5bd () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_ln@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_ln>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_comp>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_comp (Term) Term)
(declare-fun Tm_refine_f67fae703d4f124e9a89639bf06f15ff (Term) Term)
(declare-fun Tm_arrow_59d52264f8e0bdae6ad9158480fc7234 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_comp@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_comp>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_comp>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_comp (Term) Term)
(declare-fun Tm_arrow_26586180912b44730b889e0cbf4271c1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_comp@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_comp>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_sigelt>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_sigelt (Term) Term)
(declare-fun Tm_arrow_5bc6df70bb02a49a9ea07032df544143 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_sigelt>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_sigelt>

(declare-fun Tm_refine_37ba4960bf77692fc961c5076a4920fa () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_sigelt (Term) Term)

(declare-fun Tm_arrow_8ff288cac539d53e1e15e8e3a979c18b () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_sigelt>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_fv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_fv (Term) Term)
(declare-fun Tm_arrow_c3fb0161a14a082f4e4bc26b0dad1ae0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_fv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_fv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_fv (Term) Term)
(declare-fun Tm_arrow_3af61dda61d95d3a25d93edc5a57f9ba () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_fv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_namedv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_namedv (Term) Term)
(declare-fun Tm_refine_d1c8bd5e9a4b36d0899d93d5312043d1 (Term) Term)
(declare-fun Tm_arrow_8bddebce94c93966988a8df0e95b036a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_namedv@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_namedv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_namedv (Term) Term)
(declare-fun Tm_arrow_644d67eafe3559eadbcf793facc818e8 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_bv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_bv (Term) Term)
(declare-fun Tm_refine_0b5d5a86e4795efe0cd6940af52c795e (Term) Term)
(declare-fun Tm_arrow_879fa031e673369671f5d9acd186404c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_bv@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_bv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_bv (Term) Term)
(declare-fun Tm_arrow_21f173ac5ea1bee3e534c9f064ee4f25 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_lb>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_lb (Term) Term)
(declare-fun Tm_refine_1dc3901317b190f7af2237f7a5ab40b4 (Term) Term)
(declare-fun Tm_arrow_ee866fe6a195cc24a17ffdb3a5943427 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_lb@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_lb>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_lb>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_lb (Term) Term)
(declare-fun Tm_arrow_3e1e980bf2c53283791672391ed384e5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_lb@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_lb>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_binder>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_binder (Term) Term)
(declare-fun Tm_refine_336c863ebf681869395d10a4c152247a (Term) Term)
(declare-fun Tm_arrow_a919d3d09beb4a869fe0a490fb954a7d () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_binder@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_binder>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_binder>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_binder (Term) Term)
(declare-fun Tm_arrow_4b504dddb7d5a7abc8f962e3c58e43a5 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_binder@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_binder>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_universe>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_universe (Term) Term)
(declare-fun Tm_refine_4e84f047f00aa775b5130eee4ebea2da (Term) Term)
(declare-fun Tm_arrow_f8f73b0ba426978ac0ad97536de85b87 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_universe@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_universe>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_universe>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_universe (Term) Term)
(declare-fun Tm_arrow_1bfd553009ba1a7032bc8aa415f062f3 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_universe@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_universe>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_ident>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_ident (Term) Term)
(declare-fun Tm_refine_e268d523208e6c87431062a12db95340 (Term) Term)
(declare-fun Tm_arrow_ced4f6fd43565ab1573a3a0f4e66c296 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_ident@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_ident>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_ident>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_ident (Term) Term)
(declare-fun Tm_arrow_cfe243bd7060e3ef35b1236489cbd097 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_ident@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_ident>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_inv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_inv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_inv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_inv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_comp_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_comp_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_comp_inv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_comp_inv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_comp_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_comp_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_comp_inv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_comp_inv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_binder@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_binder>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_binder@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_binder>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_fv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_fv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_fv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_universe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_universe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_universe@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_universe>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_universe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_universe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_universe@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_universe>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_ident>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_ident (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_ident@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_ident>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_ident>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_ident (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_ident@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_ident>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_lb (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_lb@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_lb>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_lb (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_lb@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_lb>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.pack_inspect_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.pack_inspect_sigelt>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.inspect_pack_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.inspect_pack_sigelt>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.simple_binder_defn>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.implode_qn>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.implode_qn (Term) Term)
(declare-fun Tm_arrow_340d345a08463dfae3b944609ae2f0c0 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.implode_qn@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.implode_qn>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.explode_qn>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.explode_qn (Term) Term)
(declare-fun Tm_arrow_26e764d0304e639834937407731051a4 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.explode_qn@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.explode_qn>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.compare_string>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_string (Term Term) Term)
(declare-fun Tm_refine_e49224ef1fa94f244a92062dcdd52678 (Term Term) Term)
(declare-fun Tm_arrow_01ac862b139f8e45b0b814099dfdc270 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_string@tok () Term)


; </end encoding val FStar.Stubs.Reflection.V2.Builtins.compare_string>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_typ>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_typ (Term Term) Term)
(declare-fun Tm_arrow_d0e04f111efd1f4790dfc68d3a7eea4e () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_typ@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_typ>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.compare_bv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_bv (Term Term) Term)
(declare-fun Tm_arrow_4c639e20026df9563b4be03d734bf1ce () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_bv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.compare_bv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.compare_namedv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_namedv (Term Term) Term)
(declare-fun Tm_arrow_2859e91bfaf13e984be4bc96390bb75f () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.compare_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.compare_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.vars_of_env>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.vars_of_env (Term) Term)
(declare-fun Tm_arrow_e7db219d8ddeee1fd444e9cbf2117e02 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.vars_of_env@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.vars_of_env>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.moduleof>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.moduleof (Term) Term)
(declare-fun Tm_arrow_0817d2ce14540cc304dfd8c0c3d5edf9 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.moduleof@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.moduleof>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_attr_ses>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_attr_ses (Term Term) Term)
(declare-fun Tm_arrow_d42a17f234d24258f0fcad2a11f8cbfa () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_attr_ses@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_attr_ses>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_attr>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_attr (Term Term) Term)
(declare-fun Tm_arrow_f9b407dad273c97294b0201ec5c7f169 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.lookup_attr@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.lookup_attr>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.all_defs_in_env>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.all_defs_in_env (Term) Term)
(declare-fun Tm_arrow_d5df6bde986f6d815516bf8521bad601 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.all_defs_in_env@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.all_defs_in_env>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.defs_in_module>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.defs_in_module (Term Term) Term)
(declare-fun Tm_arrow_972a661ed66aa37b93ba51fc466e9964 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.defs_in_module@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.defs_in_module>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.term_eq>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.term_eq (Term Term) Term)
(declare-fun Tm_arrow_f31d1dc818d16b90cce97ac3bcaf5be1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.term_eq@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.term_eq>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.env_open_modules>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.env_open_modules (Term) Term)
(declare-fun Tm_arrow_0c574e91f37d18d9b86a0281a674d93c () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.env_open_modules@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.env_open_modules>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.push_namedv>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.push_namedv (Term Term) Term)
(declare-fun Tm_arrow_51798ef8aa0ed9fc500e52a3c5e2ec4a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.push_namedv@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.push_namedv>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_attrs>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_attrs (Term) Term)
(declare-fun Tm_arrow_1973aa5d78ccd271e8ebc4584584081a () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_attrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_attrs>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.set_sigelt_attrs>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.set_sigelt_attrs (Term Term) Term)
(declare-fun Tm_arrow_3c2c8e2b5bbb2c931985ec3aa4236070 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.set_sigelt_attrs@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.set_sigelt_attrs>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_quals>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_quals (Term) Term)
(declare-fun Tm_arrow_cfefb4fb12b4d5486e8880f13f735dc1 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_quals@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_quals>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.set_sigelt_quals>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.set_sigelt_quals (Term Term) Term)
(declare-fun Tm_arrow_ca3d81522decd6d31479318529924ab8 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.set_sigelt_quals@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.set_sigelt_quals>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_opts>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_opts (Term) Term)
(declare-fun Tm_arrow_8bb33d5239675d00a520a835bfbe4b76 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.sigelt_opts@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.sigelt_opts>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.embed_vconfig>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.embed_vconfig (Term) Term)
(declare-fun Tm_arrow_591882dfd0f9893d2e36fb92646bd925 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.embed_vconfig@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.embed_vconfig>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.subst_term>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.subst_term (Term Term) Term)
(declare-fun Tm_arrow_0f83a9a3eddc19bd0421427bfc4e58af () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.subst_term@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.subst_term>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.subst_comp>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.subst_comp (Term Term) Term)
(declare-fun Tm_arrow_90ba22378b295e56a45b27d1c88afd16 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.subst_comp@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.subst_comp>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.range_of_term>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.range_of_term (Term) Term)
(declare-fun Tm_arrow_1a5b26aa2b42dd31b00f3233999aad64 () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.range_of_term@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.range_of_term>


; <Start encoding val FStar.Stubs.Reflection.V2.Builtins.range_of_sigelt>

(declare-fun FStar.Stubs.Reflection.V2.Builtins.range_of_sigelt (Term) Term)
(declare-fun Tm_arrow_5060e1bd607b83e02fa1f7d8d02e68df () Term)
(declare-fun FStar.Stubs.Reflection.V2.Builtins.range_of_sigelt@tok () Term)

; </end encoding val FStar.Stubs.Reflection.V2.Builtins.range_of_sigelt>


; End Externals for interface FStar.Stubs.Reflection.V2.Builtins


; Externals for module FStar.Reflection.V2.Collect


; <Start encoding let rec inspect_ln_unascribe>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Collect.inspect_ln_unascribe.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Collect.inspect_ln_unascribe.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Collect.inspect_ln_unascribe (Term) Term)
(declare-fun FStar.Reflection.V2.Collect.inspect_ln_unascribe@tok () Term)
(declare-fun Tm_refine_5bdd45d3da8bcffc0601859dc0f3192e (Term) Term)

(declare-fun Tm_arrow_a9d45b01dbc65a554cf520b785b211d9 () Term)


; </end encoding let rec inspect_ln_unascribe>


; <Start encoding let rec collect_app_ln'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln_@tok () Term)
(declare-fun Tm_arrow_86eff4a7d32619810ca356fb69ec9763 () Term)

; </end encoding let rec collect_app_ln'>


; <Skipped val FStar.Reflection.V2.Collect.collect_app_ln/>


; <Start encoding let collect_app_ln>

(declare-fun FStar.Reflection.V2.Collect.collect_app_ln (Term) Term)
(declare-fun Tm_arrow_5e962b7b23a7afb310a50c2f4fd11f50 () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_app_ln@tok () Term)

; </end encoding let collect_app_ln>


; <Start encoding let rec collect_arr'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Collect.collect_arr_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Collect.collect_arr_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_arr_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Collect.collect_arr_@tok () Term)
(declare-fun Tm_arrow_853614ae77f18710867dc728d88202da () Term)

; </end encoding let rec collect_arr'>


; <Skipped val FStar.Reflection.V2.Collect.collect_arr_ln_bs/>


; <Start encoding let collect_arr_ln_bs>

(declare-fun FStar.Reflection.V2.Collect.collect_arr_ln_bs (Term) Term)
(declare-fun Tm_arrow_a37005fa794e5394fd022e9ebf5e1146 () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_arr_ln_bs@tok () Term)

; </end encoding let collect_arr_ln_bs>


; <Skipped val FStar.Reflection.V2.Collect.collect_arr_ln/>


; <Start encoding let collect_arr_ln>

(declare-fun FStar.Reflection.V2.Collect.collect_arr_ln (Term) Term)
(declare-fun Tm_arrow_3d1476e2ef7b80808b562b8619c09d4c () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_arr_ln@tok () Term)
(declare-fun Tm_arrow_5325703aa6a68cd14b66139aac61ff6d () Term)
(declare-fun Tm_abs_2c761dce2543edfee3b14fa85e56cc61 () Term)

; </end encoding let collect_arr_ln>


; <Start encoding let rec collect_abs'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Collect.collect_abs_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Collect.collect_abs_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_abs_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Collect.collect_abs_@tok () Term)
(declare-fun Tm_arrow_9ddb50f462b9f5b43e2226ed632c40d9 () Term)

; </end encoding let rec collect_abs'>


; <Skipped val FStar.Reflection.V2.Collect.collect_abs_ln/>


; <Start encoding let collect_abs_ln>

(declare-fun FStar.Reflection.V2.Collect.collect_abs_ln (Term) Term)
(declare-fun Tm_arrow_3f931ca965f09574196e106f5d187232 () Term)
(declare-fun FStar.Reflection.V2.Collect.collect_abs_ln@tok () Term)

; </end encoding let collect_abs_ln>


; End Externals for module FStar.Reflection.V2.Collect


; Externals for interface FStar.Reflection.V2.Compare


; <Start encoding val FStar.Reflection.V2.Compare.compare_name>

(declare-fun FStar.Reflection.V2.Compare.compare_name (Term Term) Term)
(declare-fun Tm_arrow_096b7be52bf8c66314a1a53e32582c9a () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_name@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_name>


; <Start encoding val FStar.Reflection.V2.Compare.compare_fv>

(declare-fun FStar.Reflection.V2.Compare.compare_fv (Term Term) Term)
(declare-fun Tm_arrow_2e95bd55b20109093ea5761ba2e93a30 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_fv@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_fv>


; <Start encoding val FStar.Reflection.V2.Compare.compare_const>

(declare-fun FStar.Reflection.V2.Compare.compare_const (Term Term) Term)
(declare-fun Tm_arrow_e7d38e14bc8e9c10135c877f65d3699c () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_const@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_const>


; <Start encoding val FStar.Reflection.V2.Compare.compare_ident>

(declare-fun FStar.Reflection.V2.Compare.compare_ident (Term Term) Term)
(declare-fun Tm_arrow_5b3239343926f930ce54f71585477ab4 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_ident@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_ident>


; <Start encoding val FStar.Reflection.V2.Compare.compare_universe>

(declare-fun FStar.Reflection.V2.Compare.compare_universe (Term Term) Term)
(declare-fun Tm_arrow_347fc221ef1b275489ed71dfe80522fa () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_universe@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_universe>


; <Start encoding val FStar.Reflection.V2.Compare.compare_universes>

(declare-fun FStar.Reflection.V2.Compare.compare_universes (Term Term) Term)
(declare-fun Tm_arrow_63056931cd34c2fbe82b304911116428 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_universes@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_universes>


; <Start encoding val FStar.Reflection.V2.Compare.compare_term>

(declare-fun FStar.Reflection.V2.Compare.compare_term (Term Term) Term)
(declare-fun Tm_arrow_fade001406f0e61dc0d41c41d5bd1c97 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_term@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_term>


; <Start encoding val FStar.Reflection.V2.Compare.compare_comp>

(declare-fun FStar.Reflection.V2.Compare.compare_comp (Term Term) Term)
(declare-fun Tm_arrow_82708541e878a218dba3ae8dd7ac38ef () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_comp@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_comp>


; <Start encoding val FStar.Reflection.V2.Compare.compare_binder>

(declare-fun FStar.Reflection.V2.Compare.compare_binder (Term Term) Term)
(declare-fun Tm_arrow_fccdc6c265998031f72d6f107676d7b9 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_binder@tok () Term)

; </end encoding val FStar.Reflection.V2.Compare.compare_binder>


; End Externals for interface FStar.Reflection.V2.Compare


; Externals for module FStar.Reflection.Const


; <Start encoding let imp_qn>

(declare-fun FStar.Reflection.Const.imp_qn (Dummy_sort) Term)

; </end encoding let imp_qn>


; <Start encoding let and_qn>

(declare-fun FStar.Reflection.Const.and_qn (Dummy_sort) Term)

; </end encoding let and_qn>


; <Start encoding let or_qn>

(declare-fun FStar.Reflection.Const.or_qn (Dummy_sort) Term)

; </end encoding let or_qn>


; <Start encoding let not_qn>

(declare-fun FStar.Reflection.Const.not_qn (Dummy_sort) Term)

; </end encoding let not_qn>


; <Start encoding let iff_qn>

(declare-fun FStar.Reflection.Const.iff_qn (Dummy_sort) Term)

; </end encoding let iff_qn>


; <Start encoding let eq2_qn>

(declare-fun FStar.Reflection.Const.eq2_qn (Dummy_sort) Term)

; </end encoding let eq2_qn>


; <Start encoding let eq1_qn>

(declare-fun FStar.Reflection.Const.eq1_qn (Dummy_sort) Term)

; </end encoding let eq1_qn>


; <Start encoding let true_qn>

(declare-fun FStar.Reflection.Const.true_qn (Dummy_sort) Term)

; </end encoding let true_qn>


; <Start encoding let false_qn>

(declare-fun FStar.Reflection.Const.false_qn (Dummy_sort) Term)

; </end encoding let false_qn>


; <Start encoding let b2t_qn>

(declare-fun FStar.Reflection.Const.b2t_qn (Dummy_sort) Term)

; </end encoding let b2t_qn>


; <Start encoding let forall_qn>

(declare-fun FStar.Reflection.Const.forall_qn (Dummy_sort) Term)

; </end encoding let forall_qn>


; <Start encoding let exists_qn>

(declare-fun FStar.Reflection.Const.exists_qn (Dummy_sort) Term)

; </end encoding let exists_qn>


; <Start encoding let squash_qn>

(declare-fun FStar.Reflection.Const.squash_qn (Dummy_sort) Term)

; </end encoding let squash_qn>


; <Start encoding let prop_qn>

(declare-fun FStar.Reflection.Const.prop_qn (Dummy_sort) Term)

; </end encoding let prop_qn>


; <Start encoding let bool_true_qn>

(declare-fun FStar.Reflection.Const.bool_true_qn (Dummy_sort) Term)

; </end encoding let bool_true_qn>


; <Start encoding let bool_false_qn>

(declare-fun FStar.Reflection.Const.bool_false_qn (Dummy_sort) Term)

; </end encoding let bool_false_qn>


; <Start encoding let int_lid>

(declare-fun FStar.Reflection.Const.int_lid (Dummy_sort) Term)

; </end encoding let int_lid>


; <Start encoding let bool_lid>

(declare-fun FStar.Reflection.Const.bool_lid (Dummy_sort) Term)

; </end encoding let bool_lid>


; <Start encoding let unit_lid>

(declare-fun FStar.Reflection.Const.unit_lid (Dummy_sort) Term)

; </end encoding let unit_lid>


; <Start encoding let string_lid>

(declare-fun FStar.Reflection.Const.string_lid (Dummy_sort) Term)

; </end encoding let string_lid>


; <Start encoding let add_qn>

(declare-fun FStar.Reflection.Const.add_qn (Dummy_sort) Term)

; </end encoding let add_qn>


; <Start encoding let neg_qn>

(declare-fun FStar.Reflection.Const.neg_qn (Dummy_sort) Term)

; </end encoding let neg_qn>


; <Start encoding let minus_qn>

(declare-fun FStar.Reflection.Const.minus_qn (Dummy_sort) Term)

; </end encoding let minus_qn>


; <Start encoding let mult_qn>

(declare-fun FStar.Reflection.Const.mult_qn (Dummy_sort) Term)

; </end encoding let mult_qn>


; <Start encoding let mult'_qn>

(declare-fun FStar.Reflection.Const.mult__qn (Dummy_sort) Term)

; </end encoding let mult'_qn>


; <Start encoding let div_qn>

(declare-fun FStar.Reflection.Const.div_qn (Dummy_sort) Term)

; </end encoding let div_qn>


; <Start encoding let lt_qn>

(declare-fun FStar.Reflection.Const.lt_qn (Dummy_sort) Term)

; </end encoding let lt_qn>


; <Start encoding let lte_qn>

(declare-fun FStar.Reflection.Const.lte_qn (Dummy_sort) Term)

; </end encoding let lte_qn>


; <Start encoding let gt_qn>

(declare-fun FStar.Reflection.Const.gt_qn (Dummy_sort) Term)

; </end encoding let gt_qn>


; <Start encoding let gte_qn>

(declare-fun FStar.Reflection.Const.gte_qn (Dummy_sort) Term)

; </end encoding let gte_qn>


; <Start encoding let mod_qn>

(declare-fun FStar.Reflection.Const.mod_qn (Dummy_sort) Term)

; </end encoding let mod_qn>


; <Start encoding let nil_qn>

(declare-fun FStar.Reflection.Const.nil_qn (Dummy_sort) Term)

; </end encoding let nil_qn>


; <Start encoding let cons_qn>

(declare-fun FStar.Reflection.Const.cons_qn (Dummy_sort) Term)

; </end encoding let cons_qn>


; <Start encoding let mktuple2_qn>

(declare-fun FStar.Reflection.Const.mktuple2_qn (Dummy_sort) Term)

; </end encoding let mktuple2_qn>


; <Start encoding let mktuple3_qn>

(declare-fun FStar.Reflection.Const.mktuple3_qn (Dummy_sort) Term)

; </end encoding let mktuple3_qn>


; <Start encoding let mktuple4_qn>

(declare-fun FStar.Reflection.Const.mktuple4_qn (Dummy_sort) Term)

; </end encoding let mktuple4_qn>


; <Start encoding let mktuple5_qn>

(declare-fun FStar.Reflection.Const.mktuple5_qn (Dummy_sort) Term)

; </end encoding let mktuple5_qn>


; <Start encoding let mktuple6_qn>

(declare-fun FStar.Reflection.Const.mktuple6_qn (Dummy_sort) Term)

; </end encoding let mktuple6_qn>


; <Start encoding let mktuple7_qn>

(declare-fun FStar.Reflection.Const.mktuple7_qn (Dummy_sort) Term)

; </end encoding let mktuple7_qn>


; <Start encoding let mktuple8_qn>

(declare-fun FStar.Reflection.Const.mktuple8_qn (Dummy_sort) Term)

; </end encoding let mktuple8_qn>


; <Start encoding let land_qn>

(declare-fun FStar.Reflection.Const.land_qn (Dummy_sort) Term)

; </end encoding let land_qn>


; <Start encoding let lxor_qn>

(declare-fun FStar.Reflection.Const.lxor_qn (Dummy_sort) Term)

; </end encoding let lxor_qn>


; <Start encoding let lor_qn>

(declare-fun FStar.Reflection.Const.lor_qn (Dummy_sort) Term)

; </end encoding let lor_qn>


; <Start encoding let ladd_qn>

(declare-fun FStar.Reflection.Const.ladd_qn (Dummy_sort) Term)

; </end encoding let ladd_qn>


; <Start encoding let lsub_qn>

(declare-fun FStar.Reflection.Const.lsub_qn (Dummy_sort) Term)

; </end encoding let lsub_qn>


; <Start encoding let shiftl_qn>

(declare-fun FStar.Reflection.Const.shiftl_qn (Dummy_sort) Term)

; </end encoding let shiftl_qn>


; <Start encoding let shiftr_qn>

(declare-fun FStar.Reflection.Const.shiftr_qn (Dummy_sort) Term)

; </end encoding let shiftr_qn>


; <Start encoding let udiv_qn>

(declare-fun FStar.Reflection.Const.udiv_qn (Dummy_sort) Term)

; </end encoding let udiv_qn>


; <Start encoding let umod_qn>

(declare-fun FStar.Reflection.Const.umod_qn (Dummy_sort) Term)

; </end encoding let umod_qn>


; <Start encoding let mul_mod_qn>

(declare-fun FStar.Reflection.Const.mul_mod_qn (Dummy_sort) Term)

; </end encoding let mul_mod_qn>


; <Start encoding let nat_bv_qn>

(declare-fun FStar.Reflection.Const.nat_bv_qn (Dummy_sort) Term)

; </end encoding let nat_bv_qn>


; End Externals for module FStar.Reflection.Const


; Externals for interface FStar.Classical


; <Start encoding val FStar.Classical.give_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness@tok () Term)

; </end encoding val FStar.Classical.give_witness>


; <Start encoding val FStar.Classical.give_witness_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness_from_squash (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness_from_squash@tok () Term)

; </end encoding val FStar.Classical.give_witness_from_squash>


; <Start encoding val FStar.Classical.lemma_to_squash_gtot>


(declare-fun Tm_refine_839524df17f415c122f40f00685d3fe6 (Term Term) Term)
(declare-fun Tm_arrow_9a028cfcf6111a85dd3c28d61b4efdfd (Term Term) Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot (Term Term Term Term) Term)



(declare-fun Tm_arrow_6f9100982820dfbce0fb9c6dae0cee11 () Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_to_squash_gtot>


; <Start encoding val FStar.Classical.get_equality>

(declare-fun FStar.Classical.get_equality (Term Term Term) Term)
(declare-fun Tm_refine_7c805cbd5439f1b21f6463c70e57d0f1 (Term Term Term) Term)
(declare-fun Tm_arrow_158af926c0cd4bc1ff513e80f99f4b49 () Term)
(declare-fun FStar.Classical.get_equality@tok () Term)


; </end encoding val FStar.Classical.get_equality>


; <Start encoding val FStar.Classical.impl_to_arrow>

(declare-fun FStar.Classical.impl_to_arrow (Term Term Term Term) Term)

(declare-fun FStar.Classical.impl_to_arrow@tok () Term)

; </end encoding val FStar.Classical.impl_to_arrow>


; <Start encoding val FStar.Classical.arrow_to_impl>


(declare-fun FStar.Classical.arrow_to_impl (Term Term Term) Term)

(declare-fun Tm_arrow_78d787b8a2633e2185ded4267a81cc32 () Term)
(declare-fun FStar.Classical.arrow_to_impl@tok () Term)

; </end encoding val FStar.Classical.arrow_to_impl>


; <Start encoding val FStar.Classical.impl_intro_gtot>


(declare-fun FStar.Classical.impl_intro_gtot (Term Term Term) Term)

(declare-fun Tm_arrow_d2cdd2f18b92810e3048c35d07f1c9ea () Term)
(declare-fun FStar.Classical.impl_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gtot>


; <Start encoding val FStar.Classical.impl_intro_tot>


(declare-fun FStar.Classical.impl_intro_tot (Term Term Term) Term)

(declare-fun Tm_arrow_91aadb43edc4c2c0c091af8dbe745057 () Term)
(declare-fun FStar.Classical.impl_intro_tot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_tot>


; <Start encoding val FStar.Classical.impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro@tok () Term)

; </end encoding val FStar.Classical.impl_intro>


; <Start encoding val FStar.Classical.move_requires>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires@tok () Term)

; </end encoding val FStar.Classical.move_requires>


; <Start encoding val FStar.Classical.move_requires_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_2@tok () Term)

; </end encoding val FStar.Classical.move_requires_2>


; <Start encoding val FStar.Classical.move_requires_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_3@tok () Term)

; </end encoding val FStar.Classical.move_requires_3>


; <Start encoding val FStar.Classical.move_requires_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_4@tok () Term)

; </end encoding val FStar.Classical.move_requires_4>


; <Start encoding val FStar.Classical.impl_intro_gen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro_gen (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro_gen@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gen>


; <Start encoding val FStar.Classical.get_forall>


(declare-fun FStar.Classical.get_forall (Term Term) Term)




(declare-fun Tm_refine_7a68552470cd0b3e3b5038c890f62a82 (Term Term) Term)
(declare-fun Tm_arrow_44be7520ed79d38d96b60844cf5c3637 () Term)
(declare-fun FStar.Classical.get_forall@tok () Term)





; </end encoding val FStar.Classical.get_forall>


; <Start encoding val FStar.Classical.forall_intro_gtot>



(declare-fun FStar.Classical.forall_intro_gtot (Term Term Term) Term)



(declare-fun Tm_arrow_0d81b083331cc2ca8277c22c2c6ed09c () Term)
(declare-fun FStar.Classical.forall_intro_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_gtot>


; <Start encoding val FStar.Classical.lemma_forall_intro_gtot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_forall_intro_gtot>


; <Start encoding val FStar.Classical.gtot_to_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.gtot_to_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.gtot_to_lemma@tok () Term)

; </end encoding val FStar.Classical.gtot_to_lemma>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot>



(declare-fun FStar.Classical.forall_intro_squash_gtot (Term Term Term) Term)




(declare-fun FStar.Classical.forall_intro_squash_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_squash_gtot>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot_join>



(declare-fun FStar.Classical.forall_intro_squash_gtot_join (Term Term Term) Term)





(declare-fun Tm_arrow_cd9381a0f782f3a2a2b6ba363e2e0508 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot_join@tok () Term)




; </end encoding val FStar.Classical.forall_intro_squash_gtot_join>


; <Start encoding val FStar.Classical.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro@tok () Term)

; </end encoding val FStar.Classical.forall_intro>


; <Start encoding val FStar.Classical.forall_intro_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_with_pat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_with_pat>


; <Start encoding val FStar.Classical.forall_intro_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_sub@tok () Term)

; </end encoding val FStar.Classical.forall_intro_sub>


; <Start encoding val FStar.Classical.forall_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2>


; <Start encoding val FStar.Classical.forall_intro_2_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2_with_pat>


; <Start encoding val FStar.Classical.forall_intro_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3>


; <Start encoding val FStar.Classical.forall_intro_3_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3_with_pat>


; <Start encoding val FStar.Classical.forall_intro_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_4@tok () Term)

; </end encoding val FStar.Classical.forall_intro_4>


; <Start encoding val FStar.Classical.forall_impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_impl_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_impl_intro@tok () Term)

; </end encoding val FStar.Classical.forall_impl_intro>


; <Start encoding val FStar.Classical.ghost_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.ghost_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.ghost_lemma@tok () Term)

; </end encoding val FStar.Classical.ghost_lemma>


; <Start encoding val FStar.Classical.exists_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro@tok () Term)

; </end encoding val FStar.Classical.exists_intro>


; <Start encoding val FStar.Classical.exists_intro_not_all_not>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not@tok () Term)

; </end encoding val FStar.Classical.exists_intro_not_all_not>


; <Start encoding val FStar.Classical.forall_to_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists>


; <Start encoding val FStar.Classical.forall_to_exists_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists_2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists_2@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists_2>


; <Start encoding val FStar.Classical.exists_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_elim@tok () Term)

; </end encoding val FStar.Classical.exists_elim>


; <Start encoding val FStar.Classical.or_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.or_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.or_elim@tok () Term)

; </end encoding val FStar.Classical.or_elim>


; <Start encoding val FStar.Classical.excluded_middle>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.excluded_middle (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.excluded_middle@tok () Term)

; </end encoding val FStar.Classical.excluded_middle>


; End Externals for interface FStar.Classical


; Externals for module FStar.Reflection.V2.Derived.Lemmas


; <Start encoding let rec forall_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list (Term Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list@tok () Term)



(declare-fun Tm_arrow_e873d8ceceaa83cda2609338157fecb6 () Term)

; </end encoding let rec forall_list>


; <Start encoding let forallP>


(declare-fun FStar.Reflection.V2.Derived.Lemmas.forallP (Term Term Term) Term)


(declare-fun FStar.Reflection.V2.Derived.Lemmas.forallP@tok () Term)


; </end encoding let forallP>


; <Start encoding let op_Less_Less_Colon>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.op_Less_Less_Colon (Term Term Term Term) Term)
(declare-fun Tm_arrow_eb48ab9869915f554b37a1284d8d27df () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.op_Less_Less_Colon@tok () Term)

(declare-fun Tm_abs_9f6092a14a151272f288f334302ef9b0 (Term Term Term) Term)

; </end encoding let op_Less_Less_Colon>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref (Term Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref@tok () Term)




(declare-fun Tm_refine_136684b854bab8ef1ab7df664a942cb7 (Term Term) Term)




(declare-fun Tm_arrow_824002ecc09891a10902cdd4b737c346 () Term)



; </end encoding let rec list_ref>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_app_order'/>


; <Start encoding let rec collect_app_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order_@tok () Term)

; </end encoding let rec collect_app_order'>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_app_order/>


; <Start encoding let collect_app_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order@tok () Term)

; </end encoding let collect_app_order>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_app_ref/>


; <Start encoding let collect_app_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_ref (Term) Term)
(declare-fun Tm_refine_3196c4c70d54258177b468a0dcc9d1f5 (Term) Term)
(declare-fun Tm_refine_89ecbd89f2c58f00dfd6c4969b372418 (Term) Term)
(declare-fun Tm_arrow_22b21af71ff05532899781ca8b83ad2f () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_ref@tok () Term)




(declare-fun Tm_arrow_589555320ddfd8830ceb8e71c2c57cf9 () Term)
(declare-fun Tm_abs_1e4258eb7a9dbfd194bc3c3007ba13df (Term) Term)

; </end encoding let collect_app_ref>


; <Start encoding let rec collect_abs_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_order_@tok () Term)

; </end encoding let rec collect_abs_order'>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order/>


; <Start encoding let collect_abs_ln_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order@tok () Term)

; </end encoding let collect_abs_ln_order>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref/>


; <Start encoding let collect_abs_ln_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref (Term) Term)
(declare-fun Tm_refine_9ba9bcdc78f82b83442a3130ef004f3c (Term) Term)

(declare-fun Tm_arrow_f2f406cc47d95b264d9f9f48073254a0 () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref@tok () Term)




(declare-fun Tm_arrow_537d49eb81f2d527a1221c6796af1848 () Term)
(declare-fun Tm_abs_612e3ade225ec84e54fb206ec60ebb94 (Term) Term)

; </end encoding let collect_abs_ln_ref>


; <Start encoding let rec collect_arr_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_order_@tok () Term)

; </end encoding let rec collect_arr_order'>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order/>


; <Start encoding let collect_arr_ln_bs_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order@tok () Term)

; </end encoding let collect_arr_ln_bs_order>


; <Skipped val FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref/>


; <Start encoding let collect_arr_ln_bs_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref (Term) Term)

(declare-fun Tm_refine_87825054fc4249e41f06b772a68b51bf (Term) Term)
(declare-fun Tm_arrow_6fb382b27e5bf3c6a47caf8d34802e56 () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref@tok () Term)







; </end encoding let collect_arr_ln_bs_ref>


; End Externals for module FStar.Reflection.V2.Derived.Lemmas


; Externals for module FStar.Reflection.V2.Derived


; <Start encoding let type_of_binder>

(declare-fun FStar.Reflection.V2.Derived.type_of_binder (Term) Term)

(declare-fun FStar.Reflection.V2.Derived.type_of_binder@tok () Term)

; </end encoding let type_of_binder>


; <Start encoding let rec inspect_ln_unascribe>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe@tok () Term)





; </end encoding let rec inspect_ln_unascribe>


; <Start encoding let compare_bv>

(declare-fun FStar.Reflection.V2.Derived.compare_bv (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.compare_bv@tok () Term)

; </end encoding let compare_bv>


; <Start encoding let compare_namedv>

(declare-fun FStar.Reflection.V2.Derived.compare_namedv (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.compare_namedv@tok () Term)

; </end encoding let compare_namedv>


; <Start encoding let shift>

(declare-fun FStar.Reflection.V2.Derived.shift (Term Term) Term)
(declare-fun Tm_arrow_585e2901c9c8656a4d7198125fd6631a () Term)
(declare-fun FStar.Reflection.V2.Derived.shift@tok () Term)

; </end encoding let shift>


; <Start encoding let shift_subst>

(declare-fun FStar.Reflection.V2.Derived.shift_subst (Term Term) Term)
(declare-fun Tm_arrow_2f00219871d1cccc694fd8620951814a () Term)
(declare-fun FStar.Reflection.V2.Derived.shift_subst@tok () Term)

; </end encoding let shift_subst>


; <Start encoding let subst1>

(declare-fun FStar.Reflection.V2.Derived.subst1 (Term Term Term) Term)
(declare-fun Tm_arrow_256c5dbc2171c29387f80598787e786e () Term)
(declare-fun FStar.Reflection.V2.Derived.subst1@tok () Term)

; </end encoding let subst1>


; <Start encoding let mk_binder>

(declare-fun FStar.Reflection.V2.Derived.mk_binder (Term Term) Term)
(declare-fun Tm_arrow_2849191c089b9ba3e99f972f5fb1cca0 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_binder@tok () Term)

; </end encoding let mk_binder>


; <Start encoding let mk_implicit_binder>

(declare-fun FStar.Reflection.V2.Derived.mk_implicit_binder (Term Term) Term)
(declare-fun Tm_arrow_b492845346adc1e2aa61d484b415f66c () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_implicit_binder@tok () Term)

; </end encoding let mk_implicit_binder>


; <Start encoding let push_binding>

(declare-fun FStar.Reflection.V2.Derived.push_binding (Term Term) Term)
(declare-fun Tm_arrow_5a64cec35ee3232a40fe7b007ec1c0f6 () Term)
(declare-fun FStar.Reflection.V2.Derived.push_binding@tok () Term)

; </end encoding let push_binding>


; <Skipped val FStar.Reflection.V2.Derived.flatten_name/>


; <Start encoding let rec flatten_name>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.flatten_name (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.flatten_name@tok () Term)
(declare-fun Tm_arrow_478c34962c98f82e9634c49621190059 () Term)

; </end encoding let rec flatten_name>


; <Start encoding let rec mk_app>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_app.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_app (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_app@tok () Term)
(declare-fun Tm_arrow_209d4a99c36bc09d1b5cd7112ded1887 () Term)

; </end encoding let rec mk_app>


; <Start encoding let mk_e_app>

(declare-fun FStar.Reflection.V2.Derived.mk_e_app (Term Term) Term)
(declare-fun Tm_arrow_ffa29a8727246c9a797593e419fa52ce () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_e_app@tok () Term)
(declare-fun Tm_arrow_9ac62ec1d3e00e589803df6c7c8441cb () Term)
(declare-fun Tm_abs_026613339c4e76b4f27268e9988229e6 () Term)

; </end encoding let mk_e_app>


; <Start encoding let u_unk>

(declare-fun FStar.Reflection.V2.Derived.u_unk (Dummy_sort) Term)

; </end encoding let u_unk>


; <Start encoding let rec mk_tot_arr_ln>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln@tok () Term)
(declare-fun Tm_arrow_816eb87884ffecb930774702d7f43238 () Term)

; </end encoding let rec mk_tot_arr_ln>


; <Start encoding let rec mk_arr_ln>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_arr_ln.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_arr_ln.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_arr_ln (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_arr_ln@tok () Term)
(declare-fun Tm_refine_14ce58fa655d913556bc0a15f9deed4c () Term)


(declare-fun Tm_arrow_9e683d0a5b453dd7437bce6376793236 () Term)

; </end encoding let rec mk_arr_ln>


; <Start encoding let fv_to_string>

(declare-fun FStar.Reflection.V2.Derived.fv_to_string (Term) Term)
(declare-fun Tm_arrow_df586ffd61f59c41e5acab94e49d5325 () Term)
(declare-fun FStar.Reflection.V2.Derived.fv_to_string@tok () Term)

; </end encoding let fv_to_string>


; <Start encoding let mk_stringlit>

(declare-fun FStar.Reflection.V2.Derived.mk_stringlit (Term) Term)
(declare-fun Tm_arrow_692ace01164967dd54e02e7fc5697bcc () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_stringlit@tok () Term)

; </end encoding let mk_stringlit>


; <Start encoding let mk_strcat>

(declare-fun FStar.Reflection.V2.Derived.mk_strcat (Term Term) Term)
(declare-fun Tm_arrow_b2587842156653080c5dbd03b51c4882 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_strcat@tok () Term)

; </end encoding let mk_strcat>


; <Start encoding let mk_cons>

(declare-fun FStar.Reflection.V2.Derived.mk_cons (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.mk_cons@tok () Term)

; </end encoding let mk_cons>


; <Start encoding let mk_cons_t>

(declare-fun FStar.Reflection.V2.Derived.mk_cons_t (Term Term Term) Term)
(declare-fun Tm_arrow_ce5395f21a999f76ea42e02cdb59164a () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_cons_t@tok () Term)

; </end encoding let mk_cons_t>


; <Start encoding let rec mk_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_list.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_list.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_list (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_list@tok () Term)
(declare-fun Tm_arrow_5349bea1eb667e8805d1196b72ff2374 () Term)

; </end encoding let rec mk_list>


; <Start encoding let mktuple_n>

(declare-fun Tm_refine_f977a384b76798b53763842ecb73fa85 () Term)
(declare-fun FStar.Reflection.V2.Derived.mktuple_n (Term) Term)

(declare-fun Tm_arrow_c817c21c6da10061fc6359efcea02f3a () Term)
(declare-fun FStar.Reflection.V2.Derived.mktuple_n@tok () Term)


; </end encoding let mktuple_n>


; <Start encoding let destruct_tuple>

(declare-fun FStar.Reflection.V2.Derived.destruct_tuple (Term) Term)
(declare-fun Tm_arrow_5e2cff57cc11309a413cb5aec5418400 () Term)
(declare-fun FStar.Reflection.V2.Derived.destruct_tuple@tok () Term)
(declare-fun Tm_arrow_b5c589b2b1b61fb92f3ad4647f69bd27 () Term)
(declare-fun Tm_abs_ea26625b4612514882a35bc7ad85407a () Term)

; </end encoding let destruct_tuple>


; <Start encoding let mkpair>

(declare-fun FStar.Reflection.V2.Derived.mkpair (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.mkpair@tok () Term)

; </end encoding let mkpair>


; <Start encoding let rec head>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.head.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.head.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.head (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.head@tok () Term)
(declare-fun Tm_arrow_c0cb8e83f4c7bb7edb622e3dd6e3eccd () Term)

; </end encoding let rec head>


; <Start encoding let is_fvar>

(declare-fun FStar.Reflection.V2.Derived.is_fvar (Term Term) Term)
(declare-fun Tm_arrow_8f97b8b6c43ae886d3fc9d4b4b422f6c () Term)
(declare-fun FStar.Reflection.V2.Derived.is_fvar@tok () Term)

; </end encoding let is_fvar>


; <Start encoding let rec is_any_fvar>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar@tok () Term)
(declare-fun Tm_arrow_e49e81597570fb040c46860bec711e8f () Term)

; </end encoding let rec is_any_fvar>


; <Start encoding let is_uvar>

(declare-fun FStar.Reflection.V2.Derived.is_uvar (Term) Term)
(declare-fun Tm_arrow_e47f3fab6e1fda4847465de0e3bf735d () Term)
(declare-fun FStar.Reflection.V2.Derived.is_uvar@tok () Term)

; </end encoding let is_uvar>


; <Start encoding let binder_set_qual>

(declare-fun FStar.Reflection.V2.Derived.binder_set_qual (Term Term) Term)
(declare-fun Tm_arrow_91a6da84be5393e784b24621bd2e0967 () Term)
(declare-fun FStar.Reflection.V2.Derived.binder_set_qual@tok () Term)

; </end encoding let binder_set_qual>


; <Skipped val FStar.Reflection.V2.Derived.add_check_with/>


; <Start encoding let add_check_with>

(declare-fun FStar.Reflection.V2.Derived.add_check_with (Term Term) Term)
(declare-fun Tm_arrow_9b411f2cd504a7392711c3065e96cf2b () Term)
(declare-fun FStar.Reflection.V2.Derived.add_check_with@tok () Term)

; </end encoding let add_check_with>


; <Start encoding let un_uinst>

(declare-fun FStar.Reflection.V2.Derived.un_uinst (Term) Term)

(declare-fun FStar.Reflection.V2.Derived.un_uinst@tok () Term)

; </end encoding let un_uinst>


; <Start encoding let rec is_name_imp>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.is_name_imp (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.is_name_imp@tok () Term)
(declare-fun Tm_arrow_189ba37107393f6299e258e8211f3003 () Term)

; </end encoding let rec is_name_imp>


; <Start encoding let unsquash_term>

(declare-fun FStar.Reflection.V2.Derived.unsquash_term (Term) Term)
(declare-fun Tm_arrow_c9ae6e5861f8718c96a5dfe8800daaa6 () Term)
(declare-fun FStar.Reflection.V2.Derived.unsquash_term@tok () Term)

; </end encoding let unsquash_term>


; <Start encoding let maybe_unsquash_term>

(declare-fun FStar.Reflection.V2.Derived.maybe_unsquash_term (Term) Term)

(declare-fun FStar.Reflection.V2.Derived.maybe_unsquash_term@tok () Term)

; </end encoding let maybe_unsquash_term>


; End Externals for module FStar.Reflection.V2.Derived


; Externals for module FStar.Reflection.V2


; End Externals for module FStar.Reflection.V2


; Externals for interface FStar.Tactics.NamedView


; <Start encoding let namedv>

(declare-fun FStar.Tactics.NamedView.namedv () Term)

; </end encoding let namedv>


; <Start encoding let bv>

(declare-fun FStar.Tactics.NamedView.bv () Term)

; </end encoding let bv>


; <Start encoding let comp>

(declare-fun FStar.Tactics.NamedView.comp () Term)

; </end encoding let comp>


; <Start encoding let binding>

(declare-fun FStar.Tactics.NamedView.binding () Term)

; </end encoding let binding>


; <Start encoding let term>

(declare-fun FStar.Tactics.NamedView.term () Term)

; </end encoding let term>


; <Start encoding let universe>

(declare-fun FStar.Tactics.NamedView.universe () Term)

; </end encoding let universe>


; <Start encoding type FStar.Tactics.NamedView.binder>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.binder () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkbinder (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_ppname (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_qual (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_attrs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkbinder
(declare-fun FStar.Tactics.NamedView.Mkbinder@tok () Term)
(declare-fun Tm_arrow_c84020ddec6b5ac398401248f7883d1e () Term)

; <start constructor FStar.Tactics.NamedView.binder>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.binder ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Tactics.NamedView.binder)))

; </end constructor FStar.Tactics.NamedView.binder>


; <start constructor FStar.Tactics.NamedView.Mkbinder>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkbinder ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Tactics.NamedView.Mkbinder (FStar.Tactics.NamedView.Mkbinder_uniq __@x0)
(FStar.Tactics.NamedView.Mkbinder_ppname __@x0)
(FStar.Tactics.NamedView.Mkbinder_sort __@x0)
(FStar.Tactics.NamedView.Mkbinder_qual __@x0)
(FStar.Tactics.NamedView.Mkbinder_attrs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkbinder>


; </end encoding type FStar.Tactics.NamedView.binder>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq (Term) Term)
(declare-fun Tm_arrow_08a39d13d139efc327cbda171f647074 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq>


; <Skipped let __proj__Mkbinder__item__uniq/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname (Term) Term)
(declare-fun Tm_arrow_ef4e3a71e387a327f3cf2b29104d014d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname>


; <Skipped let __proj__Mkbinder__item__ppname/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__sort>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__sort (Term) Term)
(declare-fun Tm_arrow_70feaab7fe7549f942345d8bd5639b29 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__sort@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__sort>


; <Skipped let __proj__Mkbinder__item__sort/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__qual>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__qual (Term) Term)
(declare-fun Tm_arrow_722adbf5481f025715a2acc924c07eb1 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__qual@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__qual>


; <Skipped let __proj__Mkbinder__item__qual/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs (Term) Term)
(declare-fun Tm_arrow_aa263730cc5f78ee1837f0ce69b57ecf () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs>


; <Skipped let __proj__Mkbinder__item__attrs/>


; <Start encoding let binders>

(declare-fun FStar.Tactics.NamedView.binders () Term)

; </end encoding let binders>


; <Start encoding let is_simple_binder>

(declare-fun FStar.Tactics.NamedView.is_simple_binder (Term) Term)
(declare-fun Tm_arrow_0ac347260142cc85ff8e54f143e64273 () Term)
(declare-fun FStar.Tactics.NamedView.is_simple_binder@tok () Term)

; </end encoding let is_simple_binder>


; <Start encoding let simple_binder>

(declare-fun FStar.Tactics.NamedView.simple_binder () Term)
(declare-fun Tm_refine_b26ca2aff6a22929fb21b63f378a437f () Term)

; </end encoding let simple_binder>


; <Start encoding let univ_name>

(declare-fun FStar.Tactics.NamedView.univ_name () Term)

; </end encoding let univ_name>


; <Start encoding type FStar.Tactics.NamedView.named_universe_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_universe_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Zero () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Zero
(declare-fun FStar.Tactics.NamedView.Uv_Zero@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Succ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Succ__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Succ
(declare-fun FStar.Tactics.NamedView.Uv_Succ@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Max (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Max__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Max
(declare-fun FStar.Tactics.NamedView.Uv_Max@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_BVar__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_BVar
(declare-fun FStar.Tactics.NamedView.Uv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Name
(declare-fun FStar.Tactics.NamedView.Uv_Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Unif (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Unif__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Unif
(declare-fun FStar.Tactics.NamedView.Uv_Unif@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Uv_Unk
(declare-fun FStar.Tactics.NamedView.Uv_Unk@tok () Term)
(declare-fun Tm_arrow_a5dc599a61c297d256a91a62224cf872 () Term)
(declare-fun Tm_arrow_acc6e65062cd2ac4430e98229f449445 () Term)
(declare-fun Tm_arrow_83b5bd77f42ddf88e128a037a91a1caa () Term)
(declare-fun Tm_arrow_f691cf6e2583caa2c655a3fd34affe28 () Term)
(declare-fun Tm_arrow_6138e0120fe1d049793ce29e1088066d () Term)

; <start constructor FStar.Tactics.NamedView.named_universe_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_universe_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
124)
(= __@x0
FStar.Tactics.NamedView.named_universe_view)))

; </end constructor FStar.Tactics.NamedView.named_universe_view>


; <start constructor FStar.Tactics.NamedView.Uv_Zero>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Zero ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
FStar.Tactics.NamedView.Uv_Zero)))

; </end constructor FStar.Tactics.NamedView.Uv_Zero>


; <start constructor FStar.Tactics.NamedView.Uv_Succ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Succ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Tactics.NamedView.Uv_Succ (FStar.Tactics.NamedView.Uv_Succ__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Succ>


; <start constructor FStar.Tactics.NamedView.Uv_Max>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Max ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
(FStar.Tactics.NamedView.Uv_Max (FStar.Tactics.NamedView.Uv_Max__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Max>


; <start constructor FStar.Tactics.NamedView.Uv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
142)
(= __@x0
(FStar.Tactics.NamedView.Uv_BVar (FStar.Tactics.NamedView.Uv_BVar__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_BVar>


; <start constructor FStar.Tactics.NamedView.Uv_Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
147)
(= __@x0
(FStar.Tactics.NamedView.Uv_Name (FStar.Tactics.NamedView.Uv_Name__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Name>


; <start constructor FStar.Tactics.NamedView.Uv_Unif>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Unif ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
(FStar.Tactics.NamedView.Uv_Unif (FStar.Tactics.NamedView.Uv_Unif__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Unif>


; <start constructor FStar.Tactics.NamedView.Uv_Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
FStar.Tactics.NamedView.Uv_Unk)))

; </end constructor FStar.Tactics.NamedView.Uv_Unk>


; </end encoding type FStar.Tactics.NamedView.named_universe_view>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Zero>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Zero (Term) Term)
(declare-fun Tm_arrow_e916a0b037b2828ef3deb9a1be26cf82 () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Zero@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Zero>


; <Skipped let uu___is_Uv_Zero/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Succ>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Succ (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Succ@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Succ>


; <Skipped let uu___is_Uv_Succ/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_Succ__item___0>

(declare-fun Tm_refine_82914602a13807f685e45dd78cc5636a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Succ__item___0 (Term) Term)

(declare-fun Tm_arrow_86b6b5510e034ff9066d55ffd4a31409 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Succ__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_Succ__item___0>


; <Skipped let __proj__Uv_Succ__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Max>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Max (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Max@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Max>


; <Skipped let uu___is_Uv_Max/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_Max__item___0>

(declare-fun Tm_refine_6078923c349de6ec41dd797ce0f793ee () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Max__item___0 (Term) Term)

(declare-fun Tm_arrow_3ad365b0d4c48b2ce6cc186b5f7e3915 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Max__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_Max__item___0>


; <Skipped let __proj__Uv_Max__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_BVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_BVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_BVar@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_BVar>


; <Skipped let uu___is_Uv_BVar/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_BVar__item___0>

(declare-fun Tm_refine_47d91bede15db6781395bb141c3d640d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_BVar__item___0 (Term) Term)

(declare-fun Tm_arrow_8f977daeff3acc578f224eb1f9725ad5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_BVar__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_BVar__item___0>


; <Skipped let __proj__Uv_BVar__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Name>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Name (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Name@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Name>


; <Skipped let uu___is_Uv_Name/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_Name__item___0>

(declare-fun Tm_refine_69980a892705a9a64d8e676222efcd27 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Name__item___0 (Term) Term)

(declare-fun Tm_arrow_a7c4abfc1b3c544a740643b441a3f5ac () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Name__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_Name__item___0>


; <Skipped let __proj__Uv_Name__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Unif>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unif (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unif@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Unif>


; <Skipped let uu___is_Uv_Unif/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Uv_Unif__item___0>

(declare-fun Tm_refine_46ecd4555b9cddd750f1c172ed151b64 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Unif__item___0 (Term) Term)

(declare-fun Tm_arrow_fe78fda40aefa646a8abd98652e04aa7 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Unif__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Uv_Unif__item___0>


; <Skipped let __proj__Uv_Unif__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Uv_Unk>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unk (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unk@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Uv_Unk>


; <Skipped let uu___is_Uv_Unk/>


; <Start encoding type FStar.Tactics.NamedView.pattern__Pat_Constant__payload>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Constant__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Cons__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Var__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Constant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Pat_Constant
(declare-fun FStar.Tactics.NamedView.Pat_Constant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Cons (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Cons__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Pat_Cons
(declare-fun FStar.Tactics.NamedView.Pat_Cons@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Var__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Pat_Var
(declare-fun FStar.Tactics.NamedView.Pat_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Pat_Dot_Term
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term@tok () Term)
(declare-fun Tm_arrow_17b9d33df279f268d37848fbc7d30fa0 () Term)
(declare-fun Tm_arrow_8d0e99d3c62e0fc7a13b674cfdb206d0 () Term)
(declare-fun Tm_arrow_992f7dd404a352d26701596c50d97877 () Term)
(declare-fun Tm_arrow_e03f0a0f7e86d52a5702fc8aa7dae3ff () Term)
(declare-fun Tm_arrow_8cd97a05fb7067b5274a12cabe306fe9 () Term)
(declare-fun Tm_arrow_9fe372b4479ab15c100f1aa878d3645a () Term)
(declare-fun Tm_arrow_d631b9acc0e9c6e10dc5f3509d41050f () Term)
(declare-fun Tm_arrow_bb4c95c6d1ac5e3bc200c6b070f18283 () Term)

; <start constructor FStar.Tactics.NamedView.pattern__Pat_Constant__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Constant__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
192)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Constant__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Constant__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Cons__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Cons__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
197)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Cons__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Cons__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Var__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Var__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
202)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Var__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Var__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
207)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload>


; <start constructor FStar.Tactics.NamedView.pattern>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
212)
(= __@x0
FStar.Tactics.NamedView.pattern)))

; </end constructor FStar.Tactics.NamedView.pattern>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
218)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
223)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
228)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
233)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload>


; <start constructor FStar.Tactics.NamedView.Pat_Constant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Constant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
238)
(= __@x0
(FStar.Tactics.NamedView.Pat_Constant (FStar.Tactics.NamedView.Pat_Constant__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Constant>


; <start constructor FStar.Tactics.NamedView.Pat_Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
243)
(= __@x0
(FStar.Tactics.NamedView.Pat_Cons (FStar.Tactics.NamedView.Pat_Cons__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Cons>


; <start constructor FStar.Tactics.NamedView.Pat_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
248)
(= __@x0
(FStar.Tactics.NamedView.Pat_Var (FStar.Tactics.NamedView.Pat_Var__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Var>


; <start constructor FStar.Tactics.NamedView.Pat_Dot_Term>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Dot_Term ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
253)
(= __@x0
(FStar.Tactics.NamedView.Pat_Dot_Term (FStar.Tactics.NamedView.Pat_Dot_Term__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Dot_Term>


; </end encoding type FStar.Tactics.NamedView.pattern__Pat_Constant__payload>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c (Term) Term)
(declare-fun Tm_arrow_22923e70f0a5a9ed90bda9068057e193 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c>


; <Skipped let __proj__Mkpattern__Pat_Constant__payload__item__c/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head (Term) Term)
(declare-fun Tm_arrow_34cdc22ac0e27a1068072e34d6026f62 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head>


; <Skipped let __proj__Mkpattern__Pat_Cons__payload__item__head/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs (Term) Term)
(declare-fun Tm_arrow_1593598375eef9f68f56e6a4f741531d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs>


; <Skipped let __proj__Mkpattern__Pat_Cons__payload__item__univs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats (Term) Term)
(declare-fun Tm_arrow_013b012219d5f86b87e86a52228f37ee () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats>


; <Skipped let __proj__Mkpattern__Pat_Cons__payload__item__subpats/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v (Term) Term)
(declare-fun Tm_arrow_c5eb61aa8c75c93c411e2118222711bd () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v>


; <Skipped let __proj__Mkpattern__Pat_Var__payload__item__v/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort (Term) Term)
(declare-fun Tm_arrow_c0cf06658291c5365f31989995083375 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort>


; <Skipped let __proj__Mkpattern__Pat_Var__payload__item__sort/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t (Term) Term)
(declare-fun Tm_arrow_3bff8a953256246b4ca1722521469ae9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t>


; <Skipped let __proj__Mkpattern__Pat_Dot_Term__payload__item__t/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Pat_Constant>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Constant (Term) Term)
(declare-fun Tm_arrow_7a91e5e1f35c852edab70b3e95b8d139 () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Constant@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Pat_Constant>


; <Skipped let uu___is_Pat_Constant/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Pat_Constant__item___0>

(declare-fun Tm_refine_760215d17bae6326cab536ca4b3b4619 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Constant__item___0 (Term) Term)

(declare-fun Tm_arrow_422d85aa4e646a0fef8a09c3cca4294c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Constant__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Pat_Constant__item___0>


; <Skipped let __proj__Pat_Constant__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Pat_Cons>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Cons (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Cons@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Pat_Cons>


; <Skipped let uu___is_Pat_Cons/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Pat_Cons__item___0>

(declare-fun Tm_refine_1568b2d9001092df78423ad5031cadd0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Cons__item___0 (Term) Term)

(declare-fun Tm_arrow_df0caa47c66afdf8e0bd69017a9e531f () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Cons__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Pat_Cons__item___0>


; <Skipped let __proj__Pat_Cons__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Pat_Var>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Var (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Var@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Pat_Var>


; <Skipped let uu___is_Pat_Var/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Pat_Var__item___0>

(declare-fun Tm_refine_5915aca42c70b204fb8abd23a0546bb3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Var__item___0 (Term) Term)

(declare-fun Tm_arrow_18c14393d644dada37b2233d850662eb () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Var__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Pat_Var__item___0>


; <Skipped let __proj__Pat_Var__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Pat_Dot_Term>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Dot_Term (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Dot_Term@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Pat_Dot_Term>


; <Skipped let uu___is_Pat_Dot_Term/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0>

(declare-fun Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0 (Term) Term)

(declare-fun Tm_arrow_d908c4f3d32357c93a0576fc78c7bca2 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0>


; <Skipped let __proj__Pat_Dot_Term__item___0/>


; <Start encoding let branch>

(declare-fun FStar.Tactics.NamedView.branch () Term)

; </end encoding let branch>


; <Start encoding let match_returns_ascription>

(declare-fun FStar.Tactics.NamedView.match_returns_ascription () Term)

; </end encoding let match_returns_ascription>


; <Start encoding type FStar.Tactics.NamedView.named_term_view>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_term_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Var_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Var
(declare-fun FStar.Tactics.NamedView.Tv_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_BVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_BVar
(declare-fun FStar.Tactics.NamedView.Tv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_FVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_FVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_FVar
(declare-fun FStar.Tactics.NamedView.Tv_FVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_UInst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_UInst_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_UInst_us (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_UInst
(declare-fun FStar.Tactics.NamedView.Tv_UInst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_App_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_App_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_App
(declare-fun FStar.Tactics.NamedView.Tv_App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Abs (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Abs_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Abs_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Abs
(declare-fun FStar.Tactics.NamedView.Tv_Abs@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Arrow (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Arrow_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Arrow_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Arrow
(declare-fun FStar.Tactics.NamedView.Tv_Arrow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Type (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Type__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Type
(declare-fun FStar.Tactics.NamedView.Tv_Type@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Refine (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Refine_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Refine_ref (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Refine
(declare-fun FStar.Tactics.NamedView.Tv_Refine@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Const
(declare-fun FStar.Tactics.NamedView.Tv_Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Uvar (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Uvar__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Uvar__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Uvar
(declare-fun FStar.Tactics.NamedView.Tv_Uvar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Let (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_recf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_def (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Let
(declare-fun FStar.Tactics.NamedView.Tv_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Match (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_scrutinee (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_ret (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_brs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Match
(declare-fun FStar.Tactics.NamedView.Tv_Match@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_AscribedT
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_AscribedC
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Unknown
(declare-fun FStar.Tactics.NamedView.Tv_Unknown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Unsupp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Tv_Unsupp
(declare-fun FStar.Tactics.NamedView.Tv_Unsupp@tok () Term)
(declare-fun Tm_arrow_5c1f070e2c3f6aea1615ac72ff92f134 () Term)
(declare-fun Tm_arrow_aaa10438e13420dda77aa3ed15727e4f () Term)
(declare-fun Tm_arrow_e107b194c88d1202423eb9ac23dac0af () Term)
(declare-fun Tm_arrow_6a5c7eba81bbbea89549c5a73eba6930 () Term)
(declare-fun Tm_arrow_1909d6b2f543242d55c9b8e08141e0f1 () Term)
(declare-fun Tm_arrow_c466bfd390c5c2953a0b9c01aa2c0322 () Term)
(declare-fun Tm_arrow_583298f1189de1bc298fabe31fbced3a () Term)
(declare-fun Tm_arrow_3e6a09cde00868268e5919de8a6657aa () Term)
(declare-fun Tm_arrow_6e92ffeaaa5d327976e53a059cd42f75 () Term)
(declare-fun Tm_arrow_ba8d0d0b6e512d1bae2e554eadbce6a9 () Term)
(declare-fun Tm_arrow_96470e8b8b602d2238f3b130218bd83f () Term)
(declare-fun Tm_arrow_08012edb60a091ece3537a1d8f61a364 () Term)
(declare-fun Tm_arrow_439cc7b7d6fca19547b77142f4ef5258 () Term)
(declare-fun Tm_arrow_7308c93679c51dd735c2021e0a08790a () Term)
(declare-fun Tm_arrow_8e79e8a538e31266017e62070623d864 () Term)

; <start constructor FStar.Tactics.NamedView.named_term_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_term_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
295)
(= __@x0
FStar.Tactics.NamedView.named_term_view)))

; </end constructor FStar.Tactics.NamedView.named_term_view>


; <start constructor FStar.Tactics.NamedView.Tv_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
301)
(= __@x0
(FStar.Tactics.NamedView.Tv_Var (FStar.Tactics.NamedView.Tv_Var_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Var>


; <start constructor FStar.Tactics.NamedView.Tv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
306)
(= __@x0
(FStar.Tactics.NamedView.Tv_BVar (FStar.Tactics.NamedView.Tv_BVar_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_BVar>


; <start constructor FStar.Tactics.NamedView.Tv_FVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_FVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
311)
(= __@x0
(FStar.Tactics.NamedView.Tv_FVar (FStar.Tactics.NamedView.Tv_FVar_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_FVar>


; <start constructor FStar.Tactics.NamedView.Tv_UInst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_UInst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
316)
(= __@x0
(FStar.Tactics.NamedView.Tv_UInst (FStar.Tactics.NamedView.Tv_UInst_v __@x0)
(FStar.Tactics.NamedView.Tv_UInst_us __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_UInst>


; <start constructor FStar.Tactics.NamedView.Tv_App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(= __@x0
(FStar.Tactics.NamedView.Tv_App (FStar.Tactics.NamedView.Tv_App_hd __@x0)
(FStar.Tactics.NamedView.Tv_App_a __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_App>


; <start constructor FStar.Tactics.NamedView.Tv_Abs>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Abs ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
326)
(= __@x0
(FStar.Tactics.NamedView.Tv_Abs (FStar.Tactics.NamedView.Tv_Abs_b __@x0)
(FStar.Tactics.NamedView.Tv_Abs_body __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Abs>


; <start constructor FStar.Tactics.NamedView.Tv_Arrow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
331)
(= __@x0
(FStar.Tactics.NamedView.Tv_Arrow (FStar.Tactics.NamedView.Tv_Arrow_b __@x0)
(FStar.Tactics.NamedView.Tv_Arrow_c __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Arrow>


; <start constructor FStar.Tactics.NamedView.Tv_Type>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
336)
(= __@x0
(FStar.Tactics.NamedView.Tv_Type (FStar.Tactics.NamedView.Tv_Type__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Type>


; <start constructor FStar.Tactics.NamedView.Tv_Refine>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Refine ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
341)
(= __@x0
(FStar.Tactics.NamedView.Tv_Refine (FStar.Tactics.NamedView.Tv_Refine_b __@x0)
(FStar.Tactics.NamedView.Tv_Refine_ref __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Refine>


; <start constructor FStar.Tactics.NamedView.Tv_Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
346)
(= __@x0
(FStar.Tactics.NamedView.Tv_Const (FStar.Tactics.NamedView.Tv_Const__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Const>


; <start constructor FStar.Tactics.NamedView.Tv_Uvar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Uvar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
351)
(= __@x0
(FStar.Tactics.NamedView.Tv_Uvar (FStar.Tactics.NamedView.Tv_Uvar__0 __@x0)
(FStar.Tactics.NamedView.Tv_Uvar__1 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Uvar>


; <start constructor FStar.Tactics.NamedView.Tv_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
356)
(= __@x0
(FStar.Tactics.NamedView.Tv_Let (FStar.Tactics.NamedView.Tv_Let_recf __@x0)
(FStar.Tactics.NamedView.Tv_Let_attrs __@x0)
(FStar.Tactics.NamedView.Tv_Let_b __@x0)
(FStar.Tactics.NamedView.Tv_Let_def __@x0)
(FStar.Tactics.NamedView.Tv_Let_body __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Let>


; <start constructor FStar.Tactics.NamedView.Tv_Match>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Match ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Tactics.NamedView.Tv_Match (FStar.Tactics.NamedView.Tv_Match_scrutinee __@x0)
(FStar.Tactics.NamedView.Tv_Match_ret __@x0)
(FStar.Tactics.NamedView.Tv_Match_brs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Match>


; <start constructor FStar.Tactics.NamedView.Tv_AscribedT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_AscribedT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
366)
(= __@x0
(FStar.Tactics.NamedView.Tv_AscribedT (FStar.Tactics.NamedView.Tv_AscribedT_e __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_t __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_tac __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_use_eq __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_AscribedT>


; <start constructor FStar.Tactics.NamedView.Tv_AscribedC>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_AscribedC ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
371)
(= __@x0
(FStar.Tactics.NamedView.Tv_AscribedC (FStar.Tactics.NamedView.Tv_AscribedC_e __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_c __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_tac __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_use_eq __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_AscribedC>


; <start constructor FStar.Tactics.NamedView.Tv_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
376)
(= __@x0
FStar.Tactics.NamedView.Tv_Unknown)))

; </end constructor FStar.Tactics.NamedView.Tv_Unknown>


; <start constructor FStar.Tactics.NamedView.Tv_Unsupp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Unsupp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
378)
(= __@x0
FStar.Tactics.NamedView.Tv_Unsupp)))

; </end constructor FStar.Tactics.NamedView.Tv_Unsupp>


; </end encoding type FStar.Tactics.NamedView.named_term_view>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Var>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Var (Term) Term)
(declare-fun Tm_arrow_b0134b51f4be4e72310d2f9fb37ce6ad () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Var@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Var>


; <Skipped let uu___is_Tv_Var/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Var__item__v>

(declare-fun Tm_refine_87a3dba5453ef74fda9f0336086dad8a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Var__item__v (Term) Term)

(declare-fun Tm_arrow_c9328b6bd1807daa66bd2926d95e76f5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Var__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Var__item__v>


; <Skipped let __proj__Tv_Var__item__v/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_BVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_BVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_BVar@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_BVar>


; <Skipped let uu___is_Tv_BVar/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_BVar__item__v>

(declare-fun Tm_refine_2041770b714b0ea10869e92b575e16fd () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_BVar__item__v (Term) Term)

(declare-fun Tm_arrow_c49fc6ef2dccc52996b9034f265f34b8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_BVar__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_BVar__item__v>


; <Skipped let __proj__Tv_BVar__item__v/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_FVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_FVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_FVar@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_FVar>


; <Skipped let uu___is_Tv_FVar/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_FVar__item__v>

(declare-fun Tm_refine_7aae385a6086c7833dd8519240cd12b3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_FVar__item__v (Term) Term)

(declare-fun Tm_arrow_3b035adde69083f038e18658ffe5cf95 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_FVar__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_FVar__item__v>


; <Skipped let __proj__Tv_FVar__item__v/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_UInst>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_UInst (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_UInst@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_UInst>


; <Skipped let uu___is_Tv_UInst/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_UInst__item__v>

(declare-fun Tm_refine_655439b8882f5161418b9e9a204ac9a0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__v (Term) Term)

(declare-fun Tm_arrow_c2b162197c1542fb5d84d2b59db05d0e () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__v@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_UInst__item__v>


; <Skipped let __proj__Tv_UInst__item__v/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_UInst__item__us>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__us (Term) Term)

(declare-fun Tm_arrow_e352544daf155d6e18b76457dd205930 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__us@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_UInst__item__us>


; <Skipped let __proj__Tv_UInst__item__us/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_App>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_App (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_App@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_App>


; <Skipped let uu___is_Tv_App/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_App__item__hd>

(declare-fun Tm_refine_cffc8fe5fb5b8b45155c826839a0836a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__hd (Term) Term)

(declare-fun Tm_arrow_8846e221b3719edc894c953a1ba8378a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__hd@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_App__item__hd>


; <Skipped let __proj__Tv_App__item__hd/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_App__item__a>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__a (Term) Term)

(declare-fun Tm_arrow_2aab43ea5f22689a8a6d079612e39488 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__a@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_App__item__a>


; <Skipped let __proj__Tv_App__item__a/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Abs>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Abs (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Abs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Abs>


; <Skipped let uu___is_Tv_Abs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Abs__item__b>

(declare-fun Tm_refine_5d3cef9f2193748f571d405779044e57 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__b (Term) Term)

(declare-fun Tm_arrow_533a28ddfb46ecc82a01bbe48c31bd95 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__b@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Abs__item__b>


; <Skipped let __proj__Tv_Abs__item__b/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Abs__item__body>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__body (Term) Term)

(declare-fun Tm_arrow_8ac939080effe0b960302d7d1c702fad () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__body@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Abs__item__body>


; <Skipped let __proj__Tv_Abs__item__body/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Arrow>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Arrow (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Arrow@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Arrow>


; <Skipped let uu___is_Tv_Arrow/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b>

(declare-fun Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b (Term) Term)

(declare-fun Tm_arrow_84eeab64ef961ed4b09155732e1a0f44 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Arrow__item__b>


; <Skipped let __proj__Tv_Arrow__item__b/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c (Term) Term)

(declare-fun Tm_arrow_eda0809078946fc4fc204af5aa4c5b64 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c>


; <Skipped let __proj__Tv_Arrow__item__c/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Type>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Type (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Type@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Type>


; <Skipped let uu___is_Tv_Type/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Type__item___0>

(declare-fun Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Type__item___0 (Term) Term)

(declare-fun Tm_arrow_583e9c9e3efeee738c16adf7ba043152 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Type__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Type__item___0>


; <Skipped let __proj__Tv_Type__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Refine>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Refine (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Refine@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Refine>


; <Skipped let uu___is_Tv_Refine/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Refine__item__b>

(declare-fun Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__b (Term) Term)

(declare-fun Tm_arrow_659b4038825ae53b9e315e2e0a5a9de5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__b@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Refine__item__b>


; <Skipped let __proj__Tv_Refine__item__b/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref (Term) Term)

(declare-fun Tm_arrow_0816d3b11d85c3f2303944343eb3e1fe () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref>


; <Skipped let __proj__Tv_Refine__item__ref/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Const>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Const (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Const@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Const>


; <Skipped let uu___is_Tv_Const/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Const__item___0>

(declare-fun Tm_refine_e43528237c88eee4c4a7209fbfece30a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Const__item___0 (Term) Term)

(declare-fun Tm_arrow_f6aaceef6b80757c3a7eec8e1ffeb50d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Const__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Const__item___0>


; <Skipped let __proj__Tv_Const__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Uvar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Uvar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Uvar@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Uvar>


; <Skipped let uu___is_Tv_Uvar/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0>

(declare-fun Tm_refine_2dfafc08974a66f04ebf362802f0a508 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0 (Term) Term)

(declare-fun Tm_arrow_ec7bb113cc94ec4876ca7ad0476bef43 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0>


; <Skipped let __proj__Tv_Uvar__item___0/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1 (Term) Term)

(declare-fun Tm_arrow_cefaf448023d2e24eeeea03152c7031a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1>


; <Skipped let __proj__Tv_Uvar__item___1/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Let>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Let (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Let@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Let>


; <Skipped let uu___is_Tv_Let/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__recf>

(declare-fun Tm_refine_580a83cfd5a14ce77506ef9a20b92d03 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__recf (Term) Term)

(declare-fun Tm_arrow_a2937e85ca73965969d4411bca79b361 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__recf@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__recf>


; <Skipped let __proj__Tv_Let__item__recf/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs (Term) Term)

(declare-fun Tm_arrow_d2c895353b6d5a4384a49402bb656311 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs>


; <Skipped let __proj__Tv_Let__item__attrs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__b>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__b (Term) Term)

(declare-fun Tm_arrow_7afa8f78666d0cdafdd5b868cc36fff9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__b@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__b>


; <Skipped let __proj__Tv_Let__item__b/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__def>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__def (Term) Term)

(declare-fun Tm_arrow_27b154f2dcda99708e6d9e52ad3a1e5d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__def@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__def>


; <Skipped let __proj__Tv_Let__item__def/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__body>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__body (Term) Term)


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__body@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Let__item__body>


; <Skipped let __proj__Tv_Let__item__body/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Match>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Match (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Match@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Match>


; <Skipped let uu___is_Tv_Match/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee>

(declare-fun Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee (Term) Term)

(declare-fun Tm_arrow_eff0944c33909c5240469d840f765450 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee>


; <Skipped let __proj__Tv_Match__item__scrutinee/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__ret>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__ret (Term) Term)

(declare-fun Tm_arrow_a38a29fac0905320916f043dc1e2e402 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__ret@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__ret>


; <Skipped let __proj__Tv_Match__item__ret/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__brs>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__brs (Term) Term)

(declare-fun Tm_arrow_9753b34ee743aec7dee6ff8aad4e29c8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__brs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_Match__item__brs>


; <Skipped let __proj__Tv_Match__item__brs/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_AscribedT>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedT (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedT@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_AscribedT>


; <Skipped let uu___is_Tv_AscribedT/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e>

(declare-fun Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e (Term) Term)

(declare-fun Tm_arrow_3a2e0dc20e001c8cef41ab602e078f6e () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e>


; <Skipped let __proj__Tv_AscribedT__item__e/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t (Term) Term)


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t>


; <Skipped let __proj__Tv_AscribedT__item__t/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac (Term) Term)

(declare-fun Tm_arrow_64636f29beeaef053738d09e320bbe94 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac>


; <Skipped let __proj__Tv_AscribedT__item__tac/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq (Term) Term)

(declare-fun Tm_arrow_eb184a2f728421d0662c81a49d628354 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq>


; <Skipped let __proj__Tv_AscribedT__item__use_eq/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_AscribedC>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedC (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedC@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_AscribedC>


; <Skipped let uu___is_Tv_AscribedC/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e>

(declare-fun Tm_refine_188807386559837eacdc72e583387de0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e (Term) Term)

(declare-fun Tm_arrow_b08d9f9ed5fc9183d44b539596c21c5c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e>


; <Skipped let __proj__Tv_AscribedC__item__e/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c (Term) Term)

(declare-fun Tm_arrow_61b8c61abe9f4144303ab93b91d20fbc () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c>


; <Skipped let __proj__Tv_AscribedC__item__c/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac (Term) Term)

(declare-fun Tm_arrow_b8c3ff01cef6a61dc79dd2ae7a29d01e () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac>


; <Skipped let __proj__Tv_AscribedC__item__tac/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq (Term) Term)

(declare-fun Tm_arrow_f90859595913cf4f3de92a943740cd55 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq>


; <Skipped let __proj__Tv_AscribedC__item__use_eq/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Unknown>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unknown (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unknown@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Unknown>


; <Skipped let uu___is_Tv_Unknown/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Tv_Unsupp>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unsupp (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unsupp@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Tv_Unsupp>


; <Skipped let uu___is_Tv_Unsupp/>


; <Start encoding let notAscription>

(declare-fun FStar.Tactics.NamedView.notAscription (Term) Term)

(declare-fun FStar.Tactics.NamedView.notAscription@tok () Term)

; </end encoding let notAscription>


; <Start encoding type FStar.Tactics.NamedView.letbinding>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.letbinding () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkletbinding (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_fv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_def (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mkletbinding
(declare-fun FStar.Tactics.NamedView.Mkletbinding@tok () Term)
(declare-fun Tm_arrow_b0b9fc2d17e477ab0db727ac25ca4f92 () Term)

; <start constructor FStar.Tactics.NamedView.letbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.letbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
547)
(= __@x0
FStar.Tactics.NamedView.letbinding)))

; </end constructor FStar.Tactics.NamedView.letbinding>


; <start constructor FStar.Tactics.NamedView.Mkletbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkletbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
553)
(= __@x0
(FStar.Tactics.NamedView.Mkletbinding (FStar.Tactics.NamedView.Mkletbinding_lb_fv __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_us __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_typ __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_def __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkletbinding>


; </end encoding type FStar.Tactics.NamedView.letbinding>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv (Term) Term)
(declare-fun Tm_arrow_965f82522ab41af607f92b7910914ec6 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv>


; <Skipped let __proj__Mkletbinding__item__lb_fv/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us (Term) Term)
(declare-fun Tm_arrow_e979dfb8134fb1ac00f85ff4b40e99a6 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us>


; <Skipped let __proj__Mkletbinding__item__lb_us/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ (Term) Term)
(declare-fun Tm_arrow_65622ab9799f3f673cc650b19fb2f7cb () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ>


; <Skipped let __proj__Mkletbinding__item__lb_typ/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def (Term) Term)
(declare-fun Tm_arrow_2cbd0d813eb17cbf0b91057a32b49d89 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def>


; <Skipped let __proj__Mkletbinding__item__lb_def/>


; <Start encoding type FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Let (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Let__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Sg_Let
(declare-fun FStar.Tactics.NamedView.Sg_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Inductive (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Inductive__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Sg_Inductive
(declare-fun FStar.Tactics.NamedView.Sg_Inductive@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Val (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Val__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Sg_Val
(declare-fun FStar.Tactics.NamedView.Sg_Val@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.NamedView.Unk
(declare-fun FStar.Tactics.NamedView.Unk@tok () Term)
(declare-fun Tm_arrow_392585e47d2e2fac4c96513a951b1fc4 () Term)
(declare-fun Tm_arrow_be1ebdad114f46009c70dc5a3532ae93 () Term)
(declare-fun Tm_arrow_6569b6a4b9afe863b55b0cf42391907c () Term)
(declare-fun Tm_arrow_536bc480bd335431d8cc6beac43db86f () Term)
(declare-fun Tm_arrow_9b69c65ad3324d98a697d3b15b2aa92a () Term)
(declare-fun Tm_arrow_2be07bfe3cf492d548ee516e9402e789 () Term)

; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
565)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
570)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
575)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
580)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
586)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
591)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
596)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload>


; <start constructor FStar.Tactics.NamedView.Sg_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
601)
(= __@x0
(FStar.Tactics.NamedView.Sg_Let (FStar.Tactics.NamedView.Sg_Let__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Let>


; <start constructor FStar.Tactics.NamedView.Sg_Inductive>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Inductive ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
606)
(= __@x0
(FStar.Tactics.NamedView.Sg_Inductive (FStar.Tactics.NamedView.Sg_Inductive__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Inductive>


; <start constructor FStar.Tactics.NamedView.Sg_Val>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Val ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
611)
(= __@x0
(FStar.Tactics.NamedView.Sg_Val (FStar.Tactics.NamedView.Sg_Val__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Val>


; <start constructor FStar.Tactics.NamedView.Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
616)
(= __@x0
FStar.Tactics.NamedView.Unk)))

; </end constructor FStar.Tactics.NamedView.Unk>


; </end encoding type FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec (Term) Term)
(declare-fun Tm_arrow_aaff68d57b0875330c75bc953f316682 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs (Term) Term)
(declare-fun Tm_arrow_53770d7a51f86c13cc17bc98fce36699 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm (Term) Term)
(declare-fun Tm_arrow_29037ae3125c6481ce57ad717c78697d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs (Term) Term)
(declare-fun Tm_arrow_cfd13254a7ba2e69c5914b2284de05ab () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params (Term) Term)
(declare-fun Tm_arrow_4503754e3330e24cfe44afc98a619ca0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ (Term) Term)
(declare-fun Tm_arrow_df95ebc34631f8a69ba5048f2f183acc () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors (Term) Term)
(declare-fun Tm_arrow_6d7b221c53ca2f6f4f58688c832cc1ce () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm (Term) Term)
(declare-fun Tm_arrow_6fd2fde9a1b673fcdc5db54818bc8db8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs (Term) Term)
(declare-fun Tm_arrow_a1246963bd81037b71d15767330931e8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ (Term) Term)
(declare-fun Tm_arrow_0de852e6fb5eb26dbd0c7bb76f69d068 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ>


; <Skipped let __proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Sg_Let>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Let (Term) Term)
(declare-fun Tm_arrow_2c9ec09a25324d0dfcb868a9cadd041c () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Let@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Sg_Let>


; <Skipped let uu___is_Sg_Let/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Sg_Let__item___0>

(declare-fun Tm_refine_0c417824af864c5dfeb7045b84af008c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Let__item___0 (Term) Term)

(declare-fun Tm_arrow_626926c71a57535b0a54f997204b535a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Let__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Sg_Let__item___0>


; <Skipped let __proj__Sg_Let__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Sg_Inductive>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Inductive (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Inductive@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Sg_Inductive>


; <Skipped let uu___is_Sg_Inductive/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0>

(declare-fun Tm_refine_452c9c8e2825a8035099cf4978a670c1 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0 (Term) Term)

(declare-fun Tm_arrow_2ba29f7110aa05972617995199b050f8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0>


; <Skipped let __proj__Sg_Inductive__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Sg_Val>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Val (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Val@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Sg_Val>


; <Skipped let uu___is_Sg_Val/>


; <Start encoding val FStar.Tactics.NamedView.__proj__Sg_Val__item___0>

(declare-fun Tm_refine_ca9b00c9dce34c559545c63ba449a355 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Val__item___0 (Term) Term)

(declare-fun Tm_arrow_815a38312c4a45af3e2d72ab74e7bc06 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Val__item___0@tok () Term)

; </end encoding val FStar.Tactics.NamedView.__proj__Sg_Val__item___0>


; <Skipped let __proj__Sg_Val__item___0/>


; <Start encoding val FStar.Tactics.NamedView.uu___is_Unk>

(declare-fun FStar.Tactics.NamedView.uu___is_Unk (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Unk@tok () Term)

; </end encoding val FStar.Tactics.NamedView.uu___is_Unk>


; <Skipped let uu___is_Unk/>


; <Start encoding let binder_to_binding>

(declare-fun FStar.Tactics.NamedView.binder_to_binding (Term) Term)
(declare-fun Tm_arrow_5774b4e874c675b6315c84fcfcbdc28d () Term)
(declare-fun FStar.Tactics.NamedView.binder_to_binding@tok () Term)

; </end encoding let binder_to_binding>


; <Start encoding let binding_to_binder>

(declare-fun FStar.Tactics.NamedView.binding_to_binder (Term) Term)
(declare-fun Tm_arrow_2aae07af48e630a36a74010e928b207c () Term)
(declare-fun FStar.Tactics.NamedView.binding_to_binder@tok () Term)

; </end encoding let binding_to_binder>


; <Start encoding let namedv_to_binder>

(declare-fun FStar.Tactics.NamedView.namedv_to_binder (Term Term) Term)
(declare-fun Tm_arrow_81c2241d339a64fbc6ee0b791881f7cf () Term)
(declare-fun FStar.Tactics.NamedView.namedv_to_binder@tok () Term)

; </end encoding let namedv_to_binder>


; <Start encoding val FStar.Tactics.NamedView.inspect_universe>

(declare-fun FStar.Tactics.NamedView.inspect_universe (Term) Term)

(declare-fun FStar.Tactics.NamedView.inspect_universe@tok () Term)

; </end encoding val FStar.Tactics.NamedView.inspect_universe>


; <Start encoding val FStar.Tactics.NamedView.pack_universe>

(declare-fun FStar.Tactics.NamedView.pack_universe (Term) Term)
(declare-fun Tm_arrow_236bceac04b4b849e9b798ec7570352f () Term)
(declare-fun FStar.Tactics.NamedView.pack_universe@tok () Term)

; </end encoding val FStar.Tactics.NamedView.pack_universe>


; <Start encoding val FStar.Tactics.NamedView.close_term>

(declare-fun FStar.Tactics.NamedView.close_term (Term Term) Term)
(declare-fun Tm_arrow_2835abdc068cc15811221f0baf29dc6a () Term)
(declare-fun FStar.Tactics.NamedView.close_term@tok () Term)

; </end encoding val FStar.Tactics.NamedView.close_term>


; <Start encoding val FStar.Tactics.NamedView.inspect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.inspect (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.inspect@tok () Term)

; </end encoding val FStar.Tactics.NamedView.inspect>


; <Start encoding val FStar.Tactics.NamedView.pack>

(declare-fun FStar.Tactics.NamedView.pack (Term) Term)
(declare-fun Tm_arrow_0d64c4333643212c8dd1cdd74a87ec36 () Term)
(declare-fun FStar.Tactics.NamedView.pack@tok () Term)

; </end encoding val FStar.Tactics.NamedView.pack>


; <Start encoding val FStar.Tactics.NamedView.inspect_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.inspect_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.inspect_sigelt@tok () Term)

; </end encoding val FStar.Tactics.NamedView.inspect_sigelt>


; <Start encoding val FStar.Tactics.NamedView.pack_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.pack_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.pack_sigelt@tok () Term)

; </end encoding val FStar.Tactics.NamedView.pack_sigelt>


; <Start encoding val FStar.Tactics.NamedView.tcc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.tcc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.tcc@tok () Term)

; </end encoding val FStar.Tactics.NamedView.tcc>


; <Start encoding val FStar.Tactics.NamedView.comp_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.comp_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.comp_to_string@tok () Term)

; </end encoding val FStar.Tactics.NamedView.comp_to_string>


; <Start encoding let universe_view>

(declare-fun FStar.Tactics.NamedView.universe_view () Term)

; </end encoding let universe_view>


; <Start encoding let term_view>

(declare-fun FStar.Tactics.NamedView.term_view () Term)

; </end encoding let term_view>


; <Start encoding let sigelt_view>

(declare-fun FStar.Tactics.NamedView.sigelt_view () Term)

; </end encoding let sigelt_view>


; <Start encoding let inspect_namedv>

(declare-fun FStar.Tactics.NamedView.inspect_namedv (Term) Term)
(declare-fun Tm_arrow_2705aa32fdc5cf41c1ff313d9469a249 () Term)
(declare-fun FStar.Tactics.NamedView.inspect_namedv@tok () Term)

; </end encoding let inspect_namedv>


; <Start encoding let pack_namedv>

(declare-fun FStar.Tactics.NamedView.pack_namedv (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_namedv@tok () Term)

; </end encoding let pack_namedv>


; <Start encoding let inspect_bv>

(declare-fun FStar.Tactics.NamedView.inspect_bv (Term) Term)
(declare-fun Tm_arrow_b7765516170041d06fd16f4e95d2a2e6 () Term)
(declare-fun FStar.Tactics.NamedView.inspect_bv@tok () Term)

; </end encoding let inspect_bv>


; <Start encoding let pack_bv>

(declare-fun FStar.Tactics.NamedView.pack_bv (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_bv@tok () Term)

; </end encoding let pack_bv>


; <Start encoding let inspect_comp>

(declare-fun FStar.Tactics.NamedView.inspect_comp (Term) Term)
(declare-fun Tm_arrow_f9487c8dc952463a973caec1d5c506eb () Term)
(declare-fun FStar.Tactics.NamedView.inspect_comp@tok () Term)

; </end encoding let inspect_comp>


; <Start encoding let pack_comp>

(declare-fun FStar.Tactics.NamedView.pack_comp (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_comp@tok () Term)

; </end encoding let pack_comp>


; <Start encoding let tag_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.tag_of (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.tag_of@tok () Term)

; </end encoding let tag_of>


; End Externals for interface FStar.Tactics.NamedView


; Externals for interface FStar.Stubs.Tactics.Unseal


; <Start encoding val FStar.Stubs.Tactics.Unseal.unseal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.Unseal.unseal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.Unseal.unseal@tok () Term)

; </end encoding val FStar.Stubs.Tactics.Unseal.unseal>


; End Externals for interface FStar.Stubs.Tactics.Unseal


; Externals for interface FStar.Stubs.Tactics.V2.Builtins


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.compress>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.compress (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.compress@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.compress>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.top_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.top_env (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.top_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.top_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.fresh>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.fresh (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.fresh@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.fresh>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.refine_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.refine_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.refine_intro@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.refine_intro>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.tc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.tc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.tcc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tcc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tcc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.tcc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.unshelve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unshelve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unshelve@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.unshelve>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.unquote>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unquote (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unquote@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.unquote>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.catch>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.catch (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.catch@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.catch>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.recover>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.recover (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.recover@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.recover>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.norm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.norm>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.norm_term_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_term_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_term_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.norm_term_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.norm_binding_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_binding_type (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_binding_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.norm_binding_type>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intro@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.intro>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intros@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.intros>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.intro_rec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intro_rec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.intro_rec@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.intro_rec>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.rename_to>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.rename_to (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.rename_to@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.rename_to>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.revert>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.revert (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.revert@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.revert>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.var_retype>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.var_retype (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.var_retype@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.var_retype>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.clear_top>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.clear_top (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.clear_top@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.clear_top>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.clear>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.clear (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.clear@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.clear>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.rewrite (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.rewrite@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.rewrite>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.grewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.grewrite (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.grewrite@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.grewrite>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_exact@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_exact>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_apply (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_apply@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_apply>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_apply_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_apply_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_apply_lemma@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_apply_lemma>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.print>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.print (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.print@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.print>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.debugging>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.debugging (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.debugging@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.debugging>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ide (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ide@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ide>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.dump>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.dump>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.dump_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump_all (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump_all@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.dump_all>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.dump_uvars_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump_uvars_of (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dump_uvars_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.dump_uvars_of>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_trefl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_trefl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_trefl@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_trefl>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_commute_applied_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_commute_applied_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_commute_applied_match@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_commute_applied_match>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ctrl_rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ctrl_rewrite (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ctrl_rewrite@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ctrl_rewrite>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.dup>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dup (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.dup@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.dup>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.prune>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.prune (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.prune@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.prune>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.addns>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.addns (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.addns@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.addns>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_destruct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_destruct (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_destruct@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_destruct>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_options>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_options (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_options@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_options>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.uvar_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.uvar_env (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.uvar_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.uvar_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ghost_uvar_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ghost_uvar_env (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ghost_uvar_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ghost_uvar_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.fresh_universe_uvar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.fresh_universe_uvar (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.fresh_universe_uvar@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.fresh_universe_uvar>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.unify_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unify_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unify_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.unify_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.unify_guard_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unify_guard_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.unify_guard_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.unify_guard_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.match_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.match_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.match_env@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.match_env>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.launch_process>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.launch_process (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.launch_process@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.launch_process>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.change>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.change (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.change@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.change>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.get_guard_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.get_guard_policy (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.get_guard_policy@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.get_guard_policy>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_guard_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_guard_policy (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_guard_policy@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_guard_policy>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.lax_on>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lax_on (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lax_on@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.lax_on>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.tadmit_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tadmit_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tadmit_t@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.tadmit_t>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.join>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.join (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.join@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.join>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.lget>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lget (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lget@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.lget>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.lset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.lset@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.lset>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_goals@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_goals>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_smt_goals@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_smt_goals>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.curms>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.curms (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.curms@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.curms>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_urgency>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_urgency (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_urgency@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_urgency>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_dump_on_failure>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_dump_on_failure (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_dump_on_failure@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_dump_on_failure>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.string_to_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.string_to_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.string_to_term@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.string_to_term>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.push_bv_dsenv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_bv_dsenv (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_bv_dsenv@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.push_bv_dsenv>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.term_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_to_string@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.term_to_string>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.comp_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.comp_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.comp_to_string@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.comp_to_string>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.term_to_doc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_to_doc (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_to_doc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.term_to_doc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.comp_to_doc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.comp_to_doc (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.comp_to_doc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.comp_to_doc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.range_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.range_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.range_to_string@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.range_to_string>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.term_eq_old>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_eq_old (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.term_eq_old@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.term_eq_old>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.with_compat_pre_core>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.with_compat_pre_core (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.with_compat_pre_core@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.with_compat_pre_core>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.get_vconfig>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.get_vconfig (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.get_vconfig@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.get_vconfig>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.set_vconfig>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_vconfig (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.set_vconfig@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.set_vconfig>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_smt_sync@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_smt_sync>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.free_uvars>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.free_uvars (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.free_uvars@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.free_uvars>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.all_ext_options>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.all_ext_options (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.all_ext_options@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.all_ext_options>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ext_getv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ext_getv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ext_getv@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ext_getv>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.ext_getns>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ext_getns (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.ext_getns@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.ext_getns>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.alloc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.alloc@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.alloc>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.read>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.read (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.read@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.read>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.write>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.write (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.write@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.write>


; <Start encoding let ret_t>

(declare-fun FStar.Stubs.Tactics.V2.Builtins.ret_t (Term) Term)

(declare-fun FStar.Stubs.Tactics.V2.Builtins.ret_t@tok () Term)

; </end encoding let ret_t>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.is_non_informative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.is_non_informative (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.is_non_informative@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.is_non_informative>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.check_subtyping>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_subtyping (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_subtyping@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.check_subtyping>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.t_check_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_check_equiv (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.t_check_equiv@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.t_check_equiv>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.core_compute_term_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_compute_term_type (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_compute_term_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.core_compute_term_type>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.core_check_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_check_term (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_check_term@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.core_check_term>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.core_check_term_at_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_check_term_at_type (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.core_check_term_at_type@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.core_check_term_at_type>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.tc_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tc_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.tc_term@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.tc_term>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.universe_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.universe_of (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.universe_of@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.universe_of>


; <Start encoding let prop_validity_token>

(declare-fun FStar.Stubs.Tactics.V2.Builtins.prop_validity_token (Term Term) Term)
(declare-fun Tm_arrow_452d5517157e102536bdbbed759b7cb7 () Term)
(declare-fun FStar.Stubs.Tactics.V2.Builtins.prop_validity_token@tok () Term)
(declare-fun Tm_refine_96e3d4ddbb6584115ed4c174cb241a52 (Term Term) Term)

; </end encoding let prop_validity_token>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.check_prop_validity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_prop_validity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_prop_validity@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.check_prop_validity>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.match_complete_token>

(declare-fun FStar.Stubs.Tactics.V2.Builtins.match_complete_token (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_91d3043b9be2e5652dcb908724cf5015 () Term)
(declare-fun FStar.Stubs.Tactics.V2.Builtins.match_complete_token@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.match_complete_token>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.check_match_complete>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_match_complete (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.check_match_complete@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.check_match_complete>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.instantiate_implicits>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.instantiate_implicits (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.instantiate_implicits@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.instantiate_implicits>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.try_unify>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.try_unify (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.try_unify@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.try_unify>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.maybe_relate_after_unfolding>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.maybe_relate_after_unfolding (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.maybe_relate_after_unfolding@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.maybe_relate_after_unfolding>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.maybe_unfold_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.maybe_unfold_head (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.maybe_unfold_head@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.maybe_unfold_head>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.norm_well_typed_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_well_typed_term (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.norm_well_typed_term@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.norm_well_typed_term>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.push_open_namespace>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_open_namespace (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_open_namespace@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.push_open_namespace>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.push_module_abbrev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_module_abbrev (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.push_module_abbrev@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.push_module_abbrev>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.resolve_name>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.resolve_name (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.resolve_name@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.resolve_name>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.log_issues>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.log_issues (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.log_issues@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.log_issues>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.call_subtac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.call_subtac (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.call_subtac@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.call_subtac>


; <Start encoding val FStar.Stubs.Tactics.V2.Builtins.call_subtac_tm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.call_subtac_tm (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Stubs.Tactics.V2.Builtins.call_subtac_tm@tok () Term)

; </end encoding val FStar.Stubs.Tactics.V2.Builtins.call_subtac_tm>


; End Externals for interface FStar.Stubs.Tactics.V2.Builtins


; Externals for module FStar.Tactics.V2.SyntaxCoercions


; <Start encoding let namedv_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.namedv_to_term (Term) Term)
(declare-fun Tm_arrow_08e5b3efa377f9732a56703deb311ecc () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.namedv_to_term@tok () Term)

; </end encoding let namedv_to_term>


; <Start encoding let binder_to_namedv>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_namedv (Term) Term)
(declare-fun Tm_arrow_a5d157a793a17515ce6d41a52eb1ac4d () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_namedv@tok () Term)

; </end encoding let binder_to_namedv>


; <Start encoding let binder_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_term (Term) Term)
(declare-fun Tm_arrow_a985a5770f38d592f5996181c60af242 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_term@tok () Term)

; </end encoding let binder_to_term>


; <Start encoding let binding_to_namedv>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_namedv (Term) Term)
(declare-fun Tm_arrow_fad6a08ad4032ba95ef8a5ae22a77af5 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_namedv@tok () Term)

; </end encoding let binding_to_namedv>


; <Start encoding let binding_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_term (Term) Term)
(declare-fun Tm_arrow_547e6136aed9db5fe30ffb4b48d0b3d3 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_term@tok () Term)

; </end encoding let binding_to_term>


; End Externals for module FStar.Tactics.V2.SyntaxCoercions


; Externals for interface FStar.Tactics.MApply


; <Start encoding type FStar.Tactics.MApply.termable>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.MApply.termable (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Tactics.MApply.termable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.MApply.Mktermable (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.MApply.Mktermable_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.MApply.Mktermable_to_term (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.MApply.Mktermable
(declare-fun FStar.Tactics.MApply.Mktermable@tok () Term)
(declare-fun Non_total_Tm_arrow_1a12f39da57593aa6422a221836a1c1b (Term) Term)

(declare-fun Tm_arrow_236c4090664b8abb45a4aab0c68b0536 () Term)

; <start constructor FStar.Tactics.MApply.termable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.MApply.termable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Tactics.MApply.termable @x0))
 
;;no pats
:qid is-FStar.Tactics.MApply.termable))))

; </end constructor FStar.Tactics.MApply.termable>


; <start constructor FStar.Tactics.MApply.Mktermable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.MApply.Mktermable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
(FStar.Tactics.MApply.Mktermable (FStar.Tactics.MApply.Mktermable_a __@x0)
(FStar.Tactics.MApply.Mktermable_to_term __@x0)))))

; </end constructor FStar.Tactics.MApply.Mktermable>


; </end encoding type FStar.Tactics.MApply.termable>


; <Start encoding val FStar.Tactics.MApply.__proj__Mktermable__item__to_term>

(declare-fun FStar.Tactics.MApply.__proj__Mktermable__item__to_term (Term Term) Term)

(declare-fun Tm_arrow_a6d4e3c45b3f500462f56c6b6a61d809 () Term)
(declare-fun FStar.Tactics.MApply.__proj__Mktermable__item__to_term@tok () Term)


; </end encoding val FStar.Tactics.MApply.__proj__Mktermable__item__to_term>


; <Skipped let __proj__Mktermable__item__to_term/>


; <Start encoding let to_term>

(declare-fun FStar.Tactics.MApply.to_term (Term) Term)

(declare-fun Tm_arrow_bfec1deb7b6cdd7b7f1f4d17d0b59a06 (Term) Term)
(declare-fun Tm_arrow_6df6a378d7243cdf9aa43127f5de044e () Term)
(declare-fun FStar.Tactics.MApply.to_term@tok () Term)




(declare-fun Tm_abs_c3aba2955ffe177c5c7b672651896c85 (Term) Term)

; </end encoding let to_term>


; <Start encoding let termable_term>

(declare-fun FStar.Tactics.MApply.termable_term (Dummy_sort) Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.MApply_178 () Term)

; </end encoding let termable_term>


; <Start encoding let termable_binding>

(declare-fun FStar.Tactics.MApply.termable_binding (Dummy_sort) Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.MApply_179 () Term)

; </end encoding let termable_binding>


; <Start encoding let mapply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.MApply.mapply (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.MApply.mapply@tok () Term)

; </end encoding let mapply>


; End Externals for interface FStar.Tactics.MApply


; Externals for interface FStar.Reflection.TermEq.Simple


; <Start encoding val FStar.Reflection.TermEq.Simple.term_eq>

(declare-fun FStar.Reflection.TermEq.Simple.term_eq (Term Term) Term)

(declare-fun FStar.Reflection.TermEq.Simple.term_eq@tok () Term)

; </end encoding val FStar.Reflection.TermEq.Simple.term_eq>


; <Start encoding val FStar.Reflection.TermEq.Simple.term_eq_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.TermEq.Simple.term_eq_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.TermEq.Simple.term_eq_ok@tok () Term)

; </end encoding val FStar.Reflection.TermEq.Simple.term_eq_ok>


; <Start encoding val FStar.Reflection.TermEq.Simple.univ_eq>

(declare-fun FStar.Reflection.TermEq.Simple.univ_eq (Term Term) Term)
(declare-fun Tm_arrow_fb7067c5b264c5507cb8d87f68707512 () Term)
(declare-fun FStar.Reflection.TermEq.Simple.univ_eq@tok () Term)

; </end encoding val FStar.Reflection.TermEq.Simple.univ_eq>


; <Start encoding val FStar.Reflection.TermEq.Simple.univ_eq_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.TermEq.Simple.univ_eq_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.TermEq.Simple.univ_eq_ok@tok () Term)

; </end encoding val FStar.Reflection.TermEq.Simple.univ_eq_ok>


; End Externals for interface FStar.Reflection.TermEq.Simple


; Externals for interface FStar.Tactics.SMT


; <Start encoding val FStar.Tactics.SMT.smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.smt_sync@tok () Term)

; </end encoding val FStar.Tactics.SMT.smt_sync>


; <Start encoding val FStar.Tactics.SMT.smt_sync'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.smt_sync_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.smt_sync_@tok () Term)

; </end encoding val FStar.Tactics.SMT.smt_sync'>


; <Start encoding val FStar.Tactics.SMT.get_rlimit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_rlimit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_rlimit@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_rlimit>


; <Start encoding val FStar.Tactics.SMT.set_rlimit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_rlimit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_rlimit@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_rlimit>


; <Start encoding val FStar.Tactics.SMT.get_initial_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_initial_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_initial_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_initial_fuel>


; <Start encoding val FStar.Tactics.SMT.get_initial_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_initial_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_initial_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_initial_ifuel>


; <Start encoding val FStar.Tactics.SMT.get_max_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_max_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_max_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_max_fuel>


; <Start encoding val FStar.Tactics.SMT.get_max_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.get_max_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.get_max_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.get_max_ifuel>


; <Start encoding val FStar.Tactics.SMT.set_initial_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_initial_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_initial_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_initial_fuel>


; <Start encoding val FStar.Tactics.SMT.set_initial_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_initial_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_initial_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_initial_ifuel>


; <Start encoding val FStar.Tactics.SMT.set_max_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_max_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_max_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_max_fuel>


; <Start encoding val FStar.Tactics.SMT.set_max_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_max_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_max_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_max_ifuel>


; <Start encoding val FStar.Tactics.SMT.set_fuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_fuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_fuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_fuel>


; <Start encoding val FStar.Tactics.SMT.set_ifuel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.SMT.set_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.SMT.set_ifuel@tok () Term)

; </end encoding val FStar.Tactics.SMT.set_ifuel>


; End Externals for interface FStar.Tactics.SMT


; Externals for module FStar.Tactics.Util


; <Skipped val FStar.Tactics.Util.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.map@tok () Term)

; </end encoding let rec map>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.concatMap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.concatMap@tok () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.Tactics.Util.__mapi/>


; <Start encoding let rec __mapi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.__mapi (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.__mapi@tok () Term)

; </end encoding let rec __mapi>


; <Skipped val FStar.Tactics.Util.mapi/>


; <Start encoding let mapi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.mapi (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.mapi@tok () Term)

; </end encoding let mapi>


; <Skipped val FStar.Tactics.Util.iter/>


; <Start encoding let rec iter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iter@tok () Term)

; </end encoding let rec iter>


; <Skipped val FStar.Tactics.Util.iteri_aux/>


; <Start encoding let rec iteri_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iteri_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iteri_aux@tok () Term)

; </end encoding let rec iteri_aux>


; <Skipped val FStar.Tactics.Util.iteri/>


; <Start encoding let iteri>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iteri (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iteri@tok () Term)

; </end encoding let iteri>


; <Skipped val FStar.Tactics.Util.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_left (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_left@tok () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.Tactics.Util.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_right (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_right@tok () Term)

; </end encoding let rec fold_right>


; <Skipped val FStar.Tactics.Util.zip/>


; <Start encoding let rec zip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.zip (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.zip@tok () Term)

; </end encoding let rec zip>


; <Skipped val FStar.Tactics.Util.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter@tok () Term)

; </end encoding let rec filter>


; <Start encoding let rec filter_map_acc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter_map_acc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter_map_acc@tok () Term)

; </end encoding let rec filter_map_acc>


; <Start encoding let filter_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter_map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter_map@tok () Term)

; </end encoding let filter_map>


; <Skipped val FStar.Tactics.Util.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.tryPick (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.tryPick@tok () Term)

; </end encoding let rec tryPick>


; <Start encoding let map_opt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.map_opt (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.map_opt@tok () Term)

; </end encoding let map_opt>


; <Start encoding let rec repeatn>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.repeatn (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.repeatn@tok () Term)

; </end encoding let rec repeatn>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.tryFind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.tryFind@tok () Term)

; </end encoding let rec tryFind>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_left2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_left2@tok () Term)

; </end encoding let rec fold_left2>


; <Start encoding let rec string_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.string_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.string_of_list@tok () Term)

; </end encoding let rec string_of_list>


; <Start encoding let string_of_option>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.string_of_option (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.string_of_option@tok () Term)

; </end encoding let string_of_option>


; End Externals for module FStar.Tactics.Util


; Externals for module FStar.Tactics.Visit


; <Start encoding let on_sort_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.on_sort_binder (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.on_sort_binder@tok () Term)

; </end encoding let on_sort_binder>


; <Start encoding let on_sort_simple_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.on_sort_simple_binder (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.on_sort_simple_binder@tok () Term)

; </end encoding let on_sort_simple_binder>


; <Start encoding let rec visit_tm and visit_br and visit_pat and visit_comp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_tm (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_tm@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_br (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_br@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_pat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_pat@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_comp (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_comp@tok () Term)

; </end encoding let rec visit_tm and visit_br and visit_pat and visit_comp>


; End Externals for module FStar.Tactics.Visit


; Externals for interface FStar.Tactics.Print


; <Start encoding val FStar.Tactics.Print.namedv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.namedv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.namedv_to_string@tok () Term)

; </end encoding val FStar.Tactics.Print.namedv_to_string>


; <Start encoding val FStar.Tactics.Print.universe_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.universe_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.universe_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.universe_to_ast_string>


; <Start encoding val FStar.Tactics.Print.universes_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.universes_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.universes_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.universes_to_ast_string>


; <Start encoding val FStar.Tactics.Print.term_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.term_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.term_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.term_to_ast_string>


; <Start encoding val FStar.Tactics.Print.match_returns_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.match_returns_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.match_returns_to_string@tok () Term)

; </end encoding val FStar.Tactics.Print.match_returns_to_string>


; <Start encoding val FStar.Tactics.Print.branches_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.branches_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.branches_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.branches_to_ast_string>


; <Start encoding val FStar.Tactics.Print.branch_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.branch_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.branch_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.branch_to_ast_string>


; <Start encoding val FStar.Tactics.Print.comp_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.comp_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.comp_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.comp_to_ast_string>


; <Start encoding val FStar.Tactics.Print.const_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.const_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.const_to_ast_string@tok () Term)

; </end encoding val FStar.Tactics.Print.const_to_ast_string>


; End Externals for interface FStar.Tactics.Print


; Externals for interface FStar.Tactics.V1.Logic.Lemmas


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.fa_intro_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.fa_intro_lem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.fa_intro_lem@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.fa_intro_lem>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.split_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.split_lem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.split_lem@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.split_lem>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.imp_intro_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.imp_intro_lem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.imp_intro_lem@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.imp_intro_lem>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__lemma_to_squash>

(declare-fun Tm_refine_39824678e6bd7420a9de93968d793b3b (Term Term) Term)
(declare-fun Tm_arrow_a733618074c9a8728deadbd23cb7b8bb (Term Term) Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__lemma_to_squash (Term Term Term Term) Term)


(declare-fun Tm_arrow_2842505fa53b6950ff9b6934826116cd () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__lemma_to_squash@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__lemma_to_squash>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.vbind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.vbind (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.vbind@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.vbind>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.or_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_ind (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_ind@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.or_ind>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.bool_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.bool_ind (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.bool_ind@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.bool_ind>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.or_intro_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_intro_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_intro_1@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.or_intro_1>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.or_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_intro_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.or_intro_2@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.or_intro_2>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__and_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__and_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__and_elim@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__and_elim>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__and_elim'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__and_elim_ (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__and_elim_@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__and_elim'>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__witness>


(declare-fun FStar.Tactics.V1.Logic.Lemmas.__witness (Term Term Term Term) Term)


(declare-fun Tm_arrow_19ebf610eb1ca325c17d78c293beec24 () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__witness@tok () Term)


; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__witness>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__elim_exists'>




(declare-fun Tm_arrow_816a1dfc85b9389c1bde09e03020da38 (Term Term Term) Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__elim_exists_ (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_e5c776ee134348753a32740358385fdf () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__elim_exists_@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__elim_exists'>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__forall_inst>





(declare-fun FStar.Tactics.V1.Logic.Lemmas.__forall_inst (Term Term Term Term) Term)




(declare-fun Tm_arrow_0a928b10ed6d297594d70cecd0d0525f () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__forall_inst@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__forall_inst>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.__forall_inst_sq>



(declare-fun FStar.Tactics.V1.Logic.Lemmas.__forall_inst_sq (Term Term Term Term) Term)


(declare-fun Tm_arrow_7810b8ed28b7c312b6c1292aeea99051 () Term)
(declare-fun FStar.Tactics.V1.Logic.Lemmas.__forall_inst_sq@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.__forall_inst_sq>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.sklem0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.sklem0 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.sklem0@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.sklem0>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.lemma_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lemma_from_squash (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lemma_from_squash@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.lemma_from_squash>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.lem1_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem1_fa (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem1_fa@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.lem1_fa>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.lem2_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem2_fa (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem2_fa@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.lem2_fa>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.lem3_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem3_fa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Logic.Lemmas.lem3_fa@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.lem3_fa>


; <Start encoding val FStar.Tactics.V1.Logic.Lemmas.revert_squash>



(declare-fun FStar.Tactics.V1.Logic.Lemmas.revert_squash (Term Term Term Term) Term)



(declare-fun FStar.Tactics.V1.Logic.Lemmas.revert_squash@tok () Term)

; </end encoding val FStar.Tactics.V1.Logic.Lemmas.revert_squash>


; End Externals for interface FStar.Tactics.V1.Logic.Lemmas


; Externals for module FStar.Reflection.V2.Formula


; <Start encoding let term_eq>

(declare-fun FStar.Reflection.V2.Formula.term_eq (Term Term) Term)

(declare-fun FStar.Reflection.V2.Formula.term_eq@tok () Term)

; </end encoding let term_eq>


; <Start encoding let rec inspect_unascribe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.inspect_unascribe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.inspect_unascribe@tok () Term)

; </end encoding let rec inspect_unascribe>


; <Start encoding let rec collect_app'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app_@tok () Term)

; </end encoding let rec collect_app'>


; <Start encoding let collect_app>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app@tok () Term)

; </end encoding let collect_app>


; <Start encoding type FStar.Reflection.V2.Formula.comparison>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.comparison () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Eq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Eq__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Eq
(declare-fun FStar.Reflection.V2.Formula.Eq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.BoolEq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.BoolEq__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.BoolEq
(declare-fun FStar.Reflection.V2.Formula.BoolEq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Lt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Lt
(declare-fun FStar.Reflection.V2.Formula.Lt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Le () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Le
(declare-fun FStar.Reflection.V2.Formula.Le@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Gt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Gt
(declare-fun FStar.Reflection.V2.Formula.Gt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Ge () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Ge
(declare-fun FStar.Reflection.V2.Formula.Ge@tok () Term)
(declare-fun Tm_arrow_93d4e1cf7163163fc0f44eab56192fbd () Term)


; <start constructor FStar.Reflection.V2.Formula.comparison>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.comparison ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
103)
(= __@x0
FStar.Reflection.V2.Formula.comparison)))

; </end constructor FStar.Reflection.V2.Formula.comparison>


; <start constructor FStar.Reflection.V2.Formula.Eq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Eq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
(FStar.Reflection.V2.Formula.Eq (FStar.Reflection.V2.Formula.Eq__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Eq>


; <start constructor FStar.Reflection.V2.Formula.BoolEq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.BoolEq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
(FStar.Reflection.V2.Formula.BoolEq (FStar.Reflection.V2.Formula.BoolEq__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.BoolEq>


; <start constructor FStar.Reflection.V2.Formula.Lt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Lt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
119)
(= __@x0
FStar.Reflection.V2.Formula.Lt)))

; </end constructor FStar.Reflection.V2.Formula.Lt>


; <start constructor FStar.Reflection.V2.Formula.Le>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Le ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
121)
(= __@x0
FStar.Reflection.V2.Formula.Le)))

; </end constructor FStar.Reflection.V2.Formula.Le>


; <start constructor FStar.Reflection.V2.Formula.Gt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Gt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
123)
(= __@x0
FStar.Reflection.V2.Formula.Gt)))

; </end constructor FStar.Reflection.V2.Formula.Gt>


; <start constructor FStar.Reflection.V2.Formula.Ge>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Ge ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
FStar.Reflection.V2.Formula.Ge)))

; </end constructor FStar.Reflection.V2.Formula.Ge>


; </end encoding type FStar.Reflection.V2.Formula.comparison>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Eq>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Eq (Term) Term)
(declare-fun Tm_arrow_d65e342f5ea88b2144db8bf57e23b1b7 () Term)
(declare-fun FStar.Reflection.V2.Formula.uu___is_Eq@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Eq>


; <Skipped let uu___is_Eq/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Eq__item___0>

(declare-fun Tm_refine_e43d6364938e1d5176082471d2d04fb9 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Eq__item___0 (Term) Term)

(declare-fun Tm_arrow_62c9555b07b062c3ab6c097dd72a2218 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Eq__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Eq__item___0>


; <Skipped let __proj__Eq__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_BoolEq>

(declare-fun FStar.Reflection.V2.Formula.uu___is_BoolEq (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_BoolEq@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_BoolEq>


; <Skipped let uu___is_BoolEq/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__BoolEq__item___0>

(declare-fun Tm_refine_7130ac7f7031ee2405d67ce0fb773016 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__BoolEq__item___0 (Term) Term)

(declare-fun Tm_arrow_c31b6eba7c4df2564cb079d0dfe2a18e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__BoolEq__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__BoolEq__item___0>


; <Skipped let __proj__BoolEq__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Lt>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Lt (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Lt@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Lt>


; <Skipped let uu___is_Lt/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Le>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Le (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Le@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Le>


; <Skipped let uu___is_Le/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Gt>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Gt (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Gt@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Gt>


; <Skipped let uu___is_Gt/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Ge>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Ge (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Ge@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Ge>


; <Skipped let uu___is_Ge/>


; <Start encoding type FStar.Reflection.V2.Formula.formula>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.formula () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.True_ () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.True_
(declare-fun FStar.Reflection.V2.Formula.True_@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.False_ () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.False_
(declare-fun FStar.Reflection.V2.Formula.False_@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Comp (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Comp
(declare-fun FStar.Reflection.V2.Formula.Comp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.And (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.And__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.And__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.And
(declare-fun FStar.Reflection.V2.Formula.And@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Or (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Or__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Or__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Or
(declare-fun FStar.Reflection.V2.Formula.Or@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Not (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Not__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Not
(declare-fun FStar.Reflection.V2.Formula.Not@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Implies (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Implies__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Implies__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Implies
(declare-fun FStar.Reflection.V2.Formula.Implies@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Iff (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Iff__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Iff__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Iff
(declare-fun FStar.Reflection.V2.Formula.Iff@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Forall
(declare-fun FStar.Reflection.V2.Formula.Forall@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Exists (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Exists
(declare-fun FStar.Reflection.V2.Formula.Exists@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.App__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.App__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.App
(declare-fun FStar.Reflection.V2.Formula.App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.Name
(declare-fun FStar.Reflection.V2.Formula.Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.FV (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.FV__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.FV
(declare-fun FStar.Reflection.V2.Formula.FV@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.IntLit (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.IntLit__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.IntLit
(declare-fun FStar.Reflection.V2.Formula.IntLit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.F_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Reflection.V2.Formula.F_Unknown
(declare-fun FStar.Reflection.V2.Formula.F_Unknown@tok () Term)
(declare-fun Tm_arrow_8857c1ddf1bdd92f1a816a62ccd412bc () Term)
(declare-fun Tm_arrow_88078cb15b188241a92307bcca04be9c () Term)

(declare-fun Tm_arrow_f4196504b00b92bf890ee998fd322403 () Term)


(declare-fun Tm_arrow_7930e1d937287e267cc52bc21ae18e34 () Term)


(declare-fun Tm_arrow_af9fbaeb5a474c90d87c635da4058c8f () Term)
(declare-fun Tm_arrow_0cfcc47d303667e6d344f972afd06a63 () Term)
(declare-fun Tm_arrow_db96b7d39b6d2478843b5883bc7b002a () Term)

; <start constructor FStar.Reflection.V2.Formula.formula>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.formula ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(= __@x0
FStar.Reflection.V2.Formula.formula)))

; </end constructor FStar.Reflection.V2.Formula.formula>


; <start constructor FStar.Reflection.V2.Formula.True_>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.True_ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
FStar.Reflection.V2.Formula.True_)))

; </end constructor FStar.Reflection.V2.Formula.True_>


; <start constructor FStar.Reflection.V2.Formula.False_>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.False_ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(= __@x0
FStar.Reflection.V2.Formula.False_)))

; </end constructor FStar.Reflection.V2.Formula.False_>


; <start constructor FStar.Reflection.V2.Formula.Comp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Comp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
156)
(= __@x0
(FStar.Reflection.V2.Formula.Comp (FStar.Reflection.V2.Formula.Comp__0 __@x0)
(FStar.Reflection.V2.Formula.Comp__1 __@x0)
(FStar.Reflection.V2.Formula.Comp__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Comp>


; <start constructor FStar.Reflection.V2.Formula.And>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.And ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
161)
(= __@x0
(FStar.Reflection.V2.Formula.And (FStar.Reflection.V2.Formula.And__0 __@x0)
(FStar.Reflection.V2.Formula.And__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.And>


; <start constructor FStar.Reflection.V2.Formula.Or>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Or ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
166)
(= __@x0
(FStar.Reflection.V2.Formula.Or (FStar.Reflection.V2.Formula.Or__0 __@x0)
(FStar.Reflection.V2.Formula.Or__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Or>


; <start constructor FStar.Reflection.V2.Formula.Not>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Not ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
171)
(= __@x0
(FStar.Reflection.V2.Formula.Not (FStar.Reflection.V2.Formula.Not__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Not>


; <start constructor FStar.Reflection.V2.Formula.Implies>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Implies ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(FStar.Reflection.V2.Formula.Implies (FStar.Reflection.V2.Formula.Implies__0 __@x0)
(FStar.Reflection.V2.Formula.Implies__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Implies>


; <start constructor FStar.Reflection.V2.Formula.Iff>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Iff ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(FStar.Reflection.V2.Formula.Iff (FStar.Reflection.V2.Formula.Iff__0 __@x0)
(FStar.Reflection.V2.Formula.Iff__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Iff>


; <start constructor FStar.Reflection.V2.Formula.Forall>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Forall ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(= __@x0
(FStar.Reflection.V2.Formula.Forall (FStar.Reflection.V2.Formula.Forall__0 __@x0)
(FStar.Reflection.V2.Formula.Forall__1 __@x0)
(FStar.Reflection.V2.Formula.Forall__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Forall>


; <start constructor FStar.Reflection.V2.Formula.Exists>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Exists ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
191)
(= __@x0
(FStar.Reflection.V2.Formula.Exists (FStar.Reflection.V2.Formula.Exists__0 __@x0)
(FStar.Reflection.V2.Formula.Exists__1 __@x0)
(FStar.Reflection.V2.Formula.Exists__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Exists>


; <start constructor FStar.Reflection.V2.Formula.App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
196)
(= __@x0
(FStar.Reflection.V2.Formula.App (FStar.Reflection.V2.Formula.App__0 __@x0)
(FStar.Reflection.V2.Formula.App__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.App>


; <start constructor FStar.Reflection.V2.Formula.Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
201)
(= __@x0
(FStar.Reflection.V2.Formula.Name (FStar.Reflection.V2.Formula.Name__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Name>


; <start constructor FStar.Reflection.V2.Formula.FV>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.FV ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
206)
(= __@x0
(FStar.Reflection.V2.Formula.FV (FStar.Reflection.V2.Formula.FV__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.FV>


; <start constructor FStar.Reflection.V2.Formula.IntLit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.IntLit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
211)
(= __@x0
(FStar.Reflection.V2.Formula.IntLit (FStar.Reflection.V2.Formula.IntLit__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.IntLit>


; <start constructor FStar.Reflection.V2.Formula.F_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.F_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
FStar.Reflection.V2.Formula.F_Unknown)))

; </end constructor FStar.Reflection.V2.Formula.F_Unknown>


; </end encoding type FStar.Reflection.V2.Formula.formula>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_True_>

(declare-fun FStar.Reflection.V2.Formula.uu___is_True_ (Term) Term)
(declare-fun Tm_arrow_f29e4998b5e1dcdeff1cc7473b63c87e () Term)
(declare-fun FStar.Reflection.V2.Formula.uu___is_True_@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_True_>


; <Skipped let uu___is_True_/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_False_>

(declare-fun FStar.Reflection.V2.Formula.uu___is_False_ (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_False_@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_False_>


; <Skipped let uu___is_False_/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Comp>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Comp (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Comp@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Comp>


; <Skipped let uu___is_Comp/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___0>

(declare-fun Tm_refine_bb431a0b8a7caa6cf69b36c2e697f27d () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___0 (Term) Term)

(declare-fun Tm_arrow_0281fb6450f815bfde3aaa7a5dd5f38e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___0>


; <Skipped let __proj__Comp__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___1 (Term) Term)

(declare-fun Tm_arrow_93cb6419f6d34f9365398cc45eb342c5 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___1>


; <Skipped let __proj__Comp__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___2 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___2@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Comp__item___2>


; <Skipped let __proj__Comp__item___2/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_And>

(declare-fun FStar.Reflection.V2.Formula.uu___is_And (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_And@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_And>


; <Skipped let uu___is_And/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__And__item___0>

(declare-fun Tm_refine_afefff96e762436e9e286938ae5bd296 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___0 (Term) Term)

(declare-fun Tm_arrow_d42e81f90786e04850501320428bc595 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__And__item___0>


; <Skipped let __proj__And__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__And__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__And__item___1>


; <Skipped let __proj__And__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Or>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Or (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Or@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Or>


; <Skipped let uu___is_Or/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Or__item___0>

(declare-fun Tm_refine_dd2b94a226dfb474d444b84bd0e18f4e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___0 (Term) Term)

(declare-fun Tm_arrow_626af93c44c18e2e129d55895de78797 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Or__item___0>


; <Skipped let __proj__Or__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Or__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Or__item___1>


; <Skipped let __proj__Or__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Not>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Not (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Not@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Not>


; <Skipped let uu___is_Not/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Not__item___0>

(declare-fun Tm_refine_79b780262c6ff8bbc9d19dd6e7a82617 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Not__item___0 (Term) Term)

(declare-fun Tm_arrow_aa548919989dc6c3c1cf8d3b1df2ae53 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Not__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Not__item___0>


; <Skipped let __proj__Not__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Implies>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Implies (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Implies@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Implies>


; <Skipped let uu___is_Implies/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Implies__item___0>

(declare-fun Tm_refine_71dd7a300c6cd81b43443cc6bd08c820 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___0 (Term) Term)

(declare-fun Tm_arrow_22afc90fc3e98ee4089f81c76344e63b () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Implies__item___0>


; <Skipped let __proj__Implies__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Implies__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Implies__item___1>


; <Skipped let __proj__Implies__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Iff>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Iff (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Iff@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Iff>


; <Skipped let uu___is_Iff/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Iff__item___0>

(declare-fun Tm_refine_37b1001aa245e774d71c7996f8aa4c41 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___0 (Term) Term)

(declare-fun Tm_arrow_924741dbf7eb62d47137fa738e36c206 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Iff__item___0>


; <Skipped let __proj__Iff__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Iff__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Iff__item___1>


; <Skipped let __proj__Iff__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Forall>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Forall (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Forall@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Forall>


; <Skipped let uu___is_Forall/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___0>

(declare-fun Tm_refine_9f58524dfd8b26c53a6b4ca6308ce978 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___0 (Term) Term)

(declare-fun Tm_arrow_91d6ff096438b12e861c91c64e93dadf () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___0>


; <Skipped let __proj__Forall__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___1 (Term) Term)

(declare-fun Tm_arrow_b32b9f9a03e96a6552882ef6a0a9d086 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___1>


; <Skipped let __proj__Forall__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___2 (Term) Term)

(declare-fun Tm_arrow_64c7c697a5f72461abadccba8acf8576 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___2@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Forall__item___2>


; <Skipped let __proj__Forall__item___2/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Exists>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Exists (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Exists@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Exists>


; <Skipped let uu___is_Exists/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___0>

(declare-fun Tm_refine_47c227a0e1bad766e65a971f1b662250 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___0 (Term) Term)

(declare-fun Tm_arrow_a68f10e819029d6cab49480a608d325a () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___0>


; <Skipped let __proj__Exists__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___1 (Term) Term)

(declare-fun Tm_arrow_4d7c75ef166295c33af444b9128d036a () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___1>


; <Skipped let __proj__Exists__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___2 (Term) Term)

(declare-fun Tm_arrow_5cbf98f1a2423b5b386d9170a466b9f3 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___2@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Exists__item___2>


; <Skipped let __proj__Exists__item___2/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_App>

(declare-fun FStar.Reflection.V2.Formula.uu___is_App (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_App@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_App>


; <Skipped let uu___is_App/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__App__item___0>

(declare-fun Tm_refine_91b08d9cf73feb528f4d6485b5371070 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___0 (Term) Term)

(declare-fun Tm_arrow_4a32e9c40b64531bc4984e65fe296c0e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__App__item___0>


; <Skipped let __proj__App__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__App__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___1@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__App__item___1>


; <Skipped let __proj__App__item___1/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_Name>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Name (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Name@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_Name>


; <Skipped let uu___is_Name/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__Name__item___0>

(declare-fun Tm_refine_1eda1af3652c0f59491de3194febae5c () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Name__item___0 (Term) Term)

(declare-fun Tm_arrow_522997a403a53d78b54e9566f3be2999 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Name__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__Name__item___0>


; <Skipped let __proj__Name__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_FV>

(declare-fun FStar.Reflection.V2.Formula.uu___is_FV (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_FV@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_FV>


; <Skipped let uu___is_FV/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__FV__item___0>

(declare-fun Tm_refine_142a36e9daea7bdef8c1fb9f74b3186b () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__FV__item___0 (Term) Term)

(declare-fun Tm_arrow_054fda3a0260fca222e57c007cf7620c () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__FV__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__FV__item___0>


; <Skipped let __proj__FV__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_IntLit>

(declare-fun FStar.Reflection.V2.Formula.uu___is_IntLit (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_IntLit@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_IntLit>


; <Skipped let uu___is_IntLit/>


; <Start encoding val FStar.Reflection.V2.Formula.__proj__IntLit__item___0>

(declare-fun Tm_refine_9463acd36e12c69b5607f29f47216780 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__IntLit__item___0 (Term) Term)

(declare-fun Tm_arrow_76dd712ce23e1157b2b380e0ec67ab55 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__IntLit__item___0@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.__proj__IntLit__item___0>


; <Skipped let __proj__IntLit__item___0/>


; <Start encoding val FStar.Reflection.V2.Formula.uu___is_F_Unknown>

(declare-fun FStar.Reflection.V2.Formula.uu___is_F_Unknown (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_F_Unknown@tok () Term)

; </end encoding val FStar.Reflection.V2.Formula.uu___is_F_Unknown>


; <Skipped let uu___is_F_Unknown/>


; <Start encoding let mk_Forall>

(declare-fun FStar.Reflection.V2.Formula.mk_Forall (Term Term) Term)

(declare-fun FStar.Reflection.V2.Formula.mk_Forall@tok () Term)

; </end encoding let mk_Forall>


; <Start encoding let mk_Exists>

(declare-fun FStar.Reflection.V2.Formula.mk_Exists (Term Term) Term)

(declare-fun FStar.Reflection.V2.Formula.mk_Exists@tok () Term)

; </end encoding let mk_Exists>


; <Start encoding let term_as_formula'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_@tok () Term)

; </end encoding let term_as_formula'>


; <Start encoding let term_as_formula>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula@tok () Term)

; </end encoding let term_as_formula>


; <Start encoding let term_as_formula_total>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_total (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_total@tok () Term)

; </end encoding let term_as_formula_total>


; <Start encoding let formula_as_term_view>

(declare-fun FStar.Reflection.V2.Formula.formula_as_term_view (Term) Term)
(declare-fun Tm_arrow_267dc9dde16c6ea1a3acc86750e7b7de () Term)
(declare-fun FStar.Reflection.V2.Formula.formula_as_term_view@tok () Term)
(declare-fun Tm_arrow_299731651893d764ca025adc1c713374 () Term)
(declare-fun Tm_abs_c63eccb79643fed421b47ce4604a7747 () Term)

























; </end encoding let formula_as_term_view>


; <Start encoding let formula_as_term>

(declare-fun FStar.Reflection.V2.Formula.formula_as_term (Term) Term)
(declare-fun Tm_arrow_7bc5d4fb2b3adffee834b8cb4e624e1d () Term)
(declare-fun FStar.Reflection.V2.Formula.formula_as_term@tok () Term)

; </end encoding let formula_as_term>


; <Start encoding let namedv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.namedv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.namedv_to_string@tok () Term)

; </end encoding let namedv_to_string>


; <Start encoding let formula_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.formula_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.formula_to_string@tok () Term)

; </end encoding let formula_to_string>


; End Externals for module FStar.Reflection.V2.Formula


; Externals for interface FStar.Tactics.V2.Logic


; <Start encoding let cur_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_goal@tok () Term)

; </end encoding let cur_goal>


; <Start encoding let cur_formula>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_formula (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_formula@tok () Term)

; </end encoding let cur_formula>


; <Start encoding val FStar.Tactics.V2.Logic.l_revert>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_revert>


; <Start encoding val FStar.Tactics.V2.Logic.l_revert_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert_all@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_revert_all>


; <Start encoding val FStar.Tactics.V2.Logic.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.forall_intro>


; <Start encoding val FStar.Tactics.V2.Logic.forall_intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro_as@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.forall_intro_as>


; <Start encoding val FStar.Tactics.V2.Logic.forall_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intros@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.forall_intros>


; <Start encoding val FStar.Tactics.V2.Logic.split>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.split (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.split@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.split>


; <Start encoding val FStar.Tactics.V2.Logic.implies_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.implies_intro>


; <Start encoding val FStar.Tactics.V2.Logic.implies_intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro_as@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.implies_intro_as>


; <Start encoding val FStar.Tactics.V2.Logic.implies_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intros@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.implies_intros>


; <Start encoding val FStar.Tactics.V2.Logic.l_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intro@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_intro>


; <Start encoding val FStar.Tactics.V2.Logic.l_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intros@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_intros>


; <Start encoding val FStar.Tactics.V2.Logic.squash_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.squash_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.squash_intro@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.squash_intro>


; <Start encoding val FStar.Tactics.V2.Logic.l_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_exact (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_exact@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.l_exact>


; <Start encoding val FStar.Tactics.V2.Logic.hyp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.hyp (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.hyp@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.hyp>


; <Start encoding val FStar.Tactics.V2.Logic.pose_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.pose_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.pose_lemma@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.pose_lemma>


; <Start encoding val FStar.Tactics.V2.Logic.explode>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.explode (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.explode@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.explode>


; <Start encoding val FStar.Tactics.V2.Logic.simplify_eq_implication>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.simplify_eq_implication (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.simplify_eq_implication@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.simplify_eq_implication>


; <Start encoding val FStar.Tactics.V2.Logic.rewrite_all_equalities>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.rewrite_all_equalities (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.rewrite_all_equalities@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.rewrite_all_equalities>


; <Start encoding val FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq>


; <Start encoding val FStar.Tactics.V2.Logic.unsquash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.unsquash (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.unsquash@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.unsquash>


; <Start encoding val FStar.Tactics.V2.Logic.cases_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_or (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_or@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.cases_or>


; <Start encoding val FStar.Tactics.V2.Logic.cases_bool>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_bool (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_bool@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.cases_bool>


; <Start encoding val FStar.Tactics.V2.Logic.left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.left (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.left@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.left>


; <Start encoding val FStar.Tactics.V2.Logic.right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.right (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.right@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.right>


; <Start encoding val FStar.Tactics.V2.Logic.and_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.and_elim (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.and_elim@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.and_elim>


; <Start encoding val FStar.Tactics.V2.Logic.destruct_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.destruct_and (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.destruct_and@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.destruct_and>


; <Start encoding val FStar.Tactics.V2.Logic.witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.witness@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.witness>


; <Start encoding val FStar.Tactics.V2.Logic.elim_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.elim_exists (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.elim_exists@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.elim_exists>


; <Start encoding val FStar.Tactics.V2.Logic.instantiate>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.instantiate>


; <Start encoding val FStar.Tactics.V2.Logic.instantiate_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate_as (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate_as@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.instantiate_as>


; <Start encoding val FStar.Tactics.V2.Logic.skolem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.skolem (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.skolem@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.skolem>


; <Start encoding val FStar.Tactics.V2.Logic.easy_fill>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.easy_fill (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.easy_fill@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.easy_fill>


; <Start encoding val FStar.Tactics.V2.Logic.easy>

(declare-fun FStar.Tactics.V2.Logic.easy (Term Term) Term)

(declare-fun FStar.Tactics.V2.Logic.easy@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.easy>


; <Start encoding val FStar.Tactics.V2.Logic.using_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.using_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.using_lemma@tok () Term)

; </end encoding val FStar.Tactics.V2.Logic.using_lemma>


; End Externals for interface FStar.Tactics.V2.Logic


; Externals for interface FStar.Tactics.V2.SyntaxHelpers


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.collect_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.collect_arr>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.collect_abs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_abs (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_abs@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.collect_abs>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.mk_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_arr (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_arr@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.mk_arr>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.lookup_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.lookup_lb (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.lookup_lb@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.lookup_lb>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.collect_app>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_app (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_app@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.collect_app>


; <Start encoding val FStar.Tactics.V2.SyntaxHelpers.hua>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.hua (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.hua@tok () Term)

; </end encoding val FStar.Tactics.V2.SyntaxHelpers.hua>


; End Externals for interface FStar.Tactics.V2.SyntaxHelpers


; Externals for module FStar.PropositionalExtensionality


; <Start encoding val FStar.PropositionalExtensionality.axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.PropositionalExtensionality.axiom (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.PropositionalExtensionality.axiom@tok () Term)

; </end encoding val FStar.PropositionalExtensionality.axiom>


; <Start encoding let apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.PropositionalExtensionality.apply (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.PropositionalExtensionality.apply@tok () Term)

; </end encoding let apply>


; End Externals for module FStar.PropositionalExtensionality


; Externals for interface FStar.Squash


; <Start encoding val FStar.Squash.return_squash>

(declare-fun FStar.Squash.return_squash (Term Term) Term)
(declare-fun Tm_arrow_66188dd3b00b7ac9b3910d6e97360d1e () Term)
(declare-fun FStar.Squash.return_squash@tok () Term)

; </end encoding val FStar.Squash.return_squash>


; <Start encoding val FStar.Squash.bind_squash>

(declare-fun Tm_arrow_50bc60bebdf75c69c78dc800e0364d6b (Term Term) Term)
(declare-fun FStar.Squash.bind_squash (Term Term Term Term) Term)

(declare-fun Tm_arrow_dd301c13dceb52611925e3e0985c3aa8 () Term)
(declare-fun FStar.Squash.bind_squash@tok () Term)

; </end encoding val FStar.Squash.bind_squash>


; <Start encoding val FStar.Squash.push_squash>



(declare-fun FStar.Squash.push_squash (Term Term Term) Term)



(declare-fun Tm_arrow_897bf5c14b806d39ad41e0bfef45d28a () Term)
(declare-fun FStar.Squash.push_squash@tok () Term)


; </end encoding val FStar.Squash.push_squash>


; <Start encoding val FStar.Squash.get_proof>

(declare-fun FStar.Squash.get_proof (Term) Term)
(declare-fun Tm_refine_7fdd091adbcfc3810a61ff266cf2272b (Term) Term)
(declare-fun Tm_arrow_92023635b661ef4cb5183e1ccd313c6b () Term)
(declare-fun FStar.Squash.get_proof@tok () Term)


; </end encoding val FStar.Squash.get_proof>


; <Start encoding val FStar.Squash.give_proof>

(declare-fun FStar.Squash.give_proof (Term Term) Term)

(declare-fun Tm_arrow_d002f3b74726aef4cc35f50b77083fcc () Term)
(declare-fun FStar.Squash.give_proof@tok () Term)


; </end encoding val FStar.Squash.give_proof>


; <Start encoding val FStar.Squash.proof_irrelevance>

(declare-fun FStar.Squash.proof_irrelevance (Term Term Term) Term)

(declare-fun Tm_arrow_78ff335c3696d8f05c99466a60d0bf7d () Term)
(declare-fun FStar.Squash.proof_irrelevance@tok () Term)


; </end encoding val FStar.Squash.proof_irrelevance>


; <Start encoding val FStar.Squash.squash_double_arrow>



(declare-fun FStar.Squash.squash_double_arrow (Term Term Term) Term)



(declare-fun Tm_arrow_4135086bd057eee0b1997d9de0b75d33 () Term)
(declare-fun FStar.Squash.squash_double_arrow@tok () Term)


; </end encoding val FStar.Squash.squash_double_arrow>


; <Start encoding val FStar.Squash.push_sum>



(declare-fun Tm_abs_ecb85cab59105fe548fc5ca9d671c8f9 (Term Term) Term)
(declare-fun FStar.Squash.push_sum (Term Term Term) Term)



(declare-fun Tm_arrow_c6e83d6817933b3336a5e86b07e67062 () Term)
(declare-fun FStar.Squash.push_sum@tok () Term)

; </end encoding val FStar.Squash.push_sum>


; <Start encoding val FStar.Squash.squash_double_sum>




(declare-fun FStar.Squash.squash_double_sum (Term Term Term) Term)



(declare-fun Tm_arrow_a0b7ea9677fa75d0acf0c901c148bbdc () Term)
(declare-fun FStar.Squash.squash_double_sum@tok () Term)

; </end encoding val FStar.Squash.squash_double_sum>


; <Start encoding val FStar.Squash.map_squash>


(declare-fun FStar.Squash.map_squash (Term Term Term Term) Term)

(declare-fun Tm_arrow_f71a078a3b73bb8e8cddd83bc4ca236a () Term)
(declare-fun FStar.Squash.map_squash@tok () Term)

; </end encoding val FStar.Squash.map_squash>


; <Start encoding val FStar.Squash.join_squash>

(declare-fun FStar.Squash.join_squash (Term Term) Term)
(declare-fun Tm_arrow_b9fdb1273189be7b55b74e1c4ecfb366 () Term)
(declare-fun FStar.Squash.join_squash@tok () Term)

; </end encoding val FStar.Squash.join_squash>


; End Externals for interface FStar.Squash


; Externals for interface FStar.Tactics.Names


; <Start encoding val FStar.Tactics.Names.name_appears_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Names.name_appears_in (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Names.name_appears_in@tok () Term)

; </end encoding val FStar.Tactics.Names.name_appears_in>


; End Externals for interface FStar.Tactics.Names


; Externals for module FStar.Tactics.V2.Derived


; <Start encoding let op_At>

(declare-fun FStar.Tactics.V2.Derived.op_At (Term) Term)
(declare-fun Tm_arrow_13365c547ebacced8e5c321e9ac37c13 (Term) Term)
(declare-fun Tm_arrow_27f58803f2afd0299b7d65785588b6d2 () Term)
(declare-fun FStar.Tactics.V2.Derived.op_At@tok () Term)


; </end encoding let op_At>


; <Start encoding let term_eq>

(declare-fun FStar.Tactics.V2.Derived.term_eq (Term Term) Term)

(declare-fun FStar.Tactics.V2.Derived.term_eq@tok () Term)

; </end encoding let term_eq>


; <Start encoding let name_of_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_bv@tok () Term)

; </end encoding let name_of_bv>


; <Start encoding let bv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.bv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.bv_to_string@tok () Term)

; </end encoding let bv_to_string>


; <Start encoding let name_of_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_binder@tok () Term)

; </end encoding let name_of_binder>


; <Start encoding let binder_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.binder_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.binder_to_string@tok () Term)

; </end encoding let binder_to_string>


; <Start encoding let binding_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.binding_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.binding_to_string@tok () Term)

; </end encoding let binding_to_string>


; <Start encoding let type_of_var>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.type_of_var (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.type_of_var@tok () Term)

; </end encoding let type_of_var>


; <Start encoding let type_of_binding>

(declare-fun FStar.Tactics.V2.Derived.type_of_binding (Term) Term)
(declare-fun Tm_arrow_c73fb18c2ffc2a3f457ada8b14246edf () Term)
(declare-fun FStar.Tactics.V2.Derived.type_of_binding@tok () Term)

; </end encoding let type_of_binding>


; <Start encoding datacon FStar.Tactics.V2.Derived.Goal_not_trivial for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.V2.Derived.Goal_not_trivial () Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Tactics.V2.Derived.Goal_not_trivial@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Tactics.V2.Derived.Goal_not_trivial
(declare-fun FStar.Tactics.V2.Derived.Goal_not_trivial@tok () Term)

; <start constructor FStar.Tactics.V2.Derived.Goal_not_trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.V2.Derived.Goal_not_trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
FStar.Tactics.V2.Derived.Goal_not_trivial)))

; </end constructor FStar.Tactics.V2.Derived.Goal_not_trivial>


; </end encoding datacon FStar.Tactics.V2.Derived.Goal_not_trivial for type Prims.exn>


; <Start encoding val FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial>

(declare-fun FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial@tok () Term)

; </end encoding val FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial>


; <Skipped let uu___is_Goal_not_trivial/>


; <Start encoding let goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.goals@tok () Term)

; </end encoding let goals>


; <Start encoding let smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_goals@tok () Term)

; </end encoding let smt_goals>


; <Start encoding let fail_doc_at>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_doc_at (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_doc_at@tok () Term)

; </end encoding let fail_doc_at>


; <Start encoding let fail_doc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_doc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_doc@tok () Term)

; </end encoding let fail_doc>


; <Start encoding let fail_at>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_at (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_at@tok () Term)

; </end encoding let fail_at>


; <Start encoding let fail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail@tok () Term)

; </end encoding let fail>


; <Start encoding let fail_silently_doc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently_doc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently_doc@tok () Term)

; </end encoding let fail_silently_doc>


; <Start encoding let fail_silently>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently@tok () Term)

; </end encoding let fail_silently>


; <Start encoding let _cur_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived._cur_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived._cur_goal@tok () Term)

; </end encoding let _cur_goal>


; <Start encoding let cur_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_env (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_env@tok () Term)

; </end encoding let cur_env>


; <Start encoding let cur_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal@tok () Term)

; </end encoding let cur_goal>


; <Start encoding let cur_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_witness@tok () Term)

; </end encoding let cur_witness>


; <Start encoding let cur_goal_safe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal_safe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal_safe@tok () Term)

; </end encoding let cur_goal_safe>


; <Start encoding let cur_vars>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_vars (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_vars@tok () Term)

; </end encoding let cur_vars>


; <Start encoding let with_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.with_policy (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.with_policy@tok () Term)

; </end encoding let with_policy>


; <Start encoding let exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact@tok () Term)

; </end encoding let exact>


; <Start encoding let exact_with_ref>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_with_ref (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_with_ref@tok () Term)

; </end encoding let exact_with_ref>


; <Start encoding let trivial>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trivial (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trivial@tok () Term)

; </end encoding let trivial>


; <Start encoding let run_tactic>


(declare-fun FStar.Tactics.V2.Derived.run_tactic (Term) Term)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
(declare-fun Tm_arrow_93b1b66d7ba75682eb1b8b3b9b03c99e () Term)
(declare-fun FStar.Tactics.V2.Derived.run_tactic@tok () Term)



; </end encoding let run_tactic>


; <Start encoding let dismiss>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.dismiss (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.dismiss@tok () Term)

; </end encoding let dismiss>


; <Start encoding let flip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.flip (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.flip@tok () Term)

; </end encoding let flip>


; <Start encoding let qed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.qed (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.qed@tok () Term)

; </end encoding let qed>


; <Start encoding let debug>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.debug (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.debug@tok () Term)

; </end encoding let debug>


; <Start encoding let smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt@tok () Term)

; </end encoding let smt>


; <Start encoding let idtac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.idtac (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.idtac@tok () Term)

; </end encoding let idtac>


; <Start encoding let later>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.later (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.later@tok () Term)

; </end encoding let later>


; <Start encoding let apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply@tok () Term)

; </end encoding let apply>


; <Start encoding let apply_noinst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_noinst (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_noinst@tok () Term)

; </end encoding let apply_noinst>


; <Start encoding let apply_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma@tok () Term)

; </end encoding let apply_lemma>


; <Start encoding let trefl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl@tok () Term)

; </end encoding let trefl>


; <Start encoding let trefl_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl_guard@tok () Term)

; </end encoding let trefl_guard>


; <Start encoding let commute_applied_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.commute_applied_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.commute_applied_match@tok () Term)

; </end encoding let commute_applied_match>


; <Start encoding let apply_lemma_noinst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_noinst (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_noinst@tok () Term)

; </end encoding let apply_lemma_noinst>


; <Start encoding let apply_lemma_rw>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_rw (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_rw@tok () Term)

; </end encoding let apply_lemma_rw>


; <Start encoding let apply_raw>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_raw (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_raw@tok () Term)

; </end encoding let apply_raw>


; <Start encoding let exact_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_guard@tok () Term)

; </end encoding let exact_guard>


; <Start encoding let t_pointwise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.t_pointwise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.t_pointwise@tok () Term)

; </end encoding let t_pointwise>


; <Start encoding let topdown_rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.topdown_rewrite (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.topdown_rewrite@tok () Term)

; </end encoding let topdown_rewrite>


; <Start encoding let pointwise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise@tok () Term)

; </end encoding let pointwise>


; <Start encoding let pointwise'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise_@tok () Term)

; </end encoding let pointwise'>


; <Start encoding let cur_module>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_module (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_module@tok () Term)

; </end encoding let cur_module>


; <Start encoding let open_modules>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.open_modules (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.open_modules@tok () Term)

; </end encoding let open_modules>


; <Start encoding let fresh_uvar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_uvar (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_uvar@tok () Term)

; </end encoding let fresh_uvar>


; <Start encoding let unify>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unify (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unify@tok () Term)

; </end encoding let unify>


; <Start encoding let unify_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unify_guard (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unify_guard@tok () Term)

; </end encoding let unify_guard>


; <Start encoding let tmatch>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tmatch (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tmatch@tok () Term)

; </end encoding let tmatch>


; <Start encoding let divide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.divide (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.divide@tok () Term)

; </end encoding let divide>


; <Start encoding let rec iseq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iseq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iseq@tok () Term)

; </end encoding let rec iseq>


; <Start encoding let focus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.focus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.focus@tok () Term)

; </end encoding let focus>


; <Start encoding let dump1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.dump1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.dump1@tok () Term)

; </end encoding let dump1>


; <Start encoding let rec mapAll>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.mapAll (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.mapAll@tok () Term)

; </end encoding let rec mapAll>


; <Start encoding let rec iterAll>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAll (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAll@tok () Term)

; </end encoding let rec iterAll>


; <Start encoding let iterAllSMT>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAllSMT (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAllSMT@tok () Term)

; </end encoding let iterAllSMT>


; <Start encoding let seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.seq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.seq@tok () Term)

; </end encoding let seq>


; <Start encoding let exact_args>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_args (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_args@tok () Term)

; </end encoding let exact_args>


; <Start encoding let exact_n>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_n (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_n@tok () Term)

; </end encoding let exact_n>


; <Start encoding let ngoals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals@tok () Term)

; </end encoding let ngoals>


; <Start encoding let ngoals_smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals_smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals_smt@tok () Term)

; </end encoding let ngoals_smt>


; <Start encoding let fresh_namedv_named>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv_named (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv_named@tok () Term)

; </end encoding let fresh_namedv_named>


; <Start encoding let fresh_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv@tok () Term)

; </end encoding let fresh_namedv>


; <Start encoding let fresh_binder_named>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder_named (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder_named@tok () Term)

; </end encoding let fresh_binder_named>


; <Start encoding let fresh_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder@tok () Term)

; </end encoding let fresh_binder>


; <Start encoding let fresh_implicit_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_implicit_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_implicit_binder@tok () Term)

; </end encoding let fresh_implicit_binder>


; <Start encoding let guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.guard@tok () Term)

; </end encoding let guard>


; <Start encoding let try_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.try_with (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.try_with@tok () Term)

; </end encoding let try_with>


; <Start encoding let trytac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trytac (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trytac@tok () Term)

; </end encoding let trytac>


; <Start encoding let or_else>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.or_else (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.or_else@tok () Term)

; </end encoding let or_else>


; <Skipped val FStar.Tactics.V2.Derived.op_Less_Bar_Greater/>


; <Start encoding let op_Less_Bar_Greater>

(declare-fun Non_total_Tm_arrow_240d309665d6c9d3cdfd650d488ccf5a (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.op_Less_Bar_Greater (Term Term Term) Term)



(declare-fun Tm_arrow_4812a79af3306481527e9fb20aa1a8f2 () Term)
(declare-fun FStar.Tactics.V2.Derived.op_Less_Bar_Greater@tok () Term)



;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_209 (Term Term Term) Term)

; </end encoding let op_Less_Bar_Greater>


; <Start encoding let first>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.first (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.first@tok () Term)

; </end encoding let first>


; <Start encoding let rec repeat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat@tok () Term)

; </end encoding let rec repeat>


; <Start encoding let repeat1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat1@tok () Term)

; </end encoding let repeat1>


; <Start encoding let repeat'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat_@tok () Term)

; </end encoding let repeat'>


; <Start encoding let norm_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.norm_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.norm_term@tok () Term)

; </end encoding let norm_term>


; <Start encoding let join_all_smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.join_all_smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.join_all_smt_goals@tok () Term)

; </end encoding let join_all_smt_goals>


; <Start encoding let discard>


(declare-fun FStar.Tactics.V2.Derived.discard (Term Term) Term)


(declare-fun Tm_arrow_ac813df66493e8083fb537450af0aa2d () Term)
(declare-fun FStar.Tactics.V2.Derived.discard@tok () Term)


;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_252 (Term Term) Term)

; </end encoding let discard>


; <Start encoding let rec repeatseq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeatseq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeatseq@tok () Term)

; </end encoding let rec repeatseq>


; <Start encoding let tadmit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tadmit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tadmit@tok () Term)

; </end encoding let tadmit>


; <Start encoding let admit1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit1@tok () Term)

; </end encoding let admit1>


; <Start encoding let admit_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_all@tok () Term)

; </end encoding let admit_all>


; <Start encoding let is_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.is_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.is_guard@tok () Term)

; </end encoding let is_guard>


; <Start encoding let skip_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.skip_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.skip_guard@tok () Term)

; </end encoding let skip_guard>


; <Start encoding let guards_to_smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.guards_to_smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.guards_to_smt@tok () Term)

; </end encoding let guards_to_smt>


; <Start encoding let simpl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.simpl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.simpl@tok () Term)

; </end encoding let simpl>


; <Start encoding let whnf>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.whnf (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.whnf@tok () Term)

; </end encoding let whnf>


; <Start encoding let compute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.compute (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.compute@tok () Term)

; </end encoding let compute>


; <Start encoding let intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intros@tok () Term)

; </end encoding let intros>


; <Start encoding let intros'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intros_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intros_@tok () Term)

; </end encoding let intros'>


; <Start encoding let destruct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct@tok () Term)

; </end encoding let destruct>


; <Start encoding let destruct_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_intros@tok () Term)

; </end encoding let destruct_intros>


; <Skipped val FStar.Tactics.V2.Derived.__cut/>


; <Start encoding let __cut>


(declare-fun FStar.Tactics.V2.Derived.__cut (Term Term Term Term) Term)

(declare-fun Tm_arrow_4d14630bf8cde080839dc2f618ad299b () Term)
(declare-fun FStar.Tactics.V2.Derived.__cut@tok () Term)


; </end encoding let __cut>


; <Start encoding let tcut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tcut (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tcut@tok () Term)

; </end encoding let tcut>


; <Start encoding let pose>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pose (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pose@tok () Term)

; </end encoding let pose>


; <Start encoding let intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intro_as@tok () Term)

; </end encoding let intro_as>


; <Start encoding let pose_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pose_as (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pose_as@tok () Term)

; </end encoding let pose_as>


; <Start encoding let for_each_binding>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.for_each_binding (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.for_each_binding@tok () Term)

; </end encoding let for_each_binding>


; <Start encoding let rec revert_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.revert_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.revert_all@tok () Term)

; </end encoding let rec revert_all>


; <Start encoding let binder_sort>

(declare-fun FStar.Tactics.V2.Derived.binder_sort (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.binder_sort@tok () Term)

; </end encoding let binder_sort>


; <Start encoding let rec __assumption_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__assumption_aux (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__assumption_aux@tok () Term)

; </end encoding let rec __assumption_aux>


; <Start encoding let assumption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.assumption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.assumption@tok () Term)

; </end encoding let assumption>


; <Start encoding let destruct_equality_implication>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_equality_implication (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_equality_implication@tok () Term)

; </end encoding let destruct_equality_implication>


; <Start encoding let __eq_sym>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__eq_sym (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__eq_sym@tok () Term)

; </end encoding let __eq_sym>


; <Start encoding let rewrite'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_@tok () Term)

; </end encoding let rewrite'>


; <Start encoding let rec try_rewrite_equality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.try_rewrite_equality (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.try_rewrite_equality@tok () Term)

; </end encoding let rec try_rewrite_equality>


; <Start encoding let rec rewrite_all_context_equalities>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_all_context_equalities (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_all_context_equalities@tok () Term)

; </end encoding let rec rewrite_all_context_equalities>


; <Start encoding let rewrite_eqs_from_context>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_eqs_from_context (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_eqs_from_context@tok () Term)

; </end encoding let rewrite_eqs_from_context>


; <Start encoding let rewrite_equality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_equality (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_equality@tok () Term)

; </end encoding let rewrite_equality>


; <Start encoding let unfold_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unfold_def (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unfold_def@tok () Term)

; </end encoding let unfold_def>


; <Start encoding let l_to_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.l_to_r (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.l_to_r@tok () Term)

; </end encoding let l_to_r>


; <Start encoding let mk_squash>

(declare-fun FStar.Tactics.V2.Derived.mk_squash (Term) Term)
(declare-fun Tm_arrow_c511ca6db8fb863aef3e38e31ce359ed () Term)
(declare-fun FStar.Tactics.V2.Derived.mk_squash@tok () Term)

; </end encoding let mk_squash>


; <Start encoding let mk_sq_eq>

(declare-fun FStar.Tactics.V2.Derived.mk_sq_eq (Term Term) Term)
(declare-fun Tm_arrow_b2c1efe88e906b8a848fce7122837b71 () Term)
(declare-fun FStar.Tactics.V2.Derived.mk_sq_eq@tok () Term)

; </end encoding let mk_sq_eq>


; <Start encoding let __grewrite_derived>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__grewrite_derived (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__grewrite_derived@tok () Term)

; </end encoding let __grewrite_derived>


; <Start encoding let __un_sq_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__un_sq_eq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__un_sq_eq@tok () Term)

; </end encoding let __un_sq_eq>


; <Start encoding let grewrite_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.grewrite_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.grewrite_eq@tok () Term)

; </end encoding let grewrite_eq>


; <Start encoding let admit_dump_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump_t@tok () Term)

; </end encoding let admit_dump_t>


; <Skipped val FStar.Tactics.V2.Derived.admit_dump/>


; <Start encoding let admit_dump>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump@tok () Term)

; </end encoding let admit_dump>


; <Start encoding let magic_dump_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.magic_dump_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.magic_dump_t@tok () Term)

; </end encoding let magic_dump_t>


; <Skipped val FStar.Tactics.V2.Derived.magic_dump/>


; <Start encoding let magic_dump>

(declare-fun FStar.Tactics.V2.Derived.magic_dump (Term Term Term) Term)
(declare-fun Tm_arrow_f31127736e0cabafd323e1d4a75abe30 () Term)
(declare-fun FStar.Tactics.V2.Derived.magic_dump@tok () Term)

; </end encoding let magic_dump>


; <Start encoding let change_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.change_with (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.change_with@tok () Term)

; </end encoding let change_with>


; <Start encoding let change_sq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.change_sq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.change_sq@tok () Term)

; </end encoding let change_sq>


; <Start encoding let finish_by>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.finish_by (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.finish_by@tok () Term)

; </end encoding let finish_by>


; <Start encoding let solve_then>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.solve_then (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.solve_then@tok () Term)

; </end encoding let solve_then>


; <Start encoding let add_elem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.add_elem (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.add_elem@tok () Term)

; </end encoding let add_elem>


; <Start encoding let specialize>

(declare-fun FStar.Tactics.V2.Derived.specialize (Term Term Term) Term)

(declare-fun Tm_arrow_d136b0a37e05dd767471f5aeaf653187 () Term)
(declare-fun FStar.Tactics.V2.Derived.specialize@tok () Term)

;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_287 (Term Term) Term)

; </end encoding let specialize>


; <Start encoding let tlabel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel@tok () Term)

; </end encoding let tlabel>


; <Start encoding let tlabel'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel_@tok () Term)

; </end encoding let tlabel'>


; <Start encoding let focus_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.focus_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.focus_all@tok () Term)

; </end encoding let focus_all>


; <Start encoding let rec extract_nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented_token () Term)
(declare-fun FStar.Tactics.V2.Derived.extract_nth (Term Term Term) Term)
(declare-fun FStar.Tactics.V2.Derived.extract_nth@tok () Term)
(declare-fun Tm_arrow_2690a7e0ca66f539bbdae5e05b22faf0 () Term)

; </end encoding let rec extract_nth>


; <Start encoding let bump_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.bump_nth (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.bump_nth@tok () Term)

; </end encoding let bump_nth>


; <Start encoding let rec destruct_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_list (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_list@tok () Term)

; </end encoding let rec destruct_list>


; <Start encoding let get_match_body>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.get_match_body (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.get_match_body@tok () Term)

; </end encoding let get_match_body>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.last@tok () Term)

; </end encoding let rec last>


; <Start encoding let branch_on_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.branch_on_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.branch_on_match@tok () Term)

; </end encoding let branch_on_match>


; <Start encoding let nth_var>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.nth_var (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.nth_var@tok () Term)

; </end encoding let nth_var>


; <Start encoding let rec mk_abs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.mk_abs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.mk_abs@tok () Term)

; </end encoding let rec mk_abs>


; <Start encoding let namedv_to_simple_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.namedv_to_simple_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.namedv_to_simple_binder@tok () Term)

; </end encoding let namedv_to_simple_binder>


; <Start encoding let binding_to_simple_binder>

(declare-fun FStar.Tactics.V2.Derived.binding_to_simple_binder (Term) Term)
(declare-fun Tm_arrow_dc75b10104c25ad359edacf654eb7137 () Term)
(declare-fun FStar.Tactics.V2.Derived.binding_to_simple_binder@tok () Term)

; </end encoding let binding_to_simple_binder>


; <Start encoding let string_to_term_with_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.string_to_term_with_lb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.string_to_term_with_lb@tok () Term)

; </end encoding let string_to_term_with_lb>


; <Skipped val FStar.Tactics.V2.Derived.lem_trans/>


; <Start encoding let lem_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.lem_trans (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.lem_trans@tok () Term)

; </end encoding let lem_trans>


; <Start encoding let trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trans (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trans@tok () Term)

; </end encoding let trans>


; <Start encoding let smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync@tok () Term)

; </end encoding let smt_sync>


; <Start encoding let smt_sync'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync_@tok () Term)

; </end encoding let smt_sync'>


; <Start encoding let check_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.check_equiv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.check_equiv@tok () Term)

; </end encoding let check_equiv>


; <Start encoding let check_equiv_nosmt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.check_equiv_nosmt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.check_equiv_nosmt@tok () Term)

; </end encoding let check_equiv_nosmt>


; End Externals for module FStar.Tactics.V2.Derived


; Externals for interface FStar.Tactics.V2.Bare


; End Externals for interface FStar.Tactics.V2.Bare


; Externals for interface FStar.Tactics.V2


; End Externals for interface FStar.Tactics.V2


; Externals for interface FStar.FunctionalExtensionality


; <Start encoding let arrow>


(declare-fun FStar.FunctionalExtensionality.arrow (Term Term) Term)

(declare-fun Tm_arrow_28022b1931e0c9114f09925e8271570a () Term)
(declare-fun FStar.FunctionalExtensionality.arrow@tok () Term)

(declare-fun Tm_arrow_a7d5cc170be69663c495e8582d2bc62a (Term Term) Term)

; </end encoding let arrow>


; <Start encoding let efun>


(declare-fun FStar.FunctionalExtensionality.efun (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.efun@tok () Term)



; </end encoding let efun>


; <Start encoding let feq>




(declare-fun FStar.FunctionalExtensionality.feq (Term Term Term Term) Term)



(declare-fun Tm_arrow_a26edf208afb0682b12235c66ccbd71c () Term)
(declare-fun FStar.FunctionalExtensionality.feq@tok () Term)




; </end encoding let feq>


; <Start encoding val FStar.FunctionalExtensionality.on_domain>



(declare-fun FStar.FunctionalExtensionality.on_domain (Term Term Term) Term)



(declare-fun Tm_arrow_4644eedc14c2df3e417da1b7c07108e6 () Term)
(declare-fun FStar.FunctionalExtensionality.on_domain@tok () Term)


; </end encoding val FStar.FunctionalExtensionality.on_domain>


; <Start encoding val FStar.FunctionalExtensionality.feq_on_domain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.feq_on_domain>


; <Start encoding val FStar.FunctionalExtensionality.idempotence_on_domain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.idempotence_on_domain>


; <Start encoding let is_restricted>



(declare-fun FStar.FunctionalExtensionality.is_restricted (Term Term Term) Term)


(declare-fun Tm_arrow_b9e5e589ff6008bf9dc6c8ac06a76d9b () Term)
(declare-fun FStar.FunctionalExtensionality.is_restricted@tok () Term)



; </end encoding let is_restricted>


; <Start encoding let restricted_t>


(declare-fun FStar.FunctionalExtensionality.restricted_t (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.restricted_t@tok () Term)


(declare-fun Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e (Term Term) Term)

; </end encoding let restricted_t>


; <Start encoding let op_Hat_Subtraction_Greater>

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater (Term Term) Term)

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater@tok () Term)

(declare-fun Tm_abs_134069e179ddf4705519081c391c4e10 (Term Term) Term)

; </end encoding let op_Hat_Subtraction_Greater>


; <Start encoding let on_dom>



(declare-fun FStar.FunctionalExtensionality.on_dom (Term Term Term) Term)


(declare-fun Tm_arrow_2c8a39c5d1179d9b2dbff37a928311ac () Term)
(declare-fun FStar.FunctionalExtensionality.on_dom@tok () Term)



; </end encoding let on_dom>


; <Start encoding let on>


(declare-fun FStar.FunctionalExtensionality.on (Term Term Term) Term)



(declare-fun Tm_arrow_eab9bf17eb33be7efca62de21f27985c () Term)
(declare-fun FStar.FunctionalExtensionality.on@tok () Term)






; </end encoding let on>


; <Start encoding val FStar.FunctionalExtensionality.extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality@tok () Term)




; </end encoding val FStar.FunctionalExtensionality.extensionality>


; <Start encoding let arrow_g>


(declare-fun FStar.FunctionalExtensionality.arrow_g (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.arrow_g@tok () Term)



; </end encoding let arrow_g>


; <Start encoding let efun_g>


(declare-fun FStar.FunctionalExtensionality.efun_g (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.efun_g@tok () Term)



; </end encoding let efun_g>


; <Start encoding let feq_g>




(declare-fun FStar.FunctionalExtensionality.feq_g (Term Term Term Term) Term)



(declare-fun Tm_arrow_361ba84e60d273d78a5743d30c9dc908 () Term)
(declare-fun FStar.FunctionalExtensionality.feq_g@tok () Term)




; </end encoding let feq_g>


; <Start encoding val FStar.FunctionalExtensionality.on_domain_g>



(declare-fun FStar.FunctionalExtensionality.on_domain_g (Term Term Term) Term)



(declare-fun Tm_arrow_bf6371335aea4d90f7963f85ebad8f0d () Term)
(declare-fun FStar.FunctionalExtensionality.on_domain_g@tok () Term)


; </end encoding val FStar.FunctionalExtensionality.on_domain_g>


; <Start encoding val FStar.FunctionalExtensionality.feq_on_domain_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain_g (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain_g@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.feq_on_domain_g>


; <Start encoding val FStar.FunctionalExtensionality.idempotence_on_domain_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain_g (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain_g@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.idempotence_on_domain_g>


; <Start encoding let is_restricted_g>



(declare-fun FStar.FunctionalExtensionality.is_restricted_g (Term Term Term) Term)


(declare-fun Tm_arrow_eadb252d9886eeba4938e11c03ce9b79 () Term)
(declare-fun FStar.FunctionalExtensionality.is_restricted_g@tok () Term)



; </end encoding let is_restricted_g>


; <Start encoding let restricted_g_t>


(declare-fun FStar.FunctionalExtensionality.restricted_g_t (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.restricted_g_t@tok () Term)


(declare-fun Tm_refine_9185da06fca917c5514ae63042657873 (Term Term) Term)

; </end encoding let restricted_g_t>


; <Start encoding let op_Hat_Subtraction_Greater_Greater>

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater (Term Term) Term)

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater@tok () Term)



; </end encoding let op_Hat_Subtraction_Greater_Greater>


; <Start encoding let on_dom_g>



(declare-fun FStar.FunctionalExtensionality.on_dom_g (Term Term Term) Term)


(declare-fun Tm_arrow_2e3db44d1263cf9452aaa6907eac66cc () Term)
(declare-fun FStar.FunctionalExtensionality.on_dom_g@tok () Term)



; </end encoding let on_dom_g>


; <Start encoding let on_g>


(declare-fun FStar.FunctionalExtensionality.on_g (Term Term Term) Term)



(declare-fun Tm_arrow_93a363f6461271c3e18b18593d7d03bf () Term)
(declare-fun FStar.FunctionalExtensionality.on_g@tok () Term)






; </end encoding let on_g>


; <Start encoding val FStar.FunctionalExtensionality.extensionality_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality_g (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality_g@tok () Term)




; </end encoding val FStar.FunctionalExtensionality.extensionality_g>


; End Externals for interface FStar.FunctionalExtensionality


; Externals for module FStar.Constructive


; <Start encoding type FStar.Constructive.cand>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.cand (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Constructive.cand@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.Conj (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.Conj_p1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.Conj_p2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.Conj_h1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.Conj_h2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Constructive.Conj
(declare-fun FStar.Constructive.Conj@tok () Term)
(declare-fun Tm_arrow_b5ad707ef7a0e75f812387e83195d98b () Term)

; <start constructor FStar.Constructive.cand>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.cand ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Constructive.cand @x0
@x1))
 
;;no pats
:qid is-FStar.Constructive.cand))))

; </end constructor FStar.Constructive.cand>


; <start constructor FStar.Constructive.Conj>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.Conj ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Constructive.Conj (FStar.Constructive.Conj_p1 __@x0)
(FStar.Constructive.Conj_p2 __@x0)
(FStar.Constructive.Conj_h1 __@x0)
(FStar.Constructive.Conj_h2 __@x0)))))

; </end constructor FStar.Constructive.Conj>


; </end encoding type FStar.Constructive.cand>


; <Start encoding assume FStar.Constructive.cand__uu___haseq>


; </end encoding assume FStar.Constructive.cand__uu___haseq>


; <Start encoding val FStar.Constructive.uu___is_Conj>

(declare-fun FStar.Constructive.uu___is_Conj (Term Term Term) Term)
(declare-fun Tm_arrow_354466e2c55ea0befcb6aecdaa7ee0a2 () Term)
(declare-fun FStar.Constructive.uu___is_Conj@tok () Term)

; </end encoding val FStar.Constructive.uu___is_Conj>


; <Skipped let uu___is_Conj/>


; <Start encoding val FStar.Constructive.__proj__Conj__item__h1>

(declare-fun FStar.Constructive.__proj__Conj__item__h1 (Term Term Term) Term)
(declare-fun Tm_arrow_10d5d8ba1487f701d11794bb68732f6a () Term)
(declare-fun FStar.Constructive.__proj__Conj__item__h1@tok () Term)

; </end encoding val FStar.Constructive.__proj__Conj__item__h1>


; <Skipped let __proj__Conj__item__h1/>


; <Start encoding val FStar.Constructive.__proj__Conj__item__h2>

(declare-fun FStar.Constructive.__proj__Conj__item__h2 (Term Term Term) Term)
(declare-fun Tm_arrow_4f1f9e16888f29baeeb60d13ac69b5fb () Term)
(declare-fun FStar.Constructive.__proj__Conj__item__h2@tok () Term)

; </end encoding val FStar.Constructive.__proj__Conj__item__h2>


; <Skipped let __proj__Conj__item__h2/>


; <Start encoding type FStar.Constructive.cor>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.cor (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Constructive.cor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.IntroL (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.IntroL_p1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.IntroL_p2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.IntroL_h (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Constructive.IntroL
(declare-fun FStar.Constructive.IntroL@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.IntroR (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.IntroR_p1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.IntroR_p2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.IntroR_h (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Constructive.IntroR
(declare-fun FStar.Constructive.IntroR@tok () Term)
(declare-fun Tm_arrow_bb958d608f1397de04fff7015f87d559 () Term)
(declare-fun Tm_arrow_68236a1289cc0d59a9852b0c337622bd () Term)

; <start constructor FStar.Constructive.cor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.cor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
118)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Constructive.cor @x0
@x1))
 
;;no pats
:qid is-FStar.Constructive.cor))))

; </end constructor FStar.Constructive.cor>


; <start constructor FStar.Constructive.IntroL>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.IntroL ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
(FStar.Constructive.IntroL (FStar.Constructive.IntroL_p1 __@x0)
(FStar.Constructive.IntroL_p2 __@x0)
(FStar.Constructive.IntroL_h __@x0)))))

; </end constructor FStar.Constructive.IntroL>


; <start constructor FStar.Constructive.IntroR>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.IntroR ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
(FStar.Constructive.IntroR (FStar.Constructive.IntroR_p1 __@x0)
(FStar.Constructive.IntroR_p2 __@x0)
(FStar.Constructive.IntroR_h __@x0)))))

; </end constructor FStar.Constructive.IntroR>


; </end encoding type FStar.Constructive.cor>


; <Start encoding assume FStar.Constructive.cor__uu___haseq>


; </end encoding assume FStar.Constructive.cor__uu___haseq>


; <Start encoding val FStar.Constructive.uu___is_IntroL>

(declare-fun FStar.Constructive.uu___is_IntroL (Term Term Term) Term)
(declare-fun Tm_arrow_12b9e2705a97d306238b0d0e4e4d2ceb () Term)
(declare-fun FStar.Constructive.uu___is_IntroL@tok () Term)

; </end encoding val FStar.Constructive.uu___is_IntroL>


; <Skipped let uu___is_IntroL/>


; <Start encoding val FStar.Constructive.__proj__IntroL__item__h>

(declare-fun Tm_refine_5f96298b0b74547bf135efed6725faec (Term Term) Term)
(declare-fun FStar.Constructive.__proj__IntroL__item__h (Term Term Term) Term)

(declare-fun Tm_arrow_901882b9ecc7f824301287c5e4aac8dd () Term)
(declare-fun FStar.Constructive.__proj__IntroL__item__h@tok () Term)

; </end encoding val FStar.Constructive.__proj__IntroL__item__h>


; <Skipped let __proj__IntroL__item__h/>


; <Start encoding val FStar.Constructive.uu___is_IntroR>

(declare-fun FStar.Constructive.uu___is_IntroR (Term Term Term) Term)

(declare-fun FStar.Constructive.uu___is_IntroR@tok () Term)

; </end encoding val FStar.Constructive.uu___is_IntroR>


; <Skipped let uu___is_IntroR/>


; <Start encoding val FStar.Constructive.__proj__IntroR__item__h>

(declare-fun Tm_refine_7fbfb42f7ce95e0df3d91787685cfbfc (Term Term) Term)
(declare-fun FStar.Constructive.__proj__IntroR__item__h (Term Term Term) Term)

(declare-fun Tm_arrow_f49b954fec029f8724df5706fe724a01 () Term)
(declare-fun FStar.Constructive.__proj__IntroR__item__h@tok () Term)

; </end encoding val FStar.Constructive.__proj__IntroR__item__h>


; <Skipped let __proj__IntroR__item__h/>


; <Start encoding let cimp>

(declare-fun FStar.Constructive.cimp (Term Term) Term)

(declare-fun FStar.Constructive.cimp@tok () Term)


; </end encoding let cimp>


; <Start encoding let ciff>

(declare-fun FStar.Constructive.ciff (Term Term) Term)

(declare-fun FStar.Constructive.ciff@tok () Term)

; </end encoding let ciff>


; <Start encoding type FStar.Constructive.cexists>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.cexists (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Constructive.cexists@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.ExIntro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.ExIntro_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.ExIntro_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.ExIntro_x (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Constructive.ExIntro_h (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Constructive.ExIntro
(declare-fun FStar.Constructive.ExIntro@tok () Term)



(declare-fun Tm_arrow_4ac0bb6397d84e629e9cb3b5b47c15ba () Term)

; <start constructor FStar.Constructive.cexists>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.cexists ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Constructive.cexists @x0
@x1))
 
;;no pats
:qid is-FStar.Constructive.cexists))))

; </end constructor FStar.Constructive.cexists>


; <start constructor FStar.Constructive.ExIntro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.ExIntro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
163)
(= __@x0
(FStar.Constructive.ExIntro (FStar.Constructive.ExIntro_a __@x0)
(FStar.Constructive.ExIntro_p __@x0)
(FStar.Constructive.ExIntro_x __@x0)
(FStar.Constructive.ExIntro_h __@x0)))))

; </end constructor FStar.Constructive.ExIntro>


; </end encoding type FStar.Constructive.cexists>


; <Start encoding val FStar.Constructive.uu___is_ExIntro>


(declare-fun FStar.Constructive.uu___is_ExIntro (Term Term Term) Term)

(declare-fun Tm_arrow_a36a21bae688c8d41dd597f14a6f837a () Term)
(declare-fun FStar.Constructive.uu___is_ExIntro@tok () Term)

; </end encoding val FStar.Constructive.uu___is_ExIntro>


; <Skipped let uu___is_ExIntro/>


; <Start encoding val FStar.Constructive.__proj__ExIntro__item__x>


(declare-fun FStar.Constructive.__proj__ExIntro__item__x (Term Term Term) Term)

(declare-fun Tm_arrow_e6bfa29cb2f95563578f10c74a84e13d () Term)
(declare-fun FStar.Constructive.__proj__ExIntro__item__x@tok () Term)

; </end encoding val FStar.Constructive.__proj__ExIntro__item__x>


; <Skipped let __proj__ExIntro__item__x/>


; <Start encoding val FStar.Constructive.__proj__ExIntro__item__h>


(declare-fun FStar.Constructive.__proj__ExIntro__item__h (Term Term Term) Term)

(declare-fun Tm_arrow_7bbf506d86e91fea67156571c4bebe6c () Term)
(declare-fun FStar.Constructive.__proj__ExIntro__item__h@tok () Term)

; </end encoding val FStar.Constructive.__proj__ExIntro__item__h>


; <Skipped let __proj__ExIntro__item__h/>


; <Start encoding type FStar.Constructive.ceq>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.ceq (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Constructive.ceq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Constructive.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Constructive.Refl
(declare-fun FStar.Constructive.Refl@tok () Term)
(declare-fun Tm_arrow_4ebd591c0d318672411bf82518b35ba9 () Term)

; <start constructor FStar.Constructive.ceq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.ceq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
187)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Constructive.ceq @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Constructive.ceq))))

; </end constructor FStar.Constructive.ceq>


; <start constructor FStar.Constructive.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
194)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Constructive.Refl @x0
@x1))
 
;;no pats
:qid is-FStar.Constructive.Refl))))

; </end constructor FStar.Constructive.Refl>


; </end encoding type FStar.Constructive.ceq>


; <Start encoding assume FStar.Constructive.ceq__uu___haseq>


; </end encoding assume FStar.Constructive.ceq__uu___haseq>


; <Start encoding val FStar.Constructive.uu___is_Refl>

(declare-fun FStar.Constructive.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_028d33e3155ea7dd7ba1cd8e44a026d5 () Term)
(declare-fun FStar.Constructive.uu___is_Refl@tok () Term)

; </end encoding val FStar.Constructive.uu___is_Refl>


; <Skipped let uu___is_Refl/>


; <Start encoding type FStar.Constructive.ceq_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.ceq_type (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Constructive.ceq_type@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.ReflType (Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.Constructive.ReflType@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Constructive.ReflType
(declare-fun FStar.Constructive.ReflType@tok () Term)
(declare-fun Tm_arrow_3f396f2af9340529fda6474354549b1a () Term)

; <start constructor FStar.Constructive.ceq_type>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.ceq_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
201)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Constructive.ceq_type @x0
@x1))
 
;;no pats
:qid is-FStar.Constructive.ceq_type))))

; </end constructor FStar.Constructive.ceq_type>


; <start constructor FStar.Constructive.ReflType>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.ReflType ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
208)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Constructive.ReflType @x0))
 
;;no pats
:qid is-FStar.Constructive.ReflType))))

; </end constructor FStar.Constructive.ReflType>


; </end encoding type FStar.Constructive.ceq_type>


; <Start encoding assume FStar.Constructive.ceq_type__uu___haseq>


; </end encoding assume FStar.Constructive.ceq_type__uu___haseq>


; <Start encoding val FStar.Constructive.uu___is_ReflType>

(declare-fun FStar.Constructive.uu___is_ReflType (Term Term Term) Term)
(declare-fun Tm_arrow_4961a7b62d318109d14bde52ed7e0f2c () Term)
(declare-fun FStar.Constructive.uu___is_ReflType@tok () Term)

; </end encoding val FStar.Constructive.uu___is_ReflType>


; <Skipped let uu___is_ReflType/>


; <Skipped val FStar.Constructive.eq_ind/>


; <Start encoding let eq_ind>


(declare-fun FStar.Constructive.eq_ind (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_943f2e79349056326319dad5b9009a7c () Term)
(declare-fun FStar.Constructive.eq_ind@tok () Term)


; </end encoding let eq_ind>


; <Skipped val FStar.Constructive.ceq_eq/>


; <Start encoding let ceq_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Constructive.ceq_eq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Constructive.ceq_eq@tok () Term)

; </end encoding let ceq_eq>


; <Skipped val FStar.Constructive.ceq_congruence/>


; <Start encoding let ceq_congruence>


(declare-fun FStar.Constructive.ceq_congruence (Term Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_0206ad779bd54e21616cbf4efd77f705 () Term)
(declare-fun FStar.Constructive.ceq_congruence@tok () Term)


; </end encoding let ceq_congruence>


; <Skipped val FStar.Constructive.ceq_symm/>


; <Start encoding let ceq_symm>

(declare-fun FStar.Constructive.ceq_symm (Term Term Term Term) Term)
(declare-fun Tm_arrow_6ac029adc406361eff3ca18eeded309b () Term)
(declare-fun FStar.Constructive.ceq_symm@tok () Term)

; </end encoding let ceq_symm>


; <Skipped val FStar.Constructive.ceq_trans/>


; <Start encoding let ceq_trans>

(declare-fun FStar.Constructive.ceq_trans (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2420b906919e3e43b8332290e3a92005 () Term)
(declare-fun FStar.Constructive.ceq_trans@tok () Term)

; </end encoding let ceq_trans>


; <Start encoding type FStar.Constructive.ctrue>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.ctrue () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.I () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Constructive.I
(declare-fun FStar.Constructive.I@tok () Term)

; <start constructor FStar.Constructive.ctrue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.ctrue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
235)
(= __@x0
FStar.Constructive.ctrue)))

; </end constructor FStar.Constructive.ctrue>


; <start constructor FStar.Constructive.I>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.I ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
FStar.Constructive.I)))

; </end constructor FStar.Constructive.I>


; </end encoding type FStar.Constructive.ctrue>


; <Start encoding assume FStar.Constructive.ctrue__uu___haseq>


; </end encoding assume FStar.Constructive.ctrue__uu___haseq>


; <Start encoding val FStar.Constructive.uu___is_I>

(declare-fun FStar.Constructive.uu___is_I (Term) Term)
(declare-fun Tm_arrow_8bc4383f980f7a0a658032e006f71e85 () Term)
(declare-fun FStar.Constructive.uu___is_I@tok () Term)

; </end encoding val FStar.Constructive.uu___is_I>


; <Skipped let uu___is_I/>


; <Start encoding type FStar.Constructive.cfalse>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Constructive.cfalse () Term)

; <start constructor FStar.Constructive.cfalse>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Constructive.cfalse ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
244)
(= __@x0
FStar.Constructive.cfalse)))

; </end constructor FStar.Constructive.cfalse>


; </end encoding type FStar.Constructive.cfalse>


; <Start encoding assume FStar.Constructive.cfalse__uu___haseq>


; </end encoding assume FStar.Constructive.cfalse__uu___haseq>


; <Skipped val FStar.Constructive.cfalse_elim/>


; <Start encoding let cfalse_elim>

(declare-fun FStar.Constructive.cfalse_elim (Term Term) Term)
(declare-fun Tm_arrow_b2ed75f34d9185940db9419d3ad6019e () Term)
(declare-fun FStar.Constructive.cfalse_elim@tok () Term)

; </end encoding let cfalse_elim>


; <Skipped val FStar.Constructive.false_elim2/>


; <Start encoding let false_elim2>

(declare-fun FStar.Constructive.false_elim2 (Term Term) Term)

(declare-fun FStar.Constructive.false_elim2@tok () Term)

; </end encoding let false_elim2>


; <Skipped val FStar.Constructive.false_elim/>


; <Start encoding let false_elim>


(declare-fun FStar.Constructive.false_elim (Term Term) Term)


(declare-fun FStar.Constructive.false_elim@tok () Term)


; </end encoding let false_elim>


; <Start encoding let cnot>

(declare-fun FStar.Constructive.cnot (Term) Term)

(declare-fun FStar.Constructive.cnot@tok () Term)

; </end encoding let cnot>


; End Externals for module FStar.Constructive


; Externals for module StlcStrongDbParSubst


; <Start encoding type StlcStrongDbParSubst.typ>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.typ () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.TArr (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TArr__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TArr__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.TArr
(declare-fun StlcStrongDbParSubst.TArr@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.TUnit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.TUnit
(declare-fun StlcStrongDbParSubst.TUnit@tok () Term)
;;;;;;;;;;;;;;;;_0: typ -> _1: typ -> typ
(declare-fun Tm_arrow_20e32b21e0cd44f546a31273c4bca64c () Term)

; <start constructor StlcStrongDbParSubst.typ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.typ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
StlcStrongDbParSubst.typ)))

; </end constructor StlcStrongDbParSubst.typ>


; <start constructor StlcStrongDbParSubst.TArr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.TArr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(StlcStrongDbParSubst.TArr (StlcStrongDbParSubst.TArr__0 __@x0)
(StlcStrongDbParSubst.TArr__1 __@x0)))))

; </end constructor StlcStrongDbParSubst.TArr>


; <start constructor StlcStrongDbParSubst.TUnit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.TUnit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
StlcStrongDbParSubst.TUnit)))

; </end constructor StlcStrongDbParSubst.TUnit>


; </end encoding type StlcStrongDbParSubst.typ>


; <Start encoding assume StlcStrongDbParSubst.typ__uu___haseq>


; </end encoding assume StlcStrongDbParSubst.typ__uu___haseq>


; <Start encoding val StlcStrongDbParSubst.uu___is_TArr>

(declare-fun StlcStrongDbParSubst.uu___is_TArr (Term) Term)
;;;;;;;;;;;;;;;;projectee: typ -> Prims.bool
(declare-fun Tm_arrow_3a780c137de872218f257a8a1ebe40d8 () Term)
(declare-fun StlcStrongDbParSubst.uu___is_TArr@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_TArr>


; <Skipped let uu___is_TArr/>


; <Start encoding val StlcStrongDbParSubst.__proj__TArr__item___0>

(declare-fun Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5 () Term)
(declare-fun StlcStrongDbParSubst.__proj__TArr__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typ{TArr? _} -> typ
(declare-fun Tm_arrow_8d86f65bf3c7d4bbe18f399abb24cccf () Term)
(declare-fun StlcStrongDbParSubst.__proj__TArr__item___0@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TArr__item___0>


; <Skipped let __proj__TArr__item___0/>


; <Start encoding val StlcStrongDbParSubst.__proj__TArr__item___1>


(declare-fun StlcStrongDbParSubst.__proj__TArr__item___1 (Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__TArr__item___1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TArr__item___1>


; <Skipped let __proj__TArr__item___1/>


; <Start encoding val StlcStrongDbParSubst.uu___is_TUnit>

(declare-fun StlcStrongDbParSubst.uu___is_TUnit (Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_TUnit@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_TUnit>


; <Skipped let uu___is_TUnit/>


; <Start encoding let var>

(declare-fun StlcStrongDbParSubst.var () Term)

; </end encoding let var>


; <Start encoding type StlcStrongDbParSubst.exp>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.exp () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.EVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.EVar__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.EVar
(declare-fun StlcStrongDbParSubst.EVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.EApp (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.EApp__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.EApp__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.EApp
(declare-fun StlcStrongDbParSubst.EApp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.ELam (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.ELam__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.ELam__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.ELam
(declare-fun StlcStrongDbParSubst.ELam@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.EUnit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.EUnit
(declare-fun StlcStrongDbParSubst.EUnit@tok () Term)
;;;;;;;;;;;;;;;;_0: var -> exp
(declare-fun Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb () Term)
;;;;;;;;;;;;;;;;_0: exp -> _1: exp -> exp
(declare-fun Tm_arrow_a77418891a48a606a70051a4571e17ed () Term)
;;;;;;;;;;;;;;;;_0: typ -> _1: exp -> exp
(declare-fun Tm_arrow_812b0623341a42b392eeed8c712f07a1 () Term)

; <start constructor StlcStrongDbParSubst.exp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.exp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
StlcStrongDbParSubst.exp)))

; </end constructor StlcStrongDbParSubst.exp>


; <start constructor StlcStrongDbParSubst.EVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.EVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
131)
(= __@x0
(StlcStrongDbParSubst.EVar (StlcStrongDbParSubst.EVar__0 __@x0)))))

; </end constructor StlcStrongDbParSubst.EVar>


; <start constructor StlcStrongDbParSubst.EApp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.EApp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
136)
(= __@x0
(StlcStrongDbParSubst.EApp (StlcStrongDbParSubst.EApp__0 __@x0)
(StlcStrongDbParSubst.EApp__1 __@x0)))))

; </end constructor StlcStrongDbParSubst.EApp>


; <start constructor StlcStrongDbParSubst.ELam>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.ELam ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
(StlcStrongDbParSubst.ELam (StlcStrongDbParSubst.ELam__0 __@x0)
(StlcStrongDbParSubst.ELam__1 __@x0)))))

; </end constructor StlcStrongDbParSubst.ELam>


; <start constructor StlcStrongDbParSubst.EUnit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.EUnit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(= __@x0
StlcStrongDbParSubst.EUnit)))

; </end constructor StlcStrongDbParSubst.EUnit>


; </end encoding type StlcStrongDbParSubst.exp>


; <Start encoding assume StlcStrongDbParSubst.exp__uu___haseq>


; </end encoding assume StlcStrongDbParSubst.exp__uu___haseq>


; <Start encoding val StlcStrongDbParSubst.uu___is_EVar>

(declare-fun StlcStrongDbParSubst.uu___is_EVar (Term) Term)
;;;;;;;;;;;;;;;;projectee: exp -> Prims.bool
(declare-fun Tm_arrow_f898346e72ace530798a6541708665ca () Term)
(declare-fun StlcStrongDbParSubst.uu___is_EVar@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_EVar>


; <Skipped let uu___is_EVar/>


; <Start encoding val StlcStrongDbParSubst.__proj__EVar__item___0>

(declare-fun Tm_refine_f4accbbd705c655c07c4d28fa0433bd8 () Term)
(declare-fun StlcStrongDbParSubst.__proj__EVar__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: exp{EVar? _} -> var
(declare-fun Tm_arrow_4017c57284274b82d3fbc88b0e703cb9 () Term)
(declare-fun StlcStrongDbParSubst.__proj__EVar__item___0@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__EVar__item___0>


; <Skipped let __proj__EVar__item___0/>


; <Start encoding val StlcStrongDbParSubst.uu___is_EApp>

(declare-fun StlcStrongDbParSubst.uu___is_EApp (Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_EApp@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_EApp>


; <Skipped let uu___is_EApp/>


; <Start encoding val StlcStrongDbParSubst.__proj__EApp__item___0>

(declare-fun Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0 () Term)
(declare-fun StlcStrongDbParSubst.__proj__EApp__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: exp{EApp? _} -> exp
(declare-fun Tm_arrow_f7bb2538f35cf3a20695f9512e751b00 () Term)
(declare-fun StlcStrongDbParSubst.__proj__EApp__item___0@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__EApp__item___0>


; <Skipped let __proj__EApp__item___0/>


; <Start encoding val StlcStrongDbParSubst.__proj__EApp__item___1>


(declare-fun StlcStrongDbParSubst.__proj__EApp__item___1 (Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__EApp__item___1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__EApp__item___1>


; <Skipped let __proj__EApp__item___1/>


; <Start encoding val StlcStrongDbParSubst.uu___is_ELam>

(declare-fun StlcStrongDbParSubst.uu___is_ELam (Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_ELam@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_ELam>


; <Skipped let uu___is_ELam/>


; <Start encoding val StlcStrongDbParSubst.__proj__ELam__item___0>

(declare-fun Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416 () Term)
(declare-fun StlcStrongDbParSubst.__proj__ELam__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: exp{ELam? _} -> typ
(declare-fun Tm_arrow_e203fba9f79e33ac147c2c3c2212a69c () Term)
(declare-fun StlcStrongDbParSubst.__proj__ELam__item___0@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__ELam__item___0>


; <Skipped let __proj__ELam__item___0/>


; <Start encoding val StlcStrongDbParSubst.__proj__ELam__item___1>


(declare-fun StlcStrongDbParSubst.__proj__ELam__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: exp{ELam? _} -> exp
(declare-fun Tm_arrow_aa467f239dd82252acd4512897b424c1 () Term)
(declare-fun StlcStrongDbParSubst.__proj__ELam__item___1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__ELam__item___1>


; <Skipped let __proj__ELam__item___1/>


; <Start encoding val StlcStrongDbParSubst.uu___is_EUnit>

(declare-fun StlcStrongDbParSubst.uu___is_EUnit (Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_EUnit@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_EUnit>


; <Skipped let uu___is_EUnit/>


; <Start encoding let sub>

(declare-fun StlcStrongDbParSubst.sub () Term)


; </end encoding let sub>


; <Start encoding let renaming>

(declare-fun StlcStrongDbParSubst.renaming (Term) Term)
;;;;;;;;;;;;;;;;s: sub -> Prims.logical
(declare-fun Tm_arrow_5751f5516e546e2f67ad985614cf4548 () Term)
(declare-fun StlcStrongDbParSubst.renaming@tok () Term)

; </end encoding let renaming>


; <Skipped val StlcStrongDbParSubst.is_renaming/>


; <Start encoding let is_renaming>

(declare-fun StlcStrongDbParSubst.is_renaming (Term) Term)
(declare-fun Tm_refine_38d9e94985993c1c28936bd159c6e7c5 (Term) Term)
;;;;;;;;;;;;;;;;s: sub -> Prims.GTot (n: Prims.int{(renaming s ==> n = 0) /\ (~(renaming s) ==> n = 1)})
(declare-fun Tm_ghost_arrow_962e8e87252fac2f409bdf711247ed86 () Term)
(declare-fun StlcStrongDbParSubst.is_renaming@tok () Term)


; </end encoding let is_renaming>


; <Skipped val StlcStrongDbParSubst.sub_inc/>


; <Start encoding let sub_inc>

(declare-fun StlcStrongDbParSubst.sub_inc (Term) Term)

(declare-fun StlcStrongDbParSubst.sub_inc@tok () Term)

; </end encoding let sub_inc>


; <Skipped val StlcStrongDbParSubst.renaming_sub_inc/>


; <Start encoding let renaming_sub_inc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcStrongDbParSubst.renaming_sub_inc (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcStrongDbParSubst.renaming_sub_inc@tok () Term)

; </end encoding let renaming_sub_inc>


; <Start encoding let is_var>

(declare-fun StlcStrongDbParSubst.is_var (Term) Term)
;;;;;;;;;;;;;;;;e: exp -> Prims.int
(declare-fun Tm_arrow_02a40be8dde0274280b94aa9b94ca4ba () Term)
(declare-fun StlcStrongDbParSubst.is_var@tok () Term)

; </end encoding let is_var>


; <Skipped val StlcStrongDbParSubst.sub_elam/>


; <Skipped val StlcStrongDbParSubst.subst/>


; <Start encoding let rec subst and sub_elam>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcStrongDbParSubst.sub_elam.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcStrongDbParSubst.sub_elam.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcStrongDbParSubst.subst.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcStrongDbParSubst.subst.fuel_instrumented_token () Term)
(declare-fun StlcStrongDbParSubst.subst (Term Term) Term)
(declare-fun StlcStrongDbParSubst.subst@tok () Term)
(declare-fun StlcStrongDbParSubst.sub_elam (Term Term) Term)
(declare-fun StlcStrongDbParSubst.sub_elam@tok () Term)
(declare-fun Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e (Term) Term)
(declare-fun Tm_refine_355331772027a5870c780cc6a71c0497 (Term Term) Term)

;;;;;;;;;;;;;;;;s: sub -> e: exp -> Prims.Pure exp
(declare-fun Tm_arrow_b67f41b3025c309d6e466d9399c2fb56 () Term)


;;;;;;;;;;;;;;;;s: sub -> y: var -> Prims.Tot (e: exp{renaming s ==> EVar? e})
(declare-fun Tm_arrow_d7c23eed18639be8032fa5f7062f80fe () Term)


; </end encoding let rec subst and sub_elam>


; <Skipped val StlcStrongDbParSubst.sub_beta/>


; <Start encoding let sub_beta>

(declare-fun StlcStrongDbParSubst.sub_beta (Term) Term)
;;;;;;;;;;;;;;;;v: exp -> sub
(declare-fun Tm_arrow_2915f5cbfcf9cb1dd51522568f90c538 () Term)
(declare-fun StlcStrongDbParSubst.sub_beta@tok () Term)

(declare-fun Tm_abs_3348a440425b62f388c69bf898593dad (Term) Term)

; </end encoding let sub_beta>


; <Start encoding type StlcStrongDbParSubst.step>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.step (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StlcStrongDbParSubst.step@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.SBeta (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SBeta_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SBeta_e1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SBeta_e2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.SBeta
(declare-fun StlcStrongDbParSubst.SBeta@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.SApp1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SApp1_e1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SApp1_e2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SApp1_e1_ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SApp1_hst (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.SApp1
(declare-fun StlcStrongDbParSubst.SApp1@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.SApp2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SApp2_e1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SApp2_e2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SApp2_e2_ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.SApp2_hst (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.SApp2
(declare-fun StlcStrongDbParSubst.SApp2@tok () Term)
;;;;;;;;;;;;;;;;t: typ -> e1: exp -> e2: exp -> step (EApp (ELam t e1) e2) (subst (sub_beta e2) e1)
(declare-fun Tm_arrow_93e60eb9744f37572fb653746375b432 () Term)
;;;;;;;;;;;;;;;;e2: exp -> $hst: step e1 e1' -> step (EApp e1 e2) (EApp e1' e2)
(declare-fun Tm_arrow_b24aa5c8f8dc535b5703bdf2be6e399d () Term)
;;;;;;;;;;;;;;;;e1: exp -> $hst: step e2 e2' -> step (EApp e1 e2) (EApp e1 e2')
(declare-fun Tm_arrow_b0163ef4c39012a32f16a2e48bb1d7d1 () Term)

; <start constructor StlcStrongDbParSubst.step>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.step ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
202)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(StlcStrongDbParSubst.step @x0
@x1))
 
;;no pats
:qid is-StlcStrongDbParSubst.step))))

; </end constructor StlcStrongDbParSubst.step>


; <start constructor StlcStrongDbParSubst.SBeta>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.SBeta ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(= __@x0
(StlcStrongDbParSubst.SBeta (StlcStrongDbParSubst.SBeta_t __@x0)
(StlcStrongDbParSubst.SBeta_e1 __@x0)
(StlcStrongDbParSubst.SBeta_e2 __@x0)))))

; </end constructor StlcStrongDbParSubst.SBeta>


; <start constructor StlcStrongDbParSubst.SApp1>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.SApp1 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(StlcStrongDbParSubst.SApp1 (StlcStrongDbParSubst.SApp1_e1 __@x0)
(StlcStrongDbParSubst.SApp1_e2 __@x0)
(StlcStrongDbParSubst.SApp1_e1_ __@x0)
(StlcStrongDbParSubst.SApp1_hst __@x0)))))

; </end constructor StlcStrongDbParSubst.SApp1>


; <start constructor StlcStrongDbParSubst.SApp2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.SApp2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
223)
(= __@x0
(StlcStrongDbParSubst.SApp2 (StlcStrongDbParSubst.SApp2_e1 __@x0)
(StlcStrongDbParSubst.SApp2_e2 __@x0)
(StlcStrongDbParSubst.SApp2_e2_ __@x0)
(StlcStrongDbParSubst.SApp2_hst __@x0)))))

; </end constructor StlcStrongDbParSubst.SApp2>


; </end encoding type StlcStrongDbParSubst.step>


; <Start encoding assume StlcStrongDbParSubst.step__uu___haseq>


; </end encoding assume StlcStrongDbParSubst.step__uu___haseq>


; <Start encoding val StlcStrongDbParSubst.uu___is_SBeta>

(declare-fun StlcStrongDbParSubst.uu___is_SBeta (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: step _ _ -> Prims.bool
(declare-fun Tm_arrow_f7d786572a5c279e7bbb0de4747afc38 () Term)
(declare-fun StlcStrongDbParSubst.uu___is_SBeta@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_SBeta>


; <Skipped let uu___is_SBeta/>


; <Start encoding val StlcStrongDbParSubst.__proj__SBeta__item__t>

(declare-fun Tm_refine_f77b3ed76bf454c96a99af193538141d (Term Term) Term)
(declare-fun StlcStrongDbParSubst.__proj__SBeta__item__t (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: step _ _ {SBeta? _} -> typ
(declare-fun Tm_arrow_21cbb6a142476a21f48b372f5c4ad2a1 () Term)
(declare-fun StlcStrongDbParSubst.__proj__SBeta__item__t@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SBeta__item__t>


; <Skipped let __proj__SBeta__item__t/>


; <Start encoding val StlcStrongDbParSubst.__proj__SBeta__item__e1>


(declare-fun StlcStrongDbParSubst.__proj__SBeta__item__e1 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: step _ _ {SBeta? _} -> exp
(declare-fun Tm_arrow_c0e1af9fbd21911015de32847e662a5c () Term)
(declare-fun StlcStrongDbParSubst.__proj__SBeta__item__e1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SBeta__item__e1>


; <Skipped let __proj__SBeta__item__e1/>


; <Start encoding val StlcStrongDbParSubst.__proj__SBeta__item__e2>


(declare-fun StlcStrongDbParSubst.__proj__SBeta__item__e2 (Term Term Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__SBeta__item__e2@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SBeta__item__e2>


; <Skipped let __proj__SBeta__item__e2/>


; <Start encoding val StlcStrongDbParSubst.uu___is_SApp1>

(declare-fun StlcStrongDbParSubst.uu___is_SApp1 (Term Term Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_SApp1@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_SApp1>


; <Skipped let uu___is_SApp1/>


; <Start encoding val StlcStrongDbParSubst.__proj__SApp1__item__e1>

(declare-fun Tm_refine_1354a7d5d234f707d79e0e5c7bc75049 (Term Term) Term)
(declare-fun StlcStrongDbParSubst.__proj__SApp1__item__e1 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: step _ _ {SApp1? _} -> exp
(declare-fun Tm_arrow_b2b1d28bcc6e8b8155c407d7af672097 () Term)
(declare-fun StlcStrongDbParSubst.__proj__SApp1__item__e1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SApp1__item__e1>


; <Skipped let __proj__SApp1__item__e1/>


; <Start encoding val StlcStrongDbParSubst.__proj__SApp1__item__e2>


(declare-fun StlcStrongDbParSubst.__proj__SApp1__item__e2 (Term Term Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__SApp1__item__e2@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SApp1__item__e2>


; <Skipped let __proj__SApp1__item__e2/>


; <Start encoding val StlcStrongDbParSubst.__proj__SApp1__item__e1'>


(declare-fun StlcStrongDbParSubst.__proj__SApp1__item__e1_ (Term Term Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__SApp1__item__e1_@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SApp1__item__e1'>


; <Skipped let __proj__SApp1__item__e1'/>


; <Start encoding val StlcStrongDbParSubst.__proj__SApp1__item__hst>


(declare-fun StlcStrongDbParSubst.__proj__SApp1__item__hst (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: step _ _ {SApp1? _} -> step projectee.e1 projectee.e1'
(declare-fun Tm_arrow_38b9ed4a691d6e6e1db4e6fdfb5e06b1 () Term)
(declare-fun StlcStrongDbParSubst.__proj__SApp1__item__hst@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SApp1__item__hst>


; <Skipped let __proj__SApp1__item__hst/>


; <Start encoding val StlcStrongDbParSubst.uu___is_SApp2>

(declare-fun StlcStrongDbParSubst.uu___is_SApp2 (Term Term Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_SApp2@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_SApp2>


; <Skipped let uu___is_SApp2/>


; <Start encoding val StlcStrongDbParSubst.__proj__SApp2__item__e1>

(declare-fun Tm_refine_257ce7371bf720d0a7da5fefb63c5e43 (Term Term) Term)
(declare-fun StlcStrongDbParSubst.__proj__SApp2__item__e1 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: step _ _ {SApp2? _} -> exp
(declare-fun Tm_arrow_95d1b834305f2a02f3cbf5c5aa59c136 () Term)
(declare-fun StlcStrongDbParSubst.__proj__SApp2__item__e1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SApp2__item__e1>


; <Skipped let __proj__SApp2__item__e1/>


; <Start encoding val StlcStrongDbParSubst.__proj__SApp2__item__e2>


(declare-fun StlcStrongDbParSubst.__proj__SApp2__item__e2 (Term Term Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__SApp2__item__e2@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SApp2__item__e2>


; <Skipped let __proj__SApp2__item__e2/>


; <Start encoding val StlcStrongDbParSubst.__proj__SApp2__item__e2'>


(declare-fun StlcStrongDbParSubst.__proj__SApp2__item__e2_ (Term Term Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__SApp2__item__e2_@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SApp2__item__e2'>


; <Skipped let __proj__SApp2__item__e2'/>


; <Start encoding val StlcStrongDbParSubst.__proj__SApp2__item__hst>


(declare-fun StlcStrongDbParSubst.__proj__SApp2__item__hst (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: step _ _ {SApp2? _} -> step projectee.e2 projectee.e2'
(declare-fun Tm_arrow_40591355244ce2b2a1ee38b4818ddd01 () Term)
(declare-fun StlcStrongDbParSubst.__proj__SApp2__item__hst@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__SApp2__item__hst>


; <Skipped let __proj__SApp2__item__hst/>


; <Start encoding let env>

(declare-fun StlcStrongDbParSubst.env () Term)
;;;;;;;;;;;;;;;;_: var -> FStar.Pervasives.Native.option typ
(declare-fun Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39 () Term)

; </end encoding let env>


; <Skipped val StlcStrongDbParSubst.empty/>


; <Start encoding let empty>

(declare-fun StlcStrongDbParSubst.empty (Dummy_sort) Term)

; </end encoding let empty>


; <Skipped val StlcStrongDbParSubst.extend/>


; <Start encoding let extend>

(declare-fun StlcStrongDbParSubst.extend (Term Term) Term)
;;;;;;;;;;;;;;;;t: typ -> g: env -> env
(declare-fun Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2 () Term)
(declare-fun StlcStrongDbParSubst.extend@tok () Term)

(declare-fun Tm_abs_196d31beccd849fc7b632281c08d07b0 (Term Term) Term)

; </end encoding let extend>


; <Start encoding type StlcStrongDbParSubst.typing>

;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.typing (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun StlcStrongDbParSubst.typing@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.TyVar (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyVar_g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyVar_x (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.TyVar
(declare-fun StlcStrongDbParSubst.TyVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.TyLam (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyLam_g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyLam_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyLam_e1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyLam_t_ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyLam_hbody (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.TyLam
(declare-fun StlcStrongDbParSubst.TyLam@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.TyApp (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyApp_g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyApp_e1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyApp_e2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyApp_t11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyApp_t12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyApp_h1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyApp_h2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.TyApp
(declare-fun StlcStrongDbParSubst.TyApp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun StlcStrongDbParSubst.TyUnit (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun StlcStrongDbParSubst.TyUnit_g (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: StlcStrongDbParSubst.TyUnit
(declare-fun StlcStrongDbParSubst.TyUnit@tok () Term)
(declare-fun Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 (Term) Term)

;;;;;;;;;;;;;;;;x: var{Some? (g x)} -> typing g (EVar x) (g x).v
(declare-fun Tm_arrow_23bdf2daf50eae0814f78eb128ebb19a () Term)
;;;;;;;;;;;;;;;;t: typ -> $hbody: typing (extend t g) e1 t' -> typing g (ELam t e1) (TArr t t')
(declare-fun Tm_arrow_f2b7be596fe67fcfe2865c39b52ab1e2 () Term)
;;;;;;;;;;;;;;;;$h1: typing g e1 (TArr t11 t12) -> $h2: typing g e2 t11 -> typing g (EApp e1 e2) t12
(declare-fun Tm_arrow_514723d6beaeef14c8c55c3ee46ddfdc () Term)
;;;;;;;;;;;;;;;;typing g EUnit TUnit
(declare-fun Tm_arrow_95816a6e34b4f90f883f0fb0162da0a6 () Term)

; <start constructor StlcStrongDbParSubst.typing>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.typing ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
285)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(StlcStrongDbParSubst.typing @x0
@x1
@x2))
 
;;no pats
:qid is-StlcStrongDbParSubst.typing))))

; </end constructor StlcStrongDbParSubst.typing>


; <start constructor StlcStrongDbParSubst.TyVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.TyVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
293)
(= __@x0
(StlcStrongDbParSubst.TyVar (StlcStrongDbParSubst.TyVar_g __@x0)
(StlcStrongDbParSubst.TyVar_x __@x0)))))

; </end constructor StlcStrongDbParSubst.TyVar>


; <start constructor StlcStrongDbParSubst.TyLam>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.TyLam ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
302)
(= __@x0
(StlcStrongDbParSubst.TyLam (StlcStrongDbParSubst.TyLam_g __@x0)
(StlcStrongDbParSubst.TyLam_t __@x0)
(StlcStrongDbParSubst.TyLam_e1 __@x0)
(StlcStrongDbParSubst.TyLam_t_ __@x0)
(StlcStrongDbParSubst.TyLam_hbody __@x0)))))

; </end constructor StlcStrongDbParSubst.TyLam>


; <start constructor StlcStrongDbParSubst.TyApp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.TyApp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
310)
(= __@x0
(StlcStrongDbParSubst.TyApp (StlcStrongDbParSubst.TyApp_g __@x0)
(StlcStrongDbParSubst.TyApp_e1 __@x0)
(StlcStrongDbParSubst.TyApp_e2 __@x0)
(StlcStrongDbParSubst.TyApp_t11 __@x0)
(StlcStrongDbParSubst.TyApp_t12 __@x0)
(StlcStrongDbParSubst.TyApp_h1 __@x0)
(StlcStrongDbParSubst.TyApp_h2 __@x0)))))

; </end constructor StlcStrongDbParSubst.TyApp>


; <start constructor StlcStrongDbParSubst.TyUnit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-StlcStrongDbParSubst.TyUnit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(= __@x0
(StlcStrongDbParSubst.TyUnit (StlcStrongDbParSubst.TyUnit_g __@x0)))))

; </end constructor StlcStrongDbParSubst.TyUnit>


; </end encoding type StlcStrongDbParSubst.typing>


; <Start encoding val StlcStrongDbParSubst.uu___is_TyVar>

(declare-fun StlcStrongDbParSubst.uu___is_TyVar (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: typing _ _ _ -> Prims.bool
(declare-fun Tm_arrow_0216ec74faadf9801f77dec3addef6d2 () Term)
(declare-fun StlcStrongDbParSubst.uu___is_TyVar@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_TyVar>


; <Skipped let uu___is_TyVar/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyVar__item__g>

(declare-fun Tm_refine_7f43f3559559e11687ceb54b75692147 (Term Term Term) Term)
(declare-fun StlcStrongDbParSubst.__proj__TyVar__item__g (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyVar? _} -> env
(declare-fun Tm_arrow_5d850c07ae2cdb8c7b5ac5e271ab22c7 () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyVar__item__g@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyVar__item__g>


; <Skipped let __proj__TyVar__item__g/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyVar__item__x>


(declare-fun StlcStrongDbParSubst.__proj__TyVar__item__x (Term Term Term Term) Term)

(declare-fun Tm_refine_e871fc022b60ca4260e16d8c69bfa5c2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyVar? _} -> x: var{Some? (projectee.g x)}
(declare-fun Tm_arrow_9e1d5386c187185a53d536c50b519be0 () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyVar__item__x@tok () Term)



; </end encoding val StlcStrongDbParSubst.__proj__TyVar__item__x>


; <Skipped let __proj__TyVar__item__x/>


; <Start encoding val StlcStrongDbParSubst.uu___is_TyLam>

(declare-fun StlcStrongDbParSubst.uu___is_TyLam (Term Term Term Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_TyLam@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_TyLam>


; <Skipped let uu___is_TyLam/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyLam__item__g>

(declare-fun Tm_refine_a82f220a1744b7a1be53fad33727d80f (Term Term Term) Term)
(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__g (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyLam? _} -> env
(declare-fun Tm_arrow_32ba4aa7c21fb203b432b19f49ece8eb () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__g@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyLam__item__g>


; <Skipped let __proj__TyLam__item__g/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyLam__item__t>


(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__t (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyLam? _} -> typ
(declare-fun Tm_arrow_0d19add750cc694524562fd38486fbc3 () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__t@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyLam__item__t>


; <Skipped let __proj__TyLam__item__t/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyLam__item__e1>


(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__e1 (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyLam? _} -> exp
(declare-fun Tm_arrow_c69b5eeb47023c135a9a013ed8b7f407 () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__e1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyLam__item__e1>


; <Skipped let __proj__TyLam__item__e1/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyLam__item__t'>


(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__t_ (Term Term Term Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__t_@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyLam__item__t'>


; <Skipped let __proj__TyLam__item__t'/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyLam__item__hbody>


(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__hbody (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyLam? _}   -> typing (extend projectee.t projectee.g) projectee.e1 projectee.t'
(declare-fun Tm_arrow_3d83665d6a2ce6f54c2b1096cb1600aa () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyLam__item__hbody@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyLam__item__hbody>


; <Skipped let __proj__TyLam__item__hbody/>


; <Start encoding val StlcStrongDbParSubst.uu___is_TyApp>

(declare-fun StlcStrongDbParSubst.uu___is_TyApp (Term Term Term Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_TyApp@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_TyApp>


; <Skipped let uu___is_TyApp/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyApp__item__g>

(declare-fun Tm_refine_3969fe18909d79c9db3efc963c84b6aa (Term Term Term) Term)
(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__g (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyApp? _} -> env
(declare-fun Tm_arrow_595e7a0b1d819f2c48cf14bd34ca5178 () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__g@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyApp__item__g>


; <Skipped let __proj__TyApp__item__g/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyApp__item__e1>


(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__e1 (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyApp? _} -> exp
(declare-fun Tm_arrow_41d33acf1ca3110caf0970de49b7cdcb () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__e1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyApp__item__e1>


; <Skipped let __proj__TyApp__item__e1/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyApp__item__e2>


(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__e2 (Term Term Term Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__e2@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyApp__item__e2>


; <Skipped let __proj__TyApp__item__e2/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyApp__item__t11>


(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__t11 (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyApp? _} -> typ
(declare-fun Tm_arrow_e19489502d09f5414ee86723cdcb3ce0 () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__t11@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyApp__item__t11>


; <Skipped let __proj__TyApp__item__t11/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyApp__item__t12>


(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__t12 (Term Term Term Term) Term)


(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__t12@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyApp__item__t12>


; <Skipped let __proj__TyApp__item__t12/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyApp__item__h1>


(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__h1 (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyApp? _}   -> typing projectee.g projectee.e1 (TArr projectee.t11 projectee.t12)
(declare-fun Tm_arrow_cac8b8f47703a133833b853d053dee5c () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__h1@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyApp__item__h1>


; <Skipped let __proj__TyApp__item__h1/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyApp__item__h2>


(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__h2 (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyApp? _} -> typing projectee.g projectee.e2 projectee.t11
(declare-fun Tm_arrow_532ab51a7920c72f43c8dc0ef44e30be () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyApp__item__h2@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyApp__item__h2>


; <Skipped let __proj__TyApp__item__h2/>


; <Start encoding val StlcStrongDbParSubst.uu___is_TyUnit>

(declare-fun StlcStrongDbParSubst.uu___is_TyUnit (Term Term Term Term) Term)

(declare-fun StlcStrongDbParSubst.uu___is_TyUnit@tok () Term)

; </end encoding val StlcStrongDbParSubst.uu___is_TyUnit>


; <Skipped let uu___is_TyUnit/>


; <Start encoding val StlcStrongDbParSubst.__proj__TyUnit__item__g>

(declare-fun Tm_refine_62fcb6772a40efbdd7f1359f787e4a99 (Term Term Term) Term)
(declare-fun StlcStrongDbParSubst.__proj__TyUnit__item__g (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: typing _ _ _ {TyUnit? _} -> env
(declare-fun Tm_arrow_796969f29b74719df9edc7777921e809 () Term)
(declare-fun StlcStrongDbParSubst.__proj__TyUnit__item__g@tok () Term)

; </end encoding val StlcStrongDbParSubst.__proj__TyUnit__item__g>


; <Skipped let __proj__TyUnit__item__g/>


; <Skipped val StlcStrongDbParSubst.is_value/>


; <Start encoding let is_value>

(declare-fun StlcStrongDbParSubst.is_value (Term) Term)

(declare-fun StlcStrongDbParSubst.is_value@tok () Term)

; </end encoding let is_value>


; <Skipped val StlcStrongDbParSubst.progress/>


; <Start encoding let rec progress>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcStrongDbParSubst.progress.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcStrongDbParSubst.progress.fuel_instrumented_token () Term)
(declare-fun StlcStrongDbParSubst.progress (Term Term Term) Term)
(declare-fun StlcStrongDbParSubst.progress@tok () Term)
;;;;;;;;;;;;;;;;e': exp -> Type
(declare-fun Tm_arrow_f8519817745ea024a2d4893afe01988a () Term)
(declare-fun Tm_abs_133f30b75ab27a16213187271572d5aa (Term) Term)




(declare-fun Tm_refine_19c762f0d564b7cecb91629c01f21263 (Term) Term)



;;;;;;;;;;;;;;;;h: typing empty e t -> Prims.Pure (FStar.Constructive.cexists (fun e' -> step e e'))
(declare-fun Tm_arrow_27e62942633eada45598b04bd02303a5 () Term)




; </end encoding let rec progress>


; <Skipped val StlcStrongDbParSubst.subst_extensional/>


; <Start encoding let rec subst_extensional>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcStrongDbParSubst.subst_extensional (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcStrongDbParSubst.subst_extensional@tok () Term)
;;;;;;;;;;;;;;;;_: var -> Type
(declare-fun Tm_arrow_0220d49111608e207f00570037ebc3ca () Term)
(declare-fun Tm_abs_ee2eb4f65430b296888dd31560cce8c1 () Term)
(declare-fun Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a (Term) Term)

; </end encoding let rec subst_extensional>


; <Start encoding let subst_typing>

(declare-fun StlcStrongDbParSubst.subst_typing (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: sub -> g1: env -> g2: env -> Type
(declare-fun Tm_arrow_7fd3cd4a30f5ab258fa1c03b23192905 () Term)
(declare-fun StlcStrongDbParSubst.subst_typing@tok () Term)

;;;;;;;;;;;;;;;;x: var{Some? (g1 x)} -> typing g2 (s x) (g1 x).v
(declare-fun Tm_arrow_385825fb3dea95eda89ac0da955818cf (Term Term Term) Term)

; </end encoding let subst_typing>


; <Skipped val StlcStrongDbParSubst.substitution/>


; <Start encoding let rec substitution>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcStrongDbParSubst.substitution.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcStrongDbParSubst.substitution.fuel_instrumented_token () Term)
(declare-fun StlcStrongDbParSubst.substitution (Term Term Term Term Term Term Term) Term)
(declare-fun StlcStrongDbParSubst.substitution@tok () Term)
(declare-fun Tm_refine_679dcff5b4a60ded1888fb281863c924 (Term Term) Term)


;;;;;;;;;;;;;;;;x: var{Some? (g2 x)} -> typing (extend tlam g2) (sub_inc x) (g2 x).v
(declare-fun Tm_arrow_934b349d5f00b4dc7fea4666e9f653df (Term Term) Term)
(declare-fun Tm_abs_3c21c66e9587c2078165038f7638ff93 (Term Term) Term)

;;;;;;;;;;;;;;;;y: x: var{Some? (extend tlam g1 x)} -> typing (extend tlam g2) (sub_elam s y) (extend tlam g1 y).v
(declare-fun Tm_arrow_9a5d992ad1539739f1d207998da0c9b8 (Term Term Term Term) Term)
(declare-fun Tm_abs_18e38d5214d341ed5a7425f9481fac07 (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s: sub -> h1: typing g1 e t -> hs: subst_typing s g1 g2 -> Prims.Tot (typing g2 (subst s e) t)
(declare-fun Tm_arrow_21fee3acc9231904089034dd9a8f82a2 () Term)





; </end encoding let rec substitution>


; <Skipped val StlcStrongDbParSubst.substitution_beta/>


; <Start encoding let rec substitution_beta>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcStrongDbParSubst.substitution_beta.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcStrongDbParSubst.substitution_beta.fuel_instrumented_token () Term)
(declare-fun StlcStrongDbParSubst.substitution_beta (Term Term Term Term Term Term Term) Term)
(declare-fun StlcStrongDbParSubst.substitution_beta@tok () Term)
(declare-fun Tm_refine_6c5929a1c3aca6b4f410d670a242c572 (Term Term) Term)

;;;;;;;;;;;;;;;;y: x: var{Some? (extend t_x g x)} -> typing g (sub_beta v y) (extend t_x g y).v
(declare-fun Tm_arrow_315dcfe72b4c6009e0b0543766566cfc (Term Term Term) Term)
(declare-fun Tm_abs_5fbbd8e56a1fde544449d3a2dd8465bc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;h1: typing g v t_x -> h2: typing (extend t_x g) e t -> Prims.Tot (typing g (subst (sub_beta v) e) t)
(declare-fun Tm_arrow_54b3875b58f5abf6ac5eb922067ebfc0 () Term)



; </end encoding let rec substitution_beta>


; <Skipped val StlcStrongDbParSubst.preservation/>


; <Start encoding let rec preservation>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcStrongDbParSubst.preservation.fuel_instrumented (Fuel Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcStrongDbParSubst.preservation.fuel_instrumented_token () Term)
(declare-fun StlcStrongDbParSubst.preservation (Term Term Term Term Term Term) Term)
(declare-fun StlcStrongDbParSubst.preservation@tok () Term)
;;;;;;;;;;;;;;;;ht: typing g e t -> hs: step e e' -> Prims.Tot (typing g e' t)
(declare-fun Tm_arrow_0fc8fa214ff1d135425b23f3984a3b5f () Term)

; </end encoding let rec preservation>


; End Externals for module StlcStrongDbParSubst

(push) ;; push{1

; Internals for StlcCbvDbParSubst


; encoding sigelt val StlcCbvDbParSubst.sub_inc_above


; <Skipped val StlcCbvDbParSubst.sub_inc_above/>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;Range_const typing
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (HasTypeZ (Range_const 1)
FStar.Range.range)
:named typing_range_const))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.NotAListLiteral; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.NotAListLiteral FStar.Stubs.Tactics.Common.NotAListLiteral)
(= FStar.Stubs.Tactics.Common.NotAListLiteral
FStar.Stubs.Tactics.Common.NotAListLiteral@base))
:named constructor_base_FStar.Stubs.Tactics.Common.NotAListLiteral))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Stubs.Tactics.Common.SKIP; Namespace FStar.Stubs.Tactics.Common
(assert (! (implies (is-FStar.Stubs.Tactics.Common.SKIP FStar.Stubs.Tactics.Common.SKIP)
(= FStar.Stubs.Tactics.Common.SKIP
FStar.Stubs.Tactics.Common.SKIP@base))
:named constructor_base_FStar.Stubs.Tactics.Common.SKIP))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name FStar.Tactics.V2.Derived.Goal_not_trivial; Namespace FStar.Tactics.V2.Derived
(assert (! (implies (is-FStar.Tactics.V2.Derived.Goal_not_trivial FStar.Tactics.V2.Derived.Goal_not_trivial)
(= FStar.Tactics.V2.Derived.Goal_not_trivial
FStar.Tactics.V2.Derived.Goal_not_trivial@base))
:named constructor_base_FStar.Tactics.V2.Derived.Goal_not_trivial))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.TUnit@tok
StlcStrongDbParSubst.typ)
:named typing_tok_StlcStrongDbParSubst.TUnit@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.EUnit@tok
StlcStrongDbParSubst.exp)
:named typing_tok_StlcStrongDbParSubst.EUnit@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.var; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.var
Tm_type)
:named typing_StlcStrongDbParSubst.var))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TArr; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.typ)
(HasType (StlcStrongDbParSubst.uu___is_TArr @x0)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_TArr @x0))
:qid typing_StlcStrongDbParSubst.uu___is_TArr))

:named typing_StlcStrongDbParSubst.uu___is_TArr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_EVar; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcStrongDbParSubst.uu___is_EVar @x0)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_EVar @x0))
:qid typing_StlcStrongDbParSubst.uu___is_EVar))

:named typing_StlcStrongDbParSubst.uu___is_EVar))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_ELam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcStrongDbParSubst.uu___is_ELam @x0)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_ELam @x0))
:qid typing_StlcStrongDbParSubst.uu___is_ELam))

:named typing_StlcStrongDbParSubst.uu___is_ELam))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_EApp; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcStrongDbParSubst.uu___is_EApp @x0)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_EApp @x0))
:qid typing_StlcStrongDbParSubst.uu___is_EApp))

:named typing_StlcStrongDbParSubst.uu___is_EApp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TArr @x1
@x2)
StlcStrongDbParSubst.typ)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StlcStrongDbParSubst.TArr @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StlcStrongDbParSubst.TArr @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TArr @x1
@x2)
StlcStrongDbParSubst.typ))
:qid subterm_ordering_StlcStrongDbParSubst.TArr))

:named subterm_ordering_StlcStrongDbParSubst.TArr))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.EVar @x1)
StlcStrongDbParSubst.exp)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StlcStrongDbParSubst.EVar @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.EVar @x1)
StlcStrongDbParSubst.exp))
:qid subterm_ordering_StlcStrongDbParSubst.EVar))

:named subterm_ordering_StlcStrongDbParSubst.EVar))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.ELam @x1
@x2)
StlcStrongDbParSubst.exp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StlcStrongDbParSubst.ELam @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StlcStrongDbParSubst.ELam @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.ELam @x1
@x2)
StlcStrongDbParSubst.exp))
:qid subterm_ordering_StlcStrongDbParSubst.ELam))

:named subterm_ordering_StlcStrongDbParSubst.ELam))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.EApp @x1
@x2)
StlcStrongDbParSubst.exp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StlcStrongDbParSubst.EApp @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StlcStrongDbParSubst.EApp @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.EApp @x1
@x2)
StlcStrongDbParSubst.exp))
:qid subterm_ordering_StlcStrongDbParSubst.EApp))

:named subterm_ordering_StlcStrongDbParSubst.EApp))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__EVar__item___0; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_refine_f4accbbd705c655c07c4d28fa0433bd8
Tm_type)
:named refinement_kinding_Tm_refine_f4accbbd705c655c07c4d28fa0433bd8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__EApp__item___0; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0
Tm_type)
:named refinement_kinding_Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__TArr__item___0; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5
Tm_type)
:named refinement_kinding_Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__ELam__item___0; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416
Tm_type)
:named refinement_kinding_Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (HasType Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
Tm_type)
:named refinement_kinding_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Tactics.V2.Derived.run_tactic; Namespace FStar.Tactics.V2.Derived
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! (HasType Tm_refine_41bb1fe33d2856748d537571528d32a1
Tm_type)
:named refinement_kinding_Tm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__EVar__item___0; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f4accbbd705c655c07c4d28fa0433bd8)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f4accbbd705c655c07c4d28fa0433bd8))
:qid refinement_interpretation_Tm_refine_f4accbbd705c655c07c4d28fa0433bd8))

:named refinement_interpretation_Tm_refine_f4accbbd705c655c07c4d28fa0433bd8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__EApp__item___0; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EApp @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0))
:qid refinement_interpretation_Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0))

:named refinement_interpretation_Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__TArr__item___0; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.typ)

;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TArr @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5))
:qid refinement_interpretation_Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5))

:named refinement_interpretation_Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__ELam__item___0; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_ELam @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416))
:qid refinement_interpretation_Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416))

:named refinement_interpretation_Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! 
;; def=FStar.Stubs.Tactics.Types.fsti(44,31-44,48); use=FStar.Stubs.Tactics.Types.fsti(44,31-44,48)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f)
(and (HasTypeFuel @u0
@x1
Prims.bool)

;; def=FStar.Stubs.Tactics.Types.fsti(44,38-44,47); use=FStar.Stubs.Tactics.Types.fsti(44,38-44,47)
(= @x1
(BoxBool true))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
:qid refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))

:named refinement_interpretation_Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Tactics.V2.Derived.run_tactic; Namespace FStar.Tactics.V2.Derived
(assert (! 
;; def=FStar.Tactics.V2.Derived.fst(145,9-145,13); use=FStar.Tactics.V2.Derived.fst(145,9-145,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! 
;; def=FStar.Char.fsti(57,16-57,70); use=FStar.Char.fsti(57,16-57,70)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_41bb1fe33d2856748d537571528d32a1)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Char.fsti(57,24-57,68); use=FStar.Char.fsti(57,24-57,68)
(or 
;; def=FStar.Char.fsti(57,24-57,34); use=FStar.Char.fsti(57,24-57,34)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 55295)))


;; def=FStar.Char.fsti(57,38-57,68); use=FStar.Char.fsti(57,38-57,68)
(and 
;; def=FStar.Char.fsti(57,39-57,50); use=FStar.Char.fsti(57,39-57,50)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 57344)))


;; def=FStar.Char.fsti(57,54-57,67); use=FStar.Char.fsti(57,54-57,67)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 1114111)))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_41bb1fe33d2856748d537571528d32a1))
:qid refinement_interpretation_Tm_refine_41bb1fe33d2856748d537571528d32a1))

:named refinement_interpretation_Tm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.TArr__1 (StlcStrongDbParSubst.TArr @x0
@x1))
@x1)
 

:pattern ((StlcStrongDbParSubst.TArr @x0
@x1))
:qid projection_inverse_StlcStrongDbParSubst.TArr__1))

:named projection_inverse_StlcStrongDbParSubst.TArr__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.TArr__0 (StlcStrongDbParSubst.TArr @x0
@x1))
@x0)
 

:pattern ((StlcStrongDbParSubst.TArr @x0
@x1))
:qid projection_inverse_StlcStrongDbParSubst.TArr__0))

:named projection_inverse_StlcStrongDbParSubst.TArr__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.EVar__0 (StlcStrongDbParSubst.EVar @x0))
@x0)
 

:pattern ((StlcStrongDbParSubst.EVar @x0))
:qid projection_inverse_StlcStrongDbParSubst.EVar__0))

:named projection_inverse_StlcStrongDbParSubst.EVar__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.ELam__1 (StlcStrongDbParSubst.ELam @x0
@x1))
@x1)
 

:pattern ((StlcStrongDbParSubst.ELam @x0
@x1))
:qid projection_inverse_StlcStrongDbParSubst.ELam__1))

:named projection_inverse_StlcStrongDbParSubst.ELam__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.ELam__0 (StlcStrongDbParSubst.ELam @x0
@x1))
@x0)
 

:pattern ((StlcStrongDbParSubst.ELam @x0
@x1))
:qid projection_inverse_StlcStrongDbParSubst.ELam__0))

:named projection_inverse_StlcStrongDbParSubst.ELam__0))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.EApp__1 (StlcStrongDbParSubst.EApp @x0
@x1))
@x1)
 

:pattern ((StlcStrongDbParSubst.EApp @x0
@x1))
:qid projection_inverse_StlcStrongDbParSubst.EApp__1))

:named projection_inverse_StlcStrongDbParSubst.EApp__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.EApp__0 (StlcStrongDbParSubst.EApp @x0
@x1))
@x0)
 

:pattern ((StlcStrongDbParSubst.EApp @x0
@x1))
:qid projection_inverse_StlcStrongDbParSubst.EApp__0))

:named projection_inverse_StlcStrongDbParSubst.EApp__0))
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.typ
Tm_type)
:named kinding_StlcStrongDbParSubst.typ@tok))
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.exp
Tm_type)
:named kinding_StlcStrongDbParSubst.exp@tok))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f4accbbd705c655c07c4d28fa0433bd8
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__EVar__item___0; Namespace StlcStrongDbParSubst
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f4accbbd705c655c07c4d28fa0433bd8))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_f4accbbd705c655c07c4d28fa0433bd8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__EApp__item___0; Namespace StlcStrongDbParSubst
(assert (! (iff (Valid (Prims.hasEq Tm_refine_cfeb4851717f0f570c09b19bff9e1ba0))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_cfeb4851717f0f570c09b19bff9e1ba0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__TArr__item___0; Namespace StlcStrongDbParSubst
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ccaa7b9f2c4e22321120f7ea92a71de5))
(Valid (Prims.hasEq StlcStrongDbParSubst.typ)))
:named haseqTm_refine_ccaa7b9f2c4e22321120f7ea92a71de5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416
;;; Fact-ids: Name StlcStrongDbParSubst.__proj__ELam__item___0; Namespace StlcStrongDbParSubst
(assert (! (iff (Valid (Prims.hasEq Tm_refine_c2b6bc5fb9f0c781cc9a468d147cb416))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_c2b6bc5fb9f0c781cc9a468d147cb416))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f
;;; Fact-ids: Name FStar.Stubs.Tactics.Types.tracepoint; Namespace FStar.Stubs.Tactics.Types
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
(Valid (Prims.hasEq Prims.bool)))
:named haseqTm_refine_b8e45d9d9da45ba5c9bad7262617aa9f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: Name FStar.Tactics.V2.Derived.run_tactic; Namespace FStar.Tactics.V2.Derived
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_41bb1fe33d2856748d537571528d32a1
;;; Fact-ids: Name FStar.Char.char_of_int; Namespace FStar.Char
(assert (! (iff (Valid (Prims.hasEq Tm_refine_41bb1fe33d2856748d537571528d32a1))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_41bb1fe33d2856748d537571528d32a1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcStrongDbParSubst.var; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.var
Tm_type)
:named function_token_typing_StlcStrongDbParSubst.var))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(30,5-30,8); use=StlcStrongDbParSubst.fst(30,5-30,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StlcStrongDbParSubst.typ)
(or (is-StlcStrongDbParSubst.TArr @x1)
(is-StlcStrongDbParSubst.TUnit @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StlcStrongDbParSubst.typ))
:qid fuel_guarded_inversion_StlcStrongDbParSubst.typ))

:named fuel_guarded_inversion_StlcStrongDbParSubst.typ))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(36,5-36,8); use=StlcStrongDbParSubst.fst(36,5-36,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
StlcStrongDbParSubst.exp)
(or (is-StlcStrongDbParSubst.EVar @x1)
(is-StlcStrongDbParSubst.EApp @x1)
(is-StlcStrongDbParSubst.ELam @x1)
(is-StlcStrongDbParSubst.EUnit @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
StlcStrongDbParSubst.exp))
:qid fuel_guarded_inversion_StlcStrongDbParSubst.exp))

:named fuel_guarded_inversion_StlcStrongDbParSubst.exp))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.var
;;; Fact-ids: Name StlcStrongDbParSubst.var; Namespace StlcStrongDbParSubst
(assert (! (= StlcStrongDbParSubst.var
Prims.nat)
:named equation_StlcStrongDbParSubst.var))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! (= StlcStrongDbParSubst.TUnit@tok
StlcStrongDbParSubst.TUnit)
:named equality_tok_StlcStrongDbParSubst.TUnit@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! (= StlcStrongDbParSubst.EUnit@tok
StlcStrongDbParSubst.EUnit)
:named equality_tok_StlcStrongDbParSubst.EUnit@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TArr; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.uu___is_TArr @x0)
(BoxBool (is-StlcStrongDbParSubst.TArr @x0)))
 

:pattern ((StlcStrongDbParSubst.uu___is_TArr @x0))
:qid disc_equation_StlcStrongDbParSubst.TArr))

:named disc_equation_StlcStrongDbParSubst.TArr))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_EVar; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.uu___is_EVar @x0)
(BoxBool (is-StlcStrongDbParSubst.EVar @x0)))
 

:pattern ((StlcStrongDbParSubst.uu___is_EVar @x0))
:qid disc_equation_StlcStrongDbParSubst.EVar))

:named disc_equation_StlcStrongDbParSubst.EVar))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_ELam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.uu___is_ELam @x0)
(BoxBool (is-StlcStrongDbParSubst.ELam @x0)))
 

:pattern ((StlcStrongDbParSubst.uu___is_ELam @x0))
:qid disc_equation_StlcStrongDbParSubst.ELam))

:named disc_equation_StlcStrongDbParSubst.ELam))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_EApp; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.uu___is_EApp @x0)
(BoxBool (is-StlcStrongDbParSubst.EApp @x0)))
 

:pattern ((StlcStrongDbParSubst.uu___is_EApp @x0))
:qid disc_equation_StlcStrongDbParSubst.EApp))

:named disc_equation_StlcStrongDbParSubst.EApp))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(32,4-32,9); use=StlcStrongDbParSubst.fst(32,4-32,9)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StlcStrongDbParSubst.TUnit
StlcStrongDbParSubst.typ)
 

:pattern ((HasTypeFuel @u0
StlcStrongDbParSubst.TUnit
StlcStrongDbParSubst.typ))
:qid data_typing_intro_StlcStrongDbParSubst.TUnit@tok))

:named data_typing_intro_StlcStrongDbParSubst.TUnit@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.typ))
(HasTypeFuel @u0
(StlcStrongDbParSubst.TArr @x1
@x2)
StlcStrongDbParSubst.typ))
 

:pattern ((HasTypeFuel @u0
(StlcStrongDbParSubst.TArr @x1
@x2)
StlcStrongDbParSubst.typ))
:qid data_typing_intro_StlcStrongDbParSubst.TArr@tok))

:named data_typing_intro_StlcStrongDbParSubst.TArr@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)
(HasTypeFuel @u0
(StlcStrongDbParSubst.EVar @x1)
StlcStrongDbParSubst.exp))
 

:pattern ((HasTypeFuel @u0
(StlcStrongDbParSubst.EVar @x1)
StlcStrongDbParSubst.exp))
:qid data_typing_intro_StlcStrongDbParSubst.EVar@tok))

:named data_typing_intro_StlcStrongDbParSubst.EVar@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(40,4-40,9); use=StlcStrongDbParSubst.fst(40,4-40,9)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
StlcStrongDbParSubst.EUnit
StlcStrongDbParSubst.exp)
 

:pattern ((HasTypeFuel @u0
StlcStrongDbParSubst.EUnit
StlcStrongDbParSubst.exp))
:qid data_typing_intro_StlcStrongDbParSubst.EUnit@tok))

:named data_typing_intro_StlcStrongDbParSubst.EUnit@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.exp))
(HasTypeFuel @u0
(StlcStrongDbParSubst.ELam @x1
@x2)
StlcStrongDbParSubst.exp))
 

:pattern ((HasTypeFuel @u0
(StlcStrongDbParSubst.ELam @x1
@x2)
StlcStrongDbParSubst.exp))
:qid data_typing_intro_StlcStrongDbParSubst.ELam@tok))

:named data_typing_intro_StlcStrongDbParSubst.ELam@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.exp))
(HasTypeFuel @u0
(StlcStrongDbParSubst.EApp @x1
@x2)
StlcStrongDbParSubst.exp))
 

:pattern ((HasTypeFuel @u0
(StlcStrongDbParSubst.EApp @x1
@x2)
StlcStrongDbParSubst.exp))
:qid data_typing_intro_StlcStrongDbParSubst.EApp@tok))

:named data_typing_intro_StlcStrongDbParSubst.EApp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TArr @x1
@x2)
StlcStrongDbParSubst.typ)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.typ)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TArr @x1
@x2)
StlcStrongDbParSubst.typ))
:qid data_elim_StlcStrongDbParSubst.TArr))

:named data_elim_StlcStrongDbParSubst.TArr))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.EVar @x1)
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.EVar @x1)
StlcStrongDbParSubst.exp))
:qid data_elim_StlcStrongDbParSubst.EVar))

:named data_elim_StlcStrongDbParSubst.EVar))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.ELam @x1
@x2)
StlcStrongDbParSubst.exp)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.exp)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.ELam @x1
@x2)
StlcStrongDbParSubst.exp))
:qid data_elim_StlcStrongDbParSubst.ELam))

:named data_elim_StlcStrongDbParSubst.ELam))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.EApp @x1
@x2)
StlcStrongDbParSubst.exp)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.exp)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.EApp @x1
@x2)
StlcStrongDbParSubst.exp))
:qid data_elim_StlcStrongDbParSubst.EApp))

:named data_elim_StlcStrongDbParSubst.EApp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! (= 101
(Term_constr_id StlcStrongDbParSubst.typ))
:named constructor_distinct_StlcStrongDbParSubst.typ))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! (= 125
(Term_constr_id StlcStrongDbParSubst.exp))
:named constructor_distinct_StlcStrongDbParSubst.exp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! (= 112
(Term_constr_id StlcStrongDbParSubst.TUnit))
:named constructor_distinct_StlcStrongDbParSubst.TUnit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(31,4-31,8); use=StlcStrongDbParSubst.fst(31,4-31,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 107
(Term_constr_id (StlcStrongDbParSubst.TArr @x0
@x1)))
 

:pattern ((StlcStrongDbParSubst.TArr @x0
@x1))
:qid constructor_distinct_StlcStrongDbParSubst.TArr))

:named constructor_distinct_StlcStrongDbParSubst.TArr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,4-37,8); use=StlcStrongDbParSubst.fst(37,4-37,8)
(forall ((@x0 Term))
 (! (= 131
(Term_constr_id (StlcStrongDbParSubst.EVar @x0)))
 

:pattern ((StlcStrongDbParSubst.EVar @x0))
:qid constructor_distinct_StlcStrongDbParSubst.EVar))

:named constructor_distinct_StlcStrongDbParSubst.EVar))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! (= 146
(Term_constr_id StlcStrongDbParSubst.EUnit))
:named constructor_distinct_StlcStrongDbParSubst.EUnit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(39,4-39,8); use=StlcStrongDbParSubst.fst(39,4-39,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 141
(Term_constr_id (StlcStrongDbParSubst.ELam @x0
@x1)))
 

:pattern ((StlcStrongDbParSubst.ELam @x0
@x1))
:qid constructor_distinct_StlcStrongDbParSubst.ELam))

:named constructor_distinct_StlcStrongDbParSubst.ELam))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(38,4-38,8); use=StlcStrongDbParSubst.fst(38,4-38,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 136
(Term_constr_id (StlcStrongDbParSubst.EApp @x0
@x1)))
 

:pattern ((StlcStrongDbParSubst.EApp @x0
@x1))
:qid constructor_distinct_StlcStrongDbParSubst.EApp))

:named constructor_distinct_StlcStrongDbParSubst.EApp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;Assumption: StlcStrongDbParSubst.typ__uu___haseq
;;; Fact-ids: Name StlcStrongDbParSubst.typ__uu___haseq; Namespace StlcStrongDbParSubst
(assert (! (Valid (Prims.hasEq StlcStrongDbParSubst.typ))
:named assumption_StlcStrongDbParSubst.typ__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: StlcStrongDbParSubst.exp__uu___haseq
;;; Fact-ids: Name StlcStrongDbParSubst.exp__uu___haseq; Namespace StlcStrongDbParSubst
(assert (! (Valid (Prims.hasEq StlcStrongDbParSubst.exp))
:named assumption_StlcStrongDbParSubst.exp__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StlcStrongDbParSubst.typ; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TArr; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(30,5-30,8); use=StlcStrongDbParSubst.fst(30,5-30,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StlcStrongDbParSubst.typ)
(= StlcStrongDbParSubst.typ
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StlcStrongDbParSubst.typ))
:qid StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8))

:named StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(36,5-36,8); use=StlcStrongDbParSubst.fst(36,5-36,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
StlcStrongDbParSubst.exp)
(= StlcStrongDbParSubst.exp
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
StlcStrongDbParSubst.exp))
:qid StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3))

:named StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(31,24-31,58)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (n: Prims.nat) (y: StlcStrongDbParSubst.var).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post StlcStrongDbParSubst.exp).
;     (forall (x: StlcStrongDbParSubst.exp). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)
;     ) ==>
;     ~(y < n = true) ==> (forall (b: Prims.bool). y < n == b ==> y + 1 >= 0)


; Context: While encoding a query
; While typechecking the top-level declaration `let sub_inc_above`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
StlcStrongDbParSubst.var))
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post StlcStrongDbParSubst.exp))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(31,24-31,58)
(forall ((@x3 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(31,24-31,58)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(31,24-31,58)
(ApplyTT @x2
@x3)
)

 

:pattern ((ApplyTT @x2
@x3))
:qid @query.2))


;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(31,24-31,58)
(not 
;; def=StlcCbvDbParSubst.fst(31,27-31,30); use=StlcCbvDbParSubst.fst(31,27-31,30)
(= (Prims.op_LessThan @x1
@x0)
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(31,24-31,58)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.bool)

;; def=StlcCbvDbParSubst.fst(31,27-31,58); use=StlcCbvDbParSubst.fst(31,27-31,58)
(= (Prims.op_LessThan @x1
@x0)
@x3)
)

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(31,53-31,58)
(or label_1

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(31,53-31,58)
(>= (BoxInt_proj_0 (Prims.op_Addition @x1
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.sub_inc_above, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, equation_StlcStrongDbParSubst.var, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let sub_inc_above


; <Start encoding let sub_inc_above>

(declare-fun StlcCbvDbParSubst.sub_inc_above (Term Term) Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> y: StlcStrongDbParSubst.var -> StlcStrongDbParSubst.exp
(declare-fun Tm_arrow_b4c180742dce2bdffcb352ac460d5edc () Term)
(declare-fun StlcCbvDbParSubst.sub_inc_above@tok () Term)

; </end encoding let sub_inc_above>


; encoding sigelt val StlcCbvDbParSubst.shift_up_above


; <Skipped val StlcCbvDbParSubst.shift_up_above/>


; encoding sigelt let shift_up_above


; <Start encoding let shift_up_above>

(declare-fun StlcCbvDbParSubst.shift_up_above (Term Term) Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> e: StlcStrongDbParSubst.exp -> StlcStrongDbParSubst.exp
(declare-fun Tm_arrow_92dc9c3319485d765cd105a5ff2107ab () Term)
(declare-fun StlcCbvDbParSubst.shift_up_above@tok () Term)

; </end encoding let shift_up_above>


; encoding sigelt val StlcCbvDbParSubst.extend_gen


; <Skipped val StlcCbvDbParSubst.extend_gen/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.env; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.env
Tm_type)
:named typing_StlcStrongDbParSubst.env))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=Prims.fst(546,4-546,18); use=Prims.fst(546,4-546,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39
;;; Fact-ids: Name StlcStrongDbParSubst.env; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39
Tm_type)
:named kinding_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcStrongDbParSubst.env; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.env
Tm_type)
:named function_token_typing_StlcStrongDbParSubst.env))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.env
;;; Fact-ids: Name StlcStrongDbParSubst.env; Namespace StlcStrongDbParSubst
(assert (! (= StlcStrongDbParSubst.env
Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39)
:named equation_StlcStrongDbParSubst.env))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StlcStrongDbParSubst.env; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(110,11-110,34); use=StlcStrongDbParSubst.fst(110,11-110,34)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39))
:qid StlcStrongDbParSubst_pre_typing_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39))

:named StlcStrongDbParSubst_pre_typing_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39
;;; Fact-ids: Name StlcStrongDbParSubst.env; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(110,11-110,34); use=StlcStrongDbParSubst.fst(110,11-110,34)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39)
(and 
;; def=StlcStrongDbParSubst.fst(110,11-110,34); use=StlcStrongDbParSubst.fst(110,11-110,34)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(HasType (ApplyTT @x0
@x1)
(FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39))

:named StlcStrongDbParSubst_interpretation_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(37,23-40,48)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (x: StlcStrongDbParSubst.var) (t: StlcStrongDbParSubst.typ) (g: StlcStrongDbParSubst.env).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post StlcStrongDbParSubst.env).
;     (forall (x: StlcStrongDbParSubst.env). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)
;     ) ==>
;     ~(x = 0 = true) ==>
;     (forall (b: Prims.bool).
;         x = 0 == b ==>
;         (forall (y: StlcStrongDbParSubst.var).
;             (*  - Could not prove post-condition
; *)
;             forall (k: Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)).
;               (forall (x: FStar.Pervasives.Native.option StlcStrongDbParSubst.typ).
;                   {:pattern Prims.guard_free (k x)}
;                   Prims.auto_squash (k x)) ==>
;               ~(y < x = true) ==>
;               (forall (b: Prims.bool).
;                   y < x == b ==>
;                   Prims.hasEq StlcStrongDbParSubst.var /\
;                   (forall (any_result: Type0).
;                       StlcStrongDbParSubst.var == any_result ==>
;                       (forall (any_result: Prims.bool).
;                           y = x == any_result ==>
;                           (forall (k:
;                               Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ
;                                   )).
;                               (forall (x: FStar.Pervasives.Native.option StlcStrongDbParSubst.typ).
;                                   {:pattern Prims.guard_free (k x)}
;                                   Prims.auto_squash (k x)) ==>
;                               ~(y = x = true) ==>
;                               (forall (b: Prims.bool). y = x == b ==> y - 1 >= 0)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let extend_gen`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
StlcStrongDbParSubst.env))
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post StlcStrongDbParSubst.env))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(37,23-40,48)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(37,23-40,48)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(37,23-40,48)
(ApplyTT @x3
@x4)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid @query.2))


;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(37,23-40,48)
(not 
;; def=StlcCbvDbParSubst.fst(37,26-37,31); use=StlcCbvDbParSubst.fst(37,26-37,31)
(= (Prims.op_Equality Prims.int
@x0
(BoxInt 0))
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(37,23-40,48)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=StlcCbvDbParSubst.fst(37,26-40,48); use=StlcCbvDbParSubst.fst(37,26-40,48)
(= (Prims.op_Equality Prims.int
@x0
(BoxInt 0))
@x4)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(37,23-40,48)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.var)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(37,23-40,48)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(38,38-40,47)
(forall ((@x7 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(38,38-40,47)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(38,38-40,47)
(ApplyTT @x6
@x7)
)

 

:pattern ((ApplyTT @x6
@x7))
:qid @query.6))


;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(38,38-40,47)
(not 
;; def=StlcCbvDbParSubst.fst(38,41-38,46); use=StlcCbvDbParSubst.fst(38,41-38,46)
(= (Prims.op_LessThan @x5
@x0)
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(38,38-40,47)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.bool)

;; def=StlcCbvDbParSubst.fst(38,41-40,47); use=StlcCbvDbParSubst.fst(38,41-40,47)
(= (Prims.op_LessThan @x5
@x0)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(38,38-40,47)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(39,47-39,48)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(39,47-39,48)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(39,47-39,48)
(Prims.hasEq StlcStrongDbParSubst.var)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(38,38-40,47)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(38,38-40,47)
(= StlcStrongDbParSubst.var
@x8)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(38,38-40,47)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.bool)

;; def=StlcCbvDbParSubst.fst(39,43-39,48); use=StlcCbvDbParSubst.fst(39,43-39,48)
(= (Prims.op_Equality StlcStrongDbParSubst.var
@x5
@x0)
@x9)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(37,23-40,48)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(38,38-40,47)
(forall ((@x11 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(38,38-40,47)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(38,38-40,47)
(ApplyTT @x10
@x11)
)

 

:pattern ((ApplyTT @x10
@x11))
:qid @query.11))


;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(38,38-40,47)
(not 
;; def=StlcCbvDbParSubst.fst(39,43-39,48); use=StlcCbvDbParSubst.fst(39,43-39,48)
(= (Prims.op_Equality StlcStrongDbParSubst.var
@x5
@x0)
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(38,38-40,47)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.bool)

;; def=StlcCbvDbParSubst.fst(39,43-40,47); use=StlcCbvDbParSubst.fst(39,43-40,47)
(= (Prims.op_Equality StlcStrongDbParSubst.var
@x5
@x0)
@x11)
)

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(40,42-40,47)
(or label_2

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(40,42-40,47)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x5
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_gen, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, equation_StlcStrongDbParSubst.var, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let extend_gen


; <Start encoding let extend_gen>

(declare-fun StlcCbvDbParSubst.extend_gen (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var -> t: StlcStrongDbParSubst.typ -> g: StlcStrongDbParSubst.env   -> StlcStrongDbParSubst.env
(declare-fun Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0 () Term)
(declare-fun StlcCbvDbParSubst.extend_gen@tok () Term)

(declare-fun Tm_abs_8e8cef3f3b2af03d991302fd11832ac3 (Term Term Term) Term)

; </end encoding let extend_gen>


; encoding sigelt val StlcCbvDbParSubst.weakening


; <Start encoding val StlcCbvDbParSubst.weakening>

(declare-fun StlcCbvDbParSubst.weakening (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> t': StlcStrongDbParSubst.typ -> h: StlcStrongDbParSubst.typing g e t   -> Prims.Tot (StlcStrongDbParSubst.typing (extend_gen n t' g) (shift_up_above n e) t)
(declare-fun Tm_arrow_ca5acb766360f51bc9fc6c8fec9d50fa () Term)
(declare-fun StlcCbvDbParSubst.weakening@tok () Term)

; </end encoding val StlcCbvDbParSubst.weakening>

;;;;;;;;;;;;;;;;typing_Tm_abs_ee2eb4f65430b296888dd31560cce8c1
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_abs_ee2eb4f65430b296888dd31560cce8c1
Tm_arrow_0220d49111608e207f00570037ebc3ca)
:named typing_Tm_abs_ee2eb4f65430b296888dd31560cce8c1))
;;;;;;;;;;;;;;;;typing_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(38,38-40,47); use=StlcCbvDbParSubst.fst(38,38-40,47)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_8e8cef3f3b2af03d991302fd11832ac3 @x0
@x1
@x2)
Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39)
 

:pattern ((Tm_abs_8e8cef3f3b2af03d991302fd11832ac3 @x0
@x1
@x2))
:qid typing_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3))

:named typing_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3))
;;;;;;;;;;;;;;;;typing_Tm_abs_196d31beccd849fc7b632281c08d07b0
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(117,19-118,31); use=StlcStrongDbParSubst.fst(117,19-118,31)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_196d31beccd849fc7b632281c08d07b0 @x0
@x1)
Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39)
 

:pattern ((Tm_abs_196d31beccd849fc7b632281c08d07b0 @x0
@x1))
:qid typing_Tm_abs_196d31beccd849fc7b632281c08d07b0))

:named typing_Tm_abs_196d31beccd849fc7b632281c08d07b0))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(75,8-75,13); use=StlcStrongDbParSubst.fst(75,8-75,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.sub)
(HasType @x1
StlcStrongDbParSubst.exp))
(HasType (StlcStrongDbParSubst.subst @x0
@x1)
(Tm_refine_355331772027a5870c780cc6a71c0497 @x0
@x1)))
 

:pattern ((StlcStrongDbParSubst.subst @x0
@x1))
:qid typing_StlcStrongDbParSubst.subst))

:named typing_StlcStrongDbParSubst.subst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.sub_inc; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(63,4-63,11); use=StlcStrongDbParSubst.fst(63,4-63,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.var)
(HasType (StlcStrongDbParSubst.sub_inc @x0)
StlcStrongDbParSubst.exp))
 

:pattern ((StlcStrongDbParSubst.sub_inc @x0))
:qid typing_StlcStrongDbParSubst.sub_inc))

:named typing_StlcStrongDbParSubst.sub_inc))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.sub; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.sub
Tm_type)
:named typing_StlcStrongDbParSubst.sub))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.renaming; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(55,5-55,13); use=StlcStrongDbParSubst.fst(55,5-55,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.sub)
(HasType (StlcStrongDbParSubst.renaming @x0)
Prims.logical))
 

:pattern ((StlcStrongDbParSubst.renaming @x0))
:qid typing_StlcStrongDbParSubst.renaming))

:named typing_StlcStrongDbParSubst.renaming))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(117,4-117,10); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.typ)
(HasType @x1
StlcStrongDbParSubst.env))
(HasType (StlcStrongDbParSubst.extend @x0
@x1)
StlcStrongDbParSubst.env))
 

:pattern ((StlcStrongDbParSubst.extend @x0
@x1))
:qid typing_StlcStrongDbParSubst.extend))

:named typing_StlcStrongDbParSubst.extend))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.sub_inc_above; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(31,4-31,17); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
StlcStrongDbParSubst.var))
(HasType (StlcCbvDbParSubst.sub_inc_above @x0
@x1)
StlcStrongDbParSubst.exp))
 

:pattern ((StlcCbvDbParSubst.sub_inc_above @x0
@x1))
:qid typing_StlcCbvDbParSubst.sub_inc_above))

:named typing_StlcCbvDbParSubst.sub_inc_above))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.shift_up_above; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(34,4-34,18); use=StlcCbvDbParSubst.fst(34,4-34,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
StlcStrongDbParSubst.exp))
(HasType (StlcCbvDbParSubst.shift_up_above @x0
@x1)
StlcStrongDbParSubst.exp))
 

:pattern ((StlcCbvDbParSubst.shift_up_above @x0
@x1))
:qid typing_StlcCbvDbParSubst.shift_up_above))

:named typing_StlcCbvDbParSubst.shift_up_above))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(37,4-37,14); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
StlcStrongDbParSubst.env))
(HasType (StlcCbvDbParSubst.extend_gen @x0
@x1
@x2)
StlcStrongDbParSubst.env))
 

:pattern ((StlcCbvDbParSubst.extend_gen @x0
@x1
@x2))
:qid typing_StlcCbvDbParSubst.extend_gen))

:named typing_StlcCbvDbParSubst.extend_gen))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(HasType (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid typing_FStar.Pervasives.Native.__proj__Some__item__v))

:named typing_FStar.Pervasives.Native.__proj__Some__item__v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.on_domain; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(74,4-74,13); use=FStar.FunctionalExtensionality.fsti(74,4-74,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(HasType (FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
:qid typing_FStar.FunctionalExtensionality.on_domain))

:named typing_FStar.FunctionalExtensionality.on_domain))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(HasType (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid typing_FStar.FunctionalExtensionality.feq))

:named typing_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(120,10-120,16); use=StlcStrongDbParSubst.fst(120,10-120,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StlcStrongDbParSubst.typing@tok
@x0)
@x1)
@x2)
(StlcStrongDbParSubst.typing @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT StlcStrongDbParSubst.typing@tok
@x0)
@x1)
@x2))

:pattern ((StlcStrongDbParSubst.typing @x0
@x1
@x2))
:qid token_correspondence_StlcStrongDbParSubst.typing@tok))

:named token_correspondence_StlcStrongDbParSubst.typing@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(75,8-75,13); use=StlcStrongDbParSubst.fst(75,8-75,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.sub)
(HasType @x2
StlcStrongDbParSubst.exp))
(HasType (StlcStrongDbParSubst.subst.fuel_instrumented @u0
@x1
@x2)
(Tm_refine_355331772027a5870c780cc6a71c0497 @x1
@x2)))
 

:pattern ((StlcStrongDbParSubst.subst.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented))

:named token_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StlcStrongDbParSubst.sub_inc; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(63,4-63,11); use=StlcStrongDbParSubst.fst(63,4-63,11)
(forall ((@x0 Term))
 (! (= (ApplyTT StlcStrongDbParSubst.sub_inc@tok
@x0)
(StlcStrongDbParSubst.sub_inc @x0))
 

:pattern ((ApplyTT StlcStrongDbParSubst.sub_inc@tok
@x0))
:qid token_correspondence_StlcStrongDbParSubst.sub_inc))

:named token_correspondence_StlcStrongDbParSubst.sub_inc))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.sub)
(HasType @x2
StlcStrongDbParSubst.var))
(HasType (StlcStrongDbParSubst.sub_elam.fuel_instrumented @u0
@x1
@x2)
(Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x1)))
 

:pattern ((StlcStrongDbParSubst.sub_elam.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented))

:named token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(117,4-117,10); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StlcStrongDbParSubst.extend@tok
@x0)
@x1)
(StlcStrongDbParSubst.extend @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StlcStrongDbParSubst.extend@tok
@x0)
@x1))
:qid token_correspondence_StlcStrongDbParSubst.extend))

:named token_correspondence_StlcStrongDbParSubst.extend))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StlcCbvDbParSubst.sub_inc_above; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(31,4-31,17); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_inc_above@tok
@x0)
@x1)
(StlcCbvDbParSubst.sub_inc_above @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StlcCbvDbParSubst.sub_inc_above@tok
@x0)
@x1))
:qid token_correspondence_StlcCbvDbParSubst.sub_inc_above))

:named token_correspondence_StlcCbvDbParSubst.sub_inc_above))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(37,4-37,14); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
@x0)
@x1)
@x2)
(StlcCbvDbParSubst.extend_gen @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
@x0)
@x1)
@x2))
:qid token_correspondence_StlcCbvDbParSubst.extend_gen))

:named token_correspondence_StlcCbvDbParSubst.extend_gen))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(121,4-121,9); use=StlcStrongDbParSubst.fst(121,4-121,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyVar @x1
@x2)
(StlcStrongDbParSubst.typing @x3
@x4
@x5))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StlcStrongDbParSubst.TyVar @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StlcStrongDbParSubst.TyVar @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyVar @x1
@x2)
(StlcStrongDbParSubst.typing @x3
@x4
@x5)))
:qid subterm_ordering_StlcStrongDbParSubst.TyVar))

:named subterm_ordering_StlcStrongDbParSubst.TyVar))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(138,4-138,10); use=StlcStrongDbParSubst.fst(138,4-138,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyUnit @x1)
(StlcStrongDbParSubst.typing @x2
@x3
@x4))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StlcStrongDbParSubst.TyUnit @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyUnit @x1)
(StlcStrongDbParSubst.typing @x2
@x3
@x4)))
:qid subterm_ordering_StlcStrongDbParSubst.TyUnit))

:named subterm_ordering_StlcStrongDbParSubst.TyUnit))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing @x6
@x7
@x8))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing @x6
@x7
@x8)))
:qid subterm_ordering_StlcStrongDbParSubst.TyLam))

:named subterm_ordering_StlcStrongDbParSubst.TyLam))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcStrongDbParSubst.typing @x8
@x9
@x10))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x6
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x7
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcStrongDbParSubst.typing @x8
@x9
@x10)))
:qid subterm_ordering_StlcStrongDbParSubst.TyApp))

:named subterm_ordering_StlcStrongDbParSubst.TyApp))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(161,33-161,50); use=StlcStrongDbParSubst.fst(165,8-165,25)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a))

:named refinement_kinding_Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(122,13-122,31); use=StlcStrongDbParSubst.fst(122,13-122,31)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8))

:named refinement_kinding_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(70,34-70,65); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e))

:named refinement_kinding_Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(72,35-72,38); use=StlcStrongDbParSubst.fst(75,8-75,13)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_355331772027a5870c780cc6a71c0497 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_355331772027a5870c780cc6a71c0497 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_355331772027a5870c780cc6a71c0497))

:named refinement_kinding_Tm_refine_355331772027a5870c780cc6a71c0497))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(161,33-161,50); use=StlcStrongDbParSubst.fst(165,8-165,25)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.sub)

;; def=StlcStrongDbParSubst.fst(161,40-161,49); use=StlcStrongDbParSubst.fst(165,8-165,25)
(Valid 
;; def=StlcStrongDbParSubst.fst(161,40-161,49); use=StlcStrongDbParSubst.fst(165,8-165,25)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_ee2eb4f65430b296888dd31560cce8c1
@x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a @x2)))
:qid refinement_interpretation_Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a))

:named refinement_interpretation_Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(122,13-122,31); use=StlcStrongDbParSubst.fst(122,13-122,31)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcStrongDbParSubst.fst(122,19-122,30)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT @x2
@x1)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x2)))
:qid refinement_interpretation_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8))

:named refinement_interpretation_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option @x2))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2)))
:qid refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(70,34-70,65); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(70,41-70,63); use=StlcStrongDbParSubst.fst(82,4-82,12)
(implies 
;; def=StlcStrongDbParSubst.fst(70,41-70,51); use=StlcStrongDbParSubst.fst(82,4-82,12)
(Valid 
;; def=StlcStrongDbParSubst.fst(70,41-70,51); use=StlcStrongDbParSubst.fst(82,4-82,12)
(StlcStrongDbParSubst.renaming @x2)
)


;; def=StlcStrongDbParSubst.fst(70,56-70,63); use=StlcStrongDbParSubst.fst(82,4-82,12)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x2)))
:qid refinement_interpretation_Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e))

:named refinement_interpretation_Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(72,35-72,38); use=StlcStrongDbParSubst.fst(75,8-75,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_355331772027a5870c780cc6a71c0497 @x2
@x3))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcStrongDbParSubst.fst(75,8-75,13)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcStrongDbParSubst.fst(75,8-75,13)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcStrongDbParSubst.fst(75,8-75,13)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcStrongDbParSubst.fst(75,8-75,13)
(StlcStrongDbParSubst.renaming @x2)
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcStrongDbParSubst.fst(75,8-75,13)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x3))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcStrongDbParSubst.fst(75,8-75,13)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_355331772027a5870c780cc6a71c0497 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_355331772027a5870c780cc6a71c0497))

:named refinement_interpretation_Tm_refine_355331772027a5870c780cc6a71c0497))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(121,4-121,9); use=StlcStrongDbParSubst.fst(121,4-121,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.TyVar_x (StlcStrongDbParSubst.TyVar @x0
@x1))
@x1)
 

:pattern ((StlcStrongDbParSubst.TyVar @x0
@x1))
:qid projection_inverse_StlcStrongDbParSubst.TyVar_x))

:named projection_inverse_StlcStrongDbParSubst.TyVar_x))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(121,4-121,9); use=StlcStrongDbParSubst.fst(121,4-121,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.TyVar_g (StlcStrongDbParSubst.TyVar @x0
@x1))
@x0)
 

:pattern ((StlcStrongDbParSubst.TyVar @x0
@x1))
:qid projection_inverse_StlcStrongDbParSubst.TyVar_g))

:named projection_inverse_StlcStrongDbParSubst.TyVar_g))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(138,4-138,10); use=StlcStrongDbParSubst.fst(138,4-138,10)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.TyUnit_g (StlcStrongDbParSubst.TyUnit @x0))
@x0)
 

:pattern ((StlcStrongDbParSubst.TyUnit @x0))
:qid projection_inverse_StlcStrongDbParSubst.TyUnit_g))

:named projection_inverse_StlcStrongDbParSubst.TyUnit_g))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StlcStrongDbParSubst.TyLam_t_ (StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StlcStrongDbParSubst.TyLam_t_))

:named projection_inverse_StlcStrongDbParSubst.TyLam_t_))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StlcStrongDbParSubst.TyLam_t (StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StlcStrongDbParSubst.TyLam_t))

:named projection_inverse_StlcStrongDbParSubst.TyLam_t))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StlcStrongDbParSubst.TyLam_hbody (StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StlcStrongDbParSubst.TyLam_hbody))

:named projection_inverse_StlcStrongDbParSubst.TyLam_hbody))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StlcStrongDbParSubst.TyLam_g (StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StlcStrongDbParSubst.TyLam_g))

:named projection_inverse_StlcStrongDbParSubst.TyLam_g))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StlcStrongDbParSubst.TyLam_e1 (StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_StlcStrongDbParSubst.TyLam_e1))

:named projection_inverse_StlcStrongDbParSubst.TyLam_e1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (StlcStrongDbParSubst.TyApp_t12 (StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
@x4)
 

:pattern ((StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid projection_inverse_StlcStrongDbParSubst.TyApp_t12))

:named projection_inverse_StlcStrongDbParSubst.TyApp_t12))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (StlcStrongDbParSubst.TyApp_t11 (StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
@x3)
 

:pattern ((StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid projection_inverse_StlcStrongDbParSubst.TyApp_t11))

:named projection_inverse_StlcStrongDbParSubst.TyApp_t11))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (StlcStrongDbParSubst.TyApp_h2 (StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
@x6)
 

:pattern ((StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid projection_inverse_StlcStrongDbParSubst.TyApp_h2))

:named projection_inverse_StlcStrongDbParSubst.TyApp_h2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (StlcStrongDbParSubst.TyApp_h1 (StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
@x5)
 

:pattern ((StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid projection_inverse_StlcStrongDbParSubst.TyApp_h1))

:named projection_inverse_StlcStrongDbParSubst.TyApp_h1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (StlcStrongDbParSubst.TyApp_g (StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
@x0)
 

:pattern ((StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid projection_inverse_StlcStrongDbParSubst.TyApp_g))

:named projection_inverse_StlcStrongDbParSubst.TyApp_g))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (StlcStrongDbParSubst.TyApp_e2 (StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
@x2)
 

:pattern ((StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid projection_inverse_StlcStrongDbParSubst.TyApp_e2))

:named projection_inverse_StlcStrongDbParSubst.TyApp_e2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (StlcStrongDbParSubst.TyApp_e1 (StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
@x1)
 

:pattern ((StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid projection_inverse_StlcStrongDbParSubst.TyApp_e1))

:named projection_inverse_StlcStrongDbParSubst.TyApp_e1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
(FStar.Pervasives.Native.Some_v @x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid proj_equation_FStar.Pervasives.Native.Some_v))

:named proj_equation_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! (is-Tm_arrow (PreType StlcStrongDbParSubst.typing@tok))
:named pre_kinding_StlcStrongDbParSubst.typing@tok))
;;;;;;;;;;;;;;;;Lemma: StlcStrongDbParSubst.subst_extensional
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.sub)
(HasType @x1
(Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a @x0))
(HasType @x2
StlcStrongDbParSubst.exp))

;; def=StlcStrongDbParSubst.fst(163,38-163,63); use=StlcStrongDbParSubst.fst(165,8-165,25)
(= (StlcStrongDbParSubst.subst.fuel_instrumented ZFuel
@x0
@x2)
(StlcStrongDbParSubst.subst.fuel_instrumented ZFuel
@x1
@x2))
)
 

:pattern ((StlcStrongDbParSubst.subst.fuel_instrumented ZFuel
@x0
@x2) (StlcStrongDbParSubst.subst.fuel_instrumented ZFuel
@x1
@x2))
:qid lemma_StlcStrongDbParSubst.subst_extensional))
:named lemma_StlcStrongDbParSubst.subst_extensional))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.idempotence_on_domain
;;; Fact-ids: Name FStar.FunctionalExtensionality.idempotence_on_domain; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(84,12-84,58); use=FStar.FunctionalExtensionality.fsti(84,12-84,58)
(= (FStar.FunctionalExtensionality.on_domain @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
)
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)))
:qid lemma_FStar.FunctionalExtensionality.idempotence_on_domain))
:named lemma_FStar.FunctionalExtensionality.idempotence_on_domain))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.feq_on_domain
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq_on_domain; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(80,12-80,35); use=FStar.FunctionalExtensionality.fsti(80,12-80,35)
(Valid 
;; def=FStar.FunctionalExtensionality.fsti(80,12-80,35); use=FStar.FunctionalExtensionality.fsti(80,12-80,35)
(FStar.FunctionalExtensionality.feq @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
@x2)
)
)
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
:qid lemma_FStar.FunctionalExtensionality.feq_on_domain))
:named lemma_FStar.FunctionalExtensionality.feq_on_domain))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.extensionality
;;; Fact-ids: Name FStar.FunctionalExtensionality.extensionality; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(133,21-133,72); use=FStar.FunctionalExtensionality.fsti(133,21-133,72)
(iff 
;; def=FStar.FunctionalExtensionality.fsti(133,22-133,35); use=FStar.FunctionalExtensionality.fsti(133,22-133,35)
(Valid 
;; def=FStar.FunctionalExtensionality.fsti(133,22-133,35); use=FStar.FunctionalExtensionality.fsti(133,22-133,35)
(FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
)


;; def=FStar.FunctionalExtensionality.fsti(133,41-133,71); use=FStar.FunctionalExtensionality.fsti(133,41-133,71)
(= (FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x3))
)
)
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid lemma_FStar.FunctionalExtensionality.extensionality))
:named lemma_FStar.FunctionalExtensionality.extensionality))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc
;;; Fact-ids: Name StlcCbvDbParSubst.sub_inc_above; Namespace StlcCbvDbParSubst
(assert (! (HasType Tm_arrow_b4c180742dce2bdffcb352ac460d5edc
Tm_type)
:named kinding_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb
Tm_type)
:named kinding_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! (HasType Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0
Tm_type)
:named kinding_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type))
:qid kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2
Tm_type)
:named kinding_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0220d49111608e207f00570037ebc3ca
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_arrow_0220d49111608e207f00570037ebc3ca
Tm_type)
:named kinding_Tm_arrow_0220d49111608e207f00570037ebc3ca))
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! (and (IsTotFun StlcStrongDbParSubst.typing@tok)

;; def=StlcStrongDbParSubst.fst(120,10-120,16); use=StlcStrongDbParSubst.fst(120,10-120,16)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT StlcStrongDbParSubst.typing@tok
@x0))
 

:pattern ((ApplyTT StlcStrongDbParSubst.typing@tok
@x0))
:qid kinding_StlcStrongDbParSubst.typing@tok))


;; def=StlcStrongDbParSubst.fst(120,10-120,16); use=StlcStrongDbParSubst.fst(120,10-120,16)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT StlcStrongDbParSubst.typing@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT StlcStrongDbParSubst.typing@tok
@x0)
@x1))
:qid kinding_StlcStrongDbParSubst.typing@tok.1))


;; def=StlcStrongDbParSubst.fst(120,10-120,16); use=StlcStrongDbParSubst.fst(120,10-120,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.env)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.typ))
(HasType (StlcStrongDbParSubst.typing @x0
@x1
@x2)
Tm_type))
 

:pattern ((StlcStrongDbParSubst.typing @x0
@x1
@x2))
:qid kinding_StlcStrongDbParSubst.typing@tok.2))
)
:named kinding_StlcStrongDbParSubst.typing@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_ee2eb4f65430b296888dd31560cce8c1
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(53,22-53,25); use=StlcStrongDbParSubst.fst(165,8-165,25)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_ee2eb4f65430b296888dd31560cce8c1
@x0)
StlcStrongDbParSubst.exp)
 

:pattern ((ApplyTT Tm_abs_ee2eb4f65430b296888dd31560cce8c1
@x0))
:qid interpretation_Tm_abs_ee2eb4f65430b296888dd31560cce8c1))

:named interpretation_Tm_abs_ee2eb4f65430b296888dd31560cce8c1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(38,38-40,47); use=StlcCbvDbParSubst.fst(38,38-40,47)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_8e8cef3f3b2af03d991302fd11832ac3 @x1
@x2
@x3)
@x0)
(let ((@lb4 (Prims.op_LessThan @x0
@x3)))
(ite (= @lb4
(BoxBool true))
(ApplyTT @x1
@x0)
(let ((@lb5 (Prims.op_Equality StlcStrongDbParSubst.var
@x0
@x3)))
(ite (= @lb5
(BoxBool true))
(FStar.Pervasives.Native.Some StlcStrongDbParSubst.typ
@x2)
(ApplyTT @x1
(Prims.op_Subtraction @x0
(BoxInt 1))))))))
 

:pattern ((ApplyTT (Tm_abs_8e8cef3f3b2af03d991302fd11832ac3 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3))

:named interpretation_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(117,19-118,31); use=StlcStrongDbParSubst.fst(117,19-118,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_196d31beccd849fc7b632281c08d07b0 @x1
@x2)
@x0)
(let ((@lb3 (Prims.op_Equality Prims.int
@x0
(BoxInt 0))))
(ite (= @lb3
(BoxBool true))
(FStar.Pervasives.Native.Some StlcStrongDbParSubst.typ
@x1)
(ApplyTT @x2
(Prims.op_Subtraction @x0
(BoxInt 1))))))
 

:pattern ((ApplyTT (Tm_abs_196d31beccd849fc7b632281c08d07b0 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0))

:named interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(161,33-161,50); use=StlcStrongDbParSubst.fst(165,8-165,25)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.sub)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a @x0))))
:qid haseqTm_refine_88d77cd7bfeeb0c60949fc1418a69f5a))

:named haseqTm_refine_88d77cd7bfeeb0c60949fc1418a69f5a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(122,13-122,31); use=StlcStrongDbParSubst.fst(122,13-122,31)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x0))))
:qid haseqTm_refine_7f2e20eb47d22ea18ae57a636be3a7d8))

:named haseqTm_refine_7f2e20eb47d22ea18ae57a636be3a7d8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4d5241eb6fe198666a8101195bbd4a2a
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0))))
:qid haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(70,34-70,65); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x0))))
:qid haseqTm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e))

:named haseqTm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_355331772027a5870c780cc6a71c0497
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(72,35-72,38); use=StlcStrongDbParSubst.fst(75,8-75,13)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_355331772027a5870c780cc6a71c0497 @x0
@x1)))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_355331772027a5870c780cc6a71c0497 @x0
@x1))))
:qid haseqTm_refine_355331772027a5870c780cc6a71c0497))

:named haseqTm_refine_355331772027a5870c780cc6a71c0497))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcStrongDbParSubst.sub_inc; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(63,4-63,11); use=StlcStrongDbParSubst.fst(63,4-63,11)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcStrongDbParSubst.sub_inc@tok
Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb))

;; def=StlcStrongDbParSubst.fst(63,4-63,11); use=StlcStrongDbParSubst.fst(63,4-63,11)
(forall ((@x1 Term))
 (! (= (ApplyTT StlcStrongDbParSubst.sub_inc@tok
@x1)
(StlcStrongDbParSubst.sub_inc @x1))
 

:pattern ((StlcStrongDbParSubst.sub_inc @x1))
:qid function_token_typing_StlcStrongDbParSubst.sub_inc.1))
)
 

:pattern ((ApplyTT @x0
StlcStrongDbParSubst.sub_inc@tok))
:qid function_token_typing_StlcStrongDbParSubst.sub_inc))

:named function_token_typing_StlcStrongDbParSubst.sub_inc))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcStrongDbParSubst.sub; Namespace StlcStrongDbParSubst
(assert (! (HasType StlcStrongDbParSubst.sub
Tm_type)
:named function_token_typing_StlcStrongDbParSubst.sub))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(117,4-117,10); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcStrongDbParSubst.extend@tok
Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2))

;; def=StlcStrongDbParSubst.fst(117,4-117,10); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StlcStrongDbParSubst.extend@tok
@x1)
@x2)
(StlcStrongDbParSubst.extend @x1
@x2))
 

:pattern ((StlcStrongDbParSubst.extend @x1
@x2))
:qid function_token_typing_StlcStrongDbParSubst.extend.1))
)
 

:pattern ((ApplyTT @x0
StlcStrongDbParSubst.extend@tok))
:qid function_token_typing_StlcStrongDbParSubst.extend))

:named function_token_typing_StlcStrongDbParSubst.extend))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcCbvDbParSubst.sub_inc_above; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(31,4-31,17); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.sub_inc_above@tok
Tm_arrow_b4c180742dce2bdffcb352ac460d5edc))

;; def=StlcCbvDbParSubst.fst(31,4-31,17); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_inc_above@tok
@x1)
@x2)
(StlcCbvDbParSubst.sub_inc_above @x1
@x2))
 

:pattern ((StlcCbvDbParSubst.sub_inc_above @x1
@x2))
:qid function_token_typing_StlcCbvDbParSubst.sub_inc_above.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.sub_inc_above@tok))
:qid function_token_typing_StlcCbvDbParSubst.sub_inc_above))

:named function_token_typing_StlcCbvDbParSubst.sub_inc_above))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(37,4-37,14); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.extend_gen@tok
Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0))

;; def=StlcCbvDbParSubst.fst(37,4-37,14); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
@x1)
@x2)
@x3)
(StlcCbvDbParSubst.extend_gen @x1
@x2
@x3))
 

:pattern ((StlcCbvDbParSubst.extend_gen @x1
@x2
@x3))
:qid function_token_typing_StlcCbvDbParSubst.extend_gen.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.extend_gen@tok))
:qid function_token_typing_StlcCbvDbParSubst.extend_gen))

:named function_token_typing_StlcCbvDbParSubst.extend_gen))
;;;;;;;;;;;;;;;;Fuel token correspondence
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! (and 
;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTF StlcStrongDbParSubst.sub_elam.fuel_instrumented_token
@u0)
@x1)
@x2)
(StlcStrongDbParSubst.sub_elam.fuel_instrumented @u0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTF StlcStrongDbParSubst.sub_elam.fuel_instrumented_token
@u0)
@x1)
@x2))
:qid fuel_token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented_token))

(IsTotFun StlcStrongDbParSubst.sub_elam.fuel_instrumented_token)

;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@u0 Fuel))
 (! (IsTotFun (ApplyTF StlcStrongDbParSubst.sub_elam.fuel_instrumented_token
@u0))
 

:pattern ((ApplyTF StlcStrongDbParSubst.sub_elam.fuel_instrumented_token
@u0))
:qid fuel_token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented_token.1))


;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTF StlcStrongDbParSubst.sub_elam.fuel_instrumented_token
@u0)
@x1))
 

:pattern ((ApplyTT (ApplyTF StlcStrongDbParSubst.sub_elam.fuel_instrumented_token
@u0)
@x1))
:qid fuel_token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented_token.2))
)
:named fuel_token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented_token))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(120,10-120,16); use=StlcStrongDbParSubst.fst(120,10-120,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(StlcStrongDbParSubst.typing @x2
@x3
@x4))
(or (and (is-StlcStrongDbParSubst.TyVar @x1)
(= @x2
(StlcStrongDbParSubst.TyVar_g @x1))
(= @x3
(StlcStrongDbParSubst.EVar (StlcStrongDbParSubst.TyVar_x @x1)))
(= @x4
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT (StlcStrongDbParSubst.TyVar_g @x1)
(StlcStrongDbParSubst.TyVar_x @x1)))))
(and (is-StlcStrongDbParSubst.TyLam @x1)
(= @x2
(StlcStrongDbParSubst.TyLam_g @x1))
(= @x3
(StlcStrongDbParSubst.ELam (StlcStrongDbParSubst.TyLam_t @x1)
(StlcStrongDbParSubst.TyLam_e1 @x1)))
(= @x4
(StlcStrongDbParSubst.TArr (StlcStrongDbParSubst.TyLam_t @x1)
(StlcStrongDbParSubst.TyLam_t_ @x1))))
(and (is-StlcStrongDbParSubst.TyApp @x1)
(= @x2
(StlcStrongDbParSubst.TyApp_g @x1))
(= @x3
(StlcStrongDbParSubst.EApp (StlcStrongDbParSubst.TyApp_e1 @x1)
(StlcStrongDbParSubst.TyApp_e2 @x1)))
(= @x4
(StlcStrongDbParSubst.TyApp_t12 @x1)))
(and (is-StlcStrongDbParSubst.TyUnit @x1)
(= @x2
(StlcStrongDbParSubst.TyUnit_g @x1))
(= @x3
StlcStrongDbParSubst.EUnit@tok)
(= @x4
StlcStrongDbParSubst.TUnit@tok))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(StlcStrongDbParSubst.typing @x2
@x3
@x4)))
:qid fuel_guarded_inversion_StlcStrongDbParSubst.typing))

:named fuel_guarded_inversion_StlcStrongDbParSubst.typing))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! (= 286
(Term_constr_id StlcStrongDbParSubst.typing@tok))
:named fresh_token_StlcStrongDbParSubst.typing@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StlcStrongDbParSubst.subst
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(75,8-75,13); use=StlcStrongDbParSubst.fst(75,8-75,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.sub)
(HasType @x2
StlcStrongDbParSubst.exp))
(= (StlcStrongDbParSubst.subst.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-StlcStrongDbParSubst.EVar @lb3)
(ApplyTT @x1
(StlcStrongDbParSubst.EVar__0 @lb3))
(ite (is-StlcStrongDbParSubst.ELam @lb3)
(StlcStrongDbParSubst.ELam (StlcStrongDbParSubst.ELam__0 @lb3)
(StlcStrongDbParSubst.subst.fuel_instrumented @u0
(ApplyTT (ApplyTF StlcStrongDbParSubst.sub_elam.fuel_instrumented_token
@u0)
@x1)
(StlcStrongDbParSubst.ELam__1 @lb3)))
(ite (is-StlcStrongDbParSubst.EApp @lb3)
(StlcStrongDbParSubst.EApp (StlcStrongDbParSubst.subst.fuel_instrumented @u0
@x1
(StlcStrongDbParSubst.EApp__0 @lb3))
(StlcStrongDbParSubst.subst.fuel_instrumented @u0
@x1
(StlcStrongDbParSubst.EApp__1 @lb3)))
(ite (is-StlcStrongDbParSubst.EUnit @lb3)
StlcStrongDbParSubst.EUnit@tok
Tm_unit)))))))
 :weight 0


:pattern ((StlcStrongDbParSubst.subst.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_StlcStrongDbParSubst.subst.fuel_instrumented))

:named equation_with_fuel_StlcStrongDbParSubst.subst.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StlcStrongDbParSubst.sub_elam
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.sub)
(HasType @x2
StlcStrongDbParSubst.var))
(= (StlcStrongDbParSubst.sub_elam.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 (Prims.op_Equality Prims.int
@x2
(BoxInt 0))))
(ite (= @lb3
(BoxBool true))
(StlcStrongDbParSubst.EVar @x2)
(StlcStrongDbParSubst.subst.fuel_instrumented @u0
StlcStrongDbParSubst.sub_inc@tok
(ApplyTT @x1
(Prims.op_Subtraction @x2
(BoxInt 1))))))))
 :weight 0


:pattern ((StlcStrongDbParSubst.sub_elam.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_StlcStrongDbParSubst.sub_elam.fuel_instrumented))

:named equation_with_fuel_StlcStrongDbParSubst.sub_elam.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.sub_inc
;;; Fact-ids: Name StlcStrongDbParSubst.sub_inc; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(63,4-63,11); use=StlcStrongDbParSubst.fst(63,4-63,11)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.sub_inc @x0)
(StlcStrongDbParSubst.EVar (Prims.op_Addition @x0
(BoxInt 1))))
 

:pattern ((StlcStrongDbParSubst.sub_inc @x0))
:qid equation_StlcStrongDbParSubst.sub_inc))

:named equation_StlcStrongDbParSubst.sub_inc))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.sub
;;; Fact-ids: Name StlcStrongDbParSubst.sub; Namespace StlcStrongDbParSubst
(assert (! (= StlcStrongDbParSubst.sub
Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb)
:named equation_StlcStrongDbParSubst.sub))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.renaming
;;; Fact-ids: Name StlcStrongDbParSubst.renaming; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(55,5-55,13); use=StlcStrongDbParSubst.fst(55,5-55,13)
(forall ((@x0 Term))
 (! (= (Valid (StlcStrongDbParSubst.renaming @x0))

;; def=StlcStrongDbParSubst.fst(55,24-55,53); use=StlcStrongDbParSubst.fst(55,24-55,53)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)

;; def=StlcStrongDbParSubst.fst(55,41-55,52); use=StlcStrongDbParSubst.fst(55,41-55,52)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar (ApplyTT @x0
@x1)))
)
 
;;no pats
:qid equation_StlcStrongDbParSubst.renaming.1))
)
 

:pattern ((StlcStrongDbParSubst.renaming @x0))
:qid equation_StlcStrongDbParSubst.renaming))

:named equation_StlcStrongDbParSubst.renaming))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.extend
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(117,4-117,10); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.extend @x0
@x1)
(Tm_abs_196d31beccd849fc7b632281c08d07b0 @x0
@x1))
 

:pattern ((StlcStrongDbParSubst.extend @x0
@x1))
:qid equation_StlcStrongDbParSubst.extend))

:named equation_StlcStrongDbParSubst.extend))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.sub_inc_above
;;; Fact-ids: Name StlcCbvDbParSubst.sub_inc_above; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(31,4-31,17); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcCbvDbParSubst.sub_inc_above @x0
@x1)
(let ((@lb2 (Prims.op_LessThan @x1
@x0)))
(ite (= @lb2
(BoxBool true))
(StlcStrongDbParSubst.EVar @x1)
(StlcStrongDbParSubst.EVar (Prims.op_Addition @x1
(BoxInt 1))))))
 

:pattern ((StlcCbvDbParSubst.sub_inc_above @x0
@x1))
:qid equation_StlcCbvDbParSubst.sub_inc_above))

:named equation_StlcCbvDbParSubst.sub_inc_above))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.shift_up_above
;;; Fact-ids: Name StlcCbvDbParSubst.shift_up_above; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(34,4-34,18); use=StlcCbvDbParSubst.fst(34,4-34,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcCbvDbParSubst.shift_up_above @x0
@x1)
(StlcStrongDbParSubst.subst (ApplyTT StlcCbvDbParSubst.sub_inc_above@tok
@x0)
@x1))
 

:pattern ((StlcCbvDbParSubst.shift_up_above @x0
@x1))
:qid equation_StlcCbvDbParSubst.shift_up_above))

:named equation_StlcCbvDbParSubst.shift_up_above))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.extend_gen
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(37,4-37,14); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (StlcCbvDbParSubst.extend_gen @x0
@x1
@x2)
(let ((@lb3 (Prims.op_Equality Prims.int
@x0
(BoxInt 0))))
(ite (= @lb3
(BoxBool true))
(StlcStrongDbParSubst.extend @x1
@x2)
(Tm_abs_8e8cef3f3b2af03d991302fd11832ac3 @x2
@x1
@x0))))
 

:pattern ((StlcCbvDbParSubst.extend_gen @x0
@x1
@x2))
:qid equation_StlcCbvDbParSubst.extend_gen))

:named equation_StlcCbvDbParSubst.extend_gen))
;;;;;;;;;;;;;;;;Equation for FStar.FunctionalExtensionality.feq
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))

;; def=FStar.FunctionalExtensionality.fsti(48,56-48,100); use=FStar.FunctionalExtensionality.fsti(48,56-48,100)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x0)

;; def=FStar.FunctionalExtensionality.fsti(48,90-48,100); use=FStar.FunctionalExtensionality.fsti(48,90-48,100)
(= (ApplyTT @x2
@x4)
(ApplyTT @x3
@x4))
)
 

:pattern ((ApplyTT @x2
@x4))

:pattern ((ApplyTT @x3
@x4))
:qid equation_FStar.FunctionalExtensionality.feq.1))
)
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid equation_FStar.FunctionalExtensionality.feq))

:named equation_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;Prop-typing for StlcStrongDbParSubst.renaming
;;; Fact-ids: Name StlcStrongDbParSubst.renaming; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(55,5-55,13); use=StlcStrongDbParSubst.fst(55,5-55,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.sub)
(Valid (Prims.subtype_of (StlcStrongDbParSubst.renaming @x0)
Prims.unit)))
 

:pattern ((Prims.subtype_of (StlcStrongDbParSubst.renaming @x0)
Prims.unit))
:qid defn_equation_StlcStrongDbParSubst.renaming))

:named defn_equation_StlcStrongDbParSubst.renaming))
;;;;;;;;;;;;;;;;Prop-typing for FStar.FunctionalExtensionality.feq
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(Valid (Prims.subtype_of (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_FStar.FunctionalExtensionality.feq))

:named defn_equation_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(121,4-121,9); use=StlcStrongDbParSubst.fst(121,4-121,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)
(HasTypeFuel @u0
@x2
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x1))
(= @x1
@x3)
(= (StlcStrongDbParSubst.EVar @x2)
@x4)
(= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT @x1
@x2))
@x5))
(HasTypeFuel @u0
(StlcStrongDbParSubst.TyVar @x1
@x2)
(StlcStrongDbParSubst.typing @x3
@x4
@x5)))
 

:pattern ((HasTypeFuel @u0
(StlcStrongDbParSubst.TyVar @x1
@x2)
(StlcStrongDbParSubst.typing @x3
@x4
@x5)))
:qid data_typing_intro_StlcStrongDbParSubst.TyVar@tok))

:named data_typing_intro_StlcStrongDbParSubst.TyVar@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(138,4-138,10); use=StlcStrongDbParSubst.fst(138,4-138,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)
(= @x1
@x2)
(= StlcStrongDbParSubst.EUnit@tok
@x3)
(= StlcStrongDbParSubst.TUnit@tok
@x4))
(HasTypeFuel @u0
(StlcStrongDbParSubst.TyUnit @x1)
(StlcStrongDbParSubst.typing @x2
@x3
@x4)))
 

:pattern ((HasTypeFuel @u0
(StlcStrongDbParSubst.TyUnit @x1)
(StlcStrongDbParSubst.typing @x2
@x3
@x4)))
:qid data_typing_intro_StlcStrongDbParSubst.TyUnit@tok))

:named data_typing_intro_StlcStrongDbParSubst.TyUnit@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x3
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x4
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x5
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
@x1)
@x3
@x4))
(= @x1
@x6)
(= (StlcStrongDbParSubst.ELam @x2
@x3)
@x7)
(= (StlcStrongDbParSubst.TArr @x2
@x4)
@x8))
(HasTypeFuel @u0
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing @x6
@x7
@x8)))
 

:pattern ((HasTypeFuel @u0
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing @x6
@x7
@x8)))
:qid data_typing_intro_StlcStrongDbParSubst.TyLam@tok))

:named data_typing_intro_StlcStrongDbParSubst.TyLam@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x3
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x4
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x5
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x6
(StlcStrongDbParSubst.typing @x1
@x2
(StlcStrongDbParSubst.TArr @x4
@x5)))
(HasTypeFuel @u0
@x7
(StlcStrongDbParSubst.typing @x1
@x3
@x4))
(= @x1
@x8)
(= (StlcStrongDbParSubst.EApp @x2
@x3)
@x9)
(= @x5
@x10))
(HasTypeFuel @u0
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcStrongDbParSubst.typing @x8
@x9
@x10)))
 

:pattern ((HasTypeFuel @u0
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcStrongDbParSubst.typing @x8
@x9
@x10)))
:qid data_typing_intro_StlcStrongDbParSubst.TyApp@tok))

:named data_typing_intro_StlcStrongDbParSubst.TyApp@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(121,4-121,9); use=StlcStrongDbParSubst.fst(121,4-121,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyVar @x1
@x2)
(StlcStrongDbParSubst.typing @x3
@x4
@x5))
(and (= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT @x1
@x2))
@x5)
(= (StlcStrongDbParSubst.EVar @x2)
@x4)
(= @x1
@x3)
(HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)
(HasTypeFuel @u0
@x2
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyVar @x1
@x2)
(StlcStrongDbParSubst.typing @x3
@x4
@x5)))
:qid data_elim_StlcStrongDbParSubst.TyVar))

:named data_elim_StlcStrongDbParSubst.TyVar))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(138,4-138,10); use=StlcStrongDbParSubst.fst(138,4-138,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyUnit @x1)
(StlcStrongDbParSubst.typing @x2
@x3
@x4))
(and (= StlcStrongDbParSubst.TUnit@tok
@x4)
(= StlcStrongDbParSubst.EUnit@tok
@x3)
(= @x1
@x2)
(HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyUnit @x1)
(StlcStrongDbParSubst.typing @x2
@x3
@x4)))
:qid data_elim_StlcStrongDbParSubst.TyUnit))

:named data_elim_StlcStrongDbParSubst.TyUnit))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing @x6
@x7
@x8))
(and (= (StlcStrongDbParSubst.TArr @x2
@x4)
@x8)
(= (StlcStrongDbParSubst.ELam @x2
@x3)
@x7)
(= @x1
@x6)
(HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x3
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x4
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x5
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
@x1)
@x3
@x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing @x6
@x7
@x8)))
:qid data_elim_StlcStrongDbParSubst.TyLam))

:named data_elim_StlcStrongDbParSubst.TyLam))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcStrongDbParSubst.typing @x8
@x9
@x10))
(and (= @x5
@x10)
(= (StlcStrongDbParSubst.EApp @x2
@x3)
@x9)
(= @x1
@x8)
(HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)
(HasTypeFuel @u0
@x2
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x3
StlcStrongDbParSubst.exp)
(HasTypeFuel @u0
@x4
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x5
StlcStrongDbParSubst.typ)
(HasTypeFuel @u0
@x6
(StlcStrongDbParSubst.typing @x1
@x2
(StlcStrongDbParSubst.TArr @x4
@x5)))
(HasTypeFuel @u0
@x7
(StlcStrongDbParSubst.typing @x1
@x3
@x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcStrongDbParSubst.typing @x8
@x9
@x10)))
:qid data_elim_StlcStrongDbParSubst.TyApp))

:named data_elim_StlcStrongDbParSubst.TyApp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(120,10-120,16); use=StlcStrongDbParSubst.fst(120,10-120,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 285
(Term_constr_id (StlcStrongDbParSubst.typing @x0
@x1
@x2)))
 

:pattern ((StlcStrongDbParSubst.typing @x0
@x1
@x2))
:qid constructor_distinct_StlcStrongDbParSubst.typing))

:named constructor_distinct_StlcStrongDbParSubst.typing))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(121,4-121,9); use=StlcStrongDbParSubst.fst(121,4-121,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 293
(Term_constr_id (StlcStrongDbParSubst.TyVar @x0
@x1)))
 

:pattern ((StlcStrongDbParSubst.TyVar @x0
@x1))
:qid constructor_distinct_StlcStrongDbParSubst.TyVar))

:named constructor_distinct_StlcStrongDbParSubst.TyVar))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(138,4-138,10); use=StlcStrongDbParSubst.fst(138,4-138,10)
(forall ((@x0 Term))
 (! (= 318
(Term_constr_id (StlcStrongDbParSubst.TyUnit @x0)))
 

:pattern ((StlcStrongDbParSubst.TyUnit @x0))
:qid constructor_distinct_StlcStrongDbParSubst.TyUnit))

:named constructor_distinct_StlcStrongDbParSubst.TyUnit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 302
(Term_constr_id (StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((StlcStrongDbParSubst.TyLam @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_StlcStrongDbParSubst.TyLam))

:named constructor_distinct_StlcStrongDbParSubst.TyLam))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= 310
(Term_constr_id (StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
 

:pattern ((StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid constructor_distinct_StlcStrongDbParSubst.TyApp))

:named constructor_distinct_StlcStrongDbParSubst.TyApp))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name StlcStrongDbParSubst.typing; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyLam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(120,10-120,16); use=StlcStrongDbParSubst.fst(120,10-120,16)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(StlcStrongDbParSubst.typing @x2
@x3
@x4))
(= (StlcStrongDbParSubst.typing @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(StlcStrongDbParSubst.typing @x2
@x3
@x4)))
:qid StlcStrongDbParSubst_pretyping_973b93b4201307dd6e1098e2198db95c))

:named StlcStrongDbParSubst_pretyping_973b93b4201307dd6e1098e2198db95c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,12-37,22); use=StlcStrongDbParSubst.fst(37,12-37,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb))
:qid StlcStrongDbParSubst_pre_typing_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb))

:named StlcStrongDbParSubst_pre_typing_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(116,13-116,34); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2))
:qid StlcStrongDbParSubst_pre_typing_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2))

:named StlcStrongDbParSubst_pre_typing_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(53,11-53,14); use=StlcStrongDbParSubst.fst(165,8-165,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_0220d49111608e207f00570037ebc3ca)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_0220d49111608e207f00570037ebc3ca))
:qid StlcStrongDbParSubst_pre_typing_Tm_arrow_0220d49111608e207f00570037ebc3ca))

:named StlcStrongDbParSubst_pre_typing_Tm_arrow_0220d49111608e207f00570037ebc3ca))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb
;;; Fact-ids: Name StlcStrongDbParSubst.exp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EVar; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EApp; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.ELam; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(37,12-37,22); use=StlcStrongDbParSubst.fst(37,12-37,22)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb)
(and 
;; def=StlcStrongDbParSubst.fst(37,12-37,22); use=StlcStrongDbParSubst.fst(37,12-37,22)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(HasType (ApplyTT @x0
@x1)
StlcStrongDbParSubst.exp))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb))

:named StlcStrongDbParSubst_interpretation_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2
;;; Fact-ids: Name StlcStrongDbParSubst.extend; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(116,13-116,34); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2)
(and 
;; def=StlcStrongDbParSubst.fst(116,13-116,34); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
StlcStrongDbParSubst.env))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
StlcStrongDbParSubst.env))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2.1))

(IsTotFun @x0)

;; def=StlcStrongDbParSubst.fst(116,13-116,34); use=StlcStrongDbParSubst.fst(117,4-117,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.typ)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2))

:named StlcStrongDbParSubst_interpretation_Tm_arrow_25520bf18d16d55849d5d48bb3b3d5c2))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0220d49111608e207f00570037ebc3ca
;;; Fact-ids: Name StlcStrongDbParSubst.subst_extensional; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(53,11-53,14); use=StlcStrongDbParSubst.fst(165,8-165,25)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_0220d49111608e207f00570037ebc3ca)
(and 
;; def=StlcStrongDbParSubst.fst(53,11-53,14); use=StlcStrongDbParSubst.fst(165,8-165,25)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_0220d49111608e207f00570037ebc3ca.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_0220d49111608e207f00570037ebc3ca))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_0220d49111608e207f00570037ebc3ca))

:named StlcStrongDbParSubst_interpretation_Tm_arrow_0220d49111608e207f00570037ebc3ca))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StlcCbvDbParSubst.sub_inc_above; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(30,20-30,41); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b4c180742dce2bdffcb352ac460d5edc)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b4c180742dce2bdffcb352ac460d5edc))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(36,17-36,45); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc
;;; Fact-ids: Name StlcCbvDbParSubst.sub_inc_above; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(30,20-30,41); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b4c180742dce2bdffcb352ac460d5edc)
(and 
;; def=StlcCbvDbParSubst.fst(30,20-30,41); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
StlcStrongDbParSubst.var))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
StlcStrongDbParSubst.exp))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(30,20-30,41); use=StlcCbvDbParSubst.fst(31,4-31,17)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b4c180742dce2bdffcb352ac460d5edc))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_b4c180742dce2bdffcb352ac460d5edc))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(36,17-36,45); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0)
(and 
;; def=StlcCbvDbParSubst.fst(36,17-36,45); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
StlcStrongDbParSubst.env))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
StlcStrongDbParSubst.env))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(36,17-36,45); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0.2))


;; def=StlcCbvDbParSubst.fst(36,17-36,45); use=StlcCbvDbParSubst.fst(37,4-37,14)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.typ))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_86196c4422c9a14a5bf2f7a9a044b3d0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2)))
:qid Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1))
(and 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1)))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x2
@x3)))
:qid FStar.FunctionalExtensionality_pre_typing_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named FStar.FunctionalExtensionality_pre_typing_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x2))
(and 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(ApplyTT @x1
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x2)))
:qid FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StlcCbvDbParSubst.shift_up_above; Namespace StlcCbvDbParSubst
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcCbvDbParSubst.sub_inc_above@tok))
:named @kick_partial_app_c275e6db453d5f915ec62c34b93ca47f))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcStrongDbParSubst.sub_inc@tok))
:named @kick_partial_app_885b9dab2a65221097df19b6f193aa39))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StlcStrongDbParSubst.substitution; Namespace StlcStrongDbParSubst
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcStrongDbParSubst.extend@tok))
:named @kick_partial_app_511da2ff0a76a5d8a4ae75e677fe8241))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(75,8-75,13); use=StlcStrongDbParSubst.fst(75,8-75,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (StlcStrongDbParSubst.subst.fuel_instrumented (SFuel @u0)
@x1
@x2)
(StlcStrongDbParSubst.subst.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((StlcStrongDbParSubst.subst.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_StlcStrongDbParSubst.subst.fuel_instrumented))

:named @fuel_irrelevance_StlcStrongDbParSubst.subst.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (StlcStrongDbParSubst.sub_elam.fuel_instrumented (SFuel @u0)
@x1
@x2)
(StlcStrongDbParSubst.sub_elam.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((StlcStrongDbParSubst.sub_elam.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_StlcStrongDbParSubst.sub_elam.fuel_instrumented))

:named @fuel_irrelevance_StlcStrongDbParSubst.sub_elam.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(75,8-75,13); use=StlcStrongDbParSubst.fst(75,8-75,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.subst @x0
@x1)
(StlcStrongDbParSubst.subst.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((StlcStrongDbParSubst.subst @x0
@x1))
:qid @fuel_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented))

:named @fuel_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(45,35-48,40)

;;;;;;;;;;;;;;;;n : Prims.nat (Prims.nat)
(declare-fun x_bb4e1c9af0265270f8e7a5f250f730e2_0 () Term)
;;;;;;;;;;;;;;;;binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0
;;; Fact-ids: 
(assert (! (HasType x_bb4e1c9af0265270f8e7a5f250f730e2_0
Prims.nat)
:named binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0))
;;;;;;;;;;;;;;;;g : StlcStrongDbParSubst.env (StlcStrongDbParSubst.env)
(declare-fun x_d7a08fe95d0edeffd31477bbf4345664_1 () Term)
;;;;;;;;;;;;;;;;binder_x_d7a08fe95d0edeffd31477bbf4345664_1
;;; Fact-ids: 
(assert (! (HasType x_d7a08fe95d0edeffd31477bbf4345664_1
StlcStrongDbParSubst.env)
:named binder_x_d7a08fe95d0edeffd31477bbf4345664_1))
;;;;;;;;;;;;;;;;v : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_2 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_2
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_2
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_2))
;;;;;;;;;;;;;;;;t : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_3 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_3
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3))
;;;;;;;;;;;;;;;;t' : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_4 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_4
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_4
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_4))
;;;;;;;;;;;;;;;;h : StlcStrongDbParSubst.typing g v t (StlcStrongDbParSubst.typing g v t)
(declare-fun x_aa529169e17553eab2fd2cf8e2e00d43_5 () Term)
;;;;;;;;;;;;;;;;binder_x_aa529169e17553eab2fd2cf8e2e00d43_5
;;; Fact-ids: 
(assert (! (HasType x_aa529169e17553eab2fd2cf8e2e00d43_5
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3))
:named binder_x_aa529169e17553eab2fd2cf8e2e00d43_5))
(declare-fun Tm_refine_f7eafaf534f17ff236fbf078549d2a17 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(43,6-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_f7eafaf534f17ff236fbf078549d2a17 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_f7eafaf534f17ff236fbf078549d2a17 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_f7eafaf534f17ff236fbf078549d2a17))

:named refinement_kinding_Tm_refine_f7eafaf534f17ff236fbf078549d2a17))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(43,6-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f7eafaf534f17ff236fbf078549d2a17 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(StlcStrongDbParSubst.typing @x2
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(45,35-48,40); use=StlcCbvDbParSubst.fst(45,35-48,40)

;; def=StlcCbvDbParSubst.fst(45,35-48,40); use=StlcCbvDbParSubst.fst(45,35-48,40)
(Valid 
;; def=StlcCbvDbParSubst.fst(45,35-48,40); use=StlcCbvDbParSubst.fst(45,35-48,40)
(Prims.precedes (StlcStrongDbParSubst.typing @x2
@x3
@x4)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3)
@x1
x_aa529169e17553eab2fd2cf8e2e00d43_5)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f7eafaf534f17ff236fbf078549d2a17 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_f7eafaf534f17ff236fbf078549d2a17))

:named refinement_interpretation_Tm_refine_f7eafaf534f17ff236fbf078549d2a17))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f7eafaf534f17ff236fbf078549d2a17
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(43,6-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f7eafaf534f17ff236fbf078549d2a17 @x0
@x1
@x2)))
(Valid (Prims.hasEq (StlcStrongDbParSubst.typing @x0
@x1
@x2))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f7eafaf534f17ff236fbf078549d2a17 @x0
@x1
@x2))))
:qid haseqTm_refine_f7eafaf534f17ff236fbf078549d2a17))

:named haseqTm_refine_f7eafaf534f17ff236fbf078549d2a17))
(declare-fun StlcCbvDbParSubst.weakening__115 (Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;n: Prims.nat -> t': StlcStrongDbParSubst.typ -> h: StlcStrongDbParSubst.typing g e t {h << h}   -> Prims.Tot (StlcStrongDbParSubst.typing (extend_gen n t' g) (shift_up_above n e) t)
(declare-fun Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c
Tm_type)
:named kinding_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(42,30-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(42,30-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c)
(and 
;; def=StlcCbvDbParSubst.fst(42,30-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.typ)
(HasType @x6
(Tm_refine_f7eafaf534f17ff236fbf078549d2a17 @x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen @x1
@x5
@x2)
(StlcCbvDbParSubst.shift_up_above @x1
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(42,30-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c.2))


;; def=StlcCbvDbParSubst.fst(42,30-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
StlcStrongDbParSubst.env))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c.3))


;; def=StlcCbvDbParSubst.fst(42,30-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.exp))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c.4))


;; def=StlcCbvDbParSubst.fst(42,30-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c.5))


;; def=StlcCbvDbParSubst.fst(42,30-48,40); use=StlcCbvDbParSubst.fst(43,6-48,40)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.typ))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c.6))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c))
(declare-fun StlcCbvDbParSubst.weakening__115@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(45,8-45,17); use=StlcCbvDbParSubst.fst(45,8-45,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.weakening__115@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
(StlcCbvDbParSubst.weakening__115 @x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.weakening__115@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5))
:qid token_correspondence_StlcCbvDbParSubst.weakening__115))

:named token_correspondence_StlcCbvDbParSubst.weakening__115))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(45,8-45,17); use=StlcCbvDbParSubst.fst(45,8-45,17)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.weakening__115@tok
Tm_arrow_fef2c06d7d36b7b12e786d402c94e48c))

;; def=StlcCbvDbParSubst.fst(45,8-45,17); use=StlcCbvDbParSubst.fst(45,8-45,17)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.weakening__115@tok
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
(StlcCbvDbParSubst.weakening__115 @x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((StlcCbvDbParSubst.weakening__115 @x1
@x2
@x3
@x4
@x5
@x6))
:qid function_token_typing_StlcCbvDbParSubst.weakening__115.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.weakening__115@tok))
:qid function_token_typing_StlcCbvDbParSubst.weakening__115))

:named function_token_typing_StlcCbvDbParSubst.weakening__115))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(45,8-45,17); use=StlcCbvDbParSubst.fst(45,8-45,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
(Tm_refine_f7eafaf534f17ff236fbf078549d2a17 @x1
@x2
@x3)))
(HasType (StlcCbvDbParSubst.weakening__115 @x0
@x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen @x0
@x4
@x1)
(StlcCbvDbParSubst.shift_up_above @x0
@x2)
@x3)))
 

:pattern ((StlcCbvDbParSubst.weakening__115 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_StlcCbvDbParSubst.weakening__115))

:named typing_StlcCbvDbParSubst.weakening__115))
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_c5d162fb39ed27e3122cb49f4606e8da () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_c5d162fb39ed27e3122cb49f4606e8da
Tm_type)
:named refinement_kinding_Tm_refine_c5d162fb39ed27e3122cb49f4606e8da))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcStrongDbParSubst.fst(179,3-179,22); use=StlcCbvDbParSubst.fst(45,35-48,40)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_c5d162fb39ed27e3122cb49f4606e8da)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcStrongDbParSubst.fst(179,9-179,21); use=StlcCbvDbParSubst.fst(45,35-48,40)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_1
@x1)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_c5d162fb39ed27e3122cb49f4606e8da))
:qid refinement_interpretation_Tm_refine_c5d162fb39ed27e3122cb49f4606e8da))

:named refinement_interpretation_Tm_refine_c5d162fb39ed27e3122cb49f4606e8da))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c5d162fb39ed27e3122cb49f4606e8da
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_c5d162fb39ed27e3122cb49f4606e8da))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
:named haseqTm_refine_c5d162fb39ed27e3122cb49f4606e8da))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcCbvDbParSubst.extend_gen@tok))
:named @kick_partial_app_df99fdb0ff0434ae081f31f1f31f5269))





(declare-fun Tm_refine_e6b8368a10cb13dd614ea244809bee36 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_e6b8368a10cb13dd614ea244809bee36
Tm_type)
:named refinement_kinding_Tm_refine_e6b8368a10cb13dd614ea244809bee36))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcStrongDbParSubst.fst(122,13-122,31); use=StlcCbvDbParSubst.fst(47,40-47,45)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e6b8368a10cb13dd614ea244809bee36)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(47,40-47,45)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
x_d7a08fe95d0edeffd31477bbf4345664_1)
@x1)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e6b8368a10cb13dd614ea244809bee36))
:qid refinement_interpretation_Tm_refine_e6b8368a10cb13dd614ea244809bee36))

:named refinement_interpretation_Tm_refine_e6b8368a10cb13dd614ea244809bee36))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e6b8368a10cb13dd614ea244809bee36
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e6b8368a10cb13dd614ea244809bee36))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
:named haseqTm_refine_e6b8368a10cb13dd614ea244809bee36))



; Encoding query formula : forall (y: x: StlcStrongDbParSubst.var{Some? (g x)}).
;   (*  - Could not prove post-condition
; *)
;   Some? (g y) /\
;   (forall (k:
;       Prims.pure_post (StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen n t' g)
;             (StlcCbvDbParSubst.sub_inc_above n y)
;             (g y).v)).
;       (forall (x:
;           StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen n t' g)
;             (StlcCbvDbParSubst.sub_inc_above n y)
;             (g y).v).
;           {:pattern Prims.guard_free (k x)}
;           Prims.auto_squash (k x)) ==>
;       (y < n == true ==>
;         (Some? (g y) ==> Some? (StlcCbvDbParSubst.extend_gen n t' g y)) /\
;         (forall (any_result: x: StlcStrongDbParSubst.var{Some? (g x)}).
;             y == any_result ==>
;             (forall (any_result:
;                 StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen n t' g)
;                   (StlcStrongDbParSubst.EVar y)
;                   (StlcCbvDbParSubst.extend_gen n t' g y).v).
;                 StlcStrongDbParSubst.TyVar y == any_result ==>
;                 StlcStrongDbParSubst.EVar y == StlcCbvDbParSubst.sub_inc_above n y /\
;                 (StlcCbvDbParSubst.extend_gen n t' g y).v == (g y).v))) /\
;       (~(y < n = true) ==>
;         (forall (b: Prims.bool).
;             y < n == b ==>
;             y + 1 >= 0 /\ Some? (StlcCbvDbParSubst.extend_gen n t' g (y + 1)) /\
;             (forall (return_val:
;                 x: StlcStrongDbParSubst.var{Some? (StlcCbvDbParSubst.extend_gen n t' g x)}).
;                 return_val == y + 1 ==>
;                 (forall (any_result:
;                     StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen n t' g)
;                       (StlcStrongDbParSubst.EVar (y + 1))
;                       (StlcCbvDbParSubst.extend_gen n t' g (y + 1)).v).
;                     StlcStrongDbParSubst.TyVar (y + 1) == any_result ==>
;                     StlcStrongDbParSubst.EVar (y + 1) == StlcCbvDbParSubst.sub_inc_above n y /\
;                     (StlcCbvDbParSubst.extend_gen n t' g (y + 1)).v == (g y).v)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec weakening`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(45,35-48,40)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_c5d162fb39ed27e3122cb49f4606e8da)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(47,13-47,51)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcStrongDbParSubst.fst(179,55-179,61)
(or label_1

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(47,13-47,51)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_1
@x0)))
)


;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(45,35-48,40)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post (StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_d7a08fe95d0edeffd31477bbf4345664_1)
(StlcCbvDbParSubst.sub_inc_above x_bb4e1c9af0265270f8e7a5f250f730e2_0
@x0)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_1
@x0)))))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(47,13-47,51)
(forall ((@x2 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(47,13-47,51)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(47,13-47,51)
(ApplyTT @x1
@x2)
)

 

:pattern ((ApplyTT @x1
@x2))
:qid @query.2))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(47,13-47,51)
(and (implies 
;; def=StlcCbvDbParSubst.fst(47,16-47,21); use=StlcCbvDbParSubst.fst(47,16-47,21)
(= (Prims.op_LessThan @x0
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(47,13-47,51)
(and (implies 
;; def=StlcStrongDbParSubst.fst(179,9-179,21); use=StlcCbvDbParSubst.fst(47,33-47,34)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_1
@x0)))


;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(47,33-47,34)
(or label_2

;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(47,33-47,34)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
x_d7a08fe95d0edeffd31477bbf4345664_1)
@x0)))
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(47,13-47,51)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Tm_refine_c5d162fb39ed27e3122cb49f4606e8da)

;; def=StlcStrongDbParSubst.fst(122,13-122,14); use=StlcCbvDbParSubst.fst(47,13-47,51)
(= @x0
@x2)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(47,13-47,51)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_d7a08fe95d0edeffd31477bbf4345664_1)
(StlcStrongDbParSubst.EVar @x0)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
x_d7a08fe95d0edeffd31477bbf4345664_1)
@x0))))

;; def=StlcStrongDbParSubst.fst(179,29-179,63); use=StlcCbvDbParSubst.fst(47,13-47,51)
(= (StlcStrongDbParSubst.TyVar (StlcCbvDbParSubst.extend_gen x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_d7a08fe95d0edeffd31477bbf4345664_1)
@x0)
@x3)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(47,27-47,34)
(and 
;; def=StlcStrongDbParSubst.fst(123,22-179,45); use=StlcCbvDbParSubst.fst(47,27-47,34)
(or label_3

;; def=StlcStrongDbParSubst.fst(123,22-179,45); use=StlcCbvDbParSubst.fst(47,27-47,34)
(= (StlcStrongDbParSubst.EVar @x0)
(StlcCbvDbParSubst.sub_inc_above x_bb4e1c9af0265270f8e7a5f250f730e2_0
@x0))
)


;; def=StlcStrongDbParSubst.fst(123,31-179,62); use=StlcCbvDbParSubst.fst(47,27-47,34)
(or label_4

;; def=StlcStrongDbParSubst.fst(123,31-179,62); use=StlcCbvDbParSubst.fst(47,27-47,34)
(= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
x_d7a08fe95d0edeffd31477bbf4345664_1)
@x0))
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_1
@x0)))
)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(47,13-47,51)
(not 
;; def=StlcCbvDbParSubst.fst(47,16-47,21); use=StlcCbvDbParSubst.fst(47,16-47,21)
(= (Prims.op_LessThan @x0
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(47,13-47,51)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.bool)

;; def=StlcCbvDbParSubst.fst(47,16-47,51); use=StlcCbvDbParSubst.fst(47,16-47,51)
(= (Prims.op_LessThan @x0
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
@x2)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(47,13-47,51)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(47,46-47,51)
(or label_5

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(47,46-47,51)
(>= (BoxInt_proj_0 (Prims.op_Addition @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(47,46-47,51)
(or label_6

;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(47,46-47,51)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
x_d7a08fe95d0edeffd31477bbf4345664_1)
(Prims.op_Addition @x0
(BoxInt 1)))))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(47,13-47,51)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_refine_e6b8368a10cb13dd614ea244809bee36)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(47,13-47,51)
(= @x3
(Prims.op_Addition @x0
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(47,13-47,51)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_d7a08fe95d0edeffd31477bbf4345664_1)
(StlcStrongDbParSubst.EVar (Prims.op_Addition @x0
(BoxInt 1)))
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
x_d7a08fe95d0edeffd31477bbf4345664_1)
(Prims.op_Addition @x0
(BoxInt 1))))))

;; def=StlcStrongDbParSubst.fst(179,29-179,63); use=StlcCbvDbParSubst.fst(47,13-47,51)
(= (StlcStrongDbParSubst.TyVar (StlcCbvDbParSubst.extend_gen x_bb4e1c9af0265270f8e7a5f250f730e2_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_d7a08fe95d0edeffd31477bbf4345664_1)
(Prims.op_Addition @x0
(BoxInt 1)))
@x4)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(47,40-47,51)
(and 
;; def=StlcStrongDbParSubst.fst(123,22-179,45); use=StlcCbvDbParSubst.fst(47,40-47,51)
(or label_7

;; def=StlcStrongDbParSubst.fst(123,22-179,45); use=StlcCbvDbParSubst.fst(47,40-47,51)
(= (StlcStrongDbParSubst.EVar (Prims.op_Addition @x0
(BoxInt 1)))
(StlcCbvDbParSubst.sub_inc_above x_bb4e1c9af0265270f8e7a5f250f730e2_0
@x0))
)


;; def=StlcStrongDbParSubst.fst(123,31-179,62); use=StlcCbvDbParSubst.fst(47,40-47,51)
(or label_8

;; def=StlcStrongDbParSubst.fst(123,31-179,62); use=StlcCbvDbParSubst.fst(47,40-47,51)
(= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
x_bb4e1c9af0265270f8e7a5f250f730e2_0)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
x_d7a08fe95d0edeffd31477bbf4345664_1)
(Prims.op_Addition @x0
(BoxInt 1))))
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_1
@x0)))
)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.weakening, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, binder_x_aa529169e17553eab2fd2cf8e2e00d43_5, binder_x_bb4e1c9af0265270f8e7a5f250f730e2_0, binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_4, data_elim_StlcStrongDbParSubst.EVar, disc_equation_FStar.Pervasives.Native.Some, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_Prims.nat, equation_StlcCbvDbParSubst.extend_gen, equation_StlcCbvDbParSubst.sub_inc_above, equation_StlcStrongDbParSubst.extend, equation_StlcStrongDbParSubst.var, fuel_guarded_inversion_StlcStrongDbParSubst.typ, fuel_guarded_inversion_StlcStrongDbParSubst.typing, function_token_typing_Prims.__cache_version_number__, function_token_typing_StlcCbvDbParSubst.extend_gen, int_inversion, interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0, interpretation_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3, primitive_Prims.op_Addition, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c5d162fb39ed27e3122cb49f4606e8da, typing_StlcCbvDbParSubst.sub_inc_above, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec weakening


; <Start encoding let rec weakening>

(declare-fun StlcCbvDbParSubst.weakening__122 (Term Term Term Term Term Term) Term)

(declare-fun StlcCbvDbParSubst.weakening__122@tok () Term)

; </end encoding let rec weakening>


; encoding sigelt val StlcCbvDbParSubst.step


; <Skipped val StlcCbvDbParSubst.step/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(40,4-40,9); use=StlcStrongDbParSubst.fst(40,4-40,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcStrongDbParSubst.uu___is_EUnit @x0)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_EUnit @x0))
:qid typing_StlcStrongDbParSubst.uu___is_EUnit))

:named typing_StlcStrongDbParSubst.uu___is_EUnit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.is_value; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(144,4-144,12); use=StlcStrongDbParSubst.fst(144,4-144,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcStrongDbParSubst.is_value @x0)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.is_value @x0))
:qid typing_StlcStrongDbParSubst.is_value))

:named typing_StlcStrongDbParSubst.is_value))
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! 
;; def=Prims.fst(528,4-528,13); use=Prims.fst(528,4-528,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_BarBar @x0
@x1)
(BoxBool (or (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_BarBar @x0
@x1))
:qid primitive_Prims.op_BarBar))

:named primitive_Prims.op_BarBar))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.is_value
;;; Fact-ids: Name StlcStrongDbParSubst.is_value; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(144,4-144,12); use=StlcStrongDbParSubst.fst(144,4-144,12)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.is_value @x0)
(Prims.op_BarBar (StlcStrongDbParSubst.uu___is_ELam @x0)
(StlcStrongDbParSubst.uu___is_EUnit @x0)))
 

:pattern ((StlcStrongDbParSubst.is_value @x0))
:qid equation_StlcStrongDbParSubst.is_value))

:named equation_StlcStrongDbParSubst.is_value))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_EUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(40,4-40,9); use=StlcStrongDbParSubst.fst(40,4-40,9)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.uu___is_EUnit @x0)
(BoxBool (is-StlcStrongDbParSubst.EUnit @x0)))
 

:pattern ((StlcStrongDbParSubst.uu___is_EUnit @x0))
:qid disc_equation_StlcStrongDbParSubst.EUnit))

:named disc_equation_StlcStrongDbParSubst.EUnit))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(52,2-67,13)

;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_0 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_0
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_0
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_0))
(declare-fun Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee
Tm_type)
:named refinement_kinding_Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(52,2-67,13)

;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(52,2-67,13)
(Valid 
;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(52,2-67,13)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x1
x_00c2c856e702f50718a37c394bb4dba3_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee))
:qid refinement_interpretation_Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee))

:named refinement_interpretation_Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_7fd6688e05c628b8b93c2e5b19c24fee))
(declare-fun StlcCbvDbParSubst.step (Term) Term)

;;;;;;;;;;;;;;;;_: _: StlcStrongDbParSubst.exp{_ << e} -> FStar.Pervasives.Native.option StlcStrongDbParSubst.exp
(declare-fun Tm_arrow_8784786cf55b142fc3abd13887470841 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_8784786cf55b142fc3abd13887470841
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_8784786cf55b142fc3abd13887470841
Tm_type)
:named kinding_Tm_arrow_8784786cf55b142fc3abd13887470841))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(50,22-67,13); use=StlcCbvDbParSubst.fst(51,8-67,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_8784786cf55b142fc3abd13887470841)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_8784786cf55b142fc3abd13887470841))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_8784786cf55b142fc3abd13887470841))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_8784786cf55b142fc3abd13887470841))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8784786cf55b142fc3abd13887470841
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(50,22-67,13); use=StlcCbvDbParSubst.fst(51,8-67,13)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_8784786cf55b142fc3abd13887470841)
(and 
;; def=StlcCbvDbParSubst.fst(50,22-67,13); use=StlcCbvDbParSubst.fst(51,8-67,13)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee)
(HasType (ApplyTT @x0
@x1)
(FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_8784786cf55b142fc3abd13887470841.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_8784786cf55b142fc3abd13887470841))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_8784786cf55b142fc3abd13887470841))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_8784786cf55b142fc3abd13887470841))
(declare-fun StlcCbvDbParSubst.step@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@x0 Term))
 (! (= (ApplyTT StlcCbvDbParSubst.step@tok
@x0)
(StlcCbvDbParSubst.step @x0))
 

:pattern ((ApplyTT StlcCbvDbParSubst.step@tok
@x0))
:qid token_correspondence_StlcCbvDbParSubst.step))

:named token_correspondence_StlcCbvDbParSubst.step))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.step@tok
Tm_arrow_8784786cf55b142fc3abd13887470841))

;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@x1 Term))
 (! (= (ApplyTT StlcCbvDbParSubst.step@tok
@x1)
(StlcCbvDbParSubst.step @x1))
 

:pattern ((StlcCbvDbParSubst.step @x1))
:qid function_token_typing_StlcCbvDbParSubst.step.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.step@tok))
:qid function_token_typing_StlcCbvDbParSubst.step))

:named function_token_typing_StlcCbvDbParSubst.step))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_7fd6688e05c628b8b93c2e5b19c24fee)
(HasType (StlcCbvDbParSubst.step @x0)
(FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))
 

:pattern ((StlcCbvDbParSubst.step @x0))
:qid typing_StlcCbvDbParSubst.step))

:named typing_StlcCbvDbParSubst.step))
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)).
;   (forall (x: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp).
;       {:pattern Prims.guard_free (k x)}
;       Prims.auto_squash (k x)) ==>
;   (forall (b: StlcStrongDbParSubst.exp) (b: StlcStrongDbParSubst.exp).
;       e == StlcStrongDbParSubst.EApp b b ==>
;       (forall (k: Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)).
;           (forall (x: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp).
;               {:pattern Prims.guard_free (k x)}
;               Prims.auto_squash (k x)) ==>
;           (StlcStrongDbParSubst.is_value b == true ==>
;             (forall (k: Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)).
;                 (forall (x: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp).
;                     {:pattern Prims.guard_free (k x)}
;                     Prims.auto_squash (k x)) ==>
;                 ~(StlcStrongDbParSubst.is_value b = true) ==>
;                 (forall (b: Prims.bool).
;                     StlcStrongDbParSubst.is_value b == b ==>
;                     b << e /\
;                     (forall (any_result: StlcStrongDbParSubst.exp).
;                         b == any_result ==>
;                         (forall (any_result:
;                             FStar.Pervasives.Native.option StlcStrongDbParSubst.exp).
;                             StlcCbvDbParSubst.step b == any_result ==>
;                             (forall (k:
;                                 Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp
;                                     )).
;                                 (forall (x: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)
;                                   .
;                                     {:pattern Prims.guard_free (k x)}
;                                     Prims.auto_squash (k x)) ==>
;                                 ~(Some? (StlcCbvDbParSubst.step b)) /\
;                                 ~(None? (StlcCbvDbParSubst.step b)) ==>
;                                 Prims.l_False)))))) /\
;           (~(StlcStrongDbParSubst.is_value b = true) ==>
;             (forall (b: Prims.bool).
;                 StlcStrongDbParSubst.is_value b == b ==>
;                 b << e /\
;                 (forall (any_result: StlcStrongDbParSubst.exp).
;                     b == any_result ==>
;                     (forall (any_result: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp).
;                         StlcCbvDbParSubst.step b == any_result ==>
;                         (forall (k:
;                             Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp
;                               )).
;                             (forall (x: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp).
;                                 {:pattern Prims.guard_free (k x)}
;                                 Prims.auto_squash (k x)) ==>
;                             ~(Some? (StlcCbvDbParSubst.step b)) /\
;                             ~(None? (StlcCbvDbParSubst.step b)) ==>
;                             Prims.l_False)))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec step`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(51,13-53,14); use=StlcCbvDbParSubst.fst(52,8-53,14)
(= x_00c2c856e702f50718a37c394bb4dba3_0
(StlcStrongDbParSubst.EApp @x1
@x2))
)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(ApplyTT @x3
@x4)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid @query.5))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(52,2-67,13)
(and (implies 
;; def=StlcCbvDbParSubst.fst(54,9-54,20); use=StlcCbvDbParSubst.fst(54,9-54,20)
(= (StlcStrongDbParSubst.is_value @x1)
(BoxBool true))

(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x5 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(ApplyTT @x4
@x5)
)

 

:pattern ((ApplyTT @x4
@x5))
:qid @query.7))


;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(52,2-67,13)
(not 
;; def=StlcCbvDbParSubst.fst(55,11-55,22); use=StlcCbvDbParSubst.fst(55,11-55,22)
(= (StlcStrongDbParSubst.is_value @x2)
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.bool)

;; def=StlcCbvDbParSubst.fst(55,11-62,28); use=StlcCbvDbParSubst.fst(55,11-62,28)
(= (StlcStrongDbParSubst.is_value @x2)
@x5)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(52,2-67,13)
(and 
;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(60,22-60,24)
(or label_1

;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(60,22-60,24)
(Valid 
;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(60,22-60,24)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_00c2c856e702f50718a37c394bb4dba3_0)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
StlcStrongDbParSubst.exp)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(52,2-67,13)
(= @x2
@x6)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.option StlcStrongDbParSubst.exp))

;; def=StlcCbvDbParSubst.fst(60,16-60,25); use=StlcCbvDbParSubst.fst(60,16-60,25)
(= (StlcCbvDbParSubst.step @x2)
@x7)
)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x9 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(ApplyTT @x8
@x9)
)

 

:pattern ((ApplyTT @x8
@x9))
:qid @query.12))


;; def=StlcCbvDbParSubst.fst(60,16-60,25); use=StlcCbvDbParSubst.fst(60,16-60,25)
(not 
;; def=StlcCbvDbParSubst.fst(60,16-60,25); use=StlcCbvDbParSubst.fst(60,16-60,25)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2)))
)


;; def=StlcCbvDbParSubst.fst(60,16-60,25); use=StlcCbvDbParSubst.fst(60,16-60,25)
(not 
;; def=StlcCbvDbParSubst.fst(60,16-60,25); use=StlcCbvDbParSubst.fst(60,16-60,25)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2)))
)
)
label_2)
 
;;no pats
:qid @query.11)))
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.6)))
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(52,2-67,13)
(not 
;; def=StlcCbvDbParSubst.fst(54,9-54,20); use=StlcCbvDbParSubst.fst(54,9-54,20)
(= (StlcStrongDbParSubst.is_value @x1)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=StlcCbvDbParSubst.fst(54,9-66,27); use=StlcCbvDbParSubst.fst(54,9-66,27)
(= (StlcStrongDbParSubst.is_value @x1)
@x4)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(52,2-67,13)
(and 
;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(64,21-64,23)
(or label_3

;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(64,21-64,23)
(Valid 
;; def=StlcCbvDbParSubst.fst(52,2-67,13); use=StlcCbvDbParSubst.fst(64,21-64,23)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x1
x_00c2c856e702f50718a37c394bb4dba3_0)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
StlcStrongDbParSubst.exp)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(52,2-67,13)
(= @x1
@x5)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.Pervasives.Native.option StlcStrongDbParSubst.exp))

;; def=StlcCbvDbParSubst.fst(64,15-64,24); use=StlcCbvDbParSubst.fst(64,15-64,24)
(= (StlcCbvDbParSubst.step @x1)
@x6)
)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(52,2-67,13)
(forall ((@x8 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(52,2-67,13)
(ApplyTT @x7
@x8)
)

 

:pattern ((ApplyTT @x7
@x8))
:qid @query.17))


;; def=StlcCbvDbParSubst.fst(64,15-64,24); use=StlcCbvDbParSubst.fst(64,15-64,24)
(not 
;; def=StlcCbvDbParSubst.fst(64,15-64,24); use=StlcCbvDbParSubst.fst(64,15-64,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1)))
)


;; def=StlcCbvDbParSubst.fst(64,15-64,24); use=StlcCbvDbParSubst.fst(64,15-64,24)
(not 
;; def=StlcCbvDbParSubst.fst(64,15-64,24); use=StlcCbvDbParSubst.fst(64,15-64,24)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1)))
)
)
label_4)
 
;;no pats
:qid @query.16)))
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
))
)
 
;;no pats
:qid @query.4)))
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.step, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3, binder_x_00c2c856e702f50718a37c394bb4dba3_0, equality_tok_StlcStrongDbParSubst.EUnit@tok, kinding_StlcStrongDbParSubst.exp@tok, lemma_FStar.Pervasives.invertOption, subterm_ordering_StlcStrongDbParSubst.EApp, typing_tok_StlcStrongDbParSubst.EUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec step


; <Start encoding let rec step>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcCbvDbParSubst.step.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcCbvDbParSubst.step.fuel_instrumented_token () Term)
(declare-fun StlcCbvDbParSubst.step (Term) Term)
(declare-fun StlcCbvDbParSubst.step@tok () Term)
;;;;;;;;;;;;;;;;e: StlcStrongDbParSubst.exp -> FStar.Pervasives.Native.option StlcStrongDbParSubst.exp
(declare-fun Tm_arrow_0a4a419c8b7ac1c6c9310afec0c2e7a1 () Term)

; </end encoding let rec step>


; encoding sigelt val StlcCbvDbParSubst.progress


; <Skipped val StlcCbvDbParSubst.progress/>

;;;;;;;;;;;;;;;;typing_Tm_abs_3348a440425b62f388c69bf898593dad
;;; Fact-ids: Name StlcStrongDbParSubst.sub_beta; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(86,26-87,43); use=StlcStrongDbParSubst.fst(86,26-87,43)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_3348a440425b62f388c69bf898593dad @x0)
Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb)
 

:pattern ((Tm_abs_3348a440425b62f388c69bf898593dad @x0))
:qid typing_Tm_abs_3348a440425b62f388c69bf898593dad))

:named typing_Tm_abs_3348a440425b62f388c69bf898593dad))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TyApp; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.env)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing @x0
@x1
@x2)))
(HasType (StlcStrongDbParSubst.uu___is_TyApp @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_TyApp @x0
@x1
@x2
@x3))
:qid typing_StlcStrongDbParSubst.uu___is_TyApp))

:named typing_StlcStrongDbParSubst.uu___is_TyApp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.sub_beta; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(86,4-86,12); use=StlcStrongDbParSubst.fst(86,4-86,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcStrongDbParSubst.sub_beta @x0)
StlcStrongDbParSubst.sub))
 

:pattern ((StlcStrongDbParSubst.sub_beta @x0))
:qid typing_StlcStrongDbParSubst.sub_beta))

:named typing_StlcStrongDbParSubst.sub_beta))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.empty; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(113,4-113,9); use=StlcStrongDbParSubst.fst(113,4-113,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (StlcStrongDbParSubst.empty @u0)
StlcStrongDbParSubst.env)
 

:pattern ((StlcStrongDbParSubst.empty @u0))
:qid typing_StlcStrongDbParSubst.empty))

:named typing_StlcStrongDbParSubst.empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.step; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcCbvDbParSubst.step @x0)
(FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))
 

:pattern ((StlcCbvDbParSubst.step @x0))
:qid typing_StlcCbvDbParSubst.step))

:named typing_StlcCbvDbParSubst.step))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StlcCbvDbParSubst.step; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)
(HasType (StlcCbvDbParSubst.step.fuel_instrumented @u0
@x1)
(FStar.Pervasives.Native.option StlcStrongDbParSubst.exp)))
 

:pattern ((StlcCbvDbParSubst.step.fuel_instrumented @u0
@x1))
:qid token_correspondence_StlcCbvDbParSubst.step.fuel_instrumented))

:named token_correspondence_StlcCbvDbParSubst.step.fuel_instrumented))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_3348a440425b62f388c69bf898593dad
;;; Fact-ids: Name StlcStrongDbParSubst.sub_beta; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(86,26-87,43); use=StlcStrongDbParSubst.fst(86,26-87,43)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_3348a440425b62f388c69bf898593dad @x1)
@x0)
(let ((@lb2 (Prims.op_Equality Prims.int
@x0
(BoxInt 0))))
(ite (= @lb2
(BoxBool true))
@x1
(StlcStrongDbParSubst.EVar (Prims.op_Subtraction @x0
(BoxInt 1))))))
 

:pattern ((ApplyTT (Tm_abs_3348a440425b62f388c69bf898593dad @x1)
@x0))
:qid interpretation_Tm_abs_3348a440425b62f388c69bf898593dad))

:named interpretation_Tm_abs_3348a440425b62f388c69bf898593dad))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StlcCbvDbParSubst.step
;;; Fact-ids: Name StlcCbvDbParSubst.step; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)
(= (StlcCbvDbParSubst.step.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (is-StlcStrongDbParSubst.EApp @lb2)
(let ((@lb3 (StlcStrongDbParSubst.is_value (StlcStrongDbParSubst.EApp__0 @lb2))))
(ite (= @lb3
(BoxBool true))
(let ((@lb4 (StlcStrongDbParSubst.is_value (StlcStrongDbParSubst.EApp__1 @lb2))))
(ite (= @lb4
(BoxBool true))
(let ((@lb5 (StlcStrongDbParSubst.EApp__0 @lb2)))
(ite (is-StlcStrongDbParSubst.ELam @lb5)
(FStar.Pervasives.Native.Some StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_beta (StlcStrongDbParSubst.EApp__1 @lb2))
(StlcStrongDbParSubst.ELam__1 @lb5)))
(FStar.Pervasives.Native.None StlcStrongDbParSubst.exp)))
(let ((@lb5 (StlcCbvDbParSubst.step.fuel_instrumented @u0
(StlcStrongDbParSubst.EApp__1 @lb2))))
(ite (is-FStar.Pervasives.Native.Some @lb5)
(FStar.Pervasives.Native.Some StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.EApp (StlcStrongDbParSubst.EApp__0 @lb2)
(FStar.Pervasives.Native.Some_v @lb5)))
(ite (is-FStar.Pervasives.Native.None @lb5)
(FStar.Pervasives.Native.None StlcStrongDbParSubst.exp)
Tm_unit)))))
(let ((@lb4 (StlcCbvDbParSubst.step.fuel_instrumented @u0
(StlcStrongDbParSubst.EApp__0 @lb2))))
(ite (is-FStar.Pervasives.Native.Some @lb4)
(FStar.Pervasives.Native.Some StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.EApp (FStar.Pervasives.Native.Some_v @lb4)
(StlcStrongDbParSubst.EApp__1 @lb2)))
(ite (is-FStar.Pervasives.Native.None @lb4)
(FStar.Pervasives.Native.None StlcStrongDbParSubst.exp)
Tm_unit)))))
(FStar.Pervasives.Native.None StlcStrongDbParSubst.exp)))))
 :weight 0


:pattern ((StlcCbvDbParSubst.step.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_StlcCbvDbParSubst.step.fuel_instrumented))

:named equation_with_fuel_StlcCbvDbParSubst.step.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.sub_beta
;;; Fact-ids: Name StlcStrongDbParSubst.sub_beta; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(86,4-86,12); use=StlcStrongDbParSubst.fst(86,4-86,12)
(forall ((@x0 Term))
 (! (= (StlcStrongDbParSubst.sub_beta @x0)
(Tm_abs_3348a440425b62f388c69bf898593dad @x0))
 

:pattern ((StlcStrongDbParSubst.sub_beta @x0))
:qid equation_StlcStrongDbParSubst.sub_beta))

:named equation_StlcStrongDbParSubst.sub_beta))
;;;;;;;;;;;;;;;;Equation for StlcStrongDbParSubst.empty
;;; Fact-ids: Name StlcStrongDbParSubst.empty; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(113,4-113,9); use=StlcStrongDbParSubst.fst(113,4-113,9)
(forall ((@x0 Term))
 (! (= (ApplyTT (StlcStrongDbParSubst.empty Dummy_value)
@x0)
(FStar.Pervasives.Native.None StlcStrongDbParSubst.typ))
 

:pattern ((ApplyTT (StlcStrongDbParSubst.empty Dummy_value)
@x0))
:qid equation_StlcStrongDbParSubst.empty))

:named equation_StlcStrongDbParSubst.empty))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TyApp; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(130,4-130,9); use=StlcStrongDbParSubst.fst(130,4-130,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StlcStrongDbParSubst.uu___is_TyApp @x0
@x1
@x2
@x3)
(BoxBool (is-StlcStrongDbParSubst.TyApp @x3)))
 

:pattern ((StlcStrongDbParSubst.uu___is_TyApp @x0
@x1
@x2
@x3))
:qid disc_equation_StlcStrongDbParSubst.TyApp))

:named disc_equation_StlcStrongDbParSubst.TyApp))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StlcCbvDbParSubst.step; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (StlcCbvDbParSubst.step.fuel_instrumented (SFuel @u0)
@x1)
(StlcCbvDbParSubst.step.fuel_instrumented ZFuel
@x1))
 

:pattern ((StlcCbvDbParSubst.step.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_StlcCbvDbParSubst.step.fuel_instrumented))

:named @fuel_irrelevance_StlcCbvDbParSubst.step.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StlcCbvDbParSubst.step; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(51,8-51,12); use=StlcCbvDbParSubst.fst(51,8-51,12)
(forall ((@x0 Term))
 (! (= (StlcCbvDbParSubst.step @x0)
(StlcCbvDbParSubst.step.fuel_instrumented MaxFuel
@x0))
 

:pattern ((StlcCbvDbParSubst.step @x0))
:qid @fuel_correspondence_StlcCbvDbParSubst.step.fuel_instrumented))

:named @fuel_correspondence_StlcCbvDbParSubst.step.fuel_instrumented))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(72,2-72,66)

;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_0 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_0
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_0
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_0))
;;;;;;;;;;;;;;;;t : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_1
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_1
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_1))
;;;;;;;;;;;;;;;;h : StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t (StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t)
(declare-fun x_d9e38d5f55016f34266b7ac1885a774d_2 () Term)
;;;;;;;;;;;;;;;;binder_x_d9e38d5f55016f34266b7ac1885a774d_2
;;; Fact-ids: 
(assert (! (HasType x_d9e38d5f55016f34266b7ac1885a774d_2
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1))
:named binder_x_d9e38d5f55016f34266b7ac1885a774d_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.progress (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.progress@tok () Term)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       StlcStrongDbParSubst.is_value e \/ Some? (StlcCbvDbParSubst.step e) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (TyApp? h == true ==>
;         (~(TyApp? h) ==> Prims.l_False) /\
;         (forall (b: StlcStrongDbParSubst.env)
;             (b: StlcStrongDbParSubst.exp)
;             (b: StlcStrongDbParSubst.exp)
;             (b: StlcStrongDbParSubst.typ)
;             (b: StlcStrongDbParSubst.typ)
;             (b: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b))
;             (b: StlcStrongDbParSubst.typing b b b).
;             h == StlcStrongDbParSubst.TyApp b b ==>
;             b == StlcStrongDbParSubst.empty /\ b << h /\
;             (forall (any_result: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b)).
;                 b == any_result ==>
;                 (forall (pure_result: Prims.unit).
;                     StlcStrongDbParSubst.is_value b \/ Some? (StlcCbvDbParSubst.step b) ==>
;                     b == StlcStrongDbParSubst.empty /\ b << h /\
;                     (forall (any_result: StlcStrongDbParSubst.typing b b b).
;                         b == any_result ==>
;                         (forall (pure_result: Prims.unit).
;                             StlcStrongDbParSubst.is_value b \/ Some? (StlcCbvDbParSubst.step b) ==>
;                             k pure_result)))))) /\
;       (~(TyApp? h = true) ==>
;         (forall (b: Prims.bool). TyApp? h == b ==> (forall (any_result: Prims.unit). k any_result)))
;   )


; Context: While encoding a query
; While typechecking the top-level declaration `let rec progress`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StlcCbvDbParSubst.fst(72,2-72,66); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=StlcCbvDbParSubst.fst(70,21-70,53); use=StlcCbvDbParSubst.fst(72,2-72,66)
(or label_2

;; def=StlcCbvDbParSubst.fst(70,22-70,32); use=StlcCbvDbParSubst.fst(72,2-72,66)
(BoxBool_proj_0 (StlcStrongDbParSubst.is_value x_00c2c856e702f50718a37c394bb4dba3_0))


;; def=StlcCbvDbParSubst.fst(70,36-70,52); use=StlcCbvDbParSubst.fst(72,2-72,66)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(72,2-72,66)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(72,2-72,66)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(72,2-72,66)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(72,2-72,66)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(72,2-72,66)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(72,2-72,66)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(72,2-72,66)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(72,2-72,66)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(72,2-72,66)
(and (implies 
;; def=StlcCbvDbParSubst.fst(72,5-72,13); use=StlcCbvDbParSubst.fst(72,5-72,13)
(= (StlcStrongDbParSubst.uu___is_TyApp (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1
x_d9e38d5f55016f34266b7ac1885a774d_2)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(72,2-72,66)
(and (implies 
;; def=StlcCbvDbParSubst.fst(72,23-72,34); use=StlcCbvDbParSubst.fst(72,23-72,34)
(not 
;; def=StlcCbvDbParSubst.fst(72,23-72,34); use=StlcCbvDbParSubst.fst(72,23-72,34)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1
x_d9e38d5f55016f34266b7ac1885a774d_2))
)

label_3)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x6 Term))
 (! (implies (HasType @x6
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(StlcStrongDbParSubst.typing @x2
@x3
(StlcStrongDbParSubst.TArr @x5
@x6)))

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StlcStrongDbParSubst.typing @x2
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(72,23-72,34); use=StlcCbvDbParSubst.fst(72,23-72,34)
(= x_d9e38d5f55016f34266b7ac1885a774d_2
(StlcStrongDbParSubst.TyApp @x2
@x3
@x4
@x5
@x6
@x7
@x8))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(72,2-72,66)
(and 
;; def=StlcCbvDbParSubst.fst(69,44-72,31); use=StlcCbvDbParSubst.fst(72,51-72,53)
(or label_4

;; def=StlcCbvDbParSubst.fst(69,44-72,31); use=StlcCbvDbParSubst.fst(72,51-72,53)
(= @x2
(StlcStrongDbParSubst.empty Dummy_value))
)


;; def=StlcCbvDbParSubst.fst(72,2-72,66); use=StlcCbvDbParSubst.fst(72,51-72,53)
(or label_5

;; def=StlcCbvDbParSubst.fst(72,2-72,66); use=StlcCbvDbParSubst.fst(72,51-72,53)
(Valid 
;; def=StlcCbvDbParSubst.fst(72,2-72,66); use=StlcCbvDbParSubst.fst(72,51-72,53)
(Prims.precedes (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
(StlcStrongDbParSubst.TArr @x5
@x6))
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1)
@x7
x_d9e38d5f55016f34266b7ac1885a774d_2)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StlcStrongDbParSubst.typing @x2
@x3
(StlcStrongDbParSubst.TArr @x5
@x6)))

;; def=StlcCbvDbParSubst.fst(69,35-72,31); use=StlcCbvDbParSubst.fst(72,2-72,66)
(= @x7
@x9)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(72,42-72,50)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=StlcCbvDbParSubst.fst(70,21-70,53); use=StlcCbvDbParSubst.fst(72,42-72,50)
(or 
;; def=StlcCbvDbParSubst.fst(70,22-70,32); use=StlcCbvDbParSubst.fst(72,42-72,50)
(BoxBool_proj_0 (StlcStrongDbParSubst.is_value @x3))


;; def=StlcCbvDbParSubst.fst(70,36-70,52); use=StlcCbvDbParSubst.fst(72,42-72,50)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x3)))
)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(72,2-72,66)
(and 
;; def=StlcCbvDbParSubst.fst(69,44-72,31); use=StlcCbvDbParSubst.fst(72,64-72,66)
(or label_6

;; def=StlcCbvDbParSubst.fst(69,44-72,31); use=StlcCbvDbParSubst.fst(72,64-72,66)
(= @x2
(StlcStrongDbParSubst.empty Dummy_value))
)


;; def=StlcCbvDbParSubst.fst(72,2-72,66); use=StlcCbvDbParSubst.fst(72,64-72,66)
(or label_7

;; def=StlcCbvDbParSubst.fst(72,2-72,66); use=StlcCbvDbParSubst.fst(72,64-72,66)
(Valid 
;; def=StlcCbvDbParSubst.fst(72,2-72,66); use=StlcCbvDbParSubst.fst(72,64-72,66)
(Prims.precedes (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x4
@x5)
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1)
@x8
x_d9e38d5f55016f34266b7ac1885a774d_2)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(StlcStrongDbParSubst.typing @x2
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(69,35-72,34); use=StlcCbvDbParSubst.fst(72,2-72,66)
(= @x8
@x11)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(72,55-72,63)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=StlcCbvDbParSubst.fst(70,21-70,53); use=StlcCbvDbParSubst.fst(72,55-72,63)
(or 
;; def=StlcCbvDbParSubst.fst(70,22-70,32); use=StlcCbvDbParSubst.fst(72,55-72,63)
(BoxBool_proj_0 (StlcStrongDbParSubst.is_value @x4))


;; def=StlcCbvDbParSubst.fst(70,36-70,52); use=StlcCbvDbParSubst.fst(72,55-72,63)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x4)))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(72,55-72,63)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(72,55-72,63)
(ApplyTT @x1
@x12)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(72,2-72,66)
(not 
;; def=StlcCbvDbParSubst.fst(72,5-72,13); use=StlcCbvDbParSubst.fst(72,5-72,13)
(= (StlcStrongDbParSubst.uu___is_TyApp (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1
x_d9e38d5f55016f34266b7ac1885a774d_2)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Prims.bool)

;; def=StlcCbvDbParSubst.fst(72,2-72,66); use=StlcCbvDbParSubst.fst(72,2-72,66)
(= (StlcStrongDbParSubst.uu___is_TyApp (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1
x_d9e38d5f55016f34266b7ac1885a774d_2)
@x2)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(72,2-72,66)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(72,2-72,66)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(72,2-72,66)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.progress, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcCbvDbParSubst.step.fuel_instrumented, @fuel_irrelevance_StlcCbvDbParSubst.step.fuel_instrumented, @query, StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, binder_x_00c2c856e702f50718a37c394bb4dba3_0, binder_x_d9e38d5f55016f34266b7ac1885a774d_2, binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_1, bool_inversion, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_StlcStrongDbParSubst.EApp, constructor_distinct_StlcStrongDbParSubst.ELam, constructor_distinct_StlcStrongDbParSubst.EUnit, constructor_distinct_StlcStrongDbParSubst.EVar, constructor_distinct_StlcStrongDbParSubst.TArr, constructor_distinct_StlcStrongDbParSubst.TUnit, data_elim_StlcStrongDbParSubst.EVar, data_elim_StlcStrongDbParSubst.TyApp, data_elim_StlcStrongDbParSubst.TyVar, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, disc_equation_StlcStrongDbParSubst.ELam, disc_equation_StlcStrongDbParSubst.EUnit, disc_equation_StlcStrongDbParSubst.TyApp, equality_tok_StlcStrongDbParSubst.EUnit@tok, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_Prims.nat, equation_StlcStrongDbParSubst.empty, equation_StlcStrongDbParSubst.is_value, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcCbvDbParSubst.step.fuel_instrumented, fuel_guarded_inversion_StlcStrongDbParSubst.exp, fuel_guarded_inversion_StlcStrongDbParSubst.typ, fuel_guarded_inversion_StlcStrongDbParSubst.typing, int_inversion, kinding_StlcStrongDbParSubst.exp@tok, lemma_FStar.Pervasives.invertOption, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, projection_inverse_StlcStrongDbParSubst.EApp__0, projection_inverse_StlcStrongDbParSubst.EApp__1, projection_inverse_StlcStrongDbParSubst.EVar__0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8, subterm_ordering_StlcStrongDbParSubst.TyApp, typing_StlcCbvDbParSubst.step, typing_StlcStrongDbParSubst.is_value, typing_tok_StlcStrongDbParSubst.EUnit@tok, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec progress


; <Start encoding let rec progress>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.progress (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.progress@tok () Term)

; </end encoding let rec progress>


; encoding sigelt val StlcCbvDbParSubst.typing_extensional


; <Start encoding val StlcCbvDbParSubst.typing_extensional>


(declare-fun Tm_abs_98a03214e043bd02fb86964ce533ed67 () Term)
(declare-fun Tm_refine_1c415a41a773302054dcc43dd4ed4815 (Term) Term)
(declare-fun StlcCbvDbParSubst.typing_extensional (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;h: StlcStrongDbParSubst.typing g e t ->     g': StlcStrongDbParSubst.env{FStar.FunctionalExtensionality.feq g g'}   -> Prims.Tot (StlcStrongDbParSubst.typing g' e t)
(declare-fun Tm_arrow_958a84d07de2f03e711d1ee8c9d0c1f0 () Term)
(declare-fun StlcCbvDbParSubst.typing_extensional@tok () Term)

; </end encoding val StlcCbvDbParSubst.typing_extensional>

;;;;;;;;;;;;;;;;typing_Tm_abs_98a03214e043bd02fb86964ce533ed67
;;; Fact-ids: Name StlcCbvDbParSubst.typing_extensional; Namespace StlcCbvDbParSubst
(assert (! (HasType Tm_abs_98a03214e043bd02fb86964ce533ed67
Tm_arrow_0220d49111608e207f00570037ebc3ca)
:named typing_Tm_abs_98a03214e043bd02fb86964ce533ed67))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TyVar; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(121,4-121,9); use=StlcStrongDbParSubst.fst(121,4-121,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.env)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing @x0
@x1
@x2)))
(HasType (StlcStrongDbParSubst.uu___is_TyVar @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_TyVar @x0
@x1
@x2
@x3))
:qid typing_StlcStrongDbParSubst.uu___is_TyVar))

:named typing_StlcStrongDbParSubst.uu___is_TyVar))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(138,4-138,10); use=StlcStrongDbParSubst.fst(138,4-138,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.env)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing @x0
@x1
@x2)))
(HasType (StlcStrongDbParSubst.uu___is_TyUnit @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_TyUnit @x0
@x1
@x2
@x3))
:qid typing_StlcStrongDbParSubst.uu___is_TyUnit))

:named typing_StlcStrongDbParSubst.uu___is_TyUnit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TyLam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.env)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing @x0
@x1
@x2)))
(HasType (StlcStrongDbParSubst.uu___is_TyLam @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((StlcStrongDbParSubst.uu___is_TyLam @x0
@x1
@x2
@x3))
:qid typing_StlcStrongDbParSubst.uu___is_TyLam))

:named typing_StlcStrongDbParSubst.uu___is_TyLam))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_98a03214e043bd02fb86964ce533ed67
;;; Fact-ids: Name StlcCbvDbParSubst.typing_extensional; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(110,22-110,34); use=StlcStrongDbParSubst.fst(110,22-110,34)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_98a03214e043bd02fb86964ce533ed67
@x0)
(FStar.Pervasives.Native.option StlcStrongDbParSubst.typ))
 

:pattern ((ApplyTT Tm_abs_98a03214e043bd02fb86964ce533ed67
@x0))
:qid interpretation_Tm_abs_98a03214e043bd02fb86964ce533ed67))

:named interpretation_Tm_abs_98a03214e043bd02fb86964ce533ed67))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TyVar; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(121,4-121,9); use=StlcStrongDbParSubst.fst(121,4-121,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StlcStrongDbParSubst.uu___is_TyVar @x0
@x1
@x2
@x3)
(BoxBool (is-StlcStrongDbParSubst.TyVar @x3)))
 

:pattern ((StlcStrongDbParSubst.uu___is_TyVar @x0
@x1
@x2
@x3))
:qid disc_equation_StlcStrongDbParSubst.TyVar))

:named disc_equation_StlcStrongDbParSubst.TyVar))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TyUnit; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(138,4-138,10); use=StlcStrongDbParSubst.fst(138,4-138,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StlcStrongDbParSubst.uu___is_TyUnit @x0
@x1
@x2
@x3)
(BoxBool (is-StlcStrongDbParSubst.TyUnit @x3)))
 

:pattern ((StlcStrongDbParSubst.uu___is_TyUnit @x0
@x1
@x2
@x3))
:qid disc_equation_StlcStrongDbParSubst.TyUnit))

:named disc_equation_StlcStrongDbParSubst.TyUnit))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name StlcStrongDbParSubst.uu___is_TyLam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(124,4-124,9); use=StlcStrongDbParSubst.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (StlcStrongDbParSubst.uu___is_TyLam @x0
@x1
@x2
@x3)
(BoxBool (is-StlcStrongDbParSubst.TyLam @x3)))
 

:pattern ((StlcStrongDbParSubst.uu___is_TyLam @x0
@x1
@x2
@x3))
:qid disc_equation_StlcStrongDbParSubst.TyLam))

:named disc_equation_StlcStrongDbParSubst.TyLam))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(82,2-86,20)

;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_0 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_0
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_0
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_0))
;;;;;;;;;;;;;;;;g : StlcStrongDbParSubst.env (StlcStrongDbParSubst.env)
(declare-fun x_d7a08fe95d0edeffd31477bbf4345664_1 () Term)
;;;;;;;;;;;;;;;;binder_x_d7a08fe95d0edeffd31477bbf4345664_1
;;; Fact-ids: 
(assert (! (HasType x_d7a08fe95d0edeffd31477bbf4345664_1
StlcStrongDbParSubst.env)
:named binder_x_d7a08fe95d0edeffd31477bbf4345664_1))
;;;;;;;;;;;;;;;;t : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_2 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_2
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_2
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_2))
;;;;;;;;;;;;;;;;h : StlcStrongDbParSubst.typing g e t (StlcStrongDbParSubst.typing g e t)
(declare-fun x_5a46e118e90c9e1bd3eb623781c03d15_3 () Term)
;;;;;;;;;;;;;;;;binder_x_5a46e118e90c9e1bd3eb623781c03d15_3
;;; Fact-ids: 
(assert (! (HasType x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2))
:named binder_x_5a46e118e90c9e1bd3eb623781c03d15_3))
;;;;;;;;;;;;;;;;g' : g': StlcStrongDbParSubst.env{FStar.FunctionalExtensionality.feq g g'} (g': StlcStrongDbParSubst.env{FStar.FunctionalExtensionality.feq g g'})
(declare-fun x_68954c3ef788afaa9618aa171f544a7e_4 () Term)


(declare-fun Tm_refine_21f1268484afa29917c4777ed538910e () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_21f1268484afa29917c4777ed538910e
Tm_type)
:named refinement_kinding_Tm_refine_21f1268484afa29917c4777ed538910e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-80,42); use=StlcCbvDbParSubst.fst(81,8-81,26)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_21f1268484afa29917c4777ed538910e)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(81,8-81,26)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(81,8-81,26)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
x_d7a08fe95d0edeffd31477bbf4345664_1
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_21f1268484afa29917c4777ed538910e))
:qid refinement_interpretation_Tm_refine_21f1268484afa29917c4777ed538910e))

:named refinement_interpretation_Tm_refine_21f1268484afa29917c4777ed538910e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_21f1268484afa29917c4777ed538910e
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_21f1268484afa29917c4777ed538910e))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
:named haseqTm_refine_21f1268484afa29917c4777ed538910e))
;;;;;;;;;;;;;;;;binder_x_68954c3ef788afaa9618aa171f544a7e_4
;;; Fact-ids: 
(assert (! (HasType x_68954c3ef788afaa9618aa171f544a7e_4
Tm_refine_21f1268484afa29917c4777ed538910e)
:named binder_x_68954c3ef788afaa9618aa171f544a7e_4))


(declare-fun Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40))

:named refinement_kinding_Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(81,8-81,26)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(81,8-81,26)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
@x2
@x1)
)


;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(82,2-86,20)

;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(82,2-86,20)
(Valid 
;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(82,2-86,20)
(Prims.precedes (StlcStrongDbParSubst.typing @x2
@x3
@x4)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x5
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40))

:named refinement_interpretation_Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40))

:named haseqTm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40))
(declare-fun StlcCbvDbParSubst.typing_extensional__146 (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;h: StlcStrongDbParSubst.typing g e t ->     g': (g': StlcStrongDbParSubst.env{FStar.FunctionalExtensionality.feq g g'}){h << h}   -> Prims.Tot (StlcStrongDbParSubst.typing g' e t)
(declare-fun Tm_arrow_9e33eb5213baca5f03c512b4985d5b25 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_9e33eb5213baca5f03c512b4985d5b25
Tm_type)
:named kinding_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(79,40-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_9e33eb5213baca5f03c512b4985d5b25)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_9e33eb5213baca5f03c512b4985d5b25))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(79,40-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_9e33eb5213baca5f03c512b4985d5b25)
(and 
;; def=StlcCbvDbParSubst.fst(79,40-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
(StlcStrongDbParSubst.typing @x2
@x1
@x3))
(HasType @x5
(Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 @x2
@x1
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
(StlcStrongDbParSubst.typing @x5
@x1
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(79,40-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25.2))


;; def=StlcCbvDbParSubst.fst(79,40-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25.3))


;; def=StlcCbvDbParSubst.fst(79,40-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25.4))


;; def=StlcCbvDbParSubst.fst(79,40-86,20); use=StlcCbvDbParSubst.fst(80,26-86,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
(StlcStrongDbParSubst.typing @x2
@x1
@x3)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25.5))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_9e33eb5213baca5f03c512b4985d5b25))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_9e33eb5213baca5f03c512b4985d5b25))
(declare-fun StlcCbvDbParSubst.typing_extensional__146@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(81,8-81,26); use=StlcCbvDbParSubst.fst(81,8-81,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.typing_extensional__146@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(StlcCbvDbParSubst.typing_extensional__146 @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.typing_extensional__146@tok
@x0)
@x1)
@x2)
@x3)
@x4))
:qid token_correspondence_StlcCbvDbParSubst.typing_extensional__146))

:named token_correspondence_StlcCbvDbParSubst.typing_extensional__146))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(81,8-81,26); use=StlcCbvDbParSubst.fst(81,8-81,26)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.typing_extensional__146@tok
Tm_arrow_9e33eb5213baca5f03c512b4985d5b25))

;; def=StlcCbvDbParSubst.fst(81,8-81,26); use=StlcCbvDbParSubst.fst(81,8-81,26)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.typing_extensional__146@tok
@x1)
@x2)
@x3)
@x4)
@x5)
(StlcCbvDbParSubst.typing_extensional__146 @x1
@x2
@x3
@x4
@x5))
 

:pattern ((StlcCbvDbParSubst.typing_extensional__146 @x1
@x2
@x3
@x4
@x5))
:qid function_token_typing_StlcCbvDbParSubst.typing_extensional__146.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.typing_extensional__146@tok))
:qid function_token_typing_StlcCbvDbParSubst.typing_extensional__146))

:named function_token_typing_StlcCbvDbParSubst.typing_extensional__146))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(81,8-81,26); use=StlcCbvDbParSubst.fst(81,8-81,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing @x1
@x0
@x2))
(HasType @x4
(Tm_refine_7f1c1eda8ac5b25b04872fddb8a0ce40 @x1
@x0
@x2
@x3)))
(HasType (StlcCbvDbParSubst.typing_extensional__146 @x0
@x1
@x2
@x3
@x4)
(StlcStrongDbParSubst.typing @x4
@x0
@x2)))
 

:pattern ((StlcCbvDbParSubst.typing_extensional__146 @x0
@x1
@x2
@x3
@x4))
:qid typing_StlcCbvDbParSubst.typing_extensional__146))

:named typing_StlcCbvDbParSubst.typing_extensional__146))
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)






(declare-fun Tm_refine_29d712a55fe45b232db8f2addbcc9516 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-86,20); use=StlcCbvDbParSubst.fst(84,26-84,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_29d712a55fe45b232db8f2addbcc9516 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_29d712a55fe45b232db8f2addbcc9516 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_29d712a55fe45b232db8f2addbcc9516))

:named refinement_kinding_Tm_refine_29d712a55fe45b232db8f2addbcc9516))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-86,20); use=StlcCbvDbParSubst.fst(84,26-84,44)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_29d712a55fe45b232db8f2addbcc9516 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(84,26-84,44)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(84,26-84,44)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
(StlcStrongDbParSubst.extend @x2
@x3)
@x1)
)


;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(84,26-84,44)

;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(84,26-84,44)
(Valid 
;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(84,26-84,44)
(Prims.precedes (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
@x3)
@x4
@x5)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x6
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_29d712a55fe45b232db8f2addbcc9516 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_29d712a55fe45b232db8f2addbcc9516))

:named refinement_interpretation_Tm_refine_29d712a55fe45b232db8f2addbcc9516))
;;;;;;;;;;;;;;;;haseq for Tm_refine_29d712a55fe45b232db8f2addbcc9516
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-86,20); use=StlcCbvDbParSubst.fst(84,26-84,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_29d712a55fe45b232db8f2addbcc9516 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_29d712a55fe45b232db8f2addbcc9516 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_29d712a55fe45b232db8f2addbcc9516))

:named haseqTm_refine_29d712a55fe45b232db8f2addbcc9516))















; Encoding query formula : forall (k: Prims.pure_post (StlcStrongDbParSubst.typing g' e t)).
;   (forall (x: StlcStrongDbParSubst.typing g' e t). {:pattern Prims.guard_free (k x)}
;       Prims.auto_squash (k x)) ==>
;   (~(TyVar? h) /\ ~(TyLam? h) /\ ~(TyApp? h) /\ ~(TyUnit? h) ==> Prims.l_False) /\
;   (forall (b: StlcStrongDbParSubst.env) (b: x: StlcStrongDbParSubst.var{Some? (b x)}).
;       h == StlcStrongDbParSubst.TyVar b ==>
;       (Some? (b b) ==> Some? (g' b)) /\
;       (forall (any_result: x: StlcStrongDbParSubst.var{Some? (b x)}).
;           b == any_result ==>
;           (forall (any_result:
;               StlcStrongDbParSubst.typing g' (StlcStrongDbParSubst.EVar b) (g' b).v).
;               StlcStrongDbParSubst.TyVar b == any_result ==>
;               StlcStrongDbParSubst.EVar b == e /\ (g' b).v == t))) /\
;   (~(TyVar? h) ==>
;     (forall (b: StlcStrongDbParSubst.env)
;         (b: StlcStrongDbParSubst.typ)
;         (b: StlcStrongDbParSubst.exp)
;         (b: StlcStrongDbParSubst.typ)
;         (b: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b b) b b).
;         h == StlcStrongDbParSubst.TyLam b b ==>
;         FStar.FunctionalExtensionality.feq (StlcStrongDbParSubst.extend b b)
;           (StlcStrongDbParSubst.extend b g') /\ b << h /\
;         (forall (return_val:
;             g':
;             (g':
;               StlcStrongDbParSubst.env
;                 {FStar.FunctionalExtensionality.feq (StlcStrongDbParSubst.extend b b) g'}){b << h}).
;             return_val == StlcStrongDbParSubst.extend b g' ==>
;             (forall (any_result: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b g') b b)
;               .
;                 StlcCbvDbParSubst.typing_extensional b (StlcStrongDbParSubst.extend b g') ==
;                 any_result ==>
;                 (forall (any_result:
;                     StlcStrongDbParSubst.typing g'
;                       (StlcStrongDbParSubst.ELam b b)
;                       (StlcStrongDbParSubst.TArr b b)).
;                     StlcStrongDbParSubst.TyLam b
;                       (StlcCbvDbParSubst.typing_extensional b (StlcStrongDbParSubst.extend b g')) ==
;                     any_result ==>
;                     StlcStrongDbParSubst.ELam b b == e /\ StlcStrongDbParSubst.TArr b b == t)))) /\
;     (~(TyLam? h) ==>
;       (forall (b: StlcStrongDbParSubst.env)
;           (b: StlcStrongDbParSubst.exp)
;           (b: StlcStrongDbParSubst.exp)
;           (b: StlcStrongDbParSubst.typ)
;           (b: StlcStrongDbParSubst.typ)
;           (b: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b))
;           (b: StlcStrongDbParSubst.typing b b b).
;           h == StlcStrongDbParSubst.TyApp b b ==>
;           (FStar.FunctionalExtensionality.feq g g' ==>
;             FStar.FunctionalExtensionality.feq b g' /\ b << h) /\
;           (forall (any_result:
;               g': StlcStrongDbParSubst.env{FStar.FunctionalExtensionality.feq g g'}).
;               g' == any_result ==>
;               (forall (any_result: StlcStrongDbParSubst.typing g' b (StlcStrongDbParSubst.TArr b b))
;                 .
;                   StlcCbvDbParSubst.typing_extensional b g' == any_result ==>
;                   (FStar.FunctionalExtensionality.feq g g' ==>
;                     FStar.FunctionalExtensionality.feq b g' /\ b << h) /\
;                   (forall (any_result:
;                       g': StlcStrongDbParSubst.env{FStar.FunctionalExtensionality.feq g g'}).
;                       g' == any_result ==>
;                       (forall (any_result: StlcStrongDbParSubst.typing g' b b).
;                           StlcCbvDbParSubst.typing_extensional b g' == any_result ==>
;                           (forall (any_result:
;                               StlcStrongDbParSubst.typing g' (StlcStrongDbParSubst.EApp b b) b).
;                               StlcStrongDbParSubst.TyApp (StlcCbvDbParSubst.typing_extensional b g')
;                                 (StlcCbvDbParSubst.typing_extensional b g') ==
;                               any_result ==>
;                               StlcStrongDbParSubst.EApp b b == e /\ b == t)))))) /\
;       (~(TyApp? h) ==>
;         (forall (b: StlcStrongDbParSubst.env).
;             h == StlcStrongDbParSubst.TyUnit ==>
;             StlcStrongDbParSubst.EUnit == e /\ StlcStrongDbParSubst.TUnit == t))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec typing_extensional`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (StlcStrongDbParSubst.typing x_68954c3ef788afaa9618aa171f544a7e_4
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(82,2-86,20)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(82,2-86,20)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(82,2-86,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(and 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(not 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(not 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(not 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(not 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyUnit x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x1))

;; def=StlcCbvDbParSubst.fst(81,36-83,11); use=StlcCbvDbParSubst.fst(82,8-83,11)
(= x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.TyVar @x1
@x2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(82,2-86,20)
(and (implies 
;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(83,21-83,22)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT @x1
@x2)))


;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(83,21-83,22)
(or label_2

;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(83,21-83,22)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT x_68954c3ef788afaa9618aa171f544a7e_4
@x2)))
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x1))

;; def=StlcStrongDbParSubst.fst(122,13-122,14); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= @x2
@x3)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(StlcStrongDbParSubst.typing x_68954c3ef788afaa9618aa171f544a7e_4
(StlcStrongDbParSubst.EVar @x2)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_68954c3ef788afaa9618aa171f544a7e_4
@x2))))

;; def=StlcCbvDbParSubst.fst(80,50-83,22); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= (StlcStrongDbParSubst.TyVar x_68954c3ef788afaa9618aa171f544a7e_4
@x2)
@x4)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(83,15-83,22)
(and 
;; def=StlcCbvDbParSubst.fst(81,28-81,29); use=StlcCbvDbParSubst.fst(83,15-83,22)
(or label_3

;; def=StlcCbvDbParSubst.fst(81,28-81,29); use=StlcCbvDbParSubst.fst(83,15-83,22)
(= (StlcStrongDbParSubst.EVar @x2)
x_00c2c856e702f50718a37c394bb4dba3_0)
)


;; def=StlcCbvDbParSubst.fst(81,34-81,35); use=StlcCbvDbParSubst.fst(83,15-83,22)
(or label_4

;; def=StlcCbvDbParSubst.fst(81,34-81,35); use=StlcCbvDbParSubst.fst(83,15-83,22)
(= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_68954c3ef788afaa9618aa171f544a7e_4
@x2))
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(82,2-86,20)
(not 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(82,2-86,20)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
@x1)
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(81,36-84,13); use=StlcCbvDbParSubst.fst(82,8-84,13)
(= x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(82,2-86,20)
(and 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(84,47-84,60)
(or label_5

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(84,47-84,60)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(84,47-84,60)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
(StlcStrongDbParSubst.extend @x2
@x1)
(StlcStrongDbParSubst.extend @x2
x_68954c3ef788afaa9618aa171f544a7e_4))
)
)


;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(84,47-84,60)
(or label_6

;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(84,47-84,60)
(Valid 
;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(84,47-84,60)
(Prims.precedes (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
@x1)
@x3
@x4)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x5
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Tm_refine_29d712a55fe45b232db8f2addbcc9516 @x2
@x1
@x3
@x4
@x5))

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= @x6
(StlcStrongDbParSubst.extend @x2
x_68954c3ef788afaa9618aa171f544a7e_4))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
x_68954c3ef788afaa9618aa171f544a7e_4)
@x3
@x4))

;; def=StlcStrongDbParSubst.fst(128,13-128,18); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= (StlcCbvDbParSubst.typing_extensional__146 @x3
(StlcStrongDbParSubst.extend @x2
@x1)
@x4
@x5
(StlcStrongDbParSubst.extend @x2
x_68954c3ef788afaa9618aa171f544a7e_4))
@x7)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StlcStrongDbParSubst.typing x_68954c3ef788afaa9618aa171f544a7e_4
(StlcStrongDbParSubst.ELam @x2
@x3)
(StlcStrongDbParSubst.TArr @x2
@x4)))

;; def=StlcCbvDbParSubst.fst(80,50-84,61); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= (StlcStrongDbParSubst.TyLam x_68954c3ef788afaa9618aa171f544a7e_4
@x2
@x3
@x4
(StlcCbvDbParSubst.typing_extensional__146 @x3
(StlcStrongDbParSubst.extend @x2
@x1)
@x4
@x5
(StlcStrongDbParSubst.extend @x2
x_68954c3ef788afaa9618aa171f544a7e_4)))
@x8)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(84,17-84,61)
(and 
;; def=StlcCbvDbParSubst.fst(81,28-81,29); use=StlcCbvDbParSubst.fst(84,17-84,61)
(or label_7

;; def=StlcCbvDbParSubst.fst(81,28-81,29); use=StlcCbvDbParSubst.fst(84,17-84,61)
(= (StlcStrongDbParSubst.ELam @x2
@x3)
x_00c2c856e702f50718a37c394bb4dba3_0)
)


;; def=StlcCbvDbParSubst.fst(81,34-81,35); use=StlcCbvDbParSubst.fst(84,17-84,61)
(or label_8

;; def=StlcCbvDbParSubst.fst(81,34-81,35); use=StlcCbvDbParSubst.fst(84,17-84,61)
(= (StlcStrongDbParSubst.TArr @x2
@x4)
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(82,2-86,20)
(not 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(82,2-86,20)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StlcStrongDbParSubst.typing @x1
@x2
(StlcStrongDbParSubst.TArr @x4
@x5)))

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StlcStrongDbParSubst.typing @x1
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(81,36-85,15); use=StlcCbvDbParSubst.fst(82,8-85,15)
(= x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(82,2-86,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,48-85,50)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,48-85,50)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
x_d7a08fe95d0edeffd31477bbf4345664_1
x_68954c3ef788afaa9618aa171f544a7e_4)
)


;; def=StlcCbvDbParSubst.fst(80,33-86,20); use=StlcCbvDbParSubst.fst(85,48-85,50)
(and 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,48-85,50)
(or label_9

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,48-85,50)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,48-85,50)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
@x1
x_68954c3ef788afaa9618aa171f544a7e_4)
)
)


;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(85,48-85,50)
(or label_10

;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(85,48-85,50)
(Valid 
;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(85,48-85,50)
(Prims.precedes (StlcStrongDbParSubst.typing @x1
@x2
(StlcStrongDbParSubst.TArr @x4
@x5))
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x6
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)
)
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Tm_refine_21f1268484afa29917c4777ed538910e)

;; def=StlcCbvDbParSubst.fst(80,26-81,40); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= x_68954c3ef788afaa9618aa171f544a7e_4
@x8)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StlcStrongDbParSubst.typing x_68954c3ef788afaa9618aa171f544a7e_4
@x2
(StlcStrongDbParSubst.TArr @x4
@x5)))

;; def=StlcStrongDbParSubst.fst(135,13-135,15); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= (StlcCbvDbParSubst.typing_extensional__146 @x2
@x1
(StlcStrongDbParSubst.TArr @x4
@x5)
@x6
x_68954c3ef788afaa9618aa171f544a7e_4)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(82,2-86,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,75-85,77)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,75-85,77)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
x_d7a08fe95d0edeffd31477bbf4345664_1
x_68954c3ef788afaa9618aa171f544a7e_4)
)


;; def=StlcCbvDbParSubst.fst(80,33-86,20); use=StlcCbvDbParSubst.fst(85,75-85,77)
(and 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,75-85,77)
(or label_11

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,75-85,77)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(85,75-85,77)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
@x1
x_68954c3ef788afaa9618aa171f544a7e_4)
)
)


;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(85,75-85,77)
(or label_12

;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(85,75-85,77)
(Valid 
;; def=StlcCbvDbParSubst.fst(82,2-86,20); use=StlcCbvDbParSubst.fst(85,75-85,77)
(Prims.precedes (StlcStrongDbParSubst.typing @x1
@x3
@x4)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x7
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)
)
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Tm_refine_21f1268484afa29917c4777ed538910e)

;; def=StlcCbvDbParSubst.fst(80,26-81,40); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= x_68954c3ef788afaa9618aa171f544a7e_4
@x10)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(StlcStrongDbParSubst.typing x_68954c3ef788afaa9618aa171f544a7e_4
@x3
@x4))

;; def=StlcStrongDbParSubst.fst(136,13-136,15); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= (StlcCbvDbParSubst.typing_extensional__146 @x3
@x1
@x4
@x7
x_68954c3ef788afaa9618aa171f544a7e_4)
@x11)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(StlcStrongDbParSubst.typing x_68954c3ef788afaa9618aa171f544a7e_4
(StlcStrongDbParSubst.EApp @x2
@x3)
@x5))

;; def=StlcCbvDbParSubst.fst(80,50-85,78); use=StlcCbvDbParSubst.fst(82,2-86,20)
(= (StlcStrongDbParSubst.TyApp x_68954c3ef788afaa9618aa171f544a7e_4
@x2
@x3
@x4
@x5
(StlcCbvDbParSubst.typing_extensional__146 @x2
@x1
(StlcStrongDbParSubst.TArr @x4
@x5)
@x6
x_68954c3ef788afaa9618aa171f544a7e_4)
(StlcCbvDbParSubst.typing_extensional__146 @x3
@x1
@x4
@x7
x_68954c3ef788afaa9618aa171f544a7e_4))
@x12)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(85,19-85,78)
(and 
;; def=StlcCbvDbParSubst.fst(81,28-81,29); use=StlcCbvDbParSubst.fst(85,19-85,78)
(or label_13

;; def=StlcCbvDbParSubst.fst(81,28-81,29); use=StlcCbvDbParSubst.fst(85,19-85,78)
(= (StlcStrongDbParSubst.EApp @x2
@x3)
x_00c2c856e702f50718a37c394bb4dba3_0)
)


;; def=StlcCbvDbParSubst.fst(81,34-85,12); use=StlcCbvDbParSubst.fst(85,19-85,78)
(or label_14

;; def=StlcCbvDbParSubst.fst(81,34-85,12); use=StlcCbvDbParSubst.fst(85,19-85,78)
(= @x5
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
)
)
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(82,2-86,20)
(not 
;; def=StlcCbvDbParSubst.fst(81,36-81,37); use=StlcCbvDbParSubst.fst(82,8-82,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(82,2-86,20)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(81,36-86,10); use=StlcCbvDbParSubst.fst(82,8-86,10)
(= x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.TyUnit @x1))
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(86,14-86,20)
(and 
;; def=StlcCbvDbParSubst.fst(81,28-81,29); use=StlcCbvDbParSubst.fst(86,14-86,20)
(or label_15

;; def=StlcCbvDbParSubst.fst(81,28-81,29); use=StlcCbvDbParSubst.fst(86,14-86,20)
(= StlcStrongDbParSubst.EUnit@tok
x_00c2c856e702f50718a37c394bb4dba3_0)
)


;; def=StlcCbvDbParSubst.fst(81,34-81,35); use=StlcCbvDbParSubst.fst(86,14-86,20)
(or label_16

;; def=StlcCbvDbParSubst.fst(81,34-81,35); use=StlcCbvDbParSubst.fst(86,14-86,20)
(= StlcStrongDbParSubst.TUnit@tok
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
)
)
)
 
;;no pats
:qid @query.26))
))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.typing_extensional, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, binder_x_5a46e118e90c9e1bd3eb623781c03d15_3, binder_x_68954c3ef788afaa9618aa171f544a7e_4, data_elim_StlcStrongDbParSubst.TyApp, data_elim_StlcStrongDbParSubst.TyLam, data_elim_StlcStrongDbParSubst.TyUnit, data_elim_StlcStrongDbParSubst.TyVar, disc_equation_StlcStrongDbParSubst.TyApp, disc_equation_StlcStrongDbParSubst.TyLam, disc_equation_StlcStrongDbParSubst.TyUnit, disc_equation_StlcStrongDbParSubst.TyVar, equation_FStar.FunctionalExtensionality.feq, equation_Prims.nat, equation_StlcStrongDbParSubst.extend, equation_StlcStrongDbParSubst.var, fuel_guarded_inversion_StlcStrongDbParSubst.typing, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0, primitive_Prims.op_Equality, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_21f1268484afa29917c4777ed538910e, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8, subterm_ordering_StlcStrongDbParSubst.TyApp, subterm_ordering_StlcStrongDbParSubst.TyLam

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec typing_extensional


; <Start encoding let rec typing_extensional>




(declare-fun StlcCbvDbParSubst.typing_extensional__176 (Term Term Term Term Term) Term)




(declare-fun StlcCbvDbParSubst.typing_extensional__176@tok () Term)

; </end encoding let rec typing_extensional>


; encoding sigelt val StlcCbvDbParSubst.appears_free_in


; <Skipped val StlcCbvDbParSubst.appears_free_in/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(90,2-94,18)

;;;;;;;;;;;;;;;;x : StlcStrongDbParSubst.var (StlcStrongDbParSubst.var)
(declare-fun x_994c99bbacb216630d104a4d01f030da_0 () Term)
;;;;;;;;;;;;;;;;binder_x_994c99bbacb216630d104a4d01f030da_0
;;; Fact-ids: 
(assert (! (HasType x_994c99bbacb216630d104a4d01f030da_0
StlcStrongDbParSubst.var)
:named binder_x_994c99bbacb216630d104a4d01f030da_0))
;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_1 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_1
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_1
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_1))
(declare-fun Tm_refine_6059794030535bf805a6deb0cd431daf () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_6059794030535bf805a6deb0cd431daf
Tm_type)
:named refinement_kinding_Tm_refine_6059794030535bf805a6deb0cd431daf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(88,31-94,18); use=StlcCbvDbParSubst.fst(88,31-94,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_6059794030535bf805a6deb0cd431daf)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(90,2-94,18)

;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(90,2-94,18)
(Valid 
;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(90,2-94,18)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x1
x_00c2c856e702f50718a37c394bb4dba3_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_6059794030535bf805a6deb0cd431daf))
:qid refinement_interpretation_Tm_refine_6059794030535bf805a6deb0cd431daf))

:named refinement_interpretation_Tm_refine_6059794030535bf805a6deb0cd431daf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6059794030535bf805a6deb0cd431daf
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_6059794030535bf805a6deb0cd431daf))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_6059794030535bf805a6deb0cd431daf))
(declare-fun StlcCbvDbParSubst.appears_free_in (Term Term) Term)

;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var -> e: StlcStrongDbParSubst.exp{e << e} -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_72989edab0bb45422c367c381f9a643a () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_72989edab0bb45422c367c381f9a643a
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_72989edab0bb45422c367c381f9a643a
Tm_type)
:named kinding_Tm_arrow_72989edab0bb45422c367c381f9a643a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(88,24-94,18); use=StlcCbvDbParSubst.fst(88,31-94,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_72989edab0bb45422c367c381f9a643a)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_72989edab0bb45422c367c381f9a643a))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_72989edab0bb45422c367c381f9a643a))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_72989edab0bb45422c367c381f9a643a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_72989edab0bb45422c367c381f9a643a
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(88,24-94,18); use=StlcCbvDbParSubst.fst(88,31-94,18)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_72989edab0bb45422c367c381f9a643a)
(and 
;; def=StlcCbvDbParSubst.fst(88,24-94,18); use=StlcCbvDbParSubst.fst(88,31-94,18)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
Tm_refine_6059794030535bf805a6deb0cd431daf))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_72989edab0bb45422c367c381f9a643a.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(88,24-94,18); use=StlcCbvDbParSubst.fst(88,31-94,18)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_72989edab0bb45422c367c381f9a643a.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_72989edab0bb45422c367c381f9a643a))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_72989edab0bb45422c367c381f9a643a))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_72989edab0bb45422c367c381f9a643a))
(declare-fun StlcCbvDbParSubst.appears_free_in@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StlcCbvDbParSubst.appears_free_in@tok
@x0)
@x1)
(StlcCbvDbParSubst.appears_free_in @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StlcCbvDbParSubst.appears_free_in@tok
@x0)
@x1))
:qid token_correspondence_StlcCbvDbParSubst.appears_free_in))

:named token_correspondence_StlcCbvDbParSubst.appears_free_in))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.appears_free_in@tok
Tm_arrow_72989edab0bb45422c367c381f9a643a))

;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StlcCbvDbParSubst.appears_free_in@tok
@x1)
@x2)
(StlcCbvDbParSubst.appears_free_in @x1
@x2))
 

:pattern ((StlcCbvDbParSubst.appears_free_in @x1
@x2))
:qid function_token_typing_StlcCbvDbParSubst.appears_free_in.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.appears_free_in@tok))
:qid function_token_typing_StlcCbvDbParSubst.appears_free_in))

:named function_token_typing_StlcCbvDbParSubst.appears_free_in))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
Tm_refine_6059794030535bf805a6deb0cd431daf))
(HasType (StlcCbvDbParSubst.appears_free_in @x0
@x1)
Prims.bool))
 

:pattern ((StlcCbvDbParSubst.appears_free_in @x0
@x1))
:qid typing_StlcCbvDbParSubst.appears_free_in))

:named typing_StlcCbvDbParSubst.appears_free_in))
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.bool).
;   (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(EVar? e) /\ ~(EApp? e) /\ ~(ELam? e) /\ ~(EUnit? e) ==> Prims.l_False) /\
;   (forall (b: StlcStrongDbParSubst.var).
;       e == StlcStrongDbParSubst.EVar b ==> Prims.hasEq StlcStrongDbParSubst.var) /\
;   (~(EVar? e) ==>
;     (forall (b: StlcStrongDbParSubst.exp) (b: StlcStrongDbParSubst.exp).
;         e == StlcStrongDbParSubst.EApp b b ==>
;         b << e /\ (~(StlcCbvDbParSubst.appears_free_in x b) ==> b << e)) /\
;     (~(EApp? e) ==>
;       (forall (b: StlcStrongDbParSubst.typ) (b: StlcStrongDbParSubst.exp).
;           e == StlcStrongDbParSubst.ELam b b ==>
;           x + 1 >= 0 /\
;           (forall (return_val: StlcStrongDbParSubst.var). return_val == x + 1 ==> b << e))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec appears_free_in`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(90,2-94,18)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(90,2-94,18)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(90,2-94,18)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(90,2-94,18)
(and (implies 
;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(and 
;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(not 
;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(not 
;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EApp x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(not 
;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_ELam x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(not 
;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EUnit x_00c2c856e702f50718a37c394bb4dba3_1))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(90,2-94,18)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(89,26-91,10); use=StlcCbvDbParSubst.fst(90,8-91,10)
(= x_00c2c856e702f50718a37c394bb4dba3_1
(StlcStrongDbParSubst.EVar @x1))
)

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(91,14-91,15)
(or label_2

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(91,14-91,15)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(91,14-91,15)
(Prims.hasEq StlcStrongDbParSubst.var)
)
)
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(90,2-94,18)
(not 
;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(90,2-94,18)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(90,2-94,18)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(90,2-94,18)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(89,26-92,14); use=StlcCbvDbParSubst.fst(90,8-92,14)
(= x_00c2c856e702f50718a37c394bb4dba3_1
(StlcStrongDbParSubst.EApp @x1
@x2))
)

;; def=StlcCbvDbParSubst.fst(92,9-92,38); use=StlcCbvDbParSubst.fst(92,18-92,62)
(and 
;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(92,36-92,38)
(or label_3

;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(92,36-92,38)
(Valid 
;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(92,36-92,38)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x1
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)

(implies 
;; def=StlcCbvDbParSubst.fst(92,18-92,38); use=StlcCbvDbParSubst.fst(92,18-92,38)
(not 
;; def=StlcCbvDbParSubst.fst(92,18-92,38); use=StlcCbvDbParSubst.fst(92,18-92,38)
(BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in x_994c99bbacb216630d104a4d01f030da_0
@x1))
)


;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(92,60-92,62)
(or label_4

;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(92,60-92,62)
(Valid 
;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(92,60-92,62)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)
))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(90,2-94,18)
(not 
;; def=StlcCbvDbParSubst.fst(89,26-89,27); use=StlcCbvDbParSubst.fst(90,8-90,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EApp x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(90,2-94,18)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(90,2-94,18)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(89,26-93,13); use=StlcCbvDbParSubst.fst(90,8-93,13)
(= x_00c2c856e702f50718a37c394bb4dba3_1
(StlcStrongDbParSubst.ELam @x1
@x2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(90,2-94,18)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(93,33-93,38)
(or label_5

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(93,33-93,38)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(90,2-94,18)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(90,2-94,18)
(= @x3
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
)

;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(93,39-93,41)
(or label_6

;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(93,39-93,41)
(Valid 
;; def=StlcCbvDbParSubst.fst(90,2-94,18); use=StlcCbvDbParSubst.fst(93,39-93,41)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.appears_free_in, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3, binder_x_00c2c856e702f50718a37c394bb4dba3_1, binder_x_994c99bbacb216630d104a4d01f030da_0, disc_equation_StlcStrongDbParSubst.EApp, disc_equation_StlcStrongDbParSubst.ELam, disc_equation_StlcStrongDbParSubst.EUnit, disc_equation_StlcStrongDbParSubst.EVar, equality_tok_StlcStrongDbParSubst.EUnit@tok, equation_Prims.eqtype, equation_Prims.nat, equation_StlcStrongDbParSubst.var, fuel_guarded_inversion_StlcStrongDbParSubst.exp, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_StlcStrongDbParSubst.EApp, subterm_ordering_StlcStrongDbParSubst.ELam, typing_Prims.int, typing_tok_StlcStrongDbParSubst.EUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec appears_free_in


; <Start encoding let rec appears_free_in>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcCbvDbParSubst.appears_free_in.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcCbvDbParSubst.appears_free_in.fuel_instrumented_token () Term)
(declare-fun StlcCbvDbParSubst.appears_free_in (Term Term) Term)
(declare-fun StlcCbvDbParSubst.appears_free_in@tok () Term)
;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var -> e: StlcStrongDbParSubst.exp -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_18abfcf2be4679d8ec96cb1395060546 () Term)

; </end encoding let rec appears_free_in>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.appears_free_in; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.exp))
(HasType (StlcCbvDbParSubst.appears_free_in @x0
@x1)
Prims.bool))
 

:pattern ((StlcCbvDbParSubst.appears_free_in @x0
@x1))
:qid typing_StlcCbvDbParSubst.appears_free_in))

:named typing_StlcCbvDbParSubst.appears_free_in))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StlcCbvDbParSubst.appears_free_in; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp))
(HasType (StlcCbvDbParSubst.appears_free_in.fuel_instrumented @u0
@x1
@x2)
Prims.bool))
 

:pattern ((StlcCbvDbParSubst.appears_free_in.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented))

:named token_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StlcCbvDbParSubst.appears_free_in
;;; Fact-ids: Name StlcCbvDbParSubst.appears_free_in; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp))
(= (StlcCbvDbParSubst.appears_free_in.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-StlcStrongDbParSubst.EVar @lb3)
(Prims.op_Equality StlcStrongDbParSubst.var
@x1
(StlcStrongDbParSubst.EVar__0 @lb3))
(ite (is-StlcStrongDbParSubst.EApp @lb3)
(Prims.op_BarBar (StlcCbvDbParSubst.appears_free_in.fuel_instrumented @u0
@x1
(StlcStrongDbParSubst.EApp__0 @lb3))
(StlcCbvDbParSubst.appears_free_in.fuel_instrumented @u0
@x1
(StlcStrongDbParSubst.EApp__1 @lb3)))
(ite (is-StlcStrongDbParSubst.ELam @lb3)
(StlcCbvDbParSubst.appears_free_in.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(StlcStrongDbParSubst.ELam__1 @lb3))
(ite (is-StlcStrongDbParSubst.EUnit @lb3)
(BoxBool false)
Tm_unit)))))))
 :weight 0


:pattern ((StlcCbvDbParSubst.appears_free_in.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_StlcCbvDbParSubst.appears_free_in.fuel_instrumented))

:named equation_with_fuel_StlcCbvDbParSubst.appears_free_in.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StlcCbvDbParSubst.appears_free_in; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (StlcCbvDbParSubst.appears_free_in.fuel_instrumented (SFuel @u0)
@x1
@x2)
(StlcCbvDbParSubst.appears_free_in.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((StlcCbvDbParSubst.appears_free_in.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_StlcCbvDbParSubst.appears_free_in.fuel_instrumented))

:named @fuel_irrelevance_StlcCbvDbParSubst.appears_free_in.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StlcCbvDbParSubst.appears_free_in; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(89,8-89,23); use=StlcCbvDbParSubst.fst(89,8-89,23)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcCbvDbParSubst.appears_free_in @x0
@x1)
(StlcCbvDbParSubst.appears_free_in.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((StlcCbvDbParSubst.appears_free_in @x0
@x1))
:qid @fuel_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented))

:named @fuel_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(97,17-97,70)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (e: StlcStrongDbParSubst.exp) (g1: StlcStrongDbParSubst.env) (g2: StlcStrongDbParSubst.env).
;   (*  - Could not prove post-condition
; *)
;   forall (x: StlcStrongDbParSubst.var).
;     StlcCbvDbParSubst.appears_free_in x e ==>
;     Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)


; Context: While encoding a query
; While typechecking the top-level declaration `let envEqualE`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.env))

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(97,17-97,70)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(97,34-97,53); use=StlcCbvDbParSubst.fst(97,34-97,53)
(BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in @x3
@x0))
)

;; def=Prims.fst(73,23-73,30); use=StlcStrongDbParSubst.fst(110,22-110,34)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(97,34-97,69)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(97,34-97,69)
(Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.envEqualE, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_StlcStrongDbParSubst.typ__uu___haseq, kinding_StlcStrongDbParSubst.typ@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let envEqualE


; <Start encoding let envEqualE>

(declare-fun StlcCbvDbParSubst.envEqualE (Term Term Term) Term)
;;;;;;;;;;;;;;;;e: StlcStrongDbParSubst.exp -> g1: StlcStrongDbParSubst.env -> g2: StlcStrongDbParSubst.env   -> Prims.logical
(declare-fun Tm_arrow_f7287b82a9f0fb02fadc32a18415c2a1 () Term)
(declare-fun StlcCbvDbParSubst.envEqualE@tok () Term)

; </end encoding let envEqualE>


; encoding sigelt val StlcCbvDbParSubst.context_invariance


; <Skipped val StlcCbvDbParSubst.context_invariance/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.envEqualE; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(96,5-96,14); use=StlcCbvDbParSubst.fst(96,5-96,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.env))
(HasType (StlcCbvDbParSubst.envEqualE @x0
@x1
@x2)
Prims.logical))
 

:pattern ((StlcCbvDbParSubst.envEqualE @x0
@x1
@x2))
:qid typing_StlcCbvDbParSubst.envEqualE))

:named typing_StlcCbvDbParSubst.envEqualE))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.envEqualE
;;; Fact-ids: Name StlcCbvDbParSubst.envEqualE; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(96,5-96,14); use=StlcCbvDbParSubst.fst(96,5-96,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (StlcCbvDbParSubst.envEqualE @x0
@x1
@x2))

;; def=StlcCbvDbParSubst.fst(97,17-97,70); use=StlcCbvDbParSubst.fst(97,17-97,70)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(97,34-97,53); use=StlcCbvDbParSubst.fst(97,34-97,53)
(BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in @x3
@x0))
)

;; def=StlcCbvDbParSubst.fst(97,58-97,69); use=StlcCbvDbParSubst.fst(97,58-97,69)
(= (ApplyTT @x1
@x3)
(ApplyTT @x2
@x3))
)
 
;;no pats
:qid equation_StlcCbvDbParSubst.envEqualE.1))
)
 

:pattern ((StlcCbvDbParSubst.envEqualE @x0
@x1
@x2))
:qid equation_StlcCbvDbParSubst.envEqualE))

:named equation_StlcCbvDbParSubst.envEqualE))
;;;;;;;;;;;;;;;;Prop-typing for StlcCbvDbParSubst.envEqualE
;;; Fact-ids: Name StlcCbvDbParSubst.envEqualE; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(96,5-96,14); use=StlcCbvDbParSubst.fst(96,5-96,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.env))
(Valid (Prims.subtype_of (StlcCbvDbParSubst.envEqualE @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (StlcCbvDbParSubst.envEqualE @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_StlcCbvDbParSubst.envEqualE))

:named defn_equation_StlcCbvDbParSubst.envEqualE))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(105,2-111,20)

;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_0 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_0
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_0
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_0))
;;;;;;;;;;;;;;;;g : StlcStrongDbParSubst.env (StlcStrongDbParSubst.env)
(declare-fun x_d7a08fe95d0edeffd31477bbf4345664_1 () Term)
;;;;;;;;;;;;;;;;binder_x_d7a08fe95d0edeffd31477bbf4345664_1
;;; Fact-ids: 
(assert (! (HasType x_d7a08fe95d0edeffd31477bbf4345664_1
StlcStrongDbParSubst.env)
:named binder_x_d7a08fe95d0edeffd31477bbf4345664_1))
;;;;;;;;;;;;;;;;t : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_2 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_2
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_2
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_2))
;;;;;;;;;;;;;;;;h : StlcStrongDbParSubst.typing g e t (StlcStrongDbParSubst.typing g e t)
(declare-fun x_5a46e118e90c9e1bd3eb623781c03d15_3 () Term)
;;;;;;;;;;;;;;;;binder_x_5a46e118e90c9e1bd3eb623781c03d15_3
;;; Fact-ids: 
(assert (! (HasType x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2))
:named binder_x_5a46e118e90c9e1bd3eb623781c03d15_3))
;;;;;;;;;;;;;;;;g' : g': StlcStrongDbParSubst.env{StlcCbvDbParSubst.envEqualE e g g'} (g': StlcStrongDbParSubst.env{StlcCbvDbParSubst.envEqualE e g g'})
(declare-fun x_cce50e4c07746e3ce32d26de8b3af145_4 () Term)
(declare-fun Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72
Tm_type)
:named refinement_kinding_Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-102,50); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(104,8-104,26)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(104,8-104,26)
(StlcCbvDbParSubst.envEqualE x_00c2c856e702f50718a37c394bb4dba3_0
x_d7a08fe95d0edeffd31477bbf4345664_1
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72))
:qid refinement_interpretation_Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72))

:named refinement_interpretation_Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
:named haseqTm_refine_f5705c081cc8d8395b0d7e23ef7d0b72))
;;;;;;;;;;;;;;;;binder_x_cce50e4c07746e3ce32d26de8b3af145_4
;;; Fact-ids: 
(assert (! (HasType x_cce50e4c07746e3ce32d26de8b3af145_4
Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72)
:named binder_x_cce50e4c07746e3ce32d26de8b3af145_4))
(declare-fun Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc))

:named refinement_kinding_Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(104,8-104,26)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(104,8-104,26)
(StlcCbvDbParSubst.envEqualE @x2
@x3
@x1)
)


;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(105,2-111,20)

;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(105,2-111,20)
(Valid 
;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(105,2-111,20)
(Prims.precedes (StlcStrongDbParSubst.typing @x3
@x2
@x4)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x5
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc))

:named refinement_interpretation_Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc))

:named haseqTm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc))
(declare-fun StlcCbvDbParSubst.context_invariance (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;h: StlcStrongDbParSubst.typing g e t -> g': (g': StlcStrongDbParSubst.env{envEqualE e g g'}){h << h}   -> Prims.Tot (StlcStrongDbParSubst.typing g' e t)
(declare-fun Tm_arrow_c8884a70058126471ec73cad489edb98 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c8884a70058126471ec73cad489edb98
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_c8884a70058126471ec73cad489edb98
Tm_type)
:named kinding_Tm_arrow_c8884a70058126471ec73cad489edb98))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(101,28-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c8884a70058126471ec73cad489edb98)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c8884a70058126471ec73cad489edb98))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_c8884a70058126471ec73cad489edb98))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_c8884a70058126471ec73cad489edb98))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c8884a70058126471ec73cad489edb98
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(101,28-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c8884a70058126471ec73cad489edb98)
(and 
;; def=StlcCbvDbParSubst.fst(101,28-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
(StlcStrongDbParSubst.typing @x2
@x1
@x3))
(HasType @x5
(Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc @x1
@x2
@x3
@x4)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
(StlcStrongDbParSubst.typing @x5
@x1
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_c8884a70058126471ec73cad489edb98.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(101,28-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_c8884a70058126471ec73cad489edb98.2))


;; def=StlcCbvDbParSubst.fst(101,28-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_c8884a70058126471ec73cad489edb98.3))


;; def=StlcCbvDbParSubst.fst(101,28-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_c8884a70058126471ec73cad489edb98.4))


;; def=StlcCbvDbParSubst.fst(101,28-111,20); use=StlcCbvDbParSubst.fst(102,26-111,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
(StlcStrongDbParSubst.typing @x2
@x1
@x3)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_c8884a70058126471ec73cad489edb98.5))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c8884a70058126471ec73cad489edb98))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_c8884a70058126471ec73cad489edb98))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_c8884a70058126471ec73cad489edb98))
(declare-fun StlcCbvDbParSubst.context_invariance@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.context_invariance@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(StlcCbvDbParSubst.context_invariance @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.context_invariance@tok
@x0)
@x1)
@x2)
@x3)
@x4))
:qid token_correspondence_StlcCbvDbParSubst.context_invariance))

:named token_correspondence_StlcCbvDbParSubst.context_invariance))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.context_invariance@tok
Tm_arrow_c8884a70058126471ec73cad489edb98))

;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.context_invariance@tok
@x1)
@x2)
@x3)
@x4)
@x5)
(StlcCbvDbParSubst.context_invariance @x1
@x2
@x3
@x4
@x5))
 

:pattern ((StlcCbvDbParSubst.context_invariance @x1
@x2
@x3
@x4
@x5))
:qid function_token_typing_StlcCbvDbParSubst.context_invariance.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.context_invariance@tok))
:qid function_token_typing_StlcCbvDbParSubst.context_invariance))

:named function_token_typing_StlcCbvDbParSubst.context_invariance))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing @x1
@x0
@x2))
(HasType @x4
(Tm_refine_d121dd38eeca6a0e1a84a7bb4b8d6afc @x0
@x1
@x2
@x3)))
(HasType (StlcCbvDbParSubst.context_invariance @x0
@x1
@x2
@x3
@x4)
(StlcStrongDbParSubst.typing @x4
@x0
@x2)))
 

:pattern ((StlcCbvDbParSubst.context_invariance @x0
@x1
@x2
@x3
@x4))
:qid typing_StlcCbvDbParSubst.context_invariance))

:named typing_StlcCbvDbParSubst.context_invariance))
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


(declare-fun Tm_refine_ae4802f604ddc33fd247e9f61c7a3565 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-111,20); use=StlcCbvDbParSubst.fst(108,15-108,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_ae4802f604ddc33fd247e9f61c7a3565 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_ae4802f604ddc33fd247e9f61c7a3565 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_ae4802f604ddc33fd247e9f61c7a3565))

:named refinement_kinding_Tm_refine_ae4802f604ddc33fd247e9f61c7a3565))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-111,20); use=StlcCbvDbParSubst.fst(108,15-108,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ae4802f604ddc33fd247e9f61c7a3565 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(108,15-108,33)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(108,15-108,33)
(StlcCbvDbParSubst.envEqualE @x2
(StlcStrongDbParSubst.extend @x3
@x4)
@x1)
)


;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(108,15-108,33)

;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(108,15-108,33)
(Valid 
;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(108,15-108,33)
(Prims.precedes (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x3
@x4)
@x2
@x5)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x6
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ae4802f604ddc33fd247e9f61c7a3565 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_ae4802f604ddc33fd247e9f61c7a3565))

:named refinement_interpretation_Tm_refine_ae4802f604ddc33fd247e9f61c7a3565))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ae4802f604ddc33fd247e9f61c7a3565
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-111,20); use=StlcCbvDbParSubst.fst(108,15-108,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ae4802f604ddc33fd247e9f61c7a3565 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ae4802f604ddc33fd247e9f61c7a3565 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_ae4802f604ddc33fd247e9f61c7a3565))

:named haseqTm_refine_ae4802f604ddc33fd247e9f61c7a3565))



; Encoding query formula : forall (k: Prims.pure_post (StlcStrongDbParSubst.typing g' e t)).
;   (forall (x: StlcStrongDbParSubst.typing g' e t). {:pattern Prims.guard_free (k x)}
;       Prims.auto_squash (k x)) ==>
;   (~(TyVar? h) /\ ~(TyLam? h) /\ ~(TyApp? h) /\ ~(TyUnit? h) ==> Prims.l_False) /\
;   (forall (b: StlcStrongDbParSubst.env) (b: x: StlcStrongDbParSubst.var{Some? (b x)}).
;       h == StlcStrongDbParSubst.TyVar b ==>
;       (Some? (b b) ==> Some? (g' b)) /\
;       (forall (any_result: x: StlcStrongDbParSubst.var{Some? (b x)}).
;           b == any_result ==>
;           (forall (any_result:
;               StlcStrongDbParSubst.typing g' (StlcStrongDbParSubst.EVar b) (g' b).v).
;               StlcStrongDbParSubst.TyVar b == any_result ==>
;               StlcStrongDbParSubst.EVar b == e /\ (g' b).v == t))) /\
;   (~(TyVar? h) ==>
;     (forall (b: StlcStrongDbParSubst.env)
;         (b: StlcStrongDbParSubst.typ)
;         (b: StlcStrongDbParSubst.exp)
;         (b: StlcStrongDbParSubst.typ)
;         (b: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b b) b b).
;         h == StlcStrongDbParSubst.TyLam b b ==>
;         StlcCbvDbParSubst.envEqualE b
;           (StlcStrongDbParSubst.extend b b)
;           (StlcStrongDbParSubst.extend b g') /\ b << h /\
;         (forall (return_val:
;             g':
;             (g':
;               StlcStrongDbParSubst.env
;                 {StlcCbvDbParSubst.envEqualE b (StlcStrongDbParSubst.extend b b) g'}){b << h}).
;             return_val == StlcStrongDbParSubst.extend b g' ==>
;             (forall (any_result: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b g') b b)
;               .
;                 StlcCbvDbParSubst.context_invariance b (StlcStrongDbParSubst.extend b g') ==
;                 any_result ==>
;                 (forall (any_result:
;                     StlcStrongDbParSubst.typing g'
;                       (StlcStrongDbParSubst.ELam b b)
;                       (StlcStrongDbParSubst.TArr b b)).
;                     StlcStrongDbParSubst.TyLam b
;                       (StlcCbvDbParSubst.context_invariance b (StlcStrongDbParSubst.extend b g')) ==
;                     any_result ==>
;                     StlcStrongDbParSubst.ELam b b == e /\ StlcStrongDbParSubst.TArr b b == t)))) /\
;     (~(TyLam? h) ==>
;       (forall (b: StlcStrongDbParSubst.env)
;           (b: StlcStrongDbParSubst.exp)
;           (b: StlcStrongDbParSubst.exp)
;           (b: StlcStrongDbParSubst.typ)
;           (b: StlcStrongDbParSubst.typ)
;           (b: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b))
;           (b: StlcStrongDbParSubst.typing b b b).
;           h == StlcStrongDbParSubst.TyApp b b ==>
;           (StlcCbvDbParSubst.envEqualE e g g' ==> StlcCbvDbParSubst.envEqualE b b g' /\ b << h) /\
;           (forall (any_result: g': StlcStrongDbParSubst.env{StlcCbvDbParSubst.envEqualE e g g'}).
;               g' == any_result ==>
;               (forall (any_result: StlcStrongDbParSubst.typing g' b (StlcStrongDbParSubst.TArr b b))
;                 .
;                   StlcCbvDbParSubst.context_invariance b g' == any_result ==>
;                   (StlcCbvDbParSubst.envEqualE e g g' ==>
;                     StlcCbvDbParSubst.envEqualE b b g' /\ b << h) /\
;                   (forall (any_result:
;                       g': StlcStrongDbParSubst.env{StlcCbvDbParSubst.envEqualE e g g'}).
;                       g' == any_result ==>
;                       (forall (any_result: StlcStrongDbParSubst.typing g' b b).
;                           StlcCbvDbParSubst.context_invariance b g' == any_result ==>
;                           (forall (any_result:
;                               StlcStrongDbParSubst.typing g' (StlcStrongDbParSubst.EApp b b) b).
;                               StlcStrongDbParSubst.TyApp (StlcCbvDbParSubst.context_invariance b g')
;                                 (StlcCbvDbParSubst.context_invariance b g') ==
;                               any_result ==>
;                               StlcStrongDbParSubst.EApp b b == e /\ b == t)))))) /\
;       (~(TyApp? h) ==>
;         (forall (b: StlcStrongDbParSubst.env).
;             h == StlcStrongDbParSubst.TyUnit ==>
;             StlcStrongDbParSubst.EUnit == e /\ StlcStrongDbParSubst.TUnit == t))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec context_invariance`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (StlcStrongDbParSubst.typing x_cce50e4c07746e3ce32d26de8b3af145_4
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(105,2-111,20)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(105,2-111,20)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(105,2-111,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(and 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(not 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(not 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(not 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(not 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyUnit x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x1))

;; def=StlcCbvDbParSubst.fst(104,36-106,11); use=StlcCbvDbParSubst.fst(105,8-106,11)
(= x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.TyVar @x1
@x2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(105,2-111,20)
(and (implies 
;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(106,21-106,22)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT @x1
@x2)))


;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(106,21-106,22)
(or label_2

;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(106,21-106,22)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT x_cce50e4c07746e3ce32d26de8b3af145_4
@x2)))
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x1))

;; def=StlcStrongDbParSubst.fst(122,13-122,14); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= @x2
@x3)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(StlcStrongDbParSubst.typing x_cce50e4c07746e3ce32d26de8b3af145_4
(StlcStrongDbParSubst.EVar @x2)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_cce50e4c07746e3ce32d26de8b3af145_4
@x2))))

;; def=StlcCbvDbParSubst.fst(103,10-106,22); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= (StlcStrongDbParSubst.TyVar x_cce50e4c07746e3ce32d26de8b3af145_4
@x2)
@x4)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(106,15-106,22)
(and 
;; def=StlcCbvDbParSubst.fst(104,28-104,29); use=StlcCbvDbParSubst.fst(106,15-106,22)
(or label_3

;; def=StlcCbvDbParSubst.fst(104,28-104,29); use=StlcCbvDbParSubst.fst(106,15-106,22)
(= (StlcStrongDbParSubst.EVar @x2)
x_00c2c856e702f50718a37c394bb4dba3_0)
)


;; def=StlcCbvDbParSubst.fst(104,34-104,35); use=StlcCbvDbParSubst.fst(106,15-106,22)
(or label_4

;; def=StlcCbvDbParSubst.fst(104,34-104,35); use=StlcCbvDbParSubst.fst(106,15-106,22)
(= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_cce50e4c07746e3ce32d26de8b3af145_4
@x2))
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(105,2-111,20)
(not 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(105,2-111,20)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
@x1)
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(104,36-107,16); use=StlcCbvDbParSubst.fst(105,8-107,16)
(= x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(105,2-111,20)
(and 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(108,37-108,52)
(or label_5

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(108,37-108,52)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(108,37-108,52)
(StlcCbvDbParSubst.envEqualE @x3
(StlcStrongDbParSubst.extend @x2
@x1)
(StlcStrongDbParSubst.extend @x2
x_cce50e4c07746e3ce32d26de8b3af145_4))
)
)


;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(108,37-108,52)
(or label_6

;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(108,37-108,52)
(Valid 
;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(108,37-108,52)
(Prims.precedes (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
@x1)
@x3
@x4)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x5
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Tm_refine_ae4802f604ddc33fd247e9f61c7a3565 @x3
@x2
@x1
@x4
@x5))

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= @x6
(StlcStrongDbParSubst.extend @x2
x_cce50e4c07746e3ce32d26de8b3af145_4))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
x_cce50e4c07746e3ce32d26de8b3af145_4)
@x3
@x4))

;; def=StlcStrongDbParSubst.fst(128,13-128,18); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= (StlcCbvDbParSubst.context_invariance @x3
(StlcStrongDbParSubst.extend @x2
@x1)
@x4
@x5
(StlcStrongDbParSubst.extend @x2
x_cce50e4c07746e3ce32d26de8b3af145_4))
@x7)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StlcStrongDbParSubst.typing x_cce50e4c07746e3ce32d26de8b3af145_4
(StlcStrongDbParSubst.ELam @x2
@x3)
(StlcStrongDbParSubst.TArr @x2
@x4)))

;; def=StlcCbvDbParSubst.fst(103,10-108,53); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= (StlcStrongDbParSubst.TyLam x_cce50e4c07746e3ce32d26de8b3af145_4
@x2
@x3
@x4
(StlcCbvDbParSubst.context_invariance @x3
(StlcStrongDbParSubst.extend @x2
@x1)
@x4
@x5
(StlcStrongDbParSubst.extend @x2
x_cce50e4c07746e3ce32d26de8b3af145_4)))
@x8)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(108,4-108,53)
(and 
;; def=StlcCbvDbParSubst.fst(104,28-104,29); use=StlcCbvDbParSubst.fst(108,4-108,53)
(or label_7

;; def=StlcCbvDbParSubst.fst(104,28-104,29); use=StlcCbvDbParSubst.fst(108,4-108,53)
(= (StlcStrongDbParSubst.ELam @x2
@x3)
x_00c2c856e702f50718a37c394bb4dba3_0)
)


;; def=StlcCbvDbParSubst.fst(104,34-104,35); use=StlcCbvDbParSubst.fst(108,4-108,53)
(or label_8

;; def=StlcCbvDbParSubst.fst(104,34-104,35); use=StlcCbvDbParSubst.fst(108,4-108,53)
(= (StlcStrongDbParSubst.TArr @x2
@x4)
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(105,2-111,20)
(not 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(105,2-111,20)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StlcStrongDbParSubst.typing @x1
@x2
(StlcStrongDbParSubst.TArr @x4
@x5)))

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StlcStrongDbParSubst.typing @x1
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(104,36-109,15); use=StlcCbvDbParSubst.fst(105,8-109,15)
(= x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(105,2-111,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,33-110,35)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,33-110,35)
(StlcCbvDbParSubst.envEqualE x_00c2c856e702f50718a37c394bb4dba3_0
x_d7a08fe95d0edeffd31477bbf4345664_1
x_cce50e4c07746e3ce32d26de8b3af145_4)
)


;; def=StlcCbvDbParSubst.fst(102,33-111,20); use=StlcCbvDbParSubst.fst(110,33-110,35)
(and 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,33-110,35)
(or label_9

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,33-110,35)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,33-110,35)
(StlcCbvDbParSubst.envEqualE @x2
@x1
x_cce50e4c07746e3ce32d26de8b3af145_4)
)
)


;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(110,33-110,35)
(or label_10

;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(110,33-110,35)
(Valid 
;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(110,33-110,35)
(Prims.precedes (StlcStrongDbParSubst.typing @x1
@x2
(StlcStrongDbParSubst.TArr @x4
@x5))
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x6
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)
)
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72)

;; def=StlcCbvDbParSubst.fst(102,26-104,40); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= x_cce50e4c07746e3ce32d26de8b3af145_4
@x8)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StlcStrongDbParSubst.typing x_cce50e4c07746e3ce32d26de8b3af145_4
@x2
(StlcStrongDbParSubst.TArr @x4
@x5)))

;; def=StlcStrongDbParSubst.fst(135,13-135,15); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= (StlcCbvDbParSubst.context_invariance @x2
@x1
(StlcStrongDbParSubst.TArr @x4
@x5)
@x6
x_cce50e4c07746e3ce32d26de8b3af145_4)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(105,2-111,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,60-110,62)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,60-110,62)
(StlcCbvDbParSubst.envEqualE x_00c2c856e702f50718a37c394bb4dba3_0
x_d7a08fe95d0edeffd31477bbf4345664_1
x_cce50e4c07746e3ce32d26de8b3af145_4)
)


;; def=StlcCbvDbParSubst.fst(102,33-111,20); use=StlcCbvDbParSubst.fst(110,60-110,62)
(and 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,60-110,62)
(or label_11

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,60-110,62)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(110,60-110,62)
(StlcCbvDbParSubst.envEqualE @x3
@x1
x_cce50e4c07746e3ce32d26de8b3af145_4)
)
)


;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(110,60-110,62)
(or label_12

;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(110,60-110,62)
(Valid 
;; def=StlcCbvDbParSubst.fst(105,2-111,20); use=StlcCbvDbParSubst.fst(110,60-110,62)
(Prims.precedes (StlcStrongDbParSubst.typing @x1
@x3
@x4)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
@x7
x_5a46e118e90c9e1bd3eb623781c03d15_3)
)
)
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72)

;; def=StlcCbvDbParSubst.fst(102,26-104,40); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= x_cce50e4c07746e3ce32d26de8b3af145_4
@x10)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(StlcStrongDbParSubst.typing x_cce50e4c07746e3ce32d26de8b3af145_4
@x3
@x4))

;; def=StlcStrongDbParSubst.fst(136,13-136,15); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= (StlcCbvDbParSubst.context_invariance @x3
@x1
@x4
@x7
x_cce50e4c07746e3ce32d26de8b3af145_4)
@x11)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(StlcStrongDbParSubst.typing x_cce50e4c07746e3ce32d26de8b3af145_4
(StlcStrongDbParSubst.EApp @x2
@x3)
@x5))

;; def=StlcCbvDbParSubst.fst(103,10-110,63); use=StlcCbvDbParSubst.fst(105,2-111,20)
(= (StlcStrongDbParSubst.TyApp x_cce50e4c07746e3ce32d26de8b3af145_4
@x2
@x3
@x4
@x5
(StlcCbvDbParSubst.context_invariance @x2
@x1
(StlcStrongDbParSubst.TArr @x4
@x5)
@x6
x_cce50e4c07746e3ce32d26de8b3af145_4)
(StlcCbvDbParSubst.context_invariance @x3
@x1
@x4
@x7
x_cce50e4c07746e3ce32d26de8b3af145_4))
@x12)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(110,4-110,63)
(and 
;; def=StlcCbvDbParSubst.fst(104,28-104,29); use=StlcCbvDbParSubst.fst(110,4-110,63)
(or label_13

;; def=StlcCbvDbParSubst.fst(104,28-104,29); use=StlcCbvDbParSubst.fst(110,4-110,63)
(= (StlcStrongDbParSubst.EApp @x2
@x3)
x_00c2c856e702f50718a37c394bb4dba3_0)
)


;; def=StlcCbvDbParSubst.fst(104,34-109,12); use=StlcCbvDbParSubst.fst(110,4-110,63)
(or label_14

;; def=StlcCbvDbParSubst.fst(104,34-109,12); use=StlcCbvDbParSubst.fst(110,4-110,63)
(= @x5
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
)
)
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(105,2-111,20)
(not 
;; def=StlcCbvDbParSubst.fst(104,36-104,37); use=StlcCbvDbParSubst.fst(105,8-105,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_2
x_5a46e118e90c9e1bd3eb623781c03d15_3))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(105,2-111,20)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(104,36-111,10); use=StlcCbvDbParSubst.fst(105,8-111,10)
(= x_5a46e118e90c9e1bd3eb623781c03d15_3
(StlcStrongDbParSubst.TyUnit @x1))
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(111,14-111,20)
(and 
;; def=StlcCbvDbParSubst.fst(104,28-104,29); use=StlcCbvDbParSubst.fst(111,14-111,20)
(or label_15

;; def=StlcCbvDbParSubst.fst(104,28-104,29); use=StlcCbvDbParSubst.fst(111,14-111,20)
(= StlcStrongDbParSubst.EUnit@tok
x_00c2c856e702f50718a37c394bb4dba3_0)
)


;; def=StlcCbvDbParSubst.fst(104,34-104,35); use=StlcCbvDbParSubst.fst(111,14-111,20)
(or label_16

;; def=StlcCbvDbParSubst.fst(104,34-104,35); use=StlcCbvDbParSubst.fst(111,14-111,20)
(= StlcStrongDbParSubst.TUnit@tok
x_fcf8df75f2957ee85ada8a1f90a7cec8_2)
)
)
)
 
;;no pats
:qid @query.26))
))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.context_invariance, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, @fuel_irrelevance_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, binder_x_00c2c856e702f50718a37c394bb4dba3_0, binder_x_5a46e118e90c9e1bd3eb623781c03d15_3, binder_x_cce50e4c07746e3ce32d26de8b3af145_4, binder_x_d7a08fe95d0edeffd31477bbf4345664_1, binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_2, bool_inversion, constructor_distinct_StlcStrongDbParSubst.EApp, constructor_distinct_StlcStrongDbParSubst.ELam, constructor_distinct_StlcStrongDbParSubst.EVar, constructor_distinct_StlcStrongDbParSubst.TyApp, constructor_distinct_StlcStrongDbParSubst.TyLam, data_elim_StlcStrongDbParSubst.TyApp, data_elim_StlcStrongDbParSubst.TyLam, data_elim_StlcStrongDbParSubst.TyVar, disc_equation_FStar.Pervasives.Native.Some, disc_equation_StlcStrongDbParSubst.TyApp, disc_equation_StlcStrongDbParSubst.TyLam, disc_equation_StlcStrongDbParSubst.TyUnit, disc_equation_StlcStrongDbParSubst.TyVar, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_Prims.nat, equation_StlcCbvDbParSubst.envEqualE, equation_StlcStrongDbParSubst.extend, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, fuel_guarded_inversion_StlcStrongDbParSubst.typing, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_StlcStrongDbParSubst.EApp__0, projection_inverse_StlcStrongDbParSubst.EApp__1, projection_inverse_StlcStrongDbParSubst.ELam__0, projection_inverse_StlcStrongDbParSubst.ELam__1, projection_inverse_StlcStrongDbParSubst.EVar__0, projection_inverse_StlcStrongDbParSubst.TyApp_e1, projection_inverse_StlcStrongDbParSubst.TyApp_e2, projection_inverse_StlcStrongDbParSubst.TyApp_g, projection_inverse_StlcStrongDbParSubst.TyApp_h1, projection_inverse_StlcStrongDbParSubst.TyApp_h2, projection_inverse_StlcStrongDbParSubst.TyApp_t11, projection_inverse_StlcStrongDbParSubst.TyApp_t12, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8, refinement_interpretation_Tm_refine_f5705c081cc8d8395b0d7e23ef7d0b72, subterm_ordering_StlcStrongDbParSubst.TyApp, subterm_ordering_StlcStrongDbParSubst.TyLam, token_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, typing_StlcCbvDbParSubst.appears_free_in, typing_StlcStrongDbParSubst.uu___is_TyVar, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec context_invariance


; <Start encoding let rec context_invariance>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcCbvDbParSubst.context_invariance.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcCbvDbParSubst.context_invariance.fuel_instrumented_token () Term)
(declare-fun StlcCbvDbParSubst.context_invariance (Term Term Term Term Term) Term)
(declare-fun StlcCbvDbParSubst.context_invariance@tok () Term)
(declare-fun Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 (Term Term) Term)


;;;;;;;;;;;;;;;;h: StlcStrongDbParSubst.typing g e t -> g': StlcStrongDbParSubst.env{envEqualE e g g'}   -> Prims.Tot (StlcStrongDbParSubst.typing g' e t)
(declare-fun Tm_arrow_ee78e33999839cfccd96e65a6496c695 () Term)

; </end encoding let rec context_invariance>


; encoding sigelt val StlcCbvDbParSubst.free_in_context


; <Skipped val StlcCbvDbParSubst.free_in_context/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(116,2-120,16)

;;;;;;;;;;;;;;;;x : StlcStrongDbParSubst.var (StlcStrongDbParSubst.var)
(declare-fun x_994c99bbacb216630d104a4d01f030da_0 () Term)
;;;;;;;;;;;;;;;;binder_x_994c99bbacb216630d104a4d01f030da_0
;;; Fact-ids: 
(assert (! (HasType x_994c99bbacb216630d104a4d01f030da_0
StlcStrongDbParSubst.var)
:named binder_x_994c99bbacb216630d104a4d01f030da_0))
;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_1 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_1
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_1
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_1))
;;;;;;;;;;;;;;;;g : StlcStrongDbParSubst.env (StlcStrongDbParSubst.env)
(declare-fun x_d7a08fe95d0edeffd31477bbf4345664_2 () Term)
;;;;;;;;;;;;;;;;binder_x_d7a08fe95d0edeffd31477bbf4345664_2
;;; Fact-ids: 
(assert (! (HasType x_d7a08fe95d0edeffd31477bbf4345664_2
StlcStrongDbParSubst.env)
:named binder_x_d7a08fe95d0edeffd31477bbf4345664_2))
;;;;;;;;;;;;;;;;t : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_3 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_3
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3))
;;;;;;;;;;;;;;;;h : StlcStrongDbParSubst.typing g e t (StlcStrongDbParSubst.typing g e t)
(declare-fun x_1d732eb866c2d6a93569d4f5389d0e8a_4 () Term)
;;;;;;;;;;;;;;;;binder_x_1d732eb866c2d6a93569d4f5389d0e8a_4
;;; Fact-ids: 
(assert (! (HasType x_1d732eb866c2d6a93569d4f5389d0e8a_4
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3))
:named binder_x_1d732eb866c2d6a93569d4f5389d0e8a_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.free_in_context (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.free_in_context@tok () Term)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       (StlcCbvDbParSubst.appears_free_in x e ==> Some? (g x)) ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(TyVar? h) /\ ~(TyLam? h) /\ ~(TyApp? h) /\ ~(TyUnit? h) ==> Prims.l_False) /\
;       (forall (b: StlcStrongDbParSubst.env) (b: x: StlcStrongDbParSubst.var{Some? (b x)}).
;           h == StlcStrongDbParSubst.TyVar b ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(TyVar? h) ==>
;         (forall (b: StlcStrongDbParSubst.env)
;             (b: StlcStrongDbParSubst.typ)
;             (b: StlcStrongDbParSubst.exp)
;             (b: StlcStrongDbParSubst.typ)
;             (b: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b b) b b).
;             h == StlcStrongDbParSubst.TyLam b b ==>
;             x + 1 >= 0 /\
;             (forall (return_val: StlcStrongDbParSubst.var).
;                 return_val == x + 1 ==>
;                 b << h /\
;                 (forall (any_result:
;                     StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b b) b b).
;                     b == any_result ==>
;                     (forall (pure_result: Prims.unit).
;                         (StlcCbvDbParSubst.appears_free_in (x + 1) b ==>
;                           Some? (StlcStrongDbParSubst.extend b b (x + 1))) ==>
;                         k pure_result)))) /\
;         (~(TyLam? h) ==>
;           (forall (b: StlcStrongDbParSubst.env)
;               (b: StlcStrongDbParSubst.exp)
;               (b: StlcStrongDbParSubst.exp)
;               (b: StlcStrongDbParSubst.typ)
;               (b: StlcStrongDbParSubst.typ)
;               (b: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b))
;               (b: StlcStrongDbParSubst.typing b b b).
;               h == StlcStrongDbParSubst.TyApp b b ==>
;               b << h /\
;               (forall (any_result: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b)).
;                   b == any_result ==>
;                   (forall (pure_result: Prims.unit).
;                       (StlcCbvDbParSubst.appears_free_in x b ==> Some? (b x)) ==>
;                       b << h /\
;                       (forall (any_result: StlcStrongDbParSubst.typing b b b).
;                           b == any_result ==>
;                           (forall (pure_result: Prims.unit).
;                               (StlcCbvDbParSubst.appears_free_in x b ==> Some? (b x)) ==>
;                               k pure_result))))) /\
;           (~(TyApp? h) ==>
;             (forall (b: StlcStrongDbParSubst.env).
;                 h == StlcStrongDbParSubst.TyUnit ==> (forall (any_result: Prims.unit). k any_result)
;             )))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec free_in_context`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))
(implies 
;; def=StlcCbvDbParSubst.fst(114,38-114,57); use=StlcCbvDbParSubst.fst(116,2-120,16)
(BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_1))


;; def=StlcCbvDbParSubst.fst(114,62-114,73); use=StlcCbvDbParSubst.fst(116,2-120,16)
(or label_2

;; def=StlcCbvDbParSubst.fst(114,62-114,73); use=StlcCbvDbParSubst.fst(116,2-120,16)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_2
x_994c99bbacb216630d104a4d01f030da_0)))
)
))

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(116,2-120,16)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(116,2-120,16)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(116,2-120,16)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(116,2-120,16)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(116,2-120,16)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(116,2-120,16)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(116,2-120,16)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(116,2-120,16)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(116,2-120,16)
(and (implies 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(and 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(not 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_1d732eb866c2d6a93569d4f5389d0e8a_4))
)


;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(not 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_1d732eb866c2d6a93569d4f5389d0e8a_4))
)


;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(not 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_1d732eb866c2d6a93569d4f5389d0e8a_4))
)


;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(not 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyUnit x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_1d732eb866c2d6a93569d4f5389d0e8a_4))
)
)

label_3)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x2))

;; def=StlcCbvDbParSubst.fst(115,35-117,11); use=StlcCbvDbParSubst.fst(116,8-117,11)
(= x_1d732eb866c2d6a93569d4f5389d0e8a_4
(StlcStrongDbParSubst.TyVar @x2
@x3))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(116,2-120,16)
(not 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_1d732eb866c2d6a93569d4f5389d0e8a_4))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(116,2-120,16)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x3
@x2)
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(115,35-118,14); use=StlcCbvDbParSubst.fst(116,8-118,14)
(= x_1d732eb866c2d6a93569d4f5389d0e8a_4
(StlcStrongDbParSubst.TyLam @x2
@x3
@x4
@x5
@x6))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(116,2-120,16)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(118,34-118,39)
(or label_4

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(118,34-118,39)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(116,2-120,16)
(= @x7
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(116,2-120,16)
(and 
;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(118,40-118,42)
(or label_5

;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(118,40-118,42)
(Valid 
;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(118,40-118,42)
(Prims.precedes (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x3
@x2)
@x4
@x5)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3)
@x6
x_1d732eb866c2d6a93569d4f5389d0e8a_4)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x3
@x2)
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(113,61-118,14); use=StlcCbvDbParSubst.fst(116,2-120,16)
(= @x6
@x8)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(118,18-118,33)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=StlcCbvDbParSubst.fst(114,37-114,74); use=StlcCbvDbParSubst.fst(118,18-118,33)
(implies 
;; def=StlcCbvDbParSubst.fst(114,38-114,57); use=StlcCbvDbParSubst.fst(118,18-118,33)
(BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
@x4))


;; def=StlcCbvDbParSubst.fst(114,62-114,73); use=StlcCbvDbParSubst.fst(118,18-118,33)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT (ApplyTT (ApplyTT StlcStrongDbParSubst.extend@tok
@x3)
@x2)
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(118,18-118,33)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(118,18-118,33)
(ApplyTT @x1
@x9)
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(116,2-120,16)
(not 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_1d732eb866c2d6a93569d4f5389d0e8a_4))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(116,2-120,16)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x6 Term))
 (! (implies (HasType @x6
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(StlcStrongDbParSubst.typing @x2
@x3
(StlcStrongDbParSubst.TArr @x5
@x6)))

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StlcStrongDbParSubst.typing @x2
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(115,35-119,15); use=StlcCbvDbParSubst.fst(116,8-119,15)
(= x_1d732eb866c2d6a93569d4f5389d0e8a_4
(StlcStrongDbParSubst.TyApp @x2
@x3
@x4
@x5
@x6
@x7
@x8))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(116,2-120,16)
(and 
;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(119,37-119,39)
(or label_6

;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(119,37-119,39)
(Valid 
;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(119,37-119,39)
(Prims.precedes (StlcStrongDbParSubst.typing @x2
@x3
(StlcStrongDbParSubst.TArr @x5
@x6))
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3)
@x7
x_1d732eb866c2d6a93569d4f5389d0e8a_4)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StlcStrongDbParSubst.typing @x2
@x3
(StlcStrongDbParSubst.TArr @x5
@x6)))

;; def=StlcCbvDbParSubst.fst(113,61-119,12); use=StlcCbvDbParSubst.fst(116,2-120,16)
(= @x7
@x9)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(119,19-119,34)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=StlcCbvDbParSubst.fst(114,37-114,74); use=StlcCbvDbParSubst.fst(119,19-119,34)
(implies 
;; def=StlcCbvDbParSubst.fst(114,38-114,57); use=StlcCbvDbParSubst.fst(119,19-119,34)
(BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in x_994c99bbacb216630d104a4d01f030da_0
@x3))


;; def=StlcCbvDbParSubst.fst(114,62-114,73); use=StlcCbvDbParSubst.fst(119,19-119,34)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT @x2
x_994c99bbacb216630d104a4d01f030da_0)))
)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(116,2-120,16)
(and 
;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(119,59-119,61)
(or label_7

;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(119,59-119,61)
(Valid 
;; def=StlcCbvDbParSubst.fst(116,2-120,16); use=StlcCbvDbParSubst.fst(119,59-119,61)
(Prims.precedes (StlcStrongDbParSubst.typing @x2
@x4
@x5)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3)
@x8
x_1d732eb866c2d6a93569d4f5389d0e8a_4)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(StlcStrongDbParSubst.typing @x2
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(113,61-119,15); use=StlcCbvDbParSubst.fst(116,2-120,16)
(= @x8
@x11)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(119,41-119,56)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=StlcCbvDbParSubst.fst(114,37-114,74); use=StlcCbvDbParSubst.fst(119,41-119,56)
(implies 
;; def=StlcCbvDbParSubst.fst(114,38-114,57); use=StlcCbvDbParSubst.fst(119,41-119,56)
(BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in x_994c99bbacb216630d104a4d01f030da_0
@x4))


;; def=StlcCbvDbParSubst.fst(114,62-114,73); use=StlcCbvDbParSubst.fst(119,41-119,56)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT @x2
x_994c99bbacb216630d104a4d01f030da_0)))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(119,41-119,56)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(119,41-119,56)
(ApplyTT @x1
@x12)
)
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(116,2-120,16)
(not 
;; def=StlcCbvDbParSubst.fst(115,35-115,36); use=StlcCbvDbParSubst.fst(116,8-116,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp x_d7a08fe95d0edeffd31477bbf4345664_2
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_1d732eb866c2d6a93569d4f5389d0e8a_4))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(115,35-120,10); use=StlcCbvDbParSubst.fst(116,8-120,10)
(= x_1d732eb866c2d6a93569d4f5389d0e8a_4
(StlcStrongDbParSubst.TyUnit @x2))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(116,2-120,16)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.free_in_context, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, @fuel_irrelevance_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, StlcStrongDbParSubst_interpretation_Tm_arrow_537baed5a6ddfc86c6c3de16b2197b39, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, binder_x_00c2c856e702f50718a37c394bb4dba3_1, binder_x_1d732eb866c2d6a93569d4f5389d0e8a_4, binder_x_994c99bbacb216630d104a4d01f030da_0, bool_inversion, constructor_distinct_StlcStrongDbParSubst.EApp, constructor_distinct_StlcStrongDbParSubst.ELam, constructor_distinct_StlcStrongDbParSubst.EUnit, constructor_distinct_StlcStrongDbParSubst.EVar, data_elim_StlcStrongDbParSubst.TyApp, data_elim_StlcStrongDbParSubst.TyLam, data_elim_StlcStrongDbParSubst.TyUnit, data_elim_StlcStrongDbParSubst.TyVar, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, disc_equation_StlcStrongDbParSubst.TyApp, disc_equation_StlcStrongDbParSubst.TyLam, disc_equation_StlcStrongDbParSubst.TyUnit, disc_equation_StlcStrongDbParSubst.TyVar, equality_tok_StlcStrongDbParSubst.EUnit@tok, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_Prims.nat, equation_StlcStrongDbParSubst.env, equation_StlcStrongDbParSubst.extend, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, fuel_guarded_inversion_StlcStrongDbParSubst.typing, function_token_typing_Prims.__cache_version_number__, function_token_typing_StlcStrongDbParSubst.extend, int_inversion, interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0, kinding_StlcStrongDbParSubst.typ@tok, lemma_FStar.Pervasives.invertOption, primitive_Prims.op_Addition, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_StlcStrongDbParSubst.EApp__0, projection_inverse_StlcStrongDbParSubst.EApp__1, projection_inverse_StlcStrongDbParSubst.ELam__0, projection_inverse_StlcStrongDbParSubst.ELam__1, projection_inverse_StlcStrongDbParSubst.EVar__0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8, subterm_ordering_StlcStrongDbParSubst.TyApp, subterm_ordering_StlcStrongDbParSubst.TyLam, token_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, typing_StlcCbvDbParSubst.appears_free_in, typing_tok_StlcStrongDbParSubst.EUnit@tok, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec free_in_context


; <Start encoding let rec free_in_context>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.free_in_context (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.free_in_context@tok () Term)

; </end encoding let rec free_in_context>


; encoding sigelt val StlcCbvDbParSubst.typable_empty_not_free


; <Skipped val StlcCbvDbParSubst.typable_empty_not_free/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(125,39-125,58)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (e: StlcStrongDbParSubst.exp)
;   (t: StlcStrongDbParSubst.typ)
;   (h: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         Prims.op_Negation (StlcCbvDbParSubst.appears_free_in x e) ==> p pure_result) ==>
;     (forall (pure_result: Prims.unit).
;         (StlcCbvDbParSubst.appears_free_in x e ==> Some? (StlcStrongDbParSubst.empty x)) ==>
;         p pure_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let typable_empty_not_free`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x1
@x2)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(125,39-125,58)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))
(or label_2
(not (BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in @x0
@x1)))))

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(125,39-125,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(125,39-125,58)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(125,39-125,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(125,39-125,58)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(125,39-125,58)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=StlcCbvDbParSubst.fst(114,37-114,74); use=StlcCbvDbParSubst.fst(125,39-125,54)
(implies 
;; def=StlcCbvDbParSubst.fst(114,38-114,57); use=StlcCbvDbParSubst.fst(125,39-125,54)
(BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in @x0
@x1))


;; def=StlcCbvDbParSubst.fst(114,62-114,73); use=StlcCbvDbParSubst.fst(125,39-125,54)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT (StlcStrongDbParSubst.empty Dummy_value)
@x0)))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(125,39-125,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(125,39-125,58)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.typable_empty_not_free, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, constructor_distinct_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_StlcStrongDbParSubst.empty, projection_inverse_BoxBool_proj_0, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let typable_empty_not_free


; <Start encoding let typable_empty_not_free>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.typable_empty_not_free (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.typable_empty_not_free@tok () Term)

; </end encoding let typable_empty_not_free>


; encoding sigelt val StlcCbvDbParSubst.below


; <Skipped val StlcCbvDbParSubst.below/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(129,2-133,17)

;;;;;;;;;;;;;;;;x : StlcStrongDbParSubst.var (StlcStrongDbParSubst.var)
(declare-fun x_994c99bbacb216630d104a4d01f030da_0 () Term)
;;;;;;;;;;;;;;;;binder_x_994c99bbacb216630d104a4d01f030da_0
;;; Fact-ids: 
(assert (! (HasType x_994c99bbacb216630d104a4d01f030da_0
StlcStrongDbParSubst.var)
:named binder_x_994c99bbacb216630d104a4d01f030da_0))
;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_1 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_1
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_1
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_1))
(declare-fun Tm_refine_ab303d4db32ac9ee35cec1c887786fc0 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_ab303d4db32ac9ee35cec1c887786fc0
Tm_type)
:named refinement_kinding_Tm_refine_ab303d4db32ac9ee35cec1c887786fc0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(127,21-133,17); use=StlcCbvDbParSubst.fst(127,21-133,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ab303d4db32ac9ee35cec1c887786fc0)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(129,2-133,17)

;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(129,2-133,17)
(Valid 
;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(129,2-133,17)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x1
x_00c2c856e702f50718a37c394bb4dba3_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ab303d4db32ac9ee35cec1c887786fc0))
:qid refinement_interpretation_Tm_refine_ab303d4db32ac9ee35cec1c887786fc0))

:named refinement_interpretation_Tm_refine_ab303d4db32ac9ee35cec1c887786fc0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ab303d4db32ac9ee35cec1c887786fc0
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ab303d4db32ac9ee35cec1c887786fc0))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_ab303d4db32ac9ee35cec1c887786fc0))
(declare-fun StlcCbvDbParSubst.below (Term Term) Term)

;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var -> e: StlcStrongDbParSubst.exp{e << e} -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_cbbd70152522f33498e96c60836dfee5 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cbbd70152522f33498e96c60836dfee5
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_cbbd70152522f33498e96c60836dfee5
Tm_type)
:named kinding_Tm_arrow_cbbd70152522f33498e96c60836dfee5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(127,14-133,17); use=StlcCbvDbParSubst.fst(127,21-133,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_cbbd70152522f33498e96c60836dfee5)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_cbbd70152522f33498e96c60836dfee5))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_cbbd70152522f33498e96c60836dfee5))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_cbbd70152522f33498e96c60836dfee5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cbbd70152522f33498e96c60836dfee5
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(127,14-133,17); use=StlcCbvDbParSubst.fst(127,21-133,17)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_cbbd70152522f33498e96c60836dfee5)
(and 
;; def=StlcCbvDbParSubst.fst(127,14-133,17); use=StlcCbvDbParSubst.fst(127,21-133,17)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
Tm_refine_ab303d4db32ac9ee35cec1c887786fc0))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Prims.bool))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_cbbd70152522f33498e96c60836dfee5.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(127,14-133,17); use=StlcCbvDbParSubst.fst(127,21-133,17)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_cbbd70152522f33498e96c60836dfee5.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_cbbd70152522f33498e96c60836dfee5))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_cbbd70152522f33498e96c60836dfee5))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_cbbd70152522f33498e96c60836dfee5))
(declare-fun StlcCbvDbParSubst.below@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StlcCbvDbParSubst.below@tok
@x0)
@x1)
(StlcCbvDbParSubst.below @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StlcCbvDbParSubst.below@tok
@x0)
@x1))
:qid token_correspondence_StlcCbvDbParSubst.below))

:named token_correspondence_StlcCbvDbParSubst.below))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.below@tok
Tm_arrow_cbbd70152522f33498e96c60836dfee5))

;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StlcCbvDbParSubst.below@tok
@x1)
@x2)
(StlcCbvDbParSubst.below @x1
@x2))
 

:pattern ((StlcCbvDbParSubst.below @x1
@x2))
:qid function_token_typing_StlcCbvDbParSubst.below.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.below@tok))
:qid function_token_typing_StlcCbvDbParSubst.below))

:named function_token_typing_StlcCbvDbParSubst.below))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
Tm_refine_ab303d4db32ac9ee35cec1c887786fc0))
(HasType (StlcCbvDbParSubst.below @x0
@x1)
Prims.bool))
 

:pattern ((StlcCbvDbParSubst.below @x0
@x1))
:qid typing_StlcCbvDbParSubst.below))

:named typing_StlcCbvDbParSubst.below))
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k: Prims.pure_post Prims.bool).
;   (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(EVar? e) /\ ~(EApp? e) /\ ~(ELam? e) /\ ~(EUnit? e) ==> Prims.l_False) /\
;   (~(EVar? e) ==>
;     (forall (b: StlcStrongDbParSubst.exp) (b: StlcStrongDbParSubst.exp).
;         e == StlcStrongDbParSubst.EApp b b ==> b << e /\ (StlcCbvDbParSubst.below x b ==> b << e)) /\
;     (~(EApp? e) ==>
;       (forall (b: StlcStrongDbParSubst.typ) (b: StlcStrongDbParSubst.exp).
;           e == StlcStrongDbParSubst.ELam b b ==>
;           x + 1 >= 0 /\
;           (forall (return_val: StlcStrongDbParSubst.var). return_val == x + 1 ==> b << e))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec below`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(129,2-133,17)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(129,2-133,17)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(129,2-133,17)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(129,2-133,17)
(and (implies 
;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(and 
;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(not 
;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(not 
;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EApp x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(not 
;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_ELam x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(not 
;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EUnit x_00c2c856e702f50718a37c394bb4dba3_1))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(129,2-133,17)
(not 
;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(129,2-133,17)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(129,2-133,17)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(129,2-133,17)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(128,16-131,14); use=StlcCbvDbParSubst.fst(129,8-131,14)
(= x_00c2c856e702f50718a37c394bb4dba3_1
(StlcStrongDbParSubst.EApp @x1
@x2))
)

;; def=StlcCbvDbParSubst.fst(131,9-131,28); use=StlcCbvDbParSubst.fst(131,18-131,42)
(and 
;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(131,26-131,28)
(or label_2

;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(131,26-131,28)
(Valid 
;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(131,26-131,28)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x1
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)

(implies 
;; def=StlcCbvDbParSubst.fst(131,18-131,28); use=StlcCbvDbParSubst.fst(131,18-131,28)
(BoxBool_proj_0 (StlcCbvDbParSubst.below x_994c99bbacb216630d104a4d01f030da_0
@x1))


;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(131,40-131,42)
(or label_3

;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(131,40-131,42)
(Valid 
;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(131,40-131,42)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(129,2-133,17)
(not 
;; def=StlcCbvDbParSubst.fst(128,16-128,17); use=StlcCbvDbParSubst.fst(129,8-129,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EApp x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(129,2-133,17)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(129,2-133,17)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(128,16-132,13); use=StlcCbvDbParSubst.fst(129,8-132,13)
(= x_00c2c856e702f50718a37c394bb4dba3_1
(StlcStrongDbParSubst.ELam @x1
@x2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(129,2-133,17)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(132,23-132,28)
(or label_4

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(132,23-132,28)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(129,2-133,17)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(129,2-133,17)
(= @x3
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
)

;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(132,29-132,31)
(or label_5

;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(132,29-132,31)
(Valid 
;; def=StlcCbvDbParSubst.fst(129,2-133,17); use=StlcCbvDbParSubst.fst(132,29-132,31)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.below, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3, binder_x_00c2c856e702f50718a37c394bb4dba3_1, binder_x_994c99bbacb216630d104a4d01f030da_0, disc_equation_StlcStrongDbParSubst.EApp, disc_equation_StlcStrongDbParSubst.ELam, disc_equation_StlcStrongDbParSubst.EUnit, disc_equation_StlcStrongDbParSubst.EVar, equality_tok_StlcStrongDbParSubst.EUnit@tok, equation_Prims.nat, equation_StlcStrongDbParSubst.var, fuel_guarded_inversion_StlcStrongDbParSubst.exp, int_inversion, primitive_Prims.op_Addition, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, subterm_ordering_StlcStrongDbParSubst.EApp, subterm_ordering_StlcStrongDbParSubst.ELam, typing_tok_StlcStrongDbParSubst.EUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec below


; <Start encoding let rec below>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcCbvDbParSubst.below.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcCbvDbParSubst.below.fuel_instrumented_token () Term)
(declare-fun StlcCbvDbParSubst.below (Term Term) Term)
(declare-fun StlcCbvDbParSubst.below@tok () Term)


; </end encoding let rec below>


; encoding sigelt val StlcCbvDbParSubst.closed


; <Skipped val StlcCbvDbParSubst.closed/>


; encoding sigelt let closed


; <Start encoding let closed>

(declare-fun StlcCbvDbParSubst.closed (Term) Term)

(declare-fun StlcCbvDbParSubst.closed@tok () Term)

; </end encoding let closed>


; encoding sigelt let pclosed


; <Start encoding let pclosed>

(declare-fun StlcCbvDbParSubst.pclosed (Term) Term)
;;;;;;;;;;;;;;;;e: StlcStrongDbParSubst.exp -> Prims.logical
(declare-fun Tm_arrow_b8b64b8ac42361ca593831f26683d5ab () Term)
(declare-fun StlcCbvDbParSubst.pclosed@tok () Term)

; </end encoding let pclosed>


; encoding sigelt val StlcCbvDbParSubst.closed_appears_free


; <Start encoding val StlcCbvDbParSubst.closed_appears_free>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.closed_appears_free (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.closed_appears_free@tok () Term)

; </end encoding val StlcCbvDbParSubst.closed_appears_free>


; encoding sigelt val StlcCbvDbParSubst.appears_free_closed


; <Start encoding val StlcCbvDbParSubst.appears_free_closed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.appears_free_closed (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.appears_free_closed@tok () Term)

; </end encoding val StlcCbvDbParSubst.appears_free_closed>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(154,33-154,72)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (x: StlcStrongDbParSubst.var) (g: StlcStrongDbParSubst.env).
;   (*  - Could not prove post-condition
; *)
;   forall (y: StlcStrongDbParSubst.var).
;     y >= x ==> Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)


; Context: While encoding a query
; While typechecking the top-level declaration `let below_env`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.env))

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(154,33-154,72)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(154,50-154,56); use=StlcCbvDbParSubst.fst(154,50-154,56)
(>= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x0))
)

;; def=Prims.fst(73,23-73,30); use=StlcStrongDbParSubst.fst(110,22-110,34)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(154,50-154,71)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(154,50-154,71)
(Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.below_env, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_StlcStrongDbParSubst.typ__uu___haseq, kinding_StlcStrongDbParSubst.typ@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let below_env


; <Start encoding let below_env>

(declare-fun StlcCbvDbParSubst.below_env (Term Term) Term)
;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var -> g: StlcStrongDbParSubst.env -> Prims.logical
(declare-fun Tm_arrow_6ac6315d8efcb536915c998e365acca2 () Term)
(declare-fun StlcCbvDbParSubst.below_env@tok () Term)

; </end encoding let below_env>


; encoding sigelt val StlcCbvDbParSubst.typable_below


; <Skipped val StlcCbvDbParSubst.typable_below/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.below_env; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(154,5-154,14); use=StlcCbvDbParSubst.fst(154,5-154,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.env))
(HasType (StlcCbvDbParSubst.below_env @x0
@x1)
Prims.logical))
 

:pattern ((StlcCbvDbParSubst.below_env @x0
@x1))
:qid typing_StlcCbvDbParSubst.below_env))

:named typing_StlcCbvDbParSubst.below_env))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.below; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.exp))
(HasType (StlcCbvDbParSubst.below @x0
@x1)
Prims.bool))
 

:pattern ((StlcCbvDbParSubst.below @x0
@x1))
:qid typing_StlcCbvDbParSubst.below))

:named typing_StlcCbvDbParSubst.below))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StlcCbvDbParSubst.below; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp))
(HasType (StlcCbvDbParSubst.below.fuel_instrumented @u0
@x1
@x2)
Prims.bool))
 

:pattern ((StlcCbvDbParSubst.below.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_StlcCbvDbParSubst.below.fuel_instrumented))

:named token_correspondence_StlcCbvDbParSubst.below.fuel_instrumented))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StlcCbvDbParSubst.below
;;; Fact-ids: Name StlcCbvDbParSubst.below; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp))
(= (StlcCbvDbParSubst.below.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-StlcStrongDbParSubst.EVar @lb3)
(Prims.op_LessThan (StlcStrongDbParSubst.EVar__0 @lb3)
@x1)
(ite (is-StlcStrongDbParSubst.EApp @lb3)
(Prims.op_AmpAmp (StlcCbvDbParSubst.below.fuel_instrumented @u0
@x1
(StlcStrongDbParSubst.EApp__0 @lb3))
(StlcCbvDbParSubst.below.fuel_instrumented @u0
@x1
(StlcStrongDbParSubst.EApp__1 @lb3)))
(ite (is-StlcStrongDbParSubst.ELam @lb3)
(StlcCbvDbParSubst.below.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(StlcStrongDbParSubst.ELam__1 @lb3))
(ite (is-StlcStrongDbParSubst.EUnit @lb3)
(BoxBool true)
Tm_unit)))))))
 :weight 0


:pattern ((StlcCbvDbParSubst.below.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_StlcCbvDbParSubst.below.fuel_instrumented))

:named equation_with_fuel_StlcCbvDbParSubst.below.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.below_env
;;; Fact-ids: Name StlcCbvDbParSubst.below_env; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(154,5-154,14); use=StlcCbvDbParSubst.fst(154,5-154,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (StlcCbvDbParSubst.below_env @x0
@x1))

;; def=StlcCbvDbParSubst.fst(154,33-154,72); use=StlcCbvDbParSubst.fst(154,33-154,72)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(154,50-154,56); use=StlcCbvDbParSubst.fst(154,50-154,56)
(>= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x0))
)

;; def=StlcCbvDbParSubst.fst(154,61-154,71); use=StlcCbvDbParSubst.fst(154,61-154,71)
(= (ApplyTT @x1
@x2)
(FStar.Pervasives.Native.None StlcStrongDbParSubst.typ))
)
 
;;no pats
:qid equation_StlcCbvDbParSubst.below_env.1))
)
 

:pattern ((StlcCbvDbParSubst.below_env @x0
@x1))
:qid equation_StlcCbvDbParSubst.below_env))

:named equation_StlcCbvDbParSubst.below_env))
;;;;;;;;;;;;;;;;Prop-typing for StlcCbvDbParSubst.below_env
;;; Fact-ids: Name StlcCbvDbParSubst.below_env; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(154,5-154,14); use=StlcCbvDbParSubst.fst(154,5-154,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.env))
(Valid (Prims.subtype_of (StlcCbvDbParSubst.below_env @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (StlcCbvDbParSubst.below_env @x0
@x1)
Prims.unit))
:qid defn_equation_StlcCbvDbParSubst.below_env))

:named defn_equation_StlcCbvDbParSubst.below_env))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StlcCbvDbParSubst.below; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (StlcCbvDbParSubst.below.fuel_instrumented (SFuel @u0)
@x1
@x2)
(StlcCbvDbParSubst.below.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((StlcCbvDbParSubst.below.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_StlcCbvDbParSubst.below.fuel_instrumented))

:named @fuel_irrelevance_StlcCbvDbParSubst.below.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StlcCbvDbParSubst.below; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(128,8-128,13); use=StlcCbvDbParSubst.fst(128,8-128,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcCbvDbParSubst.below @x0
@x1)
(StlcCbvDbParSubst.below.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((StlcCbvDbParSubst.below @x0
@x1))
:qid @fuel_correspondence_StlcCbvDbParSubst.below.fuel_instrumented))

:named @fuel_correspondence_StlcCbvDbParSubst.below.fuel_instrumented))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(160,2-164,16)

;;;;;;;;;;;;;;;;x : StlcStrongDbParSubst.var (StlcStrongDbParSubst.var)
(declare-fun x_994c99bbacb216630d104a4d01f030da_0 () Term)
;;;;;;;;;;;;;;;;binder_x_994c99bbacb216630d104a4d01f030da_0
;;; Fact-ids: 
(assert (! (HasType x_994c99bbacb216630d104a4d01f030da_0
StlcStrongDbParSubst.var)
:named binder_x_994c99bbacb216630d104a4d01f030da_0))
;;;;;;;;;;;;;;;;g : StlcStrongDbParSubst.env (StlcStrongDbParSubst.env)
(declare-fun x_d7a08fe95d0edeffd31477bbf4345664_1 () Term)
;;;;;;;;;;;;;;;;binder_x_d7a08fe95d0edeffd31477bbf4345664_1
;;; Fact-ids: 
(assert (! (HasType x_d7a08fe95d0edeffd31477bbf4345664_1
StlcStrongDbParSubst.env)
:named binder_x_d7a08fe95d0edeffd31477bbf4345664_1))
;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_2 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_2
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_2
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_2))
;;;;;;;;;;;;;;;;t : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_3 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_3
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3))
;;;;;;;;;;;;;;;;h : h: StlcStrongDbParSubst.typing g e t {StlcCbvDbParSubst.below_env x g} (h: StlcStrongDbParSubst.typing g e t {StlcCbvDbParSubst.below_env x g})
(declare-fun x_23043b15956034e880f31c79bfd896e4_4 () Term)
(declare-fun Tm_refine_17412b10d7e1a0cd831412000ec09ff7 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_17412b10d7e1a0cd831412000ec09ff7
Tm_type)
:named refinement_kinding_Tm_refine_17412b10d7e1a0cd831412000ec09ff7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(157,29-157,58); use=StlcCbvDbParSubst.fst(159,8-159,21)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_17412b10d7e1a0cd831412000ec09ff7)
(and (HasTypeFuel @u0
@x1
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3))

;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(159,8-159,21)
(Valid 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(159,8-159,21)
(StlcCbvDbParSubst.below_env x_994c99bbacb216630d104a4d01f030da_0
x_d7a08fe95d0edeffd31477bbf4345664_1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_17412b10d7e1a0cd831412000ec09ff7))
:qid refinement_interpretation_Tm_refine_17412b10d7e1a0cd831412000ec09ff7))

:named refinement_interpretation_Tm_refine_17412b10d7e1a0cd831412000ec09ff7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_17412b10d7e1a0cd831412000ec09ff7
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_17412b10d7e1a0cd831412000ec09ff7))
(Valid (Prims.hasEq (StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3))))
:named haseqTm_refine_17412b10d7e1a0cd831412000ec09ff7))
;;;;;;;;;;;;;;;;binder_x_23043b15956034e880f31c79bfd896e4_4
;;; Fact-ids: 
(assert (! (HasType x_23043b15956034e880f31c79bfd896e4_4
Tm_refine_17412b10d7e1a0cd831412000ec09ff7)
:named binder_x_23043b15956034e880f31c79bfd896e4_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.typable_below (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.typable_below@tok () Term)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit). StlcCbvDbParSubst.below x e ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(TyVar? h) /\ ~(TyApp? h) /\ ~(TyLam? h) /\ ~(TyUnit? h) ==> Prims.l_False) /\
;       (forall (b: StlcStrongDbParSubst.env) (b: x: StlcStrongDbParSubst.var{Some? (b x)}).
;           h == StlcStrongDbParSubst.TyVar b ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(TyVar? h) ==>
;         (forall (b: StlcStrongDbParSubst.env)
;             (b: StlcStrongDbParSubst.exp)
;             (b: StlcStrongDbParSubst.exp)
;             (b: StlcStrongDbParSubst.typ)
;             (b: StlcStrongDbParSubst.typ)
;             (b: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b))
;             (b: StlcStrongDbParSubst.typing b b b).
;             h == StlcStrongDbParSubst.TyApp b b ==>
;             StlcCbvDbParSubst.below_env x b /\ b << h /\
;             (forall (any_result: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b)).
;                 b == any_result ==>
;                 (forall (pure_result: Prims.unit).
;                     StlcCbvDbParSubst.below x b ==>
;                     StlcCbvDbParSubst.below_env x b /\ b << h /\
;                     (forall (any_result: StlcStrongDbParSubst.typing b b b).
;                         b == any_result ==>
;                         (forall (pure_result: Prims.unit).
;                             StlcCbvDbParSubst.below x b ==> k pure_result))))) /\
;         (~(TyApp? h) ==>
;           (forall (b: StlcStrongDbParSubst.env)
;               (b: StlcStrongDbParSubst.typ)
;               (b: StlcStrongDbParSubst.exp)
;               (b: StlcStrongDbParSubst.typ)
;               (b: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b b) b b).
;               h == StlcStrongDbParSubst.TyLam b b ==>
;               x + 1 >= 0 /\
;               (forall (return_val: StlcStrongDbParSubst.var).
;                   return_val == x + 1 ==>
;                   StlcCbvDbParSubst.below_env (x + 1) (StlcStrongDbParSubst.extend b b) /\ b << h /\
;                   (forall (any_result:
;                       StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b b) b b).
;                       b == any_result ==>
;                       (forall (pure_result: Prims.unit).
;                           StlcCbvDbParSubst.below (x + 1) b ==> k pure_result)))) /\
;           (~(TyLam? h) ==>
;             (forall (b: StlcStrongDbParSubst.env).
;                 h == StlcStrongDbParSubst.TyUnit ==> (forall (any_result: Prims.unit). k any_result)
;             )))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec typable_below`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=StlcCbvDbParSubst.fst(158,37-158,48); use=StlcCbvDbParSubst.fst(160,2-164,16)
(or label_2

;; def=StlcCbvDbParSubst.fst(158,37-158,48); use=StlcCbvDbParSubst.fst(160,2-164,16)
(BoxBool_proj_0 (StlcCbvDbParSubst.below x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(160,2-164,16)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(160,2-164,16)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(160,2-164,16)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(160,2-164,16)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(160,2-164,16)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(160,2-164,16)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(160,2-164,16)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(160,2-164,16)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(160,2-164,16)
(and (implies 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(and 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(not 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_23043b15956034e880f31c79bfd896e4_4))
)


;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(not 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_23043b15956034e880f31c79bfd896e4_4))
)


;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(not 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_23043b15956034e880f31c79bfd896e4_4))
)


;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(not 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyUnit x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_23043b15956034e880f31c79bfd896e4_4))
)
)

label_3)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x2))

;; def=StlcCbvDbParSubst.fst(159,33-161,11); use=StlcCbvDbParSubst.fst(160,8-161,11)
(= x_23043b15956034e880f31c79bfd896e4_4
(StlcStrongDbParSubst.TyVar @x2
@x3))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(ApplyTT @x1
@x4)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(160,2-164,16)
(not 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_23043b15956034e880f31c79bfd896e4_4))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(160,2-164,16)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x6 Term))
 (! (implies (HasType @x6
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(StlcStrongDbParSubst.typing @x2
@x3
(StlcStrongDbParSubst.TArr @x5
@x6)))

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StlcStrongDbParSubst.typing @x2
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(159,33-162,15); use=StlcCbvDbParSubst.fst(160,8-162,15)
(= x_23043b15956034e880f31c79bfd896e4_4
(StlcStrongDbParSubst.TyApp @x2
@x3
@x4
@x5
@x6
@x7
@x8))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(160,2-164,16)
(and 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(162,35-162,37)
(or label_4

;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(162,35-162,37)
(Valid 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(162,35-162,37)
(StlcCbvDbParSubst.below_env x_994c99bbacb216630d104a4d01f030da_0
@x2)
)
)


;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(162,35-162,37)
(or label_5

;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(162,35-162,37)
(Valid 
;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(162,35-162,37)
(Prims.precedes (StlcStrongDbParSubst.typing @x2
@x3
(StlcStrongDbParSubst.TArr @x5
@x6))
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3)
@x7
x_23043b15956034e880f31c79bfd896e4_4)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StlcStrongDbParSubst.typing @x2
@x3
(StlcStrongDbParSubst.TArr @x5
@x6)))

;; def=StlcCbvDbParSubst.fst(157,29-162,12); use=StlcCbvDbParSubst.fst(160,2-164,16)
(= @x7
@x9)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(162,19-162,32)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=StlcCbvDbParSubst.fst(158,37-158,48); use=StlcCbvDbParSubst.fst(162,19-162,32)
(BoxBool_proj_0 (StlcCbvDbParSubst.below x_994c99bbacb216630d104a4d01f030da_0
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(160,2-164,16)
(and 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(162,55-162,57)
(or label_6

;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(162,55-162,57)
(Valid 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(162,55-162,57)
(StlcCbvDbParSubst.below_env x_994c99bbacb216630d104a4d01f030da_0
@x2)
)
)


;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(162,55-162,57)
(or label_7

;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(162,55-162,57)
(Valid 
;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(162,55-162,57)
(Prims.precedes (StlcStrongDbParSubst.typing @x2
@x4
@x5)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3)
@x8
x_23043b15956034e880f31c79bfd896e4_4)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(StlcStrongDbParSubst.typing @x2
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(157,29-162,15); use=StlcCbvDbParSubst.fst(160,2-164,16)
(= @x8
@x11)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(162,39-162,52)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=StlcCbvDbParSubst.fst(158,37-158,48); use=StlcCbvDbParSubst.fst(162,39-162,52)
(BoxBool_proj_0 (StlcCbvDbParSubst.below x_994c99bbacb216630d104a4d01f030da_0
@x4))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(162,39-162,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(162,39-162,52)
(ApplyTT @x1
@x12)
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(160,2-164,16)
(not 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_23043b15956034e880f31c79bfd896e4_4))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(160,2-164,16)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x3
@x2)
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(159,33-163,15); use=StlcCbvDbParSubst.fst(160,8-163,15)
(= x_23043b15956034e880f31c79bfd896e4_4
(StlcStrongDbParSubst.TyLam @x2
@x3
@x4
@x5
@x6))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(160,2-164,16)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(163,33-163,38)
(or label_8

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(163,33-163,38)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(160,2-164,16)
(= @x7
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(160,2-164,16)
(and 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(163,39-163,41)
(or label_9

;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(163,39-163,41)
(Valid 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(163,39-163,41)
(StlcCbvDbParSubst.below_env (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
(StlcStrongDbParSubst.extend @x3
@x2))
)
)


;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(163,39-163,41)
(or label_10

;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(163,39-163,41)
(Valid 
;; def=StlcCbvDbParSubst.fst(160,2-164,16); use=StlcCbvDbParSubst.fst(163,39-163,41)
(Prims.precedes (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x3
@x2)
@x4
@x5)
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3)
@x6
x_23043b15956034e880f31c79bfd896e4_4)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x3
@x2)
@x4
@x5))

;; def=StlcCbvDbParSubst.fst(157,29-163,15); use=StlcCbvDbParSubst.fst(160,2-164,16)
(= @x6
@x8)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(163,19-163,32)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=StlcCbvDbParSubst.fst(158,37-158,48); use=StlcCbvDbParSubst.fst(163,19-163,32)
(BoxBool_proj_0 (StlcCbvDbParSubst.below (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
@x4))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(163,19-163,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(163,19-163,32)
(ApplyTT @x1
@x9)
)
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(160,2-164,16)
(not 
;; def=StlcCbvDbParSubst.fst(159,33-159,34); use=StlcCbvDbParSubst.fst(160,8-160,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam x_d7a08fe95d0edeffd31477bbf4345664_1
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_23043b15956034e880f31c79bfd896e4_4))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(159,33-164,10); use=StlcCbvDbParSubst.fst(160,8-164,10)
(= x_23043b15956034e880f31c79bfd896e4_4
(StlcStrongDbParSubst.TyUnit @x2))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(160,2-164,16)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.typable_below, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcCbvDbParSubst.below.fuel_instrumented, @fuel_irrelevance_StlcCbvDbParSubst.below.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, binder_x_00c2c856e702f50718a37c394bb4dba3_2, binder_x_23043b15956034e880f31c79bfd896e4_4, binder_x_994c99bbacb216630d104a4d01f030da_0, bool_inversion, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_StlcStrongDbParSubst.EApp, constructor_distinct_StlcStrongDbParSubst.ELam, constructor_distinct_StlcStrongDbParSubst.EUnit, constructor_distinct_StlcStrongDbParSubst.EVar, data_elim_StlcStrongDbParSubst.TyApp, data_elim_StlcStrongDbParSubst.TyLam, data_elim_StlcStrongDbParSubst.TyUnit, data_elim_StlcStrongDbParSubst.TyVar, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, disc_equation_StlcStrongDbParSubst.TyApp, disc_equation_StlcStrongDbParSubst.TyLam, disc_equation_StlcStrongDbParSubst.TyUnit, disc_equation_StlcStrongDbParSubst.TyVar, equality_tok_StlcStrongDbParSubst.EUnit@tok, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_Prims.nat, equation_StlcCbvDbParSubst.below_env, equation_StlcStrongDbParSubst.extend, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcCbvDbParSubst.below.fuel_instrumented, fuel_guarded_inversion_StlcStrongDbParSubst.typing, function_token_typing_Prims.__cache_version_number__, int_inversion, int_typing, interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.None_a, projection_inverse_StlcStrongDbParSubst.EApp__0, projection_inverse_StlcStrongDbParSubst.EApp__1, projection_inverse_StlcStrongDbParSubst.ELam__0, projection_inverse_StlcStrongDbParSubst.ELam__1, projection_inverse_StlcStrongDbParSubst.EVar__0, refinement_interpretation_Tm_refine_17412b10d7e1a0cd831412000ec09ff7, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8, subterm_ordering_StlcStrongDbParSubst.TyApp, subterm_ordering_StlcStrongDbParSubst.TyLam, typing_StlcCbvDbParSubst.below, typing_tok_StlcStrongDbParSubst.EUnit@tok, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec typable_below


; <Start encoding let rec typable_below>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.typable_below (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.typable_below@tok () Term)

; </end encoding let rec typable_below>


; encoding sigelt val StlcCbvDbParSubst.typable_empty_closed


; <Skipped val StlcCbvDbParSubst.typable_empty_closed/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.closed; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(136,4-136,10); use=StlcCbvDbParSubst.fst(136,4-136,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcCbvDbParSubst.closed @x0)
Prims.bool))
 

:pattern ((StlcCbvDbParSubst.closed @x0))
:qid typing_StlcCbvDbParSubst.closed))

:named typing_StlcCbvDbParSubst.closed))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.closed
;;; Fact-ids: Name StlcCbvDbParSubst.closed; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(136,4-136,10); use=StlcCbvDbParSubst.fst(136,4-136,10)
(forall ((@x0 Term))
 (! (= (StlcCbvDbParSubst.closed @x0)
(StlcCbvDbParSubst.below (BoxInt 0)
@x0))
 

:pattern ((StlcCbvDbParSubst.closed @x0))
:qid equation_StlcCbvDbParSubst.closed))

:named equation_StlcCbvDbParSubst.closed))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(168,35-168,52)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (e: StlcStrongDbParSubst.exp)
;   (t: StlcStrongDbParSubst.typ)
;   (h: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit). StlcCbvDbParSubst.closed e ==> p pure_result) ==>
;     Prims.auto_squash (StlcCbvDbParSubst.below_env 0 StlcStrongDbParSubst.empty) /\
;     (forall (any_result: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t).
;         h == any_result ==>
;         (forall (pure_result: Prims.unit). StlcCbvDbParSubst.below 0 e ==> p pure_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let typable_empty_closed`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x0
@x1)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(168,35-168,52)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=StlcCbvDbParSubst.fst(167,21-167,31); use=StlcCbvDbParSubst.fst(168,35-168,52)
(or label_2

;; def=StlcCbvDbParSubst.fst(167,21-167,31); use=StlcCbvDbParSubst.fst(168,35-168,52)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x0))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(168,35-168,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(168,35-168,52)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(168,35-168,52)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(168,35-168,52)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(168,35-168,52)
(and 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(168,51-168,52)
(or label_3

;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(168,51-168,52)
(Valid 
;; def=StlcCbvDbParSubst.fst(157,44-157,57); use=StlcCbvDbParSubst.fst(168,51-168,52)
(StlcCbvDbParSubst.below_env (BoxInt 0)
(StlcStrongDbParSubst.empty Dummy_value))
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(168,35-168,52)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x0
@x1))

;; def=StlcCbvDbParSubst.fst(157,29-168,32); use=StlcCbvDbParSubst.fst(168,35-168,52)
(= @x2
@x4)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(168,35-168,48)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=StlcCbvDbParSubst.fst(158,37-158,48); use=StlcCbvDbParSubst.fst(168,35-168,48)
(BoxBool_proj_0 (StlcCbvDbParSubst.below (BoxInt 0)
@x0))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(168,35-168,48)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(168,35-168,48)
(ApplyTT @x3
@x5)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.typable_empty_closed, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_StlcCbvDbParSubst.below_env, equation_StlcCbvDbParSubst.closed, equation_StlcStrongDbParSubst.empty

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let typable_empty_closed


; <Start encoding let typable_empty_closed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.typable_empty_closed (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.typable_empty_closed@tok () Term)

; </end encoding let typable_empty_closed>


; encoding sigelt val StlcCbvDbParSubst.sub_beta_gen


; <Skipped val StlcCbvDbParSubst.sub_beta_gen/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(171,32-173,49)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (x: StlcStrongDbParSubst.var) (v: StlcStrongDbParSubst.exp) (y: StlcStrongDbParSubst.var).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post StlcStrongDbParSubst.exp).
;     (forall (x: StlcStrongDbParSubst.exp). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)
;     ) ==>
;     ~(y < x = true) ==>
;     (forall (b: Prims.bool).
;         y < x == b ==>
;         Prims.hasEq StlcStrongDbParSubst.var /\
;         (forall (any_result: Type0).
;             StlcStrongDbParSubst.var == any_result ==>
;             (forall (any_result: Prims.bool).
;                 y = x == any_result ==>
;                 (forall (k: Prims.pure_post StlcStrongDbParSubst.exp).
;                     (forall (x: StlcStrongDbParSubst.exp). {:pattern Prims.guard_free (k x)}
;                         Prims.auto_squash (k x)) ==>
;                     ~(y = x = true) ==> (forall (b: Prims.bool). y = x == b ==> y - 1 >= 0)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let sub_beta_gen`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.var))
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post StlcStrongDbParSubst.exp))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(171,32-173,49)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(171,32-173,49)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(171,32-173,49)
(ApplyTT @x3
@x4)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid @query.2))


;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(171,32-173,49)
(not 
;; def=StlcCbvDbParSubst.fst(171,35-171,40); use=StlcCbvDbParSubst.fst(171,35-171,40)
(= (Prims.op_LessThan @x2
@x0)
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(171,32-173,49)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=StlcCbvDbParSubst.fst(171,35-173,49); use=StlcCbvDbParSubst.fst(171,35-173,49)
(= (Prims.op_LessThan @x2
@x0)
@x4)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(171,32-173,49)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(172,40-172,41)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(172,40-172,41)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(172,40-172,41)
(Prims.hasEq StlcStrongDbParSubst.var)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(171,32-173,49)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(171,32-173,49)
(= StlcStrongDbParSubst.var
@x5)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(171,32-173,49)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=StlcCbvDbParSubst.fst(172,40-172,45); use=StlcCbvDbParSubst.fst(172,40-172,45)
(= (Prims.op_Equality StlcStrongDbParSubst.var
@x2
@x0)
@x6)
)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post StlcStrongDbParSubst.exp))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(171,32-173,49)
(forall ((@x8 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(171,32-173,49)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(171,32-173,49)
(ApplyTT @x7
@x8)
)

 

:pattern ((ApplyTT @x7
@x8))
:qid @query.7))


;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(171,32-173,49)
(not 
;; def=StlcCbvDbParSubst.fst(172,40-172,45); use=StlcCbvDbParSubst.fst(172,40-172,45)
(= (Prims.op_Equality StlcStrongDbParSubst.var
@x2
@x0)
(BoxBool true))
)
)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(171,32-173,49)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.bool)

;; def=StlcCbvDbParSubst.fst(172,40-173,49); use=StlcCbvDbParSubst.fst(172,40-173,49)
(= (Prims.op_Equality StlcStrongDbParSubst.var
@x2
@x0)
@x8)
)

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(173,43-173,48)
(or label_2

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(173,43-173,48)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x2
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.6)))
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.sub_beta_gen, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, equation_StlcStrongDbParSubst.var, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let sub_beta_gen


; <Start encoding let sub_beta_gen>

(declare-fun StlcCbvDbParSubst.sub_beta_gen (Term Term) Term)
;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var -> v: StlcStrongDbParSubst.exp -> StlcStrongDbParSubst.sub
(declare-fun Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545 () Term)
(declare-fun StlcCbvDbParSubst.sub_beta_gen@tok () Term)

(declare-fun Tm_abs_d70941dbcdfb3551376d504a2f54c457 (Term Term) Term)

; </end encoding let sub_beta_gen>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(175,0-176,58)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_3a345ec5eba935b818b440723b04f8eb (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(175,32-175,44); use=StlcCbvDbParSubst.fst(175,32-175,44)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_3a345ec5eba935b818b440723b04f8eb))

:named refinement_kinding_Tm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(175,32-175,44); use=StlcCbvDbParSubst.fst(175,32-175,44)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(175,38-175,43); use=StlcCbvDbParSubst.fst(175,38-175,43)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x2)))
:qid refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb))

:named refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3a345ec5eba935b818b440723b04f8eb
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(175,32-175,44); use=StlcCbvDbParSubst.fst(175,32-175,44)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0))))
:qid haseqTm_refine_3a345ec5eba935b818b440723b04f8eb))

:named haseqTm_refine_3a345ec5eba935b818b440723b04f8eb))


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (y: StlcStrongDbParSubst.var{y < x})
;   (v: StlcStrongDbParSubst.exp)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) Prims.hasEq StlcStrongDbParSubst.exp


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.subst_gen_var_lt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(175,0-176,58)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0))
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(176,12-176,17)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(176,12-176,17)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(176,12-176,17)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_gen_var_lt, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_StlcStrongDbParSubst.exp__uu___haseq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.subst_gen_var_lt


; <Skipped val StlcCbvDbParSubst.subst_gen_var_lt/>

;;;;;;;;;;;;;;;;typing_Tm_abs_d70941dbcdfb3551376d504a2f54c457
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(171,32-173,49); use=StlcCbvDbParSubst.fst(171,32-173,49)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_d70941dbcdfb3551376d504a2f54c457 @x0
@x1)
Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb)
 

:pattern ((Tm_abs_d70941dbcdfb3551376d504a2f54c457 @x0
@x1))
:qid typing_Tm_abs_d70941dbcdfb3551376d504a2f54c457))

:named typing_Tm_abs_d70941dbcdfb3551376d504a2f54c457))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(171,4-171,16); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.exp))
(HasType (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
StlcStrongDbParSubst.sub))
 

:pattern ((StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
:qid typing_StlcCbvDbParSubst.sub_beta_gen))

:named typing_StlcCbvDbParSubst.sub_beta_gen))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d70941dbcdfb3551376d504a2f54c457
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(171,32-173,49); use=StlcCbvDbParSubst.fst(171,32-173,49)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_d70941dbcdfb3551376d504a2f54c457 @x1
@x2)
@x0)
(let ((@lb3 (Prims.op_LessThan @x0
@x2)))
(ite (= @lb3
(BoxBool true))
(StlcStrongDbParSubst.EVar @x0)
(let ((@lb4 (Prims.op_Equality StlcStrongDbParSubst.var
@x0
@x2)))
(ite (= @lb4
(BoxBool true))
@x1
(StlcStrongDbParSubst.EVar (Prims.op_Subtraction @x0
(BoxInt 1))))))))
 

:pattern ((ApplyTT (Tm_abs_d70941dbcdfb3551376d504a2f54c457 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_d70941dbcdfb3551376d504a2f54c457))

:named interpretation_Tm_abs_d70941dbcdfb3551376d504a2f54c457))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.sub_beta_gen
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(171,4-171,16); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
(Tm_abs_d70941dbcdfb3551376d504a2f54c457 @x1
@x0))
 

:pattern ((StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
:qid equation_StlcCbvDbParSubst.sub_beta_gen))

:named equation_StlcCbvDbParSubst.sub_beta_gen))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(177,29-177,31)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_3a345ec5eba935b818b440723b04f8eb (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(175,32-175,44); use=StlcCbvDbParSubst.fst(177,4-177,20)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_3a345ec5eba935b818b440723b04f8eb))

:named refinement_kinding_Tm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(175,32-175,44); use=StlcCbvDbParSubst.fst(177,4-177,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(175,38-175,43); use=StlcCbvDbParSubst.fst(177,4-177,20)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x2)))
:qid refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb))

:named refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3a345ec5eba935b818b440723b04f8eb
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(175,32-175,44); use=StlcCbvDbParSubst.fst(177,4-177,20)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0))))
:qid haseqTm_refine_3a345ec5eba935b818b440723b04f8eb))

:named haseqTm_refine_3a345ec5eba935b818b440723b04f8eb))

; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (y: StlcStrongDbParSubst.var{y < x})
;   (v: StlcStrongDbParSubst.exp).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v)
;           (StlcStrongDbParSubst.EVar y) =
;         StlcStrongDbParSubst.EVar y ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let subst_gen_var_lt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0))
(HasType @x2
StlcStrongDbParSubst.exp))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(177,29-177,31)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=StlcCbvDbParSubst.fst(176,11-176,57); use=StlcCbvDbParSubst.fst(177,29-177,31)
(or label_2

;; def=StlcCbvDbParSubst.fst(176,11-176,57); use=StlcCbvDbParSubst.fst(177,29-177,31)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x2)
(StlcStrongDbParSubst.EVar @x1))
(StlcStrongDbParSubst.EVar @x1))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(177,29-177,31)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(177,29-177,31)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(177,29-177,31)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(177,29-177,31)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_gen_var_lt, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented, @query, constructor_distinct_StlcStrongDbParSubst.EVar, data_typing_intro_StlcStrongDbParSubst.EVar@tok, equation_Prims.nat, equation_StlcCbvDbParSubst.sub_beta_gen, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcStrongDbParSubst.subst.fuel_instrumented, int_inversion, interpretation_Tm_abs_d70941dbcdfb3551376d504a2f54c457, primitive_Prims.op_LessThan, projection_inverse_StlcStrongDbParSubst.EVar__0, refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_StlcCbvDbParSubst.sub_beta_gen

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let subst_gen_var_lt


; <Start encoding let subst_gen_var_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.subst_gen_var_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.subst_gen_var_lt@tok () Term)

; </end encoding let subst_gen_var_lt>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(179,0-180,43)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_3a345ec5eba935b818b440723b04f8eb (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(179,25-179,37); use=StlcCbvDbParSubst.fst(179,25-179,37)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_3a345ec5eba935b818b440723b04f8eb))

:named refinement_kinding_Tm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(179,25-179,37); use=StlcCbvDbParSubst.fst(179,25-179,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(179,31-179,36); use=StlcCbvDbParSubst.fst(179,31-179,36)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x2)))
:qid refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb))

:named refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3a345ec5eba935b818b440723b04f8eb
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(179,25-179,37); use=StlcCbvDbParSubst.fst(179,25-179,37)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0))))
:qid haseqTm_refine_3a345ec5eba935b818b440723b04f8eb))

:named haseqTm_refine_3a345ec5eba935b818b440723b04f8eb))


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (y: StlcStrongDbParSubst.var{y < x})
;   (g: StlcStrongDbParSubst.env)
;   (t_x: StlcStrongDbParSubst.typ)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *)
;   Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.extend_lt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(179,0-180,43)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0))
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=StlcStrongDbParSubst.fst(110,22-110,34)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(180,14-180,42)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(180,14-180,42)
(Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ))
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_lt, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_StlcStrongDbParSubst.typ__uu___haseq, kinding_StlcStrongDbParSubst.typ@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.extend_lt


; <Skipped val StlcCbvDbParSubst.extend_lt/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(181,26-181,28)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_3a345ec5eba935b818b440723b04f8eb (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(179,25-179,37); use=StlcCbvDbParSubst.fst(181,4-181,13)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_3a345ec5eba935b818b440723b04f8eb))

:named refinement_kinding_Tm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(179,25-179,37); use=StlcCbvDbParSubst.fst(181,4-181,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(179,31-179,36); use=StlcCbvDbParSubst.fst(181,4-181,13)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x2)))
:qid refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb))

:named refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3a345ec5eba935b818b440723b04f8eb
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(179,25-179,37); use=StlcCbvDbParSubst.fst(181,4-181,13)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0))))
:qid haseqTm_refine_3a345ec5eba935b818b440723b04f8eb))

:named haseqTm_refine_3a345ec5eba935b818b440723b04f8eb))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcCbvDbParSubst.extend_gen@tok))
:named @kick_partial_app_df99fdb0ff0434ae081f31f1f31f5269))

; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (y: StlcStrongDbParSubst.var{y < x})
;   (g: StlcStrongDbParSubst.env)
;   (t_x: StlcStrongDbParSubst.typ).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         StlcCbvDbParSubst.extend_gen x t_x g y = g y ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let extend_lt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
(Tm_refine_3a345ec5eba935b818b440723b04f8eb @x0))
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(181,26-181,28)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=StlcCbvDbParSubst.fst(180,14-180,42); use=StlcCbvDbParSubst.fst(181,26-181,28)
(or label_2

;; def=StlcCbvDbParSubst.fst(180,14-180,42); use=StlcCbvDbParSubst.fst(181,26-181,28)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
@x0)
@x3)
@x2)
@x1)
(ApplyTT @x2
@x1))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(181,26-181,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(181,26-181,28)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(181,26-181,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(181,26-181,28)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_lt, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_Prims.nat, equation_StlcCbvDbParSubst.extend_gen, equation_StlcStrongDbParSubst.var, fuel_guarded_inversion_StlcStrongDbParSubst.typ, function_token_typing_Prims.__cache_version_number__, int_inversion, interpretation_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, projection_inverse_BoxBool_proj_0, refinement_interpretation_Tm_refine_3a345ec5eba935b818b440723b04f8eb, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, token_correspondence_StlcCbvDbParSubst.extend_gen

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let extend_lt


; <Start encoding let extend_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.extend_lt (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.extend_lt@tok () Term)

; </end encoding let extend_lt>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(183,0-184,47)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_fcd11dd703480908b3c65df7f524bbfe (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(183,25-183,37); use=StlcCbvDbParSubst.fst(183,25-183,37)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_fcd11dd703480908b3c65df7f524bbfe))

:named refinement_kinding_Tm_refine_fcd11dd703480908b3c65df7f524bbfe))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(183,25-183,37); use=StlcCbvDbParSubst.fst(183,25-183,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(183,31-183,36); use=StlcCbvDbParSubst.fst(183,31-183,36)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x2)))
:qid refinement_interpretation_Tm_refine_fcd11dd703480908b3c65df7f524bbfe))

:named refinement_interpretation_Tm_refine_fcd11dd703480908b3c65df7f524bbfe))
;;;;;;;;;;;;;;;;haseq for Tm_refine_fcd11dd703480908b3c65df7f524bbfe
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(183,25-183,37); use=StlcCbvDbParSubst.fst(183,25-183,37)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0))))
:qid haseqTm_refine_fcd11dd703480908b3c65df7f524bbfe))

:named haseqTm_refine_fcd11dd703480908b3c65df7f524bbfe))


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (y: StlcStrongDbParSubst.var{y > x})
;   (g: StlcStrongDbParSubst.env)
;   (t_x: StlcStrongDbParSubst.typ)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *)
;   Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ) /\
;   (forall (return_val: Prims.eqtype).
;       return_val == FStar.Pervasives.Native.option StlcStrongDbParSubst.typ ==> y - 1 >= 0)


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.extend_gt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(183,0-184,47)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
(Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0))
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(184,14-184,46)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcStrongDbParSubst.fst(110,22-110,34)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(184,14-184,46)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(184,14-184,46)
(Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ))
)
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(184,14-184,46)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.eqtype)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(184,14-184,46)
(= @x5
(FStar.Pervasives.Native.option StlcStrongDbParSubst.typ))
)

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(184,41-184,46)
(or label_2

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(184,41-184,46)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x1
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_gt, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_StlcStrongDbParSubst.typ__uu___haseq, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_Prims.nat, equation_StlcStrongDbParSubst.var, int_inversion, kinding_StlcStrongDbParSubst.typ@tok, primitive_Prims.op_Subtraction, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_fcd11dd703480908b3c65df7f524bbfe, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.extend_gt


; <Skipped val StlcCbvDbParSubst.extend_gt/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(185,26-185,28)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_fcd11dd703480908b3c65df7f524bbfe (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(183,25-183,37); use=StlcCbvDbParSubst.fst(185,4-185,13)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_fcd11dd703480908b3c65df7f524bbfe))

:named refinement_kinding_Tm_refine_fcd11dd703480908b3c65df7f524bbfe))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(183,25-183,37); use=StlcCbvDbParSubst.fst(185,4-185,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(183,31-183,36); use=StlcCbvDbParSubst.fst(185,4-185,13)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x2)))
:qid refinement_interpretation_Tm_refine_fcd11dd703480908b3c65df7f524bbfe))

:named refinement_interpretation_Tm_refine_fcd11dd703480908b3c65df7f524bbfe))
;;;;;;;;;;;;;;;;haseq for Tm_refine_fcd11dd703480908b3c65df7f524bbfe
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(183,25-183,37); use=StlcCbvDbParSubst.fst(185,4-185,13)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0))))
:qid haseqTm_refine_fcd11dd703480908b3c65df7f524bbfe))

:named haseqTm_refine_fcd11dd703480908b3c65df7f524bbfe))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcCbvDbParSubst.extend_gen@tok))
:named @kick_partial_app_df99fdb0ff0434ae081f31f1f31f5269))

; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (y: StlcStrongDbParSubst.var{y > x})
;   (g: StlcStrongDbParSubst.env)
;   (t_x: StlcStrongDbParSubst.typ).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         StlcCbvDbParSubst.extend_gen x t_x g y = g (y - 1) ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let extend_gt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
(Tm_refine_fcd11dd703480908b3c65df7f524bbfe @x0))
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(185,26-185,28)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=StlcCbvDbParSubst.fst(184,14-184,46); use=StlcCbvDbParSubst.fst(185,26-185,28)
(or label_2

;; def=StlcCbvDbParSubst.fst(184,14-184,46); use=StlcCbvDbParSubst.fst(185,26-185,28)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
@x0)
@x3)
@x2)
@x1)
(ApplyTT @x2
(Prims.op_Subtraction @x1
(BoxInt 1))))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(185,26-185,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(185,26-185,28)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(185,26-185,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(185,26-185,28)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_gt, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_Prims.nat, equation_StlcCbvDbParSubst.extend_gen, equation_StlcStrongDbParSubst.extend, equation_StlcStrongDbParSubst.var, fuel_guarded_inversion_StlcStrongDbParSubst.typ, function_token_typing_Prims.__cache_version_number__, int_inversion, interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0, interpretation_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, projection_inverse_BoxBool_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_fcd11dd703480908b3c65df7f524bbfe, token_correspondence_StlcCbvDbParSubst.extend_gen

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let extend_gt


; <Start encoding let extend_gt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.extend_gt (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.extend_gt@tok () Term)

; </end encoding let extend_gt>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(187,0-189,67)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (g: StlcStrongDbParSubst.env)
;   (t_x: StlcStrongDbParSubst.typ)
;   (t_y: StlcStrongDbParSubst.typ)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) x + 1 >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.extend_twice`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(187,0-189,67)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(189,34-189,39)
(or label_1

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(189,34-189,39)
(>= (BoxInt_proj_0 (Prims.op_Addition @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_twice, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, equation_StlcStrongDbParSubst.var, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.extend_twice


; <Skipped val StlcCbvDbParSubst.extend_twice/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(190,31-190,33)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (g: StlcStrongDbParSubst.env)
;   (t_x: StlcStrongDbParSubst.typ)
;   (t_y: StlcStrongDbParSubst.typ).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         FStar.FunctionalExtensionality.feq (StlcCbvDbParSubst.extend_gen 0
;               t_y
;               (StlcCbvDbParSubst.extend_gen x t_x g))
;           (StlcCbvDbParSubst.extend_gen (x + 1) t_x (StlcCbvDbParSubst.extend_gen 0 t_y g)) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let extend_twice`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
StlcStrongDbParSubst.typ))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(190,31-190,33)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=StlcCbvDbParSubst.fst(188,15-189,66); use=StlcCbvDbParSubst.fst(190,31-190,33)
(or label_2

;; def=StlcCbvDbParSubst.fst(188,15-189,66); use=StlcCbvDbParSubst.fst(190,31-190,33)
(Valid 
;; def=StlcCbvDbParSubst.fst(188,15-189,66); use=StlcCbvDbParSubst.fst(190,31-190,33)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
(StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x3
(StlcCbvDbParSubst.extend_gen @x0
@x2
@x1))
(StlcCbvDbParSubst.extend_gen (Prims.op_Addition @x0
(BoxInt 1))
@x2
(StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x3
@x1)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(190,31-190,33)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(190,31-190,33)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(190,31-190,33)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(190,31-190,33)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_twice, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_FStar.FunctionalExtensionality.feq, equation_Prims.nat, equation_StlcCbvDbParSubst.extend_gen, equation_StlcStrongDbParSubst.extend, equation_StlcStrongDbParSubst.var, fuel_guarded_inversion_StlcStrongDbParSubst.typ, function_token_typing_Prims.__cache_version_number__, int_inversion, interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0, interpretation_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3, primitive_Prims.op_Addition, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let extend_twice


; <Start encoding let extend_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.extend_twice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.extend_twice@tok () Term)

; </end encoding let extend_twice>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(192,33-192,71)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (x: StlcStrongDbParSubst.var) (s: StlcStrongDbParSubst.sub).
;   (*  - Could not prove post-condition
; *)
;   forall (y: StlcStrongDbParSubst.var). y < x ==> Prims.hasEq StlcStrongDbParSubst.exp


; Context: While encoding a query
; While typechecking the top-level declaration `let sub_below`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.sub))

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(192,33-192,71)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(192,50-192,53); use=StlcCbvDbParSubst.fst(192,50-192,53)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x0))
)

;; def=Prims.fst(73,23-73,30); use=StlcStrongDbParSubst.fst(53,22-53,25)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(192,50-192,70)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(192,50-192,70)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.sub_below, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_StlcStrongDbParSubst.exp__uu___haseq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let sub_below


; <Start encoding let sub_below>

(declare-fun StlcCbvDbParSubst.sub_below (Term Term) Term)
;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var -> s: StlcStrongDbParSubst.sub -> Prims.logical
(declare-fun Tm_arrow_62b4d43675744085ebea9ddff638c74d () Term)
(declare-fun StlcCbvDbParSubst.sub_below@tok () Term)

; </end encoding let sub_below>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.sub_below; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(192,5-192,14); use=StlcCbvDbParSubst.fst(192,5-192,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.sub))
(HasType (StlcCbvDbParSubst.sub_below @x0
@x1)
Prims.logical))
 

:pattern ((StlcCbvDbParSubst.sub_below @x0
@x1))
:qid typing_StlcCbvDbParSubst.sub_below))

:named typing_StlcCbvDbParSubst.sub_below))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.sub_below
;;; Fact-ids: Name StlcCbvDbParSubst.sub_below; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(192,5-192,14); use=StlcCbvDbParSubst.fst(192,5-192,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (StlcCbvDbParSubst.sub_below @x0
@x1))

;; def=StlcCbvDbParSubst.fst(192,33-192,71); use=StlcCbvDbParSubst.fst(192,33-192,71)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(192,50-192,53); use=StlcCbvDbParSubst.fst(192,50-192,53)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x0))
)

;; def=StlcCbvDbParSubst.fst(192,58-192,70); use=StlcCbvDbParSubst.fst(192,58-192,70)
(= (ApplyTT @x1
@x2)
(StlcStrongDbParSubst.EVar @x2))
)
 
;;no pats
:qid equation_StlcCbvDbParSubst.sub_below.1))
)
 

:pattern ((StlcCbvDbParSubst.sub_below @x0
@x1))
:qid equation_StlcCbvDbParSubst.sub_below))

:named equation_StlcCbvDbParSubst.sub_below))
;;;;;;;;;;;;;;;;Prop-typing for StlcCbvDbParSubst.sub_below
;;; Fact-ids: Name StlcCbvDbParSubst.sub_below; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(192,5-192,14); use=StlcCbvDbParSubst.fst(192,5-192,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.sub))
(Valid (Prims.subtype_of (StlcCbvDbParSubst.sub_below @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (StlcCbvDbParSubst.sub_below @x0
@x1)
Prims.unit))
:qid defn_equation_StlcCbvDbParSubst.sub_below))

:named defn_equation_StlcCbvDbParSubst.sub_below))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(194,0-195,63)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,27-194,43); use=StlcCbvDbParSubst.fst(194,27-194,43)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_4d1b86ea580da57f559e3df8040bf8a5))

:named refinement_kinding_Tm_refine_4d1b86ea580da57f559e3df8040bf8a5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,27-194,43); use=StlcCbvDbParSubst.fst(194,27-194,43)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(194,33-194,42)
(BoxBool_proj_0 (StlcCbvDbParSubst.below @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x2)))
:qid refinement_interpretation_Tm_refine_4d1b86ea580da57f559e3df8040bf8a5))

:named refinement_interpretation_Tm_refine_4d1b86ea580da57f559e3df8040bf8a5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4d1b86ea580da57f559e3df8040bf8a5
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,27-194,43); use=StlcCbvDbParSubst.fst(194,27-194,43)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0))))
:qid haseqTm_refine_4d1b86ea580da57f559e3df8040bf8a5))

:named haseqTm_refine_4d1b86ea580da57f559e3df8040bf8a5))
(declare-fun Tm_refine_00741f5f742c62b37fe080630ca1153a (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-194,67); use=StlcCbvDbParSubst.fst(194,47-194,67)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_00741f5f742c62b37fe080630ca1153a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_00741f5f742c62b37fe080630ca1153a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_00741f5f742c62b37fe080630ca1153a))

:named refinement_kinding_Tm_refine_00741f5f742c62b37fe080630ca1153a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-194,67); use=StlcCbvDbParSubst.fst(194,47-194,67)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_00741f5f742c62b37fe080630ca1153a @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.sub)

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(194,53-194,66)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(194,53-194,66)
(StlcCbvDbParSubst.sub_below @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_00741f5f742c62b37fe080630ca1153a @x2)))
:qid refinement_interpretation_Tm_refine_00741f5f742c62b37fe080630ca1153a))

:named refinement_interpretation_Tm_refine_00741f5f742c62b37fe080630ca1153a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_00741f5f742c62b37fe080630ca1153a
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-194,67); use=StlcCbvDbParSubst.fst(194,47-194,67)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_00741f5f742c62b37fe080630ca1153a @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.sub)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_00741f5f742c62b37fe080630ca1153a @x0))))
:qid haseqTm_refine_00741f5f742c62b37fe080630ca1153a))

:named haseqTm_refine_00741f5f742c62b37fe080630ca1153a))


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.below x v})
;   (s: StlcStrongDbParSubst.sub{StlcCbvDbParSubst.sub_below x s})
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) Prims.hasEq StlcStrongDbParSubst.exp


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.subst_below`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(194,0-195,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
(Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0))
(HasType @x2
(Tm_refine_00741f5f742c62b37fe080630ca1153a @x0))
(HasType @x3
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(195,34-195,35)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(195,34-195,35)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(195,34-195,35)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_below, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_StlcStrongDbParSubst.exp__uu___haseq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.subst_below


; <Skipped val StlcCbvDbParSubst.subst_below/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.sub)
(HasType @x1
StlcStrongDbParSubst.var))
(HasType (StlcStrongDbParSubst.sub_elam @x0
@x1)
(Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x0)))
 

:pattern ((StlcStrongDbParSubst.sub_elam @x0
@x1))
:qid typing_StlcStrongDbParSubst.sub_elam))

:named typing_StlcStrongDbParSubst.sub_elam))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StlcStrongDbParSubst.sub_elam@tok
@x0)
@x1)
(StlcStrongDbParSubst.sub_elam @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StlcStrongDbParSubst.sub_elam@tok
@x0)
@x1))
:qid token_correspondence_StlcStrongDbParSubst.sub_elam))

:named token_correspondence_StlcStrongDbParSubst.sub_elam))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! (HasType Tm_arrow_d7c23eed18639be8032fa5f7062f80fe
Tm_type)
:named kinding_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcStrongDbParSubst.sub_elam@tok
Tm_arrow_d7c23eed18639be8032fa5f7062f80fe))

;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StlcStrongDbParSubst.sub_elam@tok
@x1)
@x2)
(StlcStrongDbParSubst.sub_elam @x1
@x2))
 

:pattern ((StlcStrongDbParSubst.sub_elam @x1
@x2))
:qid function_token_typing_StlcStrongDbParSubst.sub_elam.1))
)
 

:pattern ((ApplyTT @x0
StlcStrongDbParSubst.sub_elam@tok))
:qid function_token_typing_StlcStrongDbParSubst.sub_elam))

:named function_token_typing_StlcStrongDbParSubst.sub_elam))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(70,16-70,65); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d7c23eed18639be8032fa5f7062f80fe)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d7c23eed18639be8032fa5f7062f80fe))
:qid StlcStrongDbParSubst_pre_typing_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe))

:named StlcStrongDbParSubst_pre_typing_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(70,16-70,65); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d7c23eed18639be8032fa5f7062f80fe)
(and 
;; def=StlcStrongDbParSubst.fst(70,16-70,65); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.sub)
(HasType @x2
StlcStrongDbParSubst.var))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e @x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe.1))

(IsTotFun @x0)

;; def=StlcStrongDbParSubst.fst(70,16-70,65); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.sub)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d7c23eed18639be8032fa5f7062f80fe))
:qid StlcStrongDbParSubst_interpretation_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe))

:named StlcStrongDbParSubst_interpretation_Tm_arrow_d7c23eed18639be8032fa5f7062f80fe))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name StlcStrongDbParSubst.substitution; Namespace StlcStrongDbParSubst
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcStrongDbParSubst.sub_elam@tok))
:named @kick_partial_app_9c6b7276468f2177fa7ece2afa8d01e3))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StlcStrongDbParSubst.subst; Namespace StlcStrongDbParSubst; Name StlcStrongDbParSubst.sub_elam; Namespace StlcStrongDbParSubst
(assert (! 
;; def=StlcStrongDbParSubst.fst(82,4-82,12); use=StlcStrongDbParSubst.fst(82,4-82,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (StlcStrongDbParSubst.sub_elam @x0
@x1)
(StlcStrongDbParSubst.sub_elam.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((StlcStrongDbParSubst.sub_elam @x0
@x1))
:qid @fuel_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented))

:named @fuel_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(197,2-204,15)

;;;;;;;;;;;;;;;;x : StlcStrongDbParSubst.var (StlcStrongDbParSubst.var)
(declare-fun x_994c99bbacb216630d104a4d01f030da_0 () Term)
;;;;;;;;;;;;;;;;binder_x_994c99bbacb216630d104a4d01f030da_0
;;; Fact-ids: 
(assert (! (HasType x_994c99bbacb216630d104a4d01f030da_0
StlcStrongDbParSubst.var)
:named binder_x_994c99bbacb216630d104a4d01f030da_0))
;;;;;;;;;;;;;;;;v : v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.below x v} (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.below x v})
(declare-fun x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1 () Term)
(declare-fun Tm_refine_13235449bc298814e56647817a5a5586 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_13235449bc298814e56647817a5a5586
Tm_type)
:named refinement_kinding_Tm_refine_13235449bc298814e56647817a5a5586))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,27-194,43); use=StlcCbvDbParSubst.fst(196,8-196,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_13235449bc298814e56647817a5a5586)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(196,8-196,19)
(BoxBool_proj_0 (StlcCbvDbParSubst.below x_994c99bbacb216630d104a4d01f030da_0
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_13235449bc298814e56647817a5a5586))
:qid refinement_interpretation_Tm_refine_13235449bc298814e56647817a5a5586))

:named refinement_interpretation_Tm_refine_13235449bc298814e56647817a5a5586))
;;;;;;;;;;;;;;;;haseq for Tm_refine_13235449bc298814e56647817a5a5586
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_13235449bc298814e56647817a5a5586))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_13235449bc298814e56647817a5a5586))
;;;;;;;;;;;;;;;;binder_x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
;;; Fact-ids: 
(assert (! (HasType x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
Tm_refine_13235449bc298814e56647817a5a5586)
:named binder_x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
;;;;;;;;;;;;;;;;s : s: StlcStrongDbParSubst.sub{StlcCbvDbParSubst.sub_below x s} (s: StlcStrongDbParSubst.sub{StlcCbvDbParSubst.sub_below x s})
(declare-fun x_5b9d765ad3faa1eaf3f2d264958bfc68_2 () Term)
(declare-fun Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37
Tm_type)
:named refinement_kinding_Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-194,67); use=StlcCbvDbParSubst.fst(196,8-196,19)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.sub)

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(196,8-196,19)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(196,8-196,19)
(StlcCbvDbParSubst.sub_below x_994c99bbacb216630d104a4d01f030da_0
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37))
:qid refinement_interpretation_Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37))

:named refinement_interpretation_Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37))
;;;;;;;;;;;;;;;;haseq for Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37))
(Valid (Prims.hasEq StlcStrongDbParSubst.sub)))
:named haseqTm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37))
;;;;;;;;;;;;;;;;binder_x_5b9d765ad3faa1eaf3f2d264958bfc68_2
;;; Fact-ids: 
(assert (! (HasType x_5b9d765ad3faa1eaf3f2d264958bfc68_2
Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37)
:named binder_x_5b9d765ad3faa1eaf3f2d264958bfc68_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.subst_below (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.subst_below@tok () Term)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



(declare-fun Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-204,15); use=StlcCbvDbParSubst.fst(200,19-200,30)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0))

:named refinement_kinding_Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-204,15); use=StlcCbvDbParSubst.fst(200,19-200,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0 @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.sub)

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(200,19-200,30)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(200,19-200,30)
(StlcCbvDbParSubst.sub_below (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
@x1)
)


;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(200,19-200,30)

;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(200,19-200,30)
(Valid 
;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(200,19-200,30)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0 @x2)))
:qid refinement_interpretation_Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0))

:named refinement_interpretation_Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-204,15); use=StlcCbvDbParSubst.fst(200,19-200,30)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0 @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.sub)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0 @x0))))
:qid haseqTm_refine_d940d2c8d911134ce831f45f5b4d2cb0))

:named haseqTm_refine_d940d2c8d911134ce831f45f5b4d2cb0))
















; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit). v = StlcStrongDbParSubst.subst s v ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(EVar? v) /\ ~(EApp? v) /\ ~(ELam? v) /\ ~(EUnit? v) ==> Prims.l_False) /\
;       (forall (b: StlcStrongDbParSubst.var).
;           v == StlcStrongDbParSubst.EVar b ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(EVar? v) ==>
;         (forall (b: StlcStrongDbParSubst.exp) (b: StlcStrongDbParSubst.exp).
;             v == StlcStrongDbParSubst.EApp b b ==>
;             StlcCbvDbParSubst.below x b /\
;             (forall (any_result: StlcStrongDbParSubst.exp).
;                 b == any_result ==>
;                 (StlcCbvDbParSubst.sub_below x s ==> StlcCbvDbParSubst.sub_below x s /\ b << v) /\
;                 (forall (any_result: s: StlcStrongDbParSubst.sub{StlcCbvDbParSubst.sub_below x s}).
;                     s == any_result ==>
;                     (forall (pure_result: Prims.unit).
;                         b = StlcStrongDbParSubst.subst s b ==>
;                         StlcCbvDbParSubst.below x b /\
;                         (forall (any_result: StlcStrongDbParSubst.exp).
;                             b == any_result ==>
;                             (StlcCbvDbParSubst.sub_below x s ==>
;                               StlcCbvDbParSubst.sub_below x s /\ b << v) /\
;                             (forall (any_result:
;                                 s: StlcStrongDbParSubst.sub{StlcCbvDbParSubst.sub_below x s}).
;                                 s == any_result ==>
;                                 (forall (pure_result: Prims.unit).
;                                     b = StlcStrongDbParSubst.subst s b ==> k pure_result))))))) /\
;         (~(EApp? v) ==>
;           (forall (b: StlcStrongDbParSubst.typ) (b: StlcStrongDbParSubst.exp).
;               v == StlcStrongDbParSubst.ELam b b ==>
;               x + 1 >= 0 /\
;               (forall (return_val: StlcStrongDbParSubst.var).
;                   return_val == x + 1 ==>
;                   StlcCbvDbParSubst.below (x + 1) b /\
;                   (forall (any_result: StlcStrongDbParSubst.exp).
;                       b == any_result ==>
;                       StlcCbvDbParSubst.sub_below (x + 1) (StlcStrongDbParSubst.sub_elam s) /\
;                       b << v /\
;                       (forall (return_val:
;                           s:
;                           (s: StlcStrongDbParSubst.sub{StlcCbvDbParSubst.sub_below (x + 1) s})
;                             {b << v}).
;                           return_val == StlcStrongDbParSubst.sub_elam s ==>
;                           (forall (pure_result: Prims.unit).
;                               b = StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam s) b ==>
;                               Prims.hasEq StlcStrongDbParSubst.exp /\
;                               (forall (any_result: Type0).
;                                   StlcStrongDbParSubst.exp == any_result ==>
;                                   (forall (pure_result: StlcStrongDbParSubst.exp).
;                                       (StlcStrongDbParSubst.renaming (StlcStrongDbParSubst.sub_elam s
;                                             ) /\ EVar? b ==>
;                                         EVar? pure_result) ==>
;                                       StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam s) b ==
;                                       pure_result ==>
;                                       (forall (any_result: Prims.bool).
;                                           b =
;                                           StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam s
;                                               )
;                                             b ==
;                                           any_result ==>
;                                           (forall (any_result: Prims.logical).
;                                               b =
;                                               StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam
;                                                     s)
;                                                 b ==
;                                               any_result ==>
;                                               b =
;                                               StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam
;                                                     s)
;                                                 b /\
;                                               (forall (pure_result: Prims.unit).
;                                                   b =
;                                                   StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam
;                                                         s)
;                                                     b ==>
;                                                   Prims.hasEq StlcStrongDbParSubst.exp /\
;                                                   (forall (any_result: Type0).
;                                                       StlcStrongDbParSubst.exp == any_result ==>
;                                                       (forall (any_result: Prims.bool).
;                                                           v = StlcStrongDbParSubst.ELam b b ==
;                                                           any_result ==>
;                                                           (forall (any_result: Prims.logical).
;                                                               v = StlcStrongDbParSubst.ELam b b ==
;                                                               any_result ==>
;                                                               v = StlcStrongDbParSubst.ELam b b /\
;                                                               (forall (pure_result: Prims.unit).
;                                                                   v = StlcStrongDbParSubst.ELam b b ==>
;                                                                   Prims.hasEq StlcStrongDbParSubst.exp
;                                                                    /\
;                                                                   (forall (any_result: Type0).
;                                                                       StlcStrongDbParSubst.exp ==
;                                                                       any_result ==>
;                                                                       (forall (pure_result:
;                                                                           StlcStrongDbParSubst.exp).
;                                                                           (StlcStrongDbParSubst.renaming
;                                                                               s /\ EVar? v ==>
;                                                                             EVar? pure_result) ==>
;                                                                           StlcStrongDbParSubst.subst
;                                                                             s
;                                                                             v ==
;                                                                           pure_result ==>
;                                                                           (forall (pure_result:
;                                                                               StlcStrongDbParSubst.exp)
;                                                                             .
;                                                                               (StlcStrongDbParSubst.renaming
;                                                                                   (StlcStrongDbParSubst.sub_elam
;                                                                                       s) /\ EVar? b ==>
;                                                                                 EVar? pure_result) ==>
;                                                                               StlcStrongDbParSubst.subst
;                                                                                 (StlcStrongDbParSubst.sub_elam
;                                                                                     s)
;                                                                                 b ==
;                                                                               pure_result ==>
;                                                                               (forall (any_result:
;                                                                                   StlcStrongDbParSubst.exp)
;                                                                                 .
;                                                                                   StlcStrongDbParSubst.ELam
;                                                                                     b
;                                                                                     (StlcStrongDbParSubst.subst
;                                                                                         (StlcStrongDbParSubst.sub_elam
;                                                                                             s)
;                                                                                         b) ==
;                                                                                   any_result ==>
;                                                                                   (forall (any_result:
;                                                                                       Prims.bool).
;                                                                                       StlcStrongDbParSubst.subst
;                                                                                         s
;                                                                                         v =
;                                                                                       StlcStrongDbParSubst.ELam
;                                                                                         b
;                                                                                         (StlcStrongDbParSubst.subst
;                                                                                             (StlcStrongDbParSubst.sub_elam
;                                                                                                 s)
;                                                                                             b) ==
;                                                                                       any_result ==>
;                                                                                       (forall (any_result:
;                                                                                           Prims.logical)
;                                                                                         .
;                                                                                           StlcStrongDbParSubst.subst
;                                                                                             s
;                                                                                             v =
;                                                                                           StlcStrongDbParSubst.ELam
;                                                                                             b
;                                                                                             (StlcStrongDbParSubst.subst
;                                                                                                 (StlcStrongDbParSubst.sub_elam
;                                                                                                     s
;                                                                                                   )
;                                                                                                 b) ==
;                                                                                           any_result ==>
;                                                                                           StlcStrongDbParSubst.subst
;                                                                                             s
;                                                                                             v =
;                                                                                           StlcStrongDbParSubst.ELam
;                                                                                             b
;                                                                                             (StlcStrongDbParSubst.subst
;                                                                                                 (StlcStrongDbParSubst.sub_elam
;                                                                                                     s
;                                                                                                   )
;                                                                                                 b) /\
;                                                                                           (forall (pure_result:
;                                                                                               Prims.unit)
;                                                                                             .
;                                                                                               StlcStrongDbParSubst.subst
;                                                                                                 s
;                                                                                                 v =
;                                                                                               StlcStrongDbParSubst.ELam
;                                                                                                 b
;                                                                                                 (StlcStrongDbParSubst.subst
;                                                                                                     (
;                                                                                                       StlcStrongDbParSubst.sub_elam
;                                                                                                         s
; 
;                                                                                                     )
;                                                                                                     b
;                                                                                                   ) ==>
;                                                                                               k pure_result
;                                                                                               ))))))
;                                                                   ))))))))))))))) /\
;           (~(ELam? v) ==>
;             v == StlcStrongDbParSubst.EUnit ==> (forall (any_result: Prims.unit). k any_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec subst_below`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=StlcCbvDbParSubst.fst(195,33-195,48); use=StlcCbvDbParSubst.fst(197,2-204,15)
(or label_2

;; def=StlcCbvDbParSubst.fst(195,33-195,48); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
(StlcStrongDbParSubst.subst x_5b9d765ad3faa1eaf3f2d264958bfc68_2
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(197,2-204,15)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(197,2-204,15)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(197,2-204,15)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(197,2-204,15)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(197,2-204,15)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(197,2-204,15)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(197,2-204,15)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(197,2-204,15)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and (implies 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(and 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(not 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)


;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(not 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EApp x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)


;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(not 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_ELam x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)


;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(not 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EUnit x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)
)

label_3)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(196,22-198,10); use=StlcCbvDbParSubst.fst(197,8-198,10)
(= x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
(StlcStrongDbParSubst.EVar @x2))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(ApplyTT @x1
@x3)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(197,2-204,15)
(not 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(196,22-199,14); use=StlcCbvDbParSubst.fst(197,8-199,14)
(= x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
(StlcStrongDbParSubst.EApp @x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(199,32-199,34)
(or label_4

;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(199,32-199,34)
(BoxBool_proj_0 (StlcCbvDbParSubst.below x_994c99bbacb216630d104a4d01f030da_0
@x2))
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(194,27-199,11); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= @x2
@x4)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and (implies 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,35-199,36)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,35-199,36)
(StlcCbvDbParSubst.sub_below x_994c99bbacb216630d104a4d01f030da_0
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
)


;; def=StlcCbvDbParSubst.fst(194,53-204,15); use=StlcCbvDbParSubst.fst(199,35-199,36)
(and 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,35-199,36)
(or label_5

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,35-199,36)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,35-199,36)
(StlcCbvDbParSubst.sub_below x_994c99bbacb216630d104a4d01f030da_0
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
)
)


;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(199,35-199,36)
(or label_6

;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(199,35-199,36)
(Valid 
;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(199,35-199,36)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
)
)
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37)

;; def=StlcCbvDbParSubst.fst(194,47-196,25); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= x_5b9d765ad3faa1eaf3f2d264958bfc68_2
@x5)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(199,18-199,29)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=StlcCbvDbParSubst.fst(195,33-195,48); use=StlcCbvDbParSubst.fst(199,18-199,29)
(= @x2
(StlcStrongDbParSubst.subst x_5b9d765ad3faa1eaf3f2d264958bfc68_2
@x2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(199,52-199,54)
(or label_7

;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(199,52-199,54)
(BoxBool_proj_0 (StlcCbvDbParSubst.below x_994c99bbacb216630d104a4d01f030da_0
@x3))
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(194,27-199,14); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= @x3
@x7)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and (implies 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,55-199,56)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,55-199,56)
(StlcCbvDbParSubst.sub_below x_994c99bbacb216630d104a4d01f030da_0
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
)


;; def=StlcCbvDbParSubst.fst(194,53-204,15); use=StlcCbvDbParSubst.fst(199,55-199,56)
(and 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,55-199,56)
(or label_8

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,55-199,56)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(199,55-199,56)
(StlcCbvDbParSubst.sub_below x_994c99bbacb216630d104a4d01f030da_0
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
)
)


;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(199,55-199,56)
(or label_9

;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(199,55-199,56)
(Valid 
;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(199,55-199,56)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x3
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
)
)
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37)

;; def=StlcCbvDbParSubst.fst(194,47-196,25); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= x_5b9d765ad3faa1eaf3f2d264958bfc68_2
@x8)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(199,38-199,49)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=StlcCbvDbParSubst.fst(195,33-195,48); use=StlcCbvDbParSubst.fst(199,38-199,49)
(= @x3
(StlcStrongDbParSubst.subst x_5b9d765ad3faa1eaf3f2d264958bfc68_2
@x3))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(199,38-199,49)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(199,38-199,49)
(ApplyTT @x1
@x9)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(197,2-204,15)
(not 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EApp x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(196,22-200,12); use=StlcCbvDbParSubst.fst(197,8-200,12)
(= x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
(StlcStrongDbParSubst.ELam @x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(200,31-200,36)
(or label_10

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(200,31-200,36)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= @x4
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(200,37-200,38)
(or label_11

;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(200,37-200,38)
(BoxBool_proj_0 (StlcCbvDbParSubst.below (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
@x3))
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(194,27-200,12); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= @x3
@x5)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(200,39-200,51)
(or label_12

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(200,39-200,51)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(200,39-200,51)
(StlcCbvDbParSubst.sub_below (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
(ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2))
)
)


;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(200,39-200,51)
(or label_13

;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(200,39-200,51)
(Valid 
;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(200,39-200,51)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x3
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
)
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0 @x3))

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= @x6
(ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2))
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(200,19-200,30)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=StlcCbvDbParSubst.fst(195,33-195,48); use=StlcCbvDbParSubst.fst(200,19-200,30)
(= @x3
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(201,26-201,27)
(or label_14

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(201,26-201,27)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(201,26-201,27)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= StlcStrongDbParSubst.exp
@x8)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(201,30-201,35)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(201,30-201,35)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(201,30-201,35)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(201,30-201,35)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(201,30-201,35)
(StlcStrongDbParSubst.renaming (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2))
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(201,30-201,35)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x3))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(201,30-201,35)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x9))
)


;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3)
@x9)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (Prims.op_Equality StlcStrongDbParSubst.exp
@x3
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3))
@x10)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (Prims.b2t (Prims.op_Equality StlcStrongDbParSubst.exp
@x3
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3)))
@x11)
)

;; def=Prims.fst(441,29-441,97); use=StlcCbvDbParSubst.fst(201,19-201,25)
(and 
;; def=StlcCbvDbParSubst.fst(201,25-201,51); use=StlcCbvDbParSubst.fst(201,19-201,25)
(or label_15

;; def=StlcCbvDbParSubst.fst(201,25-201,51); use=StlcCbvDbParSubst.fst(201,19-201,25)
(= @x3
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3))
)


;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(201,19-201,25)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=StlcCbvDbParSubst.fst(201,25-201,51); use=StlcCbvDbParSubst.fst(201,19-201,25)
(= @x3
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(202,26-202,27)
(or label_16

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(202,26-202,27)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(202,26-202,27)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= StlcStrongDbParSubst.exp
@x13)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (Prims.op_Equality StlcStrongDbParSubst.exp
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
(StlcStrongDbParSubst.ELam @x2
@x3))
@x14)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (Prims.b2t (Prims.op_Equality StlcStrongDbParSubst.exp
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
(StlcStrongDbParSubst.ELam @x2
@x3)))
@x15)
)

;; def=Prims.fst(441,29-441,97); use=StlcCbvDbParSubst.fst(202,19-202,25)
(and 
;; def=StlcCbvDbParSubst.fst(202,25-202,39); use=StlcCbvDbParSubst.fst(202,19-202,25)
(or label_17

;; def=StlcCbvDbParSubst.fst(202,25-202,39); use=StlcCbvDbParSubst.fst(202,19-202,25)
(= x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
(StlcStrongDbParSubst.ELam @x2
@x3))
)


;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(202,19-202,25)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=StlcCbvDbParSubst.fst(202,25-202,39); use=StlcCbvDbParSubst.fst(202,19-202,25)
(= x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
(StlcStrongDbParSubst.ELam @x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(203,38-203,42)
(or label_18

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(203,38-203,42)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(203,38-203,42)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= StlcStrongDbParSubst.exp
@x17)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(203,26-203,31)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(203,26-203,31)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(203,26-203,31)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(203,26-203,31)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(203,26-203,31)
(StlcStrongDbParSubst.renaming x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(203,26-203,31)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(203,26-203,31)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x18))
)


;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (StlcStrongDbParSubst.subst x_5b9d765ad3faa1eaf3f2d264958bfc68_2
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
@x18)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(203,46-203,51)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(203,46-203,51)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(203,46-203,51)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(203,46-203,51)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(203,46-203,51)
(StlcStrongDbParSubst.renaming (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2))
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(203,46-203,51)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x3))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(203,46-203,51)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x19))
)


;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
StlcStrongDbParSubst.exp)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3))
@x20)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (Prims.op_Equality StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.subst x_5b9d765ad3faa1eaf3f2d264958bfc68_2
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3)))
@x21)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=StlcCbvDbParSubst.fst(197,2-204,15)
(= (Prims.b2t (Prims.op_Equality StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.subst x_5b9d765ad3faa1eaf3f2d264958bfc68_2
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3))))
@x22)
)

;; def=Prims.fst(441,29-441,97); use=StlcCbvDbParSubst.fst(203,19-203,25)
(and 
;; def=StlcCbvDbParSubst.fst(203,25-203,68); use=StlcCbvDbParSubst.fst(203,19-203,25)
(or label_19

;; def=StlcCbvDbParSubst.fst(203,25-203,68); use=StlcCbvDbParSubst.fst(203,19-203,25)
(= (StlcStrongDbParSubst.subst x_5b9d765ad3faa1eaf3f2d264958bfc68_2
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3)))
)


;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(203,19-203,25)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Prims.unit)

;; def=StlcCbvDbParSubst.fst(203,25-203,68); use=StlcCbvDbParSubst.fst(203,19-203,25)
(= (StlcStrongDbParSubst.subst x_5b9d765ad3faa1eaf3f2d264958bfc68_2
x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1)
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
x_5b9d765ad3faa1eaf3f2d264958bfc68_2)
@x3)))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(203,19-203,25)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(203,19-203,25)
(ApplyTT @x1
@x23)
)
)
 
;;no pats
:qid @query.35))
)
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))

(implies 
;; def=Prims.fst(389,18-389,39); use=StlcCbvDbParSubst.fst(197,2-204,15)
(and 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(197,2-204,15)
(not 
;; def=StlcCbvDbParSubst.fst(196,22-196,23); use=StlcCbvDbParSubst.fst(197,8-197,9)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_ELam x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1))
)


;; def=StlcCbvDbParSubst.fst(196,22-204,9); use=StlcCbvDbParSubst.fst(197,8-204,9)
(= x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1
StlcStrongDbParSubst.EUnit@tok)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(197,2-204,15)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.36))
))
))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_below, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcCbvDbParSubst.below.fuel_instrumented, @fuel_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented, @fuel_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented, @fuel_irrelevance_StlcCbvDbParSubst.below.fuel_instrumented, @fuel_irrelevance_StlcStrongDbParSubst.sub_elam.fuel_instrumented, @fuel_irrelevance_StlcStrongDbParSubst.subst.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, StlcStrongDbParSubst_interpretation_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb, StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3, assumption_StlcStrongDbParSubst.exp__uu___haseq, binder_x_5b9d765ad3faa1eaf3f2d264958bfc68_2, binder_x_994c99bbacb216630d104a4d01f030da_0, binder_x_b18d8f57b457b8a39aa74f6fc8a9ad4c_1, bool_inversion, constructor_distinct_StlcStrongDbParSubst.EApp, constructor_distinct_StlcStrongDbParSubst.ELam, constructor_distinct_StlcStrongDbParSubst.EUnit, constructor_distinct_StlcStrongDbParSubst.EVar, disc_equation_StlcStrongDbParSubst.EApp, disc_equation_StlcStrongDbParSubst.ELam, disc_equation_StlcStrongDbParSubst.EUnit, disc_equation_StlcStrongDbParSubst.EVar, equality_tok_StlcStrongDbParSubst.EUnit@tok, equation_FStar.FunctionalExtensionality.feq, equation_Prims.nat, equation_StlcCbvDbParSubst.sub_below, equation_StlcStrongDbParSubst.sub, equation_StlcStrongDbParSubst.sub_inc, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcCbvDbParSubst.below.fuel_instrumented, equation_with_fuel_StlcStrongDbParSubst.sub_elam.fuel_instrumented, equation_with_fuel_StlcStrongDbParSubst.subst.fuel_instrumented, fuel_guarded_inversion_StlcStrongDbParSubst.exp, fuel_token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented_token, function_token_typing_Prims.__cache_version_number__, function_token_typing_StlcStrongDbParSubst.sub_inc, int_inversion, int_typing, lemma_StlcStrongDbParSubst.subst_extensional, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_StlcStrongDbParSubst.EApp__0, projection_inverse_StlcStrongDbParSubst.EApp__1, projection_inverse_StlcStrongDbParSubst.ELam__0, projection_inverse_StlcStrongDbParSubst.ELam__1, projection_inverse_StlcStrongDbParSubst.EVar__0, refinement_interpretation_Tm_refine_13235449bc298814e56647817a5a5586, refinement_interpretation_Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e, refinement_interpretation_Tm_refine_3a608b8abbc2c0adff54f5c4ee0a7b37, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a, refinement_interpretation_Tm_refine_d940d2c8d911134ce831f45f5b4d2cb0, subterm_ordering_StlcStrongDbParSubst.EApp, subterm_ordering_StlcStrongDbParSubst.ELam, token_correspondence_StlcCbvDbParSubst.below.fuel_instrumented, token_correspondence_StlcStrongDbParSubst.sub_elam, token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented, token_correspondence_StlcStrongDbParSubst.sub_inc, typing_StlcCbvDbParSubst.below, typing_tok_StlcStrongDbParSubst.EUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(196,0-204,15)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,27-194,43); use=StlcCbvDbParSubst.fst(196,8-196,19)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_4d1b86ea580da57f559e3df8040bf8a5))

:named refinement_kinding_Tm_refine_4d1b86ea580da57f559e3df8040bf8a5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,27-194,43); use=StlcCbvDbParSubst.fst(196,8-196,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(196,8-196,19)
(BoxBool_proj_0 (StlcCbvDbParSubst.below @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x2)))
:qid refinement_interpretation_Tm_refine_4d1b86ea580da57f559e3df8040bf8a5))

:named refinement_interpretation_Tm_refine_4d1b86ea580da57f559e3df8040bf8a5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4d1b86ea580da57f559e3df8040bf8a5
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,27-194,43); use=StlcCbvDbParSubst.fst(196,8-196,19)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0))))
:qid haseqTm_refine_4d1b86ea580da57f559e3df8040bf8a5))

:named haseqTm_refine_4d1b86ea580da57f559e3df8040bf8a5))
(declare-fun Tm_refine_00741f5f742c62b37fe080630ca1153a (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-194,67); use=StlcCbvDbParSubst.fst(196,8-196,19)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_00741f5f742c62b37fe080630ca1153a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_00741f5f742c62b37fe080630ca1153a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_00741f5f742c62b37fe080630ca1153a))

:named refinement_kinding_Tm_refine_00741f5f742c62b37fe080630ca1153a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-194,67); use=StlcCbvDbParSubst.fst(196,8-196,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_00741f5f742c62b37fe080630ca1153a @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.sub)

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(196,8-196,19)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(196,8-196,19)
(StlcCbvDbParSubst.sub_below @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_00741f5f742c62b37fe080630ca1153a @x2)))
:qid refinement_interpretation_Tm_refine_00741f5f742c62b37fe080630ca1153a))

:named refinement_interpretation_Tm_refine_00741f5f742c62b37fe080630ca1153a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_00741f5f742c62b37fe080630ca1153a
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-194,67); use=StlcCbvDbParSubst.fst(196,8-196,19)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_00741f5f742c62b37fe080630ca1153a @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.sub)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_00741f5f742c62b37fe080630ca1153a @x0))))
:qid haseqTm_refine_00741f5f742c62b37fe080630ca1153a))

:named haseqTm_refine_00741f5f742c62b37fe080630ca1153a))

(declare-fun Tm_refine_df7da7d8dc76ba592c257d4b28887d14 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-204,15); use=StlcCbvDbParSubst.fst(196,0-204,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_df7da7d8dc76ba592c257d4b28887d14 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_df7da7d8dc76ba592c257d4b28887d14 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_df7da7d8dc76ba592c257d4b28887d14))

:named refinement_kinding_Tm_refine_df7da7d8dc76ba592c257d4b28887d14))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-204,15); use=StlcCbvDbParSubst.fst(196,0-204,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_df7da7d8dc76ba592c257d4b28887d14 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.sub)

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(196,8-196,19)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(196,8-196,19)
(StlcCbvDbParSubst.sub_below @x2
@x1)
)


;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(197,2-204,15)

;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(197,2-204,15)
(Valid 
;; def=StlcCbvDbParSubst.fst(197,2-204,15); use=StlcCbvDbParSubst.fst(197,2-204,15)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x3
@x4)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_df7da7d8dc76ba592c257d4b28887d14 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_df7da7d8dc76ba592c257d4b28887d14))

:named refinement_interpretation_Tm_refine_df7da7d8dc76ba592c257d4b28887d14))
;;;;;;;;;;;;;;;;haseq for Tm_refine_df7da7d8dc76ba592c257d4b28887d14
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(194,47-204,15); use=StlcCbvDbParSubst.fst(196,0-204,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_df7da7d8dc76ba592c257d4b28887d14 @x0
@x1
@x2)))
(Valid (Prims.hasEq StlcStrongDbParSubst.sub)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_df7da7d8dc76ba592c257d4b28887d14 @x0
@x1
@x2))))
:qid haseqTm_refine_df7da7d8dc76ba592c257d4b28887d14))

:named haseqTm_refine_df7da7d8dc76ba592c257d4b28887d14))


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.below x v})
;   (s: StlcStrongDbParSubst.sub{StlcCbvDbParSubst.sub_below x s})
;   (x: StlcStrongDbParSubst.var)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.below x v})
;   (s: (s: StlcStrongDbParSubst.sub{StlcCbvDbParSubst.sub_below x s}){v << v})
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) Prims.hasEq StlcStrongDbParSubst.exp


; Context: While encoding a query
; While typechecking the top-level declaration `let rec subst_below`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(196,0-204,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
(Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x0))
(HasType @x2
(Tm_refine_00741f5f742c62b37fe080630ca1153a @x0))
(HasType @x3
StlcStrongDbParSubst.var)
(HasType @x4
(Tm_refine_4d1b86ea580da57f559e3df8040bf8a5 @x3))
(HasType @x5
(Tm_refine_df7da7d8dc76ba592c257d4b28887d14 @x3
@x4
@x1))
(HasType @x6
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(196,8-196,19)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(196,8-196,19)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(196,8-196,19)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_below, 3)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_StlcStrongDbParSubst.exp__uu___haseq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec subst_below


; <Start encoding let rec subst_below>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.subst_below (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.subst_below@tok () Term)

; </end encoding let rec subst_below>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(206,0-207,63)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_bf0131f13155cbc90a3c62011d12629b () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_bf0131f13155cbc90a3c62011d12629b
Tm_type)
:named refinement_kinding_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(206,19-206,34); use=StlcCbvDbParSubst.fst(206,19-206,34)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(206,25-206,33); use=StlcCbvDbParSubst.fst(206,25-206,33)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b))
:qid refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))

:named refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf0131f13155cbc90a3c62011d12629b
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf0131f13155cbc90a3c62011d12629b))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_bf0131f13155cbc90a3c62011d12629b))


; Encoding query formula : forall (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
;   (s: StlcStrongDbParSubst.sub)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) Prims.hasEq StlcStrongDbParSubst.exp


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.subst_closed`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(206,0-207,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(HasType @x1
StlcStrongDbParSubst.sub)
(HasType @x2
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(207,34-207,35)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(207,34-207,35)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(207,34-207,35)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_closed, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_StlcStrongDbParSubst.exp__uu___haseq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.subst_closed


; <Skipped val StlcCbvDbParSubst.subst_closed/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(208,27-208,44)

;;;;;;;;;;;;;;;;v : v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v} (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
(declare-fun x_79883e0c942a6d23a4d1b5b6cecbdfff_0 () Term)
(declare-fun Tm_refine_bf0131f13155cbc90a3c62011d12629b () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_bf0131f13155cbc90a3c62011d12629b
Tm_type)
:named refinement_kinding_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(206,19-206,34); use=StlcCbvDbParSubst.fst(208,8-208,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(206,25-206,33); use=StlcCbvDbParSubst.fst(208,8-208,20)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b))
:qid refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))

:named refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf0131f13155cbc90a3c62011d12629b
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf0131f13155cbc90a3c62011d12629b))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;binder_x_79883e0c942a6d23a4d1b5b6cecbdfff_0
;;; Fact-ids: 
(assert (! (HasType x_79883e0c942a6d23a4d1b5b6cecbdfff_0
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
:named binder_x_79883e0c942a6d23a4d1b5b6cecbdfff_0))
;;;;;;;;;;;;;;;;s : StlcStrongDbParSubst.sub (StlcStrongDbParSubst.sub)
(declare-fun x_b2dd1823af72defc268fddaa468960d0_1 () Term)
;;;;;;;;;;;;;;;;binder_x_b2dd1823af72defc268fddaa468960d0_1
;;; Fact-ids: 
(assert (! (HasType x_b2dd1823af72defc268fddaa468960d0_1
StlcStrongDbParSubst.sub)
:named binder_x_b2dd1823af72defc268fddaa468960d0_1))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.subst_closed (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.subst_closed@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit). v = StlcStrongDbParSubst.subst s v ==> p pure_result) ==>
;   (StlcCbvDbParSubst.closed v ==> StlcCbvDbParSubst.below 0 v) /\
;   (forall (any_result: v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v}).
;       v == any_result ==>
;       Prims.auto_squash (StlcCbvDbParSubst.sub_below 0 s) /\
;       (forall (any_result: StlcStrongDbParSubst.sub).
;           s == any_result ==>
;           (forall (pure_result: Prims.unit). v = StlcStrongDbParSubst.subst s v ==> p pure_result)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec subst_closed`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=StlcCbvDbParSubst.fst(208,27-208,44); use=StlcCbvDbParSubst.fst(208,27-208,44)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(208,27-208,44)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=StlcCbvDbParSubst.fst(207,33-207,48); use=StlcCbvDbParSubst.fst(208,27-208,44)
(or label_2

;; def=StlcCbvDbParSubst.fst(207,33-207,48); use=StlcCbvDbParSubst.fst(208,27-208,44)
(= x_79883e0c942a6d23a4d1b5b6cecbdfff_0
(StlcStrongDbParSubst.subst x_b2dd1823af72defc268fddaa468960d0_1
x_79883e0c942a6d23a4d1b5b6cecbdfff_0))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(208,27-208,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(208,27-208,44)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(208,27-208,44)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(208,27-208,44)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(208,27-208,44)
(and (implies 
;; def=StlcCbvDbParSubst.fst(206,25-206,33); use=StlcCbvDbParSubst.fst(208,41-208,42)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed x_79883e0c942a6d23a4d1b5b6cecbdfff_0))


;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(208,41-208,42)
(or label_3

;; def=StlcCbvDbParSubst.fst(194,33-194,42); use=StlcCbvDbParSubst.fst(208,41-208,42)
(BoxBool_proj_0 (StlcCbvDbParSubst.below (BoxInt 0)
x_79883e0c942a6d23a4d1b5b6cecbdfff_0))
)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(208,27-208,44)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)

;; def=StlcCbvDbParSubst.fst(194,27-208,22); use=StlcCbvDbParSubst.fst(208,27-208,44)
(= x_79883e0c942a6d23a4d1b5b6cecbdfff_0
@x1)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(208,27-208,44)
(and 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(208,43-208,44)
(or label_4

;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(208,43-208,44)
(Valid 
;; def=StlcCbvDbParSubst.fst(194,53-194,66); use=StlcCbvDbParSubst.fst(208,43-208,44)
(StlcCbvDbParSubst.sub_below (BoxInt 0)
x_b2dd1823af72defc268fddaa468960d0_1)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(208,27-208,44)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
StlcStrongDbParSubst.sub)

;; def=StlcCbvDbParSubst.fst(194,47-208,24); use=StlcCbvDbParSubst.fst(208,27-208,44)
(= x_b2dd1823af72defc268fddaa468960d0_1
@x2)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(208,27-208,38)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=StlcCbvDbParSubst.fst(195,33-195,48); use=StlcCbvDbParSubst.fst(208,27-208,38)
(= x_79883e0c942a6d23a4d1b5b6cecbdfff_0
(StlcStrongDbParSubst.subst x_b2dd1823af72defc268fddaa468960d0_1
x_79883e0c942a6d23a4d1b5b6cecbdfff_0))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(208,27-208,38)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(208,27-208,38)
(ApplyTT @x0
@x3)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_closed, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_79883e0c942a6d23a4d1b5b6cecbdfff_0, equation_Prims.nat, equation_StlcCbvDbParSubst.closed, equation_StlcCbvDbParSubst.sub_below, equation_StlcStrongDbParSubst.var, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(208,0-208,44)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_bf0131f13155cbc90a3c62011d12629b () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_bf0131f13155cbc90a3c62011d12629b
Tm_type)
:named refinement_kinding_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(206,19-206,34); use=StlcCbvDbParSubst.fst(208,8-208,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(206,25-206,33); use=StlcCbvDbParSubst.fst(208,8-208,20)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b))
:qid refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))

:named refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf0131f13155cbc90a3c62011d12629b
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf0131f13155cbc90a3c62011d12629b))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_bf0131f13155cbc90a3c62011d12629b))

(declare-fun Tm_refine_8497022bceea147bafbdbec845f24326 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(206,38-208,44); use=StlcCbvDbParSubst.fst(208,0-208,44)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8497022bceea147bafbdbec845f24326 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8497022bceea147bafbdbec845f24326 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8497022bceea147bafbdbec845f24326))

:named refinement_kinding_Tm_refine_8497022bceea147bafbdbec845f24326))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(206,38-208,44); use=StlcCbvDbParSubst.fst(208,0-208,44)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8497022bceea147bafbdbec845f24326 @x2
@x3))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.sub)

;; def=StlcCbvDbParSubst.fst(208,27-208,44); use=StlcCbvDbParSubst.fst(208,27-208,44)

;; def=StlcCbvDbParSubst.fst(208,27-208,44); use=StlcCbvDbParSubst.fst(208,27-208,44)
(Valid 
;; def=StlcCbvDbParSubst.fst(208,27-208,44); use=StlcCbvDbParSubst.fst(208,27-208,44)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
@x3)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8497022bceea147bafbdbec845f24326 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8497022bceea147bafbdbec845f24326))

:named refinement_interpretation_Tm_refine_8497022bceea147bafbdbec845f24326))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8497022bceea147bafbdbec845f24326
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(206,38-208,44); use=StlcCbvDbParSubst.fst(208,0-208,44)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8497022bceea147bafbdbec845f24326 @x0
@x1)))
(Valid (Prims.hasEq StlcStrongDbParSubst.sub)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8497022bceea147bafbdbec845f24326 @x0
@x1))))
:qid haseqTm_refine_8497022bceea147bafbdbec845f24326))

:named haseqTm_refine_8497022bceea147bafbdbec845f24326))


; Encoding query formula : forall (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
;   (s: StlcStrongDbParSubst.sub)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
;   (s: StlcStrongDbParSubst.sub{v << v})
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) Prims.hasEq StlcStrongDbParSubst.exp


; Context: While encoding a query
; While typechecking the top-level declaration `let rec subst_closed`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(208,0-208,44)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(HasType @x1
StlcStrongDbParSubst.sub)
(HasType @x2
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(HasType @x3
(Tm_refine_8497022bceea147bafbdbec845f24326 @x2
@x0))
(HasType @x4
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(208,8-208,20)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(208,8-208,20)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(208,8-208,20)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_closed, 3)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_StlcStrongDbParSubst.exp__uu___haseq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec subst_closed


; <Start encoding let rec subst_closed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.subst_closed (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.subst_closed@tok () Term)

; </end encoding let rec subst_closed>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(210,0-212,55)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_bf0131f13155cbc90a3c62011d12629b () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_bf0131f13155cbc90a3c62011d12629b
Tm_type)
:named refinement_kinding_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(210,34-210,49); use=StlcCbvDbParSubst.fst(210,34-210,49)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(210,40-210,48); use=StlcCbvDbParSubst.fst(210,40-210,48)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b))
:qid refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))

:named refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf0131f13155cbc90a3c62011d12629b
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf0131f13155cbc90a3c62011d12629b))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_bf0131f13155cbc90a3c62011d12629b))


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
;   (y: StlcStrongDbParSubst.var)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *)
;   Prims.hasEq StlcStrongDbParSubst.exp /\
;   (forall (any_result: Type0). StlcStrongDbParSubst.exp == any_result ==> x + 1 >= 0)


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.subst_gen_elam_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(210,0-212,55)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(HasType @x2
StlcStrongDbParSubst.var)
(HasType @x3
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(211,15-212,54)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(211,17-211,25)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(211,17-211,25)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(211,17-211,25)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(211,15-212,54)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(211,15-212,54)
(= StlcStrongDbParSubst.exp
@x4)
)

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(212,42-212,47)
(or label_2

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(212,42-212,47)
(>= (BoxInt_proj_0 (Prims.op_Addition @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_gen_elam_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_StlcStrongDbParSubst.exp__uu___haseq, equation_Prims.nat, equation_StlcStrongDbParSubst.var, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.subst_gen_elam_aux


; <Skipped val StlcCbvDbParSubst.subst_gen_elam_aux/>

;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(171,4-171,16); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1))
:qid token_correspondence_StlcCbvDbParSubst.sub_beta_gen))

:named token_correspondence_StlcCbvDbParSubst.sub_beta_gen))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! (HasType Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545
Tm_type)
:named kinding_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(171,4-171,16); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.sub_beta_gen@tok
Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545))

;; def=StlcCbvDbParSubst.fst(171,4-171,16); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x1)
@x2)
(StlcCbvDbParSubst.sub_beta_gen @x1
@x2))
 

:pattern ((StlcCbvDbParSubst.sub_beta_gen @x1
@x2))
:qid function_token_typing_StlcCbvDbParSubst.sub_beta_gen.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.sub_beta_gen@tok))
:qid function_token_typing_StlcCbvDbParSubst.sub_beta_gen))

:named function_token_typing_StlcCbvDbParSubst.sub_beta_gen))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(170,19-170,40); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545
;;; Fact-ids: Name StlcCbvDbParSubst.sub_beta_gen; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(170,19-170,40); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545)
(and 
;; def=StlcCbvDbParSubst.fst(170,19-170,40); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
StlcStrongDbParSubst.sub))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(170,19-170,40); use=StlcCbvDbParSubst.fst(171,4-171,16)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_677fb9c9b85905a26d5f46b7bcbaa545))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(214,2-223,13)

(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_bf0131f13155cbc90a3c62011d12629b () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_bf0131f13155cbc90a3c62011d12629b
Tm_type)
:named refinement_kinding_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(210,34-210,49); use=StlcCbvDbParSubst.fst(213,4-213,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(210,40-210,48); use=StlcCbvDbParSubst.fst(213,4-213,22)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b))
:qid refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))

:named refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf0131f13155cbc90a3c62011d12629b
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf0131f13155cbc90a3c62011d12629b))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_bf0131f13155cbc90a3c62011d12629b))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcCbvDbParSubst.sub_beta_gen@tok))
:named @kick_partial_app_a7b0b91e7ff84d06cca72e282f5e01d6))
























; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
;   (y: StlcStrongDbParSubst.var).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen x v) y =
;         StlcCbvDbParSubst.sub_beta_gen (x + 1) v y ==>
;         p pure_result) ==>
;     (forall (k: Prims.pure_post Prims.unit).
;         (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;         (y = 0 == true ==> (forall (any_result: Prims.unit). k any_result)) /\
;         (~(y = 0 = true) ==>
;           (forall (b: Prims.bool).
;               y = 0 == b ==>
;               Prims.hasEq StlcStrongDbParSubst.exp /\
;               (forall (any_result: Type0).
;                   StlcStrongDbParSubst.exp == any_result ==>
;                   y - 1 >= 0 /\
;                   (forall (return_val: StlcStrongDbParSubst.var).
;                       return_val == y - 1 ==>
;                       (forall (any_result: StlcStrongDbParSubst.exp).
;                           StlcCbvDbParSubst.sub_beta_gen x v (y - 1) == any_result ==>
;                           (forall (pure_result: StlcStrongDbParSubst.exp).
;                               (StlcStrongDbParSubst.renaming StlcStrongDbParSubst.sub_inc /\
;                                 EVar? (StlcCbvDbParSubst.sub_beta_gen x v (y - 1)) ==>
;                                 EVar? pure_result) ==>
;                               StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc
;                                 (StlcCbvDbParSubst.sub_beta_gen x v (y - 1)) ==
;                               pure_result ==>
;                               (forall (any_result: Prims.bool).
;                                   StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen x v)
;                                     y =
;                                   StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc
;                                     (StlcCbvDbParSubst.sub_beta_gen x v (y - 1)) ==
;                                   any_result ==>
;                                   (forall (any_result: Prims.logical).
;                                       StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen x
;                                             v)
;                                         y =
;                                       StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc
;                                         (StlcCbvDbParSubst.sub_beta_gen x v (y - 1)) ==
;                                       any_result ==>
;                                       StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen x
;                                             v)
;                                         y =
;                                       StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc
;                                         (StlcCbvDbParSubst.sub_beta_gen x v (y - 1)) /\
;                                       (forall (pure_result: Prims.unit).
;                                           StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen
;                                                 x
;                                                 v)
;                                             y =
;                                           StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc
;                                             (StlcCbvDbParSubst.sub_beta_gen x v (y - 1)) ==>
;                                           (forall (k: Prims.pure_post Prims.unit).
;                                               (forall (x: Prims.unit).
;                                                   {:pattern Prims.guard_free (k x)}
;                                                   k x ==> k x) ==>
;                                               (y - 1 < x == true ==>
;                                                 (forall (any_result: Prims.unit). k any_result)) /\
;                                               (~(y - 1 < x = true) ==>
;                                                 (forall (b: Prims.bool).
;                                                     y - 1 < x == b ==>
;                                                     (forall (k: Prims.pure_post Prims.unit).
;                                                         (forall (x: Prims.unit).
;                                                             {:pattern Prims.guard_free (k x)}
;                                                             k x ==> k x) ==>
;                                                         (y - 1 = x == true ==>
;                                                           Prims.hasEq StlcStrongDbParSubst.exp /\
;                                                           (forall (any_result: Type0).
;                                                               StlcStrongDbParSubst.exp == any_result ==>
;                                                               y - 1 >= 0 /\
;                                                               (forall (return_val:
;                                                                   StlcStrongDbParSubst.var).
;                                                                   return_val == y - 1 ==>
;                                                                   (forall (any_result:
;                                                                       StlcStrongDbParSubst.exp).
;                                                                       StlcCbvDbParSubst.sub_beta_gen
;                                                                         x
;                                                                         v
;                                                                         (y - 1) ==
;                                                                       any_result ==>
;                                                                       (forall (any_result:
;                                                                           Prims.bool).
;                                                                           StlcCbvDbParSubst.sub_beta_gen
;                                                                             x
;                                                                             v
;                                                                             (y - 1) =
;                                                                           v ==
;                                                                           any_result ==>
;                                                                           (forall (any_result:
;                                                                               Prims.logical).
;                                                                               StlcCbvDbParSubst.sub_beta_gen
;                                                                                 x
;                                                                                 v
;                                                                                 (y - 1) =
;                                                                               v ==
;                                                                               any_result ==>
;                                                                               StlcCbvDbParSubst.sub_beta_gen
;                                                                                 x
;                                                                                 v
;                                                                                 (y - 1) =
;                                                                               v /\
;                                                                               (forall (pure_result:
;                                                                                   Prims.unit).
;                                                                                   StlcCbvDbParSubst.sub_beta_gen
;                                                                                     x
;                                                                                     v
;                                                                                     (y - 1) =
;                                                                                   v ==>
;                                                                                   Prims.hasEq StlcStrongDbParSubst.exp
;                                                                                    /\
;                                                                                   (forall (any_result:
;                                                                                       Type0).
;                                                                                       StlcStrongDbParSubst.exp ==
;                                                                                       any_result ==>
;                                                                                       x + 1 >= 0 /\
;                                                                                       (forall (return_val:
;                                                                                           StlcStrongDbParSubst.var)
;                                                                                         .
;                                                                                           return_val ==
;                                                                                           x + 1 ==>
;                                                                                           (forall (any_result:
;                                                                                               StlcStrongDbParSubst.sub)
;                                                                                               (any_result:
;                                                                                               StlcStrongDbParSubst.exp)
;                                                                                             .
;                                                                                               StlcCbvDbParSubst.sub_beta_gen
;                                                                                                 (x +
;                                                                                                   1)
;                                                                                                 v
;                                                                                                 y ==
;                                                                                               any_result ==>
;                                                                                               (forall
;                                                                                                   (any_result:
;                                                                                                   Prims.bool)
;                                                                                                 .
;                                                                                                   StlcCbvDbParSubst.sub_beta_gen
;                                                                                                     (
;                                                                                                       x +
;                                                                                                       1
;                                                                                                     )
;                                                                                                     v
;                                                                                                     y
;                                                                                                    =
;                                                                                                   v ==
;                                                                                                   any_result ==>
;                                                                                                   (forall
;                                                                                                       (any_result:
;                                                                                                       Prims.logical)
;                                                                                                     .
;                                                                                                       StlcCbvDbParSubst.sub_beta_gen
;                                                                                                         (
;                                                                                                           x +
;                                                                                                           1
;                                                                                                         )
;                                                                                                         v
;                                                                                                         y
;                                                                                                        =
;                                                                                                       v ==
;                                                                                                       any_result ==>
;                                                                                                       StlcCbvDbParSubst.sub_beta_gen
;                                                                                                         (
;                                                                                                           x +
;                                                                                                           1
;                                                                                                         )
;                                                                                                         v
;                                                                                                         y
;                                                                                                        =
;                                                                                                       v /\
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (pure_result:
;                                                                                                           Prims.unit)
;                                                                                                         .
;                                                                                                           StlcCbvDbParSubst.sub_beta_gen
;                                                                                                             (
;                                                                                                               x +
;                                                                                                               1
;                                                                                                             )
;                                                                                                             v
;                                                                                                             y
;                                                                                                            =
;                                                                                                           v ==>
;                                                                                                           (
;                                                                                                             forall
;                                                                                                               (pure_result:
;                                                                                                               Prims.unit)
;                                                                                                             .
;                                                                                                               v =
;                                                                                                               StlcStrongDbParSubst.subst
;                                                                                                                 StlcStrongDbParSubst.sub_inc
;                                                                                                                 v
;                                                                                                                ==>
;                                                                                                               k
;                                                                                                                 pure_result
; 
;                                                                                                           )
;                                                                                                       )
;                                                                                                   ))
;                                                                                           )))))))))) /\
;                                                         (~(y - 1 = x = true) ==>
;                                                           (forall (b: Prims.bool).
;                                                               y - 1 = x == b ==>
;                                                               (forall (any_result: Prims.unit).
;                                                                   k any_result)))))))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let subst_gen_elam_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(HasType @x2
StlcStrongDbParSubst.var))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=StlcCbvDbParSubst.fst(211,15-212,54); use=StlcCbvDbParSubst.fst(214,2-223,13)
(or label_2

;; def=StlcCbvDbParSubst.fst(211,15-212,54); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
(Prims.op_Addition @x0
(BoxInt 1)))
@x1)
@x2))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x5 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x3
@x5)
)


;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x4
@x5)
)
)
 :weight 0


:pattern ((ApplyTT @x4
@x5))
:qid @query.4))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and (implies 
;; def=StlcCbvDbParSubst.fst(214,5-214,10); use=StlcCbvDbParSubst.fst(214,5-214,10)
(= (Prims.op_Equality Prims.int
@x2
(BoxInt 0))
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.5))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(214,2-223,13)
(not 
;; def=StlcCbvDbParSubst.fst(214,5-214,10); use=StlcCbvDbParSubst.fst(214,5-214,10)
(= (Prims.op_Equality Prims.int
@x2
(BoxInt 0))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.bool)

;; def=StlcCbvDbParSubst.fst(214,5-223,13); use=StlcCbvDbParSubst.fst(214,5-223,13)
(= (Prims.op_Equality Prims.int
@x2
(BoxInt 0))
@x5)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(216,13-216,21)
(or label_3

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(216,13-216,21)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(216,13-216,21)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= StlcStrongDbParSubst.exp
@x6)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(217,44-217,49)
(or label_4

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(217,44-217,49)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x2
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= @x7
(Prims.op_Subtraction @x2
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(72,21-72,22); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))
@x8)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(217,12-217,17)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(217,12-217,17)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(217,12-217,17)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(217,12-217,17)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(217,12-217,17)
(StlcStrongDbParSubst.renaming StlcStrongDbParSubst.sub_inc@tok)
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(217,12-217,17)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(217,12-217,17)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x9))
)


;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc@tok
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1))))
@x9)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (Prims.op_Equality StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
@x2)
(StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc@tok
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))))
@x10)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (Prims.b2t (Prims.op_Equality StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
@x2)
(StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc@tok
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1))))))
@x11)
)

;; def=Prims.fst(441,29-441,97); use=StlcCbvDbParSubst.fst(216,5-216,11)
(and 
;; def=StlcCbvDbParSubst.fst(216,11-217,52); use=StlcCbvDbParSubst.fst(216,5-216,11)
(or label_5

;; def=StlcCbvDbParSubst.fst(216,11-217,52); use=StlcCbvDbParSubst.fst(216,5-216,11)
(= (StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
@x2)
(StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc@tok
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))))
)


;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(216,5-216,11)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=StlcCbvDbParSubst.fst(216,11-217,52); use=StlcCbvDbParSubst.fst(216,5-216,11)
(= (StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
@x2)
(StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc@tok
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))))
)

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x14 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x4
@x14)
)


;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x13
@x14)
)
)
 :weight 0


:pattern ((ApplyTT @x13
@x14))
:qid @query.15))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and (implies 
;; def=StlcCbvDbParSubst.fst(218,13-218,20); use=StlcCbvDbParSubst.fst(218,13-218,20)
(= (Prims.op_LessThan (Prims.op_Subtraction @x2
(BoxInt 1))
@x0)
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x13
@x14)
)
)
 
;;no pats
:qid @query.16))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(214,2-223,13)
(not 
;; def=StlcCbvDbParSubst.fst(218,13-218,20); use=StlcCbvDbParSubst.fst(218,13-218,20)
(= (Prims.op_LessThan (Prims.op_Subtraction @x2
(BoxInt 1))
@x0)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=StlcCbvDbParSubst.fst(218,13-223,12); use=StlcCbvDbParSubst.fst(218,13-223,12)
(= (Prims.op_LessThan (Prims.op_Subtraction @x2
(BoxInt 1))
@x0)
@x14)
)

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x16 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x13
@x16)
)


;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x15
@x16)
)
)
 :weight 0


:pattern ((ApplyTT @x15
@x16))
:qid @query.19))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and (implies 
;; def=StlcCbvDbParSubst.fst(219,13-219,20); use=StlcCbvDbParSubst.fst(219,13-219,20)
(= (Prims.op_Equality Prims.int
(Prims.op_Subtraction @x2
(BoxInt 1))
@x0)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(220,45-220,46)
(or label_6

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(220,45-220,46)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(220,45-220,46)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= StlcStrongDbParSubst.exp
@x16)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(220,37-220,42)
(or label_7

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(220,37-220,42)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x2
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= @x17
(Prims.op_Subtraction @x2
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
StlcStrongDbParSubst.exp)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))
@x18)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (Prims.op_Equality StlcStrongDbParSubst.exp
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))
@x1)
@x19)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (Prims.b2t (Prims.op_Equality StlcStrongDbParSubst.exp
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))
@x1))
@x20)
)

;; def=Prims.fst(441,29-441,97); use=StlcCbvDbParSubst.fst(220,13-220,19)
(and 
;; def=StlcCbvDbParSubst.fst(220,19-220,47); use=StlcCbvDbParSubst.fst(220,13-220,19)
(or label_8

;; def=StlcCbvDbParSubst.fst(220,19-220,47); use=StlcCbvDbParSubst.fst(220,13-220,19)
(= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))
@x1)
)


;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(220,13-220,19)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.unit)

;; def=StlcCbvDbParSubst.fst(220,19-220,47); use=StlcCbvDbParSubst.fst(220,13-220,19)
(= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
@x0)
@x1)
(Prims.op_Subtraction @x2
(BoxInt 1)))
@x1)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(221,45-221,46)
(or label_9

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(221,45-221,46)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(221,45-221,46)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= StlcStrongDbParSubst.exp
@x22)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(214,2-223,13)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(221,33-221,38)
(or label_10

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(221,33-221,38)
(>= (BoxInt_proj_0 (Prims.op_Addition @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= @x23
(Prims.op_Addition @x0
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x24 Term))
 (! (implies (HasType @x24
StlcStrongDbParSubst.sub)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
StlcStrongDbParSubst.exp)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
(Prims.op_Addition @x0
(BoxInt 1)))
@x1)
@x2)
@x25)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (Prims.op_Equality StlcStrongDbParSubst.exp
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
(Prims.op_Addition @x0
(BoxInt 1)))
@x1)
@x2)
@x1)
@x26)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=StlcCbvDbParSubst.fst(214,2-223,13)
(= (Prims.b2t (Prims.op_Equality StlcStrongDbParSubst.exp
(ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
(Prims.op_Addition @x0
(BoxInt 1)))
@x1)
@x2)
@x1))
@x27)
)

;; def=Prims.fst(441,29-441,97); use=StlcCbvDbParSubst.fst(221,13-221,19)
(and 
;; def=StlcCbvDbParSubst.fst(221,19-221,47); use=StlcCbvDbParSubst.fst(221,13-221,19)
(or label_11

;; def=StlcCbvDbParSubst.fst(221,19-221,47); use=StlcCbvDbParSubst.fst(221,13-221,19)
(= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
(Prims.op_Addition @x0
(BoxInt 1)))
@x1)
@x2)
@x1)
)


;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(221,13-221,19)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
Prims.unit)

;; def=StlcCbvDbParSubst.fst(221,19-221,47); use=StlcCbvDbParSubst.fst(221,13-221,19)
(= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.sub_beta_gen@tok
(Prims.op_Addition @x0
(BoxInt 1)))
@x1)
@x2)
@x1)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(222,13-222,25)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.unit)

;; def=StlcCbvDbParSubst.fst(207,33-207,48); use=StlcCbvDbParSubst.fst(222,13-222,25)
(= @x1
(StlcStrongDbParSubst.subst StlcStrongDbParSubst.sub_inc@tok
@x1))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(222,13-222,25)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(222,13-222,25)
(ApplyTT @x15
@x29)
)
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.20))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(214,2-223,13)
(not 
;; def=StlcCbvDbParSubst.fst(219,13-219,20); use=StlcCbvDbParSubst.fst(219,13-219,20)
(= (Prims.op_Equality Prims.int
(Prims.op_Subtraction @x2
(BoxInt 1))
@x0)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.bool)

;; def=StlcCbvDbParSubst.fst(219,13-223,12); use=StlcCbvDbParSubst.fst(219,13-223,12)
(= (Prims.op_Equality Prims.int
(Prims.op_Subtraction @x2
(BoxInt 1))
@x0)
@x16)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(forall ((@x17 Term))
 (! (implies (HasType @x17
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=StlcCbvDbParSubst.fst(214,2-223,13)
(ApplyTT @x15
@x17)
)
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_gen_elam_aux, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcCbvDbParSubst.below.fuel_instrumented, @fuel_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented, @fuel_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented, @fuel_irrelevance_StlcStrongDbParSubst.subst.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, assumption_StlcStrongDbParSubst.exp__uu___haseq, bool_inversion, constructor_distinct_StlcStrongDbParSubst.EVar, data_elim_StlcStrongDbParSubst.EVar, equation_Prims.nat, equation_StlcCbvDbParSubst.closed, equation_StlcCbvDbParSubst.sub_beta_gen, equation_StlcStrongDbParSubst.sub, equation_StlcStrongDbParSubst.sub_inc, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcCbvDbParSubst.below.fuel_instrumented, equation_with_fuel_StlcStrongDbParSubst.sub_elam.fuel_instrumented, equation_with_fuel_StlcStrongDbParSubst.subst.fuel_instrumented, function_token_typing_Prims.__cache_version_number__, function_token_typing_StlcStrongDbParSubst.sub_inc, int_inversion, int_typing, interpretation_Tm_abs_d70941dbcdfb3551376d504a2f54c457, primitive_Prims.op_Addition, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_StlcStrongDbParSubst.EVar__0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b, token_correspondence_StlcCbvDbParSubst.sub_beta_gen, token_correspondence_StlcStrongDbParSubst.sub_inc, typing_StlcCbvDbParSubst.closed, typing_StlcCbvDbParSubst.sub_beta_gen, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let subst_gen_elam_aux


; <Start encoding let subst_gen_elam_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.subst_gen_elam_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.subst_gen_elam_aux@tok () Term)

; </end encoding let subst_gen_elam_aux>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(225,0-227,56)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_bf0131f13155cbc90a3c62011d12629b () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_bf0131f13155cbc90a3c62011d12629b
Tm_type)
:named refinement_kinding_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(225,41-225,56); use=StlcCbvDbParSubst.fst(225,41-225,56)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(225,47-225,55); use=StlcCbvDbParSubst.fst(225,47-225,55)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b))
:qid refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))

:named refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf0131f13155cbc90a3c62011d12629b
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf0131f13155cbc90a3c62011d12629b))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_bf0131f13155cbc90a3c62011d12629b))


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) x + 1 >= 0


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.subst_gen_elam_aux_forall`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(225,0-227,56)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(HasType @x2
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(227,46-227,51)
(or label_1

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(227,46-227,51)
(>= (BoxInt_proj_0 (Prims.op_Addition @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_gen_elam_aux_forall, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.nat, equation_StlcStrongDbParSubst.var, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.subst_gen_elam_aux_forall


; <Skipped val StlcCbvDbParSubst.subst_gen_elam_aux_forall/>


; encoding sigelt let subst_gen_elam_aux_forall


; <Start encoding let subst_gen_elam_aux_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.subst_gen_elam_aux_forall (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.subst_gen_elam_aux_forall@tok () Term)

; </end encoding let subst_gen_elam_aux_forall>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(231,0-233,60)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_bf0131f13155cbc90a3c62011d12629b () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_bf0131f13155cbc90a3c62011d12629b
Tm_type)
:named refinement_kinding_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(231,30-231,45); use=StlcCbvDbParSubst.fst(231,30-231,45)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(231,36-231,44); use=StlcCbvDbParSubst.fst(231,36-231,44)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b))
:qid refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))

:named refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf0131f13155cbc90a3c62011d12629b
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf0131f13155cbc90a3c62011d12629b))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_bf0131f13155cbc90a3c62011d12629b))


; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
;   (t_y: StlcStrongDbParSubst.typ)
;   (e': StlcStrongDbParSubst.exp)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *)
;   Prims.hasEq StlcStrongDbParSubst.exp /\
;   (forall (any_result: Type0).
;       StlcStrongDbParSubst.exp == any_result ==>
;       (forall (pure_result: StlcStrongDbParSubst.exp).
;           (StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen x v) /\
;             EVar? (StlcStrongDbParSubst.ELam t_y e') ==>
;             EVar? pure_result) ==>
;           StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v)
;             (StlcStrongDbParSubst.ELam t_y e') ==
;           pure_result ==>
;           x + 1 >= 0))


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.subst_gen_elam`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(231,0-233,60)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(232,15-233,59)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(232,16-232,21)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(232,16-232,21)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(232,16-232,21)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(232,15-233,59)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(232,15-233,59)
(= StlcStrongDbParSubst.exp
@x5)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(232,16-232,21)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(232,16-232,21)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(232,16-232,21)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(232,16-232,21)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(232,16-232,21)
(StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(232,16-232,21)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar (StlcStrongDbParSubst.ELam @x2
@x3)))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(232,16-232,21)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x6))
)


;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(232,15-233,59)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
(StlcStrongDbParSubst.ELam @x2
@x3))
@x6)
)

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(233,46-233,51)
(or label_2

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(233,46-233,51)
(>= (BoxInt_proj_0 (Prims.op_Addition @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_gen_elam, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, assumption_StlcStrongDbParSubst.exp__uu___haseq, equation_Prims.nat, equation_StlcStrongDbParSubst.var, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.subst_gen_elam


; <Skipped val StlcCbvDbParSubst.subst_gen_elam/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(235,2-239,63)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_bf0131f13155cbc90a3c62011d12629b () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_bf0131f13155cbc90a3c62011d12629b
Tm_type)
:named refinement_kinding_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(231,30-231,45); use=StlcCbvDbParSubst.fst(234,4-234,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(231,36-231,44); use=StlcCbvDbParSubst.fst(234,4-234,18)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b))
:qid refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))

:named refinement_interpretation_Tm_refine_bf0131f13155cbc90a3c62011d12629b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf0131f13155cbc90a3c62011d12629b
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_bf0131f13155cbc90a3c62011d12629b))
(Valid (Prims.hasEq StlcStrongDbParSubst.exp)))
:named haseqTm_refine_bf0131f13155cbc90a3c62011d12629b))






(declare-fun Tm_refine_b047b980053bf44a5eca98477b5d628d (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcStrongDbParSubst.fst(161,33-161,50); use=StlcCbvDbParSubst.fst(236,2-236,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_b047b980053bf44a5eca98477b5d628d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_b047b980053bf44a5eca98477b5d628d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_b047b980053bf44a5eca98477b5d628d))

:named refinement_kinding_Tm_refine_b047b980053bf44a5eca98477b5d628d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcStrongDbParSubst.fst(161,33-161,50); use=StlcCbvDbParSubst.fst(236,2-236,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b047b980053bf44a5eca98477b5d628d @x2
@x3))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.sub)

;; def=StlcStrongDbParSubst.fst(161,40-161,49); use=StlcCbvDbParSubst.fst(236,2-236,19)
(Valid 
;; def=StlcStrongDbParSubst.fst(161,40-161,49); use=StlcCbvDbParSubst.fst(236,2-236,19)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_ee2eb4f65430b296888dd31560cce8c1
(ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x2
@x3))
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b047b980053bf44a5eca98477b5d628d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_b047b980053bf44a5eca98477b5d628d))

:named refinement_interpretation_Tm_refine_b047b980053bf44a5eca98477b5d628d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b047b980053bf44a5eca98477b5d628d
;;; Fact-ids: 
(assert (! 
;; def=StlcStrongDbParSubst.fst(161,33-161,50); use=StlcCbvDbParSubst.fst(236,2-236,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b047b980053bf44a5eca98477b5d628d @x0
@x1)))
(Valid (Prims.hasEq StlcStrongDbParSubst.sub)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b047b980053bf44a5eca98477b5d628d @x0
@x1))))
:qid haseqTm_refine_b047b980053bf44a5eca98477b5d628d))

:named haseqTm_refine_b047b980053bf44a5eca98477b5d628d))












; Encoding query formula : forall (x: StlcStrongDbParSubst.var)
;   (v: StlcStrongDbParSubst.exp{StlcCbvDbParSubst.closed v})
;   (t_y: StlcStrongDbParSubst.typ)
;   (e': StlcStrongDbParSubst.exp).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v)
;           (StlcStrongDbParSubst.ELam t_y e') =
;         StlcStrongDbParSubst.ELam t_y
;           (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (x + 1) v) e') ==>
;         p pure_result) ==>
;     (forall (pure_result: Prims.unit).
;         FStar.FunctionalExtensionality.feq (StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen
;                   x
;                   v))
;           (StlcCbvDbParSubst.sub_beta_gen (x + 1) v) ==>
;         x + 1 >= 0 /\
;         (forall (return_val: StlcStrongDbParSubst.var).
;             return_val == x + 1 ==>
;             (forall (any_result: StlcStrongDbParSubst.sub).
;                 StlcCbvDbParSubst.sub_beta_gen (x + 1) v == any_result ==>
;                 Prims.auto_squash (FStar.FunctionalExtensionality.feq (StlcStrongDbParSubst.sub_elam
;                           (StlcCbvDbParSubst.sub_beta_gen x v))
;                       (StlcCbvDbParSubst.sub_beta_gen (x + 1) v)) /\
;                 (forall (return_val:
;                     s2:
;                     StlcStrongDbParSubst.sub
;                       { FStar.FunctionalExtensionality.feq (StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen
;                                   x
;                                   v))
;                           s2 }).
;                     return_val == StlcCbvDbParSubst.sub_beta_gen (x + 1) v ==>
;                     StlcCbvDbParSubst.sub_beta_gen (x + 1) v == return_val ==>
;                     (forall (pure_result: Prims.unit).
;                         StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen
;                                   x
;                                   v))
;                           e' =
;                         StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (x + 1) v) e' ==>
;                         Prims.hasEq StlcStrongDbParSubst.exp /\
;                         (forall (any_result: Type0).
;                             StlcStrongDbParSubst.exp == any_result ==>
;                             (forall (pure_result: StlcStrongDbParSubst.exp).
;                                 (StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen x v) /\
;                                   EVar? (StlcStrongDbParSubst.ELam t_y e') ==>
;                                   EVar? pure_result) ==>
;                                 StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v)
;                                   (StlcStrongDbParSubst.ELam t_y e') ==
;                                 pure_result ==>
;                                 (forall (pure_result: StlcStrongDbParSubst.exp).
;                                     (StlcStrongDbParSubst.renaming (StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen
;                                                 x
;                                                 v)) /\ EVar? e' ==>
;                                       EVar? pure_result) ==>
;                                     StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam (StlcCbvDbParSubst.sub_beta_gen
;                                               x
;                                               v))
;                                       e' ==
;                                     pure_result ==>
;                                     (forall (any_result: StlcStrongDbParSubst.exp).
;                                         StlcStrongDbParSubst.ELam t_y
;                                           (StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam
;                                                   (StlcCbvDbParSubst.sub_beta_gen x v))
;                                               e') ==
;                                         any_result ==>
;                                         (forall (any_result: Prims.bool).
;                                             StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                   x
;                                                   v)
;                                               (StlcStrongDbParSubst.ELam t_y e') =
;                                             StlcStrongDbParSubst.ELam t_y
;                                               (StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam
;                                                       (StlcCbvDbParSubst.sub_beta_gen x v))
;                                                   e') ==
;                                             any_result ==>
;                                             (forall (any_result: Prims.logical).
;                                                 StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                       x
;                                                       v)
;                                                   (StlcStrongDbParSubst.ELam t_y e') =
;                                                 StlcStrongDbParSubst.ELam t_y
;                                                   (StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam
;                                                           (StlcCbvDbParSubst.sub_beta_gen x v))
;                                                       e') ==
;                                                 any_result ==>
;                                                 StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                       x
;                                                       v)
;                                                   (StlcStrongDbParSubst.ELam t_y e') =
;                                                 StlcStrongDbParSubst.ELam t_y
;                                                   (StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam
;                                                           (StlcCbvDbParSubst.sub_beta_gen x v))
;                                                       e') /\
;                                                 (forall (pure_result: Prims.unit).
;                                                     StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                           x
;                                                           v)
;                                                       (StlcStrongDbParSubst.ELam t_y e') =
;                                                     StlcStrongDbParSubst.ELam t_y
;                                                       (StlcStrongDbParSubst.subst (StlcStrongDbParSubst.sub_elam
;                                                               (StlcCbvDbParSubst.sub_beta_gen x v))
;                                                           e') ==>
;                                                     p pure_result))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let subst_gen_elam`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
Tm_refine_bf0131f13155cbc90a3c62011d12629b)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
StlcStrongDbParSubst.exp))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(235,2-239,63)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=StlcCbvDbParSubst.fst(232,15-233,59); use=StlcCbvDbParSubst.fst(235,2-239,63)
(or label_2

;; def=StlcCbvDbParSubst.fst(232,15-233,59); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
(StlcStrongDbParSubst.ELam @x2
@x3))
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition @x0
(BoxInt 1))
@x1)
@x3)))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(235,2-239,63)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(235,2-239,63)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(235,2-239,63)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(235,2-239,63)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(235,2-235,27)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=StlcCbvDbParSubst.fst(226,15-227,55); use=StlcCbvDbParSubst.fst(235,2-235,27)
(Valid 
;; def=StlcCbvDbParSubst.fst(226,15-227,55); use=StlcCbvDbParSubst.fst(235,2-235,27)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_ee2eb4f65430b296888dd31560cce8c1
(ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
(StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition @x0
(BoxInt 1))
@x1))
)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(235,2-239,63)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(237,52-237,57)
(or label_3

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(237,52-237,57)
(>= (BoxInt_proj_0 (Prims.op_Addition @x0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(235,2-239,63)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= @x6
(Prims.op_Addition @x0
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(235,2-239,63)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
StlcStrongDbParSubst.sub)

;; def=StlcStrongDbParSubst.fst(161,33-161,50); use=StlcCbvDbParSubst.fst(236,2-237,60)
(= (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition @x0
(BoxInt 1))
@x1)
@x7)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(235,2-239,63)
(and 
;; def=StlcStrongDbParSubst.fst(161,40-161,49); use=StlcCbvDbParSubst.fst(237,38-237,60)
(or label_4

;; def=StlcStrongDbParSubst.fst(161,40-161,49); use=StlcCbvDbParSubst.fst(237,38-237,60)
(Valid 
;; def=StlcStrongDbParSubst.fst(161,40-161,49); use=StlcCbvDbParSubst.fst(237,38-237,60)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_ee2eb4f65430b296888dd31560cce8c1
(ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
(StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition @x0
(BoxInt 1))
@x1))
)
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(235,2-239,63)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_b047b980053bf44a5eca98477b5d628d @x0
@x1))

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= @x8
(StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition @x0
(BoxInt 1))
@x1))


;; def=StlcStrongDbParSubst.fst(161,33-161,35); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition @x0
(BoxInt 1))
@x1)
@x8)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(236,2-236,19)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=StlcStrongDbParSubst.fst(163,38-163,63); use=StlcCbvDbParSubst.fst(236,2-236,19)
(= (StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
@x3)
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition @x0
(BoxInt 1))
@x1)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(235,2-239,63)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(238,9-238,14)
(or label_5

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(238,9-238,14)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(238,9-238,14)
(Prims.hasEq StlcStrongDbParSubst.exp)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(235,2-239,63)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= StlcStrongDbParSubst.exp
@x10)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(238,9-238,14)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(238,9-238,14)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(238,9-238,14)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(238,9-238,14)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(238,9-238,14)
(StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(238,9-238,14)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar (StlcStrongDbParSubst.ELam @x2
@x3)))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(238,9-238,14)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x11))
)


;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
(StlcStrongDbParSubst.ELam @x2
@x3))
@x11)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(239,23-239,28)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(239,23-239,28)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(239,23-239,28)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(239,23-239,28)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(239,23-239,28)
(StlcStrongDbParSubst.renaming (ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1)))
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(239,23-239,28)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x3))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(239,23-239,28)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x12))
)


;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= (StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
@x3)
@x12)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(235,2-239,63)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
StlcStrongDbParSubst.exp)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= (StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
@x3))
@x13)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(235,2-239,63)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.bool)

;; def=Prims.fst(180,10-180,11); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= (Prims.op_Equality StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
(StlcStrongDbParSubst.ELam @x2
@x3))
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
@x3)))
@x14)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(235,2-239,63)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=StlcCbvDbParSubst.fst(235,2-239,63)
(= (Prims.b2t (Prims.op_Equality StlcStrongDbParSubst.exp
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
(StlcStrongDbParSubst.ELam @x2
@x3))
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
@x3))))
@x15)
)

;; def=Prims.fst(441,29-441,97); use=StlcCbvDbParSubst.fst(238,2-238,8)
(and 
;; def=StlcCbvDbParSubst.fst(238,8-239,63); use=StlcCbvDbParSubst.fst(238,2-238,8)
(or label_6

;; def=StlcCbvDbParSubst.fst(238,8-239,63); use=StlcCbvDbParSubst.fst(238,2-238,8)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
(StlcStrongDbParSubst.ELam @x2
@x3))
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
@x3)))
)


;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(238,2-238,8)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=StlcCbvDbParSubst.fst(238,8-239,63); use=StlcCbvDbParSubst.fst(238,2-238,8)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x1)
(StlcStrongDbParSubst.ELam @x2
@x3))
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (ApplyTT StlcStrongDbParSubst.sub_elam@tok
(StlcCbvDbParSubst.sub_beta_gen @x0
@x1))
@x3)))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(238,2-238,8)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(238,2-238,8)
(ApplyTT @x4
@x16)
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.subst_gen_elam, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented, @fuel_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented, @fuel_irrelevance_StlcStrongDbParSubst.sub_elam.fuel_instrumented, @fuel_irrelevance_StlcStrongDbParSubst.subst.fuel_instrumented, @query, StlcStrongDbParSubst_interpretation_Tm_arrow_86f0d4fd92d6b9638311c2f0e85836bb, assumption_StlcStrongDbParSubst.exp__uu___haseq, constructor_distinct_StlcStrongDbParSubst.ELam, data_typing_intro_StlcStrongDbParSubst.ELam@tok, equation_FStar.FunctionalExtensionality.feq, equation_Prims.nat, equation_StlcCbvDbParSubst.sub_beta_gen, equation_StlcStrongDbParSubst.sub, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcStrongDbParSubst.subst.fuel_instrumented, fuel_token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented_token, int_inversion, lemma_StlcStrongDbParSubst.subst_extensional, primitive_Prims.op_Addition, projection_inverse_BoxInt_proj_0, projection_inverse_StlcStrongDbParSubst.ELam__0, projection_inverse_StlcStrongDbParSubst.ELam__1, refinement_interpretation_Tm_refine_3949545d6bf3f1c8a6f29ddc1f66f50e, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a, token_correspondence_StlcStrongDbParSubst.sub_elam, token_correspondence_StlcStrongDbParSubst.sub_elam.fuel_instrumented, typing_Tm_abs_d70941dbcdfb3551376d504a2f54c457

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let subst_gen_elam


; <Start encoding let subst_gen_elam>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.subst_gen_elam (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.subst_gen_elam@tok () Term)

; </end encoding let subst_gen_elam>


; encoding sigelt val StlcCbvDbParSubst.substitution_preserves_typing


; <Skipped val StlcCbvDbParSubst.substitution_preserves_typing/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.pclosed; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(143,5-143,12); use=StlcCbvDbParSubst.fst(143,5-143,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(HasType (StlcCbvDbParSubst.pclosed @x0)
Prims.logical))
 

:pattern ((StlcCbvDbParSubst.pclosed @x0))
:qid typing_StlcCbvDbParSubst.pclosed))

:named typing_StlcCbvDbParSubst.pclosed))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.context_invariance; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing @x1
@x0
@x2))
(HasType @x4
(Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x0
@x1)))
(HasType (StlcCbvDbParSubst.context_invariance @x0
@x1
@x2
@x3
@x4)
(StlcStrongDbParSubst.typing @x4
@x0
@x2)))
 

:pattern ((StlcCbvDbParSubst.context_invariance @x0
@x1
@x2
@x3
@x4))
:qid typing_StlcCbvDbParSubst.context_invariance))

:named typing_StlcCbvDbParSubst.context_invariance))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StlcCbvDbParSubst.context_invariance; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
(StlcStrongDbParSubst.typing @x2
@x1
@x3))
(HasType @x5
(Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x1
@x2)))
(HasType (StlcCbvDbParSubst.context_invariance.fuel_instrumented @u0
@x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing @x5
@x1
@x3)))
 

:pattern ((StlcCbvDbParSubst.context_invariance.fuel_instrumented @u0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_StlcCbvDbParSubst.context_invariance.fuel_instrumented))

:named token_correspondence_StlcCbvDbParSubst.context_invariance.fuel_instrumented))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcCbvDbParSubst.context_invariance; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-102,50); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581))

:named refinement_kinding_Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcCbvDbParSubst.context_invariance; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-102,50); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x2
@x3))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(104,8-104,26)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(104,8-104,26)
(StlcCbvDbParSubst.envEqualE @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581))

:named refinement_interpretation_Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581
;;; Fact-ids: Name StlcCbvDbParSubst.context_invariance; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(102,26-102,50); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x0
@x1)))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x0
@x1))))
:qid haseqTm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581))

:named haseqTm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StlcCbvDbParSubst.context_invariance
;;; Fact-ids: Name StlcCbvDbParSubst.context_invariance; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
(StlcStrongDbParSubst.typing @x2
@x1
@x3))
(HasType @x5
(Tm_refine_6edb53d1fb9c4a31f9c4e0d4bb7ed581 @x1
@x2)))
(= (StlcCbvDbParSubst.context_invariance.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(let ((@lb6 @x4))
(ite (is-StlcStrongDbParSubst.TyVar @lb6)
(StlcStrongDbParSubst.TyVar @x5
(StlcStrongDbParSubst.TyVar_x @lb6))
(ite (is-StlcStrongDbParSubst.TyLam @lb6)
(StlcStrongDbParSubst.TyLam @x5
(StlcStrongDbParSubst.TyLam_t @lb6)
(StlcStrongDbParSubst.TyLam_e1 @lb6)
(StlcStrongDbParSubst.TyLam_t_ @lb6)
(StlcCbvDbParSubst.context_invariance.fuel_instrumented @u0
(StlcStrongDbParSubst.TyLam_e1 @lb6)
(StlcStrongDbParSubst.extend (StlcStrongDbParSubst.TyLam_t @lb6)
(StlcStrongDbParSubst.TyLam_g @lb6))
(StlcStrongDbParSubst.TyLam_t_ @lb6)
(StlcStrongDbParSubst.TyLam_hbody @lb6)
(StlcStrongDbParSubst.extend (StlcStrongDbParSubst.TyLam_t @lb6)
@x5)))
(ite (is-StlcStrongDbParSubst.TyApp @lb6)
(StlcStrongDbParSubst.TyApp @x5
(StlcStrongDbParSubst.TyApp_e1 @lb6)
(StlcStrongDbParSubst.TyApp_e2 @lb6)
(StlcStrongDbParSubst.TyApp_t11 @lb6)
(StlcStrongDbParSubst.TyApp_t12 @lb6)
(StlcCbvDbParSubst.context_invariance.fuel_instrumented @u0
(StlcStrongDbParSubst.TyApp_e1 @lb6)
(StlcStrongDbParSubst.TyApp_g @lb6)
(StlcStrongDbParSubst.TArr (StlcStrongDbParSubst.TyApp_t11 @lb6)
(StlcStrongDbParSubst.TyApp_t12 @lb6))
(StlcStrongDbParSubst.TyApp_h1 @lb6)
@x5)
(StlcCbvDbParSubst.context_invariance.fuel_instrumented @u0
(StlcStrongDbParSubst.TyApp_e2 @lb6)
(StlcStrongDbParSubst.TyApp_g @lb6)
(StlcStrongDbParSubst.TyApp_t11 @lb6)
(StlcStrongDbParSubst.TyApp_h2 @lb6)
@x5))
(ite (is-StlcStrongDbParSubst.TyUnit @lb6)
(StlcStrongDbParSubst.TyUnit @x5)
Tm_unit)))))))
 :weight 0


:pattern ((StlcCbvDbParSubst.context_invariance.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid equation_with_fuel_StlcCbvDbParSubst.context_invariance.fuel_instrumented))

:named equation_with_fuel_StlcCbvDbParSubst.context_invariance.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for StlcCbvDbParSubst.pclosed
;;; Fact-ids: Name StlcCbvDbParSubst.pclosed; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(143,5-143,12); use=StlcCbvDbParSubst.fst(143,5-143,12)
(forall ((@x0 Term))
 (! (= (Valid (StlcCbvDbParSubst.pclosed @x0))

;; def=StlcCbvDbParSubst.fst(143,23-143,66); use=StlcCbvDbParSubst.fst(143,23-143,66)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(not (BoxBool_proj_0 (StlcCbvDbParSubst.appears_free_in @x1
@x0))))
 
;;no pats
:qid equation_StlcCbvDbParSubst.pclosed.1))
)
 

:pattern ((StlcCbvDbParSubst.pclosed @x0))
:qid equation_StlcCbvDbParSubst.pclosed))

:named equation_StlcCbvDbParSubst.pclosed))
;;;;;;;;;;;;;;;;Prop-typing for StlcCbvDbParSubst.pclosed
;;; Fact-ids: Name StlcCbvDbParSubst.pclosed; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(143,5-143,12); use=StlcCbvDbParSubst.fst(143,5-143,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.exp)
(Valid (Prims.subtype_of (StlcCbvDbParSubst.pclosed @x0)
Prims.unit)))
 

:pattern ((Prims.subtype_of (StlcCbvDbParSubst.pclosed @x0)
Prims.unit))
:qid defn_equation_StlcCbvDbParSubst.pclosed))

:named defn_equation_StlcCbvDbParSubst.pclosed))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StlcCbvDbParSubst.context_invariance; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StlcCbvDbParSubst.context_invariance.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(StlcCbvDbParSubst.context_invariance.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((StlcCbvDbParSubst.context_invariance.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_StlcCbvDbParSubst.context_invariance.fuel_instrumented))

:named @fuel_irrelevance_StlcCbvDbParSubst.context_invariance.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StlcCbvDbParSubst.context_invariance; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(104,8-104,26); use=StlcCbvDbParSubst.fst(104,8-104,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StlcCbvDbParSubst.context_invariance @x0
@x1
@x2
@x3
@x4)
(StlcCbvDbParSubst.context_invariance.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((StlcCbvDbParSubst.context_invariance @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_StlcCbvDbParSubst.context_invariance.fuel_instrumented))

:named @fuel_correspondence_StlcCbvDbParSubst.context_invariance.fuel_instrumented))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(247,2-266,20)

;;;;;;;;;;;;;;;;x : StlcStrongDbParSubst.var (StlcStrongDbParSubst.var)
(declare-fun x_994c99bbacb216630d104a4d01f030da_0 () Term)
;;;;;;;;;;;;;;;;binder_x_994c99bbacb216630d104a4d01f030da_0
;;; Fact-ids: 
(assert (! (HasType x_994c99bbacb216630d104a4d01f030da_0
StlcStrongDbParSubst.var)
:named binder_x_994c99bbacb216630d104a4d01f030da_0))
;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_1 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_1
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_1
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_1))
;;;;;;;;;;;;;;;;v : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_2 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_2
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_2
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_2))
;;;;;;;;;;;;;;;;t_x : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_3 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_3
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3))
;;;;;;;;;;;;;;;;t : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_4 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_4
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_4
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_4))
;;;;;;;;;;;;;;;;g : StlcStrongDbParSubst.env (StlcStrongDbParSubst.env)
(declare-fun x_d7a08fe95d0edeffd31477bbf4345664_5 () Term)
;;;;;;;;;;;;;;;;binder_x_d7a08fe95d0edeffd31477bbf4345664_5
;;; Fact-ids: 
(assert (! (HasType x_d7a08fe95d0edeffd31477bbf4345664_5
StlcStrongDbParSubst.env)
:named binder_x_d7a08fe95d0edeffd31477bbf4345664_5))
;;;;;;;;;;;;;;;;h1 : StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty v t_x (StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty v t_x)
(declare-fun x_f2253b9f6f1a9a7bc517c33668eefc39_6 () Term)
;;;;;;;;;;;;;;;;binder_x_f2253b9f6f1a9a7bc517c33668eefc39_6
;;; Fact-ids: 
(assert (! (HasType x_f2253b9f6f1a9a7bc517c33668eefc39_6
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3))
:named binder_x_f2253b9f6f1a9a7bc517c33668eefc39_6))
;;;;;;;;;;;;;;;;h2 : StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen x t_x g) e t (StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen x t_x g) e t)
(declare-fun x_e2a570d8125c49d1f3924d13b2d20065_7 () Term)
;;;;;;;;;;;;;;;;binder_x_e2a570d8125c49d1f3924d13b2d20065_7
;;; Fact-ids: 
(assert (! (HasType x_e2a570d8125c49d1f3924d13b2d20065_7
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4))
:named binder_x_e2a570d8125c49d1f3924d13b2d20065_7))
(declare-fun Tm_refine_37ac201fb7882bcca53355bec5115930 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(244,7-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_37ac201fb7882bcca53355bec5115930 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_37ac201fb7882bcca53355bec5115930 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_37ac201fb7882bcca53355bec5115930))

:named refinement_kinding_Tm_refine_37ac201fb7882bcca53355bec5115930))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(244,7-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_37ac201fb7882bcca53355bec5115930 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen @x2
@x3
@x4)
@x6
@x5))

;; def=StlcCbvDbParSubst.fst(247,2-266,20); use=StlcCbvDbParSubst.fst(247,2-266,20)

;; def=StlcCbvDbParSubst.fst(247,2-266,20); use=StlcCbvDbParSubst.fst(247,2-266,20)
(Valid 
;; def=StlcCbvDbParSubst.fst(247,2-266,20); use=StlcCbvDbParSubst.fst(247,2-266,20)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x6
x_00c2c856e702f50718a37c394bb4dba3_1)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_37ac201fb7882bcca53355bec5115930 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_37ac201fb7882bcca53355bec5115930))

:named refinement_interpretation_Tm_refine_37ac201fb7882bcca53355bec5115930))
;;;;;;;;;;;;;;;;haseq for Tm_refine_37ac201fb7882bcca53355bec5115930
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(244,7-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_37ac201fb7882bcca53355bec5115930 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen @x0
@x1
@x2)
@x4
@x3))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_37ac201fb7882bcca53355bec5115930 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_37ac201fb7882bcca53355bec5115930))

:named haseqTm_refine_37ac201fb7882bcca53355bec5115930))
(declare-fun StlcCbvDbParSubst.substitution_preserves_typing (Term Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var ->     $h1: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty v t_x ->     $h2: StlcStrongDbParSubst.typing (extend_gen x t_x g) e t {e << e}   -> Prims.Tot (StlcStrongDbParSubst.typing g (StlcStrongDbParSubst.subst (sub_beta_gen x v) e) t)
(declare-fun Tm_arrow_1fd7ff5dda850a31da50d122b6256845 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1fd7ff5dda850a31da50d122b6256845
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_1fd7ff5dda850a31da50d122b6256845
Tm_type)
:named kinding_Tm_arrow_1fd7ff5dda850a31da50d122b6256845))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_1fd7ff5dda850a31da50d122b6256845)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_1fd7ff5dda850a31da50d122b6256845))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_1fd7ff5dda850a31da50d122b6256845))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_1fd7ff5dda850a31da50d122b6256845))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_1fd7ff5dda850a31da50d122b6256845)
(and 
;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.typ)
(HasType @x6
StlcStrongDbParSubst.env)
(HasType @x7
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
@x4))
(HasType @x8
(Tm_refine_37ac201fb7882bcca53355bec5115930 @x1
@x4
@x6
@x5
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(StlcStrongDbParSubst.typing @x6
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x1
@x3)
@x2)
@x5)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.var)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845.2))


;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845.3))


;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.exp))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845.4))


;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845.5))


;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.typ))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845.6))


;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.typ)
(HasType @x6
StlcStrongDbParSubst.env))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845.7))


;; def=StlcCbvDbParSubst.fst(242,9-266,20); use=StlcCbvDbParSubst.fst(244,7-266,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.typ)
(HasType @x6
StlcStrongDbParSubst.env)
(HasType @x7
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
@x4)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845.8))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_1fd7ff5dda850a31da50d122b6256845))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_1fd7ff5dda850a31da50d122b6256845))
(declare-fun StlcCbvDbParSubst.substitution_preserves_typing@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.substitution_preserves_typing@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
(StlcCbvDbParSubst.substitution_preserves_typing @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.substitution_preserves_typing@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid token_correspondence_StlcCbvDbParSubst.substitution_preserves_typing))

:named token_correspondence_StlcCbvDbParSubst.substitution_preserves_typing))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.substitution_preserves_typing@tok
Tm_arrow_1fd7ff5dda850a31da50d122b6256845))

;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.substitution_preserves_typing@tok
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
(StlcCbvDbParSubst.substitution_preserves_typing @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((StlcCbvDbParSubst.substitution_preserves_typing @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid function_token_typing_StlcCbvDbParSubst.substitution_preserves_typing.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.substitution_preserves_typing@tok))
:qid function_token_typing_StlcCbvDbParSubst.substitution_preserves_typing))

:named function_token_typing_StlcCbvDbParSubst.substitution_preserves_typing))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.env)
(HasType @x6
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x2
@x3))
(HasType @x7
(Tm_refine_37ac201fb7882bcca53355bec5115930 @x0
@x3
@x5
@x4
@x1)))
(HasType (StlcCbvDbParSubst.substitution_preserves_typing @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcStrongDbParSubst.typing @x5
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x2)
@x1)
@x4)))
 

:pattern ((StlcCbvDbParSubst.substitution_preserves_typing @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_StlcCbvDbParSubst.substitution_preserves_typing))

:named typing_StlcCbvDbParSubst.substitution_preserves_typing))
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_02a480f0bb271cee7038d84769e64271 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_02a480f0bb271cee7038d84769e64271
Tm_type)
:named refinement_kinding_Tm_refine_02a480f0bb271cee7038d84769e64271))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcStrongDbParSubst.fst(122,13-122,31); use=StlcCbvDbParSubst.fst(253,22-253,27)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_02a480f0bb271cee7038d84769e64271)
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.var)

;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(253,22-253,27)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_5
@x1)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_02a480f0bb271cee7038d84769e64271))
:qid refinement_interpretation_Tm_refine_02a480f0bb271cee7038d84769e64271))

:named refinement_interpretation_Tm_refine_02a480f0bb271cee7038d84769e64271))
;;;;;;;;;;;;;;;;haseq for Tm_refine_02a480f0bb271cee7038d84769e64271
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_02a480f0bb271cee7038d84769e64271))
(Valid (Prims.hasEq StlcStrongDbParSubst.var)))
:named haseqTm_refine_02a480f0bb271cee7038d84769e64271))




(declare-fun Tm_refine_16ea90d545a59890a0575cf6c95343f8 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-80,42); use=StlcCbvDbParSubst.fst(255,15-255,33)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_16ea90d545a59890a0575cf6c95343f8 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_16ea90d545a59890a0575cf6c95343f8 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_16ea90d545a59890a0575cf6c95343f8))

:named refinement_kinding_Tm_refine_16ea90d545a59890a0575cf6c95343f8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-80,42); use=StlcCbvDbParSubst.fst(255,15-255,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_16ea90d545a59890a0575cf6c95343f8 @x2
@x3))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(255,15-255,33)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(255,15-255,33)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
(StlcStrongDbParSubst.extend @x2
@x3)
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_16ea90d545a59890a0575cf6c95343f8 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_16ea90d545a59890a0575cf6c95343f8))

:named refinement_interpretation_Tm_refine_16ea90d545a59890a0575cf6c95343f8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_16ea90d545a59890a0575cf6c95343f8
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-80,42); use=StlcCbvDbParSubst.fst(255,15-255,33)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_16ea90d545a59890a0575cf6c95343f8 @x0
@x1)))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_16ea90d545a59890a0575cf6c95343f8 @x0
@x1))))
:qid haseqTm_refine_16ea90d545a59890a0575cf6c95343f8))

:named haseqTm_refine_16ea90d545a59890a0575cf6c95343f8))

; Encoding query formula : forall (k:
;   Prims.pure_post (StlcStrongDbParSubst.typing g
;         (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) e)
;         t)).
;   (forall (x:
;       StlcStrongDbParSubst.typing g
;         (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) e)
;         t).
;       {:pattern Prims.guard_free (k x)}
;       Prims.auto_squash (k x)) ==>
;   (~(TyVar? h2) /\ ~(TyLam? h2) /\ ~(TyApp? h2) /\ ~(TyUnit? h2) ==> Prims.l_False) /\
;   (forall (b: StlcStrongDbParSubst.env) (b: x: StlcStrongDbParSubst.var{Some? (b x)}).
;       h2 == StlcStrongDbParSubst.TyVar b ==>
;       Prims.hasEq StlcStrongDbParSubst.var /\
;       (forall (any_result: Type0).
;           StlcStrongDbParSubst.var == any_result ==>
;           (forall (any_result: Prims.bool).
;               x = b == any_result ==>
;               (forall (k:
;                   Prims.pure_post (StlcStrongDbParSubst.typing g
;                         (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) e)
;                         t)).
;                   (forall (x:
;                       StlcStrongDbParSubst.typing g
;                         (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) e)
;                         t).
;                       {:pattern Prims.guard_free (k x)}
;                       Prims.auto_squash (k x)) ==>
;                   (x = b == true ==>
;                     (forall (pure_result: Prims.unit).
;                         StlcCbvDbParSubst.closed v ==>
;                         StlcCbvDbParSubst.closed v /\
;                         (forall (any_result: StlcStrongDbParSubst.exp).
;                             v == any_result ==>
;                             (forall (pure_result: Prims.unit).
;                                 StlcCbvDbParSubst.pclosed v ==>
;                                 Prims.auto_squash (StlcCbvDbParSubst.envEqualE v
;                                       StlcStrongDbParSubst.empty
;                                       g) /\
;                                 (forall (any_result: StlcStrongDbParSubst.env).
;                                     g == any_result ==>
;                                     (forall (any_result: StlcStrongDbParSubst.typing g v t_x).
;                                         StlcCbvDbParSubst.context_invariance h1 g == any_result ==>
;                                         v ==
;                                         StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x
;                                               v)
;                                           e /\ t_x == t)))))) /\
;                   (~(x = b = true) ==>
;                     (forall (b: Prims.bool).
;                         x = b == b ==>
;                         (forall (k:
;                             Prims.pure_post (StlcStrongDbParSubst.typing g
;                                   (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) e
;                                   )
;                                   t)).
;                             (forall (x:
;                                 StlcStrongDbParSubst.typing g
;                                   (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) e
;                                   )
;                                   t).
;                                 {:pattern Prims.guard_free (k x)}
;                                 Prims.auto_squash (k x)) ==>
;                             (b < x == true ==>
;                               Prims.auto_squash (StlcCbvDbParSubst.envEqualE e
;                                     (StlcCbvDbParSubst.extend_gen x t_x g)
;                                     g) /\
;                               (forall (any_result: StlcStrongDbParSubst.env).
;                                   g == any_result ==>
;                                   (forall (any_result: StlcStrongDbParSubst.typing g e t).
;                                       StlcCbvDbParSubst.context_invariance h2 g == any_result ==>
;                                       e ==
;                                       StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v
;                                         )
;                                         e))) /\
;                             (~(b < x = true) ==>
;                               (forall (b: Prims.bool).
;                                   b < x == b ==>
;                                   b - 1 >= 0 /\ Some? (g (b - 1)) /\
;                                   (forall (return_val: x: StlcStrongDbParSubst.var{Some? (g x)}).
;                                       return_val == b - 1 ==>
;                                       (forall (any_result:
;                                           StlcStrongDbParSubst.typing g
;                                             (StlcStrongDbParSubst.EVar (b - 1))
;                                             (g (b - 1)).v).
;                                           StlcStrongDbParSubst.TyVar (b - 1) == any_result ==>
;                                           StlcStrongDbParSubst.EVar (b - 1) ==
;                                           StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                 x
;                                                 v)
;                                             e /\ (g (b - 1)).v == t))))))))))) /\
;   (~(TyVar? h2) ==>
;     (forall (b: StlcStrongDbParSubst.env)
;         (b: StlcStrongDbParSubst.typ)
;         (b: StlcStrongDbParSubst.exp)
;         (b: StlcStrongDbParSubst.typ)
;         (b: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b b) b b).
;         h2 == StlcStrongDbParSubst.TyLam b b ==>
;         x + 1 >= 0 /\
;         (x + 1 >= 0) /\
;         (forall (return_val: StlcStrongDbParSubst.var).
;             return_val == x + 1 ==>
;             (forall (any_result: StlcStrongDbParSubst.env).
;                 StlcCbvDbParSubst.extend_gen (x + 1) t_x (StlcStrongDbParSubst.extend b g) ==
;                 any_result ==>
;                 Prims.auto_squash (FStar.FunctionalExtensionality.feq (StlcStrongDbParSubst.extend b
;                           b)
;                       (StlcCbvDbParSubst.extend_gen (x + 1) t_x (StlcStrongDbParSubst.extend b g))) /\
;                 (forall (return_val:
;                     g':
;                     StlcStrongDbParSubst.env
;                       {FStar.FunctionalExtensionality.feq (StlcStrongDbParSubst.extend b b) g'}).
;                     return_val ==
;                     StlcCbvDbParSubst.extend_gen (x + 1) t_x (StlcStrongDbParSubst.extend b g) ==>
;                     StlcCbvDbParSubst.extend_gen (x + 1) t_x (StlcStrongDbParSubst.extend b g) ==
;                     return_val ==>
;                     (forall (any_result:
;                         StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen (x + 1)
;                               t_x
;                               (StlcStrongDbParSubst.extend b g))
;                           b
;                           b)
;                         (pure_result: Prims.unit).
;                         StlcCbvDbParSubst.closed v ==>
;                         StlcCbvDbParSubst.closed v /\
;                         (forall (any_result: StlcStrongDbParSubst.exp).
;                             v == any_result ==>
;                             (forall (pure_result: Prims.unit).
;                                 StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v)
;                                   (StlcStrongDbParSubst.ELam b b) =
;                                 StlcStrongDbParSubst.ELam b
;                                   (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (x + 1
;                                           )
;                                           v)
;                                       b) ==>
;                                 x + 1 >= 0 /\
;                                 (b << e) /\
;                                 (forall (any_result:
;                                     StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen (x + 1
;                                           )
;                                           t_x
;                                           (StlcStrongDbParSubst.extend b g))
;                                       b
;                                       b).
;                                     any_result == any_result ==>
;                                     x + 1 >= 0 /\
;                                     (forall (return_val: StlcStrongDbParSubst.var).
;                                         return_val == x + 1 ==>
;                                         (forall (any_result: StlcStrongDbParSubst.sub).
;                                             StlcCbvDbParSubst.sub_beta_gen (x + 1) v == any_result ==>
;                                             (forall (pure_result: StlcStrongDbParSubst.exp).
;                                                 (StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen
;                                                         (x + 1)
;                                                         v) /\ EVar? b ==>
;                                                   EVar? pure_result) ==>
;                                                 StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                       (x + 1)
;                                                       v)
;                                                   b ==
;                                                 pure_result ==>
;                                                 x + 1 >= 0 /\
;                                                 (forall (return_val: StlcStrongDbParSubst.var).
;                                                     return_val == x + 1 ==>
;                                                     (forall (any_result:
;                                                         StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend
;                                                               b
;                                                               g)
;                                                           (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                                   (x + 1)
;                                                                   v)
;                                                               b)
;                                                           b).
;                                                         StlcCbvDbParSubst.substitution_preserves_typing
;                                                           (x + 1)
;                                                           h1
;                                                           any_result ==
;                                                         any_result ==>
;                                                         (forall (any_result:
;                                                             StlcStrongDbParSubst.typing g
;                                                               (StlcStrongDbParSubst.ELam b
;                                                                   (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                                           (x + 1)
;                                                                           v)
;                                                                       b))
;                                                               (StlcStrongDbParSubst.TArr b b)).
;                                                             StlcStrongDbParSubst.TyLam b
;                                                               (StlcCbvDbParSubst.substitution_preserves_typing
;                                                                   (x + 1)
;                                                                   h1
;                                                                   any_result) ==
;                                                             any_result ==>
;                                                             StlcStrongDbParSubst.ELam b
;                                                               (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                                       (x + 1)
;                                                                       v)
;                                                                   b) ==
;                                                             StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen
;                                                                   x
;                                                                   v)
;                                                               e /\
;                                                             StlcStrongDbParSubst.TArr b b == t))))))
;                                 )))))))) /\
;     (~(TyLam? h2) ==>
;       (forall (b: StlcStrongDbParSubst.env)
;           (b: StlcStrongDbParSubst.exp)
;           (b: StlcStrongDbParSubst.exp)
;           (b: StlcStrongDbParSubst.typ)
;           (b: StlcStrongDbParSubst.typ)
;           (b: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b))
;           (b: StlcStrongDbParSubst.typing b b b).
;           h2 == StlcStrongDbParSubst.TyApp b b ==>
;           b == StlcCbvDbParSubst.extend_gen x t_x g /\ b << e /\
;           (forall (any_result: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b)).
;               b == any_result ==>
;               b == StlcCbvDbParSubst.extend_gen x t_x g /\ b << e /\
;               (forall (any_result: StlcStrongDbParSubst.typing b b b).
;                   b == any_result ==>
;                   (forall (pure_result: StlcStrongDbParSubst.exp).
;                       (StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen x v) /\ EVar? b ==>
;                         EVar? pure_result) ==>
;                       StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) b ==
;                       pure_result ==>
;                       (forall (pure_result: StlcStrongDbParSubst.exp).
;                           (StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen x v) /\
;                             EVar? b ==>
;                             EVar? pure_result) ==>
;                           StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) b ==
;                           pure_result ==>
;                           (forall (any_result:
;                               StlcStrongDbParSubst.typing g
;                                 (StlcStrongDbParSubst.EApp
;                                     (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v)
;                                         b)
;                                     (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v)
;                                         b))
;                                 b).
;                               StlcStrongDbParSubst.TyApp
;                                 (StlcCbvDbParSubst.substitution_preserves_typing x h1 b)
;                                 (StlcCbvDbParSubst.substitution_preserves_typing x h1 b) ==
;                               any_result ==>
;                               StlcStrongDbParSubst.EApp
;                                 (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) b)
;                                 (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) b) ==
;                               StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) e /\
;                               b == t)))))) /\
;       (~(TyApp? h2) ==>
;         (forall (b: StlcStrongDbParSubst.env).
;             h2 == StlcStrongDbParSubst.TyUnit ==>
;             StlcStrongDbParSubst.EUnit ==
;             StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x v) e /\
;             StlcStrongDbParSubst.TUnit == t))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec substitution_preserves_typing`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_5
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(247,2-266,20)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(247,2-266,20)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(and 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(not 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar (StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_e2a570d8125c49d1f3924d13b2d20065_7))
)


;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(not 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam (StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_e2a570d8125c49d1f3924d13b2d20065_7))
)


;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(not 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp (StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_e2a570d8125c49d1f3924d13b2d20065_7))
)


;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(not 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyUnit (StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_e2a570d8125c49d1f3924d13b2d20065_7))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8 @x1))

;; def=StlcCbvDbParSubst.fst(246,60-248,11); use=StlcCbvDbParSubst.fst(247,8-248,11)
(= x_e2a570d8125c49d1f3924d13b2d20065_7
(StlcStrongDbParSubst.TyVar @x1
@x2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(249,10-249,11)
(or label_2

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(249,10-249,11)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(249,10-249,11)
(Prims.hasEq StlcStrongDbParSubst.var)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_type)

;; def=Prims.fst(588,31-588,32); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= StlcStrongDbParSubst.var
@x3)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.bool)

;; def=StlcCbvDbParSubst.fst(249,8-249,11); use=StlcCbvDbParSubst.fst(249,8-249,11)
(= (Prims.op_Equality StlcStrongDbParSubst.var
x_994c99bbacb216630d104a4d01f030da_0
@x2)
@x4)
)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post (StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_5
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x6 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(247,2-266,20)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(247,2-266,20)
(ApplyTT @x5
@x6)
)

 

:pattern ((ApplyTT @x5
@x6))
:qid @query.7))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(249,8-249,11); use=StlcCbvDbParSubst.fst(249,8-249,11)
(= (Prims.op_Equality StlcStrongDbParSubst.var
x_994c99bbacb216630d104a4d01f030da_0
@x2)
(BoxBool true))


;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(249,23-249,43)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=StlcCbvDbParSubst.fst(167,21-167,31); use=StlcCbvDbParSubst.fst(249,23-249,43)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed x_00c2c856e702f50718a37c394bb4dba3_2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=StlcCbvDbParSubst.fst(144,39-144,47); use=StlcCbvDbParSubst.fst(250,43-250,44)
(or label_3

;; def=StlcCbvDbParSubst.fst(144,39-144,47); use=StlcCbvDbParSubst.fst(250,43-250,44)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed x_00c2c856e702f50718a37c394bb4dba3_2))
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(144,33-246,45); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= x_00c2c856e702f50718a37c394bb4dba3_2
@x7)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(250,23-250,42)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=StlcCbvDbParSubst.fst(144,67-144,78); use=StlcCbvDbParSubst.fst(250,23-250,42)
(Valid 
;; def=StlcCbvDbParSubst.fst(144,67-144,78); use=StlcCbvDbParSubst.fst(250,23-250,42)
(StlcCbvDbParSubst.pclosed x_00c2c856e702f50718a37c394bb4dba3_2)
)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(251,45-251,46)
(or label_4

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(251,45-251,46)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(251,45-251,46)
(StlcCbvDbParSubst.envEqualE x_00c2c856e702f50718a37c394bb4dba3_2
(StlcStrongDbParSubst.empty Dummy_value)
x_d7a08fe95d0edeffd31477bbf4345664_5)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(102,26-246,56); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= x_d7a08fe95d0edeffd31477bbf4345664_5
@x9)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_5
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3))

;; def=StlcCbvDbParSubst.fst(245,11-251,46); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcCbvDbParSubst.context_invariance x_00c2c856e702f50718a37c394bb4dba3_2
(StlcStrongDbParSubst.empty Dummy_value)
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_f2253b9f6f1a9a7bc517c33668eefc39_6
x_d7a08fe95d0edeffd31477bbf4345664_5)
@x10)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(251,23-251,46)
(and 
;; def=StlcCbvDbParSubst.fst(245,21-246,45); use=StlcCbvDbParSubst.fst(251,23-251,46)
(or label_5

;; def=StlcCbvDbParSubst.fst(245,21-246,45); use=StlcCbvDbParSubst.fst(251,23-251,46)
(= x_00c2c856e702f50718a37c394bb4dba3_2
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(246,47-246,53); use=StlcCbvDbParSubst.fst(251,23-251,46)
(or label_6

;; def=StlcCbvDbParSubst.fst(246,47-246,53); use=StlcCbvDbParSubst.fst(251,23-251,46)
(= x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(247,2-266,20)
(not 
;; def=StlcCbvDbParSubst.fst(249,8-249,11); use=StlcCbvDbParSubst.fst(249,8-249,11)
(= (Prims.op_Equality StlcStrongDbParSubst.var
x_994c99bbacb216630d104a4d01f030da_0
@x2)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.bool)

;; def=StlcCbvDbParSubst.fst(249,8-253,33); use=StlcCbvDbParSubst.fst(249,8-253,33)
(= (Prims.op_Equality StlcStrongDbParSubst.var
x_994c99bbacb216630d104a4d01f030da_0
@x2)
@x6)
)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_5
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x8 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(247,2-266,20)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(247,2-266,20)
(ApplyTT @x7
@x8)
)

 

:pattern ((ApplyTT @x7
@x8))
:qid @query.15))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and (implies 
;; def=StlcCbvDbParSubst.fst(252,13-252,16); use=StlcCbvDbParSubst.fst(252,13-252,16)
(= (Prims.op_LessThan @x2
x_994c99bbacb216630d104a4d01f030da_0)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(252,44-252,45)
(or label_7

;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(252,44-252,45)
(Valid 
;; def=StlcCbvDbParSubst.fst(102,33-102,49); use=StlcCbvDbParSubst.fst(252,44-252,45)
(StlcCbvDbParSubst.envEqualE x_00c2c856e702f50718a37c394bb4dba3_1
(StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_d7a08fe95d0edeffd31477bbf4345664_5)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(102,26-246,56); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= x_d7a08fe95d0edeffd31477bbf4345664_5
@x8)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_5
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4))

;; def=StlcCbvDbParSubst.fst(245,11-252,45); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcCbvDbParSubst.context_invariance x_00c2c856e702f50718a37c394bb4dba3_1
(StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_e2a570d8125c49d1f3924d13b2d20065_7
x_d7a08fe95d0edeffd31477bbf4345664_5)
@x9)
)

;; def=StlcCbvDbParSubst.fst(245,21-246,42); use=StlcCbvDbParSubst.fst(252,22-252,45)
(or label_8

;; def=StlcCbvDbParSubst.fst(245,21-246,42); use=StlcCbvDbParSubst.fst(252,22-252,45)
(= x_00c2c856e702f50718a37c394bb4dba3_1
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1))
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(247,2-266,20)
(not 
;; def=StlcCbvDbParSubst.fst(252,13-252,16); use=StlcCbvDbParSubst.fst(252,13-252,16)
(= (Prims.op_LessThan @x2
x_994c99bbacb216630d104a4d01f030da_0)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.bool)

;; def=StlcCbvDbParSubst.fst(252,13-253,33); use=StlcCbvDbParSubst.fst(252,13-253,33)
(= (Prims.op_LessThan @x2
x_994c99bbacb216630d104a4d01f030da_0)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(253,28-253,33)
(or label_9

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(253,28-253,33)
(>= (BoxInt_proj_0 (Prims.op_Subtraction @x2
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(253,28-253,33)
(or label_10

;; def=StlcStrongDbParSubst.fst(122,19-122,30); use=StlcCbvDbParSubst.fst(253,28-253,33)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_5
(Prims.op_Subtraction @x2
(BoxInt 1)))))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Tm_refine_02a480f0bb271cee7038d84769e64271)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= @x9
(Prims.op_Subtraction @x2
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_5
(StlcStrongDbParSubst.EVar (Prims.op_Subtraction @x2
(BoxInt 1)))
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_5
(Prims.op_Subtraction @x2
(BoxInt 1))))))

;; def=StlcCbvDbParSubst.fst(245,11-253,33); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcStrongDbParSubst.TyVar x_d7a08fe95d0edeffd31477bbf4345664_5
(Prims.op_Subtraction @x2
(BoxInt 1)))
@x10)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(253,22-253,33)
(and 
;; def=StlcCbvDbParSubst.fst(245,21-245,49); use=StlcCbvDbParSubst.fst(253,22-253,33)
(or label_11

;; def=StlcCbvDbParSubst.fst(245,21-245,49); use=StlcCbvDbParSubst.fst(253,22-253,33)
(= (StlcStrongDbParSubst.EVar (Prims.op_Subtraction @x2
(BoxInt 1)))
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(246,52-246,53); use=StlcCbvDbParSubst.fst(253,22-253,33)
(or label_12

;; def=StlcCbvDbParSubst.fst(246,52-246,53); use=StlcCbvDbParSubst.fst(253,22-253,33)
(= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.typ
(ApplyTT x_d7a08fe95d0edeffd31477bbf4345664_5
(Prims.op_Subtraction @x2
(BoxInt 1))))
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
)
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
))
)
 
;;no pats
:qid @query.14)))
 
;;no pats
:qid @query.13))
))
)
 
;;no pats
:qid @query.6)))
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(247,2-266,20)
(not 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyVar (StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_e2a570d8125c49d1f3924d13b2d20065_7))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
@x1)
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(246,60-254,28); use=StlcCbvDbParSubst.fst(247,8-254,28)
(= x_e2a570d8125c49d1f3924d13b2d20065_7
(StlcStrongDbParSubst.TyLam @x1
@x2
@x3
@x4
@x5))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(255,15-255,33)
(or label_13

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(255,15-255,33)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(255,50-255,55)
(or label_14

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(255,50-255,55)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= @x6
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(80,26-255,75); use=StlcCbvDbParSubst.fst(255,15-255,75)
(= (StlcCbvDbParSubst.extend_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
(StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5))
@x7)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(255,38-255,75)
(or label_15

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(255,38-255,75)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(255,38-255,75)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
(StlcStrongDbParSubst.extend @x2
@x1)
(StlcCbvDbParSubst.extend_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
(StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5)))
)
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_16ea90d545a59890a0575cf6c95343f8 @x2
@x1))

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= @x8
(StlcCbvDbParSubst.extend_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
(StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5)))


;; def=StlcCbvDbParSubst.fst(80,26-255,75); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcCbvDbParSubst.extend_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
(StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5))
@x8)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
(StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5))
@x3
@x4))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(256,4-256,24)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=StlcCbvDbParSubst.fst(167,21-167,31); use=StlcCbvDbParSubst.fst(256,4-256,24)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed x_00c2c856e702f50718a37c394bb4dba3_2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=StlcCbvDbParSubst.fst(231,36-231,44); use=StlcCbvDbParSubst.fst(257,21-257,22)
(or label_16

;; def=StlcCbvDbParSubst.fst(231,36-231,44); use=StlcCbvDbParSubst.fst(257,21-257,22)
(BoxBool_proj_0 (StlcCbvDbParSubst.closed x_00c2c856e702f50718a37c394bb4dba3_2))
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
StlcStrongDbParSubst.exp)

;; def=StlcCbvDbParSubst.fst(231,30-246,45); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= x_00c2c856e702f50718a37c394bb4dba3_2
@x11)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(257,4-257,18)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=StlcCbvDbParSubst.fst(232,15-233,59); use=StlcCbvDbParSubst.fst(257,4-257,18)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
(StlcStrongDbParSubst.ELam @x2
@x3))
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3)))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(258,37-258,42)
(or label_17

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(258,37-258,42)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=StlcCbvDbParSubst.fst(258,69-258,76); use=StlcCbvDbParSubst.fst(259,6-259,10)
(or label_18

;; def=StlcCbvDbParSubst.fst(258,69-258,76); use=StlcCbvDbParSubst.fst(259,6-259,10)
(Valid 
;; def=StlcCbvDbParSubst.fst(258,69-258,76); use=StlcCbvDbParSubst.fst(259,6-259,10)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x3
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
(StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5))
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(255,8-258,12); use=StlcCbvDbParSubst.fst(258,8-259,10)
(= @x9
@x13)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(260,15-260,44)
(or label_19

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(260,15-260,44)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= @x14
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
StlcStrongDbParSubst.sub)

;; def=StlcStrongDbParSubst.fst(72,12-72,13); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_00c2c856e702f50718a37c394bb4dba3_2)
@x15)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(260,15-260,44)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(260,15-260,44)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(260,15-260,44)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(260,15-260,44)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(260,15-260,44)
(StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_00c2c856e702f50718a37c394bb4dba3_2))
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(260,15-260,44)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x3))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(260,15-260,44)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x16))
)


;; def=StlcStrongDbParSubst.fst(126,13-126,15); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3)
@x16)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(260,45-260,50)
(or label_20

;; def=Prims.fst(680,18-680,24); use=StlcCbvDbParSubst.fst(260,45-260,50)
(>= (BoxInt_proj_0 (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
(BoxInt_proj_0 (BoxInt 0)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
StlcStrongDbParSubst.var)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= @x17
(Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1)))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5)
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3)
@x4))

;; def=StlcStrongDbParSubst.fst(128,13-128,18); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcCbvDbParSubst.substitution_preserves_typing (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
@x3
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
@x4
(StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_f2253b9f6f1a9a7bc517c33668eefc39_6
@x9)
@x18)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_5
(StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3))
(StlcStrongDbParSubst.TArr @x2
@x4)))

;; def=StlcCbvDbParSubst.fst(245,11-260,59); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcStrongDbParSubst.TyLam x_d7a08fe95d0edeffd31477bbf4345664_5
@x2
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3)
@x4
(StlcCbvDbParSubst.substitution_preserves_typing (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
@x3
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
@x4
(StlcStrongDbParSubst.extend @x2
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_f2253b9f6f1a9a7bc517c33668eefc39_6
@x9))
@x19)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(260,4-260,59)
(and 
;; def=StlcCbvDbParSubst.fst(245,21-245,49); use=StlcCbvDbParSubst.fst(260,4-260,59)
(or label_21

;; def=StlcCbvDbParSubst.fst(245,21-245,49); use=StlcCbvDbParSubst.fst(260,4-260,59)
(= (StlcStrongDbParSubst.ELam @x2
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition x_994c99bbacb216630d104a4d01f030da_0
(BoxInt 1))
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3))
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(246,52-246,53); use=StlcCbvDbParSubst.fst(260,4-260,59)
(or label_22

;; def=StlcCbvDbParSubst.fst(246,52-246,53); use=StlcCbvDbParSubst.fst(260,4-260,59)
(= (StlcStrongDbParSubst.TArr @x2
@x4)
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
)
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
)
 
;;no pats
:qid @query.32))
)
 
;;no pats
:qid @query.31))
)
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(247,2-266,20)
(not 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam (StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_e2a570d8125c49d1f3924d13b2d20065_7))
)


;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x6 Term))
 (! (implies (HasType @x6
(StlcStrongDbParSubst.typing @x1
@x2
(StlcStrongDbParSubst.TArr @x4
@x5)))

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(StlcStrongDbParSubst.typing @x1
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(246,60-261,38); use=StlcCbvDbParSubst.fst(247,8-261,38)
(= x_e2a570d8125c49d1f3924d13b2d20065_7
(StlcStrongDbParSubst.TyApp @x1
@x2
@x3
@x4
@x5
@x6
@x7))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=StlcCbvDbParSubst.fst(261,10-262,44); use=StlcCbvDbParSubst.fst(262,75-262,78)
(or label_23

;; def=StlcCbvDbParSubst.fst(261,10-262,44); use=StlcCbvDbParSubst.fst(262,75-262,78)
(= @x1
(StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5))
)


;; def=StlcCbvDbParSubst.fst(262,63-262,70); use=StlcCbvDbParSubst.fst(262,75-262,78)
(or label_24

;; def=StlcCbvDbParSubst.fst(262,63-262,70); use=StlcCbvDbParSubst.fst(262,75-262,78)
(Valid 
;; def=StlcCbvDbParSubst.fst(262,63-262,70); use=StlcCbvDbParSubst.fst(262,75-262,78)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(StlcStrongDbParSubst.typing @x1
@x2
(StlcStrongDbParSubst.TArr @x4
@x5)))

;; def=StlcCbvDbParSubst.fst(261,31-262,11); use=StlcCbvDbParSubst.fst(262,8-262,78)
(= @x6
@x8)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(247,2-266,20)
(and 
;; def=StlcCbvDbParSubst.fst(261,10-263,44); use=StlcCbvDbParSubst.fst(263,64-263,67)
(or label_25

;; def=StlcCbvDbParSubst.fst(261,10-263,44); use=StlcCbvDbParSubst.fst(263,64-263,67)
(= @x1
(StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5))
)


;; def=StlcCbvDbParSubst.fst(263,52-263,59); use=StlcCbvDbParSubst.fst(263,64-263,67)
(or label_26

;; def=StlcCbvDbParSubst.fst(263,52-263,59); use=StlcCbvDbParSubst.fst(263,64-263,67)
(Valid 
;; def=StlcCbvDbParSubst.fst(263,52-263,59); use=StlcCbvDbParSubst.fst(263,64-263,67)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x3
x_00c2c856e702f50718a37c394bb4dba3_1)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(StlcStrongDbParSubst.typing @x1
@x3
@x4))

;; def=StlcCbvDbParSubst.fst(261,35-263,11); use=StlcCbvDbParSubst.fst(263,8-263,67)
(= @x7
@x9)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(264,12-264,41)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(264,12-264,41)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(264,12-264,41)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(264,12-264,41)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(264,12-264,41)
(StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2))
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(264,12-264,41)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x2))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(264,12-264,41)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x10))
)


;; def=StlcStrongDbParSubst.fst(131,13-131,15); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
@x2)
@x10)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(265,12-265,41)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(73,25-73,61); use=StlcCbvDbParSubst.fst(265,12-265,41)
(implies 
;; def=StlcStrongDbParSubst.fst(73,25-73,48); use=StlcCbvDbParSubst.fst(265,12-265,41)
(and 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(265,12-265,41)
(Valid 
;; def=StlcStrongDbParSubst.fst(73,26-73,36); use=StlcCbvDbParSubst.fst(265,12-265,41)
(StlcStrongDbParSubst.renaming (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2))
)


;; def=StlcStrongDbParSubst.fst(73,40-73,47); use=StlcCbvDbParSubst.fst(265,12-265,41)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x3))
)


;; def=StlcStrongDbParSubst.fst(73,53-73,61); use=StlcCbvDbParSubst.fst(265,12-265,41)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_EVar @x11))
)


;; def=StlcStrongDbParSubst.fst(132,13-132,15); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3)
@x11)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(StlcStrongDbParSubst.typing x_d7a08fe95d0edeffd31477bbf4345664_5
(StlcStrongDbParSubst.EApp (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
@x2)
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3))
@x5))

;; def=StlcCbvDbParSubst.fst(245,11-265,52); use=StlcCbvDbParSubst.fst(247,2-266,20)
(= (StlcStrongDbParSubst.TyApp x_d7a08fe95d0edeffd31477bbf4345664_5
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
@x2)
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3)
@x4
@x5
(StlcCbvDbParSubst.substitution_preserves_typing x_994c99bbacb216630d104a4d01f030da_0
@x2
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
(StlcStrongDbParSubst.TArr @x4
@x5)
x_d7a08fe95d0edeffd31477bbf4345664_5
x_f2253b9f6f1a9a7bc517c33668eefc39_6
@x6)
(StlcCbvDbParSubst.substitution_preserves_typing x_994c99bbacb216630d104a4d01f030da_0
@x3
x_00c2c856e702f50718a37c394bb4dba3_2
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
@x4
x_d7a08fe95d0edeffd31477bbf4345664_5
x_f2253b9f6f1a9a7bc517c33668eefc39_6
@x7))
@x12)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(264,4-265,52)
(and 
;; def=StlcCbvDbParSubst.fst(245,21-245,49); use=StlcCbvDbParSubst.fst(264,4-265,52)
(or label_27

;; def=StlcCbvDbParSubst.fst(245,21-245,49); use=StlcCbvDbParSubst.fst(264,4-265,52)
(= (StlcStrongDbParSubst.EApp (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
@x2)
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
@x3))
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(246,52-261,30); use=StlcCbvDbParSubst.fst(264,4-265,52)
(or label_28

;; def=StlcCbvDbParSubst.fst(246,52-261,30); use=StlcCbvDbParSubst.fst(264,4-265,52)
(= @x5
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
)
)
)
 
;;no pats
:qid @query.51))
)
 
;;no pats
:qid @query.50))
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
)
 
;;no pats
:qid @query.47))
)
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))

(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(247,2-266,20)
(not 
;; def=StlcCbvDbParSubst.fst(246,60-246,62); use=StlcCbvDbParSubst.fst(247,8-247,10)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp (StlcCbvDbParSubst.extend_gen x_994c99bbacb216630d104a4d01f030da_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_3
x_d7a08fe95d0edeffd31477bbf4345664_5)
x_00c2c856e702f50718a37c394bb4dba3_1
x_fcf8df75f2957ee85ada8a1f90a7cec8_4
x_e2a570d8125c49d1f3924d13b2d20065_7))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(247,2-266,20)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(246,60-266,10); use=StlcCbvDbParSubst.fst(247,8-266,10)
(= x_e2a570d8125c49d1f3924d13b2d20065_7
(StlcStrongDbParSubst.TyUnit @x1))
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(266,14-266,20)
(and 
;; def=StlcCbvDbParSubst.fst(245,21-245,49); use=StlcCbvDbParSubst.fst(266,14-266,20)
(or label_29

;; def=StlcCbvDbParSubst.fst(245,21-245,49); use=StlcCbvDbParSubst.fst(266,14-266,20)
(= StlcStrongDbParSubst.EUnit@tok
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen x_994c99bbacb216630d104a4d01f030da_0
x_00c2c856e702f50718a37c394bb4dba3_2)
x_00c2c856e702f50718a37c394bb4dba3_1))
)


;; def=StlcCbvDbParSubst.fst(246,52-246,53); use=StlcCbvDbParSubst.fst(266,14-266,20)
(or label_30

;; def=StlcCbvDbParSubst.fst(246,52-246,53); use=StlcCbvDbParSubst.fst(266,14-266,20)
(= StlcStrongDbParSubst.TUnit@tok
x_fcf8df75f2957ee85ada8a1f90a7cec8_4)
)
)
)
 
;;no pats
:qid @query.52))
))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.substitution_preserves_typing, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, @fuel_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented, @fuel_irrelevance_StlcStrongDbParSubst.subst.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, binder_x_00c2c856e702f50718a37c394bb4dba3_1, binder_x_00c2c856e702f50718a37c394bb4dba3_2, binder_x_994c99bbacb216630d104a4d01f030da_0, binder_x_e2a570d8125c49d1f3924d13b2d20065_7, binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_3, bool_inversion, constructor_distinct_StlcStrongDbParSubst.EApp, constructor_distinct_StlcStrongDbParSubst.EUnit, constructor_distinct_StlcStrongDbParSubst.EVar, data_elim_StlcStrongDbParSubst.EVar, data_elim_StlcStrongDbParSubst.TyApp, data_elim_StlcStrongDbParSubst.TyLam, data_elim_StlcStrongDbParSubst.TyUnit, data_elim_StlcStrongDbParSubst.TyVar, disc_equation_FStar.Pervasives.Native.Some, disc_equation_StlcStrongDbParSubst.TyApp, disc_equation_StlcStrongDbParSubst.TyLam, disc_equation_StlcStrongDbParSubst.TyUnit, disc_equation_StlcStrongDbParSubst.TyVar, equality_tok_StlcStrongDbParSubst.EUnit@tok, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_FStar.FunctionalExtensionality.feq, equation_Prims.eqtype, equation_Prims.nat, equation_StlcCbvDbParSubst.envEqualE, equation_StlcCbvDbParSubst.extend_gen, equation_StlcCbvDbParSubst.pclosed, equation_StlcCbvDbParSubst.sub_beta_gen, equation_StlcStrongDbParSubst.extend, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcCbvDbParSubst.appears_free_in.fuel_instrumented, equation_with_fuel_StlcStrongDbParSubst.subst.fuel_instrumented, fuel_guarded_inversion_StlcStrongDbParSubst.typ, fuel_guarded_inversion_StlcStrongDbParSubst.typing, function_token_typing_Prims.__cache_version_number__, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, int_inversion, interpretation_Tm_abs_196d31beccd849fc7b632281c08d07b0, interpretation_Tm_abs_8e8cef3f3b2af03d991302fd11832ac3, interpretation_Tm_abs_d70941dbcdfb3551376d504a2f54c457, primitive_Prims.op_Addition, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, primitive_Prims.op_Subtraction, proj_equation_FStar.Pervasives.Native.Some_v, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_StlcStrongDbParSubst.EApp__0, projection_inverse_StlcStrongDbParSubst.EApp__1, projection_inverse_StlcStrongDbParSubst.EVar__0, refinement_interpretation_Tm_refine_355331772027a5870c780cc6a71c0497, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7f2e20eb47d22ea18ae57a636be3a7d8, subterm_ordering_StlcStrongDbParSubst.EApp, subterm_ordering_StlcStrongDbParSubst.ELam, typing_Prims.int, typing_StlcCbvDbParSubst.appears_free_in, typing_StlcCbvDbParSubst.sub_beta_gen, typing_StlcStrongDbParSubst.subst, typing_tok_StlcStrongDbParSubst.EUnit@tok, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec substitution_preserves_typing


; <Start encoding let rec substitution_preserves_typing>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented (Fuel Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented_token () Term)
(declare-fun StlcCbvDbParSubst.substitution_preserves_typing (Term Term Term Term Term Term Term Term) Term)
(declare-fun StlcCbvDbParSubst.substitution_preserves_typing@tok () Term)
;;;;;;;;;;;;;;;;x: StlcStrongDbParSubst.var ->     $h1: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty v t_x ->     $h2: StlcStrongDbParSubst.typing (extend_gen x t_x g) e t   -> Prims.Tot (StlcStrongDbParSubst.typing g (StlcStrongDbParSubst.subst (sub_beta_gen x v) e) t)
(declare-fun Tm_arrow_745a9706ba2106835f39ca5b7bec1062 () Term)

; </end encoding let rec substitution_preserves_typing>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(268,0-269,60)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (t: StlcStrongDbParSubst.typ)
;   (g: StlcStrongDbParSubst.env)
;   (y: StlcStrongDbParSubst.var)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *)
;   Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.extend_gen_0_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(268,0-269,60)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.typ)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.var)
(HasType @x3
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=StlcStrongDbParSubst.fst(110,22-110,34)
(or label_1

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(269,25-269,60)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(269,25-269,60)
(Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ))
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_gen_0_aux, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_StlcStrongDbParSubst.typ__uu___haseq, kinding_StlcStrongDbParSubst.typ@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.extend_gen_0_aux


; <Skipped val StlcCbvDbParSubst.extend_gen_0_aux/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(270,29-270,31)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcCbvDbParSubst.extend_gen@tok))
:named @kick_partial_app_df99fdb0ff0434ae081f31f1f31f5269))


; Encoding query formula : forall (t: StlcStrongDbParSubst.typ) (g: StlcStrongDbParSubst.env) (y: StlcStrongDbParSubst.var).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         StlcCbvDbParSubst.extend_gen 0 t g y = StlcStrongDbParSubst.extend t g y ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let extend_gen_0_aux`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.typ)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.var))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(270,29-270,31)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=StlcCbvDbParSubst.fst(269,25-269,60); use=StlcCbvDbParSubst.fst(270,29-270,31)
(or label_2

;; def=StlcCbvDbParSubst.fst(269,25-269,60); use=StlcCbvDbParSubst.fst(270,29-270,31)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
(BoxInt 0))
@x0)
@x1)
@x2)
(ApplyTT (ApplyTT (ApplyTT StlcStrongDbParSubst.extend@tok
@x0)
@x1)
@x2))
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(270,29-270,31)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(270,29-270,31)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(270,29-270,31)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(270,29-270,31)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_gen_0_aux, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, equation_StlcCbvDbParSubst.extend_gen, function_token_typing_Prims.__cache_version_number__, primitive_Prims.op_Equality, token_correspondence_StlcCbvDbParSubst.extend_gen, token_correspondence_StlcStrongDbParSubst.extend

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let extend_gen_0_aux


; <Start encoding let extend_gen_0_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.extend_gen_0_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.extend_gen_0_aux@tok () Term)

; </end encoding let extend_gen_0_aux>


; encoding sigelt val StlcCbvDbParSubst.extend_gen_0


; <Skipped val StlcCbvDbParSubst.extend_gen_0/>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(275,2-275,37)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
StlcCbvDbParSubst.extend_gen@tok))
:named @kick_partial_app_df99fdb0ff0434ae081f31f1f31f5269))




(declare-fun Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(269,25-269,60); use=StlcCbvDbParSubst.fst(275,16-275,32)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f @x0
@x1)
Tm_arrow_0220d49111608e207f00570037ebc3ca)
 

:pattern ((Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f @x0
@x1))
:qid typing_Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f))

:named typing_Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(269,25-269,60); use=StlcCbvDbParSubst.fst(275,16-275,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f @x1
@x2)
@x0)
(Prims.b2t (Prims.op_Equality (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
(BoxInt 0))
@x1)
@x2)
@x0)
(ApplyTT (ApplyTT (ApplyTT StlcStrongDbParSubst.extend@tok
@x1)
@x2)
@x0))))
 

:pattern ((ApplyTT (Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f @x1
@x2)
@x0))
:qid interpretation_Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f))

:named interpretation_Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f))



; Encoding query formula : forall (t: StlcStrongDbParSubst.typ) (g: StlcStrongDbParSubst.env).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         FStar.FunctionalExtensionality.feq (StlcCbvDbParSubst.extend_gen 0 t g)
;           (StlcStrongDbParSubst.extend t g) ==>
;         p pure_result) ==>
;     (forall (y: StlcStrongDbParSubst.var).
;         (*  - Could not prove post-condition
; *)
;         Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ)) /\
;     (forall (any_result: (_: StlcStrongDbParSubst.var -> Prims.GTot Type0)).
;         (fun y -> StlcCbvDbParSubst.extend_gen 0 t g y = StlcStrongDbParSubst.extend t g y) ==
;         any_result ==>
;         (forall (pure_result: Prims.unit).
;             (forall (x: StlcStrongDbParSubst.var).
;                 StlcCbvDbParSubst.extend_gen 0 t g x = StlcStrongDbParSubst.extend t g x) ==>
;             p pure_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let extend_gen_0`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.typ)
(HasType @x1
StlcStrongDbParSubst.env))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(275,2-275,37)
(forall ((@x3 Term))
 (! (implies (and (or label_1
(HasType @x3
Prims.unit))

;; def=StlcCbvDbParSubst.fst(273,25-273,62); use=StlcCbvDbParSubst.fst(275,2-275,37)
(or label_2

;; def=StlcCbvDbParSubst.fst(273,25-273,62); use=StlcCbvDbParSubst.fst(275,2-275,37)
(Valid 
;; def=StlcCbvDbParSubst.fst(273,25-273,62); use=StlcCbvDbParSubst.fst(275,2-275,37)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
(StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x0
@x1)
(StlcStrongDbParSubst.extend @x0
@x1))
)
)
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(275,2-275,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(275,2-275,37)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(275,2-275,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(275,2-275,37)
(ApplyTT @x2
@x3)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(275,2-275,37)
(and 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(275,2-275,37)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.var)

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(275,16-275,32)
(or label_3

;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(275,16-275,32)
(Valid 
;; def=Prims.fst(73,23-73,30); use=StlcCbvDbParSubst.fst(275,16-275,32)
(Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.typ))
)
)
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(275,2-275,37)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Tm_arrow_0220d49111608e207f00570037ebc3ca)

;; def=FStar.Classical.fsti(240,30-240,31); use=StlcCbvDbParSubst.fst(275,2-275,37)
(= (Tm_abs_7eb5bf7688c72a21512754e0fe7f0a8f @x0
@x1)
@x3)
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(275,2-275,14)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=FStar.Classical.fsti(241,12-241,32); use=StlcCbvDbParSubst.fst(275,2-275,14)
(forall ((@x5 Term))
 (! (implies (HasType @x5
StlcStrongDbParSubst.var)

;; def=StlcCbvDbParSubst.fst(269,25-269,60); use=StlcCbvDbParSubst.fst(275,2-275,14)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.extend_gen@tok
(BoxInt 0))
@x0)
@x1)
@x5)
(ApplyTT (ApplyTT (ApplyTT StlcStrongDbParSubst.extend@tok
@x0)
@x1)
@x5))
)
 
;;no pats
:qid @query.6))
)

;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(275,2-275,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=StlcCbvDbParSubst.fst(275,2-275,14)
(ApplyTT @x2
@x4)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.extend_gen_0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, StlcStrongDbParSubst_pretyping_fcf8df75f2957ee85ada8a1f90a7cec8, assumption_FStar.Pervasives.Native.option__uu___haseq, assumption_StlcStrongDbParSubst.typ__uu___haseq, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_FStar.FunctionalExtensionality.feq, equation_StlcCbvDbParSubst.extend_gen, equation_StlcStrongDbParSubst.var, function_token_typing_Prims.__cache_version_number__, kinding_StlcStrongDbParSubst.typ@tok, primitive_Prims.op_Equality, typing_tok_StlcStrongDbParSubst.TUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let extend_gen_0


; <Start encoding let extend_gen_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun StlcCbvDbParSubst.extend_gen_0 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun StlcCbvDbParSubst.extend_gen_0@tok () Term)

; </end encoding let extend_gen_0>


; encoding sigelt let rec extend_gen_typing_conversion


; <Start encoding let rec extend_gen_typing_conversion>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented_token () Term)
(declare-fun StlcCbvDbParSubst.extend_gen_typing_conversion (Term Term Term Term Term) Term)
(declare-fun StlcCbvDbParSubst.extend_gen_typing_conversion@tok () Term)
;;;;;;;;;;;;;;;;h: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend t g) e0 t0   -> StlcStrongDbParSubst.typing (extend_gen 0 t g) e0 t0
(declare-fun Tm_arrow_40e8af98f62b3a292d30cb4d5296ff5a () Term)

; </end encoding let rec extend_gen_typing_conversion>

(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(280,0-281,59)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-280,73); use=StlcCbvDbParSubst.fst(280,39-280,73)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))

:named refinement_kinding_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-280,73); use=StlcCbvDbParSubst.fst(280,39-280,73)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
@x2))

;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(280,58-280,72)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))

:named refinement_interpretation_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-280,73); use=StlcCbvDbParSubst.fst(280,39-280,73)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x0
@x1)))
(Valid (Prims.hasEq (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x1
@x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x0
@x1))))
:qid haseqTm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))

:named haseqTm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))

; Encoding query formula : forall (e: StlcStrongDbParSubst.exp)
;   (t: StlcStrongDbParSubst.typ)
;   (h: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t {Some? (StlcCbvDbParSubst.step e)})
; .
;   (*  - Subtyping check failed
;   - Expected type
;       _: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp {Some? _}
;     got type FStar.Pervasives.Native.option StlcStrongDbParSubst.exp
; *)
;   Some? (StlcCbvDbParSubst.step e)


; Context: While encoding a query
; While typechecking the top-level declaration `val StlcCbvDbParSubst.preservation`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(280,0-281,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
(Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x1
@x0)))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(281,33-281,41)
(or label_1

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(281,33-281,41)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x0)))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.preservation, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val StlcCbvDbParSubst.preservation


; <Skipped val StlcCbvDbParSubst.preservation/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.typing_extensional; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(81,8-81,26); use=StlcCbvDbParSubst.fst(81,8-81,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(StlcStrongDbParSubst.typing @x1
@x0
@x2))
(HasType @x4
(Tm_refine_1c415a41a773302054dcc43dd4ed4815 @x1)))
(HasType (StlcCbvDbParSubst.typing_extensional__176 @x0
@x1
@x2
@x3
@x4)
(StlcStrongDbParSubst.typing @x4
@x0
@x2)))
 

:pattern ((StlcCbvDbParSubst.typing_extensional__176 @x0
@x1
@x2
@x3
@x4))
:qid typing_StlcCbvDbParSubst.typing_extensional__176))

:named typing_StlcCbvDbParSubst.typing_extensional__176))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.substitution_preserves_typing; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.var)
(HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.env)
(HasType @x6
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x2
@x3))
(HasType @x7
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen @x0
@x3
@x5)
@x1
@x4)))
(HasType (StlcCbvDbParSubst.substitution_preserves_typing @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcStrongDbParSubst.typing @x5
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x0
@x2)
@x1)
@x4)))
 

:pattern ((StlcCbvDbParSubst.substitution_preserves_typing @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_StlcCbvDbParSubst.substitution_preserves_typing))

:named typing_StlcCbvDbParSubst.substitution_preserves_typing))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen_typing_conversion; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(277,8-277,36); use=StlcCbvDbParSubst.fst(277,8-277,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.typ)
(HasType @x1
StlcStrongDbParSubst.env)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.typ)
(HasType @x4
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x0
@x1)
@x2
@x3)))
(HasType (StlcCbvDbParSubst.extend_gen_typing_conversion @x0
@x1
@x2
@x3
@x4)
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x0
@x1)
@x2
@x3)))
 

:pattern ((StlcCbvDbParSubst.extend_gen_typing_conversion @x0
@x1
@x2
@x3
@x4))
:qid typing_StlcCbvDbParSubst.extend_gen_typing_conversion))

:named typing_StlcCbvDbParSubst.extend_gen_typing_conversion))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StlcCbvDbParSubst.substitution_preserves_typing; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.typ)
(HasType @x6
StlcStrongDbParSubst.env)
(HasType @x7
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
@x4))
(HasType @x8
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen @x1
@x4
@x6)
@x2
@x5)))
(HasType (StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented @u0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(StlcStrongDbParSubst.typing @x6
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x1
@x3)
@x2)
@x5)))
 

:pattern ((StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented @u0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid token_correspondence_StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented))

:named token_correspondence_StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen_typing_conversion; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(277,8-277,36); use=StlcCbvDbParSubst.fst(277,8-277,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x1
@x2)
@x3
@x4)))
(HasType (StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented @u0
@x1
@x2
@x3
@x4
@x5)
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x1
@x2)
@x3
@x4)))
 

:pattern ((StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented @u0
@x1
@x2
@x3
@x4
@x5))
:qid token_correspondence_StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented))

:named token_correspondence_StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name StlcCbvDbParSubst.typing_extensional; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-80,42); use=StlcCbvDbParSubst.fst(80,26-80,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_1c415a41a773302054dcc43dd4ed4815 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_1c415a41a773302054dcc43dd4ed4815 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_1c415a41a773302054dcc43dd4ed4815))

:named refinement_kinding_Tm_refine_1c415a41a773302054dcc43dd4ed4815))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name StlcCbvDbParSubst.typing_extensional; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-80,42); use=StlcCbvDbParSubst.fst(80,26-80,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1c415a41a773302054dcc43dd4ed4815 @x2))
(and (HasTypeFuel @u0
@x1
StlcStrongDbParSubst.env)

;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(80,33-80,41)
(Valid 
;; def=StlcCbvDbParSubst.fst(80,33-80,41); use=StlcCbvDbParSubst.fst(80,33-80,41)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
@x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1c415a41a773302054dcc43dd4ed4815 @x2)))
:qid refinement_interpretation_Tm_refine_1c415a41a773302054dcc43dd4ed4815))

:named refinement_interpretation_Tm_refine_1c415a41a773302054dcc43dd4ed4815))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1c415a41a773302054dcc43dd4ed4815
;;; Fact-ids: Name StlcCbvDbParSubst.typing_extensional; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(80,26-80,42); use=StlcCbvDbParSubst.fst(80,26-80,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1c415a41a773302054dcc43dd4ed4815 @x0)))
(Valid (Prims.hasEq StlcStrongDbParSubst.env)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1c415a41a773302054dcc43dd4ed4815 @x0))))
:qid haseqTm_refine_1c415a41a773302054dcc43dd4ed4815))

:named haseqTm_refine_1c415a41a773302054dcc43dd4ed4815))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StlcCbvDbParSubst.substitution_preserves_typing
;;; Fact-ids: Name StlcCbvDbParSubst.substitution_preserves_typing; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.var)
(HasType @x2
StlcStrongDbParSubst.exp)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
StlcStrongDbParSubst.typ)
(HasType @x6
StlcStrongDbParSubst.env)
(HasType @x7
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
@x4))
(HasType @x8
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen @x1
@x4
@x6)
@x2
@x5)))
(= (StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(let ((@lb9 @x8))
(ite (is-StlcStrongDbParSubst.TyVar @lb9)
(let ((@lb10 (Prims.op_Equality StlcStrongDbParSubst.var
@x1
(StlcStrongDbParSubst.TyVar_x @lb9))))
(ite (= @lb10
(BoxBool true))
(StlcCbvDbParSubst.context_invariance @x3
(StlcStrongDbParSubst.empty Dummy_value)
@x4
@x7
@x6)
(let ((@lb11 (Prims.op_LessThan (StlcStrongDbParSubst.TyVar_x @lb9)
@x1)))
(ite (= @lb11
(BoxBool true))
(StlcCbvDbParSubst.context_invariance @x2
(StlcCbvDbParSubst.extend_gen @x1
@x4
@x6)
@x5
@x8
@x6)
(StlcStrongDbParSubst.TyVar @x6
(Prims.op_Subtraction (StlcStrongDbParSubst.TyVar_x @lb9)
(BoxInt 1)))))))
(ite (is-StlcStrongDbParSubst.TyLam @lb9)
(StlcStrongDbParSubst.TyLam @x6
(StlcStrongDbParSubst.TyLam_t @lb9)
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (Prims.op_Addition @x1
(BoxInt 1))
@x3)
(StlcStrongDbParSubst.TyLam_e1 @lb9))
(StlcStrongDbParSubst.TyLam_t_ @lb9)
(StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented @u0
(Prims.op_Addition @x1
(BoxInt 1))
(StlcStrongDbParSubst.TyLam_e1 @lb9)
@x3
@x4
(StlcStrongDbParSubst.TyLam_t_ @lb9)
(StlcStrongDbParSubst.extend (StlcStrongDbParSubst.TyLam_t @lb9)
@x6)
@x7
(StlcCbvDbParSubst.typing_extensional__176 (StlcStrongDbParSubst.TyLam_e1 @lb9)
(StlcStrongDbParSubst.extend (StlcStrongDbParSubst.TyLam_t @lb9)
(StlcStrongDbParSubst.TyLam_g @lb9))
(StlcStrongDbParSubst.TyLam_t_ @lb9)
(StlcStrongDbParSubst.TyLam_hbody @lb9)
(StlcCbvDbParSubst.extend_gen (Prims.op_Addition @x1
(BoxInt 1))
@x4
(StlcStrongDbParSubst.extend (StlcStrongDbParSubst.TyLam_t @lb9)
@x6)))))
(ite (is-StlcStrongDbParSubst.TyApp @lb9)
(StlcStrongDbParSubst.TyApp @x6
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x1
@x3)
(StlcStrongDbParSubst.TyApp_e1 @lb9))
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen @x1
@x3)
(StlcStrongDbParSubst.TyApp_e2 @lb9))
(StlcStrongDbParSubst.TyApp_t11 @lb9)
(StlcStrongDbParSubst.TyApp_t12 @lb9)
(StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented @u0
@x1
(StlcStrongDbParSubst.TyApp_e1 @lb9)
@x3
@x4
(StlcStrongDbParSubst.TArr (StlcStrongDbParSubst.TyApp_t11 @lb9)
(StlcStrongDbParSubst.TyApp_t12 @lb9))
@x6
@x7
(StlcStrongDbParSubst.TyApp_h1 @lb9))
(StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented @u0
@x1
(StlcStrongDbParSubst.TyApp_e2 @lb9)
@x3
@x4
(StlcStrongDbParSubst.TyApp_t11 @lb9)
@x6
@x7
(StlcStrongDbParSubst.TyApp_h2 @lb9)))
(ite (is-StlcStrongDbParSubst.TyUnit @lb9)
(StlcStrongDbParSubst.TyUnit @x6)
Tm_unit)))))))
 :weight 0


:pattern ((StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid equation_with_fuel_StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented))

:named equation_with_fuel_StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: StlcCbvDbParSubst.extend_gen_typing_conversion
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen_typing_conversion; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(277,8-277,36); use=StlcCbvDbParSubst.fst(277,8-277,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
StlcStrongDbParSubst.env)
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x1
@x2)
@x3
@x4)))
(= (StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
@x5))
 :weight 0


:pattern ((StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid equation_with_fuel_StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented))

:named equation_with_fuel_StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StlcCbvDbParSubst.substitution_preserves_typing; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 

:pattern ((StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid @fuel_irrelevance_StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented))

:named @fuel_irrelevance_StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen_typing_conversion; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(277,8-277,36); use=StlcCbvDbParSubst.fst(277,8-277,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented))

:named @fuel_irrelevance_StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StlcCbvDbParSubst.substitution_preserves_typing; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(246,8-246,37); use=StlcCbvDbParSubst.fst(246,8-246,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (StlcCbvDbParSubst.substitution_preserves_typing @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((StlcCbvDbParSubst.substitution_preserves_typing @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid @fuel_correspondence_StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented))

:named @fuel_correspondence_StlcCbvDbParSubst.substitution_preserves_typing.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name StlcCbvDbParSubst.extend_gen_typing_conversion; Namespace StlcCbvDbParSubst
(assert (! 
;; def=StlcCbvDbParSubst.fst(277,8-277,36); use=StlcCbvDbParSubst.fst(277,8-277,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (StlcCbvDbParSubst.extend_gen_typing_conversion @x0
@x1
@x2
@x3
@x4)
(StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((StlcCbvDbParSubst.extend_gen_typing_conversion @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented))

:named @fuel_correspondence_StlcCbvDbParSubst.extend_gen_typing_conversion.fuel_instrumented))
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(282,30-290,36)

;;;;;;;;;;;;;;;;e : StlcStrongDbParSubst.exp (StlcStrongDbParSubst.exp)
(declare-fun x_00c2c856e702f50718a37c394bb4dba3_0 () Term)
;;;;;;;;;;;;;;;;binder_x_00c2c856e702f50718a37c394bb4dba3_0
;;; Fact-ids: 
(assert (! (HasType x_00c2c856e702f50718a37c394bb4dba3_0
StlcStrongDbParSubst.exp)
:named binder_x_00c2c856e702f50718a37c394bb4dba3_0))
;;;;;;;;;;;;;;;;t : StlcStrongDbParSubst.typ (StlcStrongDbParSubst.typ)
(declare-fun x_fcf8df75f2957ee85ada8a1f90a7cec8_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_1
;;; Fact-ids: 
(assert (! (HasType x_fcf8df75f2957ee85ada8a1f90a7cec8_1
StlcStrongDbParSubst.typ)
:named binder_x_fcf8df75f2957ee85ada8a1f90a7cec8_1))
;;;;;;;;;;;;;;;;h : h: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t {Some? (StlcCbvDbParSubst.step e)} (h: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t {Some? (StlcCbvDbParSubst.step e)})
(declare-fun x_899c1942672ed57783ec1a64844e5ee3_2 () Term)
(declare-fun Tm_refine_e8ddf2f052418b94356dc5507e2d1c42 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_e8ddf2f052418b94356dc5507e2d1c42
Tm_type)
:named refinement_kinding_Tm_refine_e8ddf2f052418b94356dc5507e2d1c42))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-280,73); use=StlcCbvDbParSubst.fst(282,8-282,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e8ddf2f052418b94356dc5507e2d1c42)
(and (HasTypeFuel @u0
@x1
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1))

;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(282,8-282,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e8ddf2f052418b94356dc5507e2d1c42))
:qid refinement_interpretation_Tm_refine_e8ddf2f052418b94356dc5507e2d1c42))

:named refinement_interpretation_Tm_refine_e8ddf2f052418b94356dc5507e2d1c42))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e8ddf2f052418b94356dc5507e2d1c42
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e8ddf2f052418b94356dc5507e2d1c42))
(Valid (Prims.hasEq (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1))))
:named haseqTm_refine_e8ddf2f052418b94356dc5507e2d1c42))
;;;;;;;;;;;;;;;;binder_x_899c1942672ed57783ec1a64844e5ee3_2
;;; Fact-ids: 
(assert (! (HasType x_899c1942672ed57783ec1a64844e5ee3_2
Tm_refine_e8ddf2f052418b94356dc5507e2d1c42)
:named binder_x_899c1942672ed57783ec1a64844e5ee3_2))
(declare-fun Tm_refine_2400b1bac082232f7142d0dd1bd3226e (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-290,36); use=StlcCbvDbParSubst.fst(280,39-290,36)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_2400b1bac082232f7142d0dd1bd3226e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_2400b1bac082232f7142d0dd1bd3226e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_2400b1bac082232f7142d0dd1bd3226e))

:named refinement_kinding_Tm_refine_2400b1bac082232f7142d0dd1bd3226e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-290,36); use=StlcCbvDbParSubst.fst(280,39-290,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2400b1bac082232f7142d0dd1bd3226e @x2
@x3))
(and (HasTypeFuel @u0
@x1
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
@x2))

;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(282,8-282,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x3)))


;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(282,30-290,36)

;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(282,30-290,36)
(Valid 
;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(282,30-290,36)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x3
x_00c2c856e702f50718a37c394bb4dba3_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2400b1bac082232f7142d0dd1bd3226e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_2400b1bac082232f7142d0dd1bd3226e))

:named refinement_interpretation_Tm_refine_2400b1bac082232f7142d0dd1bd3226e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2400b1bac082232f7142d0dd1bd3226e
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-290,36); use=StlcCbvDbParSubst.fst(280,39-290,36)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2400b1bac082232f7142d0dd1bd3226e @x0
@x1)))
(Valid (Prims.hasEq (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x1
@x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2400b1bac082232f7142d0dd1bd3226e @x0
@x1))))
:qid haseqTm_refine_2400b1bac082232f7142d0dd1bd3226e))

:named haseqTm_refine_2400b1bac082232f7142d0dd1bd3226e))
(declare-fun StlcCbvDbParSubst.preservation (Term Term Term) Term)

;;;;;;;;;;;;;;;;h: (h: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t {Some? (step e)}){e << e}   -> Prims.Tot (StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty (step e).v t)
(declare-fun Tm_arrow_198e10b94ace95b2be0cace9e7265f59 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_198e10b94ace95b2be0cace9e7265f59
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_198e10b94ace95b2be0cace9e7265f59
Tm_type)
:named kinding_Tm_arrow_198e10b94ace95b2be0cace9e7265f59))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,22-290,36); use=StlcCbvDbParSubst.fst(280,39-290,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_198e10b94ace95b2be0cace9e7265f59)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_198e10b94ace95b2be0cace9e7265f59))
:qid StlcCbvDbParSubst_pre_typing_Tm_arrow_198e10b94ace95b2be0cace9e7265f59))

:named StlcCbvDbParSubst_pre_typing_Tm_arrow_198e10b94ace95b2be0cace9e7265f59))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_198e10b94ace95b2be0cace9e7265f59
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,22-290,36); use=StlcCbvDbParSubst.fst(280,39-290,36)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_198e10b94ace95b2be0cace9e7265f59)
(and 
;; def=StlcCbvDbParSubst.fst(280,22-290,36); use=StlcCbvDbParSubst.fst(280,39-290,36)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.typ)
(HasType @x3
(Tm_refine_2400b1bac082232f7142d0dd1bd3226e @x2
@x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1))
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_198e10b94ace95b2be0cace9e7265f59.1))

(IsTotFun @x0)

;; def=StlcCbvDbParSubst.fst(280,22-290,36); use=StlcCbvDbParSubst.fst(280,39-290,36)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_198e10b94ace95b2be0cace9e7265f59.2))


;; def=StlcCbvDbParSubst.fst(280,22-290,36); use=StlcCbvDbParSubst.fst(280,39-290,36)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
StlcStrongDbParSubst.exp)
(HasType @x2
StlcStrongDbParSubst.typ))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_198e10b94ace95b2be0cace9e7265f59.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_198e10b94ace95b2be0cace9e7265f59))
:qid StlcCbvDbParSubst_interpretation_Tm_arrow_198e10b94ace95b2be0cace9e7265f59))

:named StlcCbvDbParSubst_interpretation_Tm_arrow_198e10b94ace95b2be0cace9e7265f59))
(declare-fun StlcCbvDbParSubst.preservation@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(282,8-282,20); use=StlcCbvDbParSubst.fst(282,8-282,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.preservation@tok
@x0)
@x1)
@x2)
(StlcCbvDbParSubst.preservation @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.preservation@tok
@x0)
@x1)
@x2))
:qid token_correspondence_StlcCbvDbParSubst.preservation))

:named token_correspondence_StlcCbvDbParSubst.preservation))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(282,8-282,20); use=StlcCbvDbParSubst.fst(282,8-282,20)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType StlcCbvDbParSubst.preservation@tok
Tm_arrow_198e10b94ace95b2be0cace9e7265f59))

;; def=StlcCbvDbParSubst.fst(282,8-282,20); use=StlcCbvDbParSubst.fst(282,8-282,20)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT StlcCbvDbParSubst.preservation@tok
@x1)
@x2)
@x3)
(StlcCbvDbParSubst.preservation @x1
@x2
@x3))
 

:pattern ((StlcCbvDbParSubst.preservation @x1
@x2
@x3))
:qid function_token_typing_StlcCbvDbParSubst.preservation.1))
)
 

:pattern ((ApplyTT @x0
StlcCbvDbParSubst.preservation@tok))
:qid function_token_typing_StlcCbvDbParSubst.preservation))

:named function_token_typing_StlcCbvDbParSubst.preservation))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(282,8-282,20); use=StlcCbvDbParSubst.fst(282,8-282,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
(Tm_refine_2400b1bac082232f7142d0dd1bd3226e @x1
@x0)))
(HasType (StlcCbvDbParSubst.preservation @x0
@x1
@x2)
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x0))
@x1)))
 

:pattern ((StlcCbvDbParSubst.preservation @x0
@x1
@x2))
:qid typing_StlcCbvDbParSubst.preservation))

:named typing_StlcCbvDbParSubst.preservation))
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


(declare-fun Tm_refine_e493015431f5873191e0eae9090509a1 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_e493015431f5873191e0eae9090509a1
Tm_type)
:named refinement_kinding_Tm_refine_e493015431f5873191e0eae9090509a1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e493015431f5873191e0eae9090509a1)
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option StlcStrongDbParSubst.exp))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,30-290,36)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e493015431f5873191e0eae9090509a1))
:qid refinement_interpretation_Tm_refine_e493015431f5873191e0eae9090509a1))

:named refinement_interpretation_Tm_refine_e493015431f5873191e0eae9090509a1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e493015431f5873191e0eae9090509a1
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e493015431f5873191e0eae9090509a1))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option StlcStrongDbParSubst.exp))))
:named haseqTm_refine_e493015431f5873191e0eae9090509a1))


; Encoding query formula : Some? (StlcCbvDbParSubst.step e) /\
; (~(TyApp? h) ==> Prims.l_False) /\
; (forall (b: StlcStrongDbParSubst.env)
;     (b: StlcStrongDbParSubst.exp)
;     (b: StlcStrongDbParSubst.exp)
;     (b: StlcStrongDbParSubst.typ)
;     (b: StlcStrongDbParSubst.typ)
;     (b: StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b))
;     (b: StlcStrongDbParSubst.typing b b b).
;     h == StlcStrongDbParSubst.TyApp b b ==>
;     Some? (StlcCbvDbParSubst.step e) /\
;     (forall (k:
;         Prims.pure_post (StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty
;               (StlcCbvDbParSubst.step e).v
;               t)).
;         (forall (x:
;             StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty (StlcCbvDbParSubst.step e).v t).
;             {:pattern Prims.guard_free (k x)}
;             Prims.auto_squash (k x)) ==>
;         (StlcStrongDbParSubst.is_value b == true ==>
;           Some? (StlcCbvDbParSubst.step e) /\
;           (forall (k:
;               Prims.pure_post (StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty
;                     (StlcCbvDbParSubst.step e).v
;                     t)).
;               (forall (x:
;                   StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty
;                     (StlcCbvDbParSubst.step e).v
;                     t).
;                   {:pattern Prims.guard_free (k x)}
;                   Prims.auto_squash (k x)) ==>
;               (StlcStrongDbParSubst.is_value b == true ==>
;                 Some? (StlcCbvDbParSubst.step e) /\
;                 (~(TyLam? b) ==> Prims.l_False) /\
;                 (forall (b: StlcStrongDbParSubst.env)
;                     (b: StlcStrongDbParSubst.typ)
;                     (b: StlcStrongDbParSubst.exp)
;                     (b: StlcStrongDbParSubst.typ)
;                     (b: StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend b b) b b).
;                     b == StlcStrongDbParSubst.TyLam b b ==>
;                     (forall (pure_result: Prims.unit).
;                         FStar.FunctionalExtensionality.feq (StlcCbvDbParSubst.extend_gen 0
;                               b
;                               StlcStrongDbParSubst.empty)
;                           (StlcStrongDbParSubst.extend b StlcStrongDbParSubst.empty) ==>
;                         b == StlcStrongDbParSubst.empty /\
;                         (forall (any_result: StlcStrongDbParSubst.typing b b b).
;                             b == any_result ==>
;                             StlcCbvDbParSubst.extend_gen 0 b b ==
;                             StlcCbvDbParSubst.extend_gen 0 b StlcStrongDbParSubst.empty /\
;                             (forall (return_val:
;                                 StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen 0
;                                       b
;                                       StlcStrongDbParSubst.empty)
;                                   b
;                                   b).
;                                 return_val == StlcCbvDbParSubst.extend_gen_typing_conversion b ==>
;                                 (forall (any_result:
;                                     StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty
;                                       (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen 0
;                                               b)
;                                           b)
;                                       b).
;                                     StlcCbvDbParSubst.substitution_preserves_typing 0
;                                       b
;                                       (StlcCbvDbParSubst.extend_gen_typing_conversion b) ==
;                                     any_result ==>
;                                     StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen 0 b)
;                                       b ==
;                                     (StlcCbvDbParSubst.step e).v /\ b == t)))))) /\
;               (~(StlcStrongDbParSubst.is_value b = true) ==>
;                 (forall (b: Prims.bool).
;                     StlcStrongDbParSubst.is_value b == b ==>
;                     Some? (StlcCbvDbParSubst.step b) /\
;                     (forall (return_val:
;                         _: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp {Some? _}).
;                         return_val == StlcCbvDbParSubst.step b ==>
;                         (forall (any_result: StlcStrongDbParSubst.exp).
;                             (StlcCbvDbParSubst.step b).v == any_result ==>
;                             b == StlcStrongDbParSubst.empty /\
;                             Some? (StlcCbvDbParSubst.step b) /\ (b << e) /\
;                             (forall (any_result: StlcStrongDbParSubst.typing b b b).
;                                 b == any_result ==>
;                                 (forall (any_result:
;                                     StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty
;                                       (StlcCbvDbParSubst.step b).v
;                                       b).
;                                     StlcCbvDbParSubst.preservation b == any_result ==>
;                                     StlcStrongDbParSubst.empty == b /\
;                                     (forall (return_val:
;                                         StlcStrongDbParSubst.typing b (StlcCbvDbParSubst.step b).v b)
;                                       .
;                                         return_val == StlcCbvDbParSubst.preservation b ==>
;                                         StlcCbvDbParSubst.preservation b == return_val ==>
;                                         (forall (any_result:
;                                             StlcStrongDbParSubst.typing b
;                                               (StlcStrongDbParSubst.EApp b
;                                                   (StlcCbvDbParSubst.step b).v)
;                                               b).
;                                             StlcStrongDbParSubst.TyApp b
;                                               (StlcCbvDbParSubst.preservation b) ==
;                                             any_result ==>
;                                             StlcStrongDbParSubst.EApp b (StlcCbvDbParSubst.step b).v ==
;                                             (StlcCbvDbParSubst.step e).v /\
;                                             (b == t) /\ (b == StlcStrongDbParSubst.empty))))))))))) /\
;         (~(StlcStrongDbParSubst.is_value b = true) ==>
;           (forall (b: Prims.bool).
;               StlcStrongDbParSubst.is_value b == b ==>
;               Some? (StlcCbvDbParSubst.step b) /\
;               (forall (return_val:
;                   _: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp {Some? _}).
;                   return_val == StlcCbvDbParSubst.step b ==>
;                   (forall (any_result: StlcStrongDbParSubst.exp).
;                       (StlcCbvDbParSubst.step b).v == any_result ==>
;                       b == StlcStrongDbParSubst.empty /\
;                       Some? (StlcCbvDbParSubst.step b) /\ (b << e) /\
;                       (forall (any_result:
;                           StlcStrongDbParSubst.typing b b (StlcStrongDbParSubst.TArr b b)).
;                           b == any_result ==>
;                           (forall (any_result:
;                               StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty
;                                 (StlcCbvDbParSubst.step b).v
;                                 (StlcStrongDbParSubst.TArr b b)).
;                               StlcCbvDbParSubst.preservation b == any_result ==>
;                               b == StlcStrongDbParSubst.empty /\
;                               (forall (any_result: StlcStrongDbParSubst.typing b b b).
;                                   b == any_result ==>
;                                   (forall (any_result:
;                                       StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty
;                                         (StlcStrongDbParSubst.EApp (StlcCbvDbParSubst.step b).v b)
;                                         b).
;                                       StlcStrongDbParSubst.TyApp (StlcCbvDbParSubst.preservation b)
;                                         b ==
;                                       any_result ==>
;                                       StlcStrongDbParSubst.EApp (StlcCbvDbParSubst.step b).v b ==
;                                       (StlcCbvDbParSubst.step e).v /\ b == t))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec preservation`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,8-282,20)
(or label_1

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,30-290,36)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
)

(implies 
;; def=StlcCbvDbParSubst.fst(283,6-283,38); use=StlcCbvDbParSubst.fst(283,6-283,38)
(not 
;; def=StlcCbvDbParSubst.fst(283,6-283,38); use=StlcCbvDbParSubst.fst(283,6-283,38)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyApp (StlcStrongDbParSubst.empty Dummy_value)
x_00c2c856e702f50718a37c394bb4dba3_0
x_fcf8df75f2957ee85ada8a1f90a7cec8_1
x_899c1942672ed57783ec1a64844e5ee3_2))
)

label_2)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x0 Term))
 (! (implies (HasType @x0
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x1 Term))
 (! (implies (HasType @x1
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x2 Term))
 (! (implies (HasType @x2
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x3 Term))
 (! (implies (HasType @x3
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x4 Term))
 (! (implies (HasType @x4
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(StlcStrongDbParSubst.typing @x0
@x1
(StlcStrongDbParSubst.TArr @x3
@x4)))

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(StlcStrongDbParSubst.typing @x0
@x2
@x3))

;; def=StlcCbvDbParSubst.fst(283,6-283,38); use=StlcCbvDbParSubst.fst(283,6-283,38)
(= x_899c1942672ed57783ec1a64844e5ee3_2
(StlcStrongDbParSubst.TyApp @x0
@x1
@x2
@x3
@x4
@x5
@x6))
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,8-282,20)
(or label_3

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(284,5-290,36)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
)

(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0))
x_fcf8df75f2957ee85ada8a1f90a7cec8_1)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x8 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(282,30-290,36)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(282,30-290,36)
(ApplyTT @x7
@x8)
)

 

:pattern ((ApplyTT @x7
@x8))
:qid @query.8))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and (implies 
;; def=StlcCbvDbParSubst.fst(284,8-284,19); use=StlcCbvDbParSubst.fst(284,8-284,19)
(= (StlcStrongDbParSubst.is_value @x1)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,8-282,20)
(or label_4

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(285,10-289,43)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
)

(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0))
x_fcf8df75f2957ee85ada8a1f90a7cec8_1)))

;; def=Prims.fst(402,27-402,88); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x9 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(282,30-290,36)
(Valid 
;; def=Prims.fst(402,84-402,87); use=StlcCbvDbParSubst.fst(282,30-290,36)
(ApplyTT @x8
@x9)
)

 

:pattern ((ApplyTT @x8
@x9))
:qid @query.10))
)

;; def=Prims.fst(389,2-389,39); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and (implies 
;; def=StlcCbvDbParSubst.fst(285,14-285,25); use=StlcCbvDbParSubst.fst(285,14-285,25)
(= (StlcStrongDbParSubst.is_value @x2)
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,8-282,20)
(or label_5

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(286,15-288,89)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
)

(implies 
;; def=StlcCbvDbParSubst.fst(286,20-286,35); use=StlcCbvDbParSubst.fst(286,20-286,35)
(not 
;; def=StlcCbvDbParSubst.fst(286,20-286,35); use=StlcCbvDbParSubst.fst(286,20-286,35)
(BoxBool_proj_0 (StlcStrongDbParSubst.uu___is_TyLam @x0
@x1
(StlcStrongDbParSubst.TArr @x3
@x4)
@x5))
)

label_6)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x9 Term))
 (! (implies (HasType @x9
StlcStrongDbParSubst.env)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x10 Term))
 (! (implies (HasType @x10
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x11 Term))
 (! (implies (HasType @x11
StlcStrongDbParSubst.exp)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x12 Term))
 (! (implies (HasType @x12
StlcStrongDbParSubst.typ)

;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.extend @x10
@x9)
@x11
@x12))

;; def=StlcCbvDbParSubst.fst(286,20-286,35); use=StlcCbvDbParSubst.fst(286,20-286,35)
(= @x5
(StlcStrongDbParSubst.TyLam @x9
@x10
@x11
@x12
@x13))
)

;; def=Prims.fst(441,36-441,97); use=StlcCbvDbParSubst.fst(287,17-287,29)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=StlcCbvDbParSubst.fst(273,25-273,62); use=StlcCbvDbParSubst.fst(287,17-287,29)
(Valid 
;; def=StlcCbvDbParSubst.fst(273,25-273,62); use=StlcCbvDbParSubst.fst(287,17-287,29)
(FStar.FunctionalExtensionality.feq StlcStrongDbParSubst.var
Tm_abs_98a03214e043bd02fb86964ce533ed67
(StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x10
(StlcStrongDbParSubst.empty Dummy_value))
(StlcStrongDbParSubst.extend @x10
(StlcStrongDbParSubst.empty Dummy_value)))
)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=StlcCbvDbParSubst.fst(243,17-283,14); use=StlcCbvDbParSubst.fst(288,49-288,51)
(or label_7

;; def=StlcCbvDbParSubst.fst(243,17-283,14); use=StlcCbvDbParSubst.fst(288,49-288,51)
(= @x0
(StlcStrongDbParSubst.empty Dummy_value))
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(StlcStrongDbParSubst.typing @x0
@x2
@x3))

;; def=StlcCbvDbParSubst.fst(243,7-283,38); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= @x6
@x15)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=StlcCbvDbParSubst.fst(244,17-278,33); use=StlcCbvDbParSubst.fst(288,52-288,88)
(or label_8

;; def=StlcCbvDbParSubst.fst(244,17-278,33); use=StlcCbvDbParSubst.fst(288,52-288,88)
(= (StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x10
@x9)
(StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x3
(StlcStrongDbParSubst.empty Dummy_value)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
(StlcStrongDbParSubst.typing (StlcCbvDbParSubst.extend_gen (BoxInt 0)
@x3
(StlcStrongDbParSubst.empty Dummy_value))
@x11
@x12))

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= @x16
(StlcCbvDbParSubst.extend_gen_typing_conversion @x10
@x9
@x11
@x12
@x13))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
(StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (BoxInt 0)
@x2)
@x11)
@x12))

;; def=StlcCbvDbParSubst.fst(281,10-288,88); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= (StlcCbvDbParSubst.substitution_preserves_typing (BoxInt 0)
@x11
@x2
@x3
@x12
(StlcStrongDbParSubst.empty Dummy_value)
@x6
(StlcCbvDbParSubst.extend_gen_typing_conversion @x10
@x9
@x11
@x12
@x13))
@x17)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(288,17-288,88)
(and 
;; def=StlcCbvDbParSubst.fst(245,21-281,42); use=StlcCbvDbParSubst.fst(288,17-288,88)
(or label_9

;; def=StlcCbvDbParSubst.fst(245,21-281,42); use=StlcCbvDbParSubst.fst(288,17-288,88)
(= (StlcStrongDbParSubst.subst (StlcCbvDbParSubst.sub_beta_gen (BoxInt 0)
@x2)
@x11)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
)


;; def=StlcCbvDbParSubst.fst(282,25-286,35); use=StlcCbvDbParSubst.fst(288,17-288,88)
(or label_10

;; def=StlcCbvDbParSubst.fst(282,25-286,35); use=StlcCbvDbParSubst.fst(288,17-288,88)
(= @x12
x_fcf8df75f2957ee85ada8a1f90a7cec8_1)
)
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(282,30-290,36)
(not 
;; def=StlcCbvDbParSubst.fst(285,14-285,25); use=StlcCbvDbParSubst.fst(285,14-285,25)
(= (StlcStrongDbParSubst.is_value @x2)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.bool)

;; def=StlcCbvDbParSubst.fst(285,14-289,42); use=StlcCbvDbParSubst.fst(285,14-289,42)
(= (StlcStrongDbParSubst.is_value @x2)
@x9)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(289,26-289,38)
(or label_11

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(289,26-289,38)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Tm_refine_e493015431f5873191e0eae9090509a1)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= @x10
(StlcCbvDbParSubst.step @x2))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(132,13-132,15); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2))
@x11)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=StlcCbvDbParSubst.fst(280,48-283,14); use=StlcCbvDbParSubst.fst(289,39-289,41)
(or label_12

;; def=StlcCbvDbParSubst.fst(280,48-283,14); use=StlcCbvDbParSubst.fst(289,39-289,41)
(= @x0
(StlcStrongDbParSubst.empty Dummy_value))
)


;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(289,39-289,41)
(or label_13

;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(289,39-289,41)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2)))
)


;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(289,39-289,41)
(or label_14

;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(289,39-289,41)
(Valid 
;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(289,39-289,41)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x2
x_00c2c856e702f50718a37c394bb4dba3_0)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(StlcStrongDbParSubst.typing @x0
@x2
@x3))

;; def=StlcCbvDbParSubst.fst(280,39-283,38); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= @x6
@x12)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2))
@x3))

;; def=StlcStrongDbParSubst.fst(136,16-136,31); use=StlcCbvDbParSubst.fst(289,16-289,42)
(= (StlcCbvDbParSubst.preservation @x2
@x3
@x6)
@x13)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=StlcCbvDbParSubst.fst(281,18-283,14); use=StlcCbvDbParSubst.fst(289,25-289,42)
(or label_15

;; def=StlcCbvDbParSubst.fst(281,18-283,14); use=StlcCbvDbParSubst.fst(289,25-289,42)
(= (StlcStrongDbParSubst.empty Dummy_value)
@x0)
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(StlcStrongDbParSubst.typing @x0
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2))
@x3))

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= @x14
(StlcCbvDbParSubst.preservation @x2
@x3
@x6))


;; def=StlcStrongDbParSubst.fst(136,13-136,15); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= (StlcCbvDbParSubst.preservation @x2
@x3
@x6)
@x14)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(StlcStrongDbParSubst.typing @x0
(StlcStrongDbParSubst.EApp @x1
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2)))
@x4))

;; def=StlcCbvDbParSubst.fst(281,10-289,42); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= (StlcStrongDbParSubst.TyApp @x0
@x1
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2))
@x3
@x4
@x5
(StlcCbvDbParSubst.preservation @x2
@x3
@x6))
@x15)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(289,16-289,42)
(and 
;; def=StlcCbvDbParSubst.fst(281,24-281,42); use=StlcCbvDbParSubst.fst(289,16-289,42)
(or label_16

;; def=StlcCbvDbParSubst.fst(281,24-281,42); use=StlcCbvDbParSubst.fst(289,16-289,42)
(= (StlcStrongDbParSubst.EApp @x1
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x2)))
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
)


;; def=StlcCbvDbParSubst.fst(282,25-283,32); use=StlcCbvDbParSubst.fst(289,16-289,42)
(or label_17

;; def=StlcCbvDbParSubst.fst(282,25-283,32); use=StlcCbvDbParSubst.fst(289,16-289,42)
(= @x4
x_fcf8df75f2957ee85ada8a1f90a7cec8_1)
)


;; def=StlcCbvDbParSubst.fst(281,18-283,14); use=StlcCbvDbParSubst.fst(289,16-289,42)
(or label_18

;; def=StlcCbvDbParSubst.fst(281,18-283,14); use=StlcCbvDbParSubst.fst(289,16-289,42)
(= @x0
(StlcStrongDbParSubst.empty Dummy_value))
)
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.20))
))
)
 
;;no pats
:qid @query.9)))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=StlcCbvDbParSubst.fst(282,30-290,36)
(not 
;; def=StlcCbvDbParSubst.fst(284,8-284,19); use=StlcCbvDbParSubst.fst(284,8-284,19)
(= (StlcStrongDbParSubst.is_value @x1)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.bool)

;; def=StlcCbvDbParSubst.fst(284,8-290,36); use=StlcCbvDbParSubst.fst(284,8-290,36)
(= (StlcStrongDbParSubst.is_value @x1)
@x8)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(290,17-290,29)
(or label_19

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(290,17-290,29)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1)))
)


;; def=Prims.fst(356,2-356,58); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Tm_refine_e493015431f5873191e0eae9090509a1)

;; def=Prims.fst(356,26-356,41); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= @x9
(StlcCbvDbParSubst.step @x1))
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
StlcStrongDbParSubst.exp)

;; def=StlcStrongDbParSubst.fst(131,13-131,15); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1))
@x10)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=StlcCbvDbParSubst.fst(280,48-283,14); use=StlcCbvDbParSubst.fst(290,30-290,32)
(or label_20

;; def=StlcCbvDbParSubst.fst(280,48-283,14); use=StlcCbvDbParSubst.fst(290,30-290,32)
(= @x0
(StlcStrongDbParSubst.empty Dummy_value))
)


;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(290,30-290,32)
(or label_21

;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(290,30-290,32)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1)))
)


;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(290,30-290,32)
(or label_22

;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(290,30-290,32)
(Valid 
;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(290,30-290,32)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x1
x_00c2c856e702f50718a37c394bb4dba3_0)
)
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(StlcStrongDbParSubst.typing @x0
@x1
(StlcStrongDbParSubst.TArr @x3
@x4)))

;; def=StlcCbvDbParSubst.fst(280,39-283,35); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= @x5
@x11)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1))
(StlcStrongDbParSubst.TArr @x3
@x4)))

;; def=StlcStrongDbParSubst.fst(135,13-135,15); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= (StlcCbvDbParSubst.preservation @x1
(StlcStrongDbParSubst.TArr @x3
@x4)
@x5)
@x12)
)

;; def=Prims.fst(459,77-459,89); use=StlcCbvDbParSubst.fst(282,30-290,36)
(and 
;; def=StlcCbvDbParSubst.fst(281,18-283,14); use=StlcCbvDbParSubst.fst(290,34-290,36)
(or label_23

;; def=StlcCbvDbParSubst.fst(281,18-283,14); use=StlcCbvDbParSubst.fst(290,34-290,36)
(= @x0
(StlcStrongDbParSubst.empty Dummy_value))
)


;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(StlcStrongDbParSubst.typing @x0
@x2
@x3))

;; def=StlcStrongDbParSubst.fst(136,13-136,15); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= @x6
@x13)
)

;; def=Prims.fst(451,66-451,102); use=StlcCbvDbParSubst.fst(282,30-290,36)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
(StlcStrongDbParSubst.EApp (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1))
@x2)
@x4))

;; def=StlcCbvDbParSubst.fst(281,10-290,36); use=StlcCbvDbParSubst.fst(282,30-290,36)
(= (StlcStrongDbParSubst.TyApp (StlcStrongDbParSubst.empty Dummy_value)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1))
@x2
@x3
@x4
(StlcCbvDbParSubst.preservation @x1
(StlcStrongDbParSubst.TArr @x3
@x4)
@x5)
@x6)
@x14)
)

;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(290,10-290,36)
(and 
;; def=StlcCbvDbParSubst.fst(281,24-281,42); use=StlcCbvDbParSubst.fst(290,10-290,36)
(or label_24

;; def=StlcCbvDbParSubst.fst(281,24-281,42); use=StlcCbvDbParSubst.fst(290,10-290,36)
(= (StlcStrongDbParSubst.EApp (FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x1))
@x2)
(FStar.Pervasives.Native.__proj__Some__item__v StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step x_00c2c856e702f50718a37c394bb4dba3_0)))
)


;; def=StlcCbvDbParSubst.fst(282,25-283,32); use=StlcCbvDbParSubst.fst(290,10-290,36)
(or label_25

;; def=StlcCbvDbParSubst.fst(282,25-283,32); use=StlcCbvDbParSubst.fst(290,10-290,36)
(= @x4
x_fcf8df75f2957ee85ada8a1f90a7cec8_1)
)
)
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.27))
))
)
 
;;no pats
:qid @query.7)))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.preservation, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_StlcCbvDbParSubst.step.fuel_instrumented, @fuel_correspondence_StlcStrongDbParSubst.subst.fuel_instrumented, @fuel_irrelevance_StlcCbvDbParSubst.step.fuel_instrumented, @fuel_irrelevance_StlcStrongDbParSubst.subst.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, StlcStrongDbParSubst_pretyping_00c2c856e702f50718a37c394bb4dba3, binder_x_00c2c856e702f50718a37c394bb4dba3_0, binder_x_899c1942672ed57783ec1a64844e5ee3_2, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_StlcStrongDbParSubst.EApp, constructor_distinct_StlcStrongDbParSubst.ELam, constructor_distinct_StlcStrongDbParSubst.EUnit, constructor_distinct_StlcStrongDbParSubst.EVar, constructor_distinct_StlcStrongDbParSubst.TArr, constructor_distinct_StlcStrongDbParSubst.TUnit, data_elim_StlcStrongDbParSubst.TyApp, data_elim_StlcStrongDbParSubst.TyLam, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, disc_equation_StlcStrongDbParSubst.ELam, disc_equation_StlcStrongDbParSubst.EUnit, disc_equation_StlcStrongDbParSubst.TyApp, disc_equation_StlcStrongDbParSubst.TyLam, equality_tok_StlcStrongDbParSubst.EUnit@tok, equality_tok_StlcStrongDbParSubst.TUnit@tok, equation_FStar.FunctionalExtensionality.feq, equation_Prims.nat, equation_StlcCbvDbParSubst.sub_beta_gen, equation_StlcStrongDbParSubst.is_value, equation_StlcStrongDbParSubst.sub, equation_StlcStrongDbParSubst.sub_beta, equation_StlcStrongDbParSubst.var, equation_with_fuel_StlcCbvDbParSubst.step.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_StlcStrongDbParSubst.typing, function_token_typing_Prims.__cache_version_number__, int_inversion, interpretation_Tm_abs_3348a440425b62f388c69bf898593dad, interpretation_Tm_abs_d70941dbcdfb3551376d504a2f54c457, kinding_StlcStrongDbParSubst.exp@tok, lemma_FStar.Pervasives.invertOption, lemma_StlcStrongDbParSubst.subst_extensional, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_LessThan, proj_equation_FStar.Pervasives.Native.Some_v, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_StlcStrongDbParSubst.EApp__0, projection_inverse_StlcStrongDbParSubst.EApp__1, projection_inverse_StlcStrongDbParSubst.ELam__0, projection_inverse_StlcStrongDbParSubst.ELam__1, projection_inverse_StlcStrongDbParSubst.TArr__0, projection_inverse_StlcStrongDbParSubst.TArr__1, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_88d77cd7bfeeb0c60949fc1418a69f5a, refinement_interpretation_Tm_refine_e8ddf2f052418b94356dc5507e2d1c42, subterm_ordering_StlcStrongDbParSubst.EApp, typing_StlcCbvDbParSubst.step, typing_Tm_abs_3348a440425b62f388c69bf898593dad, typing_Tm_abs_d70941dbcdfb3551376d504a2f54c457, typing_tok_StlcStrongDbParSubst.EUnit@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at StlcCbvDbParSubst.fst(282,0-290,36)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-280,73); use=StlcCbvDbParSubst.fst(282,8-282,20)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))

:named refinement_kinding_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-280,73); use=StlcCbvDbParSubst.fst(282,8-282,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
@x2))

;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(282,8-282,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))

:named refinement_interpretation_Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-280,73); use=StlcCbvDbParSubst.fst(282,8-282,20)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x0
@x1)))
(Valid (Prims.hasEq (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x1
@x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x0
@x1))))
:qid haseqTm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))

:named haseqTm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2))
(declare-fun Tm_refine_d556f38d02b7a5fbed684b64e0d59621 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-290,36); use=StlcCbvDbParSubst.fst(282,0-290,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_d556f38d02b7a5fbed684b64e0d59621 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_d556f38d02b7a5fbed684b64e0d59621 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_d556f38d02b7a5fbed684b64e0d59621))

:named refinement_kinding_Tm_refine_d556f38d02b7a5fbed684b64e0d59621))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-290,36); use=StlcCbvDbParSubst.fst(282,0-290,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d556f38d02b7a5fbed684b64e0d59621 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x3
@x2))

;; def=StlcCbvDbParSubst.fst(280,58-280,72); use=StlcCbvDbParSubst.fst(282,8-282,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x3)))


;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(282,30-290,36)

;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(282,30-290,36)
(Valid 
;; def=StlcCbvDbParSubst.fst(282,30-290,36); use=StlcCbvDbParSubst.fst(282,30-290,36)
(Prims.precedes StlcStrongDbParSubst.exp
StlcStrongDbParSubst.exp
@x3
@x4)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d556f38d02b7a5fbed684b64e0d59621 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_d556f38d02b7a5fbed684b64e0d59621))

:named refinement_interpretation_Tm_refine_d556f38d02b7a5fbed684b64e0d59621))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d556f38d02b7a5fbed684b64e0d59621
;;; Fact-ids: 
(assert (! 
;; def=StlcCbvDbParSubst.fst(280,39-290,36); use=StlcCbvDbParSubst.fst(282,0-290,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d556f38d02b7a5fbed684b64e0d59621 @x0
@x1
@x2)))
(Valid (Prims.hasEq (StlcStrongDbParSubst.typing (StlcStrongDbParSubst.empty Dummy_value)
@x1
@x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d556f38d02b7a5fbed684b64e0d59621 @x0
@x1
@x2))))
:qid haseqTm_refine_d556f38d02b7a5fbed684b64e0d59621))

:named haseqTm_refine_d556f38d02b7a5fbed684b64e0d59621))

; Encoding query formula : forall (e: StlcStrongDbParSubst.exp)
;   (t: StlcStrongDbParSubst.typ)
;   (h: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t {Some? (StlcCbvDbParSubst.step e)})
;   (e: StlcStrongDbParSubst.exp)
;   (t: StlcStrongDbParSubst.typ)
;   (h:
;   (h: StlcStrongDbParSubst.typing StlcStrongDbParSubst.empty e t {Some? (StlcCbvDbParSubst.step e)})
;     {e << e}).
;   (*  - Subtyping check failed
;   - Expected type
;       _: FStar.Pervasives.Native.option StlcStrongDbParSubst.exp {Some? _}
;     got type FStar.Pervasives.Native.option StlcStrongDbParSubst.exp
; *)
;   Some? (StlcCbvDbParSubst.step e)


; Context: While encoding a query
; While typechecking the top-level declaration `let rec preservation`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=StlcCbvDbParSubst.fst(282,0-290,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
StlcStrongDbParSubst.exp)
(HasType @x1
StlcStrongDbParSubst.typ)
(HasType @x2
(Tm_refine_a1a9f2b954f3c5a7c2ac682c70117cd2 @x1
@x0))
(HasType @x3
StlcStrongDbParSubst.exp)
(HasType @x4
StlcStrongDbParSubst.typ)
(HasType @x5
(Tm_refine_d556f38d02b7a5fbed684b64e0d59621 @x4
@x3
@x0)))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,8-282,20)
(or label_1

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=StlcCbvDbParSubst.fst(282,8-282,20)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some StlcStrongDbParSubst.exp
(StlcCbvDbParSubst.step @x3)))
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (StlcCbvDbParSubst.preservation, 3)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_d556f38d02b7a5fbed684b64e0d59621
