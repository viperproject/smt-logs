
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)


(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for module FStar.Monotonic.Pure


; <Start encoding let is_monotonic>

(declare-fun FStar.Monotonic.Pure.is_monotonic (Term Term) Term)

(declare-fun FStar.Monotonic.Pure.is_monotonic@tok () Term)

; </end encoding let is_monotonic>


; <Start encoding let elim_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity@tok () Term)

; </end encoding let elim_pure_wp_monotonicity>


; <Start encoding let elim_pure_wp_monotonicity_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall@tok () Term)

; </end encoding let elim_pure_wp_monotonicity_forall>


; <Start encoding let intro_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity@tok () Term)

; </end encoding let intro_pure_wp_monotonicity>


; <Start encoding let as_pure_wp>

(declare-fun FStar.Monotonic.Pure.as_pure_wp (Term Term) Term)
(declare-fun Tm_refine_5578b11cc349512589a3d2a8bfe37c29 (Term Term) Term)
(declare-fun Tm_arrow_169997680175178f95069b947929b45b () Term)
(declare-fun FStar.Monotonic.Pure.as_pure_wp@tok () Term)


; </end encoding let as_pure_wp>


; <Start encoding let elim_pure>

(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)

(declare-fun Tm_arrow_61bb9550f39772f18eaab129c43c3788 (Term) Term)
(declare-fun Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 (Term Term) Term)
(declare-fun Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 (Term Term) Term)



(declare-fun Tm_abs_735bfa0400a12573ed48312f042e45e7 (Term) Term)
(declare-fun Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd (Term Term) Term)
(declare-fun FStar.Monotonic.Pure.elim_pure (Term Term Term Term) Term)










(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_arrow_08f6df717f4cfecbf9659e86cd16d49b () Term)
(declare-fun FStar.Monotonic.Pure.elim_pure@tok () Term)












; </end encoding let elim_pure>


; End Externals for module FStar.Monotonic.Pure


; Externals for interface FStar.Sealed


; <Start encoding val FStar.Sealed.sealed>

(declare-fun FStar.Sealed.sealed (Term) Term)

(declare-fun FStar.Sealed.sealed@tok () Term)

; </end encoding val FStar.Sealed.sealed>


; <Start encoding val FStar.Sealed.sealed_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.sealed_singl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.sealed_singl@tok () Term)

; </end encoding val FStar.Sealed.sealed_singl>


; <Start encoding val FStar.Sealed.seal>

(declare-fun FStar.Sealed.seal (Term Term) Term)
(declare-fun Tm_arrow_202c0385508095b22536f7b176783182 () Term)
(declare-fun FStar.Sealed.seal@tok () Term)

; </end encoding val FStar.Sealed.seal>


; <Start encoding val FStar.Sealed.map_seal>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Sealed.map_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_8ae919a1b422d31df5f3a30011fa6e98 () Term)
(declare-fun FStar.Sealed.map_seal@tok () Term)

; </end encoding val FStar.Sealed.map_seal>


; <Start encoding val FStar.Sealed.bind_seal>

(declare-fun Tm_arrow_5dc851dfbcbc38067d4415ede8f88e9f (Term Term) Term)
(declare-fun FStar.Sealed.bind_seal (Term Term Term Term) Term)

(declare-fun Tm_arrow_4d90a5e6583ddd9ddbd451cbed0e9d01 () Term)
(declare-fun FStar.Sealed.bind_seal@tok () Term)

; </end encoding val FStar.Sealed.bind_seal>


; End Externals for interface FStar.Sealed


; Externals for interface FStar.Range


; <Start encoding val FStar.Range.__range>

(declare-fun FStar.Range.__range () Term)

; </end encoding val FStar.Range.__range>


; <Start encoding let range>

(declare-fun FStar.Range.range () Term)

; </end encoding let range>


; <Start encoding val FStar.Range.__range_0>

(declare-fun FStar.Range.__range_0 (Dummy_sort) Term)

; </end encoding val FStar.Range.__range_0>


; <Start encoding let range_0>

(declare-fun FStar.Range.range_0 (Dummy_sort) Term)

; </end encoding let range_0>


; <Start encoding val FStar.Range.__mk_range>

(declare-fun FStar.Range.__mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_692aa0ebe01353db00b5203de7da6785 () Term)
(declare-fun FStar.Range.__mk_range@tok () Term)

; </end encoding val FStar.Range.__mk_range>


; <Start encoding val FStar.Range.mk_range>

(declare-fun FStar.Range.mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2d3d853349c0a35c0e0c8d13086384ea () Term)
(declare-fun FStar.Range.mk_range@tok () Term)

; </end encoding val FStar.Range.mk_range>


; <Start encoding val FStar.Range.join_range>

(declare-fun FStar.Range.join_range (Term Term) Term)
(declare-fun Tm_arrow_6eaaa31f2d36a5c7cca7eb998962a7fa () Term)
(declare-fun FStar.Range.join_range@tok () Term)

; </end encoding val FStar.Range.join_range>


; <Start encoding let labeled>

(declare-fun FStar.Range.labeled (Term Term Term) Term)
(declare-fun Tm_arrow_ab5899212fc4c148181589be7fd78af1 () Term)
(declare-fun FStar.Range.labeled@tok () Term)

; </end encoding let labeled>


; <Start encoding val FStar.Range.explode>

(declare-fun FStar.Range.explode (Term) Term)
(declare-fun Tm_arrow_f9315f3207257087f0bf3975f13024e3 () Term)
(declare-fun FStar.Range.explode@tok () Term)

; </end encoding val FStar.Range.explode>


; End Externals for interface FStar.Range


; Externals for module FStar.Preorder


; <Start encoding let relation>

(declare-fun FStar.Preorder.relation (Term) Term)

(declare-fun FStar.Preorder.relation@tok () Term)
(declare-fun Tm_arrow_a19f9d49348d4e0038f0ded87d87802f (Term) Term)

; </end encoding let relation>


; <Start encoding let predicate>

(declare-fun FStar.Preorder.predicate (Term) Term)

(declare-fun FStar.Preorder.predicate@tok () Term)


; </end encoding let predicate>


; <Start encoding let reflexive>

(declare-fun FStar.Preorder.reflexive (Term Term) Term)
(declare-fun Tm_arrow_8e677a33afbeb812aa3779b7bdd0131c () Term)
(declare-fun FStar.Preorder.reflexive@tok () Term)

; </end encoding let reflexive>


; <Start encoding let transitive>

(declare-fun FStar.Preorder.transitive (Term Term) Term)

(declare-fun FStar.Preorder.transitive@tok () Term)

; </end encoding let transitive>


; <Start encoding let preorder_rel>

(declare-fun FStar.Preorder.preorder_rel (Term Term) Term)

(declare-fun FStar.Preorder.preorder_rel@tok () Term)

; </end encoding let preorder_rel>


; <Start encoding let preorder>

(declare-fun FStar.Preorder.preorder (Term) Term)

(declare-fun FStar.Preorder.preorder@tok () Term)
(declare-fun Tm_refine_bd10f09297e0e7dc08314f7d9211801c (Term) Term)

; </end encoding let preorder>


; <Start encoding let stable>


(declare-fun FStar.Preorder.stable (Term Term Term) Term)

(declare-fun Tm_arrow_88036d0811eee3361efd6229bae2556d () Term)
(declare-fun FStar.Preorder.stable@tok () Term)


; </end encoding let stable>


; End Externals for module FStar.Preorder


; Externals for interface FStar.Calc


; <Start encoding val FStar.Calc.calc_chain>

(declare-fun FStar.Calc.calc_chain (Term Term Term Term) Term)
(declare-fun Tm_arrow_10ae2c328e1918eb5ddde4274ac6d32a () Term)
(declare-fun FStar.Calc.calc_chain@tok () Term)

; </end encoding val FStar.Calc.calc_chain>


; <Start encoding let rec calc_chain_related>

(declare-fun FStar.Calc.calc_chain_related (Term Term Term Term) Term)

(declare-fun FStar.Calc.calc_chain_related@tok () Term)

; </end encoding let rec calc_chain_related>


; <Start encoding let calc_chain_compatible>

(declare-fun FStar.Calc.calc_chain_compatible (Term Term Term) Term)
(declare-fun Tm_arrow_5d25af94b872513cc464e94bbc6a8348 () Term)
(declare-fun FStar.Calc.calc_chain_compatible@tok () Term)

; </end encoding let calc_chain_compatible>


; <Start encoding let calc_pack>

(declare-fun FStar.Calc.calc_pack (Term Term Term Term) Term)

(declare-fun FStar.Calc.calc_pack@tok () Term)

; </end encoding let calc_pack>


; <Start encoding val FStar.Calc.calc_init>

(declare-fun FStar.Calc.calc_init (Term Term) Term)
(declare-fun Tm_arrow_f5787f683bb2167ab433229a103fa97e () Term)
(declare-fun FStar.Calc.calc_init@tok () Term)

; </end encoding val FStar.Calc.calc_init>


; <Start encoding val FStar.Calc.calc_step>

(declare-fun Tm_arrow_cfbfcb3d713af6cfef9741902fbd7eae (Term Term Term Term) Term)
(declare-fun Tm_arrow_924fe8a596e8d1052263cdb50ea0b3f9 (Term Term Term) Term)
(declare-fun FStar.Calc.calc_step (Term Term Term Term Term Term Term Term) Term)


(declare-fun Tm_arrow_c19042f2eb54c518b0ae4e8fbbb1b795 () Term)
(declare-fun FStar.Calc.calc_step@tok () Term)

; </end encoding val FStar.Calc.calc_step>


; <Start encoding val FStar.Calc.calc_finish>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Calc.calc_finish (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Calc.calc_finish@tok () Term)

; </end encoding val FStar.Calc.calc_finish>


; <Start encoding val FStar.Calc.calc_push_impl>

(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)
(declare-fun FStar.Calc.calc_push_impl (Term Term Term) Term)

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_8e288ee6e01162bc0e93f91b1d4ccf81 () Term)
(declare-fun FStar.Calc.calc_push_impl@tok () Term)


; </end encoding val FStar.Calc.calc_push_impl>


; End Externals for interface FStar.Calc


; Externals for interface FStar.Classical


; <Start encoding val FStar.Classical.give_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness@tok () Term)

; </end encoding val FStar.Classical.give_witness>


; <Start encoding val FStar.Classical.give_witness_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness_from_squash (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness_from_squash@tok () Term)

; </end encoding val FStar.Classical.give_witness_from_squash>


; <Start encoding val FStar.Classical.lemma_to_squash_gtot>


(declare-fun Tm_refine_839524df17f415c122f40f00685d3fe6 (Term Term) Term)
(declare-fun Tm_arrow_9a028cfcf6111a85dd3c28d61b4efdfd (Term Term) Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot (Term Term Term Term) Term)



(declare-fun Tm_arrow_6f9100982820dfbce0fb9c6dae0cee11 () Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_to_squash_gtot>


; <Start encoding val FStar.Classical.get_equality>

(declare-fun FStar.Classical.get_equality (Term Term Term) Term)
(declare-fun Tm_refine_7c805cbd5439f1b21f6463c70e57d0f1 (Term Term Term) Term)
(declare-fun Tm_arrow_158af926c0cd4bc1ff513e80f99f4b49 () Term)
(declare-fun FStar.Classical.get_equality@tok () Term)


; </end encoding val FStar.Classical.get_equality>


; <Start encoding val FStar.Classical.impl_to_arrow>

(declare-fun FStar.Classical.impl_to_arrow (Term Term Term Term) Term)
(declare-fun Tm_arrow_156c500bdf0e99cc45ffd26a33a603a8 () Term)
(declare-fun FStar.Classical.impl_to_arrow@tok () Term)

; </end encoding val FStar.Classical.impl_to_arrow>


; <Start encoding val FStar.Classical.arrow_to_impl>


(declare-fun FStar.Classical.arrow_to_impl (Term Term Term) Term)

(declare-fun Tm_arrow_78d787b8a2633e2185ded4267a81cc32 () Term)
(declare-fun FStar.Classical.arrow_to_impl@tok () Term)

; </end encoding val FStar.Classical.arrow_to_impl>


; <Start encoding val FStar.Classical.impl_intro_gtot>


(declare-fun FStar.Classical.impl_intro_gtot (Term Term Term) Term)

(declare-fun Tm_arrow_d2cdd2f18b92810e3048c35d07f1c9ea () Term)
(declare-fun FStar.Classical.impl_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gtot>


; <Start encoding val FStar.Classical.impl_intro_tot>


(declare-fun FStar.Classical.impl_intro_tot (Term Term Term) Term)

(declare-fun Tm_arrow_91aadb43edc4c2c0c091af8dbe745057 () Term)
(declare-fun FStar.Classical.impl_intro_tot@tok () Term)

; </end encoding val FStar.Classical.impl_intro_tot>


; <Start encoding val FStar.Classical.impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro@tok () Term)

; </end encoding val FStar.Classical.impl_intro>


; <Start encoding val FStar.Classical.move_requires>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires@tok () Term)

; </end encoding val FStar.Classical.move_requires>


; <Start encoding val FStar.Classical.move_requires_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_2@tok () Term)

; </end encoding val FStar.Classical.move_requires_2>


; <Start encoding val FStar.Classical.move_requires_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_3@tok () Term)

; </end encoding val FStar.Classical.move_requires_3>


; <Start encoding val FStar.Classical.move_requires_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_4@tok () Term)

; </end encoding val FStar.Classical.move_requires_4>


; <Start encoding val FStar.Classical.impl_intro_gen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro_gen (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro_gen@tok () Term)

; </end encoding val FStar.Classical.impl_intro_gen>


; <Start encoding val FStar.Classical.get_forall>


(declare-fun FStar.Classical.get_forall (Term Term) Term)




(declare-fun Tm_refine_7a68552470cd0b3e3b5038c890f62a82 (Term Term) Term)
(declare-fun Tm_arrow_44be7520ed79d38d96b60844cf5c3637 () Term)
(declare-fun FStar.Classical.get_forall@tok () Term)





; </end encoding val FStar.Classical.get_forall>


; <Start encoding val FStar.Classical.forall_intro_gtot>



(declare-fun FStar.Classical.forall_intro_gtot (Term Term Term) Term)


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun Tm_arrow_0d81b083331cc2ca8277c22c2c6ed09c () Term)
(declare-fun FStar.Classical.forall_intro_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_gtot>


; <Start encoding val FStar.Classical.lemma_forall_intro_gtot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot@tok () Term)

; </end encoding val FStar.Classical.lemma_forall_intro_gtot>


; <Start encoding val FStar.Classical.gtot_to_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.gtot_to_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.gtot_to_lemma@tok () Term)

; </end encoding val FStar.Classical.gtot_to_lemma>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot@tok () Term)


; </end encoding val FStar.Classical.forall_intro_squash_gtot>


; <Start encoding val FStar.Classical.forall_intro_squash_gtot_join>



(declare-fun FStar.Classical.forall_intro_squash_gtot_join (Term Term Term) Term)





(declare-fun Tm_arrow_cd9381a0f782f3a2a2b6ba363e2e0508 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot_join@tok () Term)




; </end encoding val FStar.Classical.forall_intro_squash_gtot_join>


; <Start encoding val FStar.Classical.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro@tok () Term)

; </end encoding val FStar.Classical.forall_intro>


; <Start encoding val FStar.Classical.forall_intro_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_with_pat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_with_pat>


; <Start encoding val FStar.Classical.forall_intro_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_sub@tok () Term)

; </end encoding val FStar.Classical.forall_intro_sub>


; <Start encoding val FStar.Classical.forall_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2>


; <Start encoding val FStar.Classical.forall_intro_2_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_2_with_pat>


; <Start encoding val FStar.Classical.forall_intro_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3>


; <Start encoding val FStar.Classical.forall_intro_3_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat@tok () Term)

; </end encoding val FStar.Classical.forall_intro_3_with_pat>


; <Start encoding val FStar.Classical.forall_intro_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_4@tok () Term)

; </end encoding val FStar.Classical.forall_intro_4>


; <Start encoding val FStar.Classical.forall_impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_impl_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_impl_intro@tok () Term)

; </end encoding val FStar.Classical.forall_impl_intro>


; <Start encoding val FStar.Classical.ghost_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.ghost_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.ghost_lemma@tok () Term)

; </end encoding val FStar.Classical.ghost_lemma>


; <Start encoding val FStar.Classical.exists_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro@tok () Term)

; </end encoding val FStar.Classical.exists_intro>


; <Start encoding val FStar.Classical.exists_intro_not_all_not>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not@tok () Term)

; </end encoding val FStar.Classical.exists_intro_not_all_not>


; <Start encoding val FStar.Classical.forall_to_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists>


; <Start encoding val FStar.Classical.forall_to_exists_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists_2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists_2@tok () Term)

; </end encoding val FStar.Classical.forall_to_exists_2>


; <Start encoding val FStar.Classical.exists_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_elim@tok () Term)

; </end encoding val FStar.Classical.exists_elim>


; <Start encoding val FStar.Classical.or_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.or_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.or_elim@tok () Term)

; </end encoding val FStar.Classical.or_elim>


; <Start encoding val FStar.Classical.excluded_middle>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.excluded_middle (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.excluded_middle@tok () Term)

; </end encoding val FStar.Classical.excluded_middle>


; End Externals for interface FStar.Classical


; Externals for interface FStar.Set


; <Skipped #set-options "--initial_fuel 0 --max_fuel 0 --initial_ifuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Set.set>

(declare-fun FStar.Set.set (Term) Term)

(declare-fun FStar.Set.set@tok () Term)

; </end encoding val FStar.Set.set>


; <Start encoding val FStar.Set.equal>

(declare-fun FStar.Set.equal (Term Term Term) Term)
(declare-fun Tm_arrow_3c4f6e4cf547bd34ec8e06fa6c99957f () Term)
(declare-fun FStar.Set.equal@tok () Term)

; </end encoding val FStar.Set.equal>


; <Start encoding val FStar.Set.mem>

(declare-fun FStar.Set.mem (Term Term Term) Term)
(declare-fun Tm_arrow_3622740f6f31d7fd022d9da9e7023a5e () Term)
(declare-fun FStar.Set.mem@tok () Term)

; </end encoding val FStar.Set.mem>


; <Start encoding val FStar.Set.empty>

(declare-fun FStar.Set.empty (Term) Term)
(declare-fun Tm_arrow_8126140804a823c0abf765b538511539 () Term)
(declare-fun FStar.Set.empty@tok () Term)

; </end encoding val FStar.Set.empty>


; <Start encoding val FStar.Set.singleton>

(declare-fun FStar.Set.singleton (Term Term) Term)
(declare-fun Tm_arrow_764304f899737575fb0645eff5d55885 () Term)
(declare-fun FStar.Set.singleton@tok () Term)

; </end encoding val FStar.Set.singleton>


; <Start encoding val FStar.Set.union>

(declare-fun FStar.Set.union (Term Term Term) Term)
(declare-fun Tm_arrow_7571f855c31e3c10cb35bbdc0f3ae878 () Term)
(declare-fun FStar.Set.union@tok () Term)

; </end encoding val FStar.Set.union>


; <Start encoding val FStar.Set.intersect>

(declare-fun FStar.Set.intersect (Term Term Term) Term)

(declare-fun FStar.Set.intersect@tok () Term)

; </end encoding val FStar.Set.intersect>


; <Start encoding val FStar.Set.complement>

(declare-fun FStar.Set.complement (Term Term) Term)
(declare-fun Tm_arrow_4a14af1f2d9ff62069ebb44d0d1980f6 () Term)
(declare-fun FStar.Set.complement@tok () Term)

; </end encoding val FStar.Set.complement>


; <Start encoding val FStar.Set.intension>

(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)
(declare-fun FStar.Set.intension (Term Term) Term)

(declare-fun Tm_ghost_arrow_04e42a5c0c55c36964ab6333a076e29e () Term)
(declare-fun FStar.Set.intension@tok () Term)

; </end encoding val FStar.Set.intension>


; <Start encoding let disjoint>

(declare-fun FStar.Set.disjoint (Term Term Term) Term)

(declare-fun FStar.Set.disjoint@tok () Term)

; </end encoding let disjoint>


; <Start encoding let subset>

(declare-fun FStar.Set.subset (Term Term Term) Term)
(declare-fun Tm_arrow_9a1bfd7a415bf0250a3dd161144f27fa () Term)
(declare-fun FStar.Set.subset@tok () Term)

; </end encoding let subset>


; <Start encoding let add>

(declare-fun FStar.Set.add (Term Term Term) Term)
(declare-fun Tm_arrow_3e561cbcf9b0a4b95f6e5d77760b40db () Term)
(declare-fun FStar.Set.add@tok () Term)

; </end encoding let add>


; <Start encoding let remove>

(declare-fun FStar.Set.remove (Term Term Term) Term)

(declare-fun FStar.Set.remove@tok () Term)

; </end encoding let remove>


; <Start encoding val FStar.Set.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_empty@tok () Term)

; </end encoding val FStar.Set.mem_empty>


; <Start encoding val FStar.Set.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_singleton@tok () Term)

; </end encoding val FStar.Set.mem_singleton>


; <Start encoding val FStar.Set.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_union@tok () Term)

; </end encoding val FStar.Set.mem_union>


; <Start encoding val FStar.Set.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intersect@tok () Term)

; </end encoding val FStar.Set.mem_intersect>


; <Start encoding val FStar.Set.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_complement@tok () Term)

; </end encoding val FStar.Set.mem_complement>


; <Start encoding val FStar.Set.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intension@tok () Term)

; </end encoding val FStar.Set.mem_intension>


; <Start encoding val FStar.Set.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_subset@tok () Term)

; </end encoding val FStar.Set.mem_subset>


; <Start encoding val FStar.Set.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.subset_mem@tok () Term)

; </end encoding val FStar.Set.subset_mem>


; <Start encoding val FStar.Set.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_intro@tok () Term)

; </end encoding val FStar.Set.lemma_equal_intro>


; <Start encoding val FStar.Set.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_elim@tok () Term)

; </end encoding val FStar.Set.lemma_equal_elim>


; <Start encoding val FStar.Set.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_refl@tok () Term)

; </end encoding val FStar.Set.lemma_equal_refl>


; <Start encoding val FStar.Set.disjoint_not_in_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.disjoint_not_in_both (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.disjoint_not_in_both@tok () Term)

; </end encoding val FStar.Set.disjoint_not_in_both>


; <Skipped #reset-options/>


; <Start encoding let rec as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Set.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Set.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.Set.as_set_ (Term Term) Term)
(declare-fun FStar.Set.as_set_@tok () Term)
(declare-fun Tm_arrow_37c32948884378803a50151abdb3cb09 () Term)

; </end encoding let rec as_set'>


; <Start encoding let as_set>

(declare-fun FStar.Set.as_set (Term Term) Term)

(declare-fun FStar.Set.as_set@tok () Term)

; </end encoding let as_set>


; <Start encoding let lemma_disjoint_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_disjoint_subset (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_disjoint_subset@tok () Term)

; </end encoding let lemma_disjoint_subset>


; End Externals for interface FStar.Set


; Externals for interface FStar.Map


; <Start encoding val FStar.Map.t>

(declare-fun FStar.Map.t (Term Term) Term)
(declare-fun Tm_arrow_2b8b9bde9fdc9f797e5827d0c154aeeb () Term)
(declare-fun FStar.Map.t@tok () Term)

; </end encoding val FStar.Map.t>


; <Start encoding val FStar.Map.sel>

(declare-fun FStar.Map.sel (Term Term Term Term) Term)
(declare-fun Tm_arrow_28a168f8d4c6d78564a214862be72b08 () Term)
(declare-fun FStar.Map.sel@tok () Term)

; </end encoding val FStar.Map.sel>


; <Start encoding val FStar.Map.upd>

(declare-fun FStar.Map.upd (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b19283e90b47034162373413c6a19933 () Term)
(declare-fun FStar.Map.upd@tok () Term)

; </end encoding val FStar.Map.upd>


; <Start encoding val FStar.Map.const>

(declare-fun FStar.Map.const (Term Term Term) Term)
(declare-fun Tm_arrow_867ad7c8cdd01bd87f415b1f9e0b39ac () Term)
(declare-fun FStar.Map.const@tok () Term)

; </end encoding val FStar.Map.const>


; <Start encoding val FStar.Map.domain>

(declare-fun FStar.Map.domain (Term Term Term) Term)
(declare-fun Tm_arrow_6e8371e4f424600b54c69f2eb03b48d8 () Term)
(declare-fun FStar.Map.domain@tok () Term)

; </end encoding val FStar.Map.domain>


; <Start encoding val FStar.Map.contains>

(declare-fun FStar.Map.contains (Term Term Term Term) Term)
(declare-fun Tm_arrow_32b461b2324f01c7a6bc6b577725566d () Term)
(declare-fun FStar.Map.contains@tok () Term)

; </end encoding val FStar.Map.contains>


; <Start encoding val FStar.Map.concat>

(declare-fun FStar.Map.concat (Term Term Term Term) Term)
(declare-fun Tm_arrow_b137090ab92fa6ffe958df8f30b9f54e () Term)
(declare-fun FStar.Map.concat@tok () Term)

; </end encoding val FStar.Map.concat>


; <Start encoding val FStar.Map.map_val>


(declare-fun FStar.Map.map_val (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_9123217b92d7c89a4449fe44590b9f47 () Term)
(declare-fun FStar.Map.map_val@tok () Term)

; </end encoding val FStar.Map.map_val>


; <Start encoding val FStar.Map.restrict>

(declare-fun FStar.Map.restrict (Term Term Term Term) Term)
(declare-fun Tm_arrow_e8f96ed4bf330326d457be2f8416d734 () Term)
(declare-fun FStar.Map.restrict@tok () Term)

; </end encoding val FStar.Map.restrict>


; <Start encoding let const_on>

(declare-fun FStar.Map.const_on (Term Term Term Term) Term)
(declare-fun Tm_arrow_f99b4e662f3e4a97cdb11f6ede73601e () Term)
(declare-fun FStar.Map.const_on@tok () Term)

; </end encoding let const_on>


; <Start encoding val FStar.Map.map_literal>


(declare-fun FStar.Map.map_literal (Term Term Term) Term)

(declare-fun Tm_arrow_fb1dd96195814b8107d05d25a2bbb566 () Term)
(declare-fun FStar.Map.map_literal@tok () Term)

; </end encoding val FStar.Map.map_literal>


; <Start encoding let disjoint_dom>

(declare-fun FStar.Map.disjoint_dom (Term Term Term Term) Term)
(declare-fun Tm_arrow_556fc2b76256aeb4c51415a912920e4f () Term)
(declare-fun FStar.Map.disjoint_dom@tok () Term)

; </end encoding let disjoint_dom>


; <Start encoding let has_dom>

(declare-fun FStar.Map.has_dom (Term Term Term Term) Term)
(declare-fun Tm_arrow_978eafbacd55316f8accb3c830570c46 () Term)
(declare-fun FStar.Map.has_dom@tok () Term)

; </end encoding let has_dom>


; <Start encoding val FStar.Map.lemma_SelUpd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelUpd1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelUpd1@tok () Term)

; </end encoding val FStar.Map.lemma_SelUpd1>


; <Start encoding val FStar.Map.lemma_SelUpd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelUpd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelUpd2@tok () Term)

; </end encoding val FStar.Map.lemma_SelUpd2>


; <Start encoding val FStar.Map.lemma_SelConst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConst (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConst@tok () Term)

; </end encoding val FStar.Map.lemma_SelConst>


; <Start encoding val FStar.Map.lemma_SelRestrict>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelRestrict (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelRestrict@tok () Term)

; </end encoding val FStar.Map.lemma_SelRestrict>


; <Start encoding val FStar.Map.lemma_SelConcat1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConcat1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConcat1@tok () Term)

; </end encoding val FStar.Map.lemma_SelConcat1>


; <Start encoding val FStar.Map.lemma_SelConcat2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConcat2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConcat2@tok () Term)

; </end encoding val FStar.Map.lemma_SelConcat2>


; <Start encoding val FStar.Map.lemma_SelMapVal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelMapVal (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelMapVal@tok () Term)


; </end encoding val FStar.Map.lemma_SelMapVal>


; <Start encoding val FStar.Map.lemma_InDomUpd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomUpd1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomUpd1@tok () Term)

; </end encoding val FStar.Map.lemma_InDomUpd1>


; <Start encoding val FStar.Map.lemma_InDomUpd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomUpd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomUpd2@tok () Term)

; </end encoding val FStar.Map.lemma_InDomUpd2>


; <Start encoding val FStar.Map.lemma_InDomConstMap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomConstMap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomConstMap@tok () Term)

; </end encoding val FStar.Map.lemma_InDomConstMap>


; <Start encoding val FStar.Map.lemma_InDomConcat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomConcat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomConcat@tok () Term)

; </end encoding val FStar.Map.lemma_InDomConcat>


; <Start encoding val FStar.Map.lemma_InMapVal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InMapVal (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InMapVal@tok () Term)


; </end encoding val FStar.Map.lemma_InMapVal>


; <Start encoding val FStar.Map.lemma_InDomRestrict>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomRestrict (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomRestrict@tok () Term)

; </end encoding val FStar.Map.lemma_InDomRestrict>


; <Start encoding val FStar.Map.lemma_ContainsDom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_ContainsDom (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_ContainsDom@tok () Term)

; </end encoding val FStar.Map.lemma_ContainsDom>


; <Start encoding val FStar.Map.lemma_UpdDomain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_UpdDomain (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_UpdDomain@tok () Term)

; </end encoding val FStar.Map.lemma_UpdDomain>


; <Start encoding val FStar.Map.lemma_map_literal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_map_literal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_map_literal@tok () Term)


; </end encoding val FStar.Map.lemma_map_literal>


; <Start encoding val FStar.Map.equal>

(declare-fun FStar.Map.equal (Term Term Term Term) Term)
(declare-fun Tm_arrow_8d5e09121919a406639e2201d1f5d3dd () Term)
(declare-fun FStar.Map.equal@tok () Term)

; </end encoding val FStar.Map.equal>


; <Start encoding val FStar.Map.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_intro@tok () Term)

; </end encoding val FStar.Map.lemma_equal_intro>


; <Start encoding val FStar.Map.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_elim (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_elim@tok () Term)

; </end encoding val FStar.Map.lemma_equal_elim>


; <Start encoding val FStar.Map.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_refl@tok () Term)

; </end encoding val FStar.Map.lemma_equal_refl>


; End Externals for interface FStar.Map


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>


(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>



(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>



(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>


(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)


(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>



(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)




(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)




(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)



(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot

(push) ;; push{1

; Internals for Sec2.HIFC


; encoding sigelt let loc


; <Start encoding let loc>

(declare-fun Sec2.HIFC.loc (Dummy_sort) Term)

; </end encoding let loc>


; encoding sigelt let store


; <Start encoding let store>

(declare-fun Sec2.HIFC.store () Term)
(declare-fun Tm_refine_e49ec169ea1c198e613d500cb9096326 () Term)

; </end encoding let store>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;Range_const typing
;;; Fact-ids: Name FStar.Range.range; Namespace FStar.Range
(assert (! (HasTypeZ (Range_const 1)
FStar.Range.range)
:named typing_range_const))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.store; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.store
Tm_type)
:named typing_Sec2.HIFC.store))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.loc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(4,4-4,7); use=Sec2.HIFC.fst(4,4-4,7)
(forall ((@u0 Dummy_sort))
 (! (HasType (Sec2.HIFC.loc @u0)
Prims.eqtype)
 

:pattern ((Sec2.HIFC.loc @u0))
:qid typing_Sec2.HIFC.loc))

:named typing_Sec2.HIFC.loc))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.union; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(40,4-40,9); use=FStar.Set.fsti(40,4-40,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.union @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.union @x0
@x1
@x2))
:qid typing_FStar.Set.union))

:named typing_FStar.Set.union))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.singleton; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(37,4-37,13); use=FStar.Set.fsti(37,4-37,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0))
(HasType (FStar.Set.singleton @x0
@x1)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.singleton @x0
@x1))
:qid typing_FStar.Set.singleton))

:named typing_FStar.Set.singleton))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.set; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(22,4-22,7); use=FStar.Set.fsti(22,4-22,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Set.set @x0)
Tm_type))
 

:pattern ((FStar.Set.set @x0))
:qid typing_FStar.Set.set))

:named typing_FStar.Set.set))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.mem; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(30,4-30,7); use=FStar.Set.fsti(30,4-30,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.mem @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Set.mem @x0
@x1
@x2))
:qid typing_FStar.Set.mem))

:named typing_FStar.Set.mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.equal; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(25,4-25,9); use=FStar.Set.fsti(25,4-25,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.equal @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid typing_FStar.Set.equal))

:named typing_FStar.Set.equal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))
(HasType (FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
(FStar.Map.t @x0
@x1)))
 

:pattern ((FStar.Map.upd @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Map.upd))

:named typing_FStar.Map.upd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.t; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(35,4-35,5); use=FStar.Map.fsti(35,4-35,5)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type))
(HasType (FStar.Map.t @x0
@x1)
Tm_type))
 

:pattern ((FStar.Map.t @x0
@x1))
:qid typing_FStar.Map.t))

:named typing_FStar.Map.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.domain; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(48,4-48,10); use=FStar.Map.fsti(48,4-48,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1)))
(HasType (FStar.Map.domain @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Map.domain @x0
@x1
@x2))
:qid typing_FStar.Map.domain))

:named typing_FStar.Map.domain))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.contains; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(51,4-51,12); use=FStar.Map.fsti(51,4-51,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))
(HasType (FStar.Map.contains @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((FStar.Map.contains @x0
@x1
@x2
@x3))
:qid typing_FStar.Map.contains))

:named typing_FStar.Map.contains))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.store; Namespace Sec2.HIFC
(assert (! (HasType Tm_refine_e49ec169ea1c198e613d500cb9096326
Tm_type)
:named refinement_kinding_Tm_refine_e49ec169ea1c198e613d500cb9096326))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.store; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(5,13-5,52); use=Sec2.HIFC.fst(5,13-5,52)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e49ec169ea1c198e613d500cb9096326)
(and (HasTypeFuel @u0
@x1
(FStar.Map.t (Sec2.HIFC.loc Dummy_value)
Prims.int))

;; def=Sec2.HIFC.fst(5,29-5,51); use=Sec2.HIFC.fst(5,29-5,51)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(5,39-5,51); use=Sec2.HIFC.fst(5,39-5,51)
(BoxBool_proj_0 (FStar.Map.contains (Sec2.HIFC.loc Dummy_value)
Prims.int
@x1
@x2))
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e49ec169ea1c198e613d500cb9096326))
:qid refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326))

:named refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! 
;; def=Prims.fst(528,4-528,13); use=Prims.fst(528,4-528,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_BarBar @x0
@x1)
(BoxBool (or (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_BarBar @x0
@x1))
:qid primitive_Prims.op_BarBar))

:named primitive_Prims.op_BarBar))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_union
;;; Fact-ids: Name FStar.Set.mem_union; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0))
(HasType @x3
(FStar.Set.set @x0)))

;; def=FStar.Set.fsti(72,12-72,58); use=FStar.Set.fsti(72,12-72,58)
(= (FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3))
(Prims.op_BarBar (FStar.Set.mem @x0
@x1
@x2)
(FStar.Set.mem @x0
@x1
@x3)))
)
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3)))
:qid lemma_FStar.Set.mem_union))
:named lemma_FStar.Set.mem_union))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_singleton
;;; Fact-ids: Name FStar.Set.mem_singleton; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
@x0))

;; def=FStar.Set.fsti(67,12-67,41); use=FStar.Set.fsti(67,12-67,41)
(= (FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1))
(Prims.op_Equality @x0
@x1
@x2))
)
 

:pattern ((FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1)))
:qid lemma_FStar.Set.mem_singleton))
:named lemma_FStar.Set.mem_singleton))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_refl
;;; Fact-ids: Name FStar.Set.lemma_equal_refl; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(111,14-111,24); use=FStar.Set.fsti(111,14-111,24)
(= @x1
@x2)
)

;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(Valid 
;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_refl))
:named lemma_FStar.Set.lemma_equal_refl))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_intro
;;; Fact-ids: Name FStar.Set.lemma_equal_intro; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(101,15-101,46); use=FStar.Set.fsti(101,15-101,46)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=FStar.Set.fsti(101,26-101,45); use=FStar.Set.fsti(101,26-101,45)
(= (FStar.Set.mem @x0
@x3
@x1)
(FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.lemma_equal_intro.1))
)

;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(Valid 
;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_intro))
:named lemma_FStar.Set.lemma_equal_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_elim
;;; Fact-ids: Name FStar.Set.lemma_equal_elim; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(Valid 
;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)

;; def=FStar.Set.fsti(107,14-107,24); use=FStar.Set.fsti(107,14-107,24)
(= @x1
@x2)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_elim))
:named lemma_FStar.Set.lemma_equal_elim))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_UpdDomain
;;; Fact-ids: Name FStar.Map.lemma_UpdDomain; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))

;; def=FStar.Map.fsti(153,17-153,84); use=FStar.Map.fsti(153,17-153,84)
(Valid 
;; def=FStar.Map.fsti(153,17-153,84); use=FStar.Map.fsti(153,17-153,84)
(FStar.Set.equal @x0
(FStar.Map.domain @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4))
(FStar.Set.union @x0
(FStar.Map.domain @x0
@x1
@x2)
(FStar.Set.singleton @x0
@x3)))
)
)
 

:pattern ((FStar.Map.domain @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)))
:qid lemma_FStar.Map.lemma_UpdDomain))
:named lemma_FStar.Map.lemma_UpdDomain))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_InDomUpd2
;;; Fact-ids: Name FStar.Map.lemma_InDomUpd2; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1)

;; def=FStar.Map.fsti(128,53-128,60); use=FStar.Map.fsti(128,53-128,60)
(not 
;; def=FStar.Map.fsti(128,53-128,60); use=FStar.Map.fsti(128,53-128,60)
(= @x4
@x3)
)
)

;; def=FStar.Map.fsti(128,65-128,106); use=FStar.Map.fsti(128,65-128,106)
(= (FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3)
(FStar.Map.contains @x0
@x1
@x2
@x3))
)
 

:pattern ((FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3))
:qid lemma_FStar.Map.lemma_InDomUpd2))
:named lemma_FStar.Map.lemma_InDomUpd2))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_InDomUpd1
;;; Fact-ids: Name FStar.Map.lemma_InDomUpd1; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1))

;; def=FStar.Map.fsti(124,52-124,106); use=FStar.Map.fsti(124,52-124,106)
(= (FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x5)
@x4)
(Prims.op_BarBar (Prims.op_Equality @x0
@x3
@x4)
(FStar.Map.contains @x0
@x1
@x2
@x4)))
)
 

:pattern ((FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x5)
@x4))
:qid lemma_FStar.Map.lemma_InDomUpd1))
:named lemma_FStar.Map.lemma_InDomUpd1))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_ContainsDom
;;; Fact-ids: Name FStar.Map.lemma_ContainsDom; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))

;; def=FStar.Map.fsti(148,33-148,68); use=FStar.Map.fsti(148,33-148,68)
(= (FStar.Map.contains @x0
@x1
@x2
@x3)
(FStar.Set.mem @x0
@x3
(FStar.Map.domain @x0
@x1
@x2)))
)
 

:pattern ((FStar.Map.contains @x0
@x1
@x2
@x3))

:pattern ((FStar.Set.mem @x0
@x3
(FStar.Map.domain @x0
@x1
@x2)))
:qid lemma_FStar.Map.lemma_ContainsDom))
:named lemma_FStar.Map.lemma_ContainsDom))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e49ec169ea1c198e613d500cb9096326
;;; Fact-ids: Name Sec2.HIFC.store; Namespace Sec2.HIFC
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e49ec169ea1c198e613d500cb9096326))
(Valid (Prims.hasEq (FStar.Map.t (Sec2.HIFC.loc Dummy_value)
Prims.int))))
:named haseqTm_refine_e49ec169ea1c198e613d500cb9096326))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Sec2.HIFC.store; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.store
Tm_type)
:named function_token_typing_Sec2.HIFC.store))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.store
;;; Fact-ids: Name Sec2.HIFC.store; Namespace Sec2.HIFC
(assert (! (= Sec2.HIFC.store
Tm_refine_e49ec169ea1c198e613d500cb9096326)
:named equation_Sec2.HIFC.store))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.loc
;;; Fact-ids: Name Sec2.HIFC.loc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(4,4-4,7); use=Sec2.HIFC.fst(4,4-4,7)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=Sec2.HIFC.fst(4,4-4,7); use=Sec2.HIFC.fst(4,4-4,7)
(Sec2.HIFC.loc @u0)

Prims.int)
 

:pattern (
;; def=Sec2.HIFC.fst(4,4-4,7); use=Sec2.HIFC.fst(4,4-4,7)
(Sec2.HIFC.loc @u0)
)
:qid equation_Sec2.HIFC.loc))

:named equation_Sec2.HIFC.loc))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(6,44-6,57)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (s: Sec2.HIFC.store) (l: Sec2.HIFC.loc) (x: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   forall (l: Sec2.HIFC.loc). FStar.Map.contains (FStar.Map.upd s l x) l


; Context: While encoding a query
; While typechecking the top-level declaration `let upd`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.store)
(HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType @x2
Prims.int))

;; def=Sec2.HIFC.fst(5,29-5,51); use=Sec2.HIFC.fst(6,44-6,57)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(5,39-5,51); use=Sec2.HIFC.fst(6,44-6,57)
(or label_1

;; def=Sec2.HIFC.fst(5,39-5,51); use=Sec2.HIFC.fst(6,44-6,57)
(BoxBool_proj_0 (FStar.Map.contains (Sec2.HIFC.loc Dummy_value)
Prims.int
(FStar.Map.upd (Sec2.HIFC.loc Dummy_value)
Prims.int
@x0
@x1
@x2)
@x3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.upd, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Sec2.HIFC.store, lemma_FStar.Map.lemma_InDomUpd1, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_Prims.int, typing_Sec2.HIFC.loc

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let upd


; <Start encoding let upd>

(declare-fun Sec2.HIFC.upd (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: store -> l: loc -> x: Prims.int -> store
(declare-fun Tm_arrow_98f75f3ef0535afdd3e8905d9a5a664e () Term)
(declare-fun Sec2.HIFC.upd@tok () Term)

; </end encoding let upd>


; encoding sigelt let sel


; <Start encoding let sel>

(declare-fun Sec2.HIFC.sel (Term Term) Term)
;;;;;;;;;;;;;;;;s: store -> l: loc -> Prims.int
(declare-fun Tm_arrow_836d610b4e82c141cccff2815366b0c1 () Term)
(declare-fun Sec2.HIFC.sel@tok () Term)

; </end encoding let sel>


; encoding sigelt let pre


; <Start encoding let pre>

(declare-fun Sec2.HIFC.pre () Term)
;;;;;;;;;;;;;;;;_: store -> Type
(declare-fun Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b () Term)

; </end encoding let pre>


; encoding sigelt let post


; <Start encoding let post>

(declare-fun Sec2.HIFC.post (Term) Term)

(declare-fun Sec2.HIFC.post@tok () Term)
;;;;;;;;;;;;;;;;_: store -> _: a -> _: store -> Type
(declare-fun Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c (Term) Term)

; </end encoding let post>


; encoding sigelt let hst


; <Start encoding let hst>

(declare-fun Sec2.HIFC.hst (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> p: pre -> q: post a -> Type
(declare-fun Tm_arrow_4bd1f81079a847ac840172b05629e686 () Term)
(declare-fun Sec2.HIFC.hst@tok () Term)
(declare-fun Tm_refine_013102ccaffb74d33eaab4c36743a80c (Term) Term)
(declare-fun Tm_refine_c41bcf947a2882470c6be718c9c77aa9 (Term Term Term) Term)
;;;;;;;;;;;;;;;;s0: store{p s0}   -> r: (a & store){q s0 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r)}
(declare-fun Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 (Term Term Term) Term)

; </end encoding let hst>

;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(63,4-63,7); use=FStar.Pervasives.Native.fst(63,4-63,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.snd @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.snd))

:named typing_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.fst; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(62,4-62,7); use=FStar.Pervasives.Native.fst(62,4-62,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.fst @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.Native.fst @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.fst))

:named typing_FStar.Pervasives.Native.fst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=FStar.Pervasives.Native.fst(59,33-59,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__2))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___1; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,33-59,35); use=FStar.Pervasives.Native.fst(59,33-59,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__1 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__1))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple2@tok)

;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))


;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok.1))
)
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 126
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.Native.snd
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(63,4-63,7); use=FStar.Pervasives.Native.fst(63,4-63,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.snd @x0
@x1
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid equation_FStar.Pervasives.Native.snd))

:named equation_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.Native.fst
;;; Fact-ids: Name FStar.Pervasives.Native.fst; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(62,4-62,7); use=FStar.Pervasives.Native.fst(62,4-62,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.fst @x0
@x1
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___1 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.Native.fst @x0
@x1
@x2))
:qid equation_FStar.Pervasives.Native.fst))

:named equation_FStar.Pervasives.Native.fst))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))

:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 125
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))

:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 132
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple2__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(15,85-15,97)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Type) (x: a).
;   (*  - Could not prove post-condition
; *)
;   forall (s: Sec2.HIFC.store).
;     (*  - Could not prove post-condition
; *)
;     s == FStar.Pervasives.Native.snd (x, s) /\ FStar.Pervasives.Native.fst (x, s) == x


; Context: While encoding a query
; While typechecking the top-level declaration `let return_hst`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(15,85-15,97)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(15,63-15,81); use=Sec2.HIFC.fst(15,94-15,97)
(and 
;; def=Sec2.HIFC.fst(15,63-15,71); use=Sec2.HIFC.fst(15,94-15,97)
(or label_1

;; def=Sec2.HIFC.fst(15,63-15,71); use=Sec2.HIFC.fst(15,94-15,97)
(= @x2
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x1
@x2)))
)


;; def=Sec2.HIFC.fst(15,75-15,81); use=Sec2.HIFC.fst(15,94-15,97)
(or label_2

;; def=Sec2.HIFC.fst(15,75-15,81); use=Sec2.HIFC.fst(15,94-15,97)
(= (FStar.Pervasives.Native.fst @x0
Sec2.HIFC.store
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x1
@x2))
@x1)
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.return_hst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.store, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let return_hst


; <Start encoding let return_hst>

(declare-fun Sec2.HIFC.return_hst (Term Term) Term)

(declare-fun Tm_abs_c3794d9278af0177a0cdef3355c2de9a () Term)

(declare-fun Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> x: a -> hst a (fun _ -> Prims.l_True) (fun s0 r s1 -> s0 == s1 /\ r == x)
(declare-fun Tm_arrow_e2afa449ace73bb2c0da9ccb8d4b8497 () Term)
(declare-fun Sec2.HIFC.return_hst@tok () Term)




(declare-fun Tm_refine_789d46fbe34e7761db476bc4f3ec02f7 (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: store -> r: (a & store){s == FStar.Pervasives.Native.snd r /\ FStar.Pervasives.Native.fst r == x}
(declare-fun Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4 (Term Term) Term)
(declare-fun Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a (Term Term) Term)

; </end encoding let return_hst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.pre; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.pre
Tm_type)
:named typing_Sec2.HIFC.pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.post; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,4-12,8); use=Sec2.HIFC.fst(12,4-12,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Sec2.HIFC.post @x0)
Tm_type))
 

:pattern ((Sec2.HIFC.post @x0))
:qid typing_Sec2.HIFC.post))

:named typing_Sec2.HIFC.post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,4-13,7); use=Sec2.HIFC.fst(13,4-13,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0)))
(HasType (Sec2.HIFC.hst @x0
@x1
@x2)
Tm_type))
 

:pattern ((Sec2.HIFC.hst @x0
@x1
@x2))
:qid typing_Sec2.HIFC.hst))

:named typing_Sec2.HIFC.hst))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_c41bcf947a2882470c6be718c9c77aa9))

:named refinement_kinding_Tm_refine_c41bcf947a2882470c6be718c9c77aa9))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(13,31-13,45)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_013102ccaffb74d33eaab4c36743a80c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_013102ccaffb74d33eaab4c36743a80c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_013102ccaffb74d33eaab4c36743a80c))

:named refinement_kinding_Tm_refine_013102ccaffb74d33eaab4c36743a80c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x4
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(ApplyTT (ApplyTT (ApplyTT @x2
@x3)
(FStar.Pervasives.Native.fst @x4
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x4
Sec2.HIFC.store
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9))

:named refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(13,31-13,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x2))
(and (HasTypeFuel @u0
@x1
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(13,40-13,44)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(13,40-13,44)
(ApplyTT @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x2)))
:qid refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c))

:named refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(13,31-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4))

:named kinding_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b
;;; Fact-ids: Name Sec2.HIFC.pre; Namespace Sec2.HIFC
(assert (! (HasType Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b
Tm_type)
:named kinding_Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c
;;; Fact-ids: Name Sec2.HIFC.post; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,9-12,41); use=Sec2.HIFC.fst(12,13-12,41)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x0)
Tm_type))
:qid kinding_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c))

:named kinding_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c41bcf947a2882470c6be718c9c77aa9
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x0
@x1
@x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x2
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x0
@x1
@x2))))
:qid haseqTm_refine_c41bcf947a2882470c6be718c9c77aa9))

:named haseqTm_refine_c41bcf947a2882470c6be718c9c77aa9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_013102ccaffb74d33eaab4c36743a80c
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(13,31-13,45)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_013102ccaffb74d33eaab4c36743a80c @x0)))
(Valid (Prims.hasEq Sec2.HIFC.store)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_013102ccaffb74d33eaab4c36743a80c @x0))))
:qid haseqTm_refine_013102ccaffb74d33eaab4c36743a80c))

:named haseqTm_refine_013102ccaffb74d33eaab4c36743a80c))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Sec2.HIFC.pre; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.pre
Tm_type)
:named function_token_typing_Sec2.HIFC.pre))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.pre
;;; Fact-ids: Name Sec2.HIFC.pre; Namespace Sec2.HIFC
(assert (! (= Sec2.HIFC.pre
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
:named equation_Sec2.HIFC.pre))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.post
;;; Fact-ids: Name Sec2.HIFC.post; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,4-12,8); use=Sec2.HIFC.fst(12,4-12,8)
(forall ((@x0 Term))
 (! (= (Sec2.HIFC.post @x0)
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x0))
 

:pattern ((Sec2.HIFC.post @x0))
:qid equation_Sec2.HIFC.post))

:named equation_Sec2.HIFC.post))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.hst
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,4-13,7); use=Sec2.HIFC.fst(13,4-13,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Sec2.HIFC.hst @x0
@x1
@x2)
(Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x0
@x2
@x1))
 

:pattern ((Sec2.HIFC.hst @x0
@x1
@x2))
:qid equation_Sec2.HIFC.hst))

:named equation_Sec2.HIFC.hst))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(13,31-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x2
@x3
@x4)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4))

:named Sec2.HIFC_pre_typing_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.pre; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(11,10-11,24); use=Sec2.HIFC.fst(11,10-11,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b))
:qid Sec2.HIFC_pre_typing_Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b))

:named Sec2.HIFC_pre_typing_Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.post; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,9-12,41); use=Sec2.HIFC.fst(12,13-12,41)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c))

:named Sec2.HIFC_pre_typing_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4
;;; Fact-ids: Name Sec2.HIFC.hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(13,31-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x1
@x2
@x3))
(and 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(13,31-13,84)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x3))
(HasType (ApplyTT @x0
@x4)
(Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x2
@x4
@x1)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x1
@x2
@x3)))
:qid Sec2.HIFC_interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4))

:named Sec2.HIFC_interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b
;;; Fact-ids: Name Sec2.HIFC.pre; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(11,10-11,24); use=Sec2.HIFC.fst(11,10-11,24)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
(and 
;; def=Sec2.HIFC.fst(11,10-11,24); use=Sec2.HIFC.fst(11,10-11,24)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.store)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b))
:qid Sec2.HIFC_interpretation_Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b))

:named Sec2.HIFC_interpretation_Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c
;;; Fact-ids: Name Sec2.HIFC.post; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,9-12,41); use=Sec2.HIFC.fst(12,13-12,41)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x1))
(and 
;; def=Sec2.HIFC.fst(12,9-12,41); use=Sec2.HIFC.fst(12,13-12,41)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
@x1)
(HasType @x4
Sec2.HIFC.store))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(12,9-12,41); use=Sec2.HIFC.fst(12,13-12,41)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.store)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c.2))


;; def=Sec2.HIFC.fst(12,9-12,41); use=Sec2.HIFC.fst(12,13-12,41)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
@x1))
(IsTotFun (ApplyTT (ApplyTT @x0
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c.3))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c))

:named Sec2.HIFC_interpretation_Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(22,4-22,40)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: a -> pre
(declare-fun Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,13-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0)
Tm_type))
:qid kinding_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))

:named kinding_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,13-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))

:named Sec2.HIFC_pre_typing_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,13-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x1))
(and 
;; def=Sec2.HIFC.fst(13,13-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Sec2.HIFC.pre))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))

:named Sec2.HIFC_interpretation_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))
;;;;;;;;;;;;;;;;_: a -> post b
(declare-fun Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,21-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))

:named kinding_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,21-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))

:named Sec2.HIFC_pre_typing_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,21-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(13,21-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(Sec2.HIFC.post @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))

:named Sec2.HIFC_interpretation_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))
;;;;;;;;;;;;;;;;x: a -> hst b (r x) (s x)
(declare-fun Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(16,14-19,42); use=Sec2.HIFC.fst(19,20-19,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x0
@x1
@x2
@x3)
Tm_type))
:qid kinding_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))

:named kinding_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(16,14-19,42); use=Sec2.HIFC.fst(19,20-19,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x2
@x3
@x4
@x5))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x2
@x3
@x4
@x5)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))

:named Sec2.HIFC_pre_typing_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(16,14-19,42); use=Sec2.HIFC.fst(19,20-19,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x1
@x2
@x3
@x4))
(and 
;; def=Sec2.HIFC.fst(16,14-19,42); use=Sec2.HIFC.fst(19,20-19,42)
(forall ((@x5 Term))
 (! (implies (HasType @x5
@x4)
(HasType (ApplyTT @x0
@x5)
(Sec2.HIFC.hst @x3
(ApplyTT @x2
@x5)
(ApplyTT @x1
@x5))))
 

:pattern ((ApplyTT @x0
@x5))
:qid Sec2.HIFC_interpretation_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x1
@x2
@x3
@x4)))
:qid Sec2.HIFC_interpretation_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))

:named Sec2.HIFC_interpretation_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))
(declare-fun Tm_refine_534ad67b03834e6d7680c73a9b413139 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(22,4-22,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_534ad67b03834e6d7680c73a9b413139 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_534ad67b03834e6d7680c73a9b413139 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_534ad67b03834e6d7680c73a9b413139))

:named refinement_kinding_Tm_refine_534ad67b03834e6d7680c73a9b413139))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(22,4-22,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(20,21-20,25); use=Sec2.HIFC.fst(22,4-22,40)
(Valid 
;; def=Sec2.HIFC.fst(20,21-20,25); use=Sec2.HIFC.fst(22,4-22,40)
(ApplyTT @x2
@x1)
)


;; def=Sec2.HIFC.fst(20,29-20,64); use=Sec2.HIFC.fst(22,4-22,40)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
@x3)
(HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(20,43-20,52); use=Sec2.HIFC.fst(22,4-22,40)
(Valid 
;; def=Sec2.HIFC.fst(20,43-20,52); use=Sec2.HIFC.fst(22,4-22,40)
(ApplyTT (ApplyTT (ApplyTT @x4
@x1)
@x6)
@x7)
)
)

;; def=Sec2.HIFC.fst(20,57-20,63); use=Sec2.HIFC.fst(22,4-22,40)
(Valid 
;; def=Sec2.HIFC.fst(20,57-20,63); use=Sec2.HIFC.fst(22,4-22,40)
(ApplyTT (ApplyTT @x5
@x6)
@x7)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139))

:named refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139))
;;;;;;;;;;;;;;;;haseq for Tm_refine_534ad67b03834e6d7680c73a9b413139
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(22,4-22,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_534ad67b03834e6d7680c73a9b413139 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Sec2.HIFC.store)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_534ad67b03834e6d7680c73a9b413139 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_534ad67b03834e6d7680c73a9b413139))

:named haseqTm_refine_534ad67b03834e6d7680c73a9b413139))


(declare-fun Tm_refine_bed529b209feebbe87dc860b48164a54 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_bed529b209feebbe87dc860b48164a54))

:named refinement_kinding_Tm_refine_bed529b209feebbe87dc860b48164a54))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x5
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(22,13-22,40)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(22,13-22,40)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x2
@x3)
@x4)
(FStar.Pervasives.Native.fst @x5
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x5
Sec2.HIFC.store
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_bed529b209feebbe87dc860b48164a54))

:named refinement_interpretation_Tm_refine_bed529b209feebbe87dc860b48164a54))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bed529b209feebbe87dc860b48164a54
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x3
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_bed529b209feebbe87dc860b48164a54))

:named haseqTm_refine_bed529b209feebbe87dc860b48164a54))

; Encoding query formula : forall (a: Type)
;   (b: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (r: (_: a -> Sec2.HIFC.pre))
;   (s: (_: a -> Sec2.HIFC.post b))
;   (x: Sec2.HIFC.hst a p q)
;   (y: (x: a -> Sec2.HIFC.hst b (r x) (s x))).
;   (*  - Could not prove post-condition
; *)
;   forall (s0: Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)}).
;     (*  - Could not prove post-condition
; *)
;     (p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1) ==> p s0) /\
;     (forall (any_result:
;         s0: Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)}).
;         s0 == any_result ==>
;         (forall (any_result:
;             r:
;             (a & Sec2.HIFC.store)
;               {q s0 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r)}).
;             x s0 == any_result ==>
;             (forall (b: a) (b: Sec2.HIFC.store).
;                 x s0 == (b, b) ==>
;                 Prims.auto_squash (r b b) /\
;                 (forall (any_result: Sec2.HIFC.store).
;                     b == any_result ==>
;                     (forall (any_result:
;                         r:
;                         (b & Sec2.HIFC.store)
;                           {s b b (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r)}).
;                         y b b == any_result ==>
;                         s b
;                           b
;                           (FStar.Pervasives.Native.fst (y b b))
;                           (FStar.Pervasives.Native.snd (y b b)) ==>
;                         (exists (x: a) (s1: Sec2.HIFC.store).
;                             q s0 x s1 /\
;                             s x
;                               s1
;                               (FStar.Pervasives.Native.fst (y b b))
;                               (FStar.Pervasives.Native.snd (y b b))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let bind_hst`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Sec2.HIFC.pre)
(HasType @x3
(Sec2.HIFC.post @x0))
(HasType @x4
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0))
(HasType @x5
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x0))
(HasType @x6
(Sec2.HIFC.hst @x0
@x2
@x3))
(HasType @x7
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x5
@x4
@x1
@x0)))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(22,4-22,40)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x2
@x0
@x3
@x4))

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(22,13-22,40)
(and (implies 
;; def=Sec2.HIFC.fst(20,21-20,64); use=Sec2.HIFC.fst(22,28-22,30)
(and 
;; def=Sec2.HIFC.fst(20,21-20,25); use=Sec2.HIFC.fst(22,28-22,30)
(Valid 
;; def=Sec2.HIFC.fst(20,21-20,25); use=Sec2.HIFC.fst(22,28-22,30)
(ApplyTT @x2
@x8)
)


;; def=Sec2.HIFC.fst(20,29-20,64); use=Sec2.HIFC.fst(22,28-22,30)
(forall ((@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x9
@x0)
(HasType @x10
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(20,43-20,52); use=Sec2.HIFC.fst(22,28-22,30)
(Valid 
;; def=Sec2.HIFC.fst(20,43-20,52); use=Sec2.HIFC.fst(22,28-22,30)
(ApplyTT (ApplyTT (ApplyTT @x3
@x8)
@x9)
@x10)
)
)

;; def=Sec2.HIFC.fst(20,57-20,63); use=Sec2.HIFC.fst(22,28-22,30)
(Valid 
;; def=Sec2.HIFC.fst(20,57-20,63); use=Sec2.HIFC.fst(22,28-22,30)
(ApplyTT (ApplyTT @x4
@x9)
@x10)
)
)
 
;;no pats
:qid @query.2))
)


;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(22,28-22,30)
(or label_1

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(22,28-22,30)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(22,28-22,30)
(ApplyTT @x2
@x8)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x2
@x0
@x3
@x4))

;; def=Sec2.HIFC.fst(13,31-22,10); use=Sec2.HIFC.fst(22,13-22,40)
(= @x8
@x9)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x3
@x8
@x0))

;; def=Sec2.HIFC.fst(22,18-22,30); use=Sec2.HIFC.fst(22,18-22,30)
(= (ApplyTT @x6
@x8)
@x10)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x11 Term))
 (! (implies (HasType @x11
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(22,18-22,23); use=Sec2.HIFC.fst(22,18-22,23)
(= (ApplyTT @x6
@x8)
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x11
@x12))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(22,13-22,40)
(and 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(22,38-22,40)
(or label_2

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(22,38-22,40)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(22,38-22,40)
(ApplyTT (ApplyTT @x4
@x11)
@x12)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-22,23); use=Sec2.HIFC.fst(22,13-22,40)
(= @x12
@x13)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x5
@x11
@x12
@x1))

;; def=Sec2.HIFC.fst(13,49-22,40); use=Sec2.HIFC.fst(22,13-22,40)
(= (ApplyTT (ApplyTT @x7
@x11)
@x12)
@x14)


;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(22,34-22,40)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(22,34-22,40)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x5
@x11)
@x12)
(FStar.Pervasives.Native.fst @x1
Sec2.HIFC.store
(ApplyTT (ApplyTT @x7
@x11)
@x12)))
(FStar.Pervasives.Native.snd @x1
Sec2.HIFC.store
(ApplyTT (ApplyTT @x7
@x11)
@x12)))
)
)

;; def=Sec2.HIFC.fst(21,27-21,66); use=Sec2.HIFC.fst(22,34-22,40)
(or label_3

;; def=Sec2.HIFC.fst(21,27-21,66); use=Sec2.HIFC.fst(22,34-22,40)
(exists ((@x15 Term) (@x16 Term))
 (! (and (HasType @x15
@x0)
(HasType @x16
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(21,41-21,50); use=Sec2.HIFC.fst(22,34-22,40)
(Valid 
;; def=Sec2.HIFC.fst(21,41-21,50); use=Sec2.HIFC.fst(22,34-22,40)
(ApplyTT (ApplyTT (ApplyTT @x3
@x8)
@x15)
@x16)
)


;; def=Sec2.HIFC.fst(21,54-21,65); use=Sec2.HIFC.fst(22,34-22,40)
(Valid 
;; def=Sec2.HIFC.fst(21,54-21,65); use=Sec2.HIFC.fst(22,34-22,40)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x5
@x15)
@x16)
(FStar.Pervasives.Native.fst @x1
Sec2.HIFC.store
(ApplyTT (ApplyTT @x7
@x11)
@x12)))
(FStar.Pervasives.Native.snd @x1
Sec2.HIFC.store
(ApplyTT (ApplyTT @x7
@x11)
@x12)))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.bind_hst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.store, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_kinding_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bind_hst


; <Start encoding let bind_hst>

;;;;;;;;;;;;;;;;_: a -> pre
(declare-fun Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 (Term) Term)
;;;;;;;;;;;;;;;;_: a -> post b
(declare-fun Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> hst b (r x) (s x)
(declare-fun Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 (Term Term Term Term) Term)
(declare-fun Sec2.HIFC.bind_hst (Term Term Term Term Term Term Term Term) Term)




(declare-fun Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b (Term Term Term Term) Term)

(declare-fun Tm_abs_02262a2f53f3a738a5fa3961fef4840f (Term Term Term Term) Term)

(declare-fun Tm_abs_63bcd83c24112861c302253aadf3ccd3 (Term Term Term Term) Term)

(declare-fun Tm_abs_718684db1781645ba7e18c0aacd5527a (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type ->     b: Type ->     p: pre ->     q: post a ->     r: (_: a -> pre) ->     s: (_: a -> post b) ->     x: hst a p q ->     y: (x: a -> hst b (r x) (s x))   -> hst b       (fun s0 -> p s0 /\ (forall (x: a) (s1: store). q s0 x s1 ==> r x s1))       (fun s0 r s2 -> exists (x: a) (s1: store). q s0 x s1 /\ s x s1 r s2)
(declare-fun Tm_arrow_c6424014dcf46c8bac445a48108a09dd () Term)
(declare-fun Sec2.HIFC.bind_hst@tok () Term)

















(declare-fun Tm_refine_534ad67b03834e6d7680c73a9b413139 (Term Term Term Term) Term)


(declare-fun Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_21a174c0846a666b1f58e639082c203a (Term Term Term Term Term Term) Term)




(declare-fun Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s0: store{p s0 /\ (forall (x: a) (s1: store). q s0 x s1 ==> r x s1)}   -> r:     (b & store)       { exists (x: a) (s1: store).           q s0 x s1 /\ s x s1 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) }
(declare-fun Tm_arrow_d1e880122501acf620a95003107f650d (Term Term Term Term Term Term) Term)
(declare-fun Tm_abs_efbf51204e50a9385498d1fafe717722 (Term Term Term Term Term Term Term Term) Term)

; </end encoding let bind_hst>

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(28,4-28,5)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;_: store -> Prims.logical
(declare-fun Tm_arrow_55cebe27886a2171323030e813be5a0e () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_55cebe27886a2171323030e813be5a0e
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_55cebe27886a2171323030e813be5a0e
Tm_type)
:named kinding_Tm_arrow_55cebe27886a2171323030e813be5a0e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(11,10-11,15); use=Sec2.HIFC.fst(25,33-25,39)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_55cebe27886a2171323030e813be5a0e))
:qid Sec2.HIFC_pre_typing_Tm_arrow_55cebe27886a2171323030e813be5a0e))

:named Sec2.HIFC_pre_typing_Tm_arrow_55cebe27886a2171323030e813be5a0e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_55cebe27886a2171323030e813be5a0e
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(11,10-11,15); use=Sec2.HIFC.fst(25,33-25,39)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(and 
;; def=Sec2.HIFC.fst(11,10-11,15); use=Sec2.HIFC.fst(25,33-25,39)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.store)
(HasType (ApplyTT @x0
@x1)
Prims.logical))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_55cebe27886a2171323030e813be5a0e.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_55cebe27886a2171323030e813be5a0e))
:qid Sec2.HIFC_interpretation_Tm_arrow_55cebe27886a2171323030e813be5a0e))

:named Sec2.HIFC_interpretation_Tm_arrow_55cebe27886a2171323030e813be5a0e))
;;;;;;;;;;;;;;;;_: store -> _: a -> _: store -> Prims.logical
(declare-fun Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0)
Tm_type))
:qid kinding_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))

:named kinding_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))

:named Sec2.HIFC_pre_typing_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x1))
(and 
;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
@x1)
(HasType @x4
Sec2.HIFC.store))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
Prims.logical))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.store)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953.2))


;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
@x1))
(IsTotFun (ApplyTT (ApplyTT @x0
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953.3))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))

:named Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))


; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (r: (_: Sec2.HIFC.store -> Prims.logical))
;   (s: (_: Sec2.HIFC.store -> _: a -> _: Sec2.HIFC.store -> Prims.logical))
;   (x: Sec2.HIFC.hst a p q).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (Sec2.HIFC.hst a r s)).
;     (forall (st: Sec2.HIFC.store). r st ==> p st) /\
;     (forall (st0: Sec2.HIFC.store) (res: a) (st1: Sec2.HIFC.store). q st0 res st1 ==> s st0 res st1) /\
;     (forall (pure_result: Sec2.HIFC.hst a r s). Prims.auto_squash (p pure_result)) ==>
;     (forall (s0: Sec2.HIFC.store). r s0 ==> p s0) /\
;     (forall (s0: Sec2.HIFC.store{p s0}) (r: a & Sec2.HIFC.store).
;         q s0 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) ==>
;         s s0 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r)) /\
;     (forall (any_result: Sec2.HIFC.hst a p q).
;         any_result == x ==>
;         (forall (return_val: Sec2.HIFC.hst a r s). return_val == any_result ==> p return_val))


; Context: While encoding a query
; While typechecking the top-level declaration `let subcomp_hst`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(HasType @x4
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0))
(HasType @x5
(Sec2.HIFC.hst @x0
@x1
@x2)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post (Sec2.HIFC.hst @x0
@x3
@x4)))

;; def=Sec2.HIFC.fst(25,19-25,45); use=Sec2.HIFC.fst(28,4-28,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(25,31-25,35); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Sec2.HIFC.fst(25,31-25,35); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT @x3
@x7)
)
)

;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT @x1
@x7)
)
)
 
;;no pats
:qid @query.2))


;; def=Sec2.HIFC.fst(26,19-26,72); use=Sec2.HIFC.fst(28,4-28,5)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
Sec2.HIFC.store)
(HasType @x8
@x0)
(HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT (ApplyTT (ApplyTT @x2
@x7)
@x8)
@x9)
)
)

;; def=Sec2.HIFC.fst(26,58-26,71); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Sec2.HIFC.fst(26,58-26,71); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT (ApplyTT (ApplyTT @x4
@x7)
@x8)
@x9)
)
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(28,4-28,5)
(forall ((@x7 Term))
 (! (implies (or label_1
(HasType @x7
(Sec2.HIFC.hst @x0
@x3
@x4)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT @x6
@x7)
)
)
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(28,4-28,5)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(28,4-28,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT @x3
@x7)
)
)

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(28,4-28,5)
(or label_2

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT @x1
@x7)
)
)
)
 
;;no pats
:qid @query.5))


;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(28,4-28,5)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))
(HasType @x8
(FStar.Pervasives.Native.tuple2 @x0
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT (ApplyTT (ApplyTT @x2
@x7)
(FStar.Pervasives.Native.fst @x0
Sec2.HIFC.store
@x8))
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
@x8))
)
)

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(28,4-28,5)
(or label_3

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(28,4-28,5)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(28,4-28,5)
(ApplyTT (ApplyTT (ApplyTT @x4
@x7)
(FStar.Pervasives.Native.fst @x0
Sec2.HIFC.store
@x8))
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
@x8))
)
)
)
 
;;no pats
:qid @query.6))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(28,4-28,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Sec2.HIFC.hst @x0
@x1
@x2))

;; def=Sec2.HIFC.fst(23,34-24,20); use=Sec2.HIFC.fst(28,4-28,5)
(= @x7
@x5)
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Sec2.HIFC.hst @x0
@x3
@x4))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x8
@x7)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.subcomp_hst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Sec2.HIFC.store, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_kinding_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let subcomp_hst


; <Start encoding let subcomp_hst>

;;;;;;;;;;;;;;;;_: store -> Prims.logical
(declare-fun Tm_arrow_55cebe27886a2171323030e813be5a0e () Term)
;;;;;;;;;;;;;;;;_: store -> _: a -> _: store -> Prims.logical
(declare-fun Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 (Term) Term)
(declare-fun Sec2.HIFC.subcomp_hst (Term Term Term Term Term Term) Term)


(declare-fun Tm_refine_2de144b248e44491dd25cf268cee4763 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type ->     p: pre ->     q: post a ->     r: (_: store -> Prims.logical) ->     s: (_: store -> _: a -> _: store -> Prims.logical) ->     x: hst a p q   -> Prims.Pure (hst a r s)
(declare-fun Tm_arrow_7731c5056be3e219d3080135036aca45 () Term)
(declare-fun Sec2.HIFC.subcomp_hst@tok () Term)




; </end encoding let subcomp_hst>


; encoding sigelt let if_then_else_hst


; <Start encoding let if_then_else_hst>

(declare-fun Sec2.HIFC.if_then_else_hst (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type ->     p: pre ->     q: post a ->     r: pre ->     s: post a ->     x: hst a p q ->     y: hst a r s ->     b: Prims.bool   -> Type
(declare-fun Tm_arrow_a82b9813bda37afd88656da627556555 () Term)
(declare-fun Sec2.HIFC.if_then_else_hst@tok () Term)

(declare-fun Tm_abs_04e30c12e764f14211133a3e9ffbcbfd (Term Term Term) Term)

(declare-fun Tm_abs_7cef9e8eea8c93bd0a7f0142f56a0131 (Term Term Term Term) Term)

; </end encoding let if_then_else_hst>

;;;;;;;;;;;;;;;;kinding_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0)
Tm_type))
:qid kinding_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))

:named kinding_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_55cebe27886a2171323030e813be5a0e
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! (HasType Tm_arrow_55cebe27886a2171323030e813be5a0e
Tm_type)
:named kinding_Tm_arrow_55cebe27886a2171323030e813be5a0e))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))

:named Sec2.HIFC_pre_typing_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(11,10-11,15); use=Sec2.HIFC.fst(25,33-25,39)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_55cebe27886a2171323030e813be5a0e))
:qid Sec2.HIFC_pre_typing_Tm_arrow_55cebe27886a2171323030e813be5a0e))

:named Sec2.HIFC_pre_typing_Tm_arrow_55cebe27886a2171323030e813be5a0e))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x1))
(and 
;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
@x1)
(HasType @x4
Sec2.HIFC.store))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4)
Prims.logical))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x2)
@x3)
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.store)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953.2))


;; def=Sec2.HIFC.fst(12,13-23,18); use=Sec2.HIFC.fst(23,40-26,71)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
@x1))
(IsTotFun (ApplyTT (ApplyTT @x0
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953.3))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))

:named Sec2.HIFC_interpretation_Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_55cebe27886a2171323030e813be5a0e
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(11,10-11,15); use=Sec2.HIFC.fst(25,33-25,39)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(and 
;; def=Sec2.HIFC.fst(11,10-11,15); use=Sec2.HIFC.fst(25,33-25,39)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.store)
(HasType (ApplyTT @x0
@x1)
Prims.logical))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_55cebe27886a2171323030e813be5a0e.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_55cebe27886a2171323030e813be5a0e))
:qid Sec2.HIFC_interpretation_Tm_arrow_55cebe27886a2171323030e813be5a0e))

:named Sec2.HIFC_interpretation_Tm_arrow_55cebe27886a2171323030e813be5a0e))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (r: (_: Sec2.HIFC.store -> Prims.logical))
;   (s: (_: Sec2.HIFC.store -> _: a -> _: Sec2.HIFC.store -> Prims.logical))
;   (p: Prims.pure_post (Sec2.HIFC.hst a r s))
;   (q: Prims.pure_post (Sec2.HIFC.hst a r s)).
;   (forall (x: Sec2.HIFC.hst a r s). p x ==> q x) ==>
;   (forall (st: Sec2.HIFC.store). r st ==> p st) /\
;   (forall (st0: Sec2.HIFC.store) (res: a) (st1: Sec2.HIFC.store). q st0 res st1 ==> s st0 res st1) /\
;   (forall (pure_result: Sec2.HIFC.hst a r s). Prims.auto_squash (p pure_result)) ==>
;   (forall (st: Sec2.HIFC.store). r st ==> p st) /\
;   (forall (st0: Sec2.HIFC.store) (res: a) (st1: Sec2.HIFC.store). q st0 res st1 ==> s st0 res st1) /\
;   (forall (pure_result: Sec2.HIFC.hst a r s). Prims.auto_squash (q pure_result))


; Context: While encoding a query
; While checking the subcomp combinator
; While checking layered effect definition `Sec2.HIFC.HST`
; While typechecking the top-level declaration `layered_effect { HST ... }`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(HasType @x4
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0))
(HasType @x5
(Prims.pure_post (Sec2.HIFC.hst @x0
@x3
@x4)))
(HasType @x6
(Prims.pure_post (Sec2.HIFC.hst @x0
@x3
@x4)))

;; def=Prims.fst(334,28-334,55); use=Prims.fst(334,28-334,55)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Sec2.HIFC.hst @x0
@x3
@x4))

;; def=Prims.fst(334,43-334,46); use=Prims.fst(334,43-334,46)
(Valid 
;; def=Prims.fst(334,43-334,46); use=Prims.fst(334,43-334,46)
(ApplyTT @x5
@x7)
)
)

;; def=Prims.fst(334,51-334,54); use=Prims.fst(334,51-334,54)
(Valid 
;; def=Prims.fst(334,51-334,54); use=Prims.fst(334,51-334,54)
(ApplyTT @x6
@x7)
)
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(25,19-25,45); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(25,31-25,35); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(25,31-25,35); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT @x3
@x7)
)
)

;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT @x1
@x7)
)
)
 
;;no pats
:qid @query.2))


;; def=Sec2.HIFC.fst(26,19-26,72); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
Sec2.HIFC.store)
(HasType @x8
@x0)
(HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT (ApplyTT (ApplyTT @x2
@x7)
@x8)
@x9)
)
)

;; def=Sec2.HIFC.fst(26,58-26,71); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(26,58-26,71); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT (ApplyTT (ApplyTT @x4
@x7)
@x8)
@x9)
)
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Sec2.HIFC.hst @x0
@x3
@x4))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT @x5
@x7)
)
)
 
;;no pats
:qid @query.4))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(39,14-39,25)
(and 
;; def=Sec2.HIFC.fst(25,19-25,45); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(25,31-25,35); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(25,31-25,35); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT @x3
@x7)
)
)

;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(or label_1

;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT @x1
@x7)
)
)
)
 
;;no pats
:qid @query.5))


;; def=Sec2.HIFC.fst(26,19-26,72); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
Sec2.HIFC.store)
(HasType @x8
@x0)
(HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT (ApplyTT (ApplyTT @x2
@x7)
@x8)
@x9)
)
)

;; def=Sec2.HIFC.fst(26,58-26,71); use=Sec2.HIFC.fst(39,14-39,25)
(or label_2

;; def=Sec2.HIFC.fst(26,58-26,71); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(26,58-26,71); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT (ApplyTT (ApplyTT @x4
@x7)
@x8)
@x9)
)
)
)
 
;;no pats
:qid @query.6))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Sec2.HIFC.hst @x0
@x3
@x4))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(39,14-39,25)
(or label_3

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT @x6
@x7)
)
)
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.HST, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (r: Sec2.HIFC.pre)
;   (s: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hst a p q)
;   (g: Sec2.HIFC.hst a r s)
;   (p: Prims.bool)
;   (_: Prims.squash p).
;   (forall (st: Sec2.HIFC.store). (p ==> p st) /\ (~p ==> r st) ==> p st) /\
;   (forall (st0: Sec2.HIFC.store) (res: a) (st1: Sec2.HIFC.store).
;       q st0 res st1 ==> (p ==> q st0 res st1) /\ (~p ==> s st0 res st1))


; Context: While encoding a query
; While checking if-then-else soundness
; While checking layered effect definition `Sec2.HIFC.HST`
; While typechecking the top-level declaration `layered_effect { HST ... }`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
Sec2.HIFC.pre)
(HasType @x4
(Sec2.HIFC.post @x0))
(HasType @x5
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x6
(Sec2.HIFC.hst @x0
@x3
@x4))
(HasType @x7
Prims.bool)
(HasType @x8
(Prims.squash (Prims.b2t @x7))))

;; def=Sec2.HIFC.fst(25,19-26,72); use=Sec2.HIFC.fst(39,14-39,25)
(and 
;; def=Sec2.HIFC.fst(25,19-25,45); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(30,19-30,31); use=Sec2.HIFC.fst(40,19-40,35)
(implies 
;; def=Sec2.HIFC.fst(29,67-29,68); use=Sec2.HIFC.fst(40,19-40,35)
(BoxBool_proj_0 @x7)


;; def=Sec2.HIFC.fst(30,26-30,30); use=Sec2.HIFC.fst(40,19-40,35)
(Valid 
;; def=Sec2.HIFC.fst(30,26-30,30); use=Sec2.HIFC.fst(40,19-40,35)
(ApplyTT @x1
@x9)
)
)


;; def=Sec2.HIFC.fst(30,35-30,51); use=Sec2.HIFC.fst(40,19-40,35)
(implies 
;; def=Sec2.HIFC.fst(30,36-30,41); use=Sec2.HIFC.fst(40,19-40,35)
(not 
;; def=Sec2.HIFC.fst(29,67-29,68); use=Sec2.HIFC.fst(40,19-40,35)
(BoxBool_proj_0 @x7)
)


;; def=Sec2.HIFC.fst(30,46-30,50); use=Sec2.HIFC.fst(40,19-40,35)
(Valid 
;; def=Sec2.HIFC.fst(30,46-30,50); use=Sec2.HIFC.fst(40,19-40,35)
(ApplyTT @x3
@x9)
)
)
)

;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(or label_1

;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT @x1
@x9)
)
)
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(26,19-26,72); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x9
Sec2.HIFC.store)
(HasType @x10
@x0)
(HasType @x11
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT (ApplyTT (ApplyTT @x2
@x9)
@x10)
@x11)
)
)

;; def=Sec2.HIFC.fst(31,28-31,78); use=Sec2.HIFC.fst(40,19-40,35)
(and (implies 
;; def=Sec2.HIFC.fst(29,67-29,68); use=Sec2.HIFC.fst(40,19-40,35)
(BoxBool_proj_0 @x7)


;; def=Sec2.HIFC.fst(31,35-31,48); use=Sec2.HIFC.fst(40,19-40,35)
(or label_2

;; def=Sec2.HIFC.fst(31,35-31,48); use=Sec2.HIFC.fst(40,19-40,35)
(Valid 
;; def=Sec2.HIFC.fst(31,35-31,48); use=Sec2.HIFC.fst(40,19-40,35)
(ApplyTT (ApplyTT (ApplyTT @x2
@x9)
@x10)
@x11)
)
)
)
(implies 
;; def=Sec2.HIFC.fst(31,54-31,59); use=Sec2.HIFC.fst(40,19-40,35)
(not 
;; def=Sec2.HIFC.fst(29,67-29,68); use=Sec2.HIFC.fst(40,19-40,35)
(BoxBool_proj_0 @x7)
)


;; def=Sec2.HIFC.fst(31,64-31,77); use=Sec2.HIFC.fst(40,19-40,35)
(or label_3

;; def=Sec2.HIFC.fst(31,64-31,77); use=Sec2.HIFC.fst(40,19-40,35)
(Valid 
;; def=Sec2.HIFC.fst(31,64-31,77); use=Sec2.HIFC.fst(40,19-40,35)
(ApplyTT (ApplyTT (ApplyTT @x4
@x9)
@x10)
@x11)
)
)
))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.HST, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, b2t_def, equation_Prims.squash, refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_de09779676242898794a0b057d5f5bb4 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(40,19-40,35); use=Sec2.HIFC.fst(40,19-40,35)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_de09779676242898794a0b057d5f5bb4 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_de09779676242898794a0b057d5f5bb4 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_de09779676242898794a0b057d5f5bb4))

:named refinement_kinding_Tm_refine_de09779676242898794a0b057d5f5bb4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(40,19-40,35); use=Sec2.HIFC.fst(40,19-40,35)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_de09779676242898794a0b057d5f5bb4 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Sec2.HIFC.fst(40,19-40,35); use=Sec2.HIFC.fst(40,19-40,35)
(not (BoxBool_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_de09779676242898794a0b057d5f5bb4 @x2)))
:qid refinement_interpretation_Tm_refine_de09779676242898794a0b057d5f5bb4))

:named refinement_interpretation_Tm_refine_de09779676242898794a0b057d5f5bb4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_de09779676242898794a0b057d5f5bb4
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(40,19-40,35); use=Sec2.HIFC.fst(40,19-40,35)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_de09779676242898794a0b057d5f5bb4 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_de09779676242898794a0b057d5f5bb4 @x0))))
:qid haseqTm_refine_de09779676242898794a0b057d5f5bb4))

:named haseqTm_refine_de09779676242898794a0b057d5f5bb4))

; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (r: Sec2.HIFC.pre)
;   (s: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hst a p q)
;   (g: Sec2.HIFC.hst a r s)
;   (p: Prims.bool)
;   (_: _: Prims.unit{~p}).
;   (forall (st: Sec2.HIFC.store). (p ==> p st) /\ (~p ==> r st) ==> r st) /\
;   (forall (st0: Sec2.HIFC.store) (res: a) (st1: Sec2.HIFC.store).
;       s st0 res st1 ==> (p ==> q st0 res st1) /\ (~p ==> s st0 res st1))


; Context: While encoding a query
; While checking if-then-else soundness
; While checking layered effect definition `Sec2.HIFC.HST`
; While typechecking the top-level declaration `layered_effect { HST ... }`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
Sec2.HIFC.pre)
(HasType @x4
(Sec2.HIFC.post @x0))
(HasType @x5
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x6
(Sec2.HIFC.hst @x0
@x3
@x4))
(HasType @x7
Prims.bool)
(HasType @x8
(Tm_refine_de09779676242898794a0b057d5f5bb4 @x7)))

;; def=Sec2.HIFC.fst(25,19-26,72); use=Sec2.HIFC.fst(39,14-39,25)
(and 
;; def=Sec2.HIFC.fst(25,19-25,45); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(30,19-30,31); use=Sec2.HIFC.fst(40,19-40,35)
(implies 
;; def=Sec2.HIFC.fst(29,67-29,68); use=Sec2.HIFC.fst(40,19-40,35)
(BoxBool_proj_0 @x7)


;; def=Sec2.HIFC.fst(30,26-30,30); use=Sec2.HIFC.fst(40,19-40,35)
(Valid 
;; def=Sec2.HIFC.fst(30,26-30,30); use=Sec2.HIFC.fst(40,19-40,35)
(ApplyTT @x1
@x9)
)
)


;; def=Sec2.HIFC.fst(30,35-30,51); use=Sec2.HIFC.fst(40,19-40,35)
(implies 
;; def=Sec2.HIFC.fst(30,36-30,41); use=Sec2.HIFC.fst(40,19-40,35)
(not 
;; def=Sec2.HIFC.fst(29,67-29,68); use=Sec2.HIFC.fst(40,19-40,35)
(BoxBool_proj_0 @x7)
)


;; def=Sec2.HIFC.fst(30,46-30,50); use=Sec2.HIFC.fst(40,19-40,35)
(Valid 
;; def=Sec2.HIFC.fst(30,46-30,50); use=Sec2.HIFC.fst(40,19-40,35)
(ApplyTT @x3
@x9)
)
)
)

;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(or label_1

;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(25,40-25,44); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT @x3
@x9)
)
)
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(26,19-26,72); use=Sec2.HIFC.fst(39,14-39,25)
(forall ((@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x9
Sec2.HIFC.store)
(HasType @x10
@x0)
(HasType @x11
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(39,14-39,25)
(Valid 
;; def=Sec2.HIFC.fst(26,40-26,53); use=Sec2.HIFC.fst(39,14-39,25)
(ApplyTT (ApplyTT (ApplyTT @x4
@x9)
@x10)
@x11)
)
)

;; def=Sec2.HIFC.fst(31,28-31,78); use=Sec2.HIFC.fst(40,19-40,35)
(and (implies 
;; def=Sec2.HIFC.fst(29,67-29,68); use=Sec2.HIFC.fst(40,19-40,35)
(BoxBool_proj_0 @x7)


;; def=Sec2.HIFC.fst(31,35-31,48); use=Sec2.HIFC.fst(40,19-40,35)
(or label_2

;; def=Sec2.HIFC.fst(31,35-31,48); use=Sec2.HIFC.fst(40,19-40,35)
(Valid 
;; def=Sec2.HIFC.fst(31,35-31,48); use=Sec2.HIFC.fst(40,19-40,35)
(ApplyTT (ApplyTT (ApplyTT @x2
@x9)
@x10)
@x11)
)
)
)
(implies 
;; def=Sec2.HIFC.fst(31,54-31,59); use=Sec2.HIFC.fst(40,19-40,35)
(not 
;; def=Sec2.HIFC.fst(29,67-29,68); use=Sec2.HIFC.fst(40,19-40,35)
(BoxBool_proj_0 @x7)
)


;; def=Sec2.HIFC.fst(31,64-31,77); use=Sec2.HIFC.fst(40,19-40,35)
(or label_3

;; def=Sec2.HIFC.fst(31,64-31,77); use=Sec2.HIFC.fst(40,19-40,35)
(Valid 
;; def=Sec2.HIFC.fst(31,64-31,77); use=Sec2.HIFC.fst(40,19-40,35)
(ApplyTT (ApplyTT (ApplyTT @x4
@x9)
@x10)
@x11)
)
)
))
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.HST, 3)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_de09779676242898794a0b057d5f5bb4

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt layered_effect { HST ... }


; <Skipped layered_effect { HST ... }/>


; encoding sigelt let label


; <Start encoding let label>

(declare-fun Sec2.HIFC.label () Term)

; </end encoding let label>


; encoding sigelt let label_inclusion


; <Start encoding let label_inclusion>

(declare-fun Sec2.HIFC.label_inclusion (Term Term) Term)
;;;;;;;;;;;;;;;;l0: label -> l1: label -> Prims.logical
(declare-fun Tm_arrow_fe7384f7aa7a998645414495173d329b () Term)
(declare-fun Sec2.HIFC.label_inclusion@tok () Term)

; </end encoding let label_inclusion>


; encoding sigelt let bot


; <Start encoding let bot>

(declare-fun Sec2.HIFC.bot (Dummy_sort) Term)

; </end encoding let bot>


; encoding sigelt let single


; <Start encoding let single>

(declare-fun Sec2.HIFC.single (Term) Term)
;;;;;;;;;;;;;;;;l: loc -> label
(declare-fun Tm_arrow_5603d368ecb8a2e696e8be4260cb7dab () Term)
(declare-fun Sec2.HIFC.single@tok () Term)

; </end encoding let single>


; encoding sigelt let union


; <Start encoding let union>

(declare-fun Sec2.HIFC.union (Term Term) Term)
;;;;;;;;;;;;;;;;l0: label -> l1: label -> FStar.Set.set loc
(declare-fun Tm_arrow_1fdcfc5e1b2575a27850ab80ddbd1fbc () Term)
(declare-fun Sec2.HIFC.union@tok () Term)

; </end encoding let union>


; encoding sigelt let is_empty


; <Start encoding let is_empty>

(declare-fun Sec2.HIFC.is_empty (Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Set.set a -> Prims.logical
(declare-fun Tm_arrow_65767578783e9643ad37def7f2cebc5c () Term)
(declare-fun Sec2.HIFC.is_empty@tok () Term)

; </end encoding let is_empty>


; encoding sigelt let modifies


; <Start encoding let modifies>

(declare-fun Sec2.HIFC.modifies (Term Term Term) Term)
;;;;;;;;;;;;;;;;w: label -> s0: store -> s1: store -> Prims.logical
(declare-fun Tm_arrow_ba95c8a1414e48e1889d9668276f3c98 () Term)
(declare-fun Sec2.HIFC.modifies@tok () Term)

; </end encoding let modifies>


; encoding sigelt let writes


; <Start encoding let writes>

(declare-fun Sec2.HIFC.writes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: hst a p q -> writes: label -> Prims.logical
(declare-fun Tm_arrow_9455a7851ddd2006cc1e073abe8efe16 () Term)
(declare-fun Sec2.HIFC.writes@tok () Term)


; </end encoding let writes>


; encoding sigelt let agree_on


; <Start encoding let agree_on>

(declare-fun Sec2.HIFC.agree_on (Term Term Term) Term)

(declare-fun Sec2.HIFC.agree_on@tok () Term)

; </end encoding let agree_on>


; encoding sigelt let related_runs


; <Start encoding let related_runs>



(declare-fun Sec2.HIFC.related_runs (Term Term Term Term Term Term) Term)


;;;;;;;;;;;;;;;;f: hst a p q -> s0: store{p s0} -> s0': store{p s0'} -> Prims.logical
(declare-fun Tm_arrow_abfecb2ebac272cc6db39203334c1299 () Term)
(declare-fun Sec2.HIFC.related_runs@tok () Term)


;;;;;;;;;;;;;;;;l: loc -> Prims.GTot Type
(declare-fun Tm_arrow_794fa77f158a3d6cd1c684601eda8507 () Term)
(declare-fun Tm_abs_b5eccac117c8751b1de99833e23b1189 (Term Term Term Term) Term)

; </end encoding let related_runs>


; encoding sigelt let reads


; <Start encoding let reads>

(declare-fun Sec2.HIFC.reads (Term Term Term Term Term) Term)

(declare-fun Sec2.HIFC.reads@tok () Term)



; </end encoding let reads>


; encoding sigelt let flow


; <Start encoding let flow>

(declare-fun Sec2.HIFC.flow () Term)

; </end encoding let flow>


; encoding sigelt let flows


; <Start encoding let flows>

(declare-fun Sec2.HIFC.flows () Term)

; </end encoding let flows>


; encoding sigelt let has_flow_1


; <Start encoding let has_flow_1>

(declare-fun Sec2.HIFC.has_flow_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;from: loc -> to: loc -> f: flow -> Prims.logical
(declare-fun Tm_arrow_f192bda6a081e500d662333616f0c788 () Term)
(declare-fun Sec2.HIFC.has_flow_1@tok () Term)

; </end encoding let has_flow_1>


; encoding sigelt let has_flow


; <Start encoding let has_flow>

(declare-fun Sec2.HIFC.has_flow (Term Term Term) Term)
;;;;;;;;;;;;;;;;from: loc -> to: loc -> fs: flows -> Prims.logical
(declare-fun Tm_arrow_ce67892f185a321a452c39edd434376e () Term)
(declare-fun Sec2.HIFC.has_flow@tok () Term)

; </end encoding let has_flow>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.upd; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(6,4-6,7); use=Sec2.HIFC.fst(6,4-6,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.store)
(HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType @x2
Prims.int))
(HasType (Sec2.HIFC.upd @x0
@x1
@x2)
Sec2.HIFC.store))
 

:pattern ((Sec2.HIFC.upd @x0
@x1
@x2))
:qid typing_Sec2.HIFC.upd))

:named typing_Sec2.HIFC.upd))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.upd
;;; Fact-ids: Name Sec2.HIFC.upd; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(6,4-6,7); use=Sec2.HIFC.fst(6,4-6,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Sec2.HIFC.upd @x0
@x1
@x2)
(FStar.Map.upd (Sec2.HIFC.loc Dummy_value)
Prims.int
@x0
@x1
@x2))
 

:pattern ((Sec2.HIFC.upd @x0
@x1
@x2))
:qid equation_Sec2.HIFC.upd))

:named equation_Sec2.HIFC.upd))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(76,2-78,61)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hst a p q)
;   (from: Sec2.HIFC.loc)
;   (to: Sec2.HIFC.loc)
;   (k: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   forall (s0: Sec2.HIFC.store{p s0}).
;     p (Sec2.HIFC.upd s0 from k) ==> Prims.auto_squash (p (Sec2.HIFC.upd s0 from k))


; Context: While encoding a query
; While typechecking the top-level declaration `let no_leakage_k`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
(Sec2.HIFC.loc Dummy_value))
(HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
Prims.int))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(76,2-78,61)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))

;; def=Sec2.HIFC.fst(77,4-77,21); use=Sec2.HIFC.fst(77,4-77,21)
(Valid 
;; def=Sec2.HIFC.fst(77,4-77,21); use=Sec2.HIFC.fst(77,4-77,21)
(ApplyTT @x1
(Sec2.HIFC.upd @x7
@x4
@x6))
)
)

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(78,40-78,55)
(or label_1

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(78,40-78,55)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(78,40-78,55)
(ApplyTT @x1
(Sec2.HIFC.upd @x7
@x4
@x6))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.no_leakage_k, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let no_leakage_k


; <Start encoding let no_leakage_k>

(declare-fun Sec2.HIFC.no_leakage_k (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: hst a p q -> from: loc -> to: loc -> k: Prims.int -> Prims.logical
(declare-fun Tm_arrow_64be9941707f85eb560b27c6a372f705 () Term)
(declare-fun Sec2.HIFC.no_leakage_k@tok () Term)


; </end encoding let no_leakage_k>


; encoding sigelt let no_leakage


; <Start encoding let no_leakage>

(declare-fun Sec2.HIFC.no_leakage (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: hst a p q -> from: loc -> to: loc -> Prims.logical
(declare-fun Tm_arrow_4f8f95b02c5d3d99a4392ee18dd07a32 () Term)
(declare-fun Sec2.HIFC.no_leakage@tok () Term)

; </end encoding let no_leakage>


; encoding sigelt let respects


; <Start encoding let respects>

(declare-fun Sec2.HIFC.respects (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: hst a p q -> fs: flows -> Prims.logical
(declare-fun Tm_arrow_192229d79646216dc11c2e71520149e9 () Term)
(declare-fun Sec2.HIFC.respects@tok () Term)

; </end encoding let respects>


; encoding sigelt let hifc


; <Start encoding let hifc>

(declare-fun Sec2.HIFC.hifc (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> r: label -> w: label -> fs: flows -> p: pre -> q: post a -> Type
(declare-fun Tm_arrow_551770067ce45184327b6fbb1ee5cf37 () Term)
(declare-fun Sec2.HIFC.hifc@tok () Term)
(declare-fun Tm_refine_e42d42a18df6499f852ef32d15f0eed0 (Term Term Term Term Term Term) Term)

; </end encoding let hifc>

;;;;;;;;;;;;;;;;typing_Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(15,94-15,97); use=Sec2.HIFC.fst(15,94-15,97)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x0
@x1)
(Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4 @x0
@x1))
 

:pattern ((Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x0
@x1))
:qid typing_Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a))

:named typing_Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a))
;;;;;;;;;;;;;;;;typing_Tm_abs_c3794d9278af0177a0cdef3355c2de9a
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! (HasType Tm_abs_c3794d9278af0177a0cdef3355c2de9a
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
:named typing_Tm_abs_c3794d9278af0177a0cdef3355c2de9a))
;;;;;;;;;;;;;;;;typing_Tm_abs_b5eccac117c8751b1de99833e23b1189
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(66,7-66,100); use=Sec2.HIFC.fst(66,7-66,100)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_b5eccac117c8751b1de99833e23b1189 @x0
@x1
@x2
@x3)
Tm_arrow_794fa77f158a3d6cd1c684601eda8507)
 

:pattern ((Tm_abs_b5eccac117c8751b1de99833e23b1189 @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_b5eccac117c8751b1de99833e23b1189))

:named typing_Tm_abs_b5eccac117c8751b1de99833e23b1189))
;;;;;;;;;;;;;;;;typing_Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(15,63-15,81); use=Sec2.HIFC.fst(15,63-15,81)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x0
@x1)
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x1))
 

:pattern ((Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x0
@x1))
:qid typing_Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02))

:named typing_Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.writes; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(57,4-57,10); use=Sec2.HIFC.fst(57,4-57,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label))
(HasType (Sec2.HIFC.writes @x0
@x1
@x2
@x3
@x4)
Prims.logical))
 

:pattern ((Sec2.HIFC.writes @x0
@x1
@x2
@x3
@x4))
:qid typing_Sec2.HIFC.writes))

:named typing_Sec2.HIFC.writes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.sel; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(7,4-7,7); use=Sec2.HIFC.fst(7,4-7,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.store)
(HasType @x1
(Sec2.HIFC.loc Dummy_value)))
(HasType (Sec2.HIFC.sel @x0
@x1)
Prims.int))
 

:pattern ((Sec2.HIFC.sel @x0
@x1))
:qid typing_Sec2.HIFC.sel))

:named typing_Sec2.HIFC.sel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.respects; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(80,4-80,12); use=Sec2.HIFC.fst(80,4-80,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.flows))
(HasType (Sec2.HIFC.respects @x0
@x1
@x2
@x3
@x4)
Prims.logical))
 

:pattern ((Sec2.HIFC.respects @x0
@x1
@x2
@x3
@x4))
:qid typing_Sec2.HIFC.respects))

:named typing_Sec2.HIFC.respects))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(62,4-62,16); use=Sec2.HIFC.fst(62,4-62,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))
(HasType @x5
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1)))
(HasType (Sec2.HIFC.related_runs @x0
@x1
@x2
@x3
@x4
@x5)
Prims.logical))
 

:pattern ((Sec2.HIFC.related_runs @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Sec2.HIFC.related_runs))

:named typing_Sec2.HIFC.related_runs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.reads; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(67,4-67,9); use=Sec2.HIFC.fst(67,4-67,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label))
(HasType (Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4)
Prims.logical))
 

:pattern ((Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4))
:qid typing_Sec2.HIFC.reads))

:named typing_Sec2.HIFC.reads))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.no_leakage_k; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(75,4-75,16); use=Sec2.HIFC.fst(75,4-75,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
(Sec2.HIFC.loc Dummy_value))
(HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
Prims.int))
(HasType (Sec2.HIFC.no_leakage_k @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.logical))
 

:pattern ((Sec2.HIFC.no_leakage_k @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_Sec2.HIFC.no_leakage_k))

:named typing_Sec2.HIFC.no_leakage_k))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.no_leakage; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(79,4-79,14); use=Sec2.HIFC.fst(79,4-79,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
(Sec2.HIFC.loc Dummy_value))
(HasType @x5
(Sec2.HIFC.loc Dummy_value)))
(HasType (Sec2.HIFC.no_leakage @x0
@x1
@x2
@x3
@x4
@x5)
Prims.logical))
 

:pattern ((Sec2.HIFC.no_leakage @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Sec2.HIFC.no_leakage))

:named typing_Sec2.HIFC.no_leakage))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.modifies; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(56,4-56,12); use=Sec2.HIFC.fst(56,4-56,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.store)
(HasType @x2
Sec2.HIFC.store))
(HasType (Sec2.HIFC.modifies @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Sec2.HIFC.modifies @x0
@x1
@x2))
:qid typing_Sec2.HIFC.modifies))

:named typing_Sec2.HIFC.modifies))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.label; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.label
Tm_type)
:named typing_Sec2.HIFC.label))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.has_flow_1; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(73,4-73,14); use=Sec2.HIFC.fst(73,4-73,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType @x2
Sec2.HIFC.flow))
(HasType (Sec2.HIFC.has_flow_1 @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Sec2.HIFC.has_flow_1 @x0
@x1
@x2))
:qid typing_Sec2.HIFC.has_flow_1))

:named typing_Sec2.HIFC.has_flow_1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.has_flow; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(74,4-74,12); use=Sec2.HIFC.fst(74,4-74,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType @x2
Sec2.HIFC.flows))
(HasType (Sec2.HIFC.has_flow @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Sec2.HIFC.has_flow @x0
@x1
@x2))
:qid typing_Sec2.HIFC.has_flow))

:named typing_Sec2.HIFC.has_flow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.flows; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.flows
Tm_type)
:named typing_Sec2.HIFC.flows))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.flow; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.flow
Tm_type)
:named typing_Sec2.HIFC.flow))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.bot; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(50,4-50,7); use=Sec2.HIFC.fst(50,4-50,7)
(forall ((@u0 Dummy_sort))
 (! (HasType (Sec2.HIFC.bot @u0)
Sec2.HIFC.label)
 

:pattern ((Sec2.HIFC.bot @u0))
:qid typing_Sec2.HIFC.bot))

:named typing_Sec2.HIFC.bot))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.agree_on; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(61,4-61,12); use=Sec2.HIFC.fst(61,4-61,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.store)
(HasType @x2
Sec2.HIFC.store))
(HasType (Sec2.HIFC.agree_on @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Sec2.HIFC.agree_on @x0
@x1
@x2))
:qid typing_Sec2.HIFC.agree_on))

:named typing_Sec2.HIFC.agree_on))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! 
;; def=Prims.fst(198,5-198,9); use=Prims.fst(198,5-198,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_or @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_or @x0
@x1))
:qid typing_Prims.l_or))

:named typing_Prims.l_or))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,5-286,13); use=Prims.fst(286,5-286,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)))
(HasType (Prims.l_Forall @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid typing_Prims.l_Forall))

:named typing_Prims.l_Forall))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (HasType Prims.l_False
Prims.logical)
:named typing_Prims.l_False))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.eq2 @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid typing_Prims.eq2))

:named typing_Prims.eq2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.empty; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(34,4-34,9); use=FStar.Set.fsti(34,4-34,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Set.empty @x0)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.empty @x0))
:qid typing_FStar.Set.empty))

:named typing_FStar.Set.empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.sel; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(39,4-39,7); use=FStar.Map.fsti(39,4-39,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))
(HasType (FStar.Map.sel @x0
@x1
@x2
@x3)
@x1))
 

:pattern ((FStar.Map.sel @x0
@x1
@x2
@x3))
:qid typing_FStar.Map.sel))

:named typing_FStar.Map.sel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.memP @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.List.Tot.Base.memP @x0
@x1
@x2))
:qid typing_FStar.List.Tot.Base.memP))

:named typing_FStar.List.Tot.Base.memP))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.sum@tok
@x0)
@x1)
(Prims.sum @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.sum@tok
@x0)
@x1))

:pattern ((Prims.sum @x0
@x1))
:qid token_correspondence_Prims.sum@tok))

:named token_correspondence_Prims.sum@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= (ApplyTT Prims.list@tok
@x0)
(Prims.list @x0))
 

:pattern ((ApplyTT Prims.list@tok
@x0))

:pattern ((Prims.list @x0))
:qid token_correspondence_Prims.list@tok))

:named token_correspondence_Prims.list@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2)
(Prims.equals @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2))

:pattern ((Prims.equals @x0
@x1
@x2))
:qid token_correspondence_Prims.equals@tok))

:named token_correspondence_Prims.equals@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1)
(HasType @x3
(Prims.list @x1)))
(HasType (FStar.List.Tot.Base.memP.fuel_instrumented @u0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.List.Tot.Base.memP.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Right @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x4
@x5)))
:qid subterm_ordering_Prims.Right))

:named subterm_ordering_Prims.Right))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Left @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x4
@x5)))
:qid subterm_ordering_Prims.Left))

:named subterm_ordering_Prims.Left))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Prims.Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid subterm_ordering_Prims.Cons))

:named subterm_ordering_Prims.Cons))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_789d46fbe34e7761db476bc4f3ec02f7 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_789d46fbe34e7761db476bc4f3ec02f7 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_789d46fbe34e7761db476bc4f3ec02f7))

:named refinement_kinding_Tm_refine_789d46fbe34e7761db476bc4f3ec02f7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_789d46fbe34e7761db476bc4f3ec02f7 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x3
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Prims.l_and (Prims.eq2 Sec2.HIFC.store
@x2
(FStar.Pervasives.Native.snd @x3
Sec2.HIFC.store
@x1))
(Prims.eq2 @x3
(FStar.Pervasives.Native.fst @x3
Sec2.HIFC.store
@x1)
@x4))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_789d46fbe34e7761db476bc4f3ec02f7 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_789d46fbe34e7761db476bc4f3ec02f7))

:named refinement_interpretation_Tm_refine_789d46fbe34e7761db476bc4f3ec02f7))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right_v (Prims.Right @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right_v))

:named projection_inverse_Prims.Right_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right_q (Prims.Right @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right_q))

:named projection_inverse_Prims.Right_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Right_p (Prims.Right @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid projection_inverse_Prims.Right_p))

:named projection_inverse_Prims.Right_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= (Prims.Nil_a (Prims.Nil @x0))
@x0)
 

:pattern ((Prims.Nil @x0))
:qid projection_inverse_Prims.Nil_a))

:named projection_inverse_Prims.Nil_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left_v (Prims.Left @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left_v))

:named projection_inverse_Prims.Left_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left_q (Prims.Left @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left_q))

:named projection_inverse_Prims.Left_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Left_p (Prims.Left @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid projection_inverse_Prims.Left_p))

:named projection_inverse_Prims.Left_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_tl (Prims.Cons @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_tl))

:named projection_inverse_Prims.Cons_tl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_hd (Prims.Cons @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_hd))

:named projection_inverse_Prims.Cons_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_a (Prims.Cons @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_a))

:named projection_inverse_Prims.Cons_a))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.sum@tok))
:named pre_kinding_Prims.sum@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.list@tok))
:named pre_kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.equals@tok))
:named pre_kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_empty
;;; Fact-ids: Name FStar.Set.mem_empty; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0))
(not (BoxBool_proj_0 (FStar.Set.mem @x0
@x1
(FStar.Set.empty @x0)))))
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.empty @x0)))
:qid lemma_FStar.Set.mem_empty))
:named lemma_FStar.Set.mem_empty))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_SelUpd2
;;; Fact-ids: Name FStar.Map.lemma_SelUpd2; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1)

;; def=FStar.Map.fsti(100,51-100,58); use=FStar.Map.fsti(100,51-100,58)
(not 
;; def=FStar.Map.fsti(100,51-100,58); use=FStar.Map.fsti(100,51-100,58)
(= @x4
@x3)
)
)

;; def=FStar.Map.fsti(100,63-100,94); use=FStar.Map.fsti(100,63-100,94)
(= (FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3)
(FStar.Map.sel @x0
@x1
@x2
@x3))
)
 

:pattern ((FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3))
:qid lemma_FStar.Map.lemma_SelUpd2))
:named lemma_FStar.Map.lemma_SelUpd2))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_SelUpd1
;;; Fact-ids: Name FStar.Map.lemma_SelUpd1; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))

;; def=FStar.Map.fsti(96,50-96,74); use=FStar.Map.fsti(96,50-96,74)
(= (FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
@x3)
@x4)
)
 

:pattern ((FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
@x3))
:qid lemma_FStar.Map.lemma_SelUpd1))
:named lemma_FStar.Map.lemma_SelUpd1))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(66,7-66,100); use=Sec2.HIFC.fst(66,7-66,100)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.l_Forall (Sec2.HIFC.loc Dummy_value)
(Tm_abs_b5eccac117c8751b1de99833e23b1189 @x3
@x2
@x1
@x0)))

;; def=Sec2.HIFC.fst(66,7-66,100); use=Sec2.HIFC.fst(66,7-66,100)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(66,24-66,99); use=Sec2.HIFC.fst(66,24-66,99)
(or 
;; def=Sec2.HIFC.fst(66,25-66,46); use=Sec2.HIFC.fst(66,25-66,46)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @x3)
@x4)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @x2)
@x4))


;; def=Sec2.HIFC.fst(66,50-66,98); use=Sec2.HIFC.fst(66,50-66,98)
(and 
;; def=Sec2.HIFC.fst(66,51-66,71); use=Sec2.HIFC.fst(66,51-66,71)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @x3)
@x4)
(Sec2.HIFC.sel @x1
@x4))


;; def=Sec2.HIFC.fst(66,75-66,97); use=Sec2.HIFC.fst(66,75-66,97)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @x2)
@x4)
(Sec2.HIFC.sel @x0
@x4))
)
)
)
 
;;no pats
:qid l_quant_interp_6abcfaa86709857d363b9da752939849.1))
)
 

:pattern ((Valid (Prims.l_Forall (Sec2.HIFC.loc Dummy_value)
(Tm_abs_b5eccac117c8751b1de99833e23b1189 @x3
@x2
@x1
@x0))))
:qid l_quant_interp_6abcfaa86709857d363b9da752939849))

:named l_quant_interp_6abcfaa86709857d363b9da752939849))
;;;;;;;;;;;;;;;;\/ interpretation
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (or (Valid @x0)
(Valid @x1))
(Valid (Prims.l_or @x0
@x1)))
 

:pattern ((Prims.l_or @x0
@x1))
:qid l_or-interp))
:named l_or-interp))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4))

:named kinding_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_794fa77f158a3d6cd1c684601eda8507
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! (HasType Tm_arrow_794fa77f158a3d6cd1c684601eda8507
Tm_type)
:named kinding_Tm_arrow_794fa77f158a3d6cd1c684601eda8507))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type))
:qid kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (and (IsTotFun Prims.sum@tok)

;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.sum@tok
@x0))
 

:pattern ((ApplyTT Prims.sum@tok
@x0))
:qid kinding_Prims.sum@tok))


;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.sum @x0
@x1)
Tm_type))
 

:pattern ((Prims.sum @x0
@x1))
:qid kinding_Prims.sum@tok.1))
)
:named kinding_Prims.sum@tok))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (and (IsTotFun Prims.list@tok)

;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.list @x0)
Tm_type))
 

:pattern ((Prims.list @x0))
:qid kinding_Prims.list@tok))
)
:named kinding_Prims.list@tok))
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (and (IsTotFun Prims.equals@tok)

;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.equals@tok
@x0))
 

:pattern ((ApplyTT Prims.equals@tok
@x0))
:qid kinding_Prims.equals@tok))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
:qid kinding_Prims.equals@tok.1))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.equals @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid kinding_Prims.equals@tok.2))
)
:named kinding_Prims.equals@tok))
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! (HasType Prims.empty
Tm_type)
:named kinding_Prims.empty@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(15,94-15,97); use=Sec2.HIFC.fst(15,94-15,97)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x1
@x2)
@x0)
(FStar.Pervasives.Native.Mktuple2 @x2
Sec2.HIFC.store
@x1
@x0))
 

:pattern ((ApplyTT (Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x1
@x2)
@x0))
:qid interpretation_Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a))

:named interpretation_Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_c3794d9278af0177a0cdef3355c2de9a
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(15,41-15,45); use=Sec2.HIFC.fst(15,41-15,45)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_c3794d9278af0177a0cdef3355c2de9a
@x0)
Prims.l_True)
 

:pattern ((ApplyTT Tm_abs_c3794d9278af0177a0cdef3355c2de9a
@x0))
:qid interpretation_Tm_abs_c3794d9278af0177a0cdef3355c2de9a))

:named interpretation_Tm_abs_c3794d9278af0177a0cdef3355c2de9a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_b5eccac117c8751b1de99833e23b1189
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(66,7-66,100); use=Sec2.HIFC.fst(66,7-66,100)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_b5eccac117c8751b1de99833e23b1189 @x1
@x2
@x3
@x4)
@x0)
(Prims.l_or (Prims.eq2 Prims.int
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @x1)
@x0)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @x2)
@x0))
(Prims.l_and (Prims.eq2 Prims.int
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @x1)
@x0)
(Sec2.HIFC.sel @x3
@x0))
(Prims.eq2 Prims.int
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @x2)
@x0)
(Sec2.HIFC.sel @x4
@x0)))))
 

:pattern ((ApplyTT (Tm_abs_b5eccac117c8751b1de99833e23b1189 @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_b5eccac117c8751b1de99833e23b1189))

:named interpretation_Tm_abs_b5eccac117c8751b1de99833e23b1189))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(15,63-15,81); use=Sec2.HIFC.fst(15,63-15,81)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x3
@x4)
@x0)
@x1)
@x2)
(Prims.l_and (Prims.eq2 Sec2.HIFC.store
@x0
@x2)
(Prims.eq2 @x4
@x1
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x3
@x4)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02))

:named interpretation_Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02))
;;;;;;;;;;;;;;;;haseq for Tm_refine_789d46fbe34e7761db476bc4f3ec02f7
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_789d46fbe34e7761db476bc4f3ec02f7 @x0
@x1
@x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x1
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_789d46fbe34e7761db476bc4f3ec02f7 @x0
@x1
@x2))))
:qid haseqTm_refine_789d46fbe34e7761db476bc4f3ec02f7))

:named haseqTm_refine_789d46fbe34e7761db476bc4f3ec02f7))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Sec2.HIFC.label; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.label
Tm_type)
:named function_token_typing_Sec2.HIFC.label))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Sec2.HIFC.flows; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.flows
Tm_type)
:named function_token_typing_Sec2.HIFC.flows))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Sec2.HIFC.flow; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.flow
Tm_type)
:named function_token_typing_Sec2.HIFC.flow))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (HasType Prims.l_False
Prims.logical)
:named function_token_typing_Prims.l_False))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.sum @x2
@x3))
(or (and (is-Prims.Left @x1)
(= @x2
(Prims.Left_p @x1))
(= @x3
(Prims.Left_q @x1)))
(and (is-Prims.Right @x1)
(= @x2
(Prims.Right_p @x1))
(= @x3
(Prims.Right_q @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.sum @x2
@x3)))
:qid fuel_guarded_inversion_Prims.sum))

:named fuel_guarded_inversion_Prims.sum))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2))
(or (and (is-Prims.Nil @x1)
(= @x2
(Prims.Nil_a @x1)))
(and (is-Prims.Cons @x1)
(= @x2
(Prims.Cons_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2)))
:qid fuel_guarded_inversion_Prims.list))

:named fuel_guarded_inversion_Prims.list))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4))
(is-Prims.Refl @x1))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4)))
:qid fuel_guarded_inversion_Prims.equals))

:named fuel_guarded_inversion_Prims.equals))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! 
;; def=Prims.fst(86,5-86,10); use=Prims.fst(86,5-86,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.empty)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Prims.empty))
:qid fuel_guarded_inversion_Prims.empty))

:named fuel_guarded_inversion_Prims.empty))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! (= 170
(Term_constr_id Prims.sum@tok))
:named fresh_token_Prims.sum@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 319
(Term_constr_id Prims.list@tok))
:named fresh_token_Prims.list@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (= 135
(Term_constr_id Prims.equals@tok))
:named fresh_token_Prims.equals@tok))
;;;;;;;;;;;;;;;;False interpretation
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (iff false
(Valid Prims.l_False))
:named false_interp))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.memP
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
@x1)
(HasType @x3
(Prims.list @x1)))
(= (FStar.List.Tot.Base.memP.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x3))
(ite (is-Prims.Nil @lb4)
Prims.l_False
(ite (is-Prims.Cons @lb4)
(Prims.l_or (Prims.eq2 @x1
@x2
(Prims.Cons_hd @lb4))
(FStar.List.Tot.Base.memP.fuel_instrumented @u0
@x1
@x2
(Prims.Cons_tl @lb4)))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.memP.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.writes
;;; Fact-ids: Name Sec2.HIFC.writes; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(57,4-57,10); use=Sec2.HIFC.fst(57,4-57,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (Sec2.HIFC.writes @x0
@x1
@x2
@x3
@x4))

;; def=Sec2.HIFC.fst(58,4-58,73); use=Sec2.HIFC.fst(58,4-58,73)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))
(let ((@lb6 (ApplyTT @x3
@x5)))

;; def=Sec2.HIFC.fst(58,51-58,73); use=Sec2.HIFC.fst(58,51-58,73)
(Valid 
;; def=Sec2.HIFC.fst(58,51-58,73); use=Sec2.HIFC.fst(58,51-58,73)
(Sec2.HIFC.modifies @x4
@x5
(FStar.Pervasives.Native.Mktuple2__2 @lb6))
)
))
 
;;no pats
:qid equation_Sec2.HIFC.writes.1))
)
 

:pattern ((Sec2.HIFC.writes @x0
@x1
@x2
@x3
@x4))
:qid equation_Sec2.HIFC.writes))

:named equation_Sec2.HIFC.writes))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.sel
;;; Fact-ids: Name Sec2.HIFC.sel; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(7,4-7,7); use=Sec2.HIFC.fst(7,4-7,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.sel @x0
@x1)
(FStar.Map.sel (Sec2.HIFC.loc Dummy_value)
Prims.int
@x0
@x1))
 

:pattern ((Sec2.HIFC.sel @x0
@x1))
:qid equation_Sec2.HIFC.sel))

:named equation_Sec2.HIFC.sel))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.respects
;;; Fact-ids: Name Sec2.HIFC.respects; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(80,4-80,12); use=Sec2.HIFC.fst(80,4-80,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (Sec2.HIFC.respects @x0
@x1
@x2
@x3
@x4))

;; def=Sec2.HIFC.fst(81,4-81,115); use=Sec2.HIFC.fst(81,4-81,115)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(81,55-81,77); use=Sec2.HIFC.fst(81,55-81,77)
(not 
;; def=Sec2.HIFC.fst(81,56-81,77); use=Sec2.HIFC.fst(81,56-81,77)
(Valid 
;; def=Sec2.HIFC.fst(81,56-81,77); use=Sec2.HIFC.fst(81,56-81,77)
(Sec2.HIFC.has_flow @x5
@x6
@x4)
)
)


;; def=Sec2.HIFC.fst(81,81-81,89); use=Sec2.HIFC.fst(81,81-81,89)
(not (= @x5
@x6))
)

;; def=Sec2.HIFC.fst(81,94-81,114); use=Sec2.HIFC.fst(81,94-81,114)
(Valid 
;; def=Sec2.HIFC.fst(81,94-81,114); use=Sec2.HIFC.fst(81,94-81,114)
(Sec2.HIFC.no_leakage @x0
@x1
@x2
@x3
@x5
@x6)
)
)
 

:pattern ((Sec2.HIFC.no_leakage @x0
@x1
@x2
@x3
@x5
@x6))
:qid equation_Sec2.HIFC.respects.1))
)
 

:pattern ((Sec2.HIFC.respects @x0
@x1
@x2
@x3
@x4))
:qid equation_Sec2.HIFC.respects))

:named equation_Sec2.HIFC.respects))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.related_runs
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(62,4-62,16); use=Sec2.HIFC.fst(62,4-62,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (Sec2.HIFC.related_runs @x0
@x1
@x2
@x3
@x4
@x5))
(let ((@lb6 (ApplyTT @x3
@x4)))
(let ((@lb7 (ApplyTT @x3
@x5)))

;; def=Sec2.HIFC.fst(65,7-66,100); use=Sec2.HIFC.fst(65,7-66,100)
(and 
;; def=Sec2.HIFC.fst(65,7-65,16); use=Sec2.HIFC.fst(65,7-65,16)
(= (FStar.Pervasives.Native.Mktuple2__1 @lb6)
(FStar.Pervasives.Native.Mktuple2__1 @lb7))


;; def=Sec2.HIFC.fst(66,7-66,100); use=Sec2.HIFC.fst(66,7-66,100)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(66,24-66,99); use=Sec2.HIFC.fst(66,24-66,99)
(or 
;; def=Sec2.HIFC.fst(66,25-66,46); use=Sec2.HIFC.fst(66,25-66,46)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb6)
@x8)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x8))


;; def=Sec2.HIFC.fst(66,50-66,98); use=Sec2.HIFC.fst(66,50-66,98)
(and 
;; def=Sec2.HIFC.fst(66,51-66,71); use=Sec2.HIFC.fst(66,51-66,71)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb6)
@x8)
(Sec2.HIFC.sel @x4
@x8))


;; def=Sec2.HIFC.fst(66,75-66,97); use=Sec2.HIFC.fst(66,75-66,97)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x8)
(Sec2.HIFC.sel @x5
@x8))
)
)
)
 
;;no pats
:qid equation_Sec2.HIFC.related_runs.1))
)
)))
 

:pattern ((Sec2.HIFC.related_runs @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_Sec2.HIFC.related_runs))

:named equation_Sec2.HIFC.related_runs))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.reads
;;; Fact-ids: Name Sec2.HIFC.reads; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(67,4-67,9); use=Sec2.HIFC.fst(67,4-67,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4))

;; def=Sec2.HIFC.fst(68,4-68,95); use=Sec2.HIFC.fst(68,4-68,95)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))
(HasType @x6
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))

;; def=Sec2.HIFC.fst(68,48-68,69); use=Sec2.HIFC.fst(68,48-68,69)
(Valid 
;; def=Sec2.HIFC.fst(68,48-68,69); use=Sec2.HIFC.fst(68,48-68,69)
(Sec2.HIFC.agree_on @x4
@x5
@x6)
)
)

;; def=Sec2.HIFC.fst(68,74-68,95); use=Sec2.HIFC.fst(68,74-68,95)
(Valid 
;; def=Sec2.HIFC.fst(68,74-68,95); use=Sec2.HIFC.fst(68,74-68,95)
(Sec2.HIFC.related_runs @x0
@x1
@x2
@x3
@x5
@x6)
)
)
 
;;no pats
:qid equation_Sec2.HIFC.reads.1))
)
 

:pattern ((Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4))
:qid equation_Sec2.HIFC.reads))

:named equation_Sec2.HIFC.reads))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.no_leakage_k
;;; Fact-ids: Name Sec2.HIFC.no_leakage_k; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(75,4-75,16); use=Sec2.HIFC.fst(75,4-75,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Valid (Sec2.HIFC.no_leakage_k @x0
@x1
@x2
@x3
@x4
@x5
@x6))

;; def=Sec2.HIFC.fst(76,2-78,61); use=Sec2.HIFC.fst(76,2-78,61)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))

;; def=Sec2.HIFC.fst(77,4-77,21); use=Sec2.HIFC.fst(77,4-77,21)
(Valid 
;; def=Sec2.HIFC.fst(77,4-77,21); use=Sec2.HIFC.fst(77,4-77,21)
(ApplyTT @x1
(Sec2.HIFC.upd @x7
@x4
@x6))
)
)

;; def=Sec2.HIFC.fst(78,4-78,61); use=Sec2.HIFC.fst(78,4-78,61)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(ApplyTT @x3
@x7))
@x5)
(Sec2.HIFC.sel (FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(ApplyTT @x3
(Sec2.HIFC.upd @x7
@x4
@x6)))
@x5))
)
 

:pattern ((Sec2.HIFC.upd @x7
@x4
@x6))
:qid equation_Sec2.HIFC.no_leakage_k.1))
)
 

:pattern ((Sec2.HIFC.no_leakage_k @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_Sec2.HIFC.no_leakage_k))

:named equation_Sec2.HIFC.no_leakage_k))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.no_leakage
;;; Fact-ids: Name Sec2.HIFC.no_leakage; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(79,4-79,14); use=Sec2.HIFC.fst(79,4-79,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (Sec2.HIFC.no_leakage @x0
@x1
@x2
@x3
@x4
@x5))

;; def=Sec2.HIFC.fst(79,54-79,88); use=Sec2.HIFC.fst(79,54-79,88)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.int)

;; def=Sec2.HIFC.fst(79,64-79,88); use=Sec2.HIFC.fst(79,64-79,88)
(Valid 
;; def=Sec2.HIFC.fst(79,64-79,88); use=Sec2.HIFC.fst(79,64-79,88)
(Sec2.HIFC.no_leakage_k @x0
@x1
@x2
@x3
@x4
@x5
@x6)
)
)
 
;;no pats
:qid equation_Sec2.HIFC.no_leakage.1))
)
 

:pattern ((Sec2.HIFC.no_leakage @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_Sec2.HIFC.no_leakage))

:named equation_Sec2.HIFC.no_leakage))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.modifies
;;; Fact-ids: Name Sec2.HIFC.modifies; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(56,4-56,12); use=Sec2.HIFC.fst(56,4-56,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (Sec2.HIFC.modifies @x0
@x1
@x2))

;; def=Sec2.HIFC.fst(56,39-56,111); use=Sec2.HIFC.fst(56,39-56,111)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(56,71-56,85); use=Sec2.HIFC.fst(56,71-56,85)
(not 
;; def=Sec2.HIFC.fst(56,72-56,85); use=Sec2.HIFC.fst(56,72-56,85)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x3
@x0))
)
)

;; def=Sec2.HIFC.fst(56,90-56,110); use=Sec2.HIFC.fst(56,90-56,110)
(= (Sec2.HIFC.sel @x1
@x3)
(Sec2.HIFC.sel @x2
@x3))
)
 

:pattern ((Sec2.HIFC.sel @x2
@x3))
:qid equation_Sec2.HIFC.modifies.1))
)
 

:pattern ((Sec2.HIFC.modifies @x0
@x1
@x2))
:qid equation_Sec2.HIFC.modifies))

:named equation_Sec2.HIFC.modifies))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.label
;;; Fact-ids: Name Sec2.HIFC.label; Namespace Sec2.HIFC
(assert (! (= Sec2.HIFC.label
(FStar.Set.set (Sec2.HIFC.loc Dummy_value)))
:named equation_Sec2.HIFC.label))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.has_flow_1
;;; Fact-ids: Name Sec2.HIFC.has_flow_1; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(73,4-73,14); use=Sec2.HIFC.fst(73,4-73,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (Sec2.HIFC.has_flow_1 @x0
@x1
@x2))

;; def=Sec2.HIFC.fst(73,40-73,82); use=Sec2.HIFC.fst(73,40-73,82)
(and 
;; def=Sec2.HIFC.fst(73,40-73,60); use=Sec2.HIFC.fst(73,40-73,60)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x0
(FStar.Pervasives.Native.fst Sec2.HIFC.label
Sec2.HIFC.label
@x2)))


;; def=Sec2.HIFC.fst(73,64-73,82); use=Sec2.HIFC.fst(73,64-73,82)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x1
(FStar.Pervasives.Native.snd Sec2.HIFC.label
Sec2.HIFC.label
@x2)))
)
)
 

:pattern ((Sec2.HIFC.has_flow_1 @x0
@x1
@x2))
:qid equation_Sec2.HIFC.has_flow_1))

:named equation_Sec2.HIFC.has_flow_1))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.has_flow
;;; Fact-ids: Name Sec2.HIFC.has_flow; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(74,4-74,12); use=Sec2.HIFC.fst(74,4-74,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (Sec2.HIFC.has_flow @x0
@x1
@x2))

;; def=Sec2.HIFC.fst(74,40-74,99); use=Sec2.HIFC.fst(74,40-74,99)
(exists ((@x3 Term))
 (! (and (HasType @x3
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(74,52-74,73); use=Sec2.HIFC.fst(74,52-74,73)
(Valid 
;; def=Sec2.HIFC.fst(74,52-74,73); use=Sec2.HIFC.fst(74,52-74,73)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
@x2)
)


;; def=Sec2.HIFC.fst(74,77-74,98); use=Sec2.HIFC.fst(74,77-74,98)
(Valid 
;; def=Sec2.HIFC.fst(74,77-74,98); use=Sec2.HIFC.fst(74,77-74,98)
(Sec2.HIFC.has_flow_1 @x0
@x1
@x3)
)
)
 
;;no pats
:qid equation_Sec2.HIFC.has_flow.1))
)
 

:pattern ((Sec2.HIFC.has_flow @x0
@x1
@x2))
:qid equation_Sec2.HIFC.has_flow))

:named equation_Sec2.HIFC.has_flow))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.flows
;;; Fact-ids: Name Sec2.HIFC.flows; Namespace Sec2.HIFC
(assert (! (= Sec2.HIFC.flows
(Prims.list Sec2.HIFC.flow))
:named equation_Sec2.HIFC.flows))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.flow
;;; Fact-ids: Name Sec2.HIFC.flow; Namespace Sec2.HIFC
(assert (! (= Sec2.HIFC.flow
(FStar.Pervasives.Native.tuple2 Sec2.HIFC.label
Sec2.HIFC.label))
:named equation_Sec2.HIFC.flow))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.bot
;;; Fact-ids: Name Sec2.HIFC.bot; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(50,4-50,7); use=Sec2.HIFC.fst(50,4-50,7)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=Sec2.HIFC.fst(50,4-50,7); use=Sec2.HIFC.fst(50,4-50,7)
(Sec2.HIFC.bot @u0)

(FStar.Set.empty (Sec2.HIFC.loc Dummy_value)))
 

:pattern (
;; def=Sec2.HIFC.fst(50,4-50,7); use=Sec2.HIFC.fst(50,4-50,7)
(Sec2.HIFC.bot @u0)
)
:qid equation_Sec2.HIFC.bot))

:named equation_Sec2.HIFC.bot))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.agree_on
;;; Fact-ids: Name Sec2.HIFC.agree_on; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(61,4-61,12); use=Sec2.HIFC.fst(61,4-61,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (Sec2.HIFC.agree_on @x0
@x1
@x2))

;; def=Sec2.HIFC.fst(61,44-61,94); use=Sec2.HIFC.fst(61,44-61,94)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(61,54-61,69); use=Sec2.HIFC.fst(61,54-61,69)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x3
@x0))
)

;; def=Sec2.HIFC.fst(61,74-61,94); use=Sec2.HIFC.fst(61,74-61,94)
(= (Sec2.HIFC.sel @x1
@x3)
(Sec2.HIFC.sel @x2
@x3))
)
 
;;no pats
:qid equation_Sec2.HIFC.agree_on.1))
)
 

:pattern ((Sec2.HIFC.agree_on @x0
@x1
@x2))
:qid equation_Sec2.HIFC.agree_on))

:named equation_Sec2.HIFC.agree_on))
;;;;;;;;;;;;;;;;Equation for Prims.l_or
;;; Fact-ids: Name Prims.l_or; Namespace Prims
(assert (! 
;; def=Prims.fst(198,5-198,9); use=Prims.fst(198,5-198,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_or @x0
@x1)
(Prims.squash (Prims.sum @x0
@x1)))
 

:pattern ((Prims.l_or @x0
@x1))
:qid equation_Prims.l_or))

:named equation_Prims.l_or))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.l_Forall
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,5-286,13); use=Prims.fst(286,5-286,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_Forall @x0
@x1)
(Prims.squash (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x0)))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid equation_Prims.l_Forall))

:named equation_Prims.l_Forall))
;;;;;;;;;;;;;;;;Equation for Prims.l_False
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (= Prims.l_False
(Prims.squash Prims.empty))
:named equation_Prims.l_False))
;;;;;;;;;;;;;;;;Equation for Prims.eq2
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.eq2 @x0
@x1
@x2)
(Prims.squash (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid equation_Prims.eq2))

:named equation_Prims.eq2))
;;;;;;;;;;;;;;;;Eq2 interpretation
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (= @x1
@x2)
(Valid (Prims.eq2 @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid eq2-interp))
:named eq2-interp))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.writes
;;; Fact-ids: Name Sec2.HIFC.writes; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(57,4-57,10); use=Sec2.HIFC.fst(57,4-57,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label))
(Valid (Prims.subtype_of (Sec2.HIFC.writes @x0
@x1
@x2
@x3
@x4)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.writes @x0
@x1
@x2
@x3
@x4)
Prims.unit))
:qid defn_equation_Sec2.HIFC.writes))

:named defn_equation_Sec2.HIFC.writes))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.respects
;;; Fact-ids: Name Sec2.HIFC.respects; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(80,4-80,12); use=Sec2.HIFC.fst(80,4-80,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.flows))
(Valid (Prims.subtype_of (Sec2.HIFC.respects @x0
@x1
@x2
@x3
@x4)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.respects @x0
@x1
@x2
@x3
@x4)
Prims.unit))
:qid defn_equation_Sec2.HIFC.respects))

:named defn_equation_Sec2.HIFC.respects))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.related_runs
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(62,4-62,16); use=Sec2.HIFC.fst(62,4-62,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Sec2.HIFC.related_runs @x0
@x1
@x2
@x3
@x4
@x5)
(let ((@lb6 (ApplyTT @x3
@x4)))
(let ((@lb7 (ApplyTT @x3
@x5)))
(Prims.l_and (Prims.eq2 @x0
(FStar.Pervasives.Native.Mktuple2__1 @lb6)
(FStar.Pervasives.Native.Mktuple2__1 @lb7))
(Prims.l_Forall (Sec2.HIFC.loc Dummy_value)
(Tm_abs_b5eccac117c8751b1de99833e23b1189 @lb6
@lb7
@x4
@x5))))))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.related_runs @x0
@x1
@x2
@x3
@x4
@x5)
Prims.unit))
:qid defn_equation_Sec2.HIFC.related_runs))

:named defn_equation_Sec2.HIFC.related_runs))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.reads
;;; Fact-ids: Name Sec2.HIFC.reads; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(67,4-67,9); use=Sec2.HIFC.fst(67,4-67,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label))
(Valid (Prims.subtype_of (Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4)
Prims.unit))
:qid defn_equation_Sec2.HIFC.reads))

:named defn_equation_Sec2.HIFC.reads))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.no_leakage_k
;;; Fact-ids: Name Sec2.HIFC.no_leakage_k; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(75,4-75,16); use=Sec2.HIFC.fst(75,4-75,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
(Sec2.HIFC.loc Dummy_value))
(HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
Prims.int))
(Valid (Prims.subtype_of (Sec2.HIFC.no_leakage_k @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.no_leakage_k @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.unit))
:qid defn_equation_Sec2.HIFC.no_leakage_k))

:named defn_equation_Sec2.HIFC.no_leakage_k))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.no_leakage
;;; Fact-ids: Name Sec2.HIFC.no_leakage; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(79,4-79,14); use=Sec2.HIFC.fst(79,4-79,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
(Sec2.HIFC.loc Dummy_value))
(HasType @x5
(Sec2.HIFC.loc Dummy_value)))
(Valid (Prims.subtype_of (Sec2.HIFC.no_leakage @x0
@x1
@x2
@x3
@x4
@x5)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.no_leakage @x0
@x1
@x2
@x3
@x4
@x5)
Prims.unit))
:qid defn_equation_Sec2.HIFC.no_leakage))

:named defn_equation_Sec2.HIFC.no_leakage))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.modifies
;;; Fact-ids: Name Sec2.HIFC.modifies; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(56,4-56,12); use=Sec2.HIFC.fst(56,4-56,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.store)
(HasType @x2
Sec2.HIFC.store))
(Valid (Prims.subtype_of (Sec2.HIFC.modifies @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.modifies @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_Sec2.HIFC.modifies))

:named defn_equation_Sec2.HIFC.modifies))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.has_flow_1
;;; Fact-ids: Name Sec2.HIFC.has_flow_1; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(73,4-73,14); use=Sec2.HIFC.fst(73,4-73,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType @x2
Sec2.HIFC.flow))
(Valid (Prims.subtype_of (Sec2.HIFC.has_flow_1 @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.has_flow_1 @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_Sec2.HIFC.has_flow_1))

:named defn_equation_Sec2.HIFC.has_flow_1))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.has_flow
;;; Fact-ids: Name Sec2.HIFC.has_flow; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(74,4-74,12); use=Sec2.HIFC.fst(74,4-74,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType @x2
Sec2.HIFC.flows))
(Valid (Prims.subtype_of (Sec2.HIFC.has_flow @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.has_flow @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_Sec2.HIFC.has_flow))

:named defn_equation_Sec2.HIFC.has_flow))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.agree_on
;;; Fact-ids: Name Sec2.HIFC.agree_on; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(61,4-61,12); use=Sec2.HIFC.fst(61,4-61,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.store)
(HasType @x2
Sec2.HIFC.store))
(Valid (Prims.subtype_of (Sec2.HIFC.agree_on @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.agree_on @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_Sec2.HIFC.agree_on))

:named defn_equation_Sec2.HIFC.agree_on))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2))
(HasTypeFuel @u0
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x1
@x2)))
:qid data_typing_intro_Prims.Right@tok))

:named data_typing_intro_Prims.Right@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(= @x2
@x3))
(HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
:qid data_typing_intro_Prims.Refl@tok))

:named data_typing_intro_Prims.Refl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Nil@tok))

:named data_typing_intro_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1))
(HasTypeFuel @u0
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x1
@x2)))
:qid data_typing_intro_Prims.Left@tok))

:named data_typing_intro_Prims.Left@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1)))
(HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Cons@tok))

:named data_typing_intro_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x5)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Right @x1
@x2
@x3)
(Prims.sum @x4
@x5)))
:qid data_elim_Prims.Right))

:named data_elim_Prims.Right))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5))
(and (= @x4
@x5)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5)))
:qid data_elim_Prims.Refl))

:named data_elim_Prims.Refl))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2)))
:qid data_elim_Prims.Nil))

:named data_elim_Prims.Nil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x4)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Left @x1
@x2
@x3)
(Prims.sum @x4
@x5)))
:qid data_elim_Prims.Left))

:named data_elim_Prims.Left))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
(Prims.list @x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid data_elim_Prims.Cons))

:named data_elim_Prims.Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 169
(Term_constr_id (Prims.sum @x0
@x1)))
 

:pattern ((Prims.sum @x0
@x1))
:qid constructor_distinct_Prims.sum))

:named constructor_distinct_Prims.sum))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= 318
(Term_constr_id (Prims.list @x0)))
 

:pattern ((Prims.list @x0))
:qid constructor_distinct_Prims.list))

:named constructor_distinct_Prims.list))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 134
(Term_constr_id (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid constructor_distinct_Prims.equals))

:named constructor_distinct_Prims.equals))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! (= 111
(Term_constr_id Prims.empty))
:named constructor_distinct_Prims.empty))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(193,4-193,9); use=Prims.fst(193,4-193,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 181
(Term_constr_id (Prims.Right @x0
@x1
@x2)))
 

:pattern ((Prims.Right @x0
@x1
@x2))
:qid constructor_distinct_Prims.Right))

:named constructor_distinct_Prims.Right))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (= 141
(Term_constr_id (Prims.Refl @x0
@x1)))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_distinct_Prims.Refl))

:named constructor_distinct_Prims.Refl))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= 325
(Term_constr_id (Prims.Nil @x0)))
 

:pattern ((Prims.Nil @x0))
:qid constructor_distinct_Prims.Nil))

:named constructor_distinct_Prims.Nil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(192,4-192,8); use=Prims.fst(192,4-192,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 176
(Term_constr_id (Prims.Left @x0
@x1
@x2)))
 

:pattern ((Prims.Left @x0
@x1
@x2))
:qid constructor_distinct_Prims.Left))

:named constructor_distinct_Prims.Left))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 330
(Term_constr_id (Prims.Cons @x0
@x1
@x2)))
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid constructor_distinct_Prims.Cons))

:named constructor_distinct_Prims.Cons))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (is-Prims.Refl (Prims.Refl @x0
@x1))
(= (Prims.Refl @x0
@x1)
Prims.Refl@base))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_base_Prims.Refl))

:named constructor_base_Prims.Refl))
;;;;;;;;;;;;;;;;Assumption: Prims.list__uu___haseq
;;; Fact-ids: Name Prims.list__uu___haseq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Prims.hasEq (Prims.list @x0)))
:qid assumption_Prims.list__uu___haseq))
:named assumption_Prims.list__uu___haseq))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4 @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4))

:named Sec2.HIFC_pre_typing_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(66,18-66,21); use=Sec2.HIFC.fst(66,15-66,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_794fa77f158a3d6cd1c684601eda8507)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_794fa77f158a3d6cd1c684601eda8507))
:qid Sec2.HIFC_pre_typing_Tm_arrow_794fa77f158a3d6cd1c684601eda8507))

:named Sec2.HIFC_pre_typing_Tm_arrow_794fa77f158a3d6cd1c684601eda8507))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4
;;; Fact-ids: Name Sec2.HIFC.return_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4 @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Sec2.HIFC.store)
(HasType (ApplyTT @x0
@x3)
(Tm_refine_789d46fbe34e7761db476bc4f3ec02f7 @x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4 @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4))

:named Sec2.HIFC_interpretation_Tm_arrow_8de67a4cb1df69d31ef86ba29e3ac4d4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_794fa77f158a3d6cd1c684601eda8507
;;; Fact-ids: Name Sec2.HIFC.related_runs; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(66,18-66,21); use=Sec2.HIFC.fst(66,15-66,22)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_794fa77f158a3d6cd1c684601eda8507)
(and 
;; def=Sec2.HIFC.fst(66,18-66,21); use=Sec2.HIFC.fst(66,15-66,22)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_794fa77f158a3d6cd1c684601eda8507.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_794fa77f158a3d6cd1c684601eda8507))
:qid Sec2.HIFC_interpretation_Tm_arrow_794fa77f158a3d6cd1c684601eda8507))

:named Sec2.HIFC_interpretation_Tm_arrow_794fa77f158a3d6cd1c684601eda8507))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4))
(= (Term_constr_id (Prims.equals @x2
@x3
@x4))
(Term_constr_id (PreType @x0))))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4)))
:qid Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))

:named Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.sum; Namespace Prims; Name Prims.Left; Namespace Prims; Name Prims.Right; Namespace Prims
(assert (! 
;; def=Prims.fst(191,5-191,8); use=Prims.fst(191,5-191,8)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.sum @x2
@x3))
(= (Prims.sum @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.sum @x2
@x3)))
:qid Prims_pretyping_a08d262d1ccaf451d982ca8ce0bf4ae9))

:named Prims_pretyping_a08d262d1ccaf451d982ca8ce0bf4ae9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.list @x2))
(= (Prims.list @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.list @x2)))
:qid Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))

:named Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! 
;; def=Prims.fst(86,5-86,10); use=Prims.fst(86,5-86,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.empty)
(= Prims.empty
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.empty))
:qid Prims_pretyping_012c410d173b30f0cec8f55be7b4958c))

:named Prims_pretyping_012c410d173b30f0cec8f55be7b4958c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x2
@x3)))
:qid Prims_pre_typing_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named Prims_pre_typing_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2)))
:qid Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x2))

;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(ApplyTT @x1
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x2)))
:qid Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1))
(and 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1)))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.memP.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.memP.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.memP @x0
@x1
@x2)
(FStar.List.Tot.Base.memP.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.memP @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(94,99-96,3)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)





























; Encoding query formula : forall (a: Type) (x: a).
;   (*  - Could not prove post-condition
; *)
;   (forall (s: Sec2.HIFC.store).
;       (*  - Could not prove post-condition
; *)
;       s == FStar.Pervasives.Native.snd (x, s) /\ FStar.Pervasives.Native.fst (x, s) == x) /\
;   (forall (any_result: Sec2.HIFC.hst a (fun _ -> Prims.l_True) (fun s0 r s1 -> s0 == s1 /\ r == x)).
;       (fun s -> x, s) == any_result ==>
;       Sec2.HIFC.reads (fun s -> x, s) Sec2.HIFC.bot /\
;       Sec2.HIFC.writes (fun s -> x, s) Sec2.HIFC.bot /\ Sec2.HIFC.respects (fun s -> x, s) [])


; Context: While encoding a query
; While typechecking the top-level declaration `let return`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(94,99-96,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(94,99-96,3)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(95,48-95,66); use=Sec2.HIFC.fst(95,79-95,82)
(and 
;; def=Sec2.HIFC.fst(95,48-95,56); use=Sec2.HIFC.fst(95,79-95,82)
(or label_1

;; def=Sec2.HIFC.fst(95,48-95,56); use=Sec2.HIFC.fst(95,79-95,82)
(= @x2
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x1
@x2)))
)


;; def=Sec2.HIFC.fst(95,60-95,66); use=Sec2.HIFC.fst(95,79-95,82)
(or label_2

;; def=Sec2.HIFC.fst(95,60-95,66); use=Sec2.HIFC.fst(95,79-95,82)
(= (FStar.Pervasives.Native.fst @x0
Sec2.HIFC.store
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x1
@x2))
@x1)
)
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(94,99-96,3)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Sec2.HIFC.hst @x0
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x1
@x0)))

;; def=Sec2.HIFC.fst(95,6-95,82); use=Sec2.HIFC.fst(95,6-95,82)
(= (Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x1
@x0)
@x2)
)

;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(96,2-96,3)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(96,2-96,3)
(or label_3

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(96,2-96,3)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(96,2-96,3)
(Sec2.HIFC.reads @x0
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x1
@x0)
(Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x1
@x0)
(Sec2.HIFC.bot Dummy_value))
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(96,2-96,3)
(or label_4

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(96,2-96,3)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(96,2-96,3)
(Sec2.HIFC.writes @x0
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x1
@x0)
(Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x1
@x0)
(Sec2.HIFC.bot Dummy_value))
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(96,2-96,3)
(or label_5

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(96,2-96,3)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(96,2-96,3)
(Sec2.HIFC.respects @x0
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x1
@x0)
(Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x1
@x0)
(Prims.Nil Sec2.HIFC.flow))
)
)
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.return, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Prims.eqtype, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.sel, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, int_inversion, interpretation_Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a, lemma_FStar.Map.lemma_SelUpd2, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let return


; <Start encoding let return>

(declare-fun Sec2.HIFC.return (Term Term) Term)




;;;;;;;;;;;;;;;;a: Type -> x: a -> hifc a bot bot [] (fun _ -> Prims.l_True) (fun s0 r s1 -> s0 == s1 /\ r == x)
(declare-fun Tm_arrow_269ee42eaa8a92e02479f67a36d7d6df () Term)
(declare-fun Sec2.HIFC.return@tok () Term)








; </end encoding let return>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.single; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(51,4-51,10); use=Sec2.HIFC.fst(51,4-51,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType (Sec2.HIFC.single @x0)
Sec2.HIFC.label))
 

:pattern ((Sec2.HIFC.single @x0))
:qid typing_Sec2.HIFC.single))

:named typing_Sec2.HIFC.single))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.single
;;; Fact-ids: Name Sec2.HIFC.single; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(51,4-51,10); use=Sec2.HIFC.fst(51,4-51,10)
(forall ((@x0 Term))
 (! (= (Sec2.HIFC.single @x0)
(FStar.Set.singleton (Sec2.HIFC.loc Dummy_value)
@x0))
 

:pattern ((Sec2.HIFC.single @x0))
:qid equation_Sec2.HIFC.single))

:named equation_Sec2.HIFC.single))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(99,107-101,3)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


;;;;;;;;;;;;;;;;s0: store -> x: Prims.int -> s1: store -> Type
(declare-fun Tm_arrow_3058dd70c27cdd5bb06324151a2eca69 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_3058dd70c27cdd5bb06324151a2eca69
Tm_type)
:named kinding_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(12,13-100,17); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
:qid Sec2.HIFC_pre_typing_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))

:named Sec2.HIFC_pre_typing_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(12,13-100,17); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69)
(and 
;; def=Sec2.HIFC.fst(12,13-100,17); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
Prims.int)
(HasType @x3
Sec2.HIFC.store))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(12,13-100,17); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.store)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69.2))


;; def=Sec2.HIFC.fst(12,13-100,17); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
Prims.int))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
:qid Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))

:named Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
(declare-fun Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 (Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(100,50-100,75); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69)
 

:pattern ((Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0))
:qid typing_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841))

:named typing_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(100,50-100,75); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x3)
@x0)
@x1)
@x2)
(Prims.l_and (Prims.eq2 Sec2.HIFC.store
@x0
@x2)
(Prims.eq2 Prims.int
@x1
(Sec2.HIFC.sel @x0
@x3))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x3)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841))

:named interpretation_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841))




(declare-fun Tm_refine_9529abafdc772ca069b23b7c81336a0f (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_9529abafdc772ca069b23b7c81336a0f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_9529abafdc772ca069b23b7c81336a0f @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_9529abafdc772ca069b23b7c81336a0f))

:named refinement_kinding_Tm_refine_9529abafdc772ca069b23b7c81336a0f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9529abafdc772ca069b23b7c81336a0f @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 Prims.int
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(99,107-101,3)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(99,107-101,3)
(Prims.l_and (Prims.eq2 Sec2.HIFC.store
@x2
(FStar.Pervasives.Native.snd Prims.int
Sec2.HIFC.store
@x1))
(Prims.eq2 Prims.int
(FStar.Pervasives.Native.fst Prims.int
Sec2.HIFC.store
@x1)
(Sec2.HIFC.sel @x2
@x3)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9529abafdc772ca069b23b7c81336a0f @x2
@x3)))
:qid refinement_interpretation_Tm_refine_9529abafdc772ca069b23b7c81336a0f))

:named refinement_interpretation_Tm_refine_9529abafdc772ca069b23b7c81336a0f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9529abafdc772ca069b23b7c81336a0f
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9529abafdc772ca069b23b7c81336a0f @x0
@x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 Prims.int
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9529abafdc772ca069b23b7c81336a0f @x0
@x1))))
:qid haseqTm_refine_9529abafdc772ca069b23b7c81336a0f))

:named haseqTm_refine_9529abafdc772ca069b23b7c81336a0f))
;;;;;;;;;;;;;;;;s: store   -> r:     (Prims.int & store)       {s == FStar.Pervasives.Native.snd r /\ FStar.Pervasives.Native.fst r == sel s l}
(declare-fun Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x0)
Tm_type))
:qid kinding_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))

:named kinding_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))

:named Sec2.HIFC_pre_typing_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x1))
(and 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.store)
(HasType (ApplyTT @x0
@x2)
(Tm_refine_9529abafdc772ca069b23b7c81336a0f @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))

:named Sec2.HIFC_interpretation_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))
(declare-fun Tm_abs_1063a06958c00b4b72a910385e4b0f74 (Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_1063a06958c00b4b72a910385e4b0f74
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(100,88-100,98); use=Sec2.HIFC.fst(100,88-100,98)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0)
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x0))
 

:pattern ((Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0))
:qid typing_Tm_abs_1063a06958c00b4b72a910385e4b0f74))

:named typing_Tm_abs_1063a06958c00b4b72a910385e4b0f74))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1063a06958c00b4b72a910385e4b0f74
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(100,88-100,98); use=Sec2.HIFC.fst(100,88-100,98)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x1)
@x0)
(FStar.Pervasives.Native.Mktuple2 Prims.int
Sec2.HIFC.store
(Sec2.HIFC.sel @x0
@x1)
@x0))
 

:pattern ((ApplyTT (Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x1)
@x0))
:qid interpretation_Tm_abs_1063a06958c00b4b72a910385e4b0f74))

:named interpretation_Tm_abs_1063a06958c00b4b72a910385e4b0f74))


















; Encoding query formula : forall (l: Sec2.HIFC.loc).
;   (*  - Could not prove post-condition
; *)
;   (forall (s: Sec2.HIFC.store).
;       (*  - Could not prove post-condition
; *)
;       s == FStar.Pervasives.Native.snd (Sec2.HIFC.sel s l, s) /\
;       FStar.Pervasives.Native.fst (Sec2.HIFC.sel s l, s) == Sec2.HIFC.sel s l) /\
;   (forall (any_result:
;       Sec2.HIFC.hst Prims.int
;         (fun _ -> Prims.l_True)
;         (fun s0 x s1 -> s0 == s1 /\ x == Sec2.HIFC.sel s0 l)).
;       (fun s -> Sec2.HIFC.sel s l, s) == any_result ==>
;       Sec2.HIFC.reads (fun s -> Sec2.HIFC.sel s l, s) (Sec2.HIFC.single l) /\
;       Sec2.HIFC.writes (fun s -> Sec2.HIFC.sel s l, s) Sec2.HIFC.bot /\
;       Sec2.HIFC.respects (fun s -> Sec2.HIFC.sel s l, s) [])


; Context: While encoding a query
; While typechecking the top-level declaration `let iread`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
(Sec2.HIFC.loc Dummy_value))

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(99,107-101,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(100,50-100,75); use=Sec2.HIFC.fst(100,88-100,98)
(and 
;; def=Sec2.HIFC.fst(100,50-100,58); use=Sec2.HIFC.fst(100,88-100,98)
(or label_1

;; def=Sec2.HIFC.fst(100,50-100,58); use=Sec2.HIFC.fst(100,88-100,98)
(= @x1
(FStar.Pervasives.Native.snd Prims.int
Sec2.HIFC.store
(FStar.Pervasives.Native.Mktuple2 Prims.int
Sec2.HIFC.store
(Sec2.HIFC.sel @x1
@x0)
@x1)))
)


;; def=Sec2.HIFC.fst(100,62-100,75); use=Sec2.HIFC.fst(100,88-100,98)
(or label_2

;; def=Sec2.HIFC.fst(100,62-100,75); use=Sec2.HIFC.fst(100,88-100,98)
(= (FStar.Pervasives.Native.fst Prims.int
Sec2.HIFC.store
(FStar.Pervasives.Native.Mktuple2 Prims.int
Sec2.HIFC.store
(Sec2.HIFC.sel @x1
@x0)
@x1))
(Sec2.HIFC.sel @x1
@x0))
)
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(99,107-101,3)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Sec2.HIFC.hst Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)))

;; def=Sec2.HIFC.fst(100,6-100,98); use=Sec2.HIFC.fst(100,6-100,98)
(= (Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0)
@x1)
)

;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(101,2-101,3)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(101,2-101,3)
(or label_3

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(101,2-101,3)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(101,2-101,3)
(Sec2.HIFC.reads Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)
(Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0)
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(101,2-101,3)
(or label_4

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(101,2-101,3)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(101,2-101,3)
(Sec2.HIFC.writes Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)
(Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0)
(Sec2.HIFC.bot Dummy_value))
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(101,2-101,3)
(or label_5

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(101,2-101,3)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(101,2-101,3)
(Sec2.HIFC.respects Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)
(Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0)
(Prims.Nil Sec2.HIFC.flow))
)
)
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.iread, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Prims.eqtype, equation_Sec2.HIFC.agree_on, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.sel, equation_Sec2.HIFC.single, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, int_inversion, interpretation_Tm_abs_1063a06958c00b4b72a910385e4b0f74, lemma_FStar.Map.lemma_SelUpd2, lemma_FStar.Set.mem_singleton, primitive_Prims.op_Equality, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let iread


; <Start encoding let iread>

(declare-fun Sec2.HIFC.iread (Term) Term)


;;;;;;;;;;;;;;;;s0: store -> x: Prims.int -> s1: store -> Type
(declare-fun Tm_arrow_3058dd70c27cdd5bb06324151a2eca69 () Term)
(declare-fun Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 (Term) Term)
;;;;;;;;;;;;;;;;l: loc   -> hifc Prims.int       (single l)       bot       []       (fun _ -> Prims.l_True)       (fun s0 x s1 -> s0 == s1 /\ x == sel s0 l)
(declare-fun Tm_arrow_560421e4440ba246db6c2de3f0f5d449 () Term)
(declare-fun Sec2.HIFC.iread@tok () Term)




(declare-fun Tm_refine_9529abafdc772ca069b23b7c81336a0f (Term Term) Term)
;;;;;;;;;;;;;;;;s: store   -> r:     (Prims.int & store)       {s == FStar.Pervasives.Native.snd r /\ FStar.Pervasives.Native.fst r == sel s l}
(declare-fun Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba (Term) Term)
(declare-fun Tm_abs_1063a06958c00b4b72a910385e4b0f74 (Term) Term)

; </end encoding let iread>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(104,108-106,3)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


;;;;;;;;;;;;;;;;s0: store -> _: Prims.unit -> s1: store -> Type
(declare-fun Tm_arrow_273d4dced1c60f264fc624ef79088526 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_273d4dced1c60f264fc624ef79088526
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_273d4dced1c60f264fc624ef79088526
Tm_type)
:named kinding_Tm_arrow_273d4dced1c60f264fc624ef79088526))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(12,13-105,18); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_273d4dced1c60f264fc624ef79088526)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_273d4dced1c60f264fc624ef79088526))
:qid Sec2.HIFC_pre_typing_Tm_arrow_273d4dced1c60f264fc624ef79088526))

:named Sec2.HIFC_pre_typing_Tm_arrow_273d4dced1c60f264fc624ef79088526))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(12,13-105,18); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_273d4dced1c60f264fc624ef79088526)
(and 
;; def=Sec2.HIFC.fst(12,13-105,18); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
Prims.unit)
(HasType @x3
Sec2.HIFC.store))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(12,13-105,18); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.store)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526.2))


;; def=Sec2.HIFC.fst(12,13-105,18); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
Prims.unit))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_273d4dced1c60f264fc624ef79088526))
:qid Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526))

:named Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526))
(declare-fun Tm_abs_646db81909cc4e23f004eadbd1c87948 (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_646db81909cc4e23f004eadbd1c87948
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(105,51-105,67); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)
Tm_arrow_273d4dced1c60f264fc624ef79088526)
 

:pattern ((Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1))
:qid typing_Tm_abs_646db81909cc4e23f004eadbd1c87948))

:named typing_Tm_abs_646db81909cc4e23f004eadbd1c87948))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_646db81909cc4e23f004eadbd1c87948
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(105,51-105,67); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_646db81909cc4e23f004eadbd1c87948 @x3
@x4)
@x0)
@x1)
@x2)
(Prims.eq2 Sec2.HIFC.store
@x2
(Sec2.HIFC.upd @x0
@x3
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_646db81909cc4e23f004eadbd1c87948 @x3
@x4)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_646db81909cc4e23f004eadbd1c87948))

:named interpretation_Tm_abs_646db81909cc4e23f004eadbd1c87948))




(declare-fun Tm_refine_5f1781a61415e06189d852ef3c304242 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_5f1781a61415e06189d852ef3c304242 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_5f1781a61415e06189d852ef3c304242 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_5f1781a61415e06189d852ef3c304242))

:named refinement_kinding_Tm_refine_5f1781a61415e06189d852ef3c304242))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5f1781a61415e06189d852ef3c304242 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 Prims.unit
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(104,108-106,3)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(104,108-106,3)
(Prims.eq2 Sec2.HIFC.store
(FStar.Pervasives.Native.snd Prims.unit
Sec2.HIFC.store
@x1)
(Sec2.HIFC.upd @x2
@x3
@x4))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5f1781a61415e06189d852ef3c304242 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_5f1781a61415e06189d852ef3c304242))

:named refinement_interpretation_Tm_refine_5f1781a61415e06189d852ef3c304242))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5f1781a61415e06189d852ef3c304242
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5f1781a61415e06189d852ef3c304242 @x0
@x1
@x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 Prims.unit
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5f1781a61415e06189d852ef3c304242 @x0
@x1
@x2))))
:qid haseqTm_refine_5f1781a61415e06189d852ef3c304242))

:named haseqTm_refine_5f1781a61415e06189d852ef3c304242))
;;;;;;;;;;;;;;;;s: store -> r: (Prims.unit & store){FStar.Pervasives.Native.snd r == upd s l x}
(declare-fun Tm_arrow_4182d5cbc56ca1029b9a580811ac506d (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))

:named kinding_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))

:named Sec2.HIFC_pre_typing_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Sec2.HIFC.store)
(HasType (ApplyTT @x0
@x3)
(Tm_refine_5f1781a61415e06189d852ef3c304242 @x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))

:named Sec2.HIFC_interpretation_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))
(declare-fun Tm_abs_6a0f7f89976d121f804f25efeeaa811b (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_6a0f7f89976d121f804f25efeeaa811b
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(105,80-105,93); use=Sec2.HIFC.fst(105,80-105,93)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x0
@x1)
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x0
@x1))
 

:pattern ((Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x0
@x1))
:qid typing_Tm_abs_6a0f7f89976d121f804f25efeeaa811b))

:named typing_Tm_abs_6a0f7f89976d121f804f25efeeaa811b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_6a0f7f89976d121f804f25efeeaa811b
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(105,80-105,93); use=Sec2.HIFC.fst(105,80-105,93)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x2)
@x0)
(FStar.Pervasives.Native.Mktuple2 Prims.unit
Sec2.HIFC.store
Tm_unit
(Sec2.HIFC.upd @x0
@x2
@x1)))
 

:pattern ((ApplyTT (Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x2)
@x0))
:qid interpretation_Tm_abs_6a0f7f89976d121f804f25efeeaa811b))

:named interpretation_Tm_abs_6a0f7f89976d121f804f25efeeaa811b))


















; Encoding query formula : forall (l: Sec2.HIFC.loc) (x: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   (forall (s: Sec2.HIFC.store).
;       (*  - Could not prove post-condition
; *)
;       FStar.Pervasives.Native.snd ((), Sec2.HIFC.upd s l x) == Sec2.HIFC.upd s l x) /\
;   (forall (any_result:
;       Sec2.HIFC.hst Prims.unit (fun _ -> Prims.l_True) (fun s0 _ s1 -> s1 == Sec2.HIFC.upd s0 l x)).
;       (fun s -> (), Sec2.HIFC.upd s l x) == any_result ==>
;       Sec2.HIFC.reads (fun s -> (), Sec2.HIFC.upd s l x) Sec2.HIFC.bot /\
;       Sec2.HIFC.writes (fun s -> (), Sec2.HIFC.upd s l x) (Sec2.HIFC.single l) /\
;       Sec2.HIFC.respects (fun s -> (), Sec2.HIFC.upd s l x) [])


; Context: While encoding a query
; While typechecking the top-level declaration `let iwrite`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
Prims.int))

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(104,108-106,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(105,51-105,67); use=Sec2.HIFC.fst(105,80-105,93)
(or label_1

;; def=Sec2.HIFC.fst(105,51-105,67); use=Sec2.HIFC.fst(105,80-105,93)
(= (FStar.Pervasives.Native.snd Prims.unit
Sec2.HIFC.store
(FStar.Pervasives.Native.Mktuple2 Prims.unit
Sec2.HIFC.store
Tm_unit
(Sec2.HIFC.upd @x2
@x0
@x1)))
(Sec2.HIFC.upd @x2
@x0
@x1))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(104,108-106,3)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Sec2.HIFC.hst Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)))

;; def=Sec2.HIFC.fst(105,6-105,93); use=Sec2.HIFC.fst(105,6-105,93)
(= (Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x0)
@x2)
)

;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(106,2-106,3)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(106,2-106,3)
(or label_2

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(106,2-106,3)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(106,2-106,3)
(Sec2.HIFC.reads Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)
(Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x0)
(Sec2.HIFC.bot Dummy_value))
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(106,2-106,3)
(or label_3

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(106,2-106,3)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(106,2-106,3)
(Sec2.HIFC.writes Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)
(Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x0)
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(106,2-106,3)
(or label_4

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(106,2-106,3)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(106,2-106,3)
(Sec2.HIFC.respects Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)
(Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x0)
(Prims.Nil Sec2.HIFC.flow))
)
)
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.iwrite, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_f8666440faa91836cc5a13998af863fc, equation_FStar.Pervasives.Native.snd, equation_Prims.eqtype, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.sel, equation_Sec2.HIFC.single, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, int_inversion, interpretation_Tm_abs_6a0f7f89976d121f804f25efeeaa811b, lemma_FStar.Map.lemma_SelUpd1, lemma_FStar.Map.lemma_SelUpd2, lemma_FStar.Set.mem_singleton, primitive_Prims.op_Equality, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_FStar.Map.upd, typing_Prims.int, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let iwrite


; <Start encoding let iwrite>

(declare-fun Sec2.HIFC.iwrite (Term Term) Term)


;;;;;;;;;;;;;;;;s0: store -> _: Prims.unit -> s1: store -> Type
(declare-fun Tm_arrow_273d4dced1c60f264fc624ef79088526 () Term)
(declare-fun Tm_abs_646db81909cc4e23f004eadbd1c87948 (Term Term) Term)
;;;;;;;;;;;;;;;;l: loc -> x: Prims.int   -> hifc Prims.unit bot (single l) [] (fun _ -> Prims.l_True) (fun s0 _ s1 -> s1 == upd s0 l x)
(declare-fun Tm_arrow_09ec7f13dc787e8aec2044998e686a90 () Term)
(declare-fun Sec2.HIFC.iwrite@tok () Term)




(declare-fun Tm_refine_5f1781a61415e06189d852ef3c304242 (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: store -> r: (Prims.unit & store){FStar.Pervasives.Native.snd r == upd s l x}
(declare-fun Tm_arrow_4182d5cbc56ca1029b9a580811ac506d (Term Term) Term)
(declare-fun Tm_abs_6a0f7f89976d121f804f25efeeaa811b (Term Term) Term)

; </end encoding let iwrite>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(114,27-125,30)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hst a p q)
;   (reads: Sec2.HIFC.label)
;   (l: Sec2.HIFC.loc)
;   (s0: Sec2.HIFC.store{p s0})
;   (v: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   p (Sec2.HIFC.upd s0 l v) ==>
;   (forall (b: a) (b: Sec2.HIFC.store).
;       f s0 == (b, b) ==> Prims.auto_squash (p (Sec2.HIFC.upd s0 l v)))


; Context: While encoding a query
; While typechecking the top-level declaration `let does_not_read_loc_v`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))
(HasType @x7
Prims.int)

;; def=Sec2.HIFC.fst(116,4-116,9); use=Sec2.HIFC.fst(116,4-116,9)
(Valid 
;; def=Sec2.HIFC.fst(116,4-116,9); use=Sec2.HIFC.fst(116,4-116,9)
(ApplyTT @x1
(Sec2.HIFC.upd @x6
@x5
@x7))
)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(116,4-125,30)
(forall ((@x8 Term))
 (! (implies (HasType @x8
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(116,4-125,30)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(117,8-117,14); use=Sec2.HIFC.fst(117,8-117,14)
(= (ApplyTT @x3
@x6)
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x8
@x9))
)

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(118,21-118,24)
(or label_1

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(118,21-118,24)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(118,21-118,24)
(ApplyTT @x1
(Sec2.HIFC.upd @x6
@x5
@x7))
)
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.does_not_read_loc_v, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let does_not_read_loc_v


; <Start encoding let does_not_read_loc_v>


(declare-fun Sec2.HIFC.does_not_read_loc_v (Term Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: hst a p q -> reads: label -> l: loc -> s0: store{p s0} -> v: Prims.int -> Prims.logical
(declare-fun Tm_arrow_678149042d3945a0d905f01c80af68f8 () Term)
(declare-fun Sec2.HIFC.does_not_read_loc_v@tok () Term)


; </end encoding let does_not_read_loc_v>


; encoding sigelt let does_not_read_loc


; <Start encoding let does_not_read_loc>


(declare-fun Sec2.HIFC.does_not_read_loc (Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: hst a p q -> reads: label -> l: loc -> s0: store{p s0} -> Prims.logical
(declare-fun Tm_arrow_f1d63a009ed099e236b5e96a211245bc () Term)
(declare-fun Sec2.HIFC.does_not_read_loc@tok () Term)


; </end encoding let does_not_read_loc>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(135,4-135,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hst a p q)
;   (rds: Sec2.HIFC.label)
;   (s0: Sec2.HIFC.store{p s0})
;   (s0': Sec2.HIFC.store{p s0'}).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     Sec2.HIFC.agree_on rds s0 s0' /\ Sec2.HIFC.reads f rds /\
;     (forall (pure_result: Prims.unit).
;         (let _, s1 = f s0 in
;           (let _, s1' = f s0' in
;             Sec2.HIFC.agree_on rds s1 s1')
;           <:
;           Type0) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let reads_ok_preserves_equal_locs`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))
(HasType @x6
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(131,20-131,39); use=Sec2.HIFC.fst(135,4-135,6)
(Valid 
;; def=Sec2.HIFC.fst(131,20-131,39); use=Sec2.HIFC.fst(135,4-135,6)
(Sec2.HIFC.agree_on @x4
@x5
@x6)
)


;; def=Sec2.HIFC.fst(131,43-131,54); use=Sec2.HIFC.fst(135,4-135,6)
(Valid 
;; def=Sec2.HIFC.fst(131,43-131,54); use=Sec2.HIFC.fst(135,4-135,6)
(Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(135,4-135,6)
(forall ((@x8 Term))
 (! (implies (and (or label_1
(HasType @x8
Prims.unit))
(let ((@lb9 (ApplyTT @x3
@x5)))
(let ((@lb10 (ApplyTT @x3
@x6)))

;; def=Sec2.HIFC.fst(134,20-134,39); use=Sec2.HIFC.fst(135,4-135,6)
(or label_2

;; def=Sec2.HIFC.fst(134,20-134,39); use=Sec2.HIFC.fst(135,4-135,6)
(Valid 
;; def=Sec2.HIFC.fst(134,20-134,39); use=Sec2.HIFC.fst(135,4-135,6)
(Sec2.HIFC.agree_on @x4
(FStar.Pervasives.Native.Mktuple2__2 @lb9)
(FStar.Pervasives.Native.Mktuple2__2 @lb10))
)
)
)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(135,4-135,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(135,4-135,6)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(135,4-135,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(135,4-135,6)
(ApplyTT @x7
@x8)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x8 Term))
 (! (implies (HasType @x8
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x7
@x8)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.reads_ok_preserves_equal_locs, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_Sec2.HIFC.agree_on, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let reads_ok_preserves_equal_locs


; <Start encoding let reads_ok_preserves_equal_locs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.reads_ok_preserves_equal_locs (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.reads_ok_preserves_equal_locs@tok () Term)

; </end encoding let reads_ok_preserves_equal_locs>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.label_inclusion; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(49,4-49,19); use=Sec2.HIFC.fst(49,4-49,19)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.label))
(HasType (Sec2.HIFC.label_inclusion @x0
@x1)
Prims.logical))
 

:pattern ((Sec2.HIFC.label_inclusion @x0
@x1))
:qid typing_Sec2.HIFC.label_inclusion))

:named typing_Sec2.HIFC.label_inclusion))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.subset; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(50,4-50,10); use=FStar.Set.fsti(50,4-50,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.subset @x0
@x1
@x2)
Prims.logical))
 

:pattern ((FStar.Set.subset @x0
@x1
@x2))
:qid typing_FStar.Set.subset))

:named typing_FStar.Set.subset))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.subset_mem
;;; Fact-ids: Name FStar.Set.subset_mem; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(95,13-95,27); use=FStar.Set.fsti(95,13-95,27)
(Valid 
;; def=FStar.Set.fsti(95,13-95,27); use=FStar.Set.fsti(95,13-95,27)
(FStar.Set.subset @x0
@x1
@x2)
)
)

;; def=FStar.Set.fsti(96,12-96,45); use=FStar.Set.fsti(96,12-96,45)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
@x0)

;; def=FStar.Set.fsti(96,23-96,31); use=FStar.Set.fsti(96,23-96,31)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x1))
)

;; def=FStar.Set.fsti(96,36-96,44); use=FStar.Set.fsti(96,36-96,44)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.subset_mem.1))
)
 

:pattern ((FStar.Set.subset @x0
@x1
@x2))
:qid lemma_FStar.Set.subset_mem))
:named lemma_FStar.Set.subset_mem))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_subset
;;; Fact-ids: Name FStar.Set.mem_subset; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(90,13-90,46); use=FStar.Set.fsti(90,13-90,46)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
@x0)

;; def=FStar.Set.fsti(90,24-90,32); use=FStar.Set.fsti(90,24-90,32)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x1))
)

;; def=FStar.Set.fsti(90,37-90,45); use=FStar.Set.fsti(90,37-90,45)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.mem_subset.1))
)

;; def=FStar.Set.fsti(91,12-91,26); use=FStar.Set.fsti(91,12-91,26)
(Valid 
;; def=FStar.Set.fsti(91,12-91,26); use=FStar.Set.fsti(91,12-91,26)
(FStar.Set.subset @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.subset @x0
@x1
@x2))
:qid lemma_FStar.Set.mem_subset))
:named lemma_FStar.Set.mem_subset))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.label_inclusion
;;; Fact-ids: Name Sec2.HIFC.label_inclusion; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(49,4-49,19); use=Sec2.HIFC.fst(49,4-49,19)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Sec2.HIFC.label_inclusion @x0
@x1))

;; def=Sec2.HIFC.fst(49,36-49,52); use=Sec2.HIFC.fst(49,36-49,52)
(Valid 
;; def=Sec2.HIFC.fst(49,36-49,52); use=Sec2.HIFC.fst(49,36-49,52)
(FStar.Set.subset (Sec2.HIFC.loc Dummy_value)
@x0
@x1)
)
)
 

:pattern ((Sec2.HIFC.label_inclusion @x0
@x1))
:qid equation_Sec2.HIFC.label_inclusion))

:named equation_Sec2.HIFC.label_inclusion))
;;;;;;;;;;;;;;;;Equation for FStar.Set.subset
;;; Fact-ids: Name FStar.Set.subset; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(50,4-50,10); use=FStar.Set.fsti(50,4-50,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.Set.subset @x0
@x1
@x2))

;; def=FStar.Set.fsti(51,2-51,33); use=FStar.Set.fsti(51,2-51,33)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
@x0)

;; def=FStar.Set.fsti(51,12-51,20); use=FStar.Set.fsti(51,12-51,20)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x1))
)

;; def=FStar.Set.fsti(51,25-51,33); use=FStar.Set.fsti(51,25-51,33)
(BoxBool_proj_0 (FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid equation_FStar.Set.subset.1))
)
 

:pattern ((FStar.Set.subset @x0
@x1
@x2))
:qid equation_FStar.Set.subset))

:named equation_FStar.Set.subset))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.label_inclusion
;;; Fact-ids: Name Sec2.HIFC.label_inclusion; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(49,4-49,19); use=Sec2.HIFC.fst(49,4-49,19)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.label_inclusion @x0
@x1)
(FStar.Set.subset (Sec2.HIFC.loc Dummy_value)
@x0
@x1))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.label_inclusion @x0
@x1)
Prims.unit))
:qid defn_equation_Sec2.HIFC.label_inclusion))

:named defn_equation_Sec2.HIFC.label_inclusion))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Set.subset
;;; Fact-ids: Name FStar.Set.subset; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(50,4-50,10); use=FStar.Set.fsti(50,4-50,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(Valid (Prims.subtype_of (FStar.Set.subset @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Set.subset @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_FStar.Set.subset))

:named defn_equation_FStar.Set.subset))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(141,3-147,6)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_41b7d72aa578b9b553a5402dcff4fb81 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(142,6-144,42); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_41b7d72aa578b9b553a5402dcff4fb81 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_41b7d72aa578b9b553a5402dcff4fb81 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_41b7d72aa578b9b553a5402dcff4fb81))

:named refinement_kinding_Tm_refine_41b7d72aa578b9b553a5402dcff4fb81))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(142,6-144,42); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_41b7d72aa578b9b553a5402dcff4fb81 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(141,3-147,6)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(141,3-147,6)
(and 
;; def=Sec2.HIFC.fst(142,22-142,26); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(142,22-142,26); use=Sec2.HIFC.fst(141,3-147,6)
(ApplyTT @x2
@x3)
)


;; def=Sec2.HIFC.fst(142,30-142,35); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(142,30-142,35); use=Sec2.HIFC.fst(141,3-147,6)
(ApplyTT @x2
@x4)
)


;; def=Sec2.HIFC.fst(142,39-142,59); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(142,39-142,59); use=Sec2.HIFC.fst(141,3-147,6)
(Sec2.HIFC.agree_on @x5
@x3
@x4)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=Sec2.HIFC.fst(143,21-143,40); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(143,21-143,40); use=Sec2.HIFC.fst(141,3-147,6)
(Sec2.HIFC.agree_on @x6
@x3
@x4)
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(141,3-147,6)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(141,3-147,6)
(= @x7
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_41b7d72aa578b9b553a5402dcff4fb81.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_41b7d72aa578b9b553a5402dcff4fb81 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_41b7d72aa578b9b553a5402dcff4fb81))

:named refinement_interpretation_Tm_refine_41b7d72aa578b9b553a5402dcff4fb81))
;;;;;;;;;;;;;;;;haseq for Tm_refine_41b7d72aa578b9b553a5402dcff4fb81
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(142,6-144,42); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_41b7d72aa578b9b553a5402dcff4fb81 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_41b7d72aa578b9b553a5402dcff4fb81 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_41b7d72aa578b9b553a5402dcff4fb81))

:named haseqTm_refine_41b7d72aa578b9b553a5402dcff4fb81))
;;;;;;;;;;;;;;;;s0: store -> s0': store   -> FStar.Pervasives.Lemma (requires p s0 /\ p s0' /\ agree_on rds1 s0 s0')       (ensures agree_on rds s0 s0')       [SMTPat (agree_on rds1 s0 s0')]
(declare-fun Tm_arrow_703f6672319e09884e1fac88eeec0d27 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_703f6672319e09884e1fac88eeec0d27
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(61,35-144,42); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_703f6672319e09884e1fac88eeec0d27 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_703f6672319e09884e1fac88eeec0d27 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_703f6672319e09884e1fac88eeec0d27))

:named kinding_Tm_arrow_703f6672319e09884e1fac88eeec0d27))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(61,35-144,42); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_703f6672319e09884e1fac88eeec0d27 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_703f6672319e09884e1fac88eeec0d27 @x2
@x3
@x4)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_703f6672319e09884e1fac88eeec0d27))

:named Sec2.HIFC_pre_typing_Tm_arrow_703f6672319e09884e1fac88eeec0d27))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_703f6672319e09884e1fac88eeec0d27
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(61,35-144,42); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_703f6672319e09884e1fac88eeec0d27 @x1
@x2
@x3))
(and 
;; def=Sec2.HIFC.fst(61,35-144,42); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=Sec2.HIFC.fst(142,22-142,26); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(142,22-142,26); use=Sec2.HIFC.fst(141,3-147,6)
(ApplyTT @x3
@x4)
)


;; def=Sec2.HIFC.fst(142,30-142,35); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(142,30-142,35); use=Sec2.HIFC.fst(141,3-147,6)
(ApplyTT @x3
@x5)
)


;; def=Sec2.HIFC.fst(142,39-142,59); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(142,39-142,59); use=Sec2.HIFC.fst(141,3-147,6)
(Sec2.HIFC.agree_on @x2
@x4
@x5)
)

(HasType @x4
Sec2.HIFC.store)
(HasType @x5
Sec2.HIFC.store))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(Tm_refine_41b7d72aa578b9b553a5402dcff4fb81 @x3
@x4
@x5
@x2
@x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid Sec2.HIFC_interpretation_Tm_arrow_703f6672319e09884e1fac88eeec0d27.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(61,35-144,42); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Sec2.HIFC.store)
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_703f6672319e09884e1fac88eeec0d27.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_703f6672319e09884e1fac88eeec0d27 @x1
@x2
@x3)))
:qid Sec2.HIFC_interpretation_Tm_arrow_703f6672319e09884e1fac88eeec0d27))

:named Sec2.HIFC_interpretation_Tm_arrow_703f6672319e09884e1fac88eeec0d27))

; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hst a p q)
;   (rds: Sec2.HIFC.label)
;   (rds1: Sec2.HIFC.label).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     Sec2.HIFC.reads f rds /\ Sec2.HIFC.label_inclusion rds rds1 /\
;     (forall (pure_result: Prims.unit). Sec2.HIFC.reads f rds1 ==> p pure_result) ==>
;     (forall (s0: Sec2.HIFC.store) (s0': Sec2.HIFC.store).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           p s0 /\ p s0' /\ Sec2.HIFC.agree_on rds1 s0 s0' /\
;           (forall (pure_result: Prims.unit). Sec2.HIFC.agree_on rds s0 s0' ==> p pure_result) ==>
;           (forall (any_result: Prims.unit). p any_result)) /\
;     (forall (any_result:
;         (s0: Sec2.HIFC.store -> s0': Sec2.HIFC.store
;             -> FStar.Pervasives.Lemma (requires p s0 /\ p s0' /\ Sec2.HIFC.agree_on rds1 s0 s0')
;                 (ensures Sec2.HIFC.agree_on rds s0 s0')
;                 [SMTPat (Sec2.HIFC.agree_on rds1 s0 s0')])).
;         (forall (s0: Sec2.HIFC.store) (s0': Sec2.HIFC.store).
;             {:pattern Sec2.HIFC.agree_on rds1 s0 s0'}
;             p s0 /\ p s0' /\ Sec2.HIFC.agree_on rds1 s0 s0' ==> Sec2.HIFC.agree_on rds s0 s0') ==>
;         (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let weaken_reads_ok`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(141,3-147,6)
(Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4)
)


;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(141,3-147,6)
(Sec2.HIFC.label_inclusion @x4
@x5)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x7 Term))
 (! (implies (and (or label_1
(HasType @x7
Prims.unit))

;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(141,3-147,6)
(or label_2

;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(141,3-147,6)
(Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x5)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(141,3-147,6)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(141,3-147,6)
(ApplyTT @x6
@x7)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(141,3-147,6)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
Sec2.HIFC.store)
(HasType @x8
Sec2.HIFC.store))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(142,22-142,26); use=Sec2.HIFC.fst(145,6-145,8)
(Valid 
;; def=Sec2.HIFC.fst(142,22-142,26); use=Sec2.HIFC.fst(145,6-145,8)
(ApplyTT @x1
@x7)
)


;; def=Sec2.HIFC.fst(142,30-142,35); use=Sec2.HIFC.fst(145,6-145,8)
(Valid 
;; def=Sec2.HIFC.fst(142,30-142,35); use=Sec2.HIFC.fst(145,6-145,8)
(ApplyTT @x1
@x8)
)


;; def=Sec2.HIFC.fst(142,39-142,59); use=Sec2.HIFC.fst(145,6-145,8)
(Valid 
;; def=Sec2.HIFC.fst(142,39-142,59); use=Sec2.HIFC.fst(145,6-145,8)
(Sec2.HIFC.agree_on @x5
@x7
@x8)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(145,6-145,8)
(forall ((@x10 Term))
 (! (implies (and (or label_3
(HasType @x10
Prims.unit))

;; def=Sec2.HIFC.fst(143,21-143,40); use=Sec2.HIFC.fst(145,6-145,8)
(or label_4

;; def=Sec2.HIFC.fst(143,21-143,40); use=Sec2.HIFC.fst(145,6-145,8)
(Valid 
;; def=Sec2.HIFC.fst(143,21-143,40); use=Sec2.HIFC.fst(145,6-145,8)
(Sec2.HIFC.agree_on @x4
@x7
@x8)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(145,6-145,8)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(145,6-145,8)
(ApplyTT @x9
@x10)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(145,6-145,8)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(145,6-145,8)
(ApplyTT @x9
@x10)
)
)
:qid @query.5))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(141,3-147,6)
(ApplyTT @x9
@x10)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_arrow_703f6672319e09884e1fac88eeec0d27 @x4
@x5
@x1))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
Sec2.HIFC.store)
(HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(142,22-142,26); use=Sec2.HIFC.fst(142,22-142,26)
(Valid 
;; def=Sec2.HIFC.fst(142,22-142,26); use=Sec2.HIFC.fst(142,22-142,26)
(ApplyTT @x1
@x8)
)


;; def=Sec2.HIFC.fst(142,30-142,35); use=Sec2.HIFC.fst(142,30-142,35)
(Valid 
;; def=Sec2.HIFC.fst(142,30-142,35); use=Sec2.HIFC.fst(142,30-142,35)
(ApplyTT @x1
@x9)
)


;; def=Sec2.HIFC.fst(142,39-142,59); use=Sec2.HIFC.fst(142,39-142,59)
(Valid 
;; def=Sec2.HIFC.fst(142,39-142,59); use=Sec2.HIFC.fst(142,39-142,59)
(Sec2.HIFC.agree_on @x5
@x8
@x9)
)
)

;; def=Sec2.HIFC.fst(143,21-143,40); use=Sec2.HIFC.fst(143,21-143,40)
(Valid 
;; def=Sec2.HIFC.fst(143,21-143,40); use=Sec2.HIFC.fst(143,21-143,40)
(Sec2.HIFC.agree_on @x4
@x8
@x9)
)
)
 

:pattern ((Sec2.HIFC.agree_on @x5
@x8
@x9))
:qid @query.8))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(141,3-147,6)
(forall ((@x8 Term))
 (! (implies (HasType @x8
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(141,3-147,6)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(141,3-147,6)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.weaken_reads_ok, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_FStar.Set.subset, equation_Sec2.HIFC.agree_on, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.reads, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let weaken_reads_ok


; <Start encoding let weaken_reads_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.weaken_reads_ok (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.weaken_reads_ok@tok () Term)

; </end encoding let weaken_reads_ok>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.does_not_read_loc_v; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(110,4-110,23); use=Sec2.HIFC.fst(110,4-110,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))
(HasType @x7
Prims.int))
(HasType (Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Prims.logical))
 

:pattern ((Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Sec2.HIFC.does_not_read_loc_v))

:named typing_Sec2.HIFC.does_not_read_loc_v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.does_not_read_loc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(127,4-127,21); use=Sec2.HIFC.fst(127,4-127,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1)))
(HasType (Sec2.HIFC.does_not_read_loc @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.logical))
 

:pattern ((Sec2.HIFC.does_not_read_loc @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_Sec2.HIFC.does_not_read_loc))

:named typing_Sec2.HIFC.does_not_read_loc))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.does_not_read_loc_v
;;; Fact-ids: Name Sec2.HIFC.does_not_read_loc_v; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(110,4-110,23); use=Sec2.HIFC.fst(110,4-110,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (Valid (Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))

;; def=Sec2.HIFC.fst(116,4-125,30); use=Sec2.HIFC.fst(116,4-125,30)
(implies 
;; def=Sec2.HIFC.fst(116,4-116,9); use=Sec2.HIFC.fst(116,4-116,9)
(Valid 
;; def=Sec2.HIFC.fst(116,4-116,9); use=Sec2.HIFC.fst(116,4-116,9)
(ApplyTT @x1
(Sec2.HIFC.upd @x6
@x5
@x7))
)

(let ((@lb8 (ApplyTT @x3
@x6)))
(let ((@lb9 (ApplyTT @x3
(Sec2.HIFC.upd @x6
@x5
@x7))))

;; def=Sec2.HIFC.fst(119,4-125,29); use=Sec2.HIFC.fst(119,4-125,29)
(and 
;; def=Sec2.HIFC.fst(119,4-119,13); use=Sec2.HIFC.fst(119,4-119,13)
(= (FStar.Pervasives.Native.Mktuple2__1 @lb8)
(FStar.Pervasives.Native.Mktuple2__1 @lb9))


;; def=Sec2.HIFC.fst(120,4-121,35); use=Sec2.HIFC.fst(120,4-121,35)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(120,16-120,23); use=Sec2.HIFC.fst(120,16-120,23)
(not (= @x10
@x5))
)

;; def=Sec2.HIFC.fst(121,11-121,34); use=Sec2.HIFC.fst(121,11-121,34)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb8)
@x10)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb9)
@x10))
)
 
;;no pats
:qid equation_Sec2.HIFC.does_not_read_loc_v.1))


;; def=Sec2.HIFC.fst(122,4-125,29); use=Sec2.HIFC.fst(122,4-125,29)
(or 
;; def=Sec2.HIFC.fst(122,5-122,26); use=Sec2.HIFC.fst(122,5-122,26)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb8)
@x5)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb9)
@x5))


;; def=Sec2.HIFC.fst(124,4-125,28); use=Sec2.HIFC.fst(124,4-125,28)
(and 
;; def=Sec2.HIFC.fst(124,5-124,25); use=Sec2.HIFC.fst(124,5-124,25)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb8)
@x5)
(Sec2.HIFC.sel @x6
@x5))


;; def=Sec2.HIFC.fst(125,5-125,27); use=Sec2.HIFC.fst(125,5-125,27)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb9)
@x5)
(Sec2.HIFC.sel (Sec2.HIFC.upd @x6
@x5
@x7)
@x5))
)
)
)
)))
)
 

:pattern ((Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid equation_Sec2.HIFC.does_not_read_loc_v))

:named equation_Sec2.HIFC.does_not_read_loc_v))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.does_not_read_loc
;;; Fact-ids: Name Sec2.HIFC.does_not_read_loc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(127,4-127,21); use=Sec2.HIFC.fst(127,4-127,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Valid (Sec2.HIFC.does_not_read_loc @x0
@x1
@x2
@x3
@x4
@x5
@x6))

;; def=Sec2.HIFC.fst(128,2-128,46); use=Sec2.HIFC.fst(128,2-128,46)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Prims.int)

;; def=Sec2.HIFC.fst(128,12-128,46); use=Sec2.HIFC.fst(128,12-128,46)
(Valid 
;; def=Sec2.HIFC.fst(128,12-128,46); use=Sec2.HIFC.fst(128,12-128,46)
(Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
)
)
 
;;no pats
:qid equation_Sec2.HIFC.does_not_read_loc.1))
)
 

:pattern ((Sec2.HIFC.does_not_read_loc @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_Sec2.HIFC.does_not_read_loc))

:named equation_Sec2.HIFC.does_not_read_loc))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.does_not_read_loc_v
;;; Fact-ids: Name Sec2.HIFC.does_not_read_loc_v; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(110,4-110,23); use=Sec2.HIFC.fst(110,4-110,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1))
(HasType @x7
Prims.int))
(Valid (Prims.subtype_of (Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Prims.unit))
:qid defn_equation_Sec2.HIFC.does_not_read_loc_v))

:named defn_equation_Sec2.HIFC.does_not_read_loc_v))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.does_not_read_loc
;;; Fact-ids: Name Sec2.HIFC.does_not_read_loc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(127,4-127,21); use=Sec2.HIFC.fst(127,4-127,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
(Sec2.HIFC.loc Dummy_value))
(HasType @x6
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1)))
(Valid (Prims.subtype_of (Sec2.HIFC.does_not_read_loc @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.does_not_read_loc @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Prims.unit))
:qid defn_equation_Sec2.HIFC.does_not_read_loc))

:named defn_equation_Sec2.HIFC.does_not_read_loc))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(153,3-160,6)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_c1c63d5cc68c7c904c0b757378643161 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(149,66-149,91); use=Sec2.HIFC.fst(149,66-149,91)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_c1c63d5cc68c7c904c0b757378643161))

:named refinement_kinding_Tm_refine_c1c63d5cc68c7c904c0b757378643161))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(149,66-149,91); use=Sec2.HIFC.fst(149,66-149,91)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x2))
(and (HasTypeFuel @u0
@x1
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(149,73-149,89); use=Sec2.HIFC.fst(149,73-149,89)
(not 
;; def=Sec2.HIFC.fst(149,74-149,89); use=Sec2.HIFC.fst(149,74-149,89)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x1
@x2))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x2)))
:qid refinement_interpretation_Tm_refine_c1c63d5cc68c7c904c0b757378643161))

:named refinement_interpretation_Tm_refine_c1c63d5cc68c7c904c0b757378643161))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c1c63d5cc68c7c904c0b757378643161
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(149,66-149,91); use=Sec2.HIFC.fst(149,66-149,91)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x0)))
(Valid (Prims.hasEq (Sec2.HIFC.loc Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x0))))
:qid haseqTm_refine_c1c63d5cc68c7c904c0b757378643161))

:named haseqTm_refine_c1c63d5cc68c7c904c0b757378643161))

(declare-fun Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(154,8-156,37); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type)
 

:pattern ((HasType (Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
:qid refinement_kinding_Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77))

:named refinement_kinding_Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(154,8-156,37); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(153,3-160,6)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(153,3-160,6)
(and 
;; def=Sec2.HIFC.fst(154,24-154,38); use=Sec2.HIFC.fst(153,3-160,6)
(Valid 
;; def=Sec2.HIFC.fst(154,24-154,38); use=Sec2.HIFC.fst(153,3-160,6)
(ApplyTT @x2
(Sec2.HIFC.upd @x3
@x4
@x5))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=Sec2.HIFC.fst(155,23-155,55); use=Sec2.HIFC.fst(153,3-160,6)
(Valid 
;; def=Sec2.HIFC.fst(155,23-155,55); use=Sec2.HIFC.fst(153,3-160,6)
(Sec2.HIFC.does_not_read_loc_v @x6
@x2
@x7
@x8
@x9
@x4
@x3
@x5)
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(153,3-160,6)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(153,3-160,6)
(= @x10
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid refinement_interpretation_Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77))

:named refinement_interpretation_Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77))
;;;;;;;;;;;;;;;;haseq for Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(154,8-156,37); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))))
:qid haseqTm_refine_81e35ea4c03ded2f10a68055ba4e3c77))

:named haseqTm_refine_81e35ea4c03ded2f10a68055ba4e3c77))
;;;;;;;;;;;;;;;;v: Prims.int   -> FStar.Pervasives.Lemma (requires p (upd s0 l v))       (ensures does_not_read_loc_v f rds l s0 v)       [SMTPat (upd s0 l v)]
(declare-fun Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(153,15-156,37); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid kinding_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba))

:named kinding_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(153,15-156,37); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba))

:named Sec2.HIFC_pre_typing_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(153,15-156,37); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba @x1
@x2
@x3
@x4
@x5
@x6
@x7))
(and 
;; def=Sec2.HIFC.fst(153,15-156,37); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x8 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(153,3-160,6)
(Valid 
;; def=Sec2.HIFC.fst(154,24-154,38); use=Sec2.HIFC.fst(153,3-160,6)
(ApplyTT @x7
(Sec2.HIFC.upd @x6
@x5
@x8))
)

(HasType @x8
Prims.int))
(HasType (ApplyTT @x0
@x8)
(Tm_refine_81e35ea4c03ded2f10a68055ba4e3c77 @x7
@x6
@x5
@x8
@x4
@x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x8))
:qid Sec2.HIFC_interpretation_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
:qid Sec2.HIFC_interpretation_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba))

:named Sec2.HIFC_interpretation_Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba))

; Encoding query formula : forall (a: Type)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hst a p q)
;   (rds: Sec2.HIFC.label)
;   (l: Sec2.HIFC.loc{~(FStar.Set.mem l rds)})
;   (s0: Sec2.HIFC.store{p s0}).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     Sec2.HIFC.reads f rds /\
;     (forall (pure_result: Prims.unit). Sec2.HIFC.does_not_read_loc f rds l s0 ==> p pure_result) ==>
;     (forall (v: Prims.int).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           p (Sec2.HIFC.upd s0 l v) /\
;           (forall (pure_result: Prims.unit).
;               Sec2.HIFC.does_not_read_loc_v f rds l s0 v ==> p pure_result) ==>
;           Sec2.HIFC.agree_on rds s0 (Sec2.HIFC.upd s0 l v) /\
;           (forall (pure_result: Prims.unit).
;               Sec2.HIFC.agree_on rds s0 (Sec2.HIFC.upd s0 l v) ==>
;               (forall (any_result: Prims.unit). p any_result))) /\
;     (forall (any_result:
;         (v: Prims.int
;             -> FStar.Pervasives.Lemma (requires p (Sec2.HIFC.upd s0 l v))
;                 (ensures Sec2.HIFC.does_not_read_loc_v f rds l s0 v)
;                 [SMTPat (Sec2.HIFC.upd s0 l v)])).
;         (forall (v: Prims.int). {:pattern Sec2.HIFC.upd s0 l v}
;             p (Sec2.HIFC.upd s0 l v) ==> Sec2.HIFC.does_not_read_loc_v f rds l s0 v) ==>
;         (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let reads_ok_does_not_read_loc`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.pre)
(HasType @x2
(Sec2.HIFC.post @x0))
(HasType @x3
(Sec2.HIFC.hst @x0
@x1
@x2))
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
(Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x4))
(HasType @x6
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x1)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(151,14-151,25); use=Sec2.HIFC.fst(153,3-160,6)
(Valid 
;; def=Sec2.HIFC.fst(151,14-151,25); use=Sec2.HIFC.fst(153,3-160,6)
(Sec2.HIFC.reads @x0
@x1
@x2
@x3
@x4)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x8 Term))
 (! (implies (and (or label_1
(HasType @x8
Prims.unit))

;; def=Sec2.HIFC.fst(152,13-152,41); use=Sec2.HIFC.fst(153,3-160,6)
(or label_2

;; def=Sec2.HIFC.fst(152,13-152,41); use=Sec2.HIFC.fst(153,3-160,6)
(Valid 
;; def=Sec2.HIFC.fst(152,13-152,41); use=Sec2.HIFC.fst(153,3-160,6)
(Sec2.HIFC.does_not_read_loc @x0
@x1
@x2
@x3
@x4
@x5
@x6)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(153,3-160,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(153,3-160,6)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(153,3-160,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(153,3-160,6)
(ApplyTT @x7
@x8)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(153,3-160,6)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x8 Term))
 (! (implies (HasType @x8
Prims.int)

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(154,24-154,38); use=Sec2.HIFC.fst(157,8-158,10)
(Valid 
;; def=Sec2.HIFC.fst(154,24-154,38); use=Sec2.HIFC.fst(157,8-158,10)
(ApplyTT @x1
(Sec2.HIFC.upd @x6
@x5
@x8))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(157,8-158,10)
(forall ((@x10 Term))
 (! (implies (and (or label_3
(HasType @x10
Prims.unit))

;; def=Sec2.HIFC.fst(155,23-155,55); use=Sec2.HIFC.fst(157,8-158,10)
(or label_4

;; def=Sec2.HIFC.fst(155,23-155,55); use=Sec2.HIFC.fst(157,8-158,10)
(Valid 
;; def=Sec2.HIFC.fst(155,23-155,55); use=Sec2.HIFC.fst(157,8-158,10)
(Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x8)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(157,8-158,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(157,8-158,10)
(ApplyTT @x9
@x10)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(157,8-158,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(157,8-158,10)
(ApplyTT @x9
@x10)
)
)
:qid @query.5))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(157,8-157,14)
(and 
;; def=Sec2.HIFC.fst(157,15-157,45); use=Sec2.HIFC.fst(157,8-157,14)
(or label_5

;; def=Sec2.HIFC.fst(157,15-157,45); use=Sec2.HIFC.fst(157,8-157,14)
(Valid 
;; def=Sec2.HIFC.fst(157,15-157,45); use=Sec2.HIFC.fst(157,8-157,14)
(Sec2.HIFC.agree_on @x4
@x6
(Sec2.HIFC.upd @x6
@x5
@x8))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(157,8-157,14)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=Sec2.HIFC.fst(157,15-157,45); use=Sec2.HIFC.fst(157,8-157,14)
(Valid 
;; def=Sec2.HIFC.fst(157,15-157,45); use=Sec2.HIFC.fst(157,8-157,14)
(Sec2.HIFC.agree_on @x4
@x6
(Sec2.HIFC.upd @x6
@x5
@x8))
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(157,8-158,10)
(forall ((@x11 Term))
 (! (implies (HasType @x11
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(157,8-158,10)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(157,8-158,10)
(ApplyTT @x9
@x11)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_arrow_0b0d4b76d0899fce263c1e15a95282ba @x4
@x3
@x2
@x0
@x5
@x6
@x1))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.int)

;; def=Sec2.HIFC.fst(154,24-154,38); use=Sec2.HIFC.fst(154,24-154,38)
(Valid 
;; def=Sec2.HIFC.fst(154,24-154,38); use=Sec2.HIFC.fst(154,24-154,38)
(ApplyTT @x1
(Sec2.HIFC.upd @x6
@x5
@x9))
)
)

;; def=Sec2.HIFC.fst(155,23-155,55); use=Sec2.HIFC.fst(155,23-155,55)
(Valid 
;; def=Sec2.HIFC.fst(155,23-155,55); use=Sec2.HIFC.fst(155,23-155,55)
(Sec2.HIFC.does_not_read_loc_v @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x9)
)
)
 

:pattern ((Sec2.HIFC.upd @x6
@x5
@x9))
:qid @query.9))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(153,3-160,6)
(forall ((@x9 Term))
 (! (implies (HasType @x9
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(153,3-160,6)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(153,3-160,6)
(ApplyTT @x7
@x9)
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.reads_ok_does_not_read_loc, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Sec2.HIFC.agree_on, equation_Sec2.HIFC.does_not_read_loc, equation_Sec2.HIFC.does_not_read_loc_v, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.sel, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, int_inversion, lemma_FStar.Map.lemma_SelUpd2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_c1c63d5cc68c7c904c0b757378643161, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_Prims.int, typing_Sec2.HIFC.upd

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let reads_ok_does_not_read_loc


; <Start encoding let reads_ok_does_not_read_loc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.reads_ok_does_not_read_loc (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.reads_ok_does_not_read_loc@tok () Term)

; </end encoding let reads_ok_does_not_read_loc>


; encoding sigelt let add_source


; <Start encoding let add_source>

(declare-fun Sec2.HIFC.add_source (Term Term) Term)
;;;;;;;;;;;;;;;;r: label -> fs: flows -> flows
(declare-fun Tm_arrow_871fbd0dd0ad68bb6319c79c15cf6de1 () Term)
(declare-fun Sec2.HIFC.add_source@tok () Term)
;;;;;;;;;;;;;;;;_: label & label -> FStar.Set.set loc & label
(declare-fun Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76 () Term)
(declare-fun Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021 (Term) Term)

; </end encoding let add_source>


; encoding sigelt let add_sink


; <Start encoding let add_sink>

(declare-fun Sec2.HIFC.add_sink (Term Term) Term)

(declare-fun Sec2.HIFC.add_sink@tok () Term)
;;;;;;;;;;;;;;;;_: label & label -> label & FStar.Set.set loc
(declare-fun Tm_arrow_42f9deea9158ab045fee14fb1b7d74c6 () Term)
(declare-fun Tm_abs_fd4e86730565ad91630cd3bdb96513a4 (Term) Term)

; </end encoding let add_sink>


; encoding sigelt let flows_included_in


; <Start encoding let flows_included_in>

(declare-fun Sec2.HIFC.flows_included_in (Term Term) Term)
;;;;;;;;;;;;;;;;fs0: flows -> fs1: flows -> Prims.logical
(declare-fun Tm_arrow_603fb6cb5a7d1c02be79ffd79672f7b9 () Term)
(declare-fun Sec2.HIFC.flows_included_in@tok () Term)

; </end encoding let flows_included_in>


; encoding sigelt let flows_equiv


; <Start encoding let flows_equiv>

(declare-fun Sec2.HIFC.flows_equiv (Term Term) Term)

(declare-fun Sec2.HIFC.flows_equiv@tok () Term)

; </end encoding let flows_equiv>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.flows_included_in; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(165,4-165,21); use=Sec2.HIFC.fst(165,4-165,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows))
(HasType (Sec2.HIFC.flows_included_in @x0
@x1)
Prims.logical))
 

:pattern ((Sec2.HIFC.flows_included_in @x0
@x1))
:qid typing_Sec2.HIFC.flows_included_in))

:named typing_Sec2.HIFC.flows_included_in))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.flows_equiv; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(169,4-169,15); use=Sec2.HIFC.fst(169,4-169,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows))
(HasType (Sec2.HIFC.flows_equiv @x0
@x1)
Prims.logical))
 

:pattern ((Sec2.HIFC.flows_equiv @x0
@x1))
:qid typing_Sec2.HIFC.flows_equiv))

:named typing_Sec2.HIFC.flows_equiv))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.flows_included_in
;;; Fact-ids: Name Sec2.HIFC.flows_included_in; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(165,4-165,21); use=Sec2.HIFC.fst(165,4-165,21)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Sec2.HIFC.flows_included_in @x0
@x1))

;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(166,13-166,35); use=Sec2.HIFC.fst(166,13-166,35)
(Valid 
;; def=Sec2.HIFC.fst(166,13-166,35); use=Sec2.HIFC.fst(166,13-166,35)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
@x0)
)
)

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
(Sec2.HIFC.loc Dummy_value))
(HasType @x4
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(167,25-167,46); use=Sec2.HIFC.fst(167,25-167,46)
(Valid 
;; def=Sec2.HIFC.fst(167,25-167,46); use=Sec2.HIFC.fst(167,25-167,46)
(Sec2.HIFC.has_flow_1 @x3
@x4
@x2)
)


;; def=Sec2.HIFC.fst(167,50-167,60); use=Sec2.HIFC.fst(167,50-167,60)
(not (= @x3
@x4))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x5 Term))
 (! (and (HasType @x5
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(167,77-167,99); use=Sec2.HIFC.fst(167,77-167,99)
(Valid 
;; def=Sec2.HIFC.fst(167,77-167,99); use=Sec2.HIFC.fst(167,77-167,99)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x1)
)


;; def=Sec2.HIFC.fst(167,103-167,124); use=Sec2.HIFC.fst(167,103-167,124)
(Valid 
;; def=Sec2.HIFC.fst(167,103-167,124); use=Sec2.HIFC.fst(167,103-167,124)
(Sec2.HIFC.has_flow_1 @x3
@x4
@x5)
)
)
 
;;no pats
:qid equation_Sec2.HIFC.flows_included_in.3))
)
 
;;no pats
:qid equation_Sec2.HIFC.flows_included_in.2))
)
 
;;no pats
:qid equation_Sec2.HIFC.flows_included_in.1))
)
 

:pattern ((Sec2.HIFC.flows_included_in @x0
@x1))
:qid equation_Sec2.HIFC.flows_included_in))

:named equation_Sec2.HIFC.flows_included_in))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.flows_equiv
;;; Fact-ids: Name Sec2.HIFC.flows_equiv; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(169,4-169,15); use=Sec2.HIFC.fst(169,4-169,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Sec2.HIFC.flows_equiv @x0
@x1))

;; def=Sec2.HIFC.fst(169,34-169,92); use=Sec2.HIFC.fst(169,34-169,92)
(and 
;; def=Sec2.HIFC.fst(169,34-169,61); use=Sec2.HIFC.fst(169,34-169,61)
(Valid 
;; def=Sec2.HIFC.fst(169,34-169,61); use=Sec2.HIFC.fst(169,34-169,61)
(Sec2.HIFC.flows_included_in @x0
@x1)
)


;; def=Sec2.HIFC.fst(169,65-169,92); use=Sec2.HIFC.fst(169,65-169,92)
(Valid 
;; def=Sec2.HIFC.fst(169,65-169,92); use=Sec2.HIFC.fst(169,65-169,92)
(Sec2.HIFC.flows_included_in @x1
@x0)
)
)
)
 

:pattern ((Sec2.HIFC.flows_equiv @x0
@x1))
:qid equation_Sec2.HIFC.flows_equiv))

:named equation_Sec2.HIFC.flows_equiv))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.flows_included_in
;;; Fact-ids: Name Sec2.HIFC.flows_included_in; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(165,4-165,21); use=Sec2.HIFC.fst(165,4-165,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows))
(Valid (Prims.subtype_of (Sec2.HIFC.flows_included_in @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.flows_included_in @x0
@x1)
Prims.unit))
:qid defn_equation_Sec2.HIFC.flows_included_in))

:named defn_equation_Sec2.HIFC.flows_included_in))
;;;;;;;;;;;;;;;;Prop-typing for Sec2.HIFC.flows_equiv
;;; Fact-ids: Name Sec2.HIFC.flows_equiv; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(169,4-169,15); use=Sec2.HIFC.fst(169,4-169,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows))
(Valid (Prims.subtype_of (Sec2.HIFC.flows_equiv @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.flows_equiv @x0
@x1)
Prims.unit))
:qid defn_equation_Sec2.HIFC.flows_equiv))

:named defn_equation_Sec2.HIFC.flows_equiv))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(172,4-172,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (fs: Sec2.HIFC.flows).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit). Sec2.HIFC.flows_equiv fs fs ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let flows_equiv_refl`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Sec2.HIFC.flows)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(172,4-172,6)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=Sec2.HIFC.fst(171,10-171,31); use=Sec2.HIFC.fst(172,4-172,6)
(or label_2

;; def=Sec2.HIFC.fst(171,10-171,31); use=Sec2.HIFC.fst(172,4-172,6)
(Valid 
;; def=Sec2.HIFC.fst(171,10-171,31); use=Sec2.HIFC.fst(172,4-172,6)
(Sec2.HIFC.flows_equiv @x0
@x0)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(172,4-172,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(172,4-172,6)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(172,4-172,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(172,4-172,6)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.flows_equiv_refl, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let flows_equiv_refl


; <Start encoding let flows_equiv_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.flows_equiv_refl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.flows_equiv_refl@tok () Term)

; </end encoding let flows_equiv_refl>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(175,4-175,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (fs0: Sec2.HIFC.flows) (fs1: Sec2.HIFC.flows) (fs2: Sec2.HIFC.flows).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (Sec2.HIFC.flows_equiv fs0 fs1 /\ Sec2.HIFC.flows_equiv fs1 fs2 ==>
;           Sec2.HIFC.flows_equiv fs0 fs2) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let flows_equiv_trans`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows)
(HasType @x2
Sec2.HIFC.flows))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(175,4-175,6)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))
(implies 
;; def=Sec2.HIFC.fst(174,11-174,57); use=Sec2.HIFC.fst(175,4-175,6)
(and 
;; def=Sec2.HIFC.fst(174,11-174,32); use=Sec2.HIFC.fst(175,4-175,6)
(Valid 
;; def=Sec2.HIFC.fst(174,11-174,32); use=Sec2.HIFC.fst(175,4-175,6)
(Sec2.HIFC.flows_equiv @x0
@x1)
)


;; def=Sec2.HIFC.fst(174,36-174,57); use=Sec2.HIFC.fst(175,4-175,6)
(Valid 
;; def=Sec2.HIFC.fst(174,36-174,57); use=Sec2.HIFC.fst(175,4-175,6)
(Sec2.HIFC.flows_equiv @x1
@x2)
)
)


;; def=Sec2.HIFC.fst(174,62-174,83); use=Sec2.HIFC.fst(175,4-175,6)
(or label_2

;; def=Sec2.HIFC.fst(174,62-174,83); use=Sec2.HIFC.fst(175,4-175,6)
(Valid 
;; def=Sec2.HIFC.fst(174,62-174,83); use=Sec2.HIFC.fst(175,4-175,6)
(Sec2.HIFC.flows_equiv @x0
@x2)
)
)
))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(175,4-175,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(175,4-175,6)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(175,4-175,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(175,4-175,6)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.flows_equiv_trans, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @query, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.loc, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_Prims.list, int_inversion, typing_Sec2.HIFC.flow

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let flows_equiv_trans


; <Start encoding let flows_equiv_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.flows_equiv_trans (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.flows_equiv_trans@tok () Term)

; </end encoding let flows_equiv_trans>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.union; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(52,4-52,9); use=Sec2.HIFC.fst(52,4-52,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.label))
(HasType (Sec2.HIFC.union @x0
@x1)
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))))
 

:pattern ((Sec2.HIFC.union @x0
@x1))
:qid typing_Sec2.HIFC.union))

:named typing_Sec2.HIFC.union))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.union
;;; Fact-ids: Name Sec2.HIFC.union; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(52,4-52,9); use=Sec2.HIFC.fst(52,4-52,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.union @x0
@x1)
(FStar.Set.union (Sec2.HIFC.loc Dummy_value)
@x0
@x1))
 

:pattern ((Sec2.HIFC.union @x0
@x1))
:qid equation_Sec2.HIFC.union))

:named equation_Sec2.HIFC.union))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(178,4-178,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Sec2.HIFC.label) (b: Sec2.HIFC.label) (c: Sec2.HIFC.label).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.flows_equiv [a, Sec2.HIFC.union b c] [a, b; a, c] ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let flows_included_in_union_distr_dest`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(178,4-178,6)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=Sec2.HIFC.fst(177,10-177,51); use=Sec2.HIFC.fst(178,4-178,6)
(or label_2

;; def=Sec2.HIFC.fst(177,10-177,51); use=Sec2.HIFC.fst(178,4-178,6)
(Valid 
;; def=Sec2.HIFC.fst(177,10-177,51); use=Sec2.HIFC.fst(178,4-178,6)
(Sec2.HIFC.flows_equiv (Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x0
(Sec2.HIFC.union @x1
@x2))
(Prims.Nil Sec2.HIFC.flow))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x0
@x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x0
@x2)
(Prims.Nil Sec2.HIFC.flow))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(178,4-178,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(178,4-178,6)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(178,4-178,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(178,4-178,6)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.flows_included_in_union_distr_dest, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, eq2-interp, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.has_flow_1, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, l_or-interp, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Sec2.HIFC.union

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let flows_included_in_union_distr_dest


; <Start encoding let flows_included_in_union_distr_dest>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.flows_included_in_union_distr_dest (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.flows_included_in_union_distr_dest@tok () Term)

; </end encoding let flows_included_in_union_distr_dest>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(181,4-181,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Sec2.HIFC.label) (b: Sec2.HIFC.label) (c: Sec2.HIFC.label).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.flows_equiv [Sec2.HIFC.union a b, c] [a, c; b, c] ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let flows_included_in_union_distr_src`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(181,4-181,6)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=Sec2.HIFC.fst(180,10-180,51); use=Sec2.HIFC.fst(181,4-181,6)
(or label_2

;; def=Sec2.HIFC.fst(180,10-180,51); use=Sec2.HIFC.fst(181,4-181,6)
(Valid 
;; def=Sec2.HIFC.fst(180,10-180,51); use=Sec2.HIFC.fst(181,4-181,6)
(Sec2.HIFC.flows_equiv (Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x0
@x1)
@x2)
(Prims.Nil Sec2.HIFC.flow))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x0
@x2)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x1
@x2)
(Prims.Nil Sec2.HIFC.flow))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(181,4-181,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(181,4-181,6)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(181,4-181,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(181,4-181,6)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.flows_included_in_union_distr_src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, eq2-interp, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.has_flow_1, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, l_or-interp, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Sec2.HIFC.union

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let flows_included_in_union_distr_src


; <Start encoding let flows_included_in_union_distr_src>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.flows_included_in_union_distr_src (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.flows_included_in_union_distr_src@tok () Term)

; </end encoding let flows_included_in_union_distr_src>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(185,4-185,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Sec2.HIFC.label) (b: Sec2.HIFC.label) (c: Sec2.HIFC.label).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.flows_equiv [a, Sec2.HIFC.union b c; Sec2.HIFC.union a b, c]
;           [a, b; Sec2.HIFC.union a b, c] ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let flows_included_in_union`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(185,4-185,6)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=Sec2.HIFC.fst(183,10-184,46); use=Sec2.HIFC.fst(185,4-185,6)
(or label_2

;; def=Sec2.HIFC.fst(183,10-184,46); use=Sec2.HIFC.fst(185,4-185,6)
(Valid 
;; def=Sec2.HIFC.fst(183,10-184,46); use=Sec2.HIFC.fst(185,4-185,6)
(Sec2.HIFC.flows_equiv (Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x0
(Sec2.HIFC.union @x1
@x2))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x0
@x1)
@x2)
(Prims.Nil Sec2.HIFC.flow)))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x0
@x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x0
@x1)
@x2)
(Prims.Nil Sec2.HIFC.flow))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(185,4-185,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(185,4-185,6)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(185,4-185,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(185,4-185,6)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.flows_included_in_union, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, bool_inversion, constructor_distinct_Prims.Cons, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, eq2-interp, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.has_flow_1, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, l_or-interp, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Sec2.HIFC.union

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let flows_included_in_union


; <Start encoding let flows_included_in_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.flows_included_in_union (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.flows_included_in_union@tok () Term)

; </end encoding let flows_included_in_union>


; encoding sigelt let bind_ifc'


; <Start encoding let bind_ifc'>



;;;;;;;;;;;;;;;;x: a -> hifc b r1 w1 fs1 (r x) (s x)
(declare-fun Tm_arrow_104b7610810c4dbe735c2bf3205a6317 (Term Term Term Term Term Term Term) Term)
(declare-fun Sec2.HIFC.bind_ifc_ (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

















;;;;;;;;;;;;;;;;x: hifc a r0 w0 fs0 p q -> y: (x: a -> hifc b r1 w1 fs1 (r x) (s x))   -> hst b       (fun s0 -> p s0 /\ (forall (x: a) (s1: store). q s0 x s1 ==> r x s1))       (fun s0 r s2 -> exists (x: a) (s1: store). q s0 x s1 /\ s x s1 r s2)
(declare-fun Tm_arrow_9b0a3e748e3081e008e761505efef734 () Term)
(declare-fun Sec2.HIFC.bind_ifc_@tok () Term)


















; </end encoding let bind_ifc'>

;;;;;;;;;;;;;;;;typing_Tm_abs_efbf51204e50a9385498d1fafe717722
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(22,13-22,40); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_efbf51204e50a9385498d1fafe717722 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(Tm_arrow_d1e880122501acf620a95003107f650d @x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((Tm_abs_efbf51204e50a9385498d1fafe717722 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_efbf51204e50a9385498d1fafe717722))

:named typing_Tm_abs_efbf51204e50a9385498d1fafe717722))
;;;;;;;;;;;;;;;;typing_Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,27-21,66); use=Sec2.HIFC.fst(21,27-21,66)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x1
@x2
@x3)
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x3))
 

:pattern ((Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f))

:named typing_Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f))
;;;;;;;;;;;;;;;;typing_Tm_abs_718684db1781645ba7e18c0aacd5527a
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,37-21,65); use=Sec2.HIFC.fst(21,37-21,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_718684db1781645ba7e18c0aacd5527a @x0
@x1
@x2
@x3
@x4
@x5)
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
 

:pattern ((Tm_abs_718684db1781645ba7e18c0aacd5527a @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_718684db1781645ba7e18c0aacd5527a))

:named typing_Tm_abs_718684db1781645ba7e18c0aacd5527a))
;;;;;;;;;;;;;;;;typing_Tm_abs_6ba36691ee58dee85cd144324b083848
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! 
;; def=Prims.fst(509,75-509,78); use=Prims.fst(509,75-509,78)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_6ba36691ee58dee85cd144324b083848 @x0
@x1)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1))
 

:pattern ((Tm_abs_6ba36691ee58dee85cd144324b083848 @x0
@x1))
:qid typing_Tm_abs_6ba36691ee58dee85cd144324b083848))

:named typing_Tm_abs_6ba36691ee58dee85cd144324b083848))
;;;;;;;;;;;;;;;;typing_Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,37-21,65); use=Sec2.HIFC.fst(21,37-21,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
 

:pattern ((Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19))

:named typing_Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19))
;;;;;;;;;;;;;;;;typing_Tm_abs_63bcd83c24112861c302253aadf3ccd3
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(20,21-20,64); use=Sec2.HIFC.fst(20,21-20,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x0
@x1
@x2
@x3)
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
 

:pattern ((Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_63bcd83c24112861c302253aadf3ccd3))

:named typing_Tm_abs_63bcd83c24112861c302253aadf3ccd3))
;;;;;;;;;;;;;;;;typing_Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(20,39-20,63); use=Sec2.HIFC.fst(20,39-20,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b @x0
@x1
@x2
@x3)
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
 

:pattern ((Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b))

:named typing_Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b))
;;;;;;;;;;;;;;;;typing_Tm_abs_21a174c0846a666b1f58e639082c203a
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,37-21,65); use=Sec2.HIFC.fst(21,37-21,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_21a174c0846a666b1f58e639082c203a @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x5))
 

:pattern ((Tm_abs_21a174c0846a666b1f58e639082c203a @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_21a174c0846a666b1f58e639082c203a))

:named typing_Tm_abs_21a174c0846a666b1f58e639082c203a))
;;;;;;;;;;;;;;;;typing_Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,37-21,65); use=Sec2.HIFC.fst(21,37-21,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x5))
 

:pattern ((Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d))

:named typing_Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d))
;;;;;;;;;;;;;;;;typing_Tm_abs_02262a2f53f3a738a5fa3961fef4840f
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(20,39-20,63); use=Sec2.HIFC.fst(20,39-20,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_02262a2f53f3a738a5fa3961fef4840f @x0
@x1
@x2
@x3)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x3))
 

:pattern ((Tm_abs_02262a2f53f3a738a5fa3961fef4840f @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_02262a2f53f3a738a5fa3961fef4840f))

:named typing_Tm_abs_02262a2f53f3a738a5fa3961fef4840f))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.hifc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(86,4-86,8); use=Sec2.HIFC.fst(86,4-86,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flows)
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0)))
(HasType (Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Sec2.HIFC.hifc))

:named typing_Sec2.HIFC.hifc))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(191,4-191,13); use=Sec2.HIFC.fst(191,4-191,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.flows)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.pre)
(HasType @x9
(Sec2.HIFC.post @x0))
(HasType @x10
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0))
(HasType @x11
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x0))
(HasType @x12
(Sec2.HIFC.hifc @x0
@x3
@x2
@x6
@x8
@x9))
(HasType @x13
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x11
@x10
@x7
@x4
@x5
@x1
@x0)))
(HasType (Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(Sec2.HIFC.hst @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1))))
 

:pattern ((Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid typing_Sec2.HIFC.bind_ifc_))

:named typing_Sec2.HIFC.bind_ifc_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(16,4-16,12); use=Sec2.HIFC.fst(16,4-16,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Sec2.HIFC.pre)
(HasType @x3
(Sec2.HIFC.post @x0))
(HasType @x4
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0))
(HasType @x5
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x0))
(HasType @x6
(Sec2.HIFC.hst @x0
@x2
@x3))
(HasType @x7
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x5
@x4
@x1
@x0)))
(HasType (Sec2.HIFC.bind_hst @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(Sec2.HIFC.hst @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x2
@x0
@x3
@x4)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x3
@x5
@x1))))
 

:pattern ((Sec2.HIFC.bind_hst @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Sec2.HIFC.bind_hst))

:named typing_Sec2.HIFC.bind_hst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,5-204,10); use=Prims.fst(204,5-204,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_imp @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid typing_Prims.l_imp))

:named typing_Prims.l_imp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! 
;; def=Prims.fst(509,5-509,13); use=Prims.fst(509,5-509,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)))
(HasType (Prims.l_Exists @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_Exists @x0
@x1))
:qid typing_Prims.l_Exists))

:named typing_Prims.l_Exists))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(503,5-503,12); use=Prims.fst(503,5-503,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.dtuple2@tok
@x0)
@x1)
(Prims.dtuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.dtuple2@tok
@x0)
@x1))

:pattern ((Prims.dtuple2 @x0
@x1))
:qid token_correspondence_Prims.dtuple2@tok))

:named token_correspondence_Prims.dtuple2@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(504,4-504,13); use=Prims.fst(504,4-504,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x5
@x6)))
:qid subterm_ordering_Prims.Mkdtuple2))

:named subterm_ordering_Prims.Mkdtuple2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.hifc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(87,2-91,3); use=Sec2.HIFC.fst(87,2-91,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_e42d42a18df6499f852ef32d15f0eed0 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_e42d42a18df6499f852ef32d15f0eed0 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_e42d42a18df6499f852ef32d15f0eed0))

:named refinement_kinding_Tm_refine_e42d42a18df6499f852ef32d15f0eed0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d))

:named refinement_kinding_Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(13,31-13,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_534ad67b03834e6d7680c73a9b413139 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_534ad67b03834e6d7680c73a9b413139 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_534ad67b03834e6d7680c73a9b413139))

:named refinement_kinding_Tm_refine_534ad67b03834e6d7680c73a9b413139))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.hifc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(87,2-91,3); use=Sec2.HIFC.fst(87,2-91,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e42d42a18df6499f852ef32d15f0eed0 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
(Sec2.HIFC.hst @x2
@x3
@x4))

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(88,4-88,13)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(88,4-88,13)
(Sec2.HIFC.reads @x2
@x3
@x4
@x1
@x5)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(89,4-89,14)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(89,4-89,14)
(Sec2.HIFC.writes @x2
@x3
@x4
@x1
@x6)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(90,4-90,17)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(90,4-90,17)
(Sec2.HIFC.respects @x2
@x3
@x4
@x1
@x7)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e42d42a18df6499f852ef32d15f0eed0 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0))

:named refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x6
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Prims.l_Exists @x2
(Tm_abs_21a174c0846a666b1f58e639082c203a @x3
@x4
@x5
@x6
@x1
@x2))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d))

:named refinement_interpretation_Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(13,31-13,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(20,21-20,25); use=Sec2.HIFC.fst(20,21-20,25)
(Valid 
;; def=Sec2.HIFC.fst(20,21-20,25); use=Sec2.HIFC.fst(20,21-20,25)
(ApplyTT @x2
@x1)
)


;; def=Sec2.HIFC.fst(20,29-20,64); use=Sec2.HIFC.fst(20,29-20,64)
(forall ((@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x6
@x3)
(HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(20,43-20,52); use=Sec2.HIFC.fst(20,43-20,52)
(Valid 
;; def=Sec2.HIFC.fst(20,43-20,52); use=Sec2.HIFC.fst(20,43-20,52)
(ApplyTT (ApplyTT (ApplyTT @x4
@x1)
@x6)
@x7)
)
)

;; def=Sec2.HIFC.fst(20,57-20,63); use=Sec2.HIFC.fst(20,57-20,63)
(Valid 
;; def=Sec2.HIFC.fst(20,57-20,63); use=Sec2.HIFC.fst(20,57-20,63)
(ApplyTT (ApplyTT @x5
@x6)
@x7)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139))

:named refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(504,4-504,13); use=Prims.fst(504,4-504,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Mkdtuple2_b (Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Mkdtuple2_b))

:named projection_inverse_Prims.Mkdtuple2_b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(504,4-504,13); use=Prims.fst(504,4-504,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Mkdtuple2_a (Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Mkdtuple2_a))

:named projection_inverse_Prims.Mkdtuple2_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(504,4-504,13); use=Prims.fst(504,4-504,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Mkdtuple2__2 (Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Mkdtuple2__2))

:named projection_inverse_Prims.Mkdtuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(504,4-504,13); use=Prims.fst(504,4-504,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Mkdtuple2__1 (Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Mkdtuple2__1))

:named projection_inverse_Prims.Mkdtuple2__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.dtuple2@tok))
:named pre_kinding_Prims.dtuple2@tok))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(20,29-20,64); use=Sec2.HIFC.fst(20,29-20,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.l_Forall @x3
(Tm_abs_02262a2f53f3a738a5fa3961fef4840f @x2
@x1
@x0
@x3)))

;; def=Sec2.HIFC.fst(20,29-20,64); use=Sec2.HIFC.fst(20,29-20,64)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
@x3)
(HasType @x5
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(20,43-20,52); use=Sec2.HIFC.fst(20,43-20,52)
(Valid 
;; def=Sec2.HIFC.fst(20,43-20,52); use=Sec2.HIFC.fst(20,43-20,52)
(ApplyTT (ApplyTT (ApplyTT @x2
@x1)
@x4)
@x5)
)
)

;; def=Sec2.HIFC.fst(20,57-20,63); use=Sec2.HIFC.fst(20,57-20,63)
(Valid 
;; def=Sec2.HIFC.fst(20,57-20,63); use=Sec2.HIFC.fst(20,57-20,63)
(ApplyTT (ApplyTT @x0
@x4)
@x5)
)
)
 
;;no pats
:qid l_quant_interp_f91b6a6f0b8a07ee1c169cd5bd16ad4b.1))
)
 

:pattern ((Valid (Prims.l_Forall @x3
(Tm_abs_02262a2f53f3a738a5fa3961fef4840f @x2
@x1
@x0
@x3))))
:qid l_quant_interp_f91b6a6f0b8a07ee1c169cd5bd16ad4b))

:named l_quant_interp_f91b6a6f0b8a07ee1c169cd5bd16ad4b))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,27-21,66); use=Sec2.HIFC.fst(21,27-21,66)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.l_Exists @x5
(Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d @x4
@x3
@x2
@x1
@x0
@x5)))

;; def=Sec2.HIFC.fst(21,27-21,66); use=Sec2.HIFC.fst(21,27-21,66)
(exists ((@x6 Term) (@x7 Term))
 (! (and (HasType @x6
@x5)
(HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(21,41-21,50); use=Sec2.HIFC.fst(21,41-21,50)
(Valid 
;; def=Sec2.HIFC.fst(21,41-21,50); use=Sec2.HIFC.fst(21,41-21,50)
(ApplyTT (ApplyTT (ApplyTT @x4
@x3)
@x6)
@x7)
)


;; def=Sec2.HIFC.fst(21,54-21,65); use=Sec2.HIFC.fst(21,54-21,65)
(Valid 
;; def=Sec2.HIFC.fst(21,54-21,65); use=Sec2.HIFC.fst(21,54-21,65)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x2
@x6)
@x7)
@x1)
@x0)
)
)
 
;;no pats
:qid l_quant_interp_d6e969b3105c5634ae7fa2ec8d15e007.1))
)
 

:pattern ((Valid (Prims.l_Exists @x5
(Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d @x4
@x3
@x2
@x1
@x0
@x5))))
:qid l_quant_interp_d6e969b3105c5634ae7fa2ec8d15e007))

:named l_quant_interp_d6e969b3105c5634ae7fa2ec8d15e007))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.l_Exists @x5
(Tm_abs_21a174c0846a666b1f58e639082c203a @x4
@x3
@x2
@x1
@x0
@x5)))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Prims.l_Exists @x5
(Tm_abs_21a174c0846a666b1f58e639082c203a @x4
@x3
@x2
@x1
@x0
@x5))
)
)
 

:pattern ((Valid (Prims.l_Exists @x5
(Tm_abs_21a174c0846a666b1f58e639082c203a @x4
@x3
@x2
@x1
@x0
@x5))))
:qid l_quant_interp_cd103075acb06d3bfcb66d8d0e791b3f))

:named l_quant_interp_cd103075acb06d3bfcb66d8d0e791b3f))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: Name FStar.Pervasives.pure_null_wp; Namespace FStar.Pervasives
(assert (! 
;; def=Prims.fst(451,66-451,102); use=FStar.Pervasives.fsti(366,2-366,15)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.l_Forall @x1
(Tm_abs_6ba36691ee58dee85cd144324b083848 @x0
@x1)))

;; def=Prims.fst(451,66-451,102); use=FStar.Pervasives.fsti(366,2-366,15)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)

;; def=Prims.fst(451,90-451,102); use=FStar.Pervasives.fsti(366,2-366,15)
(Valid 
;; def=Prims.fst(451,90-451,102); use=FStar.Pervasives.fsti(366,2-366,15)
(ApplyTT @x0
@x2)
)
)
 
;;no pats
:qid l_quant_interp_b318409532d0e00e9125f72f3b997468.1))
)
 

:pattern ((Valid (Prims.l_Forall @x1
(Tm_abs_6ba36691ee58dee85cd144324b083848 @x0
@x1))))
:qid l_quant_interp_b318409532d0e00e9125f72f3b997468))

:named l_quant_interp_b318409532d0e00e9125f72f3b997468))
;;;;;;;;;;;;;;;;==> interpretation
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (implies (Valid @x0)
(Valid @x1))
(Valid (Prims.l_imp @x0
@x1)))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid l_imp-interp))
:named l_imp-interp))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,13-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0)
Tm_type))
:qid kinding_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))

:named kinding_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d1e880122501acf620a95003107f650d
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(13,31-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_arrow_d1e880122501acf620a95003107f650d @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d1e880122501acf620a95003107f650d @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid kinding_Tm_arrow_d1e880122501acf620a95003107f650d))

:named kinding_Tm_arrow_d1e880122501acf620a95003107f650d))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,21-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))

:named kinding_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(16,14-19,42); use=Sec2.HIFC.fst(19,20-19,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x0
@x1
@x2
@x3)
Tm_type))
:qid kinding_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))

:named kinding_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_104b7610810c4dbe735c2bf3205a6317
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(191,16-196,54); use=Sec2.HIFC.fst(196,21-196,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid kinding_Tm_arrow_104b7610810c4dbe735c2bf3205a6317))

:named kinding_Tm_arrow_104b7610810c4dbe735c2bf3205a6317))
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (and (IsTotFun Prims.dtuple2@tok)

;; def=Prims.fst(503,5-503,12); use=Prims.fst(503,5-503,12)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.dtuple2@tok
@x0))
 

:pattern ((ApplyTT Prims.dtuple2@tok
@x0))
:qid kinding_Prims.dtuple2@tok))


;; def=Prims.fst(503,5-503,12); use=Prims.fst(503,5-503,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)))
(HasType (Prims.dtuple2 @x0
@x1)
Tm_type))
 

:pattern ((Prims.dtuple2 @x0
@x1))
:qid kinding_Prims.dtuple2@tok.1))
)
:named kinding_Prims.dtuple2@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_efbf51204e50a9385498d1fafe717722
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(22,13-22,40); use=Sec2.HIFC.fst(22,13-22,40)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_efbf51204e50a9385498d1fafe717722 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(let ((@lb9 (ApplyTT @x2
@x0)))
(ApplyTT (ApplyTT @x1
(FStar.Pervasives.Native.Mktuple2__1 @lb9))
(FStar.Pervasives.Native.Mktuple2__2 @lb9))))
 

:pattern ((ApplyTT (Tm_abs_efbf51204e50a9385498d1fafe717722 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_efbf51204e50a9385498d1fafe717722))

:named interpretation_Tm_abs_efbf51204e50a9385498d1fafe717722))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,27-21,66); use=Sec2.HIFC.fst(21,27-21,66)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x3
@x4
@x5
@x6)
@x0)
@x1)
@x2)
(Prims.l_Exists @x3
(Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d @x4
@x0
@x5
@x1
@x2
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x3
@x4
@x5
@x6)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f))

:named interpretation_Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_718684db1781645ba7e18c0aacd5527a
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,37-21,65); use=Sec2.HIFC.fst(21,37-21,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_718684db1781645ba7e18c0aacd5527a @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.l_and (ApplyTT (ApplyTT (ApplyTT @x1
@x2)
@x3)
@x0)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x4
@x3)
@x0)
@x5)
@x6)))
 

:pattern ((ApplyTT (Tm_abs_718684db1781645ba7e18c0aacd5527a @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_718684db1781645ba7e18c0aacd5527a))

:named interpretation_Tm_abs_718684db1781645ba7e18c0aacd5527a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_6ba36691ee58dee85cd144324b083848
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! 
;; def=Prims.fst(509,75-509,78); use=Prims.fst(509,75-509,78)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_6ba36691ee58dee85cd144324b083848 @x1
@x2)
@x0)
(ApplyTT @x1
@x0))
 

:pattern ((ApplyTT (Tm_abs_6ba36691ee58dee85cd144324b083848 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_6ba36691ee58dee85cd144324b083848))

:named interpretation_Tm_abs_6ba36691ee58dee85cd144324b083848))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,37-21,65); use=Sec2.HIFC.fst(21,37-21,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19 @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.l_and (ApplyTT (ApplyTT (ApplyTT @x1
@x2)
@x3)
@x0)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x4
@x3)
@x0)
(FStar.Pervasives.Native.fst @x5
Sec2.HIFC.store
@x6))
(FStar.Pervasives.Native.snd @x5
Sec2.HIFC.store
@x6))))
 

:pattern ((ApplyTT (Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19 @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19))

:named interpretation_Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_63bcd83c24112861c302253aadf3ccd3
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(20,21-20,64); use=Sec2.HIFC.fst(20,21-20,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x1
@x2
@x3
@x4)
@x0)
(Prims.l_and (ApplyTT @x1
@x0)
(Prims.l_Forall @x2
(Tm_abs_02262a2f53f3a738a5fa3961fef4840f @x3
@x0
@x4
@x2))))
 

:pattern ((ApplyTT (Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_63bcd83c24112861c302253aadf3ccd3))

:named interpretation_Tm_abs_63bcd83c24112861c302253aadf3ccd3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(20,39-20,63); use=Sec2.HIFC.fst(20,39-20,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b @x1
@x2
@x3
@x4)
@x0)
(Prims.l_imp (ApplyTT (ApplyTT (ApplyTT @x1
@x2)
@x3)
@x0)
(ApplyTT (ApplyTT @x4
@x3)
@x0)))
 

:pattern ((ApplyTT (Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b))

:named interpretation_Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_21a174c0846a666b1f58e639082c203a
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,37-21,65); use=Sec2.HIFC.fst(21,37-21,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_21a174c0846a666b1f58e639082c203a @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.l_Exists Sec2.HIFC.store
(Tm_abs_6aba36dde076fdd0eacdf5fdbc34ca19 @x1
@x2
@x0
@x3
@x4
@x5)))
 

:pattern ((ApplyTT (Tm_abs_21a174c0846a666b1f58e639082c203a @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_21a174c0846a666b1f58e639082c203a))

:named interpretation_Tm_abs_21a174c0846a666b1f58e639082c203a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(21,37-21,65); use=Sec2.HIFC.fst(21,37-21,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.l_Exists Sec2.HIFC.store
(Tm_abs_718684db1781645ba7e18c0aacd5527a @x1
@x2
@x0
@x3
@x4
@x5)))
 

:pattern ((ApplyTT (Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d))

:named interpretation_Tm_abs_110c48813c5664ecf3e47e1e16bf9b0d))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_02262a2f53f3a738a5fa3961fef4840f
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(20,39-20,63); use=Sec2.HIFC.fst(20,39-20,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_02262a2f53f3a738a5fa3961fef4840f @x1
@x2
@x3
@x4)
@x0)
(Prims.l_Forall Sec2.HIFC.store
(Tm_abs_4ccf9170fa4bf71154f5f5eb8ea1896b @x1
@x2
@x0
@x3)))
 

:pattern ((ApplyTT (Tm_abs_02262a2f53f3a738a5fa3961fef4840f @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_02262a2f53f3a738a5fa3961fef4840f))

:named interpretation_Tm_abs_02262a2f53f3a738a5fa3961fef4840f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e42d42a18df6499f852ef32d15f0eed0
;;; Fact-ids: Name Sec2.HIFC.hifc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(87,2-91,3); use=Sec2.HIFC.fst(87,2-91,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e42d42a18df6499f852ef32d15f0eed0 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq (Sec2.HIFC.hst @x0
@x1
@x2))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e42d42a18df6499f852ef32d15f0eed0 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_e42d42a18df6499f852ef32d15f0eed0))

:named haseqTm_refine_e42d42a18df6499f852ef32d15f0eed0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x4
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_e3914e86157d91f29b9bc5c8b8660d2d))

:named haseqTm_refine_e3914e86157d91f29b9bc5c8b8660d2d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_534ad67b03834e6d7680c73a9b413139
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,45); use=Sec2.HIFC.fst(13,31-13,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_534ad67b03834e6d7680c73a9b413139 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq Sec2.HIFC.store)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_534ad67b03834e6d7680c73a9b413139 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_534ad67b03834e6d7680c73a9b413139))

:named haseqTm_refine_534ad67b03834e6d7680c73a9b413139))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(503,5-503,12); use=Prims.fst(503,5-503,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.dtuple2 @x2
@x3))
(and (is-Prims.Mkdtuple2 @x1)
(= @x2
(Prims.Mkdtuple2_a @x1))
(= @x3
(Prims.Mkdtuple2_b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.dtuple2 @x2
@x3)))
:qid fuel_guarded_inversion_Prims.dtuple2))

:named fuel_guarded_inversion_Prims.dtuple2))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! (= 259
(Term_constr_id Prims.dtuple2@tok))
:named fresh_token_Prims.dtuple2@tok))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.hifc
;;; Fact-ids: Name Sec2.HIFC.hifc; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(86,4-86,8); use=Sec2.HIFC.fst(86,4-86,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_refine_e42d42a18df6499f852ef32d15f0eed0 @x0
@x4
@x5
@x1
@x2
@x3))
 

:pattern ((Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_Sec2.HIFC.hifc))

:named equation_Sec2.HIFC.hifc))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.bind_ifc'
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(191,4-191,13); use=Sec2.HIFC.fst(191,4-191,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(Sec2.HIFC.bind_hst @x0
@x1
@x8
@x9
@x10
@x11
@x12
@x13))
 

:pattern ((Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
:qid equation_Sec2.HIFC.bind_ifc_))

:named equation_Sec2.HIFC.bind_ifc_))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.bind_hst
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(16,4-16,12); use=Sec2.HIFC.fst(16,4-16,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (Sec2.HIFC.bind_hst @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(Tm_abs_efbf51204e50a9385498d1fafe717722 @x7
@x6
@x1
@x5
@x4
@x3
@x0
@x2))
 

:pattern ((Sec2.HIFC.bind_hst @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid equation_Sec2.HIFC.bind_hst))

:named equation_Sec2.HIFC.bind_hst))
;;;;;;;;;;;;;;;;Equation for Prims.l_imp
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,5-204,10); use=Prims.fst(204,5-204,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_imp @x0
@x1)
(Prims.squash (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0)))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid equation_Prims.l_imp))

:named equation_Prims.l_imp))
;;;;;;;;;;;;;;;;Equation for Prims.l_Exists
;;; Fact-ids: Name Prims.l_Exists; Namespace Prims
(assert (! 
;; def=Prims.fst(509,5-509,13); use=Prims.fst(509,5-509,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_Exists @x0
@x1)
(Prims.squash (Prims.dtuple2 @x0
(Tm_abs_6ba36691ee58dee85cd144324b083848 @x1
@x0))))
 

:pattern ((Prims.l_Exists @x0
@x1))
:qid equation_Prims.l_Exists))

:named equation_Prims.l_Exists))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(504,4-504,13); use=Prims.fst(504,4-504,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1))
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
(ApplyTT @x2
@x3)))
(HasTypeFuel @u0
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x1
@x2)))
:qid data_typing_intro_Prims.Mkdtuple2@tok))

:named data_typing_intro_Prims.Mkdtuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(504,4-504,13); use=Prims.fst(504,4-504,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x5))
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
(ApplyTT @x6
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Mkdtuple2 @x1
@x2
@x3
@x4)
(Prims.dtuple2 @x5
@x6)))
:qid data_elim_Prims.Mkdtuple2))

:named data_elim_Prims.Mkdtuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(503,5-503,12); use=Prims.fst(503,5-503,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= 258
(Term_constr_id (Prims.dtuple2 @x0
@x1)))
 

:pattern ((Prims.dtuple2 @x0
@x1))
:qid constructor_distinct_Prims.dtuple2))

:named constructor_distinct_Prims.dtuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(504,4-504,13); use=Prims.fst(504,4-504,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 267
(Term_constr_id (Prims.Mkdtuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Mkdtuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Mkdtuple2))

:named constructor_distinct_Prims.Mkdtuple2))
;;;;;;;;;;;;;;;;Assumption: Prims.dtuple2__uu___haseq
;;; Fact-ids: Name Prims.dtuple2__uu___haseq; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x0)
(HasType @x3
(ApplyTT @x1
@x2)))
(and (Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq (ApplyTT @x1
@x2)))))
 
;;no pats
:qid assumption_Prims.dtuple2__uu___haseq.1)))
(Valid (Prims.hasEq (Prims.dtuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (Prims.dtuple2 @x0
@x1)))
:qid assumption_Prims.dtuple2__uu___haseq))
:named assumption_Prims.dtuple2__uu___haseq))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,13-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))

:named Sec2.HIFC_pre_typing_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(13,31-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d1e880122501acf620a95003107f650d @x2
@x3
@x4
@x5
@x6
@x7))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d1e880122501acf620a95003107f650d @x2
@x3
@x4
@x5
@x6
@x7)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_d1e880122501acf620a95003107f650d))

:named Sec2.HIFC_pre_typing_Tm_arrow_d1e880122501acf620a95003107f650d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,21-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))

:named Sec2.HIFC_pre_typing_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(16,14-19,42); use=Sec2.HIFC.fst(19,20-19,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x2
@x3
@x4
@x5))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x2
@x3
@x4
@x5)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))

:named Sec2.HIFC_pre_typing_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(191,16-196,54); use=Sec2.HIFC.fst(196,21-196,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_104b7610810c4dbe735c2bf3205a6317))

:named Sec2.HIFC_pre_typing_Tm_arrow_104b7610810c4dbe735c2bf3205a6317))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,13-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x1))
(and 
;; def=Sec2.HIFC.fst(13,13-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Sec2.HIFC.pre))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))

:named Sec2.HIFC_interpretation_Tm_arrow_d5c34168037b0d9d5776b07b5ca04410))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d1e880122501acf620a95003107f650d
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(13,31-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d1e880122501acf620a95003107f650d @x1
@x2
@x3
@x4
@x5
@x6))
(and 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(13,31-13,84)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x6
@x5
@x4
@x3))
(HasType (ApplyTT @x0
@x7)
(Tm_refine_e3914e86157d91f29b9bc5c8b8660d2d @x5
@x4
@x7
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x7))
:qid Sec2.HIFC_interpretation_Tm_arrow_d1e880122501acf620a95003107f650d.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d1e880122501acf620a95003107f650d @x1
@x2
@x3
@x4
@x5
@x6)))
:qid Sec2.HIFC_interpretation_Tm_arrow_d1e880122501acf620a95003107f650d))

:named Sec2.HIFC_interpretation_Tm_arrow_d1e880122501acf620a95003107f650d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,21-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(13,21-16,15); use=Sec2.HIFC.fst(19,20-19,28)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(Sec2.HIFC.post @x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))

:named Sec2.HIFC_interpretation_Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9
;;; Fact-ids: Name Sec2.HIFC.bind_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(16,14-19,42); use=Sec2.HIFC.fst(19,20-19,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x1
@x2
@x3
@x4))
(and 
;; def=Sec2.HIFC.fst(16,14-19,42); use=Sec2.HIFC.fst(19,20-19,42)
(forall ((@x5 Term))
 (! (implies (HasType @x5
@x4)
(HasType (ApplyTT @x0
@x5)
(Sec2.HIFC.hst @x3
(ApplyTT @x2
@x5)
(ApplyTT @x1
@x5))))
 

:pattern ((ApplyTT @x0
@x5))
:qid Sec2.HIFC_interpretation_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a1e428ecddaf161968a3380fcc9698f9 @x1
@x2
@x3
@x4)))
:qid Sec2.HIFC_interpretation_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))

:named Sec2.HIFC_interpretation_Tm_arrow_a1e428ecddaf161968a3380fcc9698f9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_104b7610810c4dbe735c2bf3205a6317
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(191,16-196,54); use=Sec2.HIFC.fst(196,21-196,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x1
@x2
@x3
@x4
@x5
@x6
@x7))
(and 
;; def=Sec2.HIFC.fst(191,16-196,54); use=Sec2.HIFC.fst(196,21-196,54)
(forall ((@x8 Term))
 (! (implies (HasType @x8
@x7)
(HasType (ApplyTT @x0
@x8)
(Sec2.HIFC.hifc @x6
@x5
@x4
@x3
(ApplyTT @x2
@x8)
(ApplyTT @x1
@x8))))
 

:pattern ((ApplyTT @x0
@x8))
:qid Sec2.HIFC_interpretation_Tm_arrow_104b7610810c4dbe735c2bf3205a6317.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x1
@x2
@x3
@x4
@x5
@x6
@x7)))
:qid Sec2.HIFC_interpretation_Tm_arrow_104b7610810c4dbe735c2bf3205a6317))

:named Sec2.HIFC_interpretation_Tm_arrow_104b7610810c4dbe735c2bf3205a6317))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.dtuple2; Namespace Prims; Name Prims.Mkdtuple2; Namespace Prims
(assert (! 
;; def=Prims.fst(503,5-503,12); use=Prims.fst(503,5-503,12)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.dtuple2 @x2
@x3))
(= (Prims.dtuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.dtuple2 @x2
@x3)))
:qid Prims_pretyping_09d9235a8068627898e77b75945bdc5c))

:named Prims_pretyping_09d9235a8068627898e77b75945bdc5c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3)))
:qid Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2))

;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2)))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(209,3-230,6)

(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)













(declare-fun Tm_refine_bed529b209feebbe87dc860b48164a54 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_bed529b209feebbe87dc860b48164a54))

:named refinement_kinding_Tm_refine_bed529b209feebbe87dc860b48164a54))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x5
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(217,7-228,28)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(217,7-228,28)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x2
@x3)
@x4)
(FStar.Pervasives.Native.fst @x5
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x5
Sec2.HIFC.store
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_bed529b209feebbe87dc860b48164a54))

:named refinement_interpretation_Tm_refine_bed529b209feebbe87dc860b48164a54))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bed529b209feebbe87dc860b48164a54
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x3
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_bed529b209feebbe87dc860b48164a54))

:named haseqTm_refine_bed529b209feebbe87dc860b48164a54))































(declare-fun Tm_refine_5ca4fff85b4856bd66f64080b7ad4125 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(213,8-216,39); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (HasType (Tm_refine_5ca4fff85b4856bd66f64080b7ad4125 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)
Tm_type)
 

:pattern ((HasType (Tm_refine_5ca4fff85b4856bd66f64080b7ad4125 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)
Tm_type))
:qid refinement_kinding_Tm_refine_5ca4fff85b4856bd66f64080b7ad4125))

:named refinement_kinding_Tm_refine_5ca4fff85b4856bd66f64080b7ad4125))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(213,8-216,39); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5ca4fff85b4856bd66f64080b7ad4125 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(209,3-230,6)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(209,3-230,6)
(and 
;; def=Sec2.HIFC.fst(214,18-214,39); use=Sec2.HIFC.fst(209,3-230,6)
(Valid 
;; def=Sec2.HIFC.fst(214,18-214,39); use=Sec2.HIFC.fst(209,3-230,6)
(Sec2.HIFC.agree_on (Sec2.HIFC.union @x2
@x3)
@x4
@x5)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=Sec2.HIFC.fst(215,18-215,39); use=Sec2.HIFC.fst(209,3-230,6)
(Valid 
;; def=Sec2.HIFC.fst(215,18-215,39); use=Sec2.HIFC.fst(209,3-230,6)
(Sec2.HIFC.related_runs @x6
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x7
@x8
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x8
@x9
@x11
@x6)
(Sec2.HIFC.bind_ifc_ @x8
@x6
@x12
@x2
@x13
@x3
@x14
@x15
@x7
@x9
@x10
@x11
@x16
@x17)
@x4
@x5)
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(209,3-230,6)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(209,3-230,6)
(= @x18
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_5ca4fff85b4856bd66f64080b7ad4125.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5ca4fff85b4856bd66f64080b7ad4125 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17)))
:qid refinement_interpretation_Tm_refine_5ca4fff85b4856bd66f64080b7ad4125))

:named refinement_interpretation_Tm_refine_5ca4fff85b4856bd66f64080b7ad4125))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5ca4fff85b4856bd66f64080b7ad4125
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(213,8-216,39); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5ca4fff85b4856bd66f64080b7ad4125 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5ca4fff85b4856bd66f64080b7ad4125 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))))
:qid haseqTm_refine_5ca4fff85b4856bd66f64080b7ad4125))

:named haseqTm_refine_5ca4fff85b4856bd66f64080b7ad4125))
;;;;;;;;;;;;;;;;s0: store{p s0 /\ (forall (x: a) (s1: store). q s0 x s1 ==> r x s1)} ->     s0': store{p s0' /\ (forall (x: a) (s1: store). q s0' x s1 ==> r x s1)}   -> FStar.Pervasives.Lemma (requires agree_on (union r0 r1) s0 s0')       (ensures related_runs (bind_ifc' x y) s0 s0')       [SMTPat (agree_on (union r0 r1) s0 s0')]
(declare-fun Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(212,19-216,39); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (HasType (Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
Tm_type)
 

:pattern ((HasType (Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
Tm_type))
:qid kinding_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff))

:named kinding_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(212,19-216,39); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff))

:named Sec2.HIFC_pre_typing_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(212,19-216,39); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14))
(and 
;; def=Sec2.HIFC.fst(212,19-216,39); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x15 Term) (@x16 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(209,3-230,6)
(Valid 
;; def=Sec2.HIFC.fst(214,18-214,39); use=Sec2.HIFC.fst(209,3-230,6)
(Sec2.HIFC.agree_on (Sec2.HIFC.union @x14
@x13)
@x15
@x16)
)

(HasType @x15
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x12
@x11
@x10
@x9))
(HasType @x16
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x12
@x11
@x10
@x9)))
(HasType (ApplyTT (ApplyTT @x0
@x15)
@x16)
(Tm_refine_5ca4fff85b4856bd66f64080b7ad4125 @x14
@x13
@x15
@x16
@x8
@x12
@x11
@x10
@x9
@x7
@x6
@x5
@x4
@x3
@x2
@x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x15)
@x16))
:qid Sec2.HIFC_interpretation_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(212,19-216,39); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x12
@x11
@x10
@x9))
(IsTotFun (ApplyTT @x0
@x15)))
 

:pattern ((ApplyTT @x0
@x15))
:qid Sec2.HIFC_interpretation_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))
:qid Sec2.HIFC_interpretation_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff))

:named Sec2.HIFC_interpretation_Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff))































; Encoding query formula : forall (a: Type) (b: Type) (w0: Sec2.HIFC.label) (r0: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;   (r1: Sec2.HIFC.label) (fs0: Sec2.HIFC.flows) (fs1: Sec2.HIFC.flows) (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a) (r: (_: a -> Sec2.HIFC.pre)) (s: (_: a -> Sec2.HIFC.post b))
;   (x: Sec2.HIFC.hifc a r0 w0 fs0 p q) (y: (x: a -> Sec2.HIFC.hifc b r1 w1 fs1 (r x) (s x))).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.reads (Sec2.HIFC.bind_ifc' x y) (Sec2.HIFC.union r0 r1) ==> p pure_result) ==>
;     (forall (s0:
;         Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)})
;         (s0':
;         Sec2.HIFC.store{p s0' /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0' x s1 ==> r x s1)}).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           Sec2.HIFC.agree_on (Sec2.HIFC.union r0 r1) s0 s0' /\
;           (forall (pure_result: Prims.unit).
;               Sec2.HIFC.related_runs (Sec2.HIFC.bind_ifc' x y) s0 s0' ==> p pure_result) ==>
;           (p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1) ==> p s0) /\
;           (forall (any_result:
;               s0:
;               Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)}).
;               s0 == any_result ==>
;               (forall (any_result:
;                   r:
;                   (a & Sec2.HIFC.store)
;                     {q s0 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r)}).
;                   x s0 == any_result ==>
;                   (forall (b: a) (b: Sec2.HIFC.store).
;                       x s0 == (b, b) ==>
;                       (p s0' /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0' x s1 ==> r x s1) ==>
;                         p s0') /\
;                       (forall (any_result:
;                           s0':
;                           Sec2.HIFC.store
;                             {p s0' /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0' x s1 ==> r x s1)})
;                         .
;                           s0' == any_result ==>
;                           (forall (any_result:
;                               r:
;                               (a & Sec2.HIFC.store)
;                                 { q s0'
;                                     (FStar.Pervasives.Native.fst r)
;                                     (FStar.Pervasives.Native.snd r) }).
;                               x s0' == any_result ==>
;                               (forall (b: a) (b: Sec2.HIFC.store).
;                                   x s0' == (b, b) ==>
;                                   Sec2.HIFC.reads x r0 /\
;                                   Sec2.HIFC.label_inclusion r0 (Sec2.HIFC.union r0 r1) /\
;                                   (forall (pure_result: Prims.unit).
;                                       Sec2.HIFC.reads x (Sec2.HIFC.union r0 r1) ==>
;                                       (p s0 /\
;                                         (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1) ==>
;                                         p s0) /\
;                                       (forall (any_result:
;                                           s0:
;                                           Sec2.HIFC.store
;                                             { p s0 /\
;                                               (forall (x: a) (s1: Sec2.HIFC.store).
;                                                   q s0 x s1 ==> r x s1) }).
;                                           s0 == any_result ==>
;                                           (p s0' /\
;                                             (forall (x: a) (s1: Sec2.HIFC.store).
;                                                 q s0' x s1 ==> r x s1) ==>
;                                             p s0') /\
;                                           (forall (any_result:
;                                               s0':
;                                               Sec2.HIFC.store
;                                                 { p s0' /\
;                                                   (forall (x: a) (s1: Sec2.HIFC.store).
;                                                       q s0' x s1 ==> r x s1) }).
;                                               s0' == any_result ==>
;                                               (forall (any_result: Prims.logical).
;                                                   Sec2.HIFC.related_runs x s0 s0' == any_result ==>
;                                                   Sec2.HIFC.related_runs x s0 s0' /\
;                                                   (forall (pure_result: Prims.unit).
;                                                       Sec2.HIFC.related_runs x s0 s0' ==>
;                                                       Sec2.HIFC.reads (y b) r1 /\
;                                                       Sec2.HIFC.label_inclusion r1
;                                                         (Sec2.HIFC.union r0 r1) /\
;                                                       (forall (pure_result: Prims.unit).
;                                                           Sec2.HIFC.reads (y b)
;                                                             (Sec2.HIFC.union r0 r1) ==>
;                                                           (p s0 /\
;                                                             (forall (x: a) (s1: Sec2.HIFC.store).
;                                                                 q s0 x s1 ==> r x s1) ==>
;                                                             p s0) /\
;                                                           (forall (any_result:
;                                                               s0:
;                                                               Sec2.HIFC.store
;                                                                 { p s0 /\
;                                                                   (forall (x: a)
;                                                                       (s1: Sec2.HIFC.store).
;                                                                       q s0 x s1 ==> r x s1) }).
;                                                               s0 == any_result ==>
;                                                               (p s0' /\
;                                                                 (forall (x: a)
;                                                                     (s1: Sec2.HIFC.store).
;                                                                     q s0' x s1 ==> r x s1) ==>
;                                                                 p s0') /\
;                                                               (forall (any_result:
;                                                                   s0':
;                                                                   Sec2.HIFC.store
;                                                                     { p s0' /\
;                                                                       (forall (x: a)
;                                                                           (s1: Sec2.HIFC.store).
;                                                                           q s0' x s1 ==> r x s1) }).
;                                                                   s0' == any_result ==>
;                                                                   Sec2.HIFC.agree_on (Sec2.HIFC.union
;                                                                         r0
;                                                                         r1)
;                                                                     s0
;                                                                     s0' /\
;                                                                   Sec2.HIFC.reads x
;                                                                     (Sec2.HIFC.union r0 r1) /\
;                                                                   (forall (pure_result: Prims.unit).
;                                                                       (let _, s1 = x s0 in
;                                                                         (let _, s1' = x s0' in
;                                                                           Sec2.HIFC.agree_on (Sec2.HIFC.union
;                                                                                 r0
;                                                                                 r1)
;                                                                             s1
;                                                                             s1')
;                                                                         <:
;                                                                         Type0) ==>
;                                                                       (forall (l: Sec2.HIFC.loc).
;                                                                           FStar.Set.mem l r1 ==>
;                                                                           Sec2.HIFC.sel b l ==
;                                                                           Sec2.HIFC.sel b l) /\
;                                                                       (forall (pure_result:
;                                                                           Prims.unit).
;                                                                           (forall (l: Sec2.HIFC.loc)
;                                                                             .
;                                                                               FStar.Set.mem l r1 ==>
;                                                                               Sec2.HIFC.sel b l ==
;                                                                               Sec2.HIFC.sel b l) ==>
;                                                                           Sec2.HIFC.agree_on r1 b b /\
;                                                                           (forall (pure_result:
;                                                                               Prims.unit).
;                                                                               Sec2.HIFC.agree_on r1
;                                                                                 b
;                                                                                 b ==>
;                                                                               b == b /\
;                                                                               (forall (pure_result:
;                                                                                   Prims.unit).
;                                                                                   b == b ==>
;                                                                                   Prims.auto_squash (
;                                                                                       r b b) /\
;                                                                                   (forall (any_result:
;                                                                                       Sec2.HIFC.store)
;                                                                                     .
;                                                                                       b ==
;                                                                                       any_result ==>
;                                                                                       (forall (any_result:
;                                                                                           r:
;                                                                                           (b &
;                                                                                             Sec2.HIFC.store
;                                                                                           )
;                                                                                             { s b
;                                                                                                 b
;                                                                                                 (FStar.Pervasives.Native.fst
;                                                                                                     r
;                                                                                                   )
;                                                                                                 (FStar.Pervasives.Native.snd
;                                                                                                     r
;                                                                                                   )
;                                                                                             }).
;                                                                                           y b b ==
;                                                                                           any_result ==>
;                                                                                           (forall (b:
;                                                                                               b)
;                                                                                               (b:
;                                                                                               Sec2.HIFC.store)
;                                                                                             .
;                                                                                               y b b ==
;                                                                                               (b,
;                                                                                               b) ==>
;                                                                                               Prims.auto_squash
;                                                                                                 (r b
;                                                                                                     b
;                                                                                                   ) /\
;                                                                                               (forall
;                                                                                                   (any_result:
;                                                                                                   Sec2.HIFC.store)
;                                                                                                 .
;                                                                                                   b ==
;                                                                                                   any_result ==>
;                                                                                                   (forall
;                                                                                                       (any_result:
;                                                                                                       r:
;                                                                                                       (
;                                                                                                         b &
;                                                                                                         Sec2.HIFC.store
;                                                                                                       )
;                                                                                                         {
;                                                                                                           s
;                                                                                                             b
;                                                                                                             b
;                                                                                                             (
;                                                                                                               FStar.Pervasives.Native.fst
;                                                                                                                 r
; 
;                                                                                                             )
;                                                                                                             (
;                                                                                                               FStar.Pervasives.Native.snd
;                                                                                                                 r
; 
;                                                                                                             )
; 
;                                                                                                         })
;                                                                                                     .
;                                                                                                       y
;                                                                                                         b
;                                                                                                         b
;                                                                                                        ==
;                                                                                                       any_result ==>
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (b:
;                                                                                                           b)
;                                                                                                           (b:
;                                                                                                           Sec2.HIFC.store)
;                                                                                                         .
;                                                                                                           y
;                                                                                                             b
;                                                                                                             b
;                                                                                                            ==
;                                                                                                           (b,
;                                                                                                           b) ==>
;                                                                                                           b ==
;                                                                                                           b /\
;                                                                                                           (
;                                                                                                             forall
;                                                                                                               (pure_result:
;                                                                                                               Prims.unit)
;                                                                                                             .
;                                                                                                               b ==
;                                                                                                               b ==>
;                                                                                                               p
;                                                                                                                 pure_result
; 
;                                                                                                           )
;                                                                                                       )
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   )))))))))))) /\
;     (forall (any_result:
;         (
;               s0:
;                 Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)} ->
;               s0':
;                 Sec2.HIFC.store
;                   {p s0' /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0' x s1 ==> r x s1)}
;             -> FStar.Pervasives.Lemma (requires Sec2.HIFC.agree_on (Sec2.HIFC.union r0 r1) s0 s0')
;                 (ensures Sec2.HIFC.related_runs (Sec2.HIFC.bind_ifc' x y) s0 s0')
;                 [SMTPat (Sec2.HIFC.agree_on (Sec2.HIFC.union r0 r1) s0 s0')])).
;         (forall (s0:
;             Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)})
;             (s0':
;             Sec2.HIFC.store{p s0' /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0' x s1 ==> r x s1)}).
;             {:pattern Sec2.HIFC.agree_on (Sec2.HIFC.union r0 r1) s0 s0'}
;             Sec2.HIFC.agree_on (Sec2.HIFC.union r0 r1) s0 s0' ==>
;             Sec2.HIFC.related_runs (Sec2.HIFC.bind_ifc' x y) s0 s0') ==>
;         (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let bind_ifc_reads_ok`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.flows)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.pre)
(HasType @x9
(Sec2.HIFC.post @x0))
(HasType @x10
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0))
(HasType @x11
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x0))
(HasType @x12
(Sec2.HIFC.hifc @x0
@x3
@x2
@x6
@x8
@x9))
(HasType @x13
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x11
@x10
@x7
@x4
@x5
@x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x15 Term))
 (! (implies (and (or label_1
(HasType @x15
Prims.unit))

;; def=Sec2.HIFC.fst(208,10-208,47); use=Sec2.HIFC.fst(209,3-230,6)
(or label_2

;; def=Sec2.HIFC.fst(208,10-208,47); use=Sec2.HIFC.fst(209,3-230,6)
(Valid 
;; def=Sec2.HIFC.fst(208,10-208,47); use=Sec2.HIFC.fst(209,3-230,6)
(Sec2.HIFC.reads @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(Sec2.HIFC.union @x3
@x5))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(209,3-230,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(209,3-230,6)
(ApplyTT @x14
@x15)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(209,3-230,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(209,3-230,6)
(ApplyTT @x14
@x15)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(209,3-230,6)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x15
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))
(HasType @x16
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10)))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(214,18-214,39); use=Sec2.HIFC.fst(217,7-228,28)
(Valid 
;; def=Sec2.HIFC.fst(214,18-214,39); use=Sec2.HIFC.fst(217,7-228,28)
(Sec2.HIFC.agree_on (Sec2.HIFC.union @x3
@x5)
@x15
@x16)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x18 Term))
 (! (implies (and (or label_3
(HasType @x18
Prims.unit))

;; def=Sec2.HIFC.fst(215,18-215,39); use=Sec2.HIFC.fst(217,7-228,28)
(or label_4

;; def=Sec2.HIFC.fst(215,18-215,39); use=Sec2.HIFC.fst(217,7-228,28)
(Valid 
;; def=Sec2.HIFC.fst(215,18-215,39); use=Sec2.HIFC.fst(217,7-228,28)
(Sec2.HIFC.related_runs @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
@x15
@x16)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(217,7-228,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(217,7-228,28)
(ApplyTT @x17
@x18)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(217,7-228,28)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(217,7-228,28)
(ApplyTT @x17
@x18)
)
)
:qid @query.5))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(217,7-228,28)
(and (implies 
;; def=Sec2.HIFC.fst(210,25-210,68); use=Sec2.HIFC.fst(210,25-210,68)
(and 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(Valid 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(ApplyTT @x8
@x15)
)


;; def=Sec2.HIFC.fst(210,33-210,68); use=Sec2.HIFC.fst(210,33-210,68)
(forall ((@x18 Term) (@x19 Term))
 (! (implies (and (HasType @x18
@x0)
(HasType @x19
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(Valid 
;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(ApplyTT (ApplyTT (ApplyTT @x9
@x15)
@x18)
@x19)
)
)

;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(Valid 
;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(ApplyTT (ApplyTT @x10
@x18)
@x19)
)
)
 
;;no pats
:qid @query.6))
)


;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(217,23-217,25)
(or label_5

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(217,23-217,25)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(217,23-217,25)
(ApplyTT @x8
@x15)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(13,31-212,22); use=Sec2.HIFC.fst(217,7-228,28)
(= @x15
@x18)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x9
@x15
@x0))

;; def=Sec2.HIFC.fst(217,12-217,25); use=Sec2.HIFC.fst(217,12-217,25)
(= (ApplyTT @x12
@x15)
@x19)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x20 Term))
 (! (implies (HasType @x20
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(217,12-217,18); use=Sec2.HIFC.fst(217,12-217,18)
(= (ApplyTT @x12
@x15)
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x20
@x21))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(217,7-228,28)
(and (implies 
;; def=Sec2.HIFC.fst(210,25-210,68); use=Sec2.HIFC.fst(210,25-210,68)
(and 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(Valid 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(ApplyTT @x8
@x16)
)


;; def=Sec2.HIFC.fst(210,33-210,68); use=Sec2.HIFC.fst(210,33-210,68)
(forall ((@x22 Term) (@x23 Term))
 (! (implies (and (HasType @x22
@x0)
(HasType @x23
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(Valid 
;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(ApplyTT (ApplyTT (ApplyTT @x9
@x16)
@x22)
@x23)
)
)

;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(Valid 
;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(ApplyTT (ApplyTT @x10
@x22)
@x23)
)
)
 
;;no pats
:qid @query.11))
)


;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(218,25-218,28)
(or label_6

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(218,25-218,28)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(218,25-218,28)
(ApplyTT @x8
@x16)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(13,31-212,42); use=Sec2.HIFC.fst(217,7-228,28)
(= @x16
@x22)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x9
@x16
@x0))

;; def=Sec2.HIFC.fst(218,12-218,28); use=Sec2.HIFC.fst(218,12-218,28)
(= (ApplyTT @x12
@x16)
@x23)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x24 Term))
 (! (implies (HasType @x24
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(218,12-218,20); use=Sec2.HIFC.fst(218,12-218,20)
(= (ApplyTT @x12
@x16)
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x24
@x25))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(219,8-219,23)
(and 
;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(219,8-219,23)
(or label_7

;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(219,8-219,23)
(Valid 
;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(219,8-219,23)
(Sec2.HIFC.reads @x0
@x8
@x9
@x12
@x3)
)
)


;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(219,8-219,23)
(or label_8

;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(219,8-219,23)
(Valid 
;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(219,8-219,23)
(Sec2.HIFC.label_inclusion @x3
(Sec2.HIFC.union @x3
@x5))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(219,8-219,23)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
Prims.unit)

;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(219,8-219,23)
(Valid 
;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(219,8-219,23)
(Sec2.HIFC.reads @x0
@x8
@x9
@x12
(Sec2.HIFC.union @x3
@x5))
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(217,7-228,28)
(and (implies 
;; def=Sec2.HIFC.fst(210,25-210,68); use=Sec2.HIFC.fst(210,25-210,68)
(and 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(Valid 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(ApplyTT @x8
@x15)
)


;; def=Sec2.HIFC.fst(210,33-210,68); use=Sec2.HIFC.fst(210,33-210,68)
(forall ((@x27 Term) (@x28 Term))
 (! (implies (and (HasType @x27
@x0)
(HasType @x28
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(Valid 
;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(ApplyTT (ApplyTT (ApplyTT @x9
@x15)
@x27)
@x28)
)
)

;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(Valid 
;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(ApplyTT (ApplyTT @x10
@x27)
@x28)
)
)
 
;;no pats
:qid @query.17))
)


;; def=Sec2.HIFC.fst(62,50-62,54); use=Sec2.HIFC.fst(220,31-220,33)
(or label_9

;; def=Sec2.HIFC.fst(62,50-62,54); use=Sec2.HIFC.fst(220,31-220,33)
(Valid 
;; def=Sec2.HIFC.fst(62,50-62,54); use=Sec2.HIFC.fst(220,31-220,33)
(ApplyTT @x8
@x15)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(62,41-212,22); use=Sec2.HIFC.fst(217,7-228,28)
(= @x15
@x27)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(217,7-228,28)
(and (implies 
;; def=Sec2.HIFC.fst(210,25-210,68); use=Sec2.HIFC.fst(210,25-210,68)
(and 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(Valid 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(ApplyTT @x8
@x16)
)


;; def=Sec2.HIFC.fst(210,33-210,68); use=Sec2.HIFC.fst(210,33-210,68)
(forall ((@x28 Term) (@x29 Term))
 (! (implies (and (HasType @x28
@x0)
(HasType @x29
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(Valid 
;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(ApplyTT (ApplyTT (ApplyTT @x9
@x16)
@x28)
@x29)
)
)

;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(Valid 
;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(ApplyTT (ApplyTT @x10
@x28)
@x29)
)
)
 
;;no pats
:qid @query.19))
)


;; def=Sec2.HIFC.fst(62,68-62,73); use=Sec2.HIFC.fst(220,34-220,37)
(or label_10

;; def=Sec2.HIFC.fst(62,68-62,73); use=Sec2.HIFC.fst(220,34-220,37)
(Valid 
;; def=Sec2.HIFC.fst(62,68-62,73); use=Sec2.HIFC.fst(220,34-220,37)
(ApplyTT @x8
@x16)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(62,58-212,42); use=Sec2.HIFC.fst(217,7-228,28)
(= @x16
@x28)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Sec2.HIFC.fst(217,7-228,28)
(= (Sec2.HIFC.related_runs @x0
@x8
@x9
@x12
@x15
@x16)
@x29)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(220,8-220,14)
(and 
;; def=Sec2.HIFC.fst(220,15-220,38); use=Sec2.HIFC.fst(220,8-220,14)
(or label_11

;; def=Sec2.HIFC.fst(220,15-220,38); use=Sec2.HIFC.fst(220,8-220,14)
(Valid 
;; def=Sec2.HIFC.fst(220,15-220,38); use=Sec2.HIFC.fst(220,8-220,14)
(Sec2.HIFC.related_runs @x0
@x8
@x9
@x12
@x15
@x16)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(220,8-220,14)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Prims.unit)

;; def=Sec2.HIFC.fst(220,15-220,38); use=Sec2.HIFC.fst(220,8-220,14)
(Valid 
;; def=Sec2.HIFC.fst(220,15-220,38); use=Sec2.HIFC.fst(220,8-220,14)
(Sec2.HIFC.related_runs @x0
@x8
@x9
@x12
@x15
@x16)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(221,8-221,23)
(and 
;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(221,8-221,23)
(or label_12

;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(221,8-221,23)
(Valid 
;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(221,8-221,23)
(Sec2.HIFC.reads @x1
(ApplyTT @x10
@x20)
(ApplyTT @x11
@x20)
(ApplyTT @x13
@x20)
@x5)
)
)


;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(221,8-221,23)
(or label_13

;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(221,8-221,23)
(Valid 
;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(221,8-221,23)
(Sec2.HIFC.label_inclusion @x5
(Sec2.HIFC.union @x3
@x5))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(221,8-221,23)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
Prims.unit)

;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(221,8-221,23)
(Valid 
;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(221,8-221,23)
(Sec2.HIFC.reads @x1
(ApplyTT @x10
@x20)
(ApplyTT @x11
@x20)
(ApplyTT @x13
@x20)
(Sec2.HIFC.union @x3
@x5))
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(217,7-228,28)
(and (implies 
;; def=Sec2.HIFC.fst(210,25-210,68); use=Sec2.HIFC.fst(210,25-210,68)
(and 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(Valid 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(ApplyTT @x8
@x15)
)


;; def=Sec2.HIFC.fst(210,33-210,68); use=Sec2.HIFC.fst(210,33-210,68)
(forall ((@x32 Term) (@x33 Term))
 (! (implies (and (HasType @x32
@x0)
(HasType @x33
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(Valid 
;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(ApplyTT (ApplyTT (ApplyTT @x9
@x15)
@x32)
@x33)
)
)

;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(Valid 
;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(ApplyTT (ApplyTT @x10
@x32)
@x33)
)
)
 
;;no pats
:qid @query.24))
)


;; def=Sec2.HIFC.fst(130,79-130,83); use=Sec2.HIFC.fst(222,46-222,48)
(or label_14

;; def=Sec2.HIFC.fst(130,79-130,83); use=Sec2.HIFC.fst(222,46-222,48)
(Valid 
;; def=Sec2.HIFC.fst(130,79-130,83); use=Sec2.HIFC.fst(222,46-222,48)
(ApplyTT @x8
@x15)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(130,70-212,22); use=Sec2.HIFC.fst(217,7-228,28)
(= @x15
@x32)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(217,7-228,28)
(and (implies 
;; def=Sec2.HIFC.fst(210,25-210,68); use=Sec2.HIFC.fst(210,25-210,68)
(and 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(Valid 
;; def=Sec2.HIFC.fst(210,25-210,29); use=Sec2.HIFC.fst(210,25-210,29)
(ApplyTT @x8
@x16)
)


;; def=Sec2.HIFC.fst(210,33-210,68); use=Sec2.HIFC.fst(210,33-210,68)
(forall ((@x33 Term) (@x34 Term))
 (! (implies (and (HasType @x33
@x0)
(HasType @x34
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(Valid 
;; def=Sec2.HIFC.fst(210,47-210,56); use=Sec2.HIFC.fst(210,47-210,56)
(ApplyTT (ApplyTT (ApplyTT @x9
@x16)
@x33)
@x34)
)
)

;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(Valid 
;; def=Sec2.HIFC.fst(210,61-210,67); use=Sec2.HIFC.fst(210,61-210,67)
(ApplyTT (ApplyTT @x10
@x33)
@x34)
)
)
 
;;no pats
:qid @query.26))
)


;; def=Sec2.HIFC.fst(130,97-130,102); use=Sec2.HIFC.fst(222,49-222,52)
(or label_15

;; def=Sec2.HIFC.fst(130,97-130,102); use=Sec2.HIFC.fst(222,49-222,52)
(Valid 
;; def=Sec2.HIFC.fst(130,97-130,102); use=Sec2.HIFC.fst(222,49-222,52)
(ApplyTT @x8
@x16)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x33 Term))
 (! (implies (and (HasType @x33
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(130,87-212,42); use=Sec2.HIFC.fst(217,7-228,28)
(= @x16
@x33)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(222,8-222,37)
(and 
;; def=Sec2.HIFC.fst(131,20-131,39); use=Sec2.HIFC.fst(222,8-222,37)
(or label_16

;; def=Sec2.HIFC.fst(131,20-131,39); use=Sec2.HIFC.fst(222,8-222,37)
(Valid 
;; def=Sec2.HIFC.fst(131,20-131,39); use=Sec2.HIFC.fst(222,8-222,37)
(Sec2.HIFC.agree_on (Sec2.HIFC.union @x3
@x5)
@x15
@x16)
)
)


;; def=Sec2.HIFC.fst(131,43-131,54); use=Sec2.HIFC.fst(222,8-222,37)
(or label_17

;; def=Sec2.HIFC.fst(131,43-131,54); use=Sec2.HIFC.fst(222,8-222,37)
(Valid 
;; def=Sec2.HIFC.fst(131,43-131,54); use=Sec2.HIFC.fst(222,8-222,37)
(Sec2.HIFC.reads @x0
@x8
@x9
@x12
(Sec2.HIFC.union @x3
@x5))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(222,8-222,37)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
Prims.unit)
(let ((@lb35 (ApplyTT @x12
@x15)))
(let ((@lb36 (ApplyTT @x12
@x16)))

;; def=Sec2.HIFC.fst(134,20-134,39); use=Sec2.HIFC.fst(222,8-222,37)
(Valid 
;; def=Sec2.HIFC.fst(134,20-134,39); use=Sec2.HIFC.fst(222,8-222,37)
(Sec2.HIFC.agree_on (Sec2.HIFC.union @x3
@x5)
(FStar.Pervasives.Native.Mktuple2__2 @lb35)
(FStar.Pervasives.Native.Mktuple2__2 @lb36))
)
)))

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(223,8-223,14)
(and 
;; def=Sec2.HIFC.fst(223,15-223,67); use=Sec2.HIFC.fst(223,8-223,14)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(223,26-223,40); use=Sec2.HIFC.fst(223,8-223,14)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x35
@x5))
)

;; def=Sec2.HIFC.fst(223,45-223,66); use=Sec2.HIFC.fst(223,8-223,14)
(or label_18

;; def=Sec2.HIFC.fst(223,45-223,66); use=Sec2.HIFC.fst(223,8-223,14)
(= (Sec2.HIFC.sel @x21
@x35)
(Sec2.HIFC.sel @x25
@x35))
)
)
 
;;no pats
:qid @query.29))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(223,8-223,14)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
Prims.unit)

;; def=Sec2.HIFC.fst(223,15-223,67); use=Sec2.HIFC.fst(223,8-223,14)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(223,26-223,40); use=Sec2.HIFC.fst(223,8-223,14)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x36
@x5))
)

;; def=Sec2.HIFC.fst(223,45-223,66); use=Sec2.HIFC.fst(223,8-223,14)
(= (Sec2.HIFC.sel @x21
@x36)
(Sec2.HIFC.sel @x25
@x36))
)
 
;;no pats
:qid @query.31))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(224,8-224,14)
(and 
;; def=Sec2.HIFC.fst(224,15-224,35); use=Sec2.HIFC.fst(224,8-224,14)
(or label_19

;; def=Sec2.HIFC.fst(224,15-224,35); use=Sec2.HIFC.fst(224,8-224,14)
(Valid 
;; def=Sec2.HIFC.fst(224,15-224,35); use=Sec2.HIFC.fst(224,8-224,14)
(Sec2.HIFC.agree_on @x5
@x21
@x25)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(224,8-224,14)
(forall ((@x36 Term))
 (! (implies (and (HasType @x36
Prims.unit)

;; def=Sec2.HIFC.fst(224,15-224,35); use=Sec2.HIFC.fst(224,8-224,14)
(Valid 
;; def=Sec2.HIFC.fst(224,15-224,35); use=Sec2.HIFC.fst(224,8-224,14)
(Sec2.HIFC.agree_on @x5
@x21
@x25)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(225,8-225,14)
(and 
;; def=Sec2.HIFC.fst(225,15-225,26); use=Sec2.HIFC.fst(225,8-225,14)
(or label_20

;; def=Sec2.HIFC.fst(225,15-225,26); use=Sec2.HIFC.fst(225,8-225,14)
(= @x20
@x24)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(225,8-225,14)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Prims.unit)

;; def=Sec2.HIFC.fst(225,15-225,26); use=Sec2.HIFC.fst(225,8-225,14)
(= @x20
@x24)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(217,7-228,28)
(and 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(226,27-226,29)
(or label_21

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(226,27-226,29)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(226,27-226,29)
(ApplyTT (ApplyTT @x10
@x20)
@x21)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-217,18); use=Sec2.HIFC.fst(217,7-228,28)
(= @x21
@x38)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x11
@x20
@x21
@x1))

;; def=Sec2.HIFC.fst(226,12-226,29); use=Sec2.HIFC.fst(226,12-226,29)
(= (ApplyTT (ApplyTT @x13
@x20)
@x21)
@x39)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x40 Term))
 (! (implies (HasType @x40
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x41 Term))
 (! (implies (and (HasType @x41
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(226,12-226,19); use=Sec2.HIFC.fst(226,12-226,19)
(= (ApplyTT (ApplyTT @x13
@x20)
@x21)
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x40
@x41))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(217,7-228,28)
(and 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(227,29-227,32)
(or label_22

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(227,29-227,32)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(227,29-227,32)
(ApplyTT (ApplyTT @x10
@x20)
@x25)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-218,20); use=Sec2.HIFC.fst(217,7-228,28)
(= @x25
@x42)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x11
@x20
@x25
@x1))

;; def=Sec2.HIFC.fst(227,12-227,32); use=Sec2.HIFC.fst(227,12-227,32)
(= (ApplyTT (ApplyTT @x13
@x20)
@x25)
@x43)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x44 Term))
 (! (implies (HasType @x44
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(217,7-228,28)
(forall ((@x45 Term))
 (! (implies (and (HasType @x45
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(227,12-227,21); use=Sec2.HIFC.fst(227,12-227,21)
(= (ApplyTT (ApplyTT @x13
@x20)
@x25)
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x44
@x45))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(228,8-228,14)
(and 
;; def=Sec2.HIFC.fst(228,15-228,28); use=Sec2.HIFC.fst(228,8-228,14)
(or label_23

;; def=Sec2.HIFC.fst(228,15-228,28); use=Sec2.HIFC.fst(228,8-228,14)
(= @x40
@x44)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(228,8-228,14)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
Prims.unit)

;; def=Sec2.HIFC.fst(228,15-228,28); use=Sec2.HIFC.fst(228,8-228,14)
(= @x40
@x44)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(228,8-228,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(228,8-228,14)
(ApplyTT @x17
@x46)
)
)
 
;;no pats
:qid @query.42))
)
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
)
 
;;no pats
:qid @query.32))
)
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.27))
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(Tm_arrow_1a8c5700998ff5f24a4502bcbc8fbaff @x13
@x12
@x7
@x6
@x4
@x2
@x11
@x1
@x10
@x9
@x0
@x8
@x5
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x16
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))
(HasType @x17
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(214,18-214,39); use=Sec2.HIFC.fst(214,18-214,39)
(Valid 
;; def=Sec2.HIFC.fst(214,18-214,39); use=Sec2.HIFC.fst(214,18-214,39)
(Sec2.HIFC.agree_on (Sec2.HIFC.union @x3
@x5)
@x16
@x17)
)
)

;; def=Sec2.HIFC.fst(215,18-215,39); use=Sec2.HIFC.fst(215,18-215,39)
(Valid 
;; def=Sec2.HIFC.fst(215,18-215,39); use=Sec2.HIFC.fst(215,18-215,39)
(Sec2.HIFC.related_runs @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
@x16
@x17)
)
)
 

:pattern ((Sec2.HIFC.agree_on (Sec2.HIFC.union @x3
@x5)
@x16
@x17))
:qid @query.44))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(209,3-230,6)
(forall ((@x16 Term))
 (! (implies (HasType @x16
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(209,3-230,6)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(209,3-230,6)
(ApplyTT @x14
@x16)
)
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.43))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.bind_ifc_reads_ok, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Sec2.HIFC_interpretation_Tm_arrow_104b7610810c4dbe735c2bf3205a6317, bool_inversion, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_FStar.Set.subset, equation_Prims.eqtype, equation_Sec2.HIFC.agree_on, equation_Sec2.HIFC.bind_hst, equation_Sec2.HIFC.bind_ifc_, equation_Sec2.HIFC.hifc, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.store, equation_Sec2.HIFC.union, function_token_typing_Prims.__cache_version_number__, int_inversion, interpretation_Tm_abs_63bcd83c24112861c302253aadf3ccd3, interpretation_Tm_abs_efbf51204e50a9385498d1fafe717722, l_and-interp, l_quant_interp_f91b6a6f0b8a07ee1c169cd5bd16ad4b, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, refinement_kinding_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_FStar.Map.contains, typing_FStar.Pervasives.Native.__proj__Mktuple2__item___1, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_FStar.Set.mem, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bind_ifc_reads_ok


; <Start encoding let bind_ifc_reads_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.bind_ifc_reads_ok (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.bind_ifc_reads_ok@tok () Term)

; </end encoding let bind_ifc_reads_ok>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(240,4-240,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


















; Encoding query formula : forall (a: Type) (b: Type) (w0: Sec2.HIFC.label) (r0: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;   (r1: Sec2.HIFC.label) (fs0: Sec2.HIFC.flows) (fs1: Sec2.HIFC.flows) (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a) (r: (_: a -> Sec2.HIFC.pre)) (s: (_: a -> Sec2.HIFC.post b))
;   (x: Sec2.HIFC.hifc a r0 w0 fs0 p q) (y: (x: a -> Sec2.HIFC.hifc b r1 w1 fs1 (r x) (s x))).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.writes (Sec2.HIFC.bind_ifc' x y) (Sec2.HIFC.union w0 w1) ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let bind_ifc_writes_ok`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.flows)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.pre)
(HasType @x9
(Sec2.HIFC.post @x0))
(HasType @x10
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0))
(HasType @x11
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x0))
(HasType @x12
(Sec2.HIFC.hifc @x0
@x3
@x2
@x6
@x8
@x9))
(HasType @x13
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x11
@x10
@x7
@x4
@x5
@x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(240,4-240,6)
(forall ((@x15 Term))
 (! (implies (and (or label_1
(HasType @x15
Prims.unit))

;; def=Sec2.HIFC.fst(239,10-239,48); use=Sec2.HIFC.fst(240,4-240,6)
(or label_2

;; def=Sec2.HIFC.fst(239,10-239,48); use=Sec2.HIFC.fst(240,4-240,6)
(Valid 
;; def=Sec2.HIFC.fst(239,10-239,48); use=Sec2.HIFC.fst(240,4-240,6)
(Sec2.HIFC.writes @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(Sec2.HIFC.union @x2
@x4))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(240,4-240,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(240,4-240,6)
(ApplyTT @x14
@x15)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(240,4-240,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(240,4-240,6)
(ApplyTT @x14
@x15)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x14
@x15)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.bind_ifc_writes_ok, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Sec2.HIFC_interpretation_Tm_arrow_104b7610810c4dbe735c2bf3205a6317, Sec2.HIFC_interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4, bool_inversion, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.bind_hst, equation_Sec2.HIFC.bind_ifc_, equation_Sec2.HIFC.hifc, equation_Sec2.HIFC.hst, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.store, equation_Sec2.HIFC.union, equation_Sec2.HIFC.writes, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, interpretation_Tm_abs_63bcd83c24112861c302253aadf3ccd3, interpretation_Tm_abs_efbf51204e50a9385498d1fafe717722, l_and-interp, l_quant_interp_f91b6a6f0b8a07ee1c169cd5bd16ad4b, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0, refinement_kinding_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.bind_ifc_, typing_Sec2.HIFC.union

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bind_ifc_writes_ok


; <Start encoding let bind_ifc_writes_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.bind_ifc_writes_ok (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.bind_ifc_writes_ok@tok () Term)

; </end encoding let bind_ifc_writes_ok>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Nil @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid typing_Prims.uu___is_Nil))

:named typing_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Cons @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid typing_Prims.uu___is_Cons))

:named typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.op_At; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(124,4-124,9); use=FStar.List.Tot.Base.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.op_At @x0
@x1
@x2)
(Prims.list @x0)))
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
@x2))
:qid typing_FStar.List.Tot.Base.op_At))

:named typing_FStar.List.Tot.Base.op_At))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.append @x0
@x1
@x2)
(Prims.list @x0)))
 

:pattern ((FStar.List.Tot.Base.append @x0
@x1
@x2))
:qid typing_FStar.List.Tot.Base.append))

:named typing_FStar.List.Tot.Base.append))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1))
(HasType @x3
(Prims.list @x1)))
(HasType (FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.precedes_append_cons_r
;;; Fact-ids: Name FStar.List.Tot.Properties.precedes_append_cons_r; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
@x0)
(HasType @x3
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(754,11-754,37); use=FStar.List.Tot.Properties.fsti(754,11-754,37)
(Valid 
;; def=FStar.List.Tot.Properties.fsti(754,11-754,37); use=FStar.List.Tot.Properties.fsti(754,11-754,37)
(Prims.precedes @x0
(Prims.list @x0)
@x2
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x0
@x1
(Prims.Cons @x0
@x2
@x3)))
)
)
 

:pattern ((Prims.precedes @x0
(Prims.list @x0)
@x2
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x0
@x1
(Prims.Cons @x0
@x2
@x3))))
:qid lemma_FStar.List.Tot.Properties.precedes_append_cons_r))
:named lemma_FStar.List.Tot.Properties.precedes_append_cons_r))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.append_l_nil
;;; Fact-ids: Name FStar.List.Tot.Properties.append_l_nil; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(123,17-123,28); use=FStar.List.Tot.Properties.fsti(123,17-123,28)
(= (FStar.List.Tot.Base.op_At @x0
@x1
(Prims.Nil @x0))
@x1)
)
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
(Prims.Nil @x0)))
:qid lemma_FStar.List.Tot.Properties.append_l_nil))
:named lemma_FStar.List.Tot.Properties.append_l_nil))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.append
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1))
(HasType @x3
(Prims.list @x1)))
(= (FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x2))
(ite (is-Prims.Nil @lb4)
@x3
(ite (is-Prims.Cons @lb4)
(Prims.Cons @x1
(Prims.Cons_hd @lb4)
(FStar.List.Tot.Base.append.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb4)
@x3))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for FStar.List.Tot.Base.op_At
;;; Fact-ids: Name FStar.List.Tot.Base.op_At; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(124,4-124,9); use=FStar.List.Tot.Base.fst(124,4-124,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.op_At @x0
@x1
@x2)
(FStar.List.Tot.Base.append @x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.op_At @x0
@x1
@x2))
:qid equation_FStar.List.Tot.Base.op_At))

:named equation_FStar.List.Tot.Base.op_At))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Nil @x0
@x1)
(BoxBool (is-Prims.Nil @x1)))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid disc_equation_Prims.Nil))

:named disc_equation_Prims.Nil))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Cons @x0
@x1)
(BoxBool (is-Prims.Cons @x1)))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid disc_equation_Prims.Cons))

:named disc_equation_Prims.Cons))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.append @x0
@x1
@x2)
(FStar.List.Tot.Base.append.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.append @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(248,4-250,37)

;;;;;;;;;;;;;;;;a : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;x : a (a)
(declare-fun x_e09860b75d8922ab497a3e5bc9347578_2 () Term)
;;;;;;;;;;;;;;;;binder_x_e09860b75d8922ab497a3e5bc9347578_2
;;; Fact-ids: 
(assert (! (HasType x_e09860b75d8922ab497a3e5bc9347578_2
x_fe28d8bcde588226b4e538b35321de05_1)
:named binder_x_e09860b75d8922ab497a3e5bc9347578_2))
;;;;;;;;;;;;;;;;l0 : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_3 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3))
;;;;;;;;;;;;;;;;l1 : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_4 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.memP_append_or (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.memP_append_or@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       (FStar.List.Tot.Base.memP x (l0 @ l1) <==>
;         FStar.List.Tot.Base.memP x l0 \/ FStar.List.Tot.Base.memP x l1) ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l0) /\ ~(Cons? l0) ==> Prims.l_False) /\
;       (l0 == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l0) ==>
;         (forall (b: a) (b: Prims.list a).
;             l0 == b :: b ==>
;             b << l0 /\
;             (forall (any_result: Prims.list a).
;                 l1 == any_result ==>
;                 (forall (pure_result: Prims.unit).
;                     (FStar.List.Tot.Base.memP x (b @ l1) <==>
;                       FStar.List.Tot.Base.memP x b \/ FStar.List.Tot.Base.memP x l1) ==>
;                     k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec memP_append_or`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Sec2.HIFC.fst(248,4-250,37); use=Sec2.HIFC.fst(248,4-250,37)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(248,4-250,37)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=Sec2.HIFC.fst(245,19-246,62); use=Sec2.HIFC.fst(248,4-250,37)
(or label_2

;; def=Sec2.HIFC.fst(245,19-246,62); use=Sec2.HIFC.fst(248,4-250,37)
(iff 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(248,4-250,37)
(Valid 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(248,4-250,37)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3
x_0a56e3de562c08d8ab59f4ac6f626a98_4))
)


;; def=Sec2.HIFC.fst(246,19-246,61); use=Sec2.HIFC.fst(248,4-250,37)
(or 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(248,4-250,37)
(Valid 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(248,4-250,37)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
)


;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(248,4-250,37)
(Valid 
;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(248,4-250,37)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_4)
)
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(248,4-250,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(248,4-250,37)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(248,4-250,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(248,4-250,37)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(248,4-250,37)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(248,4-250,37)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(248,4-250,37)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(248,4-250,37)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(248,4-250,37)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(248,4-250,37)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(248,4-250,37)
(and (implies 
;; def=Sec2.HIFC.fst(244,40-244,42); use=Sec2.HIFC.fst(248,10-248,12)
(and 
;; def=Sec2.HIFC.fst(244,40-244,42); use=Sec2.HIFC.fst(248,10-248,12)
(not 
;; def=Sec2.HIFC.fst(244,40-244,42); use=Sec2.HIFC.fst(248,10-248,12)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)


;; def=Sec2.HIFC.fst(244,40-244,42); use=Sec2.HIFC.fst(248,10-248,12)
(not 
;; def=Sec2.HIFC.fst(244,40-244,42); use=Sec2.HIFC.fst(248,10-248,12)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)
)

label_3)
(implies 
;; def=Sec2.HIFC.fst(244,40-249,8); use=Sec2.HIFC.fst(248,10-249,8)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(248,4-250,37)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(248,4-250,37)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(248,4-250,37)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Sec2.HIFC.fst(248,4-250,37)
(not 
;; def=Sec2.HIFC.fst(244,40-244,42); use=Sec2.HIFC.fst(248,10-248,12)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)


;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(248,4-250,37)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(248,4-250,37)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Sec2.HIFC.fst(244,40-250,11); use=Sec2.HIFC.fst(248,10-250,11)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(248,4-250,37)
(and 
;; def=Sec2.HIFC.fst(248,4-250,37); use=Sec2.HIFC.fst(250,35-250,37)
(or label_4

;; def=Sec2.HIFC.fst(248,4-250,37); use=Sec2.HIFC.fst(250,35-250,37)
(Valid 
;; def=Sec2.HIFC.fst(248,4-250,37); use=Sec2.HIFC.fst(250,35-250,37)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(248,4-250,37)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Sec2.HIFC.fst(244,43-244,45); use=Sec2.HIFC.fst(248,4-250,37)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_4
@x4)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(250,15-250,29)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(245,19-246,62); use=Sec2.HIFC.fst(250,15-250,29)
(iff 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(250,15-250,29)
(Valid 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(250,15-250,29)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_4))
)


;; def=Sec2.HIFC.fst(246,19-246,61); use=Sec2.HIFC.fst(250,15-250,29)
(or 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(250,15-250,29)
(Valid 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(250,15-250,29)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
@x3)
)


;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(250,15-250,29)
(Valid 
;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(250,15-250,29)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_4)
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(250,15-250,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(250,15-250,29)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.memP_append_or, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4, binder_x_e09860b75d8922ab497a3e5bc9347578_2, binder_x_fe28d8bcde588226b4e538b35321de05_1, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_FStar.List.Tot.Base.op_At, equation_Prims.eq2, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_Prims.list, l_or-interp, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_Prims.Cons, typing_FStar.List.Tot.Base.op_At

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec memP_append_or


; <Start encoding let rec memP_append_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.memP_append_or (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.memP_append_or@tok () Term)

; </end encoding let rec memP_append_or>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(256,3-266,6)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(257,8-262,44); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5))

:named refinement_kinding_Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(257,8-262,44); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(256,3-266,6)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(256,3-266,6)
(and 
;; def=Sec2.HIFC.fst(258,18-258,37); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Sec2.HIFC.fst(258,18-258,37); use=Sec2.HIFC.fst(256,3-266,6)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
@x3)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(260,17-260,44); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Sec2.HIFC.fst(260,17-260,44); use=Sec2.HIFC.fst(256,3-266,6)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x4))
)


;; def=Sec2.HIFC.fst(261,17-261,44); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Sec2.HIFC.fst(261,17-261,44); use=Sec2.HIFC.fst(256,3-266,6)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
@x3))
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(256,3-266,6)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(256,3-266,6)
(= @x5
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5))

:named refinement_interpretation_Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(257,8-262,44); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5 @x0
@x1
@x2))))
:qid haseqTm_refine_ea063cd79196abe8c31f8fed7bd2b6c5))

:named haseqTm_refine_ea063cd79196abe8c31f8fed7bd2b6c5))
;;;;;;;;;;;;;;;;rs: flow   -> FStar.Pervasives.Lemma (requires FStar.List.Tot.Base.memP rs fs)       (ensures FStar.List.Tot.Base.memP rs (fs @ fs') /\ FStar.List.Tot.Base.memP rs (fs' @ fs))       [SMTPat (FStar.List.Tot.Base.memP rs fs)]
(declare-fun Tm_arrow_a7aea2c752ab820afafd915956c609d2 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a7aea2c752ab820afafd915956c609d2
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(72,17-262,44); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a7aea2c752ab820afafd915956c609d2 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a7aea2c752ab820afafd915956c609d2 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a7aea2c752ab820afafd915956c609d2))

:named kinding_Tm_arrow_a7aea2c752ab820afafd915956c609d2))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(72,17-262,44); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a7aea2c752ab820afafd915956c609d2 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a7aea2c752ab820afafd915956c609d2 @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_a7aea2c752ab820afafd915956c609d2))

:named Sec2.HIFC_pre_typing_Tm_arrow_a7aea2c752ab820afafd915956c609d2))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a7aea2c752ab820afafd915956c609d2
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(72,17-262,44); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a7aea2c752ab820afafd915956c609d2 @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(72,17-262,44); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x3 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Sec2.HIFC.fst(258,18-258,37); use=Sec2.HIFC.fst(256,3-266,6)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
@x2)
)

(HasType @x3
Sec2.HIFC.flow))
(HasType (ApplyTT @x0
@x3)
(Tm_refine_ea063cd79196abe8c31f8fed7bd2b6c5 @x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_a7aea2c752ab820afafd915956c609d2.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a7aea2c752ab820afafd915956c609d2 @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_a7aea2c752ab820afafd915956c609d2))

:named Sec2.HIFC_interpretation_Tm_arrow_a7aea2c752ab820afafd915956c609d2))

; Encoding query formula : forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc) (fs: Sec2.HIFC.flows) (fs': Sec2.HIFC.flows).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (Sec2.HIFC.has_flow from to fs ==>
;           Sec2.HIFC.has_flow from to (fs @ fs') /\ Sec2.HIFC.has_flow from to (fs' @ fs)) ==>
;         p pure_result) ==>
;     (forall (rs: Sec2.HIFC.flow).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           FStar.List.Tot.Base.memP rs fs /\
;           (forall (pure_result: Prims.unit).
;               FStar.List.Tot.Base.memP rs (fs @ fs') /\ FStar.List.Tot.Base.memP rs (fs' @ fs) ==>
;               p pure_result) ==>
;           (forall (pure_result: Prims.unit).
;               (FStar.List.Tot.Base.memP rs (fs @ fs') <==>
;                 FStar.List.Tot.Base.memP rs fs \/ FStar.List.Tot.Base.memP rs fs') ==>
;               (forall (pure_result: Prims.unit).
;                   (FStar.List.Tot.Base.memP rs (fs' @ fs) <==>
;                     FStar.List.Tot.Base.memP rs fs' \/ FStar.List.Tot.Base.memP rs fs) ==>
;                   p pure_result))) /\
;     (forall (any_result:
;         (rs: Sec2.HIFC.flow
;             -> FStar.Pervasives.Lemma (requires FStar.List.Tot.Base.memP rs fs)
;                 (ensures
;                   FStar.List.Tot.Base.memP rs (fs @ fs') /\ FStar.List.Tot.Base.memP rs (fs' @ fs))
;                 [SMTPat (FStar.List.Tot.Base.memP rs fs)])).
;         (forall (rs: Sec2.HIFC.flow). {:pattern FStar.List.Tot.Base.memP rs fs}
;             FStar.List.Tot.Base.memP rs fs ==>
;             FStar.List.Tot.Base.memP rs (fs @ fs') /\ FStar.List.Tot.Base.memP rs (fs' @ fs)) ==>
;         (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let has_flow_append`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType @x2
Sec2.HIFC.flows)
(HasType @x3
Sec2.HIFC.flows))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))
(implies 
;; def=Sec2.HIFC.fst(253,11-253,30); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Sec2.HIFC.fst(253,11-253,30); use=Sec2.HIFC.fst(256,3-266,6)
(Sec2.HIFC.has_flow @x0
@x1
@x2)
)


;; def=Sec2.HIFC.fst(254,11-255,38); use=Sec2.HIFC.fst(256,3-266,6)
(and 
;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(256,3-266,6)
(or label_2

;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(256,3-266,6)
(Sec2.HIFC.has_flow @x0
@x1
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)
)


;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(256,3-266,6)
(or label_3

;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(256,3-266,6)
(Sec2.HIFC.has_flow @x0
@x1
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x2))
)
)
)
))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(256,3-266,6)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(256,3-266,6)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(256,3-266,6)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Sec2.HIFC.flow)

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(258,18-258,37); use=Sec2.HIFC.fst(263,8-264,32)
(Valid 
;; def=Sec2.HIFC.fst(258,18-258,37); use=Sec2.HIFC.fst(263,8-264,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x2)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(263,8-264,32)
(forall ((@x7 Term))
 (! (implies (and (or label_4
(HasType @x7
Prims.unit))

;; def=Sec2.HIFC.fst(260,17-260,44); use=Sec2.HIFC.fst(263,8-264,32)
(or label_5

;; def=Sec2.HIFC.fst(260,17-260,44); use=Sec2.HIFC.fst(263,8-264,32)
(Valid 
;; def=Sec2.HIFC.fst(260,17-260,44); use=Sec2.HIFC.fst(263,8-264,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)
)


;; def=Sec2.HIFC.fst(261,17-261,44); use=Sec2.HIFC.fst(263,8-264,32)
(or label_6

;; def=Sec2.HIFC.fst(261,17-261,44); use=Sec2.HIFC.fst(263,8-264,32)
(Valid 
;; def=Sec2.HIFC.fst(261,17-261,44); use=Sec2.HIFC.fst(263,8-264,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x2))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(263,8-264,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(263,8-264,32)
(ApplyTT @x6
@x7)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(263,8-264,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(263,8-264,32)
(ApplyTT @x6
@x7)
)
)
:qid @query.5))
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(263,8-263,22)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=Sec2.HIFC.fst(245,19-246,62); use=Sec2.HIFC.fst(263,8-263,22)
(iff 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(263,8-263,22)
(Valid 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(263,8-263,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)


;; def=Sec2.HIFC.fst(246,19-246,61); use=Sec2.HIFC.fst(263,8-263,22)
(or 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(263,8-263,22)
(Valid 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(263,8-263,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x2)
)


;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(263,8-263,22)
(Valid 
;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(263,8-263,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x3)
)
)
)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(264,8-264,22)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=Sec2.HIFC.fst(245,19-246,62); use=Sec2.HIFC.fst(264,8-264,22)
(iff 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(264,8-264,22)
(Valid 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(264,8-264,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x2))
)


;; def=Sec2.HIFC.fst(246,19-246,61); use=Sec2.HIFC.fst(264,8-264,22)
(or 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(264,8-264,22)
(Valid 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(264,8-264,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x3)
)


;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(264,8-264,22)
(Valid 
;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(264,8-264,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x2)
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(264,8-264,22)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(264,8-264,22)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Tm_arrow_a7aea2c752ab820afafd915956c609d2 @x3
@x2))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(258,18-258,37); use=Sec2.HIFC.fst(258,18-258,37)
(Valid 
;; def=Sec2.HIFC.fst(258,18-258,37); use=Sec2.HIFC.fst(258,18-258,37)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
@x2)
)
)

;; def=Sec2.HIFC.fst(260,17-261,44); use=Sec2.HIFC.fst(260,17-261,44)
(and 
;; def=Sec2.HIFC.fst(260,17-260,44); use=Sec2.HIFC.fst(260,17-260,44)
(Valid 
;; def=Sec2.HIFC.fst(260,17-260,44); use=Sec2.HIFC.fst(260,17-260,44)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)


;; def=Sec2.HIFC.fst(261,17-261,44); use=Sec2.HIFC.fst(261,17-261,44)
(Valid 
;; def=Sec2.HIFC.fst(261,17-261,44); use=Sec2.HIFC.fst(261,17-261,44)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x2))
)
)
)
 

:pattern ((FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
Sec2.HIFC.flow
@x6
@x2))
:qid @query.9))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(256,3-266,6)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(256,3-266,6)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(256,3-266,6)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.has_flow_append, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_FStar.List.Tot.Base.op_At, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.has_flow, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let has_flow_append


; <Start encoding let has_flow_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.has_flow_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.has_flow_append@tok () Term)

; </end encoding let has_flow_append>

;;;;;;;;;;;;;;;;typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021
;;; Fact-ids: Name Sec2.HIFC.add_source; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(162,76-162,90); use=Sec2.HIFC.fst(162,76-162,90)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021 @x0)
Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76)
 

:pattern ((Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021 @x0))
:qid typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021))

:named typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.add_source; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(162,4-162,14); use=Sec2.HIFC.fst(162,4-162,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.flows))
(HasType (Sec2.HIFC.add_source @x0
@x1)
Sec2.HIFC.flows))
 

:pattern ((Sec2.HIFC.add_source @x0
@x1))
:qid typing_Sec2.HIFC.add_source))

:named typing_Sec2.HIFC.add_source))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x1
@x0))
(HasType @x3
(Prims.list @x0)))
(HasType (FStar.List.Tot.Base.map @x0
@x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((FStar.List.Tot.Base.map @x0
@x1
@x2
@x3))
:qid typing_FStar.List.Tot.Base.map))

:named typing_FStar.List.Tot.Base.map))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x2
@x1))
(HasType @x4
(Prims.list @x1)))
(HasType (FStar.List.Tot.Base.map.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
(Prims.list @x2)))
 

:pattern ((FStar.List.Tot.Base.map.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_FStar.List.Tot.Base.map.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.map.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1)))
(HasType (FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
@x2)
Prims.nat))
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

:named token_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.map_lemma
;;; Fact-ids: Name FStar.List.Tot.Properties.map_lemma; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x1
@x0))
(HasType @x3
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(276,31-276,60); use=FStar.List.Tot.Properties.fsti(276,31-276,60)
(= (FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x1
(FStar.List.Tot.Base.map.fuel_instrumented ZFuel
@x0
@x1
@x2
@x3))
(FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
@x3))
)
 

:pattern ((FStar.List.Tot.Base.map.fuel_instrumented ZFuel
@x0
@x1
@x2
@x3))
:qid lemma_FStar.List.Tot.Properties.map_lemma))
:named lemma_FStar.List.Tot.Properties.map_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.List.Tot.Properties.append_length
;;; Fact-ids: Name FStar.List.Tot.Properties.append_length; Namespace FStar.List.Tot.Properties
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0))
(HasType @x2
(Prims.list @x0)))

;; def=FStar.List.Tot.Properties.fsti(139,17-139,57); use=FStar.List.Tot.Properties.fsti(139,17-139,57)
(= (FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
(FStar.List.Tot.Base.op_At @x0
@x1
@x2))
(Prims.op_Addition (FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
@x1)
(FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
@x2)))
)
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x0
(FStar.List.Tot.Base.op_At @x0
@x1
@x2)))
:qid lemma_FStar.List.Tot.Properties.append_length))
:named lemma_FStar.List.Tot.Properties.append_length))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe
;;; Fact-ids: Name FStar.Sealed.map_seal; Namespace FStar.Sealed
(assert (! 
;; def=FStar.Sealed.fsti(49,15-49,33); use=FStar.Sealed.fsti(49,67-49,77)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))

:named kinding_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76
;;; Fact-ids: Name Sec2.HIFC.add_source; Namespace Sec2.HIFC
(assert (! (HasType Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76
Tm_type)
:named kinding_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021
;;; Fact-ids: Name Sec2.HIFC.add_source; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(162,76-162,90); use=Sec2.HIFC.fst(162,76-162,90)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021 @x1)
@x0)
(let ((@lb2 @x0))
(FStar.Pervasives.Native.Mktuple2 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
Sec2.HIFC.label
(Sec2.HIFC.union @x1
(FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple2__2 @lb2))))
 

:pattern ((ApplyTT (Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021 @x1)
@x0))
:qid interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021))

:named interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.map
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x2
@x1))
(HasType @x4
(Prims.list @x1)))
(= (FStar.List.Tot.Base.map.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 @x4))
(ite (is-Prims.Nil @lb5)
(Prims.Nil @x2)
(ite (is-Prims.Cons @lb5)
(Prims.Cons @x2
(ApplyTT @x3
(Prims.Cons_hd @lb5))
(FStar.List.Tot.Base.map.fuel_instrumented @u0
@x1
@x2
@x3
(Prims.Cons_tl @lb5)))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.map.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.List.Tot.Base.length
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
(Prims.list @x1)))
(= (FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 @x2))
(ite (is-Prims.Nil @lb3)
(BoxInt 0)
(ite (is-Prims.Cons @lb3)
(Prims.op_Addition (BoxInt 1)
(FStar.List.Tot.Base.length.fuel_instrumented @u0
@x1
(Prims.Cons_tl @lb3)))
Tm_unit)))))
 :weight 0


:pattern ((FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented))

:named equation_with_fuel_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.add_source
;;; Fact-ids: Name Sec2.HIFC.add_source; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(162,4-162,14); use=Sec2.HIFC.fst(162,4-162,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.add_source @x0
@x1)
(FStar.List.Tot.Base.map (FStar.Pervasives.Native.tuple2 Sec2.HIFC.label
Sec2.HIFC.label)
(FStar.Pervasives.Native.tuple2 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
Sec2.HIFC.label)
(Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021 @x0)
@x1))
 

:pattern ((Sec2.HIFC.add_source @x0
@x1))
:qid equation_Sec2.HIFC.add_source))

:named equation_Sec2.HIFC.add_source))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.add_source; Namespace Sec2.HIFC
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,53-59,65); use=Sec2.HIFC.fst(162,55-162,58)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76))
:qid Sec2.HIFC_pre_typing_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76))

:named Sec2.HIFC_pre_typing_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76
;;; Fact-ids: Name Sec2.HIFC.add_source; Namespace Sec2.HIFC
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,53-59,65); use=Sec2.HIFC.fst(162,55-162,58)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76)
(and 
;; def=FStar.Pervasives.Native.fst(59,53-59,65); use=Sec2.HIFC.fst(162,55-162,58)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.tuple2 Sec2.HIFC.label
Sec2.HIFC.label))
(HasType (ApplyTT @x0
@x1)
(FStar.Pervasives.Native.tuple2 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
Sec2.HIFC.label)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76))
:qid Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76))

:named Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Sealed.map_seal; Namespace FStar.Sealed
(assert (! 
;; def=FStar.Sealed.fsti(49,15-49,33); use=FStar.Sealed.fsti(49,67-49,77)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x2
@x3)))
:qid FStar.Sealed_pre_typing_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))

:named FStar.Sealed_pre_typing_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe
;;; Fact-ids: Name FStar.Sealed.map_seal; Namespace FStar.Sealed
(assert (! 
;; def=FStar.Sealed.fsti(49,15-49,33); use=FStar.Sealed.fsti(49,67-49,77)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x1
@x2))
(and 
;; def=FStar.Sealed.fsti(49,15-49,33); use=FStar.Sealed.fsti(49,67-49,77)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6980332764c4493a7b0df5c02f7aefbe @x1
@x2)))
:qid FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))

:named FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.map.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.map.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.map.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.map @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.map.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.map @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(275,4-284,58)

(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (from: Sec2.HIFC.loc)
;   (to: Sec2.HIFC.loc)
;   (r0: Sec2.HIFC.label)
;   (r1: Sec2.HIFC.label)
;   (w1: Sec2.HIFC.label)
;   (fs0: Sec2.HIFC.flows)
;   (fs1: Sec2.HIFC.flows).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     ~(Sec2.HIFC.has_flow from to (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1))) /\
;     (forall (pure_result: Prims.unit).
;         ~(Sec2.HIFC.has_flow from to fs0) /\ (~(FStar.Set.mem from r0) \/ ~(FStar.Set.mem to w1)) /\
;         ~(Sec2.HIFC.has_flow from to (Sec2.HIFC.add_source r0 fs1)) ==>
;         p pure_result) ==>
;     Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1) ==
;     (FStar.Set.union r0 Sec2.HIFC.bot, w1) :: Sec2.HIFC.add_source r0 fs1 /\
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1) ==
;         (FStar.Set.union r0 Sec2.HIFC.bot, w1) :: Sec2.HIFC.add_source r0 fs1 ==>
;         FStar.Set.equal (FStar.Set.union r0 Sec2.HIFC.bot) r0 /\
;         (forall (pure_result: Prims.unit).
;             FStar.Set.equal (FStar.Set.union r0 Sec2.HIFC.bot) r0 ==>
;             (forall (pure_result: Prims.unit).
;                 (Sec2.HIFC.has_flow from to fs0 ==>
;                   Sec2.HIFC.has_flow from to (fs0 @ (r0, w1) :: Sec2.HIFC.add_source r0 fs1) /\
;                   Sec2.HIFC.has_flow from to ((r0, w1) :: Sec2.HIFC.add_source r0 fs1 @ fs0)) ==>
;                 ~(Sec2.HIFC.has_flow from to fs0) /\
;                 (forall (pure_result: Prims.unit).
;                     ~(Sec2.HIFC.has_flow from to fs0) ==>
;                     (forall (pure_result: Prims.unit).
;                         (Sec2.HIFC.has_flow from to ((r0, w1) :: Sec2.HIFC.add_source r0 fs1) ==>
;                           Sec2.HIFC.has_flow from to ((r0, w1) :: Sec2.HIFC.add_source r0 fs1 @ fs0) /\
;                           Sec2.HIFC.has_flow from to (fs0 @ (r0, w1) :: Sec2.HIFC.add_source r0 fs1)
;                         ) ==>
;                         ~(Sec2.HIFC.has_flow from to ((r0, w1) :: Sec2.HIFC.add_source r0 fs1)) /\
;                         (forall (pure_result: Prims.unit).
;                             ~(Sec2.HIFC.has_flow from to ((r0, w1) :: Sec2.HIFC.add_source r0 fs1)) ==>
;                             (r0, w1) :: Sec2.HIFC.add_source r0 fs1 ==
;                             [r0, w1] @ Sec2.HIFC.add_source r0 fs1 /\
;                             (forall (pure_result: Prims.unit).
;                                 (r0, w1) :: Sec2.HIFC.add_source r0 fs1 ==
;                                 [r0, w1] @ Sec2.HIFC.add_source r0 fs1 ==>
;                                 (forall (pure_result: Prims.unit).
;                                     (Sec2.HIFC.has_flow from from [r0, w1] ==>
;                                       Sec2.HIFC.has_flow from
;                                         from
;                                         ([r0, w1] @ Sec2.HIFC.add_source r0 fs1) /\
;                                       Sec2.HIFC.has_flow from
;                                         from
;                                         (Sec2.HIFC.add_source r0 fs1 @ [r0, w1])) ==>
;                                     p pure_result))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let elim_has_flow_seq`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
(Sec2.HIFC.loc Dummy_value))
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.flows)
(HasType @x6
Sec2.HIFC.flows))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(271,20-271,80); use=Sec2.HIFC.fst(275,4-284,58)
(not 
;; def=Sec2.HIFC.fst(271,22-271,79); use=Sec2.HIFC.fst(275,4-284,58)
(Valid 
;; def=Sec2.HIFC.fst(271,22-271,79); use=Sec2.HIFC.fst(275,4-284,58)
(Sec2.HIFC.has_flow @x0
@x1
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x6))))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(275,4-284,58)
(forall ((@x8 Term))
 (! (implies (and (or label_1
(HasType @x8
Prims.unit))

;; def=Sec2.HIFC.fst(272,21-272,44); use=Sec2.HIFC.fst(275,4-284,58)
(or label_2

;; def=Sec2.HIFC.fst(272,21-272,44); use=Sec2.HIFC.fst(275,4-284,58)
(not 
;; def=Sec2.HIFC.fst(272,22-272,44); use=Sec2.HIFC.fst(275,4-284,58)
(Valid 
;; def=Sec2.HIFC.fst(272,22-272,44); use=Sec2.HIFC.fst(275,4-284,58)
(Sec2.HIFC.has_flow @x0
@x1
@x5)
)
)
)


;; def=Sec2.HIFC.fst(273,22-273,62); use=Sec2.HIFC.fst(275,4-284,58)
(or label_3

;; def=Sec2.HIFC.fst(273,23-273,41); use=Sec2.HIFC.fst(275,4-284,58)
(not 
;; def=Sec2.HIFC.fst(273,24-273,41); use=Sec2.HIFC.fst(275,4-284,58)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x0
@x2))
)


;; def=Sec2.HIFC.fst(273,45-273,61); use=Sec2.HIFC.fst(275,4-284,58)
(not 
;; def=Sec2.HIFC.fst(273,46-273,61); use=Sec2.HIFC.fst(275,4-284,58)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x1
@x4))
)
)


;; def=Sec2.HIFC.fst(274,21-274,60); use=Sec2.HIFC.fst(275,4-284,58)
(or label_4

;; def=Sec2.HIFC.fst(274,21-274,60); use=Sec2.HIFC.fst(275,4-284,58)
(not 
;; def=Sec2.HIFC.fst(274,22-274,60); use=Sec2.HIFC.fst(275,4-284,58)
(Valid 
;; def=Sec2.HIFC.fst(274,22-274,60); use=Sec2.HIFC.fst(275,4-284,58)
(Sec2.HIFC.has_flow @x0
@x1
(Sec2.HIFC.add_source @x2
@x6))
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(275,4-284,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(275,4-284,58)
(ApplyTT @x7
@x8)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(275,4-284,58)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(275,4-284,58)
(ApplyTT @x7
@x8)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(275,4-275,10)
(and 
;; def=Sec2.HIFC.fst(275,11-276,54); use=Sec2.HIFC.fst(275,4-275,10)
(or label_5

;; def=Sec2.HIFC.fst(275,11-276,54); use=Sec2.HIFC.fst(275,4-275,10)
(= (Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x6))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(FStar.Set.union (Sec2.HIFC.loc Dummy_value)
@x2
(Sec2.HIFC.bot Dummy_value))
@x4)
(Sec2.HIFC.add_source @x2
@x6)))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(275,4-275,10)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=Sec2.HIFC.fst(275,11-276,54); use=Sec2.HIFC.fst(275,4-275,10)
(= (Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x6))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(FStar.Set.union (Sec2.HIFC.loc Dummy_value)
@x2
(Sec2.HIFC.bot Dummy_value))
@x4)
(Sec2.HIFC.add_source @x2
@x6)))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(277,4-277,10)
(and 
;; def=Sec2.HIFC.fst(277,11-277,44); use=Sec2.HIFC.fst(277,4-277,10)
(or label_6

;; def=Sec2.HIFC.fst(277,11-277,44); use=Sec2.HIFC.fst(277,4-277,10)
(Valid 
;; def=Sec2.HIFC.fst(277,11-277,44); use=Sec2.HIFC.fst(277,4-277,10)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(FStar.Set.union (Sec2.HIFC.loc Dummy_value)
@x2
(Sec2.HIFC.bot Dummy_value))
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(277,4-277,10)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=Sec2.HIFC.fst(277,11-277,44); use=Sec2.HIFC.fst(277,4-277,10)
(Valid 
;; def=Sec2.HIFC.fst(277,11-277,44); use=Sec2.HIFC.fst(277,4-277,10)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(FStar.Set.union (Sec2.HIFC.loc Dummy_value)
@x2
(Sec2.HIFC.bot Dummy_value))
@x2)
)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(278,4-278,19)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=Sec2.HIFC.fst(253,10-255,39); use=Sec2.HIFC.fst(278,4-278,19)
(implies 
;; def=Sec2.HIFC.fst(253,11-253,30); use=Sec2.HIFC.fst(278,4-278,19)
(Valid 
;; def=Sec2.HIFC.fst(253,11-253,30); use=Sec2.HIFC.fst(278,4-278,19)
(Sec2.HIFC.has_flow @x0
@x1
@x5)
)


;; def=Sec2.HIFC.fst(254,11-255,38); use=Sec2.HIFC.fst(278,4-278,19)
(and 
;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(278,4-278,19)
(Valid 
;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(278,4-278,19)
(Sec2.HIFC.has_flow @x0
@x1
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6))))
)


;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(278,4-278,19)
(Valid 
;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(278,4-278,19)
(Sec2.HIFC.has_flow @x0
@x1
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6))
@x5))
)
)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(279,4-279,10)
(and 
;; def=Sec2.HIFC.fst(279,11-279,36); use=Sec2.HIFC.fst(279,4-279,10)
(or label_7

;; def=Sec2.HIFC.fst(279,11-279,36); use=Sec2.HIFC.fst(279,4-279,10)
(not 
;; def=Sec2.HIFC.fst(279,13-279,35); use=Sec2.HIFC.fst(279,4-279,10)
(Valid 
;; def=Sec2.HIFC.fst(279,13-279,35); use=Sec2.HIFC.fst(279,4-279,10)
(Sec2.HIFC.has_flow @x0
@x1
@x5)
)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(279,4-279,10)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=Sec2.HIFC.fst(279,11-279,36); use=Sec2.HIFC.fst(279,4-279,10)
(not 
;; def=Sec2.HIFC.fst(279,13-279,35); use=Sec2.HIFC.fst(279,4-279,10)
(Valid 
;; def=Sec2.HIFC.fst(279,13-279,35); use=Sec2.HIFC.fst(279,4-279,10)
(Sec2.HIFC.has_flow @x0
@x1
@x5)
)
)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(280,4-280,19)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=Sec2.HIFC.fst(253,10-255,39); use=Sec2.HIFC.fst(280,4-280,19)
(implies 
;; def=Sec2.HIFC.fst(253,11-253,30); use=Sec2.HIFC.fst(280,4-280,19)
(Valid 
;; def=Sec2.HIFC.fst(253,11-253,30); use=Sec2.HIFC.fst(280,4-280,19)
(Sec2.HIFC.has_flow @x0
@x1
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6)))
)


;; def=Sec2.HIFC.fst(254,11-255,38); use=Sec2.HIFC.fst(280,4-280,19)
(and 
;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(280,4-280,19)
(Valid 
;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(280,4-280,19)
(Sec2.HIFC.has_flow @x0
@x1
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6))
@x5))
)


;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(280,4-280,19)
(Valid 
;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(280,4-280,19)
(Sec2.HIFC.has_flow @x0
@x1
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6))))
)
)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(281,4-281,10)
(and 
;; def=Sec2.HIFC.fst(281,11-281,64); use=Sec2.HIFC.fst(281,4-281,10)
(or label_8

;; def=Sec2.HIFC.fst(281,11-281,64); use=Sec2.HIFC.fst(281,4-281,10)
(not 
;; def=Sec2.HIFC.fst(281,13-281,63); use=Sec2.HIFC.fst(281,4-281,10)
(Valid 
;; def=Sec2.HIFC.fst(281,13-281,63); use=Sec2.HIFC.fst(281,4-281,10)
(Sec2.HIFC.has_flow @x0
@x1
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6)))
)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(281,4-281,10)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=Sec2.HIFC.fst(281,11-281,64); use=Sec2.HIFC.fst(281,4-281,10)
(not 
;; def=Sec2.HIFC.fst(281,13-281,63); use=Sec2.HIFC.fst(281,4-281,10)
(Valid 
;; def=Sec2.HIFC.fst(281,13-281,63); use=Sec2.HIFC.fst(281,4-281,10)
(Sec2.HIFC.has_flow @x0
@x1
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6)))
)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(282,4-282,10)
(and 
;; def=Sec2.HIFC.fst(282,11-283,41); use=Sec2.HIFC.fst(282,4-282,10)
(or label_9

;; def=Sec2.HIFC.fst(282,11-283,41); use=Sec2.HIFC.fst(282,4-282,10)
(= (Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Prims.Nil Sec2.HIFC.flow))
(Sec2.HIFC.add_source @x2
@x6)))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(282,4-282,10)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=Sec2.HIFC.fst(282,11-283,41); use=Sec2.HIFC.fst(282,4-282,10)
(= (Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Sec2.HIFC.add_source @x2
@x6))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Prims.Nil Sec2.HIFC.flow))
(Sec2.HIFC.add_source @x2
@x6)))
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(284,4-284,19)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.unit)

;; def=Sec2.HIFC.fst(253,10-255,39); use=Sec2.HIFC.fst(284,4-284,19)
(implies 
;; def=Sec2.HIFC.fst(253,11-253,30); use=Sec2.HIFC.fst(284,4-284,19)
(Valid 
;; def=Sec2.HIFC.fst(253,11-253,30); use=Sec2.HIFC.fst(284,4-284,19)
(Sec2.HIFC.has_flow @x0
@x0
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Prims.Nil Sec2.HIFC.flow)))
)


;; def=Sec2.HIFC.fst(254,11-255,38); use=Sec2.HIFC.fst(284,4-284,19)
(and 
;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(284,4-284,19)
(Valid 
;; def=Sec2.HIFC.fst(254,11-254,38); use=Sec2.HIFC.fst(284,4-284,19)
(Sec2.HIFC.has_flow @x0
@x0
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Prims.Nil Sec2.HIFC.flow))
(Sec2.HIFC.add_source @x2
@x6)))
)


;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(284,4-284,19)
(Valid 
;; def=Sec2.HIFC.fst(255,11-255,38); use=Sec2.HIFC.fst(284,4-284,19)
(Sec2.HIFC.has_flow @x0
@x0
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Sec2.HIFC.add_source @x2
@x6)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x2
@x4)
(Prims.Nil Sec2.HIFC.flow))))
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(284,4-284,19)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(284,4-284,19)
(ApplyTT @x7
@x15)
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.elim_has_flow_seq, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, eq2-interp, equation_FStar.List.Tot.Base.op_At, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.has_flow, equation_Sec2.HIFC.has_flow_1, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, l_or-interp, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, token_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Sec2.HIFC.union, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let elim_has_flow_seq


; <Start encoding let elim_has_flow_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.elim_has_flow_seq (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.elim_has_flow_seq@tok () Term)

; </end encoding let elim_has_flow_seq>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(288,4-290,48)

;;;;;;;;;;;;;;;;from : Sec2.HIFC.loc (Sec2.HIFC.loc)
(declare-fun x_27d89e60993a323069b3aa9641fb434f_0 () Term)
;;;;;;;;;;;;;;;;binder_x_27d89e60993a323069b3aa9641fb434f_0
;;; Fact-ids: 
(assert (! (HasType x_27d89e60993a323069b3aa9641fb434f_0
(Sec2.HIFC.loc Dummy_value))
:named binder_x_27d89e60993a323069b3aa9641fb434f_0))
;;;;;;;;;;;;;;;;to : Sec2.HIFC.loc (Sec2.HIFC.loc)
(declare-fun x_27d89e60993a323069b3aa9641fb434f_1 () Term)
;;;;;;;;;;;;;;;;binder_x_27d89e60993a323069b3aa9641fb434f_1
;;; Fact-ids: 
(assert (! (HasType x_27d89e60993a323069b3aa9641fb434f_1
(Sec2.HIFC.loc Dummy_value))
:named binder_x_27d89e60993a323069b3aa9641fb434f_1))
;;;;;;;;;;;;;;;;r : Sec2.HIFC.label (Sec2.HIFC.label)
(declare-fun x_a603d743c9b1b6b5f721b071bb0f99d1_2 () Term)
;;;;;;;;;;;;;;;;binder_x_a603d743c9b1b6b5f721b071bb0f99d1_2
;;; Fact-ids: 
(assert (! (HasType x_a603d743c9b1b6b5f721b071bb0f99d1_2
Sec2.HIFC.label)
:named binder_x_a603d743c9b1b6b5f721b071bb0f99d1_2))
;;;;;;;;;;;;;;;;fs : Sec2.HIFC.flows (Sec2.HIFC.flows)
(declare-fun x_6e9097a38b3f763e6e9e28ca07b22ddc_3 () Term)
;;;;;;;;;;;;;;;;binder_x_6e9097a38b3f763e6e9e28ca07b22ddc_3
;;; Fact-ids: 
(assert (! (HasType x_6e9097a38b3f763e6e9e28ca07b22ddc_3
Sec2.HIFC.flows)
:named binder_x_6e9097a38b3f763e6e9e28ca07b22ddc_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.add_source_monotonic (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.add_source_monotonic@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       (Sec2.HIFC.has_flow from to fs ==> Sec2.HIFC.has_flow from to (Sec2.HIFC.add_source r fs)) ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? fs) /\ ~(Cons? fs) ==> Prims.l_False) /\
;       (fs == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? fs) ==>
;         (forall (b: Sec2.HIFC.flow) (b: Prims.list Sec2.HIFC.flow).
;             fs == b :: b ==>
;             (from << from \/ (to << to \/ (r << r \/ b << fs))) /\
;             (forall (any_result: Prims.list Sec2.HIFC.flow).
;                 b == any_result ==>
;                 (forall (pure_result: Prims.unit).
;                     (Sec2.HIFC.has_flow from to b ==>
;                       Sec2.HIFC.has_flow from to (Sec2.HIFC.add_source r b)) ==>
;                     k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec add_source_monotonic`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(288,4-290,48)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(288,4-290,48)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))
(implies 
;; def=Sec2.HIFC.fst(287,11-287,30); use=Sec2.HIFC.fst(288,4-290,48)
(Valid 
;; def=Sec2.HIFC.fst(287,11-287,30); use=Sec2.HIFC.fst(288,4-290,48)
(Sec2.HIFC.has_flow x_27d89e60993a323069b3aa9641fb434f_0
x_27d89e60993a323069b3aa9641fb434f_1
x_6e9097a38b3f763e6e9e28ca07b22ddc_3)
)


;; def=Sec2.HIFC.fst(287,35-287,69); use=Sec2.HIFC.fst(288,4-290,48)
(or label_2

;; def=Sec2.HIFC.fst(287,35-287,69); use=Sec2.HIFC.fst(288,4-290,48)
(Valid 
;; def=Sec2.HIFC.fst(287,35-287,69); use=Sec2.HIFC.fst(288,4-290,48)
(Sec2.HIFC.has_flow x_27d89e60993a323069b3aa9641fb434f_0
x_27d89e60993a323069b3aa9641fb434f_1
(Sec2.HIFC.add_source x_a603d743c9b1b6b5f721b071bb0f99d1_2
x_6e9097a38b3f763e6e9e28ca07b22ddc_3))
)
)
))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(288,4-290,48)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(288,4-290,48)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(288,4-290,48)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(288,4-290,48)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(288,4-290,48)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(288,4-290,48)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(288,4-290,48)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(288,4-290,48)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(288,4-290,48)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(288,4-290,48)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(288,4-290,48)
(and (implies 
;; def=Sec2.HIFC.fst(286,54-286,56); use=Sec2.HIFC.fst(288,10-288,12)
(and 
;; def=Sec2.HIFC.fst(286,54-286,56); use=Sec2.HIFC.fst(288,10-288,12)
(not 
;; def=Sec2.HIFC.fst(286,54-286,56); use=Sec2.HIFC.fst(288,10-288,12)
(BoxBool_proj_0 (Prims.uu___is_Nil Sec2.HIFC.flow
x_6e9097a38b3f763e6e9e28ca07b22ddc_3))
)


;; def=Sec2.HIFC.fst(286,54-286,56); use=Sec2.HIFC.fst(288,10-288,12)
(not 
;; def=Sec2.HIFC.fst(286,54-286,56); use=Sec2.HIFC.fst(288,10-288,12)
(BoxBool_proj_0 (Prims.uu___is_Cons Sec2.HIFC.flow
x_6e9097a38b3f763e6e9e28ca07b22ddc_3))
)
)

label_3)
(implies 
;; def=Sec2.HIFC.fst(286,54-289,8); use=Sec2.HIFC.fst(288,10-289,8)
(= x_6e9097a38b3f763e6e9e28ca07b22ddc_3
(Prims.Nil Sec2.HIFC.flow))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(288,4-290,48)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(288,4-290,48)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(288,4-290,48)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Sec2.HIFC.fst(288,4-290,48)
(not 
;; def=Sec2.HIFC.fst(286,54-286,56); use=Sec2.HIFC.fst(288,10-288,12)
(BoxBool_proj_0 (Prims.uu___is_Nil Sec2.HIFC.flow
x_6e9097a38b3f763e6e9e28ca07b22ddc_3))
)


;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(288,4-290,48)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.flow)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(288,4-290,48)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list Sec2.HIFC.flow))

;; def=Sec2.HIFC.fst(286,54-290,11); use=Sec2.HIFC.fst(288,10-290,11)
(= x_6e9097a38b3f763e6e9e28ca07b22ddc_3
(Prims.Cons Sec2.HIFC.flow
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(288,4-290,48)
(and 
;; def=Sec2.HIFC.fst(286,30-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(or label_4

;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(Valid 
;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(Prims.precedes (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.loc Dummy_value)
x_27d89e60993a323069b3aa9641fb434f_0
x_27d89e60993a323069b3aa9641fb434f_0)
)


;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(Valid 
;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(Prims.precedes (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.loc Dummy_value)
x_27d89e60993a323069b3aa9641fb434f_1
x_27d89e60993a323069b3aa9641fb434f_1)
)


;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(Valid 
;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(Prims.precedes Sec2.HIFC.label
Sec2.HIFC.label
x_a603d743c9b1b6b5f721b071bb0f99d1_2
x_a603d743c9b1b6b5f721b071bb0f99d1_2)
)


;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(Valid 
;; def=Sec2.HIFC.fst(288,4-290,48); use=Sec2.HIFC.fst(290,46-290,48)
(Prims.precedes Sec2.HIFC.flows
Sec2.HIFC.flows
@x3
x_6e9097a38b3f763e6e9e28ca07b22ddc_3)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(288,4-290,48)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list Sec2.HIFC.flow))

;; def=Sec2.HIFC.fst(286,54-290,11); use=Sec2.HIFC.fst(288,4-290,48)
(= @x3
@x4)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(290,15-290,35)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(287,10-287,70); use=Sec2.HIFC.fst(290,15-290,35)
(implies 
;; def=Sec2.HIFC.fst(287,11-287,30); use=Sec2.HIFC.fst(290,15-290,35)
(Valid 
;; def=Sec2.HIFC.fst(287,11-287,30); use=Sec2.HIFC.fst(290,15-290,35)
(Sec2.HIFC.has_flow x_27d89e60993a323069b3aa9641fb434f_0
x_27d89e60993a323069b3aa9641fb434f_1
@x3)
)


;; def=Sec2.HIFC.fst(287,35-287,69); use=Sec2.HIFC.fst(290,15-290,35)
(Valid 
;; def=Sec2.HIFC.fst(287,35-287,69); use=Sec2.HIFC.fst(290,15-290,35)
(Sec2.HIFC.has_flow x_27d89e60993a323069b3aa9641fb434f_0
x_27d89e60993a323069b3aa9641fb434f_1
(Sec2.HIFC.add_source x_a603d743c9b1b6b5f721b071bb0f99d1_2
@x3))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(290,15-290,35)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(290,15-290,35)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.add_source_monotonic, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, binder_x_27d89e60993a323069b3aa9641fb434f_0, binder_x_27d89e60993a323069b3aa9641fb434f_1, binder_x_6e9097a38b3f763e6e9e28ca07b22ddc_3, binder_x_a603d743c9b1b6b5f721b071bb0f99d1_2, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_Prims.Cons, disc_equation_Prims.Nil, eq2-interp, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.has_flow, equation_Sec2.HIFC.has_flow_1, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_Prims.list, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, l_or-interp, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_Prims.Cons, token_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec add_source_monotonic


; <Start encoding let rec add_source_monotonic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.add_source_monotonic (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.add_source_monotonic@tok () Term)

; </end encoding let rec add_source_monotonic>


; encoding sigelt #push-options "--warn_error -271"


; <Skipped #push-options "--warn_error -271"/>

;;; Fact-ids: Name Prims.op_disEquality; Namespace Prims
(assert (! 
;; def=Prims.fst(594,4-594,18); use=Prims.fst(594,4-594,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_disEquality @x0
@x1
@x2)
(BoxBool (not (= @x1
@x2))))
 

:pattern ((Prims.op_disEquality @x0
@x1
@x2))
:qid primitive_Prims.op_disEquality))

:named primitive_Prims.op_disEquality))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(301,5-308,8)

(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(294,52-294,77); use=Sec2.HIFC.fst(294,52-294,77)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc))

:named refinement_kinding_Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(294,52-294,77); use=Sec2.HIFC.fst(294,52-294,77)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Sec2.HIFC.fst(294,59-294,75); use=Sec2.HIFC.fst(294,59-294,75)
(Valid 
;; def=Sec2.HIFC.fst(294,59-294,75); use=Sec2.HIFC.fst(294,59-294,75)
(ApplyTT @x2
(Sec2.HIFC.upd @x3
@x4
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc))

:named refinement_interpretation_Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(294,52-294,77); use=Sec2.HIFC.fst(294,52-294,77)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.int)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc @x0
@x1
@x2))))
:qid haseqTm_refine_f07a6491e1047ffd5e981dd730b6e5bc))

:named haseqTm_refine_f07a6491e1047ffd5e981dd730b6e5bc))

(declare-fun Tm_refine_a271d9e51cec2e7af75e321a09a013bd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_a271d9e51cec2e7af75e321a09a013bd))

:named refinement_kinding_Tm_refine_a271d9e51cec2e7af75e321a09a013bd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x6
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(301,5-308,8)
(ApplyTT (ApplyTT (ApplyTT @x2
(Sec2.HIFC.upd @x3
@x4
@x5))
(FStar.Pervasives.Native.fst @x6
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x6
Sec2.HIFC.store
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_a271d9e51cec2e7af75e321a09a013bd))

:named refinement_interpretation_Tm_refine_a271d9e51cec2e7af75e321a09a013bd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a271d9e51cec2e7af75e321a09a013bd
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x4
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_a271d9e51cec2e7af75e321a09a013bd))

:named haseqTm_refine_a271d9e51cec2e7af75e321a09a013bd))
(declare-fun Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(302,9-304,26); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4))

:named refinement_kinding_Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(302,9-304,26); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(301,5-308,8)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(301,5-308,8)
(not 
;; def=Sec2.HIFC.fst(302,27-302,48); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Sec2.HIFC.fst(302,27-302,48); use=Sec2.HIFC.fst(301,5-308,8)
(Sec2.HIFC.has_flow @x2
@x3
@x4)
)
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4))

:named refinement_interpretation_Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(302,9-304,26); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4 @x0
@x1
@x2))))
:qid haseqTm_refine_09333f590f0cc2bbf10dc3448a83b9a4))

:named haseqTm_refine_09333f590f0cc2bbf10dc3448a83b9a4))
;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Pervasives.Lemma (requires ~(has_flow from to fs)) (ensures Prims.l_False) [SMTPat ()]
(declare-fun Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(301,14-304,26); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5))

:named kinding_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(301,14-304,26); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5 @x2
@x3
@x4)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5))

:named Sec2.HIFC_pre_typing_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(301,14-304,26); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5 @x1
@x2
@x3))
(and 
;; def=Sec2.HIFC.fst(301,14-304,26); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x4 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(301,5-308,8)
(not 
;; def=Sec2.HIFC.fst(302,27-302,48); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Sec2.HIFC.fst(302,27-302,48); use=Sec2.HIFC.fst(301,5-308,8)
(Sec2.HIFC.has_flow @x3
@x2
@x1)
)
)

(HasType @x4
Prims.unit))
(HasType (ApplyTT @x0
@x4)
(Tm_refine_09333f590f0cc2bbf10dc3448a83b9a4 @x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5 @x1
@x2
@x3)))
:qid Sec2.HIFC_interpretation_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5))

:named Sec2.HIFC_interpretation_Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5))

; Encoding query formula : forall (a: Type) (r: Sec2.HIFC.label) (w: Sec2.HIFC.label) (fs: Sec2.HIFC.flows) (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a) (f: Sec2.HIFC.hifc a r w fs p q) (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc)
;   (s: Sec2.HIFC.store{p s}) (k: Prims.int{p (Sec2.HIFC.upd s from k)}).
;   (forall (b: a) (b: Sec2.HIFC.store).
;       f s == (b, b) ==>
;       Prims.auto_squash (p (Sec2.HIFC.upd s from k)) /\
;       (forall (return_val: s0: Sec2.HIFC.store{p s0}).
;           return_val == Sec2.HIFC.upd s from k ==>
;           (forall (any_result:
;               r:
;               (a & Sec2.HIFC.store)
;                 { q (Sec2.HIFC.upd s from k)
;                     (FStar.Pervasives.Native.fst r)
;                     (FStar.Pervasives.Native.snd r) }).
;               f (Sec2.HIFC.upd s from k) == any_result ==>
;               (forall (b: a) (b: Sec2.HIFC.store).
;                   f (Sec2.HIFC.upd s from k) == (b, b) ==>
;                   (forall (any_result: Type0).
;                       (let _, s1 = f s in
;                         (let _, s1' = f (Sec2.HIFC.upd s from k) in
;                           from <> to /\ Sec2.HIFC.sel s1 to <> Sec2.HIFC.sel s1' to)
;                         <:
;                         Type0) ==
;                       any_result ==>
;                       (forall (b: a) (b: Sec2.HIFC.store).
;                           f s == (b, b) ==> Prims.auto_squash (p (Sec2.HIFC.upd s from k)))))))) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       (let _, s1 = f s in
;         (let _, s1' = f (Sec2.HIFC.upd s from k) in
;           from <> to /\ Sec2.HIFC.sel s1 to <> Sec2.HIFC.sel s1' to)
;         <:
;         Type0) /\
;       (forall (pure_result: Prims.unit). Sec2.HIFC.has_flow from to fs ==> p pure_result) ==>
;       (forall (_: Prims.unit).
;           (*  - Could not prove post-condition
; *)
;           forall (p: Prims.pure_post Prims.unit).
;             ~(Sec2.HIFC.has_flow from to fs) ==>
;             Sec2.HIFC.respects f fs /\
;             (forall (pure_result: Prims.unit).
;                 Sec2.HIFC.respects f fs ==>
;                 Sec2.HIFC.no_leakage f from to /\
;                 (forall (pure_result: Prims.unit). Sec2.HIFC.no_leakage f from to ==> p pure_result)
;             )) /\
;       (forall (any_result:
;           (_: Prims.unit
;               -> FStar.Pervasives.Lemma (requires ~(Sec2.HIFC.has_flow from to fs))
;                   (ensures Prims.l_False)
;                   [SMTPat ()])).
;           (forall (_: Prims.unit). {:pattern ()} ~(Sec2.HIFC.has_flow from to fs) ==> Prims.l_False) ==>
;           (forall (any_result: Prims.unit). p any_result)))


; Context: While encoding a query
; While typechecking the top-level declaration `let has_flow_soundness`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flows)
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0))
(HasType @x6
(Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5))
(HasType @x7
(Sec2.HIFC.loc Dummy_value))
(HasType @x8
(Sec2.HIFC.loc Dummy_value))
(HasType @x9
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x4))
(HasType @x10
(Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc @x4
@x9
@x7)))

;; def=Prims.fst(406,51-413,120); use=Prims.fst(430,19-430,32)
(and 
;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x11 Term))
 (! (implies (HasType @x11
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(296,19-296,24); use=Sec2.HIFC.fst(301,5-308,8)
(= (ApplyTT @x6
@x9)
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x11
@x12))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(301,5-308,8)
(and 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(297,30-297,44)
(or label_1

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(301,5-308,8)
(ApplyTT @x4
(Sec2.HIFC.upd @x9
@x7
@x10))
)
)


;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x4))

;; def=Prims.fst(356,26-356,41); use=Sec2.HIFC.fst(301,5-308,8)
(= @x13
(Sec2.HIFC.upd @x9
@x7
@x10))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x5
@x9
@x7
@x10
@x0))

;; def=Sec2.HIFC.fst(297,19-297,44); use=Sec2.HIFC.fst(301,5-308,8)
(= (ApplyTT @x6
(Sec2.HIFC.upd @x9
@x7
@x10))
@x14)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x15 Term))
 (! (implies (HasType @x15
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(297,19-297,25); use=Sec2.HIFC.fst(301,5-308,8)
(= (ApplyTT @x6
(Sec2.HIFC.upd @x9
@x7
@x10))
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x15
@x16))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Tm_type)

;; def=FStar.Pervasives.fsti(112,28-112,31); use=Sec2.HIFC.fst(301,5-308,8)
(= (let ((@lb18 (ApplyTT @x6
@x9)))
(let ((@lb19 (ApplyTT @x6
(Sec2.HIFC.upd @x9
@x7
@x10))))
(Prims.l_and (Prims.b2t (Prims.op_disEquality (Sec2.HIFC.loc Dummy_value)
@x7
@x8))
(Prims.b2t (Prims.op_disEquality Prims.int
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb18)
@x8)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb19)
@x8))))))
@x17)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x18 Term))
 (! (implies (HasType @x18
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(296,19-296,24); use=Sec2.HIFC.fst(301,5-308,8)
(= (ApplyTT @x6
@x9)
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x18
@x19))
)

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(295,6-295,11)
(or label_2

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(301,5-308,8)
(ApplyTT @x4
(Sec2.HIFC.upd @x9
@x7
@x10))
)
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post Prims.unit))
(let ((@lb12 (ApplyTT @x6
@x9)))
(let ((@lb13 (ApplyTT @x6
(Sec2.HIFC.upd @x9
@x7
@x10))))

;; def=Sec2.HIFC.fst(298,15-299,38); use=Sec2.HIFC.fst(301,5-308,8)
(and 
;; def=Sec2.HIFC.fst(298,15-298,25); use=Sec2.HIFC.fst(301,5-308,8)
(not (= @x7
@x8))


;; def=Sec2.HIFC.fst(299,15-299,38); use=Sec2.HIFC.fst(301,5-308,8)
(not (= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb12)
@x8)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb13)
@x8)))
)
))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x12 Term))
 (! (implies (and (or label_3
(HasType @x12
Prims.unit))

;; def=Sec2.HIFC.fst(300,21-300,40); use=Sec2.HIFC.fst(301,5-308,8)
(or label_4

;; def=Sec2.HIFC.fst(300,21-300,40); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Sec2.HIFC.fst(300,21-300,40); use=Sec2.HIFC.fst(301,5-308,8)
(Sec2.HIFC.has_flow @x7
@x8
@x3)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(301,5-308,8)
(ApplyTT @x11
@x12)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(301,5-308,8)
(ApplyTT @x11
@x12)
)
)
:qid @query.11))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(301,5-308,8)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x12 Term))
 (! (implies (HasType @x12
Prims.unit)

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(302,25-302,49); use=Sec2.HIFC.fst(305,9-306,38)
(not 
;; def=Sec2.HIFC.fst(302,27-302,48); use=Sec2.HIFC.fst(305,9-306,38)
(Valid 
;; def=Sec2.HIFC.fst(302,27-302,48); use=Sec2.HIFC.fst(305,9-306,38)
(Sec2.HIFC.has_flow @x7
@x8
@x3)
)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(305,9-305,15)
(and 
;; def=Sec2.HIFC.fst(305,16-305,31); use=Sec2.HIFC.fst(305,9-305,15)
(or label_5

;; def=Sec2.HIFC.fst(305,16-305,31); use=Sec2.HIFC.fst(305,9-305,15)
(Valid 
;; def=Sec2.HIFC.fst(305,16-305,31); use=Sec2.HIFC.fst(305,9-305,15)
(Sec2.HIFC.respects @x0
@x4
@x5
@x6
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(305,9-305,15)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=Sec2.HIFC.fst(305,16-305,31); use=Sec2.HIFC.fst(305,9-305,15)
(Valid 
;; def=Sec2.HIFC.fst(305,16-305,31); use=Sec2.HIFC.fst(305,9-305,15)
(Sec2.HIFC.respects @x0
@x4
@x5
@x6
@x3)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(306,9-306,15)
(and 
;; def=Sec2.HIFC.fst(306,16-306,38); use=Sec2.HIFC.fst(306,9-306,15)
(or label_6

;; def=Sec2.HIFC.fst(306,16-306,38); use=Sec2.HIFC.fst(306,9-306,15)
(Valid 
;; def=Sec2.HIFC.fst(306,16-306,38); use=Sec2.HIFC.fst(306,9-306,15)
(Sec2.HIFC.no_leakage @x0
@x4
@x5
@x6
@x7
@x8)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(306,9-306,15)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.unit)

;; def=Sec2.HIFC.fst(306,16-306,38); use=Sec2.HIFC.fst(306,9-306,15)
(Valid 
;; def=Sec2.HIFC.fst(306,16-306,38); use=Sec2.HIFC.fst(306,9-306,15)
(Sec2.HIFC.no_leakage @x0
@x4
@x5
@x6
@x7
@x8)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(306,9-306,15)
(or label_7

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(306,9-306,15)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(306,9-306,15)
(ApplyTT @x13
@x15)
)
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Tm_arrow_8a426eb2df6dfaff5710a1421978b9a5 @x3
@x8
@x7))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=Sec2.HIFC.fst(302,25-302,49); use=Sec2.HIFC.fst(302,25-302,49)
(not 
;; def=Sec2.HIFC.fst(302,27-302,48); use=Sec2.HIFC.fst(302,27-302,48)
(Valid 
;; def=Sec2.HIFC.fst(302,27-302,48); use=Sec2.HIFC.fst(302,27-302,48)
(Sec2.HIFC.has_flow @x7
@x8
@x3)
)
)
)

;; def=Sec2.HIFC.fst(303,24-303,29); use=Sec2.HIFC.fst(303,24-303,29)
false
)
 

:pattern (Tm_unit)
:qid @query.17))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(301,5-308,8)
(forall ((@x13 Term))
 (! (implies (HasType @x13
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(301,5-308,8)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(301,5-308,8)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.has_flow_soundness, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Sec2.HIFC_interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.hifc, equation_Sec2.HIFC.hst, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.store, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, proj_equation_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0, refinement_interpretation_Tm_refine_f07a6491e1047ffd5e981dd730b6e5bc

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let has_flow_soundness


; <Start encoding let has_flow_soundness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.has_flow_soundness (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.has_flow_soundness@tok () Term)

; </end encoding let has_flow_soundness>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.equal; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(167,4-167,9); use=FStar.Map.fsti(167,4-167,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
(FStar.Map.t @x0
@x1)))
(HasType (FStar.Map.equal @x0
@x1
@x2
@x3)
Prims.prop))
 

:pattern ((FStar.Map.equal @x0
@x1
@x2
@x3))
:qid typing_FStar.Map.equal))

:named typing_FStar.Map.equal))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(191,4-191,13); use=Sec2.HIFC.fst(191,4-191,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13))
:qid token_correspondence_Sec2.HIFC.bind_ifc_))

:named token_correspondence_Sec2.HIFC.bind_ifc_))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_equal_intro
;;; Fact-ids: Name FStar.Map.lemma_equal_intro; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
(FStar.Map.t @x0
@x1))

;; def=FStar.Map.fsti(173,39-174,75); use=FStar.Map.fsti(173,39-174,75)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x0)

;; def=FStar.Map.fsti(173,50-174,74); use=FStar.Map.fsti(173,50-174,74)
(and 
;; def=FStar.Map.fsti(173,50-173,70); use=FStar.Map.fsti(173,50-173,70)
(= (FStar.Map.sel @x0
@x1
@x2
@x4)
(FStar.Map.sel @x0
@x1
@x3
@x4))


;; def=FStar.Map.fsti(174,45-174,74); use=FStar.Map.fsti(174,45-174,74)
(= (FStar.Map.contains @x0
@x1
@x2
@x4)
(FStar.Map.contains @x0
@x1
@x3
@x4))
)
)
 
;;no pats
:qid lemma_FStar.Map.lemma_equal_intro.1))
)

;; def=FStar.Map.fsti(175,38-175,51); use=FStar.Map.fsti(175,38-175,51)
(Valid 
;; def=FStar.Map.fsti(175,38-175,51); use=FStar.Map.fsti(175,38-175,51)
(FStar.Map.equal @x0
@x1
@x2
@x3)
)
)
 

:pattern ((FStar.Map.equal @x0
@x1
@x2
@x3))
:qid lemma_FStar.Map.lemma_equal_intro))
:named lemma_FStar.Map.lemma_equal_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_equal_elim
;;; Fact-ids: Name FStar.Map.lemma_equal_elim; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
(FStar.Map.t @x0
@x1)))

;; def=FStar.Map.fsti(183,37-183,64); use=FStar.Map.fsti(183,37-183,64)
(iff 
;; def=FStar.Map.fsti(183,38-183,49); use=FStar.Map.fsti(183,38-183,49)
(Valid 
;; def=FStar.Map.fsti(183,38-183,49); use=FStar.Map.fsti(183,38-183,49)
(FStar.Map.equal @x0
@x1
@x2
@x3)
)


;; def=FStar.Map.fsti(183,55-183,63); use=FStar.Map.fsti(183,55-183,63)
(= @x2
@x3)
)
)
 

:pattern ((FStar.Map.equal @x0
@x1
@x2
@x3))
:qid lemma_FStar.Map.lemma_equal_elim))
:named lemma_FStar.Map.lemma_equal_elim))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_9b0a3e748e3081e008e761505efef734
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! (HasType Tm_arrow_9b0a3e748e3081e008e761505efef734
Tm_type)
:named kinding_Tm_arrow_9b0a3e748e3081e008e761505efef734))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(191,4-191,13); use=Sec2.HIFC.fst(191,4-191,13)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType Sec2.HIFC.bind_ifc_@tok
Tm_arrow_9b0a3e748e3081e008e761505efef734))

;; def=Sec2.HIFC.fst(191,4-191,13); use=Sec2.HIFC.fst(191,4-191,13)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
(Sec2.HIFC.bind_ifc_ @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14))
 

:pattern ((Sec2.HIFC.bind_ifc_ @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14))
:qid function_token_typing_Sec2.HIFC.bind_ifc_.1))
)
 

:pattern ((ApplyTT @x0
Sec2.HIFC.bind_ifc_@tok))
:qid function_token_typing_Sec2.HIFC.bind_ifc_))

:named function_token_typing_Sec2.HIFC.bind_ifc_))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_9b0a3e748e3081e008e761505efef734)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_9b0a3e748e3081e008e761505efef734))
:qid Sec2.HIFC_pre_typing_Tm_arrow_9b0a3e748e3081e008e761505efef734))

:named Sec2.HIFC_pre_typing_Tm_arrow_9b0a3e748e3081e008e761505efef734))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734
;;; Fact-ids: Name Sec2.HIFC.bind_ifc'; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_9b0a3e748e3081e008e761505efef734)
(and 
;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Sec2.HIFC.pre)
(HasType @x10
(Sec2.HIFC.post @x1))
(HasType @x11
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x1))
(HasType @x12
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x2
@x1))
(HasType @x13
(Sec2.HIFC.hifc @x1
@x4
@x3
@x7
@x9
@x10))
(HasType @x14
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x12
@x11
@x8
@x5
@x6
@x2
@x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
(Sec2.HIFC.hst @x2
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x9
@x1
@x10
@x11)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x1
@x10
@x12
@x2))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_type)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.2))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.3))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.4))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.5))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.6))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.7))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.flows))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.8))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.flows))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.9))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Sec2.HIFC.pre))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.10))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Sec2.HIFC.pre)
(HasType @x10
(Sec2.HIFC.post @x1)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.11))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Sec2.HIFC.pre)
(HasType @x10
(Sec2.HIFC.post @x1))
(HasType @x11
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x1)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.12))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Sec2.HIFC.pre)
(HasType @x10
(Sec2.HIFC.post @x1))
(HasType @x11
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x1))
(HasType @x12
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x2
@x1)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.13))


;; def=Sec2.HIFC.fst(86,45-198,66); use=Sec2.HIFC.fst(191,21-198,66)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Sec2.HIFC.pre)
(HasType @x10
(Sec2.HIFC.post @x1))
(HasType @x11
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x1))
(HasType @x12
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x2
@x1))
(HasType @x13
(Sec2.HIFC.hifc @x1
@x4
@x3
@x7
@x9
@x10)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734.14))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_9b0a3e748e3081e008e761505efef734))
:qid Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734))

:named Sec2.HIFC_interpretation_Tm_arrow_9b0a3e748e3081e008e761505efef734))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(332,5-386,10)

(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



(declare-fun Tm_refine_018725da1abdf39e6cd081f25fd130fc (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(323,8-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (HasType (Tm_refine_018725da1abdf39e6cd081f25fd130fc @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)
Tm_type)
 

:pattern ((HasType (Tm_refine_018725da1abdf39e6cd081f25fd130fc @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)
Tm_type))
:qid refinement_kinding_Tm_refine_018725da1abdf39e6cd081f25fd130fc))

:named refinement_kinding_Tm_refine_018725da1abdf39e6cd081f25fd130fc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(323,8-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_018725da1abdf39e6cd081f25fd130fc @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x2
@x3)
)


;; def=Sec2.HIFC.fst(321,37-321,72); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
@x4)
(HasType @x15
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x5
@x3)
@x14)
@x15)
)
)

;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT @x6
@x14)
@x15)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_018725da1abdf39e6cd081f25fd130fc.1))


;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x2
(Sec2.HIFC.upd @x3
@x7
@x8))
)


;; def=Sec2.HIFC.fst(321,37-321,72); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
@x4)
(HasType @x15
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x5
(Sec2.HIFC.upd @x3
@x7
@x8))
@x14)
@x15)
)
)

;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT @x6
@x14)
@x15)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_018725da1abdf39e6cd081f25fd130fc.2))


;; def=Sec2.HIFC.fst(325,8-325,18); use=Sec2.HIFC.fst(332,5-386,10)
(not (= @x7
@x9))


;; def=Sec2.HIFC.fst(326,8-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(not 
;; def=Sec2.HIFC.fst(326,9-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(326,9-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(Sec2.HIFC.has_flow @x7
@x9
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x10
(Sec2.HIFC.add_source @x11
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x12)
@x13))))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_018725da1abdf39e6cd081f25fd130fc @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)))
:qid refinement_interpretation_Tm_refine_018725da1abdf39e6cd081f25fd130fc))

:named refinement_interpretation_Tm_refine_018725da1abdf39e6cd081f25fd130fc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_018725da1abdf39e6cd081f25fd130fc
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(323,8-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_018725da1abdf39e6cd081f25fd130fc @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_018725da1abdf39e6cd081f25fd130fc @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))))
:qid haseqTm_refine_018725da1abdf39e6cd081f25fd130fc))

:named haseqTm_refine_018725da1abdf39e6cd081f25fd130fc))
(declare-fun Tm_refine_49052319d2dd35f4e00cc409da2796ac (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_49052319d2dd35f4e00cc409da2796ac))

:named refinement_kinding_Tm_refine_49052319d2dd35f4e00cc409da2796ac))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x6
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(198,26-198,65); use=Sec2.HIFC.fst(332,5-386,10)
(exists ((@x7 Term) (@x8 Term))
 (! (and (HasType @x7
@x2)
(HasType @x8
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(198,40-198,49); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(198,40-198,49); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x3
@x4)
@x7)
@x8)
)


;; def=Sec2.HIFC.fst(198,53-198,64); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(198,53-198,64); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x5
@x7)
@x8)
(FStar.Pervasives.Native.fst @x6
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x6
Sec2.HIFC.store
@x1))
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_49052319d2dd35f4e00cc409da2796ac.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_49052319d2dd35f4e00cc409da2796ac))

:named refinement_interpretation_Tm_refine_49052319d2dd35f4e00cc409da2796ac))
;;;;;;;;;;;;;;;;haseq for Tm_refine_49052319d2dd35f4e00cc409da2796ac
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x4
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_49052319d2dd35f4e00cc409da2796ac))

:named haseqTm_refine_49052319d2dd35f4e00cc409da2796ac))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Sec2.HIFC.bind_ifc_@tok))
:named @kick_partial_app_74cfa6a6539c36641d60b8618b61a148))





(declare-fun Tm_refine_51379530f91978a53f2aee3997f3d0cf (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_51379530f91978a53f2aee3997f3d0cf @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_51379530f91978a53f2aee3997f3d0cf @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_51379530f91978a53f2aee3997f3d0cf))

:named refinement_kinding_Tm_refine_51379530f91978a53f2aee3997f3d0cf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_51379530f91978a53f2aee3997f3d0cf @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x8
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(198,26-198,65); use=Sec2.HIFC.fst(332,5-386,10)
(exists ((@x9 Term) (@x10 Term))
 (! (and (HasType @x9
@x2)
(HasType @x10
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(198,40-198,49); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(198,40-198,49); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x3
(Sec2.HIFC.upd @x4
@x5
@x6))
@x9)
@x10)
)


;; def=Sec2.HIFC.fst(198,53-198,64); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(198,53-198,64); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x7
@x9)
@x10)
(FStar.Pervasives.Native.fst @x8
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x8
Sec2.HIFC.store
@x1))
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_51379530f91978a53f2aee3997f3d0cf.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_51379530f91978a53f2aee3997f3d0cf @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_51379530f91978a53f2aee3997f3d0cf))

:named refinement_interpretation_Tm_refine_51379530f91978a53f2aee3997f3d0cf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_51379530f91978a53f2aee3997f3d0cf
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_51379530f91978a53f2aee3997f3d0cf @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x6
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_51379530f91978a53f2aee3997f3d0cf @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_51379530f91978a53f2aee3997f3d0cf))

:named haseqTm_refine_51379530f91978a53f2aee3997f3d0cf))


(declare-fun Tm_refine_a271d9e51cec2e7af75e321a09a013bd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_a271d9e51cec2e7af75e321a09a013bd))

:named refinement_kinding_Tm_refine_a271d9e51cec2e7af75e321a09a013bd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x6
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x2
(Sec2.HIFC.upd @x3
@x4
@x5))
(FStar.Pervasives.Native.fst @x6
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x6
Sec2.HIFC.store
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_a271d9e51cec2e7af75e321a09a013bd))

:named refinement_interpretation_Tm_refine_a271d9e51cec2e7af75e321a09a013bd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a271d9e51cec2e7af75e321a09a013bd
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x4
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_a271d9e51cec2e7af75e321a09a013bd))

:named haseqTm_refine_a271d9e51cec2e7af75e321a09a013bd))
(declare-fun Tm_refine_bed529b209feebbe87dc860b48164a54 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_bed529b209feebbe87dc860b48164a54))

:named refinement_kinding_Tm_refine_bed529b209feebbe87dc860b48164a54))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x5
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x2
@x3)
@x4)
(FStar.Pervasives.Native.fst @x5
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x5
Sec2.HIFC.store
@x1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_bed529b209feebbe87dc860b48164a54))

:named refinement_interpretation_Tm_refine_bed529b209feebbe87dc860b48164a54))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bed529b209feebbe87dc860b48164a54
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x3
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bed529b209feebbe87dc860b48164a54 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_bed529b209feebbe87dc860b48164a54))

:named haseqTm_refine_bed529b209feebbe87dc860b48164a54))












; Encoding query formula : forall (a: Type) (b: Type) (w0: Sec2.HIFC.label) (r0: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;   (r1: Sec2.HIFC.label) (fs0: Sec2.HIFC.flows) (fs1: Sec2.HIFC.flows) (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a) (r: (_: a -> Sec2.HIFC.pre)) (s: (_: a -> Sec2.HIFC.post b))
;   (x: Sec2.HIFC.hifc a r0 w0 fs0 p q) (y: (x: a -> Sec2.HIFC.hifc b r1 w1 fs1 (r x) (s x)))
;   (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc) (s0: Sec2.HIFC.store) (k: Prims.int).
;   (forall (_:
;       Prims.squash (p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1) /\
;           p (Sec2.HIFC.upd s0 from k) /\
;           (forall (x: a) (s1: Sec2.HIFC.store). q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1) /\
;           from <> to /\
;           ~(Sec2.HIFC.has_flow from to (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1)))
;         )).
;       (*  - Could not prove post-condition
; *)
;       p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1) /\
;       (forall (any_result: Sec2.HIFC.store).
;           s0 == any_result ==>
;           (forall (any_result:
;               r:
;               (b & Sec2.HIFC.store)
;                 { exists (x: a) (s1: Sec2.HIFC.store).
;                     q s0 x s1 /\
;                     s x s1 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) }).
;               Sec2.HIFC.bind_ifc' x y s0 == any_result ==>
;               (forall (return_val:
;                   r:
;                   (b & Sec2.HIFC.store)
;                     { exists (x: a) (s1: Sec2.HIFC.store).
;                         q s0 x s1 /\
;                         s x s1 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) }).
;                   return_val == Sec2.HIFC.bind_ifc' x y s0 ==>
;                   Sec2.HIFC.bind_ifc' x y s0 == return_val ==>
;                   (forall (b: b) (b: Sec2.HIFC.store).
;                       Sec2.HIFC.bind_ifc' x y s0 == (b, b) ==>
;                       p (Sec2.HIFC.upd s0 from k) /\
;                       (forall (x: a) (s1: Sec2.HIFC.store).
;                           q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1)))))) /\
;   (forall (p: Prims.pure_post Prims.unit).
;       p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1) /\
;       p (Sec2.HIFC.upd s0 from k) /\
;       (forall (x: a) (s1: Sec2.HIFC.store). q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1) /\
;       from <> to /\
;       ~(Sec2.HIFC.has_flow from to (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1))) /\
;       (forall (pure_result: Prims.unit).
;           (let _, s2 = Sec2.HIFC.bind_ifc' x y s0 in
;             (let _, s2' = Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) in
;               Sec2.HIFC.sel s2 to == Sec2.HIFC.sel s2' to)
;             <:
;             Type0) ==>
;           p pure_result) ==>
;       Sec2.HIFC.reads x r0 /\
;       (forall (pure_result: Prims.unit).
;           Sec2.HIFC.reads x r0 ==>
;           p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1) /\
;           (forall (any_result: Sec2.HIFC.store).
;               s0 == any_result ==>
;               (forall (any_result:
;                   r:
;                   (b & Sec2.HIFC.store)
;                     { exists (x: a) (s1: Sec2.HIFC.store).
;                         q s0 x s1 /\
;                         s x s1 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) }).
;                   Sec2.HIFC.bind_ifc' x y s0 == any_result ==>
;                   (forall (return_val:
;                       r:
;                       (b & Sec2.HIFC.store)
;                         { exists (x: a) (s1: Sec2.HIFC.store).
;                             q s0 x s1 /\
;                             s x s1 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) })
;                     .
;                       return_val == Sec2.HIFC.bind_ifc' x y s0 ==>
;                       Sec2.HIFC.bind_ifc' x y s0 == return_val ==>
;                       (forall (b: b) (b: Sec2.HIFC.store).
;                           Sec2.HIFC.bind_ifc' x y s0 == (b, b) ==>
;                           p (Sec2.HIFC.upd s0 from k) /\
;                           (forall (x: a) (s1: Sec2.HIFC.store).
;                               q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1) /\
;                           (forall (any_result: Sec2.HIFC.store).
;                               Sec2.HIFC.upd s0 from k == any_result ==>
;                               (forall (any_result:
;                                   r:
;                                   (b & Sec2.HIFC.store)
;                                     { exists (x: a) (s1: Sec2.HIFC.store).
;                                         q (Sec2.HIFC.upd s0 from k) x s1 /\
;                                         s x
;                                           s1
;                                           (FStar.Pervasives.Native.fst r)
;                                           (FStar.Pervasives.Native.snd r) }).
;                                   Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) == any_result ==>
;                                   (forall (return_val:
;                                       r:
;                                       (b & Sec2.HIFC.store)
;                                         { exists (x: a) (s1: Sec2.HIFC.store).
;                                             q (Sec2.HIFC.upd s0 from k) x s1 /\
;                                             s x
;                                               s1
;                                               (FStar.Pervasives.Native.fst r)
;                                               (FStar.Pervasives.Native.snd r) }).
;                                       return_val ==
;                                       Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) ==>
;                                       Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) ==
;                                       return_val ==>
;                                       (forall (b: b) (b: Sec2.HIFC.store).
;                                           Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) ==
;                                           (b,
;                                           b) ==>
;                                           Prims.auto_squash (p s0) /\
;                                           (forall (any_result: Sec2.HIFC.store).
;                                               s0 == any_result ==>
;                                               (forall (any_result:
;                                                   r:
;                                                   (a & Sec2.HIFC.store)
;                                                     { q s0
;                                                         (FStar.Pervasives.Native.fst r)
;                                                         (FStar.Pervasives.Native.snd r) }).
;                                                   x s0 == any_result ==>
;                                                   (forall (b: a) (b: Sec2.HIFC.store).
;                                                       x s0 == (b, b) ==>
;                                                       Prims.auto_squash (p (Sec2.HIFC.upd s0 from k)
;                                                         ) /\
;                                                       (forall (any_result: Sec2.HIFC.store).
;                                                           Sec2.HIFC.upd s0 from k == any_result ==>
;                                                           (forall (any_result:
;                                                               r:
;                                                               (a & Sec2.HIFC.store)
;                                                                 { q (Sec2.HIFC.upd s0 from k)
;                                                                     (FStar.Pervasives.Native.fst r)
;                                                                     (FStar.Pervasives.Native.snd r)
;                                                                 }).
;                                                               x (Sec2.HIFC.upd s0 from k) ==
;                                                               any_result ==>
;                                                               (forall (b: a) (b: Sec2.HIFC.store).
;                                                                   x (Sec2.HIFC.upd s0 from k) ==
;                                                                   (b,
;                                                                   b) ==>
;                                                                   ~(Sec2.HIFC.has_flow from
;                                                                       to
;                                                                       (fs0 @
;                                                                         Sec2.HIFC.add_source r0
;                                                                           ((Sec2.HIFC.bot,
;                                                                             w1) ::
;                                                                             fs1))) /\
;                                                                   (forall (pure_result: Prims.unit).
;                                                                       ~(Sec2.HIFC.has_flow from
;                                                                           to
;                                                                           fs0) /\
;                                                                       (~(FStar.Set.mem from r0) \/
;                                                                         ~(FStar.Set.mem to w1)) /\
;                                                                       ~(Sec2.HIFC.has_flow from
;                                                                           to
;                                                                           (Sec2.HIFC.add_source r0
;                                                                               fs1)) ==>
;                                                                       ~(Sec2.HIFC.has_flow from
;                                                                           to
;                                                                           fs0) /\
;                                                                       (forall (pure_result:
;                                                                           Prims.unit).
;                                                                           ~(Sec2.HIFC.has_flow from
;                                                                               to
;                                                                               fs0) ==>
;                                                                           Sec2.HIFC.respects x fs0 /\
;                                                                           (forall (pure_result:
;                                                                               Prims.unit).
;                                                                               Sec2.HIFC.respects x
;                                                                                 fs0 ==>
;                                                                               Sec2.HIFC.no_leakage x
;                                                                                 from
;                                                                                 to /\
;                                                                               (forall (pure_result:
;                                                                                   Prims.unit).
;                                                                                   Sec2.HIFC.no_leakage
;                                                                                     x
;                                                                                     from
;                                                                                     to ==>
;                                                                                   Sec2.HIFC.sel b to ==
;                                                                                   Sec2.HIFC.sel b to /\
;                                                                                   (forall (pure_result:
;                                                                                       Prims.unit).
;                                                                                       Sec2.HIFC.sel b
;                                                                                         to ==
;                                                                                       Sec2.HIFC.sel b
;                                                                                         to ==>
;                                                                                       Prims.auto_squash
;                                                                                         (r b b) /\
;                                                                                       (forall (any_result:
;                                                                                           Sec2.HIFC.store)
;                                                                                         .
;                                                                                           b ==
;                                                                                           any_result ==>
;                                                                                           (forall (any_result:
;                                                                                               r:
;                                                                                               (b &
;                                                                                                 Sec2.HIFC.store
;                                                                                               )
;                                                                                                 { s b
;                                                                                                     b
;                                                                                                     (
;                                                                                                       FStar.Pervasives.Native.fst
;                                                                                                         r
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       FStar.Pervasives.Native.snd
;                                                                                                         r
; 
;                                                                                                     )
;                                                                                                    })
;                                                                                             .
;                                                                                               y b b ==
;                                                                                               any_result ==>
;                                                                                               (forall
;                                                                                                   (b:
;                                                                                                   b)
;                                                                                                   (b:
;                                                                                                   Sec2.HIFC.store)
;                                                                                                 .
;                                                                                                   y b
;                                                                                                     b
;                                                                                                    ==
;                                                                                                   (b,
;                                                                                                   b) ==>
;                                                                                                   Prims.auto_squash
;                                                                                                     (
;                                                                                                       r
;                                                                                                         b
;                                                                                                         b
; 
;                                                                                                     )
;                                                                                                    /\
;                                                                                                   (forall
;                                                                                                       (any_result:
;                                                                                                       Sec2.HIFC.store)
;                                                                                                     .
;                                                                                                       b ==
;                                                                                                       any_result ==>
;                                                                                                       (
;                                                                                                         forall
;                                                                                                           (any_result:
;                                                                                                           r:
;                                                                                                           (
;                                                                                                             b &
;                                                                                                             Sec2.HIFC.store
;                                                                                                           )
;                                                                                                             {
;                                                                                                               s
;                                                                                                                 b
;                                                                                                                 b
;                                                                                                                 (
;                                                                                                                   FStar.Pervasives.Native.fst
;                                                                                                                     r
; 
;                                                                                                                 )
;                                                                                                                 (
;                                                                                                                   FStar.Pervasives.Native.snd
;                                                                                                                     r
; 
;                                                                                                                 )
; 
;                                                                                                             })
;                                                                                                         .
;                                                                                                           y
;                                                                                                             b
;                                                                                                             b
;                                                                                                            ==
;                                                                                                           any_result ==>
;                                                                                                           (
;                                                                                                             forall
;                                                                                                               (b:
;                                                                                                               b)
;                                                                                                               (b:
;                                                                                                               Sec2.HIFC.store)
;                                                                                                             .
;                                                                                                               y
;                                                                                                                 b
;                                                                                                                 b
;                                                                                                                ==
;                                                                                                               (b,
;                                                                                                               b) ==>
;                                                                                                               b ==
;                                                                                                               b /\
;                                                                                                               (
;                                                                                                                 forall
;                                                                                                                   (pure_result:
;                                                                                                                   Prims.unit)
;                                                                                                                 .
;                                                                                                                   b ==
;                                                                                                                   b ==>
;                                                                                                                   b ==
;                                                                                                                   b /\
;                                                                                                                   (
;                                                                                                                     forall
;                                                                                                                       (pure_result:
;                                                                                                                       Prims.unit)
;                                                                                                                     .
;                                                                                                                       b ==
;                                                                                                                       b ==>
;                                                                                                                       (
;                                                                                                                         forall
;                                                                                                                           (k:
;                                                                                                                           Prims.pure_post
;                                                                                                                             Prims.unit
;                                                                                                                           )
;                                                                                                                         .
;                                                                                                                           (
;                                                                                                                             forall
;                                                                                                                               (x:
;                                                                                                                               Prims.unit)
;                                                                                                                             .
;                                                                                                                               {:pattern
; 
;                                                                                                                                 Prims.guard_free
;                                                                                                                                   (
;                                                                                                                                     k
;                                                                                                                                       x
; 
;                                                                                                                                   )
;                                                                                                                                 }
;                                                                                                                               p
;                                                                                                                                 x
;                                                                                                                                ==>
;                                                                                                                               k
;                                                                                                                                 x
; 
;                                                                                                                           ) ==>
;                                                                                                                           (
;                                                                                                                             FStar.Set.mem
;                                                                                                                               to
;                                                                                                                               w1
;                                                                                                                              ==
;                                                                                                                             true ==>
;                                                                                                                             ~(
;                                                                                                                               FStar.Set.mem
;                                                                                                                                 from
;                                                                                                                                 r0
; 
;                                                                                                                             ) /\
;                                                                                                                             (
;                                                                                                                               forall
;                                                                                                                                 (pure_result:
;                                                                                                                                 Prims.unit)
;                                                                                                                               .
;                                                                                                                                 ~(
;                                                                                                                                   FStar.Set.mem
;                                                                                                                                     from
;                                                                                                                                     r0
; 
;                                                                                                                                 ) ==>
;                                                                                                                                 Sec2.HIFC.reads
;                                                                                                                                   x
;                                                                                                                                   r0
;                                                                                                                                  /\
;                                                                                                                                 (
;                                                                                                                                   forall
;                                                                                                                                     (pure_result:
;                                                                                                                                     Prims.unit)
;                                                                                                                                   .
;                                                                                                                                     Sec2.HIFC.reads
;                                                                                                                                       x
;                                                                                                                                       r0
;                                                                                                                                      ==>
;                                                                                                                                     ~(
;                                                                                                                                       FStar.Set.mem
;                                                                                                                                         from
;                                                                                                                                         r0
; 
;                                                                                                                                     ) /\
;                                                                                                                                     (
;                                                                                                                                       forall
;                                                                                                                                         (any_result:
;                                                                                                                                         Sec2.HIFC.loc)
;                                                                                                                                       .
;                                                                                                                                         from ==
;                                                                                                                                         any_result ==>
;                                                                                                                                         Prims.auto_squash
;                                                                                                                                           (
;                                                                                                                                             p
;                                                                                                                                               s0
; 
;                                                                                                                                           )
;                                                                                                                                          /\
;                                                                                                                                         (
;                                                                                                                                           forall
;                                                                                                                                             (any_result:
;                                                                                                                                             Sec2.HIFC.store)
;                                                                                                                                           .
;                                                                                                                                             s0 ==
;                                                                                                                                             any_result ==>
;                                                                                                                                             Sec2.HIFC.reads
;                                                                                                                                               x
;                                                                                                                                               r0
;                                                                                                                                              /\
;                                                                                                                                             (
;                                                                                                                                               forall
;                                                                                                                                                 (pure_result:
;                                                                                                                                                 Prims.unit)
;                                                                                                                                               .
;                                                                                                                                                 Sec2.HIFC.does_not_read_loc
;                                                                                                                                                   x
;                                                                                                                                                   r0
;                                                                                                                                                   from
;                                                                                                                                                   s0
;                                                                                                                                                  ==>
;                                                                                                                                                 Prims.auto_squash
;                                                                                                                                                   (
;                                                                                                                                                     p
;                                                                                                                                                       s0
; 
;                                                                                                                                                   )
;                                                                                                                                                  /\
;                                                                                                                                                 (
;                                                                                                                                                   forall
;                                                                                                                                                     (any_result:
;                                                                                                                                                     Sec2.HIFC.store)
;                                                                                                                                                   .
;                                                                                                                                                     s0 ==
;                                                                                                                                                     any_result ==>
;                                                                                                                                                     (
;                                                                                                                                                       forall
;                                                                                                                                                         (any_result:
;                                                                                                                                                         Prims.logical)
;                                                                                                                                                       .
;                                                                                                                                                         Sec2.HIFC.does_not_read_loc
;                                                                                                                                                           x
;                                                                                                                                                           r0
;                                                                                                                                                           from
;                                                                                                                                                           s0
;                                                                                                                                                          ==
;                                                                                                                                                         any_result ==>
;                                                                                                                                                         Sec2.HIFC.does_not_read_loc
;                                                                                                                                                           x
;                                                                                                                                                           r0
;                                                                                                                                                           from
;                                                                                                                                                           s0
;                                                                                                                                                          /\
;                                                                                                                                                         (
;                                                                                                                                                           forall
;                                                                                                                                                             (pure_result:
;                                                                                                                                                             Prims.unit)
;                                                                                                                                                           .
;                                                                                                                                                             Sec2.HIFC.does_not_read_loc
;                                                                                                                                                               x
;                                                                                                                                                               r0
;                                                                                                                                                               from
;                                                                                                                                                               s0
;                                                                                                                                                              ==>
;                                                                                                                                                             Prims.auto_squash
;                                                                                                                                                               (
;                                                                                                                                                                 p
;                                                                                                                                                                   s0
; 
;                                                                                                                                                               )
;                                                                                                                                                              /\
;                                                                                                                                                             (
;                                                                                                                                                               forall
;                                                                                                                                                                 (any_result:
;                                                                                                                                                                 Sec2.HIFC.store)
;                                                                                                                                                               .
;                                                                                                                                                                 s0 ==
;                                                                                                                                                                 any_result ==>
;                                                                                                                                                                 (
;                                                                                                                                                                   forall
;                                                                                                                                                                     (any_result:
;                                                                                                                                                                     Prims.logical)
;                                                                                                                                                                   .
;                                                                                                                                                                     Sec2.HIFC.does_not_read_loc_v
;                                                                                                                                                                       x
;                                                                                                                                                                       r0
;                                                                                                                                                                       from
;                                                                                                                                                                       s0
;                                                                                                                                                                       k
;                                                                                                                                                                      ==
;                                                                                                                                                                     any_result ==>
;                                                                                                                                                                     Sec2.HIFC.does_not_read_loc_v
;                                                                                                                                                                       x
;                                                                                                                                                                       r0
;                                                                                                                                                                       from
;                                                                                                                                                                       s0
;                                                                                                                                                                       k
;                                                                                                                                                                      /\
;                                                                                                                                                                     (
;                                                                                                                                                                       forall
;                                                                                                                                                                         (pure_result:
;                                                                                                                                                                         Prims.unit)
;                                                                                                                                                                       .
;                                                                                                                                                                         Sec2.HIFC.does_not_read_loc_v
;                                                                                                                                                                           x
;                                                                                                                                                                           r0
;                                                                                                                                                                           from
;                                                                                                                                                                           s0
;                                                                                                                                                                           k
;                                                                                                                                                                          ==>
;                                                                                                                                                                         b ==
;                                                                                                                                                                         b /\
;                                                                                                                                                                         (
;                                                                                                                                                                           forall
;                                                                                                                                                                             (pure_result:
;                                                                                                                                                                             Prims.unit)
;                                                                                                                                                                           .
;                                                                                                                                                                             b ==
;                                                                                                                                                                             b ==>
;                                                                                                                                                                             (
;                                                                                                                                                                               forall
;                                                                                                                                                                                 (l:
;                                                                                                                                                                                 Sec2.HIFC.loc)
;                                                                                                                                                                               .
;                                                                                                                                                                                 l <>
;                                                                                                                                                                                 from ==>
;                                                                                                                                                                                 Sec2.HIFC.sel
;                                                                                                                                                                                   b
;                                                                                                                                                                                   l
;                                                                                                                                                                                  ==
;                                                                                                                                                                                 Sec2.HIFC.sel
;                                                                                                                                                                                   b
;                                                                                                                                                                                   l
; 
;                                                                                                                                                                             ) /\
;                                                                                                                                                                             (
;                                                                                                                                                                               forall
;                                                                                                                                                                                 (pure_result:
;                                                                                                                                                                                 Prims.unit)
;                                                                                                                                                                               .
;                                                                                                                                                                                 (
;                                                                                                                                                                                   forall
;                                                                                                                                                                                     (l:
;                                                                                                                                                                                     Sec2.HIFC.loc)
;                                                                                                                                                                                   .
;                                                                                                                                                                                     l <>
;                                                                                                                                                                                     from ==>
;                                                                                                                                                                                     Sec2.HIFC.sel
;                                                                                                                                                                                       b
;                                                                                                                                                                                       l
;                                                                                                                                                                                      ==
;                                                                                                                                                                                     Sec2.HIFC.sel
;                                                                                                                                                                                       b
;                                                                                                                                                                                       l
; 
;                                                                                                                                                                                 ) ==>
;                                                                                                                                                                                 (
;                                                                                                                                                                                   FStar.Map.equal
;                                                                                                                                                                                     b
;                                                                                                                                                                                     (
;                                                                                                                                                                                       Sec2.HIFC.upd
;                                                                                                                                                                                         b
;                                                                                                                                                                                         from
;                                                                                                                                                                                         k
; 
;                                                                                                                                                                                     )
;                                                                                                                                                                                    \/
;                                                                                                                                                                                   FStar.Map.equal
;                                                                                                                                                                                     b
;                                                                                                                                                                                     b
; 
;                                                                                                                                                                                 ) /\
;                                                                                                                                                                                 (
;                                                                                                                                                                                   forall
;                                                                                                                                                                                     (pure_result:
;                                                                                                                                                                                     Prims.unit)
;                                                                                                                                                                                   .
;                                                                                                                                                                                     FStar.Map.equal
;                                                                                                                                                                                       b
;                                                                                                                                                                                       (
;                                                                                                                                                                                         Sec2.HIFC.upd
;                                                                                                                                                                                           b
;                                                                                                                                                                                           from
;                                                                                                                                                                                           k
; 
;                                                                                                                                                                                       )
;                                                                                                                                                                                      \/
;                                                                                                                                                                                     FStar.Map.equal
;                                                                                                                                                                                       b
;                                                                                                                                                                                       b
;                                                                                                                                                                                      ==>
;                                                                                                                                                                                     (
;                                                                                                                                                                                       forall
;                                                                                                                                                                                         (k:
;                                                                                                                                                                                         Prims.pure_post
;                                                                                                                                                                                           Prims.unit
;                                                                                                                                                                                         )
;                                                                                                                                                                                       .
;                                                                                                                                                                                         (
;                                                                                                                                                                                           forall
;                                                                                                                                                                                             (x:
;                                                                                                                                                                                             Prims.unit)
;                                                                                                                                                                                           .
;                                                                                                                                                                                             {:pattern
; 
;                                                                                                                                                                                               Prims.guard_free
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   k
;                                                                                                                                                                                                     x
; 
;                                                                                                                                                                                                 )
;                                                                                                                                                                                               }
;                                                                                                                                                                                             k
;                                                                                                                                                                                               x
;                                                                                                                                                                                              ==>
;                                                                                                                                                                                             k
;                                                                                                                                                                                               x
; 
;                                                                                                                                                                                         ) ==>
;                                                                                                                                                                                         (
;                                                                                                                                                                                           Sec2.HIFC.sel
;                                                                                                                                                                                             b
;                                                                                                                                                                                             from
;                                                                                                                                                                                            =
;                                                                                                                                                                                           Sec2.HIFC.sel
;                                                                                                                                                                                             b
;                                                                                                                                                                                             from
;                                                                                                                                                                                            ==
;                                                                                                                                                                                           true ==>
;                                                                                                                                                                                           FStar.Map.equal
;                                                                                                                                                                                             b
;                                                                                                                                                                                             b
;                                                                                                                                                                                            /\
;                                                                                                                                                                                           (
;                                                                                                                                                                                             forall
;                                                                                                                                                                                               (pure_result:
;                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                             .
;                                                                                                                                                                                               FStar.Map.equal
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                ==>
;                                                                                                                                                                                               k
;                                                                                                                                                                                                 pure_result
; 
;                                                                                                                                                                                           )
;                                                                                                                                                                                         ) /\
;                                                                                                                                                                                         (
;                                                                                                                                                                                           ~(
;                                                                                                                                                                                             Sec2.HIFC.sel
;                                                                                                                                                                                               b
;                                                                                                                                                                                               from
;                                                                                                                                                                                              =
;                                                                                                                                                                                             Sec2.HIFC.sel
;                                                                                                                                                                                               b
;                                                                                                                                                                                               from
;                                                                                                                                                                                              =
;                                                                                                                                                                                             true
;                                                                                                                                                                                           ) ==>
;                                                                                                                                                                                           (
;                                                                                                                                                                                             forall
;                                                                                                                                                                                               (b:
;                                                                                                                                                                                               Prims.bool)
;                                                                                                                                                                                             .
;                                                                                                                                                                                               Sec2.HIFC.sel
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 from
;                                                                                                                                                                                                =
;                                                                                                                                                                                               Sec2.HIFC.sel
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 from
;                                                                                                                                                                                                ==
;                                                                                                                                                                                               b ==>
;                                                                                                                                                                                               FStar.Map.equal
;                                                                                                                                                                                                 b
;                                                                                                                                                                                                 (
;                                                                                                                                                                                                   Sec2.HIFC.upd
;                                                                                                                                                                                                     b
;                                                                                                                                                                                                     from
;                                                                                                                                                                                                     k
; 
;                                                                                                                                                                                                 )
;                                                                                                                                                                                                /\
;                                                                                                                                                                                               (
;                                                                                                                                                                                                 forall
;                                                                                                                                                                                                   (pure_result:
;                                                                                                                                                                                                   Prims.unit)
;                                                                                                                                                                                                 .
;                                                                                                                                                                                                   FStar.Map.equal
;                                                                                                                                                                                                     b
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       Sec2.HIFC.upd
;                                                                                                                                                                                                         b
;                                                                                                                                                                                                         from
;                                                                                                                                                                                                         k
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                    ==>
;                                                                                                                                                                                                   Sec2.HIFC.reads
;                                                                                                                                                                                                     (
;                                                                                                                                                                                                       y
;                                                                                                                                                                                                         b
; 
;                                                                                                                                                                                                     )
;                                                                                                                                                                                                     r1
;                                                                                                                                                                                                    /\
;                                                                                                                                                                                                   (
;                                                                                                                                                                                                     forall
;                                                                                                                                                                                                       (pure_result:
;                                                                                                                                                                                                       Prims.unit)
;                                                                                                                                                                                                     .
;                                                                                                                                                                                                       Sec2.HIFC.reads
;                                                                                                                                                                                                         (
;                                                                                                                                                                                                           y
;                                                                                                                                                                                                             b
; 
;                                                                                                                                                                                                         )
;                                                                                                                                                                                                         r1
;                                                                                                                                                                                                        ==>
;                                                                                                                                                                                                       (
;                                                                                                                                                                                                         forall
;                                                                                                                                                                                                           (k:
;                                                                                                                                                                                                           Prims.pure_post
;                                                                                                                                                                                                             Prims.unit
;                                                                                                                                                                                                           )
;                                                                                                                                                                                                         .
;                                                                                                                                                                                                           (
;                                                                                                                                                                                                             forall
;                                                                                                                                                                                                               (x:
;                                                                                                                                                                                                               Prims.unit)
;                                                                                                                                                                                                             .
;                                                                                                                                                                                                               {:pattern
; 
;                                                                                                                                                                                                                 Prims.guard_free
;                                                                                                                                                                                                                   (
;                                                                                                                                                                                                                     k
;                                                                                                                                                                                                                       x
; 
;                                                                                                                                                                                                                   )
;                                                                                                                                                                                                                 }
;                                                                                                                                                                                                               k
;                                                                                                                                                                                                                 x
;                                                                                                                                                                                                                ==>
;                                                                                                                                                                                                               k
;                                                                                                                                                                                                                 x
; 
;                                                                                                                                                                                                           ) ==>
;                                                                                                                                                                                                           (
;                                                                                                                                                                                                             Sec2.HIFC.sel
;                                                                                                                                                                                                               b
;                                                                                                                                                                                                               to
;                                                                                                                                                                                                              =
;                                                                                                                                                                                                             Sec2.HIFC.sel
;                                                                                                                                                                                                               b
;                                                                                                                                                                                                               to
;                                                                                                                                                                                                              ==
;                                                                                                                                                                                                             true ==>
;                                                                                                                                                                                                             (
;                                                                                                                                                                                                               forall
;                                                                                                                                                                                                                 (any_result:
;                                                                                                                                                                                                                 Prims.unit)
;                                                                                                                                                                                                               .
;                                                                                                                                                                                                                 k
;                                                                                                                                                                                                                   any_result
; 
;                                                                                                                                                                                                             )
;                                                                                                                                                                                                           ) /\
;                                                                                                                                                                                                           (
;                                                                                                                                                                                                             ~(
;                                                                                                                                                                                                               Sec2.HIFC.sel
;                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                 to
;                                                                                                                                                                                                                =
;                                                                                                                                                                                                               Sec2.HIFC.sel
;                                                                                                                                                                                                                 b
;                                                                                                                                                                                                                 to
;                                                                                                                                                                                                                =
;                                                                                                                                                                                                               true
;                                                                                                                                                                                                             ) ==>
;                                                                                                                                                                                                             (
;                                                                                                                                                                                                               forall
;                                                                                                                                                                                                                 (b:
;                                                                                                                                                                                                                 Prims.bool)
;                                                                                                                                                                                                               .
;                                                                                                                                                                                                                 Sec2.HIFC.sel
;                                                                                                                                                                                                                   b
;                                                                                                                                                                                                                   to
;                                                                                                                                                                                                                  =
;                                                                                                                                                                                                                 Sec2.HIFC.sel
;                                                                                                                                                                                                                   b
;                                                                                                                                                                                                                   to
;                                                                                                                                                                                                                  ==
;                                                                                                                                                                                                                 b ==>
;                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                   Sec2.HIFC.sel
;                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                     to
;                                                                                                                                                                                                                    <>
;                                                                                                                                                                                                                   Sec2.HIFC.sel
;                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                     to
;                                                                                                                                                                                                                    \/
;                                                                                                                                                                                                                   Sec2.HIFC.sel
;                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                     to
;                                                                                                                                                                                                                    <>
;                                                                                                                                                                                                                   Sec2.HIFC.sel
;                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                     to
; 
;                                                                                                                                                                                                                 ) /\
;                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                   forall
;                                                                                                                                                                                                                     (pure_result:
;                                                                                                                                                                                                                     Prims.unit)
;                                                                                                                                                                                                                   .
;                                                                                                                                                                                                                     Sec2.HIFC.sel
;                                                                                                                                                                                                                       b
;                                                                                                                                                                                                                       to
;                                                                                                                                                                                                                      <>
;                                                                                                                                                                                                                     Sec2.HIFC.sel
;                                                                                                                                                                                                                       b
;                                                                                                                                                                                                                       to
;                                                                                                                                                                                                                      \/
;                                                                                                                                                                                                                     Sec2.HIFC.sel
;                                                                                                                                                                                                                       b
;                                                                                                                                                                                                                       to
;                                                                                                                                                                                                                      <>
;                                                                                                                                                                                                                     Sec2.HIFC.sel
;                                                                                                                                                                                                                       b
;                                                                                                                                                                                                                       to
;                                                                                                                                                                                                                      ==>
;                                                                                                                                                                                                                     Prims.auto_squash
;                                                                                                                                                                                                                       (
;                                                                                                                                                                                                                         r
;                                                                                                                                                                                                                           b
;                                                                                                                                                                                                                           b
; 
;                                                                                                                                                                                                                       )
;                                                                                                                                                                                                                      /\
;                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                       forall
;                                                                                                                                                                                                                         (any_result:
;                                                                                                                                                                                                                         Sec2.HIFC.store)
;                                                                                                                                                                                                                       .
;                                                                                                                                                                                                                         b ==
;                                                                                                                                                                                                                         any_result ==>
;                                                                                                                                                                                                                         Prims.auto_squash
;                                                                                                                                                                                                                           (
;                                                                                                                                                                                                                             r
;                                                                                                                                                                                                                               b
;                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                 Sec2.HIFC.upd
;                                                                                                                                                                                                                                   b
;                                                                                                                                                                                                                                   from
;                                                                                                                                                                                                                                   k
; 
;                                                                                                                                                                                                                               )
; 
;                                                                                                                                                                                                                           )
;                                                                                                                                                                                                                          /\
;                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                           forall
;                                                                                                                                                                                                                             (any_result:
;                                                                                                                                                                                                                             Prims.int)
;                                                                                                                                                                                                                           .
;                                                                                                                                                                                                                             k ==
;                                                                                                                                                                                                                             any_result ==>
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               let
;                                                                                                                                                                                                                               _,
;                                                                                                                                                                                                                               s1
;                                                                                                                                                                                                                               =
;                                                                                                                                                                                                                                 y
;                                                                                                                                                                                                                                   b
;                                                                                                                                                                                                                                   b
; 
;                                                                                                                                                                                                                               in
;                                                                                                                                                                                                                               (
;                                                                                                                                                                                                                                 let
;                                                                                                                                                                                                                                 _,
;                                                                                                                                                                                                                                 s1'
;                                                                                                                                                                                                                                 =
;                                                                                                                                                                                                                                   y
;                                                                                                                                                                                                                                     b
;                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                       Sec2.HIFC.upd
;                                                                                                                                                                                                                                         b
;                                                                                                                                                                                                                                         from
;                                                                                                                                                                                                                                         k
; 
;                                                                                                                                                                                                                                     )
; 
;                                                                                                                                                                                                                                 in
;                                                                                                                                                                                                                                 from <>
;                                                                                                                                                                                                                                 to /\
;                                                                                                                                                                                                                                 Sec2.HIFC.sel
;                                                                                                                                                                                                                                   s1
;                                                                                                                                                                                                                                   to
;                                                                                                                                                                                                                                  <>
;                                                                                                                                                                                                                                 Sec2.HIFC.sel
;                                                                                                                                                                                                                                   s1'
;                                                                                                                                                                                                                                   to
; 
;                                                                                                                                                                                                                               )
;                                                                                                                                                                                                                               <:
;                                                                                                                                                                                                                               Type0
;                                                                                                                                                                                                                             ) /\
;                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                               forall
;                                                                                                                                                                                                                                 (pure_result:
;                                                                                                                                                                                                                                 Prims.unit)
;                                                                                                                                                                                                                               .
;                                                                                                                                                                                                                                 Sec2.HIFC.has_flow
;                                                                                                                                                                                                                                   from
;                                                                                                                                                                                                                                   to
;                                                                                                                                                                                                                                   fs1
;                                                                                                                                                                                                                                  ==>
;                                                                                                                                                                                                                                 Sec2.HIFC.has_flow
;                                                                                                                                                                                                                                   from
;                                                                                                                                                                                                                                   to
;                                                                                                                                                                                                                                   fs1
;                                                                                                                                                                                                                                  /\
;                                                                                                                                                                                                                                 (
;                                                                                                                                                                                                                                   forall
;                                                                                                                                                                                                                                     (pure_result:
;                                                                                                                                                                                                                                     Prims.unit)
;                                                                                                                                                                                                                                   .
;                                                                                                                                                                                                                                     Sec2.HIFC.has_flow
;                                                                                                                                                                                                                                       from
;                                                                                                                                                                                                                                       to
;                                                                                                                                                                                                                                       fs1
;                                                                                                                                                                                                                                      ==>
;                                                                                                                                                                                                                                     (
;                                                                                                                                                                                                                                       forall
;                                                                                                                                                                                                                                         (pure_result:
;                                                                                                                                                                                                                                         Prims.unit)
;                                                                                                                                                                                                                                       .
;                                                                                                                                                                                                                                         (
;                                                                                                                                                                                                                                           Sec2.HIFC.has_flow
;                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                             to
;                                                                                                                                                                                                                                             fs1
;                                                                                                                                                                                                                                            ==>
;                                                                                                                                                                                                                                           Sec2.HIFC.has_flow
;                                                                                                                                                                                                                                             from
;                                                                                                                                                                                                                                             to
;                                                                                                                                                                                                                                             (
;                                                                                                                                                                                                                                               Sec2.HIFC.add_source
;                                                                                                                                                                                                                                                 r0
;                                                                                                                                                                                                                                                 fs1
; 
;                                                                                                                                                                                                                                             )
; 
;                                                                                                                                                                                                                                         ) ==>
;                                                                                                                                                                                                                                         k
;                                                                                                                                                                                                                                           pure_result
; 
;                                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                                 )
;                                                                                                                                                                                                                             )
;                                                                                                                                                                                                                         )
;                                                                                                                                                                                                                     )
;                                                                                                                                                                                                                 )
;                                                                                                                                                                                                             )
;                                                                                                                                                                                                           )
;                                                                                                                                                                                                       )
;                                                                                                                                                                                                   )
;                                                                                                                                                                                               )
;                                                                                                                                                                                           )
;                                                                                                                                                                                         )
;                                                                                                                                                                                     )
;                                                                                                                                                                                 )
;                                                                                                                                                                             )
;                                                                                                                                                                         )
;                                                                                                                                                                     )
;                                                                                                                                                                 )
;                                                                                                                                                             )
;                                                                                                                                                         )
;                                                                                                                                                     )
;                                                                                                                                                 )
;                                                                                                                                             )
;                                                                                                                                         )
;                                                                                                                                     )
;                                                                                                                                 )
;                                                                                                                             )
;                                                                                                                           ) /\
;                                                                                                                           (
;                                                                                                                             ~(
;                                                                                                                               FStar.Set.mem
;                                                                                                                                 to
;                                                                                                                                 w1
;                                                                                                                                =
;                                                                                                                               true
;                                                                                                                             ) ==>
;                                                                                                                             (
;                                                                                                                               forall
;                                                                                                                                 (b:
;                                                                                                                                 Prims.bool)
;                                                                                                                               .
;                                                                                                                                 FStar.Set.mem
;                                                                                                                                   to
;                                                                                                                                   w1
;                                                                                                                                  ==
;                                                                                                                                 b ==>
;                                                                                                                                 (
;                                                                                                                                   forall
;                                                                                                                                     (any_result:
;                                                                                                                                     Prims.unit)
;                                                                                                                                   .
;                                                                                                                                     k
;                                                                                                                                       any_result
; 
;                                                                                                                                 )
;                                                                                                                             )
;                                                                                                                           )
;                                                                                                                       )
;                                                                                                                   )
;                                                                                                               )
;                                                                                                           )
;                                                                                                       )
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   )))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let bind_hst_no_leakage`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.flows)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.pre)
(HasType @x9
(Sec2.HIFC.post @x0))
(HasType @x10
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0))
(HasType @x11
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x0))
(HasType @x12
(Sec2.HIFC.hifc @x0
@x3
@x2
@x6
@x8
@x9))
(HasType @x13
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x11
@x10
@x7
@x4
@x5
@x1
@x0))
(HasType @x14
(Sec2.HIFC.loc Dummy_value))
(HasType @x15
(Sec2.HIFC.loc Dummy_value))
(HasType @x16
Sec2.HIFC.store)
(HasType @x17
Prims.int))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x18 Term))
 (! (implies (HasType @x18
(Tm_refine_018725da1abdf39e6cd081f25fd130fc @x8
@x16
@x0
@x9
@x10
@x14
@x17
@x15
@x6
@x3
@x4
@x7))

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(329,30-329,32)
(or label_1

;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x8
@x16)
)
)


;; def=Sec2.HIFC.fst(197,29-197,64); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x19
@x0)
(HasType @x20
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x9
@x16)
@x19)
@x20)
)
)

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(329,30-329,32)
(or label_2

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT @x10
@x19)
@x20)
)
)
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-318,28); use=Sec2.HIFC.fst(332,5-386,10)
(= @x16
@x19)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x9
@x16
@x11
@x1))

;; def=Sec2.HIFC.fst(13,49-329,32); use=Sec2.HIFC.fst(332,5-386,10)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16)
@x20)
)

;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x9
@x16
@x11
@x1))

;; def=Prims.fst(356,26-356,41); use=Sec2.HIFC.fst(332,5-386,10)
(= @x21
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16))


;; def=Sec2.HIFC.fst(329,20-329,32); use=Sec2.HIFC.fst(332,5-386,10)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16)
@x21)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x22 Term))
 (! (implies (HasType @x22
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(329,20-329,25); use=Sec2.HIFC.fst(332,5-386,10)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16)
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x22
@x23))
)

;; def=Sec2.HIFC.fst(197,21-197,64); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(330,31-330,34)
(or label_3

;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x8
(Sec2.HIFC.upd @x16
@x14
@x17))
)
)


;; def=Sec2.HIFC.fst(197,29-197,64); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x24 Term) (@x25 Term))
 (! (implies (and (HasType @x24
@x0)
(HasType @x25
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x9
(Sec2.HIFC.upd @x16
@x14
@x17))
@x24)
@x25)
)
)

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(330,31-330,34)
(or label_4

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT @x10
@x24)
@x25)
)
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x8
@x16)
)


;; def=Sec2.HIFC.fst(321,37-321,72); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x19
@x0)
(HasType @x20
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x9
@x16)
@x19)
@x20)
)
)

;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT @x10
@x19)
@x20)
)
)
 
;;no pats
:qid @query.10))


;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x8
(Sec2.HIFC.upd @x16
@x14
@x17))
)


;; def=Sec2.HIFC.fst(321,37-321,72); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x19
@x0)
(HasType @x20
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT (ApplyTT @x9
(Sec2.HIFC.upd @x16
@x14
@x17))
@x19)
@x20)
)
)

;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT (ApplyTT @x10
@x19)
@x20)
)
)
 
;;no pats
:qid @query.11))


;; def=Sec2.HIFC.fst(325,8-325,18); use=Sec2.HIFC.fst(332,5-386,10)
(not (= @x14
@x15))


;; def=Sec2.HIFC.fst(326,8-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(not 
;; def=Sec2.HIFC.fst(326,9-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Sec2.HIFC.fst(326,9-326,66); use=Sec2.HIFC.fst(332,5-386,10)
(Sec2.HIFC.has_flow @x14
@x15
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7))))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x19 Term))
 (! (implies (and (or label_5
(HasType @x19
Prims.unit))
(let ((@lb20 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16)))
(let ((@lb21 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.upd @x16
@x14
@x17))))

;; def=Sec2.HIFC.fst(331,16-331,39); use=Sec2.HIFC.fst(332,5-386,10)
(or label_6

;; def=Sec2.HIFC.fst(331,16-331,39); use=Sec2.HIFC.fst(332,5-386,10)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb20)
@x15)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb21)
@x15))
)
)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x18
@x19)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x18
@x19)
)
)
:qid @query.12))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(333,6-333,12)
(and 
;; def=Sec2.HIFC.fst(333,13-333,25); use=Sec2.HIFC.fst(333,6-333,12)
(or label_7

;; def=Sec2.HIFC.fst(333,13-333,25); use=Sec2.HIFC.fst(333,6-333,12)
(Valid 
;; def=Sec2.HIFC.fst(333,13-333,25); use=Sec2.HIFC.fst(333,6-333,12)
(Sec2.HIFC.reads @x0
@x8
@x9
@x12
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(333,6-333,12)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
Prims.unit)

;; def=Sec2.HIFC.fst(333,13-333,25); use=Sec2.HIFC.fst(333,6-333,12)
(Valid 
;; def=Sec2.HIFC.fst(333,13-333,25); use=Sec2.HIFC.fst(333,6-333,12)
(Sec2.HIFC.reads @x0
@x8
@x9
@x12
@x3)
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(335,21-335,23)
(or label_8

;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(335,21-335,23)
(Valid 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(335,21-335,23)
(ApplyTT @x8
@x16)
)
)


;; def=Sec2.HIFC.fst(197,29-197,64); use=Sec2.HIFC.fst(335,21-335,23)
(forall ((@x20 Term) (@x21 Term))
 (! (implies (and (HasType @x20
@x0)
(HasType @x21
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(335,21-335,23)
(Valid 
;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(335,21-335,23)
(ApplyTT (ApplyTT (ApplyTT @x9
@x16)
@x20)
@x21)
)
)

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(335,21-335,23)
(or label_9

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(335,21-335,23)
(Valid 
;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(335,21-335,23)
(ApplyTT (ApplyTT @x10
@x20)
@x21)
)
)
)
 
;;no pats
:qid @query.14))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-318,28); use=Sec2.HIFC.fst(332,5-386,10)
(= @x16
@x20)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x9
@x16
@x11
@x1))

;; def=Sec2.HIFC.fst(13,49-335,23); use=Sec2.HIFC.fst(332,5-386,10)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16)
@x21)
)

;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x9
@x16
@x11
@x1))

;; def=Prims.fst(356,26-356,41); use=Sec2.HIFC.fst(332,5-386,10)
(= @x22
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16))


;; def=Sec2.HIFC.fst(335,10-335,23); use=Sec2.HIFC.fst(335,10-335,23)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16)
@x22)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x23 Term))
 (! (implies (HasType @x23
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x24 Term))
 (! (implies (and (HasType @x24
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(335,10-335,16); use=Sec2.HIFC.fst(335,10-335,16)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x16)
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x23
@x24))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(336,22-336,25)
(or label_10

;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(336,22-336,25)
(Valid 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(336,22-336,25)
(ApplyTT @x8
(Sec2.HIFC.upd @x16
@x14
@x17))
)
)


;; def=Sec2.HIFC.fst(197,29-197,64); use=Sec2.HIFC.fst(336,22-336,25)
(forall ((@x25 Term) (@x26 Term))
 (! (implies (and (HasType @x25
@x0)
(HasType @x26
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(336,22-336,25)
(Valid 
;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(336,22-336,25)
(ApplyTT (ApplyTT (ApplyTT @x9
(Sec2.HIFC.upd @x16
@x14
@x17))
@x25)
@x26)
)
)

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(336,22-336,25)
(or label_11

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(336,22-336,25)
(Valid 
;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(336,22-336,25)
(ApplyTT (ApplyTT @x10
@x25)
@x26)
)
)
)
 
;;no pats
:qid @query.20))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-334,13); use=Sec2.HIFC.fst(332,5-386,10)
(= (Sec2.HIFC.upd @x16
@x14
@x17)
@x25)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x26 Term))
 (! (implies (and (HasType @x26
(Tm_refine_51379530f91978a53f2aee3997f3d0cf @x0
@x9
@x16
@x14
@x17
@x11
@x1))

;; def=Sec2.HIFC.fst(13,49-336,25); use=Sec2.HIFC.fst(332,5-386,10)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.upd @x16
@x14
@x17))
@x26)
)

;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(Tm_refine_51379530f91978a53f2aee3997f3d0cf @x0
@x9
@x16
@x14
@x17
@x11
@x1))

;; def=Prims.fst(356,26-356,41); use=Sec2.HIFC.fst(332,5-386,10)
(= @x27
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.upd @x16
@x14
@x17)))


;; def=Sec2.HIFC.fst(336,10-336,25); use=Sec2.HIFC.fst(336,10-336,25)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.upd @x16
@x14
@x17))
@x27)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x28 Term))
 (! (implies (HasType @x28
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(336,10-336,17); use=Sec2.HIFC.fst(336,10-336,17)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.upd @x16
@x14
@x17))
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x28
@x29))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(338,21-338,23)
(or label_12

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(338,21-338,23)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(338,21-338,23)
(ApplyTT @x8
@x16)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-318,28); use=Sec2.HIFC.fst(332,5-386,10)
(= @x16
@x30)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
(Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x9
@x16
@x0))

;; def=Sec2.HIFC.fst(338,10-338,23); use=Sec2.HIFC.fst(338,10-338,23)
(= (ApplyTT @x12
@x16)
@x31)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x32 Term))
 (! (implies (HasType @x32
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x33 Term))
 (! (implies (and (HasType @x33
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(338,10-338,16); use=Sec2.HIFC.fst(338,10-338,16)
(= (ApplyTT @x12
@x16)
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x32
@x33))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(339,23-339,26)
(or label_13

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(339,23-339,26)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(339,23-339,26)
(ApplyTT @x8
(Sec2.HIFC.upd @x16
@x14
@x17))
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x34 Term))
 (! (implies (and (HasType @x34
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-334,13); use=Sec2.HIFC.fst(332,5-386,10)
(= (Sec2.HIFC.upd @x16
@x14
@x17)
@x34)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x35 Term))
 (! (implies (and (HasType @x35
(Tm_refine_a271d9e51cec2e7af75e321a09a013bd @x9
@x16
@x14
@x17
@x0))

;; def=Sec2.HIFC.fst(339,10-339,26); use=Sec2.HIFC.fst(339,10-339,26)
(= (ApplyTT @x12
(Sec2.HIFC.upd @x16
@x14
@x17))
@x35)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x36 Term))
 (! (implies (HasType @x36
@x0)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x37 Term))
 (! (implies (and (HasType @x37
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(339,10-339,18); use=Sec2.HIFC.fst(339,10-339,18)
(= (ApplyTT @x12
(Sec2.HIFC.upd @x16
@x14
@x17))
(FStar.Pervasives.Native.Mktuple2 @x0
Sec2.HIFC.store
@x36
@x37))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(340,6-340,23)
(and 
;; def=Sec2.HIFC.fst(271,20-271,80); use=Sec2.HIFC.fst(340,6-340,23)
(or label_14

;; def=Sec2.HIFC.fst(271,20-271,80); use=Sec2.HIFC.fst(340,6-340,23)
(not 
;; def=Sec2.HIFC.fst(271,22-271,79); use=Sec2.HIFC.fst(340,6-340,23)
(Valid 
;; def=Sec2.HIFC.fst(271,22-271,79); use=Sec2.HIFC.fst(340,6-340,23)
(Sec2.HIFC.has_flow @x14
@x15
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7))))
)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(340,6-340,23)
(forall ((@x38 Term))
 (! (implies (and (HasType @x38
Prims.unit)

;; def=Sec2.HIFC.fst(272,21-272,44); use=Sec2.HIFC.fst(340,6-340,23)
(not 
;; def=Sec2.HIFC.fst(272,22-272,44); use=Sec2.HIFC.fst(340,6-340,23)
(Valid 
;; def=Sec2.HIFC.fst(272,22-272,44); use=Sec2.HIFC.fst(340,6-340,23)
(Sec2.HIFC.has_flow @x14
@x15
@x6)
)
)


;; def=Sec2.HIFC.fst(273,22-273,62); use=Sec2.HIFC.fst(340,6-340,23)
(or 
;; def=Sec2.HIFC.fst(273,23-273,41); use=Sec2.HIFC.fst(340,6-340,23)
(not 
;; def=Sec2.HIFC.fst(273,24-273,41); use=Sec2.HIFC.fst(340,6-340,23)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x14
@x3))
)


;; def=Sec2.HIFC.fst(273,45-273,61); use=Sec2.HIFC.fst(340,6-340,23)
(not 
;; def=Sec2.HIFC.fst(273,46-273,61); use=Sec2.HIFC.fst(340,6-340,23)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x15
@x4))
)
)


;; def=Sec2.HIFC.fst(274,21-274,60); use=Sec2.HIFC.fst(340,6-340,23)
(not 
;; def=Sec2.HIFC.fst(274,22-274,60); use=Sec2.HIFC.fst(340,6-340,23)
(Valid 
;; def=Sec2.HIFC.fst(274,22-274,60); use=Sec2.HIFC.fst(340,6-340,23)
(Sec2.HIFC.has_flow @x14
@x15
(Sec2.HIFC.add_source @x3
@x7))
)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(341,6-341,12)
(and 
;; def=Sec2.HIFC.fst(341,13-341,38); use=Sec2.HIFC.fst(341,6-341,12)
(or label_15

;; def=Sec2.HIFC.fst(341,13-341,38); use=Sec2.HIFC.fst(341,6-341,12)
(not 
;; def=Sec2.HIFC.fst(341,15-341,37); use=Sec2.HIFC.fst(341,6-341,12)
(Valid 
;; def=Sec2.HIFC.fst(341,15-341,37); use=Sec2.HIFC.fst(341,6-341,12)
(Sec2.HIFC.has_flow @x14
@x15
@x6)
)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(341,6-341,12)
(forall ((@x39 Term))
 (! (implies (and (HasType @x39
Prims.unit)

;; def=Sec2.HIFC.fst(341,13-341,38); use=Sec2.HIFC.fst(341,6-341,12)
(not 
;; def=Sec2.HIFC.fst(341,15-341,37); use=Sec2.HIFC.fst(341,6-341,12)
(Valid 
;; def=Sec2.HIFC.fst(341,15-341,37); use=Sec2.HIFC.fst(341,6-341,12)
(Sec2.HIFC.has_flow @x14
@x15
@x6)
)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(342,6-342,12)
(and 
;; def=Sec2.HIFC.fst(342,13-342,29); use=Sec2.HIFC.fst(342,6-342,12)
(or label_16

;; def=Sec2.HIFC.fst(342,13-342,29); use=Sec2.HIFC.fst(342,6-342,12)
(Valid 
;; def=Sec2.HIFC.fst(342,13-342,29); use=Sec2.HIFC.fst(342,6-342,12)
(Sec2.HIFC.respects @x0
@x8
@x9
@x12
@x6)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(342,6-342,12)
(forall ((@x40 Term))
 (! (implies (and (HasType @x40
Prims.unit)

;; def=Sec2.HIFC.fst(342,13-342,29); use=Sec2.HIFC.fst(342,6-342,12)
(Valid 
;; def=Sec2.HIFC.fst(342,13-342,29); use=Sec2.HIFC.fst(342,6-342,12)
(Sec2.HIFC.respects @x0
@x8
@x9
@x12
@x6)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(343,6-343,12)
(and 
;; def=Sec2.HIFC.fst(343,13-343,35); use=Sec2.HIFC.fst(343,6-343,12)
(or label_17

;; def=Sec2.HIFC.fst(343,13-343,35); use=Sec2.HIFC.fst(343,6-343,12)
(Valid 
;; def=Sec2.HIFC.fst(343,13-343,35); use=Sec2.HIFC.fst(343,6-343,12)
(Sec2.HIFC.no_leakage @x0
@x8
@x9
@x12
@x14
@x15)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(343,6-343,12)
(forall ((@x41 Term))
 (! (implies (and (HasType @x41
Prims.unit)

;; def=Sec2.HIFC.fst(343,13-343,35); use=Sec2.HIFC.fst(343,6-343,12)
(Valid 
;; def=Sec2.HIFC.fst(343,13-343,35); use=Sec2.HIFC.fst(343,6-343,12)
(Sec2.HIFC.no_leakage @x0
@x8
@x9
@x12
@x14
@x15)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(344,6-344,12)
(and 
;; def=Sec2.HIFC.fst(344,13-344,38); use=Sec2.HIFC.fst(344,6-344,12)
(or label_18

;; def=Sec2.HIFC.fst(344,13-344,38); use=Sec2.HIFC.fst(344,6-344,12)
(= (Sec2.HIFC.sel @x33
@x15)
(Sec2.HIFC.sel @x37
@x15))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(344,6-344,12)
(forall ((@x42 Term))
 (! (implies (and (HasType @x42
Prims.unit)

;; def=Sec2.HIFC.fst(344,13-344,38); use=Sec2.HIFC.fst(344,6-344,12)
(= (Sec2.HIFC.sel @x33
@x15)
(Sec2.HIFC.sel @x37
@x15))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(345,23-345,25)
(or label_19

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(345,23-345,25)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(345,23-345,25)
(ApplyTT (ApplyTT @x10
@x32)
@x33)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x43 Term))
 (! (implies (and (HasType @x43
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-338,16); use=Sec2.HIFC.fst(332,5-386,10)
(= @x33
@x43)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x44 Term))
 (! (implies (and (HasType @x44
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x11
@x32
@x33
@x1))

;; def=Sec2.HIFC.fst(345,10-345,25); use=Sec2.HIFC.fst(345,10-345,25)
(= (ApplyTT (ApplyTT @x13
@x32)
@x33)
@x44)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x45 Term))
 (! (implies (HasType @x45
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x46 Term))
 (! (implies (and (HasType @x46
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(345,10-345,15); use=Sec2.HIFC.fst(345,10-345,15)
(= (ApplyTT (ApplyTT @x13
@x32)
@x33)
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x45
@x46))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(346,25-346,28)
(or label_20

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(346,25-346,28)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(346,25-346,28)
(ApplyTT (ApplyTT @x10
@x36)
@x37)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x47 Term))
 (! (implies (and (HasType @x47
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(13,31-339,18); use=Sec2.HIFC.fst(332,5-386,10)
(= @x37
@x47)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x48 Term))
 (! (implies (and (HasType @x48
(Tm_refine_bed529b209feebbe87dc860b48164a54 @x11
@x36
@x37
@x1))

;; def=Sec2.HIFC.fst(346,10-346,28); use=Sec2.HIFC.fst(346,10-346,28)
(= (ApplyTT (ApplyTT @x13
@x36)
@x37)
@x48)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x49 Term))
 (! (implies (HasType @x49
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x50 Term))
 (! (implies (and (HasType @x50
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(346,10-346,16); use=Sec2.HIFC.fst(346,10-346,16)
(= (ApplyTT (ApplyTT @x13
@x36)
@x37)
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x49
@x50))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(347,6-347,12)
(and 
;; def=Sec2.HIFC.fst(347,13-347,24); use=Sec2.HIFC.fst(347,6-347,12)
(or label_21

;; def=Sec2.HIFC.fst(347,13-347,24); use=Sec2.HIFC.fst(347,6-347,12)
(= @x46
@x24)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(347,6-347,12)
(forall ((@x51 Term))
 (! (implies (and (HasType @x51
Prims.unit)

;; def=Sec2.HIFC.fst(347,13-347,24); use=Sec2.HIFC.fst(347,6-347,12)
(= @x46
@x24)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(348,6-348,12)
(and 
;; def=Sec2.HIFC.fst(348,13-348,26); use=Sec2.HIFC.fst(348,6-348,12)
(or label_22

;; def=Sec2.HIFC.fst(348,13-348,26); use=Sec2.HIFC.fst(348,6-348,12)
(= @x50
@x29)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(348,6-348,12)
(forall ((@x52 Term))
 (! (implies (and (HasType @x52
Prims.unit)

;; def=Sec2.HIFC.fst(348,13-348,26); use=Sec2.HIFC.fst(348,6-348,12)
(= @x50
@x29)
)

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x53 Term))
 (! (implies (and (HasType @x53
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x54 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x18
@x54)
)


;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x53
@x54)
)
)
 :weight 0


:pattern ((ApplyTT @x53
@x54))
:qid @query.50))
)

;; def=Prims.fst(389,2-389,39); use=Sec2.HIFC.fst(332,5-386,10)
(and (implies 
;; def=Sec2.HIFC.fst(356,9-356,22); use=Sec2.HIFC.fst(356,9-356,22)
(= (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x15
@x4)
(BoxBool true))


;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(358,8-358,14)
(and 
;; def=Sec2.HIFC.fst(358,15-358,35); use=Sec2.HIFC.fst(358,8-358,14)
(or label_23

;; def=Sec2.HIFC.fst(358,15-358,35); use=Sec2.HIFC.fst(358,8-358,14)
(not 
;; def=Sec2.HIFC.fst(358,17-358,34); use=Sec2.HIFC.fst(358,8-358,14)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x14
@x3))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(358,8-358,14)
(forall ((@x54 Term))
 (! (implies (and (HasType @x54
Prims.unit)

;; def=Sec2.HIFC.fst(358,15-358,35); use=Sec2.HIFC.fst(358,8-358,14)
(not 
;; def=Sec2.HIFC.fst(358,17-358,34); use=Sec2.HIFC.fst(358,8-358,14)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x14
@x3))
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(359,8-359,14)
(and 
;; def=Sec2.HIFC.fst(359,15-359,27); use=Sec2.HIFC.fst(359,8-359,14)
(or label_24

;; def=Sec2.HIFC.fst(359,15-359,27); use=Sec2.HIFC.fst(359,8-359,14)
(Valid 
;; def=Sec2.HIFC.fst(359,15-359,27); use=Sec2.HIFC.fst(359,8-359,14)
(Sec2.HIFC.reads @x0
@x8
@x9
@x12
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(359,8-359,14)
(forall ((@x55 Term))
 (! (implies (and (HasType @x55
Prims.unit)

;; def=Sec2.HIFC.fst(359,15-359,27); use=Sec2.HIFC.fst(359,8-359,14)
(Valid 
;; def=Sec2.HIFC.fst(359,15-359,27); use=Sec2.HIFC.fst(359,8-359,14)
(Sec2.HIFC.reads @x0
@x8
@x9
@x12
@x3)
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(149,73-149,89); use=Sec2.HIFC.fst(360,40-360,44)
(or label_25

;; def=Sec2.HIFC.fst(149,73-149,89); use=Sec2.HIFC.fst(360,40-360,44)
(not 
;; def=Sec2.HIFC.fst(149,74-149,89); use=Sec2.HIFC.fst(360,40-360,44)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x14
@x3))
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x56 Term))
 (! (implies (and (HasType @x56
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(149,67-317,30); use=Sec2.HIFC.fst(332,5-386,10)
(= @x14
@x56)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(149,102-149,106); use=Sec2.HIFC.fst(360,45-360,47)
(or label_26

;; def=Sec2.HIFC.fst(149,102-149,106); use=Sec2.HIFC.fst(360,45-360,47)
(Valid 
;; def=Sec2.HIFC.fst(149,102-149,106); use=Sec2.HIFC.fst(360,45-360,47)
(ApplyTT @x8
@x16)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x57 Term))
 (! (implies (and (HasType @x57
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(149,93-318,28); use=Sec2.HIFC.fst(332,5-386,10)
(= @x16
@x57)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(360,8-360,34)
(and 
;; def=Sec2.HIFC.fst(151,14-151,25); use=Sec2.HIFC.fst(360,8-360,34)
(or label_27

;; def=Sec2.HIFC.fst(151,14-151,25); use=Sec2.HIFC.fst(360,8-360,34)
(Valid 
;; def=Sec2.HIFC.fst(151,14-151,25); use=Sec2.HIFC.fst(360,8-360,34)
(Sec2.HIFC.reads @x0
@x8
@x9
@x12
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(360,8-360,34)
(forall ((@x58 Term))
 (! (implies (and (HasType @x58
Prims.unit)

;; def=Sec2.HIFC.fst(152,13-152,41); use=Sec2.HIFC.fst(360,8-360,34)
(Valid 
;; def=Sec2.HIFC.fst(152,13-152,41); use=Sec2.HIFC.fst(360,8-360,34)
(Sec2.HIFC.does_not_read_loc @x0
@x8
@x9
@x12
@x3
@x14
@x16)
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(127,77-127,81); use=Sec2.HIFC.fst(361,44-361,46)
(or label_28

;; def=Sec2.HIFC.fst(127,77-127,81); use=Sec2.HIFC.fst(361,44-361,46)
(Valid 
;; def=Sec2.HIFC.fst(127,77-127,81); use=Sec2.HIFC.fst(361,44-361,46)
(ApplyTT @x8
@x16)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x59 Term))
 (! (implies (and (HasType @x59
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(127,68-318,28); use=Sec2.HIFC.fst(332,5-386,10)
(= @x16
@x59)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x60 Term))
 (! (implies (and (HasType @x60
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Sec2.HIFC.fst(332,5-386,10)
(= (Sec2.HIFC.does_not_read_loc @x0
@x8
@x9
@x12
@x3
@x14
@x16)
@x60)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(361,8-361,14)
(and 
;; def=Sec2.HIFC.fst(361,15-361,47); use=Sec2.HIFC.fst(361,8-361,14)
(or label_29

;; def=Sec2.HIFC.fst(361,15-361,47); use=Sec2.HIFC.fst(361,8-361,14)
(Valid 
;; def=Sec2.HIFC.fst(361,15-361,47); use=Sec2.HIFC.fst(361,8-361,14)
(Sec2.HIFC.does_not_read_loc @x0
@x8
@x9
@x12
@x3
@x14
@x16)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(361,8-361,14)
(forall ((@x61 Term))
 (! (implies (and (HasType @x61
Prims.unit)

;; def=Sec2.HIFC.fst(361,15-361,47); use=Sec2.HIFC.fst(361,8-361,14)
(Valid 
;; def=Sec2.HIFC.fst(361,15-361,47); use=Sec2.HIFC.fst(361,8-361,14)
(Sec2.HIFC.does_not_read_loc @x0
@x8
@x9
@x12
@x3
@x14
@x16)
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(113,34-113,38); use=Sec2.HIFC.fst(362,46-362,48)
(or label_30

;; def=Sec2.HIFC.fst(113,34-113,38); use=Sec2.HIFC.fst(362,46-362,48)
(Valid 
;; def=Sec2.HIFC.fst(113,34-113,38); use=Sec2.HIFC.fst(362,46-362,48)
(ApplyTT @x8
@x16)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x62 Term))
 (! (implies (and (HasType @x62
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(113,25-318,28); use=Sec2.HIFC.fst(332,5-386,10)
(= @x16
@x62)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x63 Term))
 (! (implies (and (HasType @x63
Prims.logical)

;; def=Prims.fst(672,13-672,14); use=Sec2.HIFC.fst(332,5-386,10)
(= (Sec2.HIFC.does_not_read_loc_v @x0
@x8
@x9
@x12
@x3
@x14
@x16
@x17)
@x63)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(362,8-362,14)
(and 
;; def=Sec2.HIFC.fst(362,15-362,51); use=Sec2.HIFC.fst(362,8-362,14)
(or label_31

;; def=Sec2.HIFC.fst(362,15-362,51); use=Sec2.HIFC.fst(362,8-362,14)
(Valid 
;; def=Sec2.HIFC.fst(362,15-362,51); use=Sec2.HIFC.fst(362,8-362,14)
(Sec2.HIFC.does_not_read_loc_v @x0
@x8
@x9
@x12
@x3
@x14
@x16
@x17)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(362,8-362,14)
(forall ((@x64 Term))
 (! (implies (and (HasType @x64
Prims.unit)

;; def=Sec2.HIFC.fst(362,15-362,51); use=Sec2.HIFC.fst(362,8-362,14)
(Valid 
;; def=Sec2.HIFC.fst(362,15-362,51); use=Sec2.HIFC.fst(362,8-362,14)
(Sec2.HIFC.does_not_read_loc_v @x0
@x8
@x9
@x12
@x3
@x14
@x16
@x17)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(363,8-363,14)
(and 
;; def=Sec2.HIFC.fst(363,15-363,26); use=Sec2.HIFC.fst(363,8-363,14)
(or label_32

;; def=Sec2.HIFC.fst(363,15-363,26); use=Sec2.HIFC.fst(363,8-363,14)
(= @x32
@x36)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(363,8-363,14)
(forall ((@x65 Term))
 (! (implies (and (HasType @x65
Prims.unit)

;; def=Sec2.HIFC.fst(363,15-363,26); use=Sec2.HIFC.fst(363,8-363,14)
(= @x32
@x36)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(364,8-364,14)
(and 
;; def=Sec2.HIFC.fst(364,15-364,62); use=Sec2.HIFC.fst(364,8-364,14)
(forall ((@x66 Term))
 (! (implies (and (HasType @x66
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(364,26-364,35); use=Sec2.HIFC.fst(364,8-364,14)
(not (= @x66
@x14))
)

;; def=Sec2.HIFC.fst(364,40-364,61); use=Sec2.HIFC.fst(364,8-364,14)
(or label_33

;; def=Sec2.HIFC.fst(364,40-364,61); use=Sec2.HIFC.fst(364,8-364,14)
(= (Sec2.HIFC.sel @x33
@x66)
(Sec2.HIFC.sel @x37
@x66))
)
)
 
;;no pats
:qid @query.63))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(364,8-364,14)
(forall ((@x66 Term))
 (! (implies (and (HasType @x66
Prims.unit)

;; def=Sec2.HIFC.fst(364,15-364,62); use=Sec2.HIFC.fst(364,8-364,14)
(forall ((@x67 Term))
 (! (implies (and (HasType @x67
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(364,26-364,35); use=Sec2.HIFC.fst(364,8-364,14)
(not (= @x67
@x14))
)

;; def=Sec2.HIFC.fst(364,40-364,61); use=Sec2.HIFC.fst(364,8-364,14)
(= (Sec2.HIFC.sel @x33
@x67)
(Sec2.HIFC.sel @x37
@x67))
)
 
;;no pats
:qid @query.65))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(365,8-365,14)
(and 
;; def=Sec2.HIFC.fst(365,15-365,66); use=Sec2.HIFC.fst(365,8-365,14)
(or label_34

;; def=Sec2.HIFC.fst(365,16-365,45); use=Sec2.HIFC.fst(365,8-365,14)
(Valid 
;; def=Sec2.HIFC.fst(365,16-365,45); use=Sec2.HIFC.fst(365,8-365,14)
(FStar.Map.equal (Sec2.HIFC.loc Dummy_value)
Prims.int
@x37
(Sec2.HIFC.upd @x33
@x14
@x17))
)


;; def=Sec2.HIFC.fst(365,49-365,65); use=Sec2.HIFC.fst(365,8-365,14)
(Valid 
;; def=Sec2.HIFC.fst(365,49-365,65); use=Sec2.HIFC.fst(365,8-365,14)
(FStar.Map.equal (Sec2.HIFC.loc Dummy_value)
Prims.int
@x37
@x33)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(365,8-365,14)
(forall ((@x67 Term))
 (! (implies (and (HasType @x67
Prims.unit)

;; def=Sec2.HIFC.fst(365,15-365,66); use=Sec2.HIFC.fst(365,8-365,14)
(or 
;; def=Sec2.HIFC.fst(365,16-365,45); use=Sec2.HIFC.fst(365,8-365,14)
(Valid 
;; def=Sec2.HIFC.fst(365,16-365,45); use=Sec2.HIFC.fst(365,8-365,14)
(FStar.Map.equal (Sec2.HIFC.loc Dummy_value)
Prims.int
@x37
(Sec2.HIFC.upd @x33
@x14
@x17))
)


;; def=Sec2.HIFC.fst(365,49-365,65); use=Sec2.HIFC.fst(365,8-365,14)
(Valid 
;; def=Sec2.HIFC.fst(365,49-365,65); use=Sec2.HIFC.fst(365,8-365,14)
(FStar.Map.equal (Sec2.HIFC.loc Dummy_value)
Prims.int
@x37
@x33)
)
)
)

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x68 Term))
 (! (implies (and (HasType @x68
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x69 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x53
@x69)
)


;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x68
@x69)
)
)
 :weight 0


:pattern ((ApplyTT @x68
@x69))
:qid @query.68))
)

;; def=Prims.fst(389,2-389,39); use=Sec2.HIFC.fst(332,5-386,10)
(and (implies 
;; def=Sec2.HIFC.fst(366,11-366,39); use=Sec2.HIFC.fst(366,11-366,39)
(= (Prims.op_Equality Prims.int
(Sec2.HIFC.sel @x33
@x14)
(Sec2.HIFC.sel @x37
@x14))
(BoxBool true))


;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(368,10-368,16)
(and 
;; def=Sec2.HIFC.fst(368,17-368,35); use=Sec2.HIFC.fst(368,10-368,16)
(or label_35

;; def=Sec2.HIFC.fst(368,17-368,35); use=Sec2.HIFC.fst(368,10-368,16)
(Valid 
;; def=Sec2.HIFC.fst(368,17-368,35); use=Sec2.HIFC.fst(368,10-368,16)
(FStar.Map.equal (Sec2.HIFC.loc Dummy_value)
Prims.int
@x33
@x37)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(368,10-368,16)
(forall ((@x69 Term))
 (! (implies (and (HasType @x69
Prims.unit)

;; def=Sec2.HIFC.fst(368,17-368,35); use=Sec2.HIFC.fst(368,10-368,16)
(Valid 
;; def=Sec2.HIFC.fst(368,17-368,35); use=Sec2.HIFC.fst(368,10-368,16)
(FStar.Map.equal (Sec2.HIFC.loc Dummy_value)
Prims.int
@x33
@x37)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(368,10-368,16)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(368,10-368,16)
(ApplyTT @x68
@x69)
)
)
 
;;no pats
:qid @query.69))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Sec2.HIFC.fst(332,5-386,10)
(not 
;; def=Sec2.HIFC.fst(366,11-366,39); use=Sec2.HIFC.fst(366,11-366,39)
(= (Prims.op_Equality Prims.int
(Sec2.HIFC.sel @x33
@x14)
(Sec2.HIFC.sel @x37
@x14))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x69 Term))
 (! (implies (and (HasType @x69
Prims.bool)

;; def=Sec2.HIFC.fst(366,11-382,13); use=Sec2.HIFC.fst(366,11-382,13)
(= (Prims.op_Equality Prims.int
(Sec2.HIFC.sel @x33
@x14)
(Sec2.HIFC.sel @x37
@x14))
@x69)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(371,10-371,16)
(and 
;; def=Sec2.HIFC.fst(371,17-371,48); use=Sec2.HIFC.fst(371,10-371,16)
(or label_36

;; def=Sec2.HIFC.fst(371,17-371,48); use=Sec2.HIFC.fst(371,10-371,16)
(Valid 
;; def=Sec2.HIFC.fst(371,17-371,48); use=Sec2.HIFC.fst(371,10-371,16)
(FStar.Map.equal (Sec2.HIFC.loc Dummy_value)
Prims.int
@x37
(Sec2.HIFC.upd @x33
@x14
@x17))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(371,10-371,16)
(forall ((@x70 Term))
 (! (implies (and (HasType @x70
Prims.unit)

;; def=Sec2.HIFC.fst(371,17-371,48); use=Sec2.HIFC.fst(371,10-371,16)
(Valid 
;; def=Sec2.HIFC.fst(371,17-371,48); use=Sec2.HIFC.fst(371,10-371,16)
(FStar.Map.equal (Sec2.HIFC.loc Dummy_value)
Prims.int
@x37
(Sec2.HIFC.upd @x33
@x14
@x17))
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(372,10-372,16)
(and 
;; def=Sec2.HIFC.fst(372,17-372,34); use=Sec2.HIFC.fst(372,10-372,16)
(or label_37

;; def=Sec2.HIFC.fst(372,17-372,34); use=Sec2.HIFC.fst(372,10-372,16)
(Valid 
;; def=Sec2.HIFC.fst(372,17-372,34); use=Sec2.HIFC.fst(372,10-372,16)
(Sec2.HIFC.reads @x1
(ApplyTT @x10
@x32)
(ApplyTT @x11
@x32)
(ApplyTT @x13
@x32)
@x5)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(372,10-372,16)
(forall ((@x71 Term))
 (! (implies (and (HasType @x71
Prims.unit)

;; def=Sec2.HIFC.fst(372,17-372,34); use=Sec2.HIFC.fst(372,10-372,16)
(Valid 
;; def=Sec2.HIFC.fst(372,17-372,34); use=Sec2.HIFC.fst(372,10-372,16)
(Sec2.HIFC.reads @x1
(ApplyTT @x10
@x32)
(ApplyTT @x11
@x32)
(ApplyTT @x13
@x32)
@x5)
)
)

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x72 Term))
 (! (implies (and (HasType @x72
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x73 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x68
@x73)
)


;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x72
@x73)
)
)
 :weight 0


:pattern ((ApplyTT @x72
@x73))
:qid @query.74))
)

;; def=Prims.fst(389,2-389,39); use=Sec2.HIFC.fst(332,5-386,10)
(and (implies 
;; def=Sec2.HIFC.fst(373,13-373,37); use=Sec2.HIFC.fst(373,13-373,37)
(= (Prims.op_Equality Prims.int
(Sec2.HIFC.sel @x46
@x15)
(Sec2.HIFC.sel @x50
@x15))
(BoxBool true))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x73 Term))
 (! (implies (HasType @x73
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x72
@x73)
)
)
 
;;no pats
:qid @query.75))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Sec2.HIFC.fst(332,5-386,10)
(not 
;; def=Sec2.HIFC.fst(373,13-373,37); use=Sec2.HIFC.fst(373,13-373,37)
(= (Prims.op_Equality Prims.int
(Sec2.HIFC.sel @x46
@x15)
(Sec2.HIFC.sel @x50
@x15))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x73 Term))
 (! (implies (and (HasType @x73
Prims.bool)

;; def=Sec2.HIFC.fst(373,13-379,47); use=Sec2.HIFC.fst(373,13-379,47)
(= (Prims.op_Equality Prims.int
(Sec2.HIFC.sel @x46
@x15)
(Sec2.HIFC.sel @x50
@x15))
@x73)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(376,12-376,18)
(and 
;; def=Sec2.HIFC.fst(376,19-376,71); use=Sec2.HIFC.fst(376,12-376,18)
(or label_38

;; def=Sec2.HIFC.fst(376,20-376,42); use=Sec2.HIFC.fst(376,12-376,18)
(not (= (Sec2.HIFC.sel @x46
@x15)
(Sec2.HIFC.sel @x33
@x15)))


;; def=Sec2.HIFC.fst(376,46-376,70); use=Sec2.HIFC.fst(376,12-376,18)
(not (= (Sec2.HIFC.sel @x50
@x15)
(Sec2.HIFC.sel @x37
@x15)))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(376,12-376,18)
(forall ((@x74 Term))
 (! (implies (and (HasType @x74
Prims.unit)

;; def=Sec2.HIFC.fst(376,19-376,71); use=Sec2.HIFC.fst(376,12-376,18)
(or 
;; def=Sec2.HIFC.fst(376,20-376,42); use=Sec2.HIFC.fst(376,12-376,18)
(not (= (Sec2.HIFC.sel @x46
@x15)
(Sec2.HIFC.sel @x33
@x15)))


;; def=Sec2.HIFC.fst(376,46-376,70); use=Sec2.HIFC.fst(376,12-376,18)
(not (= (Sec2.HIFC.sel @x50
@x15)
(Sec2.HIFC.sel @x37
@x15)))
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(294,46-294,49); use=Sec2.HIFC.fst(377,46-377,48)
(or label_39

;; def=Sec2.HIFC.fst(294,46-294,49); use=Sec2.HIFC.fst(377,46-377,48)
(Valid 
;; def=Sec2.HIFC.fst(294,46-294,49); use=Sec2.HIFC.fst(377,46-377,48)
(ApplyTT (ApplyTT @x10
@x32)
@x33)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x75 Term))
 (! (implies (and (HasType @x75
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(294,38-338,16); use=Sec2.HIFC.fst(332,5-386,10)
(= @x33
@x75)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(332,5-386,10)
(and 
;; def=Sec2.HIFC.fst(294,59-294,75); use=Sec2.HIFC.fst(377,49-377,50)
(or label_40

;; def=Sec2.HIFC.fst(294,59-294,75); use=Sec2.HIFC.fst(377,49-377,50)
(Valid 
;; def=Sec2.HIFC.fst(294,59-294,75); use=Sec2.HIFC.fst(377,49-377,50)
(ApplyTT (ApplyTT @x10
@x32)
(Sec2.HIFC.upd @x33
@x14
@x17))
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x76 Term))
 (! (implies (and (HasType @x76
Prims.int)

;; def=Sec2.HIFC.fst(294,53-318,38); use=Sec2.HIFC.fst(332,5-386,10)
(= @x17
@x76)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(377,12-377,30)
(and (let ((@lb77 (ApplyTT (ApplyTT @x13
@x32)
@x33)))
(let ((@lb78 (ApplyTT (ApplyTT @x13
@x32)
(Sec2.HIFC.upd @x33
@x14
@x17))))

;; def=Sec2.HIFC.fst(298,15-299,38); use=Sec2.HIFC.fst(377,12-377,30)
(and 
;; def=Sec2.HIFC.fst(298,15-298,25); use=Sec2.HIFC.fst(377,12-377,30)
(or label_41

;; def=Sec2.HIFC.fst(298,15-298,25); use=Sec2.HIFC.fst(377,12-377,30)
(not (= @x14
@x15))
)


;; def=Sec2.HIFC.fst(299,15-299,38); use=Sec2.HIFC.fst(377,12-377,30)
(or label_42

;; def=Sec2.HIFC.fst(299,15-299,38); use=Sec2.HIFC.fst(377,12-377,30)
(not (= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb77)
@x15)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb78)
@x15)))
)
)
))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(377,12-377,30)
(forall ((@x77 Term))
 (! (implies (and (HasType @x77
Prims.unit)

;; def=Sec2.HIFC.fst(300,21-300,40); use=Sec2.HIFC.fst(377,12-377,30)
(Valid 
;; def=Sec2.HIFC.fst(300,21-300,40); use=Sec2.HIFC.fst(377,12-377,30)
(Sec2.HIFC.has_flow @x14
@x15
@x7)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(378,12-378,18)
(and 
;; def=Sec2.HIFC.fst(378,19-378,41); use=Sec2.HIFC.fst(378,12-378,18)
(or label_43

;; def=Sec2.HIFC.fst(378,19-378,41); use=Sec2.HIFC.fst(378,12-378,18)
(Valid 
;; def=Sec2.HIFC.fst(378,19-378,41); use=Sec2.HIFC.fst(378,12-378,18)
(Sec2.HIFC.has_flow @x14
@x15
@x7)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(378,12-378,18)
(forall ((@x78 Term))
 (! (implies (and (HasType @x78
Prims.unit)

;; def=Sec2.HIFC.fst(378,19-378,41); use=Sec2.HIFC.fst(378,12-378,18)
(Valid 
;; def=Sec2.HIFC.fst(378,19-378,41); use=Sec2.HIFC.fst(378,12-378,18)
(Sec2.HIFC.has_flow @x14
@x15
@x7)
)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(379,12-379,32)
(forall ((@x79 Term))
 (! (implies (and (HasType @x79
Prims.unit)

;; def=Sec2.HIFC.fst(287,10-287,70); use=Sec2.HIFC.fst(379,12-379,32)
(implies 
;; def=Sec2.HIFC.fst(287,11-287,30); use=Sec2.HIFC.fst(379,12-379,32)
(Valid 
;; def=Sec2.HIFC.fst(287,11-287,30); use=Sec2.HIFC.fst(379,12-379,32)
(Sec2.HIFC.has_flow @x14
@x15
@x7)
)


;; def=Sec2.HIFC.fst(287,35-287,69); use=Sec2.HIFC.fst(379,12-379,32)
(Valid 
;; def=Sec2.HIFC.fst(287,35-287,69); use=Sec2.HIFC.fst(379,12-379,32)
(Sec2.HIFC.has_flow @x14
@x15
(Sec2.HIFC.add_source @x3
@x7))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(379,12-379,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(379,12-379,32)
(ApplyTT @x72
@x79)
)
)
 
;;no pats
:qid @query.82))
)
 
;;no pats
:qid @query.81))
)
)
 
;;no pats
:qid @query.80))
)
)
 
;;no pats
:qid @query.79))
)
)
 
;;no pats
:qid @query.78))
)
)
 
;;no pats
:qid @query.77))
)
)
 
;;no pats
:qid @query.76))
))
)
 
;;no pats
:qid @query.73))
)
 
;;no pats
:qid @query.72))
)
)
 
;;no pats
:qid @query.71))
)
)
 
;;no pats
:qid @query.70))
))
)
 
;;no pats
:qid @query.67))
)
 
;;no pats
:qid @query.66))
)
)
 
;;no pats
:qid @query.64))
)
)
 
;;no pats
:qid @query.62))
)
)
 
;;no pats
:qid @query.61))
)
)
 
;;no pats
:qid @query.60))
)
 
;;no pats
:qid @query.59))
)
)
 
;;no pats
:qid @query.58))
)
)
 
;;no pats
:qid @query.57))
)
 
;;no pats
:qid @query.56))
)
)
 
;;no pats
:qid @query.55))
)
)
 
;;no pats
:qid @query.54))
)
)
 
;;no pats
:qid @query.53))
)
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Sec2.HIFC.fst(332,5-386,10)
(not 
;; def=Sec2.HIFC.fst(356,9-356,22); use=Sec2.HIFC.fst(356,9-356,22)
(= (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x15
@x4)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x54 Term))
 (! (implies (and (HasType @x54
Prims.bool)

;; def=Sec2.HIFC.fst(356,9-386,10); use=Sec2.HIFC.fst(356,9-386,10)
(= (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x15
@x4)
@x54)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(forall ((@x55 Term))
 (! (implies (HasType @x55
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(332,5-386,10)
(ApplyTT @x53
@x55)
)
)
 
;;no pats
:qid @query.84))
)
 
;;no pats
:qid @query.83))
))
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
)
 
;;no pats
:qid @query.47))
)
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
 
;;no pats
:qid @query.39))
)
)
 
;;no pats
:qid @query.38))
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.36))
)
)
 
;;no pats
:qid @query.35))
)
)
 
;;no pats
:qid @query.34))
)
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.bind_hst_no_leakage, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Sec2.HIFC_interpretation_Tm_arrow_104b7610810c4dbe735c2bf3205a6317, bool_inversion, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Prims.eqtype, equation_Sec2.HIFC.bind_hst, equation_Sec2.HIFC.bind_ifc_, equation_Sec2.HIFC.does_not_read_loc, equation_Sec2.HIFC.does_not_read_loc_v, equation_Sec2.HIFC.hifc, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.sel, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, int_inversion, interpretation_Tm_abs_efbf51204e50a9385498d1fafe717722, lemma_FStar.Map.lemma_ContainsDom, lemma_FStar.Map.lemma_InDomUpd1, lemma_FStar.Map.lemma_SelUpd1, lemma_FStar.Map.lemma_SelUpd2, lemma_FStar.Map.lemma_equal_elim, lemma_FStar.Map.lemma_equal_intro, primitive_Prims.op_Equality, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__a, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_018725da1abdf39e6cd081f25fd130fc, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_a271d9e51cec2e7af75e321a09a013bd, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, refinement_kinding_Tm_refine_e49ec169ea1c198e613d500cb9096326, token_correspondence_Sec2.HIFC.bind_ifc_, typing_FStar.Map.contains, typing_FStar.Map.upd, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_Prims.int, typing_Sec2.HIFC.sel, typing_Sec2.HIFC.upd, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bind_hst_no_leakage


; <Start encoding let bind_hst_no_leakage>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.bind_hst_no_leakage (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.bind_hst_no_leakage@tok () Term)

; </end encoding let bind_hst_no_leakage>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(400,3-417,6)

(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)




(declare-fun Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(407,35-407,61); use=Sec2.HIFC.fst(407,35-407,61)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc))

:named refinement_kinding_Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(407,35-407,61); use=Sec2.HIFC.fst(407,35-407,61)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Sec2.HIFC.fst(401,25-401,29); use=Sec2.HIFC.fst(401,25-401,29)
(Valid 
;; def=Sec2.HIFC.fst(401,25-401,29); use=Sec2.HIFC.fst(401,25-401,29)
(ApplyTT @x2
(Sec2.HIFC.upd @x3
@x4
@x1))
)


;; def=Sec2.HIFC.fst(401,33-401,68); use=Sec2.HIFC.fst(401,33-401,68)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
@x5)
(HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(401,47-401,56); use=Sec2.HIFC.fst(401,47-401,56)
(Valid 
;; def=Sec2.HIFC.fst(401,47-401,56); use=Sec2.HIFC.fst(401,47-401,56)
(ApplyTT (ApplyTT (ApplyTT @x6
(Sec2.HIFC.upd @x3
@x4
@x1))
@x8)
@x9)
)
)

;; def=Sec2.HIFC.fst(401,61-401,67); use=Sec2.HIFC.fst(401,61-401,67)
(Valid 
;; def=Sec2.HIFC.fst(401,61-401,67); use=Sec2.HIFC.fst(401,61-401,67)
(ApplyTT (ApplyTT @x7
@x8)
@x9)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc))

:named refinement_interpretation_Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(407,35-407,61); use=Sec2.HIFC.fst(407,35-407,61)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq Prims.int)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_1ec991095bf1c07d5e00e4f41aeed6fc))

:named haseqTm_refine_1ec991095bf1c07d5e00e4f41aeed6fc))
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(408,11-412,41); use=Sec2.HIFC.fst(408,11-408,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

(declare-fun Tm_refine_49052319d2dd35f4e00cc409da2796ac (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(408,17-411,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_49052319d2dd35f4e00cc409da2796ac))

:named refinement_kinding_Tm_refine_49052319d2dd35f4e00cc409da2796ac))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(408,17-411,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x6
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(198,26-198,65); use=Sec2.HIFC.fst(408,17-411,42)
(exists ((@x7 Term) (@x8 Term))
 (! (and (HasType @x7
@x2)
(HasType @x8
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(198,40-198,49); use=Sec2.HIFC.fst(408,17-411,42)
(Valid 
;; def=Sec2.HIFC.fst(198,40-198,49); use=Sec2.HIFC.fst(408,17-411,42)
(ApplyTT (ApplyTT (ApplyTT @x3
@x4)
@x7)
@x8)
)


;; def=Sec2.HIFC.fst(198,53-198,64); use=Sec2.HIFC.fst(408,17-411,42)
(Valid 
;; def=Sec2.HIFC.fst(198,53-198,64); use=Sec2.HIFC.fst(408,17-411,42)
(ApplyTT (ApplyTT (ApplyTT (ApplyTT @x5
@x7)
@x8)
(FStar.Pervasives.Native.fst @x6
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x6
Sec2.HIFC.store
@x1))
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_49052319d2dd35f4e00cc409da2796ac.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_49052319d2dd35f4e00cc409da2796ac))

:named refinement_interpretation_Tm_refine_49052319d2dd35f4e00cc409da2796ac))
;;;;;;;;;;;;;;;;haseq for Tm_refine_49052319d2dd35f4e00cc409da2796ac
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(408,17-411,42)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x4
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_49052319d2dd35f4e00cc409da2796ac))

:named haseqTm_refine_49052319d2dd35f4e00cc409da2796ac))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
Sec2.HIFC.bind_ifc_@tok))
:named @kick_partial_app_74cfa6a6539c36641d60b8618b61a148))





















(declare-fun Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(408,11-412,41); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (HasType (Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17)
Tm_type)
 

:pattern ((HasType (Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17)
Tm_type))
:qid refinement_kinding_Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4))

:named refinement_kinding_Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(408,11-412,41); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17
@x18
@x19))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(407,7-415,10)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.unit)
(let ((@lb21 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
@x15)
@x16)
@x17)))
(let ((@lb22 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x14)
@x15)
@x16)
(Sec2.HIFC.upd @x17
@x18
@x19))))

;; def=Sec2.HIFC.fst(411,18-411,41); use=Sec2.HIFC.fst(407,7-415,10)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb21)
@x2)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb22)
@x2))
)))

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(407,7-415,10)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(407,7-415,10)
(= @x20
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4.1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17
@x18
@x19)))
:qid refinement_interpretation_Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4))

:named refinement_interpretation_Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(408,11-412,41); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17))))
:qid haseqTm_refine_f7d0b29bc9a34a29d3279fce9145cef4))

:named haseqTm_refine_f7d0b29bc9a34a29d3279fce9145cef4))
;;;;;;;;;;;;;;;;s0: store{p s0 /\ (forall (x: a) (s1: store). q s0 x s1 ==> r x s1)} ->     k:       Prims.int{p (upd s0 from k) /\ (forall (x: a) (s1: store). q (upd s0 from k) x s1 ==> r x s1)}   -> FStar.Pervasives.Lemma       (ensures         ((let _, s2 = bind_ifc' x y s0 in             (let _, s2' = bind_ifc' x y (upd s0 from k) in               sel s2 to == sel s2' to)             <:             Type)           <:           Type)) [SMTPat (upd s0 from k)]
(declare-fun Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(407,16-412,41); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (HasType (Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)
Tm_type)
 

:pattern ((HasType (Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)
Tm_type))
:qid kinding_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c))

:named kinding_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(407,16-412,41); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c))

:named Sec2.HIFC_pre_typing_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(407,16-412,41); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16))
(and 
;; def=Sec2.HIFC.fst(407,16-412,41); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x17 Term) (@x18 Term))
 (! (implies (and (HasType @x17
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x16
@x15
@x14
@x13))
(HasType @x18
(Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x16
@x17
@x12
@x15
@x14
@x13)))
(HasType (ApplyTT (ApplyTT @x0
@x17)
@x18)
(Tm_refine_f7d0b29bc9a34a29d3279fce9145cef4 @x11
@x15
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x16
@x14
@x13
@x3
@x2
@x1
@x17
@x12
@x18)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x17)
@x18))
:qid Sec2.HIFC_interpretation_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(407,16-412,41); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x17 Term))
 (! (implies (HasType @x17
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x16
@x15
@x14
@x13))
(IsTotFun (ApplyTT @x0
@x17)))
 

:pattern ((ApplyTT @x0
@x17))
:qid Sec2.HIFC_interpretation_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16)))
:qid Sec2.HIFC_interpretation_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c))

:named Sec2.HIFC_interpretation_Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c))
































(declare-fun Tm_refine_37c39f36d7da52f3315f90210505f2ef (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(404,8-406,47); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (HasType (Tm_refine_37c39f36d7da52f3315f90210505f2ef @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)
Tm_type)
 

:pattern ((HasType (Tm_refine_37c39f36d7da52f3315f90210505f2ef @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)
Tm_type))
:qid refinement_kinding_Tm_refine_37c39f36d7da52f3315f90210505f2ef))

:named refinement_kinding_Tm_refine_37c39f36d7da52f3315f90210505f2ef))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(404,8-406,47); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_37c39f36d7da52f3315f90210505f2ef @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(400,3-417,6)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(400,3-417,6)
(and 
;; def=Sec2.HIFC.fst(404,24-404,34); use=Sec2.HIFC.fst(400,3-417,6)
(not (= @x2
@x3))


;; def=Sec2.HIFC.fst(404,38-404,63); use=Sec2.HIFC.fst(400,3-417,6)
(not 
;; def=Sec2.HIFC.fst(404,39-404,63); use=Sec2.HIFC.fst(400,3-417,6)
(Valid 
;; def=Sec2.HIFC.fst(404,39-404,63); use=Sec2.HIFC.fst(400,3-417,6)
(Sec2.HIFC.has_flow @x2
@x3
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
(Sec2.HIFC.add_source @x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x6)
@x7))))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=Sec2.HIFC.fst(405,23-405,43); use=Sec2.HIFC.fst(400,3-417,6)
(Valid 
;; def=Sec2.HIFC.fst(405,23-405,43); use=Sec2.HIFC.fst(400,3-417,6)
(Sec2.HIFC.no_leakage @x8
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x9
@x10
@x11
@x12)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x10
@x11
@x13
@x8)
(Sec2.HIFC.bind_ifc_ @x10
@x8
@x14
@x5
@x6
@x15
@x4
@x7
@x9
@x11
@x12
@x13
@x16
@x17)
@x2
@x3)
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(400,3-417,6)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(400,3-417,6)
(= @x18
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_37c39f36d7da52f3315f90210505f2ef.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_37c39f36d7da52f3315f90210505f2ef @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17)))
:qid refinement_interpretation_Tm_refine_37c39f36d7da52f3315f90210505f2ef))

:named refinement_interpretation_Tm_refine_37c39f36d7da52f3315f90210505f2ef))
;;;;;;;;;;;;;;;;haseq for Tm_refine_37c39f36d7da52f3315f90210505f2ef
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(404,8-406,47); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_37c39f36d7da52f3315f90210505f2ef @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_37c39f36d7da52f3315f90210505f2ef @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))))
:qid haseqTm_refine_37c39f36d7da52f3315f90210505f2ef))

:named haseqTm_refine_37c39f36d7da52f3315f90210505f2ef))
;;;;;;;;;;;;;;;;from: loc -> to: loc   -> FStar.Pervasives.Lemma       (requires from <> to /\ ~(has_flow from to (fs0 @ add_source r0 ((bot, w1) :: fs1))))       (ensures no_leakage (bind_ifc' x y) from to)       [SMTPat (has_flow from to (fs0 @ add_source r0 ((bot, w1) :: fs1)))]
(declare-fun Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(403,38-406,47); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (HasType (Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
Tm_type)
 

:pattern ((HasType (Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
Tm_type))
:qid kinding_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0))

:named kinding_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(403,38-406,47); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0))

:named Sec2.HIFC_pre_typing_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(403,38-406,47); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14))
(and 
;; def=Sec2.HIFC.fst(403,38-406,47); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x15 Term) (@x16 Term))
 (! (implies (and 
;; def=Sec2.HIFC.fst(404,24-404,34); use=Sec2.HIFC.fst(400,3-417,6)
(not (= @x15
@x16))


;; def=Sec2.HIFC.fst(404,38-404,63); use=Sec2.HIFC.fst(400,3-417,6)
(not 
;; def=Sec2.HIFC.fst(404,39-404,63); use=Sec2.HIFC.fst(400,3-417,6)
(Valid 
;; def=Sec2.HIFC.fst(404,39-404,63); use=Sec2.HIFC.fst(400,3-417,6)
(Sec2.HIFC.has_flow @x15
@x16
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x14
(Sec2.HIFC.add_source @x13
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x12)
@x11))))
)
)

(HasType @x15
(Sec2.HIFC.loc Dummy_value))
(HasType @x16
(Sec2.HIFC.loc Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x15)
@x16)
(Tm_refine_37c39f36d7da52f3315f90210505f2ef @x15
@x16
@x14
@x13
@x12
@x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3
@x2
@x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x15)
@x16))
:qid Sec2.HIFC_interpretation_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(403,38-406,47); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Sec2.HIFC.loc Dummy_value))
(IsTotFun (ApplyTT @x0
@x15)))
 

:pattern ((ApplyTT @x0
@x15))
:qid Sec2.HIFC_interpretation_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14)))
:qid Sec2.HIFC_interpretation_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0))

:named Sec2.HIFC_interpretation_Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0))





























; Encoding query formula : forall (a: Type) (b: Type) (w0: Sec2.HIFC.label) (r0: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;   (r1: Sec2.HIFC.label) (fs0: Sec2.HIFC.flows) (fs1: Sec2.HIFC.flows) (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a) (r: (_: a -> Sec2.HIFC.pre)) (s: (_: a -> Sec2.HIFC.post b))
;   (x: Sec2.HIFC.hifc a r0 w0 fs0 p q) (y: (x: a -> Sec2.HIFC.hifc b r1 w1 fs1 (r x) (s x))).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.respects (Sec2.HIFC.bind_ifc' x y)
;           (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1)) ==>
;         p pure_result) ==>
;     (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           from <> to /\
;           ~(Sec2.HIFC.has_flow from to (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1))) /\
;           (forall (pure_result: Prims.unit).
;               Sec2.HIFC.no_leakage (Sec2.HIFC.bind_ifc' x y) from to ==> p pure_result) ==>
;           (forall (s0:
;               Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)})
;               (k:
;               Prims.int
;                 { p (Sec2.HIFC.upd s0 from k) /\
;                   (forall (x: a) (s1: Sec2.HIFC.store). q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1)
;                 })
;               (_: Prims.squash Prims.l_True).
;               (*  - Could not prove post-condition
; *)
;               forall (any_result:
;                 s0:
;                 Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)})
;               .
;                 s0 == any_result ==>
;                 (forall (any_result:
;                     r:
;                     (b & Sec2.HIFC.store)
;                       { exists (x: a) (s1: Sec2.HIFC.store).
;                           q s0 x s1 /\
;                           s x s1 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) }).
;                     Sec2.HIFC.bind_ifc' x y s0 == any_result ==>
;                     (forall (return_val:
;                         r:
;                         (b & Sec2.HIFC.store)
;                           { exists (x: a) (s1: Sec2.HIFC.store).
;                               q s0 x s1 /\
;                               s x s1 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r)
;                           }).
;                         return_val == Sec2.HIFC.bind_ifc' x y s0 ==>
;                         Sec2.HIFC.bind_ifc' x y s0 == return_val ==>
;                         (forall (b: b) (b: Sec2.HIFC.store).
;                             Sec2.HIFC.bind_ifc' x y s0 == (b, b) ==>
;                             p (Sec2.HIFC.upd s0 from k) /\
;                             (forall (x: a) (s1: Sec2.HIFC.store).
;                                 q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1))))) /\
;           (forall (s0:
;               Sec2.HIFC.store{p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)})
;               (k:
;               Prims.int
;                 { p (Sec2.HIFC.upd s0 from k) /\
;                   (forall (x: a) (s1: Sec2.HIFC.store). q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1)
;                 }).
;               (forall (_: Prims.squash Prims.l_True).
;                   (*  - Could not prove post-condition
; *)
;                   forall (any_result:
;                     s0:
;                     Sec2.HIFC.store
;                       {p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)}).
;                     s0 == any_result ==>
;                     (forall (any_result:
;                         r:
;                         (b & Sec2.HIFC.store)
;                           { exists (x: a) (s1: Sec2.HIFC.store).
;                               q s0 x s1 /\
;                               s x s1 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r)
;                           }).
;                         Sec2.HIFC.bind_ifc' x y s0 == any_result ==>
;                         (forall (return_val:
;                             r:
;                             (b & Sec2.HIFC.store)
;                               { exists (x: a) (s1: Sec2.HIFC.store).
;                                   q s0 x s1 /\
;                                   s x
;                                     s1
;                                     (FStar.Pervasives.Native.fst r)
;                                     (FStar.Pervasives.Native.snd r) }).
;                             return_val == Sec2.HIFC.bind_ifc' x y s0 ==>
;                             Sec2.HIFC.bind_ifc' x y s0 == return_val ==>
;                             (forall (b: b) (b: Sec2.HIFC.store).
;                                 Sec2.HIFC.bind_ifc' x y s0 == (b, b) ==>
;                                 p (Sec2.HIFC.upd s0 from k) /\
;                                 (forall (x: a) (s1: Sec2.HIFC.store).
;                                     q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1))))) /\
;               (forall (p: Prims.pure_post Prims.unit).
;                   (forall (pure_result: Prims.unit).
;                       (let _, s2 = Sec2.HIFC.bind_ifc' x y s0 in
;                         (let _, s2' = Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) in
;                           Sec2.HIFC.sel s2 to == Sec2.HIFC.sel s2' to)
;                         <:
;                         Type0) ==>
;                       p pure_result) ==>
;                   p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1) /\
;                   p (Sec2.HIFC.upd s0 from k) /\
;                   (forall (x: a) (s1: Sec2.HIFC.store). q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1) /\
;                   from <> to /\
;                   ~(Sec2.HIFC.has_flow from
;                       to
;                       (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1))) /\
;                   (forall (pure_result: Prims.unit).
;                       (let _, s2 = Sec2.HIFC.bind_ifc' x y s0 in
;                         (let _, s2' = Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) in
;                           Sec2.HIFC.sel s2 to == Sec2.HIFC.sel s2' to)
;                         <:
;                         Type0) ==>
;                       p pure_result))) /\
;           (forall (any_result:
;               (
;                     s0:
;                       Sec2.HIFC.store
;                         {p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)} ->
;                     k:
;                       Prims.int
;                         { p (Sec2.HIFC.upd s0 from k) /\
;                           (forall (x: a) (s1: Sec2.HIFC.store).
;                               q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1) }
;                   -> FStar.Pervasives.Lemma
;                       (ensures
;                         ((let _, s2 = Sec2.HIFC.bind_ifc' x y s0 in
;                             (let _, s2' = Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) in
;                               Sec2.HIFC.sel s2 to == Sec2.HIFC.sel s2' to)
;                             <:
;                             Type0)
;                           <:
;                           Type0)) [SMTPat (Sec2.HIFC.upd s0 from k)])).
;               (forall (s0:
;                   Sec2.HIFC.store
;                     {p s0 /\ (forall (x: a) (s1: Sec2.HIFC.store). q s0 x s1 ==> r x s1)})
;                   (k:
;                   Prims.int
;                     { p (Sec2.HIFC.upd s0 from k) /\
;                       (forall (x: a) (s1: Sec2.HIFC.store).
;                           q (Sec2.HIFC.upd s0 from k) x s1 ==> r x s1) }).
;                   {:pattern Sec2.HIFC.upd s0 from k}
;                   Prims.auto_squash (let _, s2 = Sec2.HIFC.bind_ifc' x y s0 in
;                       (let _, s2' = Sec2.HIFC.bind_ifc' x y (Sec2.HIFC.upd s0 from k) in
;                         Sec2.HIFC.sel s2 to == Sec2.HIFC.sel s2' to)
;                       <:
;                       Type0)) ==>
;               (forall (any_result: Prims.unit). p any_result))) /\
;     (forall (any_result:
;         (from: Sec2.HIFC.loc -> to: Sec2.HIFC.loc
;             -> FStar.Pervasives.Lemma
;                 (requires
;                   from <> to /\
;                   ~(Sec2.HIFC.has_flow from
;                       to
;                       (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1))))
;                 (ensures Sec2.HIFC.no_leakage (Sec2.HIFC.bind_ifc' x y) from to)
;                 [
;                   SMTPat (Sec2.HIFC.has_flow from
;                         to
;                         (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1)))
;                 ])).
;         (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc).
;             {:pattern
;             Sec2.HIFC.has_flow from to (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1))}
;             from <> to /\
;             ~(Sec2.HIFC.has_flow from
;                 to
;                 (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1))) ==>
;             Sec2.HIFC.no_leakage (Sec2.HIFC.bind_ifc' x y) from to) ==>
;         (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let bind_ifc_flows_ok`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.flows)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.pre)
(HasType @x9
(Sec2.HIFC.post @x0))
(HasType @x10
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0))
(HasType @x11
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x0))
(HasType @x12
(Sec2.HIFC.hifc @x0
@x3
@x2
@x6
@x8
@x9))
(HasType @x13
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x11
@x10
@x7
@x4
@x5
@x1
@x0)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x15 Term))
 (! (implies (and (or label_1
(HasType @x15
Prims.unit))

;; def=Sec2.HIFC.fst(399,10-399,75); use=Sec2.HIFC.fst(400,3-417,6)
(or label_2

;; def=Sec2.HIFC.fst(399,10-399,75); use=Sec2.HIFC.fst(400,3-417,6)
(Valid 
;; def=Sec2.HIFC.fst(399,10-399,75); use=Sec2.HIFC.fst(400,3-417,6)
(Sec2.HIFC.respects @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7))))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(400,3-417,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(400,3-417,6)
(ApplyTT @x14
@x15)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(400,3-417,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(400,3-417,6)
(ApplyTT @x14
@x15)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(400,3-417,6)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x15
(Sec2.HIFC.loc Dummy_value))
(HasType @x16
(Sec2.HIFC.loc Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(404,24-404,34); use=Sec2.HIFC.fst(407,7-415,10)
(not (= @x15
@x16))


;; def=Sec2.HIFC.fst(404,38-404,63); use=Sec2.HIFC.fst(407,7-415,10)
(not 
;; def=Sec2.HIFC.fst(404,39-404,63); use=Sec2.HIFC.fst(407,7-415,10)
(Valid 
;; def=Sec2.HIFC.fst(404,39-404,63); use=Sec2.HIFC.fst(407,7-415,10)
(Sec2.HIFC.has_flow @x15
@x16
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7))))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x18 Term))
 (! (implies (and (or label_3
(HasType @x18
Prims.unit))

;; def=Sec2.HIFC.fst(405,23-405,43); use=Sec2.HIFC.fst(407,7-415,10)
(or label_4

;; def=Sec2.HIFC.fst(405,23-405,43); use=Sec2.HIFC.fst(407,7-415,10)
(Valid 
;; def=Sec2.HIFC.fst(405,23-405,43); use=Sec2.HIFC.fst(407,7-415,10)
(Sec2.HIFC.no_leakage @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
@x15
@x16)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(407,7-415,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(407,7-415,10)
(ApplyTT @x17
@x18)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(407,7-415,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(407,7-415,10)
(ApplyTT @x17
@x18)
)
)
:qid @query.5))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(407,7-415,10)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x18 Term) (@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x18
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))
(HasType @x19
(Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x8
@x18
@x15
@x0
@x9
@x10))
(HasType @x20
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(408,17-411,42)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(13,31-407,19); use=Sec2.HIFC.fst(408,17-411,42)
(= @x18
@x21)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(408,17-411,42)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x9
@x18
@x11
@x1))

;; def=Sec2.HIFC.fst(13,49-409,34); use=Sec2.HIFC.fst(408,17-411,42)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18)
@x22)
)

;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(408,17-411,42)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x9
@x18
@x11
@x1))

;; def=Prims.fst(356,26-356,41); use=Sec2.HIFC.fst(408,17-411,42)
(= @x23
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18))


;; def=Sec2.HIFC.fst(409,22-409,34); use=Sec2.HIFC.fst(409,22-409,34)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18)
@x23)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(408,17-411,42)
(forall ((@x24 Term))
 (! (implies (HasType @x24
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(408,17-411,42)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(409,22-409,27); use=Sec2.HIFC.fst(409,22-409,27)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18)
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x24
@x25))
)

;; def=Sec2.HIFC.fst(197,21-197,64); use=Sec2.HIFC.fst(410,33-410,36)
(and 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(410,33-410,36)
(or label_5

;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(410,33-410,36)
(Valid 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(410,33-410,36)
(ApplyTT @x8
(Sec2.HIFC.upd @x18
@x15
@x19))
)
)


;; def=Sec2.HIFC.fst(197,29-197,64); use=Sec2.HIFC.fst(410,33-410,36)
(forall ((@x26 Term) (@x27 Term))
 (! (implies (and (HasType @x26
@x0)
(HasType @x27
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(410,33-410,36)
(Valid 
;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(410,33-410,36)
(ApplyTT (ApplyTT (ApplyTT @x9
(Sec2.HIFC.upd @x18
@x15
@x19))
@x26)
@x27)
)
)

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(410,33-410,36)
(or label_6

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(410,33-410,36)
(Valid 
;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(410,33-410,36)
(ApplyTT (ApplyTT @x10
@x26)
@x27)
)
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))


;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x18 Term) (@x19 Term))
 (! (implies (and (HasType @x18
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))
(HasType @x19
(Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x8
@x18
@x15
@x0
@x9
@x10)))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(407,7-415,10)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x20 Term))
 (! (implies (HasType @x20
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))

;; def=Sec2.HIFC.fst(13,31-407,19); use=Sec2.HIFC.fst(413,11-413,47)
(= @x18
@x21)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x9
@x18
@x11
@x1))

;; def=Sec2.HIFC.fst(13,49-409,34); use=Sec2.HIFC.fst(413,11-413,47)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18)
@x22)
)

;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x23 Term))
 (! (implies (and (HasType @x23
(Tm_refine_49052319d2dd35f4e00cc409da2796ac @x0
@x9
@x18
@x11
@x1))

;; def=Prims.fst(356,26-356,41); use=Sec2.HIFC.fst(413,11-413,47)
(= @x23
(ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18))


;; def=Sec2.HIFC.fst(409,22-409,34); use=Sec2.HIFC.fst(413,11-413,47)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18)
@x23)
)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x24 Term))
 (! (implies (HasType @x24
@x1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x25 Term))
 (! (implies (and (HasType @x25
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(409,22-409,27); use=Sec2.HIFC.fst(413,11-413,47)
(= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18)
(FStar.Pervasives.Native.Mktuple2 @x1
Sec2.HIFC.store
@x24
@x25))
)

;; def=Sec2.HIFC.fst(197,21-197,64); use=Sec2.HIFC.fst(413,11-413,47)
(and 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(410,33-410,36)
(or label_7

;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(413,11-413,47)
(Valid 
;; def=Sec2.HIFC.fst(197,21-197,25); use=Sec2.HIFC.fst(413,11-413,47)
(ApplyTT @x8
(Sec2.HIFC.upd @x18
@x15
@x19))
)
)


;; def=Sec2.HIFC.fst(197,29-197,64); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x26 Term) (@x27 Term))
 (! (implies (and (HasType @x26
@x0)
(HasType @x27
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(413,11-413,47)
(Valid 
;; def=Sec2.HIFC.fst(197,43-197,52); use=Sec2.HIFC.fst(413,11-413,47)
(ApplyTT (ApplyTT (ApplyTT @x9
(Sec2.HIFC.upd @x18
@x15
@x19))
@x26)
@x27)
)
)

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(410,33-410,36)
(or label_8

;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(413,11-413,47)
(Valid 
;; def=Sec2.HIFC.fst(197,57-197,63); use=Sec2.HIFC.fst(413,11-413,47)
(ApplyTT (ApplyTT @x10
@x26)
@x27)
)
)
)
 
;;no pats
:qid @query.20))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))


;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x21 Term))
 (! (implies (and (or label_9
(HasType @x21
Prims.unit))
(let ((@lb22 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18)))
(let ((@lb23 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.upd @x18
@x15
@x19))))

;; def=Sec2.HIFC.fst(411,18-411,41); use=Sec2.HIFC.fst(413,11-413,47)
(or label_10

;; def=Sec2.HIFC.fst(411,18-411,41); use=Sec2.HIFC.fst(413,11-413,47)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb22)
@x16)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb23)
@x16))
)
)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(413,11-413,47)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(413,11-413,47)
(ApplyTT @x20
@x21)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(413,11-413,47)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(413,11-413,47)
(ApplyTT @x20
@x21)
)
)
:qid @query.22))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(413,11-413,47)
(and 
;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(413,11-413,30)
(or label_11

;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(413,11-413,30)
(Valid 
;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(413,11-413,30)
(ApplyTT @x8
@x18)
)
)


;; def=Sec2.HIFC.fst(321,37-321,72); use=Sec2.HIFC.fst(413,11-413,30)
(forall ((@x21 Term) (@x22 Term))
 (! (implies (and (HasType @x21
@x0)
(HasType @x22
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(413,11-413,30)
(Valid 
;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(413,11-413,30)
(ApplyTT (ApplyTT (ApplyTT @x9
@x18)
@x21)
@x22)
)
)

;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(413,11-413,30)
(or label_12

;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(413,11-413,30)
(Valid 
;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(413,11-413,30)
(ApplyTT (ApplyTT @x10
@x21)
@x22)
)
)
)
 
;;no pats
:qid @query.23))


;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(413,11-413,30)
(or label_13

;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(413,11-413,30)
(Valid 
;; def=Sec2.HIFC.fst(321,29-321,33); use=Sec2.HIFC.fst(413,11-413,30)
(ApplyTT @x8
(Sec2.HIFC.upd @x18
@x15
@x19))
)
)


;; def=Sec2.HIFC.fst(321,37-321,72); use=Sec2.HIFC.fst(413,11-413,30)
(forall ((@x21 Term) (@x22 Term))
 (! (implies (and (HasType @x21
@x0)
(HasType @x22
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(413,11-413,30)
(Valid 
;; def=Sec2.HIFC.fst(321,51-321,60); use=Sec2.HIFC.fst(413,11-413,30)
(ApplyTT (ApplyTT (ApplyTT @x9
(Sec2.HIFC.upd @x18
@x15
@x19))
@x21)
@x22)
)
)

;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(413,11-413,30)
(or label_14

;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(413,11-413,30)
(Valid 
;; def=Sec2.HIFC.fst(321,65-321,71); use=Sec2.HIFC.fst(413,11-413,30)
(ApplyTT (ApplyTT @x10
@x21)
@x22)
)
)
)
 
;;no pats
:qid @query.24))


;; def=Sec2.HIFC.fst(325,8-325,18); use=Sec2.HIFC.fst(413,11-413,30)
(or label_15

;; def=Sec2.HIFC.fst(325,8-325,18); use=Sec2.HIFC.fst(413,11-413,30)
(not (= @x15
@x16))
)


;; def=Sec2.HIFC.fst(326,8-326,66); use=Sec2.HIFC.fst(413,11-413,30)
(or label_16

;; def=Sec2.HIFC.fst(326,8-326,66); use=Sec2.HIFC.fst(413,11-413,30)
(not 
;; def=Sec2.HIFC.fst(326,9-326,66); use=Sec2.HIFC.fst(413,11-413,30)
(Valid 
;; def=Sec2.HIFC.fst(326,9-326,66); use=Sec2.HIFC.fst(413,11-413,30)
(Sec2.HIFC.has_flow @x15
@x16
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7))))
)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(413,11-413,47)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
Prims.unit)
(let ((@lb22 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x18)))
(let ((@lb23 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.upd @x18
@x15
@x19))))

;; def=Sec2.HIFC.fst(331,16-331,39); use=Sec2.HIFC.fst(413,11-413,30)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb22)
@x16)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb23)
@x16))
)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(413,11-413,47)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(413,11-413,47)
(ApplyTT @x20
@x21)
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.13))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
(Tm_arrow_fcbb789a65938f7bfda92c7b5dbdf15c @x13
@x12
@x11
@x7
@x6
@x5
@x4
@x3
@x2
@x1
@x16
@x15
@x10
@x9
@x0
@x8))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x19
(Tm_refine_534ad67b03834e6d7680c73a9b413139 @x8
@x0
@x9
@x10))
(HasType @x20
(Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc @x8
@x19
@x15
@x0
@x9
@x10)))
(let ((@lb21 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
@x19)))
(let ((@lb22 (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT Sec2.HIFC.bind_ifc_@tok
@x0)
@x1)
@x2)
@x3)
@x4)
@x5)
@x6)
@x7)
@x8)
@x9)
@x10)
@x11)
@x12)
@x13)
(Sec2.HIFC.upd @x19
@x15
@x20))))

;; def=Sec2.HIFC.fst(411,18-411,41); use=Sec2.HIFC.fst(411,18-411,41)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb21)
@x16)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb22)
@x16))
)))
 

:pattern ((Sec2.HIFC.upd @x19
@x15
@x20))
:qid @query.27))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(407,7-415,10)
(forall ((@x19 Term))
 (! (implies (HasType @x19
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(407,7-415,10)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(407,7-415,10)
(ApplyTT @x17
@x19)
)
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(Tm_arrow_7a1ee597c53027d75d4c32e5475ff6b0 @x13
@x12
@x5
@x2
@x11
@x10
@x9
@x0
@x8
@x1
@x7
@x4
@x3
@x6))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x16
(Sec2.HIFC.loc Dummy_value))
(HasType @x17
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(404,24-404,34); use=Sec2.HIFC.fst(404,24-404,34)
(not (= @x16
@x17))


;; def=Sec2.HIFC.fst(404,38-404,63); use=Sec2.HIFC.fst(404,38-404,63)
(not 
;; def=Sec2.HIFC.fst(404,39-404,63); use=Sec2.HIFC.fst(404,39-404,63)
(Valid 
;; def=Sec2.HIFC.fst(404,39-404,63); use=Sec2.HIFC.fst(404,39-404,63)
(Sec2.HIFC.has_flow @x16
@x17
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7))))
)
)
)

;; def=Sec2.HIFC.fst(405,23-405,43); use=Sec2.HIFC.fst(405,23-405,43)
(Valid 
;; def=Sec2.HIFC.fst(405,23-405,43); use=Sec2.HIFC.fst(405,23-405,43)
(Sec2.HIFC.no_leakage @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
@x16
@x17)
)
)
 

:pattern ((Sec2.HIFC.has_flow @x16
@x17
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7)))))
:qid @query.30))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(400,3-417,6)
(forall ((@x16 Term))
 (! (implies (HasType @x16
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(400,3-417,6)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(400,3-417,6)
(ApplyTT @x14
@x16)
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.29))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.bind_ifc_flows_ok, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.bind_hst, equation_Sec2.HIFC.bind_ifc_, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, function_token_typing_Sec2.HIFC.bind_ifc_, int_inversion, interpretation_Tm_abs_63bcd83c24112861c302253aadf3ccd3, interpretation_Tm_abs_efbf51204e50a9385498d1fafe717722, l_and-interp, l_quant_interp_f91b6a6f0b8a07ee1c169cd5bd16ad4b, proj_equation_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_1ec991095bf1c07d5e00e4f41aeed6fc, refinement_interpretation_Tm_refine_534ad67b03834e6d7680c73a9b413139

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let bind_ifc_flows_ok


; <Start encoding let bind_ifc_flows_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.bind_ifc_flows_ok (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.bind_ifc_flows_ok@tok () Term)

; </end encoding let bind_ifc_flows_ok>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(429,3-433,5)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
























































































; Encoding query formula : forall (a: Type) (b: Type) (w0: Sec2.HIFC.label) (r0: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;   (r1: Sec2.HIFC.label) (fs0: Sec2.HIFC.flows) (fs1: Sec2.HIFC.flows) (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a) (r: (_: a -> Sec2.HIFC.pre)) (s: (_: a -> Sec2.HIFC.post b))
;   (x: Sec2.HIFC.hifc a r0 w0 fs0 p q) (y: (x: a -> Sec2.HIFC.hifc b r1 w1 fs1 (r x) (s x))).
;   (*  - Could not prove post-condition
; *)
;   forall (pure_result: Prims.unit).
;     Sec2.HIFC.reads (Sec2.HIFC.bind_ifc' x y) (Sec2.HIFC.union r0 r1) ==>
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.writes (Sec2.HIFC.bind_ifc' x y) (Sec2.HIFC.union w0 w1) ==>
;         (forall (pure_result: Prims.unit).
;             Sec2.HIFC.respects (Sec2.HIFC.bind_ifc' x y)
;               (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1)) ==>
;             Sec2.HIFC.reads (Sec2.HIFC.bind_ifc' x y) (Sec2.HIFC.union r0 r1) /\
;             Sec2.HIFC.writes (Sec2.HIFC.bind_ifc' x y) (Sec2.HIFC.union w0 w1) /\
;             Sec2.HIFC.respects (Sec2.HIFC.bind_ifc' x y)
;               (fs0 @ Sec2.HIFC.add_source r0 ((Sec2.HIFC.bot, w1) :: fs1))))


; Context: While encoding a query
; While typechecking the top-level declaration `let pre_bind`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.label)
(HasType @x4
Sec2.HIFC.label)
(HasType @x5
Sec2.HIFC.label)
(HasType @x6
Sec2.HIFC.flows)
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
Sec2.HIFC.pre)
(HasType @x9
(Sec2.HIFC.post @x0))
(HasType @x10
(Tm_arrow_d5c34168037b0d9d5776b07b5ca04410 @x0))
(HasType @x11
(Tm_arrow_d0af8e4239206d4b885e6d27c0cf08c1 @x1
@x0))
(HasType @x12
(Sec2.HIFC.hifc @x0
@x3
@x2
@x6
@x8
@x9))
(HasType @x13
(Tm_arrow_104b7610810c4dbe735c2bf3205a6317 @x11
@x10
@x7
@x4
@x5
@x1
@x0)))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(430,4-430,21)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=Sec2.HIFC.fst(208,10-208,47); use=Sec2.HIFC.fst(430,4-430,21)
(Valid 
;; def=Sec2.HIFC.fst(208,10-208,47); use=Sec2.HIFC.fst(430,4-430,21)
(Sec2.HIFC.reads @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(Sec2.HIFC.union @x3
@x5))
)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(431,4-431,22)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.unit)

;; def=Sec2.HIFC.fst(239,10-239,48); use=Sec2.HIFC.fst(431,4-431,22)
(Valid 
;; def=Sec2.HIFC.fst(239,10-239,48); use=Sec2.HIFC.fst(431,4-431,22)
(Sec2.HIFC.writes @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(Sec2.HIFC.union @x2
@x4))
)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(432,4-432,21)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=Sec2.HIFC.fst(399,10-399,75); use=Sec2.HIFC.fst(432,4-432,21)
(Valid 
;; def=Sec2.HIFC.fst(399,10-399,75); use=Sec2.HIFC.fst(432,4-432,21)
(Sec2.HIFC.respects @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7))))
)
)

;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(433,4-433,5)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(433,4-433,5)
(or label_1

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(433,4-433,5)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(433,4-433,5)
(Sec2.HIFC.reads @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(Sec2.HIFC.union @x3
@x5))
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(433,4-433,5)
(or label_2

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(433,4-433,5)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(433,4-433,5)
(Sec2.HIFC.writes @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(Sec2.HIFC.union @x2
@x4))
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(433,4-433,5)
(or label_3

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(433,4-433,5)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(433,4-433,5)
(Sec2.HIFC.respects @x1
(Tm_abs_63bcd83c24112861c302253aadf3ccd3 @x8
@x0
@x9
@x10)
(Tm_abs_dd4b001d921d3fcb212e4c95cfc8b15f @x0
@x9
@x11
@x1)
(Sec2.HIFC.bind_ifc_ @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x6
(Sec2.HIFC.add_source @x3
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x4)
@x7))))
)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.pre_bind, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let pre_bind


; <Start encoding let pre_bind>




(declare-fun Sec2.HIFC.pre_bind (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

















;;;;;;;;;;;;;;;;a: Type ->     b: Type ->     w0: label ->     r0: label ->     w1: label ->     r1: label ->     fs0: flows ->     fs1: flows ->     x: hifc a r0 w0 fs0 p q ->     y: (x: a -> hifc b r1 w1 fs1 (r x) (s x))   -> hifc b       (union r0 r1)       (union w0 w1)       (fs0 @ add_source r0 ((bot, w1) :: fs1))       (fun s0 -> p s0 /\ (forall (x: a) (s1: store). q s0 x s1 ==> r x s1))       (fun s0 r s2 -> exists (x: a) (s1: store). q s0 x s1 /\ s x s1 r s2)
(declare-fun Tm_arrow_17b148416697f6f7e0d94135794d76fe () Term)
(declare-fun Sec2.HIFC.pre_bind@tok () Term)


















; </end encoding let pre_bind>


; encoding sigelt let triple


; <Start encoding let triple>

(declare-fun Sec2.HIFC.triple () Term)

; </end encoding let triple>


; encoding sigelt let unit_triple


; <Start encoding let unit_triple>

(declare-fun Sec2.HIFC.unit_triple (Term) Term)
;;;;;;;;;;;;;;;;label & label & Prims.list _
(declare-fun Tm_arrow_352bf0bc38533e8032f9cea82c2160fa () Term)
(declare-fun Sec2.HIFC.unit_triple@tok () Term)

; </end encoding let unit_triple>


; encoding sigelt let ifc_triple


; <Start encoding let ifc_triple>

(declare-fun Sec2.HIFC.ifc_triple (Term Term) Term)
;;;;;;;;;;;;;;;;_: label & label & Prims.list flow -> _: label & label & Prims.list flow   -> FStar.Set.set loc & FStar.Set.set loc & Prims.list flow
(declare-fun Tm_arrow_6575f4e2f2607cff4c419d5f47ce5227 () Term)
(declare-fun Sec2.HIFC.ifc_triple@tok () Term)

; </end encoding let ifc_triple>


; encoding sigelt let label_equiv


; <Start encoding let label_equiv>

(declare-fun Sec2.HIFC.label_equiv (Term Term) Term)
;;;;;;;;;;;;;;;;s0: label -> s1: label -> Type
(declare-fun Tm_arrow_ee78d03145c63b66880068b5796fcb8b () Term)
(declare-fun Sec2.HIFC.label_equiv@tok () Term)

; </end encoding let label_equiv>


; encoding sigelt let triple_equiv


; <Start encoding let triple_equiv>

(declare-fun Sec2.HIFC.triple_equiv (Term Term) Term)
;;;;;;;;;;;;;;;;_: label & label & flows -> _: label & label & flows -> Prims.logical
(declare-fun Tm_arrow_18e5f23de2acf78e16bde0c649f20ae6 () Term)
(declare-fun Sec2.HIFC.triple_equiv@tok () Term)

; </end encoding let triple_equiv>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.triple_equiv; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(444,4-444,16); use=Sec2.HIFC.fst(444,4-444,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows))
(HasType @x1
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows)))
(HasType (Sec2.HIFC.triple_equiv @x0
@x1)
Prims.logical))
 

:pattern ((Sec2.HIFC.triple_equiv @x0
@x1))
:qid typing_Sec2.HIFC.triple_equiv))

:named typing_Sec2.HIFC.triple_equiv))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.label_equiv; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(443,4-443,15); use=Sec2.HIFC.fst(443,4-443,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.label)
(HasType @x1
Sec2.HIFC.label))
(HasType (Sec2.HIFC.label_equiv @x0
@x1)
Tm_type))
 

:pattern ((Sec2.HIFC.label_equiv @x0
@x1))
:qid typing_Sec2.HIFC.label_equiv))

:named typing_Sec2.HIFC.label_equiv))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.tuple3@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x6
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple3))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__c (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__c))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__b (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__a (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__3))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple3@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple3@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple3@tok)

;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple3@tok))


;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1))
:qid kinding_FStar.Pervasives.Native.tuple3@tok.1))


;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(HasType (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid kinding_FStar.Pervasives.Native.tuple3@tok.2))
)
:named kinding_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(and (is-FStar.Pervasives.Native.Mktuple3 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple3__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple3__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple3__c @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (= 147
(Term_constr_id FStar.Pervasives.Native.tuple3@tok))
:named fresh_token_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.triple_equiv
;;; Fact-ids: Name Sec2.HIFC.triple_equiv; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(444,4-444,16); use=Sec2.HIFC.fst(444,4-444,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Sec2.HIFC.triple_equiv @x0
@x1))
(let ((@lb2 (FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows)
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows)
@x0
@x1)))

;; def=Sec2.HIFC.fst(444,45-444,104); use=Sec2.HIFC.fst(444,45-444,104)
(and 
;; def=Sec2.HIFC.fst(444,45-444,62); use=Sec2.HIFC.fst(444,45-444,62)
(Valid 
;; def=Sec2.HIFC.fst(444,45-444,62); use=Sec2.HIFC.fst(444,45-444,62)
(Sec2.HIFC.label_equiv (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple2__2 @lb2)))
)


;; def=Sec2.HIFC.fst(444,66-444,83); use=Sec2.HIFC.fst(444,66-444,83)
(Valid 
;; def=Sec2.HIFC.fst(444,66-444,83); use=Sec2.HIFC.fst(444,66-444,83)
(Sec2.HIFC.label_equiv (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple2__2 @lb2)))
)


;; def=Sec2.HIFC.fst(444,87-444,104); use=Sec2.HIFC.fst(444,87-444,104)
(Valid 
;; def=Sec2.HIFC.fst(444,87-444,104); use=Sec2.HIFC.fst(444,87-444,104)
(Sec2.HIFC.flows_equiv (FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple2__2 @lb2)))
)
)
))
 

:pattern ((Sec2.HIFC.triple_equiv @x0
@x1))
:qid equation_Sec2.HIFC.triple_equiv))

:named equation_Sec2.HIFC.triple_equiv))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.label_equiv
;;; Fact-ids: Name Sec2.HIFC.label_equiv; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(443,4-443,15); use=Sec2.HIFC.fst(443,4-443,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.label_equiv @x0
@x1)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
@x0
@x1))
 

:pattern ((Sec2.HIFC.label_equiv @x0
@x1))
:qid equation_Sec2.HIFC.label_equiv))

:named equation_Sec2.HIFC.label_equiv))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.triple_equiv
;;; Fact-ids: Name Sec2.HIFC.triple_equiv; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(444,4-444,16); use=Sec2.HIFC.fst(444,4-444,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.triple_equiv @x0
@x1)
(let ((@lb2 (FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows)
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows)
@x0
@x1)))
(Prims.l_and (Prims.l_and (Sec2.HIFC.label_equiv (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple2__2 @lb2)))
(Sec2.HIFC.label_equiv (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple2__2 @lb2))))
(Sec2.HIFC.flows_equiv (FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple2__2 @lb2))))))
 

:pattern ((Prims.subtype_of (Sec2.HIFC.triple_equiv @x0
@x1)
Prims.unit))
:qid defn_equation_Sec2.HIFC.triple_equiv))

:named defn_equation_Sec2.HIFC.triple_equiv))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
@x2)
(HasTypeFuel @u0
@x6
@x3))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x8
Tm_type)
(HasTypeFuel @u0
@x9
Tm_type)
(HasTypeFuel @u0
@x4
@x7)
(HasTypeFuel @u0
@x5
@x8)
(HasTypeFuel @u0
@x6
@x9)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid data_elim_FStar.Pervasives.Native.Mktuple3))

:named data_elim_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 146
(Term_constr_id (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Native.tuple3))

:named constructor_distinct_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 153
(Term_constr_id (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple3))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple3__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1))
(Valid (Prims.hasEq @x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
:qid assumption_FStar.Pervasives.Native.tuple3__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple3__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(= (FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))

:named FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(447,4-447,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (t0: Sec2.HIFC.label & Sec2.HIFC.label & Sec2.HIFC.flows).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit). Sec2.HIFC.triple_equiv t0 t0 ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let triple_equiv_refl`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(447,4-447,6)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=Sec2.HIFC.fst(446,10-446,30); use=Sec2.HIFC.fst(447,4-447,6)
(or label_2

;; def=Sec2.HIFC.fst(446,10-446,30); use=Sec2.HIFC.fst(447,4-447,6)
(Valid 
;; def=Sec2.HIFC.fst(446,10-446,30); use=Sec2.HIFC.fst(447,4-447,6)
(Sec2.HIFC.triple_equiv @x0
@x0)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(447,4-447,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(447,4-447,6)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(447,4-447,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(447,4-447,6)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.triple_equiv_refl, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, data_elim_FStar.Pervasives.Native.Mktuple3, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_equiv, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.triple_equiv, fuel_guarded_inversion_FStar.Pervasives.Native.tuple3, lemma_FStar.Set.lemma_equal_intro, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let triple_equiv_refl


; <Start encoding let triple_equiv_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.triple_equiv_refl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.triple_equiv_refl@tok () Term)

; </end encoding let triple_equiv_refl>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(451,6-453,34)

;;;;;;;;;;;;;;;;f : Sec2.HIFC.flows (Sec2.HIFC.flows)
(declare-fun x_6e9097a38b3f763e6e9e28ca07b22ddc_0 () Term)
;;;;;;;;;;;;;;;;binder_x_6e9097a38b3f763e6e9e28ca07b22ddc_0
;;; Fact-ids: 
(assert (! (HasType x_6e9097a38b3f763e6e9e28ca07b22ddc_0
Sec2.HIFC.flows)
:named binder_x_6e9097a38b3f763e6e9e28ca07b22ddc_0))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.add_source_bot (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.add_source_bot@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source Sec2.HIFC.bot f) f ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? f) /\ ~(Cons? f) ==> Prims.l_False) /\
;       (f == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? f) ==>
;         (forall (b: Sec2.HIFC.flow) (b: Prims.list Sec2.HIFC.flow).
;             f == b :: b ==>
;             b << f /\
;             (forall (any_result: Prims.list Sec2.HIFC.flow).
;                 b == any_result ==>
;                 (forall (pure_result: Prims.unit).
;                     Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source Sec2.HIFC.bot b) b ==> k pure_result
;                 )))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec add_source_bot`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Sec2.HIFC.fst(451,6-453,34); use=Sec2.HIFC.fst(451,6-453,34)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(451,6-453,34)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=Sec2.HIFC.fst(450,12-450,46); use=Sec2.HIFC.fst(451,6-453,34)
(or label_2

;; def=Sec2.HIFC.fst(450,12-450,46); use=Sec2.HIFC.fst(451,6-453,34)
(Valid 
;; def=Sec2.HIFC.fst(450,12-450,46); use=Sec2.HIFC.fst(451,6-453,34)
(Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
x_6e9097a38b3f763e6e9e28ca07b22ddc_0)
x_6e9097a38b3f763e6e9e28ca07b22ddc_0)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(451,6-453,34)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(451,6-453,34)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(451,6-453,34)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(451,6-453,34)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(451,6-453,34)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(451,6-453,34)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(451,6-453,34)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(451,6-453,34)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(451,6-453,34)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(451,6-453,34)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(451,6-453,34)
(and (implies 
;; def=Sec2.HIFC.fst(449,24-449,25); use=Sec2.HIFC.fst(451,12-451,13)
(and 
;; def=Sec2.HIFC.fst(449,24-449,25); use=Sec2.HIFC.fst(451,12-451,13)
(not 
;; def=Sec2.HIFC.fst(449,24-449,25); use=Sec2.HIFC.fst(451,12-451,13)
(BoxBool_proj_0 (Prims.uu___is_Nil Sec2.HIFC.flow
x_6e9097a38b3f763e6e9e28ca07b22ddc_0))
)


;; def=Sec2.HIFC.fst(449,24-449,25); use=Sec2.HIFC.fst(451,12-451,13)
(not 
;; def=Sec2.HIFC.fst(449,24-449,25); use=Sec2.HIFC.fst(451,12-451,13)
(BoxBool_proj_0 (Prims.uu___is_Cons Sec2.HIFC.flow
x_6e9097a38b3f763e6e9e28ca07b22ddc_0))
)
)

label_3)
(implies 
;; def=Sec2.HIFC.fst(449,24-452,10); use=Sec2.HIFC.fst(451,12-452,10)
(= x_6e9097a38b3f763e6e9e28ca07b22ddc_0
(Prims.Nil Sec2.HIFC.flow))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(451,6-453,34)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(451,6-453,34)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(451,6-453,34)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Sec2.HIFC.fst(451,6-453,34)
(not 
;; def=Sec2.HIFC.fst(449,24-449,25); use=Sec2.HIFC.fst(451,12-451,13)
(BoxBool_proj_0 (Prims.uu___is_Nil Sec2.HIFC.flow
x_6e9097a38b3f763e6e9e28ca07b22ddc_0))
)


;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(451,6-453,34)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.flow)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(451,6-453,34)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list Sec2.HIFC.flow))

;; def=Sec2.HIFC.fst(449,24-453,13); use=Sec2.HIFC.fst(451,12-453,13)
(= x_6e9097a38b3f763e6e9e28ca07b22ddc_0
(Prims.Cons Sec2.HIFC.flow
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(451,6-453,34)
(and 
;; def=Sec2.HIFC.fst(451,6-453,34); use=Sec2.HIFC.fst(453,32-453,34)
(or label_4

;; def=Sec2.HIFC.fst(451,6-453,34); use=Sec2.HIFC.fst(453,32-453,34)
(Valid 
;; def=Sec2.HIFC.fst(451,6-453,34); use=Sec2.HIFC.fst(453,32-453,34)
(Prims.precedes Sec2.HIFC.flows
Sec2.HIFC.flows
@x3
x_6e9097a38b3f763e6e9e28ca07b22ddc_0)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(451,6-453,34)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list Sec2.HIFC.flow))

;; def=Sec2.HIFC.fst(449,24-453,13); use=Sec2.HIFC.fst(451,6-453,34)
(= @x3
@x4)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(453,17-453,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(450,12-450,46); use=Sec2.HIFC.fst(453,17-453,31)
(Valid 
;; def=Sec2.HIFC.fst(450,12-450,46); use=Sec2.HIFC.fst(453,17-453,31)
(Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
@x3)
@x3)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(453,17-453,31)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(453,17-453,31)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.add_source_bot, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, binder_x_6e9097a38b3f763e6e9e28ca07b22ddc_0, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_Prims.Cons, disc_equation_Prims.Nil, eq2-interp, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.has_flow_1, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_Prims.list, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, l_or-interp, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_Prims.Cons, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec add_source_bot


; <Start encoding let rec add_source_bot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.add_source_bot (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.add_source_bot@tok () Term)

; </end encoding let rec add_source_bot>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(458,3-468,6)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(459,6-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type)
 

:pattern ((HasType (Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid refinement_kinding_Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc))

:named refinement_kinding_Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(459,6-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc @x2
@x3
@x4
@x5
@x6
@x7
@x8))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(458,3-468,6)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(458,3-468,6)
(and 
;; def=Sec2.HIFC.fst(459,22-459,45); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(459,22-459,45); use=Sec2.HIFC.fst(458,3-468,6)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x4))
)


;; def=Sec2.HIFC.fst(460,22-460,32); use=Sec2.HIFC.fst(458,3-468,6)
(not (= @x5
@x6))


;; def=Sec2.HIFC.fst(461,22-461,42); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(461,22-461,42); use=Sec2.HIFC.fst(458,3-468,6)
(Sec2.HIFC.has_flow_1 @x5
@x6
@x2)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=Sec2.HIFC.fst(462,21-462,82); use=Sec2.HIFC.fst(458,3-468,6)
(exists ((@x10 Term))
 (! (and (HasType @x10
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(462,32-462,57); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(462,32-462,57); use=Sec2.HIFC.fst(458,3-468,6)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x10
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
@x8))
)


;; def=Sec2.HIFC.fst(462,61-462,81); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(462,61-462,81); use=Sec2.HIFC.fst(458,3-468,6)
(Sec2.HIFC.has_flow_1 @x5
@x6
@x10)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc.2))
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(458,3-468,6)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(458,3-468,6)
(= @x9
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc @x2
@x3
@x4
@x5
@x6
@x7
@x8)))
:qid refinement_interpretation_Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc))

:named refinement_interpretation_Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(459,6-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc @x0
@x1
@x2
@x3
@x4
@x5
@x6))))
:qid haseqTm_refine_5d06e695e7d4d34df8ccc126eebea1bc))

:named haseqTm_refine_5d06e695e7d4d34df8ccc126eebea1bc))
;;;;;;;;;;;;;;;;f: flow -> from: loc -> to: loc   -> FStar.Pervasives.Lemma       (requires FStar.List.Tot.Base.memP f (f0 @ f1) /\ from <> to /\ has_flow_1 from to f)       (ensures exists (g: flow). FStar.List.Tot.Base.memP g (g0 @ g1) /\ has_flow_1 from to g)       [SMTPat (has_flow_1 from to f)]
(declare-fun Tm_arrow_6937579ab73a34d8975b78b5ebd170b7 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(73,24-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_arrow_6937579ab73a34d8975b78b5ebd170b7 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_arrow_6937579ab73a34d8975b78b5ebd170b7 @x0
@x1
@x2
@x3)
Tm_type))
:qid kinding_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7))

:named kinding_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(73,24-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_6937579ab73a34d8975b78b5ebd170b7 @x2
@x3
@x4
@x5))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_6937579ab73a34d8975b78b5ebd170b7 @x2
@x3
@x4
@x5)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7))

:named Sec2.HIFC_pre_typing_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(73,24-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_6937579ab73a34d8975b78b5ebd170b7 @x1
@x2
@x3
@x4))
(and 
;; def=Sec2.HIFC.fst(73,24-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and 
;; def=Sec2.HIFC.fst(459,22-459,45); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(459,22-459,45); use=Sec2.HIFC.fst(458,3-468,6)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
@x3))
)


;; def=Sec2.HIFC.fst(460,22-460,32); use=Sec2.HIFC.fst(458,3-468,6)
(not (= @x6
@x7))


;; def=Sec2.HIFC.fst(461,22-461,42); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(461,22-461,42); use=Sec2.HIFC.fst(458,3-468,6)
(Sec2.HIFC.has_flow_1 @x6
@x7
@x5)
)

(HasType @x5
Sec2.HIFC.flow)
(HasType @x6
(Sec2.HIFC.loc Dummy_value))
(HasType @x7
(Sec2.HIFC.loc Dummy_value)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x5)
@x6)
@x7)
(Tm_refine_5d06e695e7d4d34df8ccc126eebea1bc @x5
@x4
@x3
@x6
@x7
@x2
@x1)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x5)
@x6)
@x7))
:qid Sec2.HIFC_interpretation_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(73,24-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Sec2.HIFC.flow)
(IsTotFun (ApplyTT @x0
@x5)))
 

:pattern ((ApplyTT @x0
@x5))
:qid Sec2.HIFC_interpretation_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7.2))


;; def=Sec2.HIFC.fst(73,24-463,43); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
Sec2.HIFC.flow)
(HasType @x6
(Sec2.HIFC.loc Dummy_value)))
(IsTotFun (ApplyTT (ApplyTT @x0
@x5)
@x6)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x5)
@x6))
:qid Sec2.HIFC_interpretation_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7.3))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_6937579ab73a34d8975b78b5ebd170b7 @x1
@x2
@x3
@x4)))
:qid Sec2.HIFC_interpretation_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7))

:named Sec2.HIFC_interpretation_Tm_arrow_6937579ab73a34d8975b78b5ebd170b7))

; Encoding query formula : forall (f0: Sec2.HIFC.flows) (f1: Sec2.HIFC.flows) (g0: Sec2.HIFC.flows) (g1: Sec2.HIFC.flows).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     Sec2.HIFC.flows_included_in f0 g0 /\ Sec2.HIFC.flows_included_in f1 g1 /\
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.flows_included_in (f0 @ f1) (g0 @ g1) ==> p pure_result) ==>
;     (forall (f: Sec2.HIFC.flow) (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           FStar.List.Tot.Base.memP f (f0 @ f1) /\ from <> to /\ Sec2.HIFC.has_flow_1 from to f /\
;           (forall (pure_result: Prims.unit).
;               (exists (g: Sec2.HIFC.flow).
;                   FStar.List.Tot.Base.memP g (g0 @ g1) /\ Sec2.HIFC.has_flow_1 from to g) ==>
;               p pure_result) ==>
;           (forall (pure_result: Prims.unit).
;               (FStar.List.Tot.Base.memP f (f0 @ f1) <==>
;                 FStar.List.Tot.Base.memP f f0 \/ FStar.List.Tot.Base.memP f f1) ==>
;               (exists (g: Sec2.HIFC.flow).
;                   FStar.List.Tot.Base.memP g g0 \/
;                   FStar.List.Tot.Base.memP g g1 /\ Sec2.HIFC.has_flow_1 from to g) /\
;               (forall (pure_result: Prims.unit).
;                   (exists (g: Sec2.HIFC.flow).
;                       FStar.List.Tot.Base.memP g g0 \/
;                       FStar.List.Tot.Base.memP g g1 /\ Sec2.HIFC.has_flow_1 from to g) ==>
;                   (forall (pure_result: Prims.unit).
;                       (forall (x: Sec2.HIFC.flow).
;                           FStar.List.Tot.Base.memP x (g0 @ g1) <==>
;                           FStar.List.Tot.Base.memP x g0 \/ FStar.List.Tot.Base.memP x g1) ==>
;                       p pure_result)))) /\
;     (forall (any_result:
;         (f: Sec2.HIFC.flow -> from: Sec2.HIFC.loc -> to: Sec2.HIFC.loc
;             -> FStar.Pervasives.Lemma
;                 (requires
;                   FStar.List.Tot.Base.memP f (f0 @ f1) /\ from <> to /\
;                   Sec2.HIFC.has_flow_1 from to f)
;                 (ensures
;                   exists (g: Sec2.HIFC.flow).
;                     FStar.List.Tot.Base.memP g (g0 @ g1) /\ Sec2.HIFC.has_flow_1 from to g)
;                 [SMTPat (Sec2.HIFC.has_flow_1 from to f)])).
;         (forall (f: Sec2.HIFC.flow) (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc).
;             {:pattern Sec2.HIFC.has_flow_1 from to f}
;             FStar.List.Tot.Base.memP f (f0 @ f1) /\ from <> to /\ Sec2.HIFC.has_flow_1 from to f ==>
;             (exists (g: Sec2.HIFC.flow).
;                 FStar.List.Tot.Base.memP g (g0 @ g1) /\ Sec2.HIFC.has_flow_1 from to g)) ==>
;         (forall (any_result: Prims.unit). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let flows_included_append`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows)
(HasType @x2
Sec2.HIFC.flows)
(HasType @x3
Sec2.HIFC.flows))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(455,20-455,43); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(455,20-455,43); use=Sec2.HIFC.fst(458,3-468,6)
(Sec2.HIFC.flows_included_in @x0
@x2)
)


;; def=Sec2.HIFC.fst(456,20-456,43); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(456,20-456,43); use=Sec2.HIFC.fst(458,3-468,6)
(Sec2.HIFC.flows_included_in @x1
@x3)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=Sec2.HIFC.fst(457,20-457,53); use=Sec2.HIFC.fst(458,3-468,6)
(or label_2

;; def=Sec2.HIFC.fst(457,20-457,53); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Sec2.HIFC.fst(457,20-457,53); use=Sec2.HIFC.fst(458,3-468,6)
(Sec2.HIFC.flows_included_in (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(458,3-468,6)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(458,3-468,6)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(458,3-468,6)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x5
Sec2.HIFC.flow)
(HasType @x6
(Sec2.HIFC.loc Dummy_value))
(HasType @x7
(Sec2.HIFC.loc Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(459,22-459,45); use=Sec2.HIFC.fst(464,6-466,68)
(Valid 
;; def=Sec2.HIFC.fst(459,22-459,45); use=Sec2.HIFC.fst(464,6-466,68)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)


;; def=Sec2.HIFC.fst(460,22-460,32); use=Sec2.HIFC.fst(464,6-466,68)
(not (= @x6
@x7))


;; def=Sec2.HIFC.fst(461,22-461,42); use=Sec2.HIFC.fst(464,6-466,68)
(Valid 
;; def=Sec2.HIFC.fst(461,22-461,42); use=Sec2.HIFC.fst(464,6-466,68)
(Sec2.HIFC.has_flow_1 @x6
@x7
@x5)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(464,6-466,68)
(forall ((@x9 Term))
 (! (implies (and (or label_3
(HasType @x9
Prims.unit))

;; def=Sec2.HIFC.fst(462,21-462,82); use=Sec2.HIFC.fst(464,6-466,68)
(or label_4

;; def=Sec2.HIFC.fst(462,21-462,82); use=Sec2.HIFC.fst(464,6-466,68)
(exists ((@x10 Term))
 (! (and (HasType @x10
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(462,32-462,57); use=Sec2.HIFC.fst(464,6-466,68)
(Valid 
;; def=Sec2.HIFC.fst(462,32-462,57); use=Sec2.HIFC.fst(464,6-466,68)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x10
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)


;; def=Sec2.HIFC.fst(462,61-462,81); use=Sec2.HIFC.fst(464,6-466,68)
(Valid 
;; def=Sec2.HIFC.fst(462,61-462,81); use=Sec2.HIFC.fst(464,6-466,68)
(Sec2.HIFC.has_flow_1 @x6
@x7
@x10)
)
)
 
;;no pats
:qid @query.6))
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(464,6-466,68)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(464,6-466,68)
(ApplyTT @x8
@x9)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(464,6-466,68)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(464,6-466,68)
(ApplyTT @x8
@x9)
)
)
:qid @query.5))
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(464,6-464,20)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=Sec2.HIFC.fst(245,19-246,62); use=Sec2.HIFC.fst(464,6-464,20)
(iff 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(464,6-464,20)
(Valid 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(464,6-464,20)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)


;; def=Sec2.HIFC.fst(246,19-246,61); use=Sec2.HIFC.fst(464,6-464,20)
(or 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(464,6-464,20)
(Valid 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(464,6-464,20)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x0)
)


;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(464,6-464,20)
(Valid 
;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(464,6-464,20)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x1)
)
)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(465,6-465,12)
(and 
;; def=Sec2.HIFC.fst(465,13-465,93); use=Sec2.HIFC.fst(465,6-465,12)
(or label_5

;; def=Sec2.HIFC.fst(465,13-465,93); use=Sec2.HIFC.fst(465,6-465,12)
(exists ((@x10 Term))
 (! (and (HasType @x10
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(465,24-465,92); use=Sec2.HIFC.fst(465,6-465,12)
(or 
;; def=Sec2.HIFC.fst(465,24-465,44); use=Sec2.HIFC.fst(465,6-465,12)
(Valid 
;; def=Sec2.HIFC.fst(465,24-465,44); use=Sec2.HIFC.fst(465,6-465,12)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x10
@x2)
)


;; def=Sec2.HIFC.fst(465,48-465,92); use=Sec2.HIFC.fst(465,6-465,12)
(and 
;; def=Sec2.HIFC.fst(465,48-465,68); use=Sec2.HIFC.fst(465,6-465,12)
(Valid 
;; def=Sec2.HIFC.fst(465,48-465,68); use=Sec2.HIFC.fst(465,6-465,12)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x10
@x3)
)


;; def=Sec2.HIFC.fst(465,72-465,92); use=Sec2.HIFC.fst(465,6-465,12)
(Valid 
;; def=Sec2.HIFC.fst(465,72-465,92); use=Sec2.HIFC.fst(465,6-465,12)
(Sec2.HIFC.has_flow_1 @x6
@x7
@x10)
)
)
)
)
 
;;no pats
:qid @query.8))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(465,6-465,12)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=Sec2.HIFC.fst(465,13-465,93); use=Sec2.HIFC.fst(465,6-465,12)
(exists ((@x11 Term))
 (! (and (HasType @x11
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(465,24-465,92); use=Sec2.HIFC.fst(465,6-465,12)
(or 
;; def=Sec2.HIFC.fst(465,24-465,44); use=Sec2.HIFC.fst(465,6-465,12)
(Valid 
;; def=Sec2.HIFC.fst(465,24-465,44); use=Sec2.HIFC.fst(465,6-465,12)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x11
@x2)
)


;; def=Sec2.HIFC.fst(465,48-465,92); use=Sec2.HIFC.fst(465,6-465,12)
(and 
;; def=Sec2.HIFC.fst(465,48-465,68); use=Sec2.HIFC.fst(465,6-465,12)
(Valid 
;; def=Sec2.HIFC.fst(465,48-465,68); use=Sec2.HIFC.fst(465,6-465,12)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x11
@x3)
)


;; def=Sec2.HIFC.fst(465,72-465,92); use=Sec2.HIFC.fst(465,6-465,12)
(Valid 
;; def=Sec2.HIFC.fst(465,72-465,92); use=Sec2.HIFC.fst(465,6-465,12)
(Sec2.HIFC.has_flow_1 @x6
@x7
@x11)
)
)
)
)
 
;;no pats
:qid @query.10))
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(466,22-466,34)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=FStar.Classical.fsti(241,12-241,32); use=Sec2.HIFC.fst(466,22-466,34)
(forall ((@x12 Term))
 (! (implies (HasType @x12
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(245,19-246,62); use=Sec2.HIFC.fst(466,22-466,34)
(iff 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(466,22-466,34)
(Valid 
;; def=Sec2.HIFC.fst(245,20-245,45); use=Sec2.HIFC.fst(466,22-466,34)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x12
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)


;; def=Sec2.HIFC.fst(246,19-246,61); use=Sec2.HIFC.fst(466,22-466,34)
(or 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(466,22-466,34)
(Valid 
;; def=Sec2.HIFC.fst(246,20-246,38); use=Sec2.HIFC.fst(466,22-466,34)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x12
@x2)
)


;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(466,22-466,34)
(Valid 
;; def=Sec2.HIFC.fst(246,42-246,60); use=Sec2.HIFC.fst(466,22-466,34)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x12
@x3)
)
)
)
)
 
;;no pats
:qid @query.12))
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(466,22-466,34)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(466,22-466,34)
(ApplyTT @x8
@x11)
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Tm_arrow_6937579ab73a34d8975b78b5ebd170b7 @x3
@x2
@x1
@x0))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x6
Sec2.HIFC.flow)
(HasType @x7
(Sec2.HIFC.loc Dummy_value))
(HasType @x8
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(459,22-459,45); use=Sec2.HIFC.fst(459,22-459,45)
(Valid 
;; def=Sec2.HIFC.fst(459,22-459,45); use=Sec2.HIFC.fst(459,22-459,45)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)


;; def=Sec2.HIFC.fst(460,22-460,32); use=Sec2.HIFC.fst(460,22-460,32)
(not (= @x7
@x8))


;; def=Sec2.HIFC.fst(461,22-461,42); use=Sec2.HIFC.fst(461,22-461,42)
(Valid 
;; def=Sec2.HIFC.fst(461,22-461,42); use=Sec2.HIFC.fst(461,22-461,42)
(Sec2.HIFC.has_flow_1 @x7
@x8
@x6)
)
)

;; def=Sec2.HIFC.fst(462,21-462,82); use=Sec2.HIFC.fst(462,21-462,82)
(exists ((@x9 Term))
 (! (and (HasType @x9
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(462,32-462,57); use=Sec2.HIFC.fst(462,32-462,57)
(Valid 
;; def=Sec2.HIFC.fst(462,32-462,57); use=Sec2.HIFC.fst(462,32-462,57)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x9
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)


;; def=Sec2.HIFC.fst(462,61-462,81); use=Sec2.HIFC.fst(462,61-462,81)
(Valid 
;; def=Sec2.HIFC.fst(462,61-462,81); use=Sec2.HIFC.fst(462,61-462,81)
(Sec2.HIFC.has_flow_1 @x7
@x8
@x9)
)
)
 
;;no pats
:qid @query.15))
)
 

:pattern ((Sec2.HIFC.has_flow_1 @x7
@x8
@x6))
:qid @query.14))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(458,3-468,6)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(458,3-468,6)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(458,3-468,6)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.flows_included_append, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.loc, int_inversion

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let flows_included_append


; <Start encoding let flows_included_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.flows_included_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.flows_included_append@tok () Term)

; </end encoding let flows_included_append>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(472,4-473,37)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (f0: Sec2.HIFC.flows) (f1: Sec2.HIFC.flows) (g0: Sec2.HIFC.flows) (g1: Sec2.HIFC.flows).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     Sec2.HIFC.flows_equiv f0 g0 /\ Sec2.HIFC.flows_equiv f1 g1 /\
;     (forall (pure_result: Prims.unit). Sec2.HIFC.flows_equiv (f0 @ f1) (g0 @ g1) ==> p pure_result) ==>
;     Sec2.HIFC.flows_included_in f0 g0 /\ Sec2.HIFC.flows_included_in f1 g1 /\
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.flows_included_in (f0 @ f1) (g0 @ g1) ==>
;         Sec2.HIFC.flows_included_in g0 f0 /\ Sec2.HIFC.flows_included_in g1 f1 /\
;         (forall (pure_result: Prims.unit).
;             Sec2.HIFC.flows_included_in (g0 @ g1) (f0 @ f1) ==> p pure_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let flows_equiv_append`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows)
(HasType @x2
Sec2.HIFC.flows)
(HasType @x3
Sec2.HIFC.flows))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(470,20-470,37); use=Sec2.HIFC.fst(472,4-473,37)
(Valid 
;; def=Sec2.HIFC.fst(470,20-470,37); use=Sec2.HIFC.fst(472,4-473,37)
(Sec2.HIFC.flows_equiv @x0
@x2)
)


;; def=Sec2.HIFC.fst(470,41-470,58); use=Sec2.HIFC.fst(472,4-473,37)
(Valid 
;; def=Sec2.HIFC.fst(470,41-470,58); use=Sec2.HIFC.fst(472,4-473,37)
(Sec2.HIFC.flows_equiv @x1
@x3)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(472,4-473,37)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=Sec2.HIFC.fst(471,20-471,47); use=Sec2.HIFC.fst(472,4-473,37)
(or label_2

;; def=Sec2.HIFC.fst(471,20-471,47); use=Sec2.HIFC.fst(472,4-473,37)
(Valid 
;; def=Sec2.HIFC.fst(471,20-471,47); use=Sec2.HIFC.fst(472,4-473,37)
(Sec2.HIFC.flows_equiv (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(472,4-473,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(472,4-473,37)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(472,4-473,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(472,4-473,37)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(472,4-472,25)
(and 
;; def=Sec2.HIFC.fst(455,20-455,43); use=Sec2.HIFC.fst(472,4-472,25)
(or label_3

;; def=Sec2.HIFC.fst(455,20-455,43); use=Sec2.HIFC.fst(472,4-472,25)
(Valid 
;; def=Sec2.HIFC.fst(455,20-455,43); use=Sec2.HIFC.fst(472,4-472,25)
(Sec2.HIFC.flows_included_in @x0
@x2)
)
)


;; def=Sec2.HIFC.fst(456,20-456,43); use=Sec2.HIFC.fst(472,4-472,25)
(or label_4

;; def=Sec2.HIFC.fst(456,20-456,43); use=Sec2.HIFC.fst(472,4-472,25)
(Valid 
;; def=Sec2.HIFC.fst(456,20-456,43); use=Sec2.HIFC.fst(472,4-472,25)
(Sec2.HIFC.flows_included_in @x1
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(472,4-472,25)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(457,20-457,53); use=Sec2.HIFC.fst(472,4-472,25)
(Valid 
;; def=Sec2.HIFC.fst(457,20-457,53); use=Sec2.HIFC.fst(472,4-472,25)
(Sec2.HIFC.flows_included_in (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3))
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(473,4-473,25)
(and 
;; def=Sec2.HIFC.fst(455,20-455,43); use=Sec2.HIFC.fst(473,4-473,25)
(or label_5

;; def=Sec2.HIFC.fst(455,20-455,43); use=Sec2.HIFC.fst(473,4-473,25)
(Valid 
;; def=Sec2.HIFC.fst(455,20-455,43); use=Sec2.HIFC.fst(473,4-473,25)
(Sec2.HIFC.flows_included_in @x2
@x0)
)
)


;; def=Sec2.HIFC.fst(456,20-456,43); use=Sec2.HIFC.fst(473,4-473,25)
(or label_6

;; def=Sec2.HIFC.fst(456,20-456,43); use=Sec2.HIFC.fst(473,4-473,25)
(Valid 
;; def=Sec2.HIFC.fst(456,20-456,43); use=Sec2.HIFC.fst(473,4-473,25)
(Sec2.HIFC.flows_included_in @x3
@x1)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(473,4-473,25)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=Sec2.HIFC.fst(457,20-457,53); use=Sec2.HIFC.fst(473,4-473,25)
(Valid 
;; def=Sec2.HIFC.fst(457,20-457,53); use=Sec2.HIFC.fst(473,4-473,25)
(Sec2.HIFC.flows_included_in (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x2
@x3)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(473,4-473,25)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(473,4-473,25)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.flows_equiv_append, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_FStar.List.Tot.Base.op_At, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows_equiv

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let flows_equiv_append


; <Start encoding let flows_equiv_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.flows_equiv_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.flows_equiv_append@tok () Term)

; </end encoding let flows_equiv_append>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(476,4-478,30)

;;;;;;;;;;;;;;;;a : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;l : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_2 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.append_nil_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.append_nil_r@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit). l @ [] == l ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l) /\ ~(Cons? l) ==> Prims.l_False) /\
;       (l == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l) ==>
;         (forall (b: a) (b: Prims.list a).
;             l == b :: b ==>
;             b << l /\
;             (forall (any_result: Prims.list a).
;                 b == any_result ==>
;                 (forall (pure_result: Prims.unit). b @ [] == b ==> k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec append_nil_r`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Sec2.HIFC.fst(476,4-478,30); use=Sec2.HIFC.fst(476,4-478,30)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(476,4-478,30)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=Sec2.HIFC.fst(475,10-475,23); use=Sec2.HIFC.fst(476,4-478,30)
(or label_2

;; def=Sec2.HIFC.fst(475,10-475,23); use=Sec2.HIFC.fst(476,4-478,30)
(= (FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1))
x_0a56e3de562c08d8ab59f4ac6f626a98_2)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(476,4-478,30)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(476,4-478,30)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(476,4-478,30)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(476,4-478,30)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(476,4-478,30)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(476,4-478,30)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(476,4-478,30)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(476,4-478,30)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(476,4-478,30)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(476,4-478,30)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(476,4-478,30)
(and (implies 
;; def=Sec2.HIFC.fst(474,25-474,26); use=Sec2.HIFC.fst(476,10-476,11)
(and 
;; def=Sec2.HIFC.fst(474,25-474,26); use=Sec2.HIFC.fst(476,10-476,11)
(not 
;; def=Sec2.HIFC.fst(474,25-474,26); use=Sec2.HIFC.fst(476,10-476,11)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)


;; def=Sec2.HIFC.fst(474,25-474,26); use=Sec2.HIFC.fst(476,10-476,11)
(not 
;; def=Sec2.HIFC.fst(474,25-474,26); use=Sec2.HIFC.fst(476,10-476,11)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)
)

label_3)
(implies 
;; def=Sec2.HIFC.fst(474,25-477,8); use=Sec2.HIFC.fst(476,10-477,8)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(476,4-478,30)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(476,4-478,30)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(476,4-478,30)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Sec2.HIFC.fst(476,4-478,30)
(not 
;; def=Sec2.HIFC.fst(474,25-474,26); use=Sec2.HIFC.fst(476,10-476,11)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_2))
)


;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(476,4-478,30)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(476,4-478,30)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Sec2.HIFC.fst(474,25-478,11); use=Sec2.HIFC.fst(476,10-478,11)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_2
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(476,4-478,30)
(and 
;; def=Sec2.HIFC.fst(476,4-478,30); use=Sec2.HIFC.fst(478,28-478,30)
(or label_4

;; def=Sec2.HIFC.fst(476,4-478,30); use=Sec2.HIFC.fst(478,28-478,30)
(Valid 
;; def=Sec2.HIFC.fst(476,4-478,30); use=Sec2.HIFC.fst(478,28-478,30)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_2)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(476,4-478,30)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Sec2.HIFC.fst(474,25-478,11); use=Sec2.HIFC.fst(476,4-478,30)
(= @x3
@x4)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(478,15-478,27)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(475,10-475,23); use=Sec2.HIFC.fst(478,15-478,27)
(= (FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
@x3
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1))
@x3)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(478,15-478,27)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(478,15-478,27)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.append_nil_r, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_2, binder_x_fe28d8bcde588226b4e538b35321de05_1, disc_equation_Prims.Cons, disc_equation_Prims.Nil, fuel_guarded_inversion_Prims.list, lemma_FStar.List.Tot.Properties.append_l_nil, projection_inverse_BoxBool_proj_0, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec append_nil_r


; <Start encoding let rec append_nil_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.append_nil_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.append_nil_r@tok () Term)

; </end encoding let rec append_nil_r>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.unit_triple; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(440,4-440,15); use=Sec2.HIFC.fst(440,4-440,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Sec2.HIFC.unit_triple @x0)
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list @x0))))
 

:pattern ((Sec2.HIFC.unit_triple @x0))
:qid typing_Sec2.HIFC.unit_triple))

:named typing_Sec2.HIFC.unit_triple))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.ifc_triple; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(441,4-441,14); use=Sec2.HIFC.fst(441,4-441,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)))
(HasType @x1
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))))
(HasType (Sec2.HIFC.ifc_triple @x0
@x1)
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))))
 

:pattern ((Sec2.HIFC.ifc_triple @x0
@x1))
:qid typing_Sec2.HIFC.ifc_triple))

:named typing_Sec2.HIFC.ifc_triple))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.unit_triple
;;; Fact-ids: Name Sec2.HIFC.unit_triple; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(440,4-440,15); use=Sec2.HIFC.fst(440,4-440,15)
(forall ((@x0 Term))
 (! (= (Sec2.HIFC.unit_triple @x0)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list @x0)
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil @x0)))
 

:pattern ((Sec2.HIFC.unit_triple @x0))
:qid equation_Sec2.HIFC.unit_triple))

:named equation_Sec2.HIFC.unit_triple))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.ifc_triple
;;; Fact-ids: Name Sec2.HIFC.ifc_triple; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(441,4-441,14); use=Sec2.HIFC.fst(441,4-441,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.ifc_triple @x0
@x1)
(let ((@lb2 (FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))
@x0
@x1)))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple2__2 @lb2)))
(Sec2.HIFC.union (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple2__2 @lb2)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(Sec2.HIFC.add_source (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple2__1 @lb2))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple2__2 @lb2)))
(FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple2__2 @lb2))))))))
 

:pattern ((Sec2.HIFC.ifc_triple @x0
@x1))
:qid equation_Sec2.HIFC.ifc_triple))

:named equation_Sec2.HIFC.ifc_triple))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(482,2-484,68)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (_: Sec2.HIFC.label & Sec2.HIFC.label & Prims.list Sec2.HIFC.flow).
;   (*  - Could not prove post-condition
; *)
;   forall (b: Sec2.HIFC.label) (b: Sec2.HIFC.label) (b: Prims.list Sec2.HIFC.flow).
;     _ == (b, b, b) ==>
;     FStar.Set.equal (Sec2.HIFC.union Sec2.HIFC.bot Sec2.HIFC.bot) Sec2.HIFC.bot /\
;     (forall (pure_result: Prims.unit).
;         FStar.Set.equal (Sec2.HIFC.union Sec2.HIFC.bot Sec2.HIFC.bot) Sec2.HIFC.bot ==>
;         (forall (pure_result: Prims.unit).
;             Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source Sec2.HIFC.bot b) b ==>
;             Sec2.HIFC.triple_equiv (Sec2.HIFC.ifc_triple Sec2.HIFC.unit_triple (b, b, b)) (b, b, b))
;     )


; Context: While encoding a query
; While typechecking the top-level declaration `let left_unit`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)))

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(482,2-484,68)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(482,2-484,68)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(482,2-484,68)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list Sec2.HIFC.flow))

;; def=Sec2.HIFC.fst(481,15-481,22); use=Sec2.HIFC.fst(482,2-484,68)
(= @x0
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x1
@x2
@x3))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(482,2-482,8)
(and 
;; def=Sec2.HIFC.fst(482,9-482,40); use=Sec2.HIFC.fst(482,2-482,8)
(or label_1

;; def=Sec2.HIFC.fst(482,9-482,40); use=Sec2.HIFC.fst(482,2-482,8)
(Valid 
;; def=Sec2.HIFC.fst(482,9-482,40); use=Sec2.HIFC.fst(482,2-482,8)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.bot Dummy_value))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(482,2-482,8)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=Sec2.HIFC.fst(482,9-482,40); use=Sec2.HIFC.fst(482,2-482,8)
(Valid 
;; def=Sec2.HIFC.fst(482,9-482,40); use=Sec2.HIFC.fst(482,2-482,8)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.bot Dummy_value))
)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(483,2-483,16)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(450,12-450,46); use=Sec2.HIFC.fst(483,2-483,16)
(Valid 
;; def=Sec2.HIFC.fst(450,12-450,46); use=Sec2.HIFC.fst(483,2-483,16)
(Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
@x3)
@x3)
)
)

;; def=Sec2.HIFC.fst(484,9-484,68); use=Sec2.HIFC.fst(484,2-484,8)
(or label_2

;; def=Sec2.HIFC.fst(484,9-484,68); use=Sec2.HIFC.fst(484,2-484,8)
(Valid 
;; def=Sec2.HIFC.fst(484,9-484,68); use=Sec2.HIFC.fst(484,2-484,8)
(Sec2.HIFC.triple_equiv (Sec2.HIFC.ifc_triple (Sec2.HIFC.unit_triple Sec2.HIFC.flow)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x1
@x2
@x3))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows
@x1
@x2
@x3))
)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.left_unit, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, eq2-interp, equation_FStar.List.Tot.Base.op_At, equation_FStar.Pervasives.Native.fst, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.has_flow_1, equation_Sec2.HIFC.ifc_triple, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_equiv, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.triple_equiv, equation_Sec2.HIFC.union, equation_Sec2.HIFC.unit_triple, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_Prims.list, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, l_or-interp, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, typing_FStar.List.Tot.Base.op_At, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Sec2.HIFC.union, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let left_unit


; <Start encoding let left_unit>

(declare-fun Sec2.HIFC.left_unit (Term) Term)
;;;;;;;;;;;;;;;;_: label & label & Prims.list flow -> Prims.unit
(declare-fun Tm_arrow_b2250947685bce7c5281140f53ab7617 () Term)
(declare-fun Sec2.HIFC.left_unit@tok () Term)

; </end encoding let left_unit>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Preorder.relation @x0)
Tm_type))
 

:pattern ((FStar.Preorder.relation @x0))
:qid typing_FStar.Preorder.relation))

:named typing_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Calc.calc_pack; Namespace FStar.Calc
(assert (! 
;; def=FStar.Calc.fsti(51,5-51,14); use=FStar.Calc.fsti(51,5-51,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list (FStar.Preorder.relation @x0)))
(HasType @x2
@x0)
(HasType @x3
@x0))
(HasType (FStar.Calc.calc_pack @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Calc.calc_pack @x0
@x1
@x2
@x3))
:qid typing_FStar.Calc.calc_pack))

:named typing_FStar.Calc.calc_pack))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Calc.calc_chain; Namespace FStar.Calc
(assert (! 
;; def=FStar.Calc.fsti(32,4-32,14); use=FStar.Calc.fsti(32,4-32,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list (FStar.Preorder.relation @x0)))
(HasType @x2
@x0)
(HasType @x3
@x0))
(HasType (FStar.Calc.calc_chain @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((FStar.Calc.calc_chain @x0
@x1
@x2
@x3))
:qid typing_FStar.Calc.calc_chain))

:named typing_FStar.Calc.calc_chain))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type))
:qid kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.relation
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (= (FStar.Preorder.relation @x0)
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0))
 

:pattern ((FStar.Preorder.relation @x0))
:qid equation_FStar.Preorder.relation))

:named equation_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;Equation for FStar.Calc.calc_pack
;;; Fact-ids: Name FStar.Calc.calc_pack; Namespace FStar.Calc
(assert (! 
;; def=FStar.Calc.fsti(51,5-51,14); use=FStar.Calc.fsti(51,5-51,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Calc.calc_pack @x0
@x1
@x2
@x3)
(Prims.squash (FStar.Calc.calc_chain @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Calc.calc_pack @x0
@x1
@x2
@x3))
:qid equation_FStar.Calc.calc_pack))

:named equation_FStar.Calc.calc_pack))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2)))
:qid FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1))
(and 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.1))

(IsTotFun @x0)

;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1)))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(486,2-494,69)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;x6: FStar.Set.set loc & FStar.Set.set loc & Prims.list flow ->     y7: FStar.Set.set loc & FStar.Set.set loc & Prims.list flow   -> Type
(declare-fun Tm_arrow_54ed5869b9fcea956d8d9e713969dc29 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_54ed5869b9fcea956d8d9e713969dc29
Tm_type)
:named kinding_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,66-65,81); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
:qid Sec2.HIFC_pre_typing_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))

:named Sec2.HIFC_pre_typing_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,66-65,81); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29)
(and 
;; def=FStar.Pervasives.Native.fst(65,66-65,81); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
(HasType @x2
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29.1))

(IsTotFun @x0)

;; def=FStar.Pervasives.Native.fst(65,66-65,81); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
:qid Sec2.HIFC_interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))

:named Sec2.HIFC_interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
(declare-fun Tm_abs_e1f63cdd415501ba35aa748076131b20 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_e1f63cdd415501ba35aa748076131b20
;;; Fact-ids: 
(assert (! (HasType Tm_abs_e1f63cdd415501ba35aa748076131b20
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29)
:named typing_Tm_abs_e1f63cdd415501ba35aa748076131b20))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e1f63cdd415501ba35aa748076131b20
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(488,4-488,8); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_e1f63cdd415501ba35aa748076131b20
@x0)
@x1)
(Prims.eq2 (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
@x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_e1f63cdd415501ba35aa748076131b20
@x0)
@x1))
:qid interpretation_Tm_abs_e1f63cdd415501ba35aa748076131b20))

:named interpretation_Tm_abs_e1f63cdd415501ba35aa748076131b20))
;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [fun x6 y7 -> x6 == y7 <: Type]       (ifc_triple (b, b, b) unit_triple)       (union b bot,       union b bot,       b @ add_source b [bot, bot])
(declare-fun Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444))

:named kinding_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444 @x2
@x3
@x4)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444))

:named Sec2.HIFC_pre_typing_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444 @x1
@x2
@x3))
(and 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)
(HasType (ApplyTT @x0
@x4)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1)
(Sec2.HIFC.unit_triple Sec2.HIFC.flow))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x3
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.union @x2
(Sec2.HIFC.bot Dummy_value))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x1
(Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))))))
 

:pattern ((ApplyTT @x0
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444 @x1
@x2
@x3)))
:qid Sec2.HIFC_interpretation_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444))

:named Sec2.HIFC_interpretation_Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444))

; Encoding query formula : forall (_: Sec2.HIFC.label & Sec2.HIFC.label & Prims.list Sec2.HIFC.flow).
;   (*  - Could not prove post-condition
; *)
;   forall (b: Sec2.HIFC.label) (b: Sec2.HIFC.label) (b: Prims.list Sec2.HIFC.flow).
;     _ == (b, b, b) ==>
;     (forall (_: Prims.unit).
;         (*  - Could not prove post-condition
; *)
;         forall (_: Prims.unit).
;           (*  - Could not prove post-condition
; *)
;           Sec2.HIFC.ifc_triple (b, b, b) Sec2.HIFC.unit_triple ==
;           (Sec2.HIFC.union b Sec2.HIFC.bot,
;           Sec2.HIFC.union b Sec2.HIFC.bot,
;           b @ Sec2.HIFC.add_source b [Sec2.HIFC.bot, Sec2.HIFC.bot])) /\
;     (forall (any_result:
;         (_: Prims.unit
;             -> FStar.Calc.calc_pack [fun x6 y7 -> x6 == y7 <: Type0]
;                 (Sec2.HIFC.ifc_triple (b, b, b) Sec2.HIFC.unit_triple)
;                 (Sec2.HIFC.union b Sec2.HIFC.bot,
;                 Sec2.HIFC.union b Sec2.HIFC.bot,
;                 b @ Sec2.HIFC.add_source b [Sec2.HIFC.bot, Sec2.HIFC.bot]))).
;         FStar.Range.labeled (FStar.Sealed.seal FStar.Calc.fsti(86,37-86,50))
;           "Could not prove that this calc-chain is compatible"
;           (forall (x:
;               FStar.Set.set Sec2.HIFC.loc & FStar.Set.set Sec2.HIFC.loc & Prims.list Sec2.HIFC.flow)
;               (y:
;               FStar.Set.set Sec2.HIFC.loc & FStar.Set.set Sec2.HIFC.loc & Prims.list Sec2.HIFC.flow)
;             .
;               (exists (w:
;                   FStar.Set.set Sec2.HIFC.loc &
;                   FStar.Set.set Sec2.HIFC.loc &
;                   Prims.list Sec2.HIFC.flow).
;                   x == w /\ w == y) ==>
;               x == y) /\
;         (forall (pure_result: Prims.unit).
;             Sec2.HIFC.ifc_triple (b, b, b) Sec2.HIFC.unit_triple ==
;             (Sec2.HIFC.union b Sec2.HIFC.bot,
;             Sec2.HIFC.union b Sec2.HIFC.bot,
;             b @ Sec2.HIFC.add_source b [Sec2.HIFC.bot, Sec2.HIFC.bot]) ==>
;             Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source b [Sec2.HIFC.bot, Sec2.HIFC.bot]) [] /\
;             (forall (pure_result: Prims.unit).
;                 Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source b [Sec2.HIFC.bot, Sec2.HIFC.bot]) [] ==>
;                 Sec2.HIFC.flows_equiv b b /\
;                 Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source b [Sec2.HIFC.bot, Sec2.HIFC.bot]) [] /\
;                 (forall (pure_result: Prims.unit).
;                     Sec2.HIFC.flows_equiv (b @ Sec2.HIFC.add_source b [Sec2.HIFC.bot, Sec2.HIFC.bot]
;                       )
;                       (b @ []) ==>
;                     (forall (pure_result: Prims.unit).
;                         b @ [] == b ==>
;                         Sec2.HIFC.triple_equiv (Sec2.HIFC.ifc_triple (b, b, b) Sec2.HIFC.unit_triple
;                           )
;                           (b,
;                           b,
;                           b))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let right_unit`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)))

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list Sec2.HIFC.flow))

;; def=Sec2.HIFC.fst(485,16-485,23); use=Sec2.HIFC.fst(486,2-494,69)
(= @x0
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(486,2-494,69)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(486,2-490,3)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(488,4-488,8); use=Sec2.HIFC.fst(488,9-488,12)
(or label_1

;; def=Sec2.HIFC.fst(488,4-488,8); use=Sec2.HIFC.fst(488,9-488,12)
(= (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x1
@x2
@x3)
(Sec2.HIFC.unit_triple Sec2.HIFC.flow))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x1
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.union @x2
(Sec2.HIFC.bot Dummy_value))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
(Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Tm_arrow_e66e2596829ca2b3fa8b8367ee9f3444 @x3
@x2
@x1))

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(486,2-494,69)
(and 
;; def=FStar.Calc.fsti(47,4-47,55); use=FStar.Calc.fsti(47,4-47,55)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
(HasType @x6
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x7 Term))
 (! (and (HasType @x7
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(40,12-40,18); use=FStar.Calc.fsti(40,12-40,18)
(= @x5
@x7)


;; def=Sec2.HIFC.fst(488,4-488,8); use=Sec2.HIFC.fst(486,2-494,69)
(= @x7
@x6)
)
 
;;no pats
:qid @query.8))
)

;; def=Sec2.HIFC.fst(486,7-486,11); use=Sec2.HIFC.fst(486,2-494,69)
(or label_2

;; def=Sec2.HIFC.fst(486,7-486,11); use=Sec2.HIFC.fst(486,2-494,69)
(= @x5
@x6)
)
)
 
;;no pats
:qid @query.7))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(486,2-494,69)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(486,7-486,11); use=Sec2.HIFC.fst(486,2-494,69)
(= (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x1
@x2
@x3)
(Sec2.HIFC.unit_triple Sec2.HIFC.flow))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x1
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.union @x2
(Sec2.HIFC.bot Dummy_value))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
(Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(491,2-491,8)
(and 
;; def=Sec2.HIFC.fst(491,9-491,53); use=Sec2.HIFC.fst(491,2-491,8)
(or label_3

;; def=Sec2.HIFC.fst(491,9-491,53); use=Sec2.HIFC.fst(491,2-491,8)
(Valid 
;; def=Sec2.HIFC.fst(491,9-491,53); use=Sec2.HIFC.fst(491,2-491,8)
(Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow)))
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(491,2-491,8)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=Sec2.HIFC.fst(491,9-491,53); use=Sec2.HIFC.fst(491,2-491,8)
(Valid 
;; def=Sec2.HIFC.fst(491,9-491,53); use=Sec2.HIFC.fst(491,2-491,8)
(Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow)))
(Prims.Nil Sec2.HIFC.flow))
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(492,2-492,20)
(and 
;; def=Sec2.HIFC.fst(470,20-470,37); use=Sec2.HIFC.fst(492,2-492,20)
(or label_4

;; def=Sec2.HIFC.fst(470,20-470,37); use=Sec2.HIFC.fst(492,2-492,20)
(Valid 
;; def=Sec2.HIFC.fst(470,20-470,37); use=Sec2.HIFC.fst(492,2-492,20)
(Sec2.HIFC.flows_equiv @x3
@x3)
)
)


;; def=Sec2.HIFC.fst(470,41-470,58); use=Sec2.HIFC.fst(492,2-492,20)
(or label_5

;; def=Sec2.HIFC.fst(470,41-470,58); use=Sec2.HIFC.fst(492,2-492,20)
(Valid 
;; def=Sec2.HIFC.fst(470,41-470,58); use=Sec2.HIFC.fst(492,2-492,20)
(Sec2.HIFC.flows_equiv (Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow)))
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(492,2-492,20)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Prims.unit)

;; def=Sec2.HIFC.fst(471,20-471,47); use=Sec2.HIFC.fst(492,2-492,20)
(Valid 
;; def=Sec2.HIFC.fst(471,20-471,47); use=Sec2.HIFC.fst(492,2-492,20)
(Sec2.HIFC.flows_equiv (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
(Sec2.HIFC.add_source @x2
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
(Prims.Nil Sec2.HIFC.flow)))
)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(493,2-493,14)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=Sec2.HIFC.fst(475,10-475,23); use=Sec2.HIFC.fst(493,2-493,14)
(= (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
(Prims.Nil Sec2.HIFC.flow))
@x3)
)

;; def=Sec2.HIFC.fst(494,9-494,69); use=Sec2.HIFC.fst(494,2-494,8)
(or label_6

;; def=Sec2.HIFC.fst(494,9-494,69); use=Sec2.HIFC.fst(494,2-494,8)
(Valid 
;; def=Sec2.HIFC.fst(494,9-494,69); use=Sec2.HIFC.fst(494,2-494,8)
(Sec2.HIFC.triple_equiv (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x1
@x2
@x3)
(Sec2.HIFC.unit_triple Sec2.HIFC.flow))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
Sec2.HIFC.flows
@x1
@x2
@x3))
)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.right_unit, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, eq2-interp, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.flows_equiv, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.has_flow_1, equation_Sec2.HIFC.ifc_triple, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_equiv, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.triple_equiv, equation_Sec2.HIFC.union, equation_Sec2.HIFC.unit_triple, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, l_or-interp, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Sec2.HIFC.union, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let right_unit


; <Start encoding let right_unit>

(declare-fun Sec2.HIFC.right_unit (Term) Term)

(declare-fun Sec2.HIFC.right_unit@tok () Term)

; </end encoding let right_unit>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(497,2-532,3)

(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
;;;;;;;;;;;;;;;;x14: FStar.Set.set loc & FStar.Set.set loc & Prims.list flow ->     y15: FStar.Set.set loc & FStar.Set.set loc & Prims.list flow   -> Type
(declare-fun Tm_arrow_54ed5869b9fcea956d8d9e713969dc29 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_54ed5869b9fcea956d8d9e713969dc29
Tm_type)
:named kinding_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,66-65,81); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
:qid Sec2.HIFC_pre_typing_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))

:named Sec2.HIFC_pre_typing_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29
;;; Fact-ids: 
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,66-65,81); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29)
(and 
;; def=FStar.Pervasives.Native.fst(65,66-65,81); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
(HasType @x2
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29.1))

(IsTotFun @x0)

;; def=FStar.Pervasives.Native.fst(65,66-65,81); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
:qid Sec2.HIFC_interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))

:named Sec2.HIFC_interpretation_Tm_arrow_54ed5869b9fcea956d8d9e713969dc29))
(declare-fun Tm_abs_e1f63cdd415501ba35aa748076131b20 () Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_e1f63cdd415501ba35aa748076131b20
;;; Fact-ids: 
(assert (! (HasType Tm_abs_e1f63cdd415501ba35aa748076131b20
Tm_arrow_54ed5869b9fcea956d8d9e713969dc29)
:named typing_Tm_abs_e1f63cdd415501ba35aa748076131b20))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e1f63cdd415501ba35aa748076131b20
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(499,4-499,8); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Tm_abs_e1f63cdd415501ba35aa748076131b20
@x0)
@x1)
(Prims.eq2 (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
@x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Tm_abs_e1f63cdd415501ba35aa748076131b20
@x0)
@x1))
:qid interpretation_Tm_abs_e1f63cdd415501ba35aa748076131b20))

:named interpretation_Tm_abs_e1f63cdd415501ba35aa748076131b20))
;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [fun x14 y15 -> x14 == y15 <: Type]       (ifc_triple (b, b, b) (ifc_triple (b, b, b) (b, b, b)))       (ifc_triple (b, b, b) (union b b, union b b, b @ add_source b ((bot, b) :: b)))
(declare-fun Tm_arrow_22cbb3dff78549e28ed156aa37454280 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_22cbb3dff78549e28ed156aa37454280
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_22cbb3dff78549e28ed156aa37454280 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_22cbb3dff78549e28ed156aa37454280 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_22cbb3dff78549e28ed156aa37454280))

:named kinding_Tm_arrow_22cbb3dff78549e28ed156aa37454280))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_22cbb3dff78549e28ed156aa37454280 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_22cbb3dff78549e28ed156aa37454280 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_22cbb3dff78549e28ed156aa37454280))

:named Sec2.HIFC_pre_typing_Tm_arrow_22cbb3dff78549e28ed156aa37454280))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_22cbb3dff78549e28ed156aa37454280
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_22cbb3dff78549e28ed156aa37454280 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1)))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x6
@x3)
(Sec2.HIFC.union @x5
@x2)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
(Sec2.HIFC.add_source @x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x3)
@x1))))))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_22cbb3dff78549e28ed156aa37454280.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_22cbb3dff78549e28ed156aa37454280 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_22cbb3dff78549e28ed156aa37454280))

:named Sec2.HIFC_interpretation_Tm_arrow_22cbb3dff78549e28ed156aa37454280))




;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [(fun x16 y17 -> x16 == y17 <: Type); fun x14 y15 -> x14 == y15 <: Type]       (ifc_triple (b, b, b) (ifc_triple (b, b, b) (b, b, b)))       (union b (union b b),       union b (union b b),       b @ add_source b ((bot, union b b) :: (b @ add_source b ((bot, b) :: b))))
(declare-fun Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a))

:named kinding_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a))

:named Sec2.HIFC_pre_typing_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))))))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1)))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x9
(Sec2.HIFC.union @x6
@x3))
(Sec2.HIFC.union @x8
(Sec2.HIFC.union @x5
@x2))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
(Sec2.HIFC.add_source @x8
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union @x6
@x3))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
(Sec2.HIFC.add_source @x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x3)
@x1))))))))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a))

:named Sec2.HIFC_interpretation_Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a))






;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [         (fun x18 y19 -> x18 == y19 <: Type);         (fun x16 y17 -> x16 == y17 <: Type);         fun x14 y15 -> x14 == y15 <: Type       ]       (ifc_triple (b, b, b) (ifc_triple (b, b, b) (b, b, b)))       (union (union b b) b,       union (union b b) b,       b @ add_source b ((bot, union b b) :: (b @ add_source b ((bot, b) :: b))))
(declare-fun Tm_arrow_720474a2dddde4de2194d8367f561bae (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_720474a2dddde4de2194d8367f561bae
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_720474a2dddde4de2194d8367f561bae @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_720474a2dddde4de2194d8367f561bae @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_720474a2dddde4de2194d8367f561bae))

:named kinding_Tm_arrow_720474a2dddde4de2194d8367f561bae))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_720474a2dddde4de2194d8367f561bae @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_720474a2dddde4de2194d8367f561bae @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_720474a2dddde4de2194d8367f561bae))

:named Sec2.HIFC_pre_typing_Tm_arrow_720474a2dddde4de2194d8367f561bae))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_720474a2dddde4de2194d8367f561bae
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_720474a2dddde4de2194d8367f561bae @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))))))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1)))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x9
@x6)
@x3)
(Sec2.HIFC.union (Sec2.HIFC.union @x8
@x5)
@x2)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
(Sec2.HIFC.add_source @x8
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union @x6
@x3))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
(Sec2.HIFC.add_source @x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x3)
@x1))))))))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_720474a2dddde4de2194d8367f561bae.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_720474a2dddde4de2194d8367f561bae @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_720474a2dddde4de2194d8367f561bae))

:named Sec2.HIFC_interpretation_Tm_arrow_720474a2dddde4de2194d8367f561bae))








;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [         (fun x20 y21 -> x20 == y21 <: Type);         (fun x18 y19 -> x18 == y19 <: Type);         (fun x16 y17 -> x16 == y17 <: Type);         fun x14 y15 -> x14 == y15 <: Type       ]       (ifc_triple (b, b, b) (ifc_triple (b, b, b) (b, b, b)))       (union (union b b) b,       union (union b b) b,       b @ (union b bot, union b b) :: add_source b (b @ add_source b ((bot, b) :: b)))
(declare-fun Tm_arrow_60e084ecf033a308bb971fd436253458 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_60e084ecf033a308bb971fd436253458
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_60e084ecf033a308bb971fd436253458 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_60e084ecf033a308bb971fd436253458 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_60e084ecf033a308bb971fd436253458))

:named kinding_Tm_arrow_60e084ecf033a308bb971fd436253458))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_60e084ecf033a308bb971fd436253458 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_60e084ecf033a308bb971fd436253458 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_60e084ecf033a308bb971fd436253458))

:named Sec2.HIFC_pre_typing_Tm_arrow_60e084ecf033a308bb971fd436253458))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_60e084ecf033a308bb971fd436253458
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_60e084ecf033a308bb971fd436253458 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))))))))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1)))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x9
@x6)
@x3)
(Sec2.HIFC.union (Sec2.HIFC.union @x8
@x5)
@x2)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x8
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.union @x6
@x3))
(Sec2.HIFC.add_source @x8
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
(Sec2.HIFC.add_source @x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x3)
@x1))))))))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_60e084ecf033a308bb971fd436253458.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_60e084ecf033a308bb971fd436253458 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_60e084ecf033a308bb971fd436253458))

:named Sec2.HIFC_interpretation_Tm_arrow_60e084ecf033a308bb971fd436253458))










;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [         (fun x22 y23 -> x22 == y23 <: Type);         (fun x20 y21 -> x20 == y21 <: Type);         (fun x18 y19 -> x18 == y19 <: Type);         (fun x16 y17 -> x16 == y17 <: Type);         fun x14 y15 -> x14 == y15 <: Type       ]       (ifc_triple (b, b, b) (ifc_triple (b, b, b) (b, b, b)))       (union (union b b) b,       union (union b b) b,       b @ (b, union b b) :: add_source b (b @ (b, b) :: add_source b b))
(declare-fun Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58))

:named kinding_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58))

:named Sec2.HIFC_pre_typing_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))))))))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1)))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x9
@x6)
@x3)
(Sec2.HIFC.union (Sec2.HIFC.union @x8
@x5)
@x2)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x8
(Sec2.HIFC.union @x6
@x3))
(Sec2.HIFC.add_source @x8
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x5
@x3)
(Sec2.HIFC.add_source @x5
@x1))))))))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58))

:named Sec2.HIFC_interpretation_Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58))


;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [fun x54 y55 -> x54 == y55 <: Type]       (ifc_triple (ifc_triple (b, b, b) (b, b, b)) (b, b, b))       (ifc_triple (union b b, union b b, b @ add_source b ((bot, b) :: b)) (b, b, b))
(declare-fun Tm_arrow_fb4b5c777f97e737af56818ed18ff900 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fb4b5c777f97e737af56818ed18ff900
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_fb4b5c777f97e737af56818ed18ff900 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_fb4b5c777f97e737af56818ed18ff900 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_fb4b5c777f97e737af56818ed18ff900))

:named kinding_Tm_arrow_fb4b5c777f97e737af56818ed18ff900))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_fb4b5c777f97e737af56818ed18ff900 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_fb4b5c777f97e737af56818ed18ff900 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_fb4b5c777f97e737af56818ed18ff900))

:named Sec2.HIFC_pre_typing_Tm_arrow_fb4b5c777f97e737af56818ed18ff900))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fb4b5c777f97e737af56818ed18ff900
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_fb4b5c777f97e737af56818ed18ff900 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))))
(Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x9
@x6)
(Sec2.HIFC.union @x8
@x5)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
(Sec2.HIFC.add_source @x8
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x6)
@x4))))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1)))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_fb4b5c777f97e737af56818ed18ff900.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_fb4b5c777f97e737af56818ed18ff900 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_fb4b5c777f97e737af56818ed18ff900))

:named Sec2.HIFC_interpretation_Tm_arrow_fb4b5c777f97e737af56818ed18ff900))




;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [(fun x56 y57 -> x56 == y57 <: Type); fun x54 y55 -> x54 == y55 <: Type]       (ifc_triple (ifc_triple (b, b, b) (b, b, b)) (b, b, b))       (union (union b b) b,       union (union b b) b,       (b @ add_source b ((bot, b) :: b)) @ add_source (union b b) ((bot, b) :: b))
(declare-fun Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b))

:named kinding_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b))

:named Sec2.HIFC_pre_typing_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))))))
(Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x9
@x6)
@x3)
(Sec2.HIFC.union (Sec2.HIFC.union @x8
@x5)
@x2)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
(Sec2.HIFC.add_source @x8
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x6)
@x4)))
(Sec2.HIFC.add_source (Sec2.HIFC.union @x8
@x5)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x3)
@x1)))))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b))

:named Sec2.HIFC_interpretation_Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b))






;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [         (fun x58 y59 -> x58 == y59 <: Type);         (fun x56 y57 -> x56 == y57 <: Type);         fun x54 y55 -> x54 == y55 <: Type       ]       (ifc_triple (ifc_triple (b, b, b) (b, b, b)) (b, b, b))       (union (union b b) b,       union (union b b) b,       (b @ (union b bot, b) :: add_source b b) @       (union (union b b) bot, b) :: add_source (union b b) b)
(declare-fun Tm_arrow_77560cc3c5542f34783069a4c7ab9f91 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_77560cc3c5542f34783069a4c7ab9f91 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_77560cc3c5542f34783069a4c7ab9f91 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91))

:named kinding_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_77560cc3c5542f34783069a4c7ab9f91 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_77560cc3c5542f34783069a4c7ab9f91 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91))

:named Sec2.HIFC_pre_typing_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_77560cc3c5542f34783069a4c7ab9f91 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(69,6-69,36); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))))))
(Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x9
@x6)
@x3)
(Sec2.HIFC.union (Sec2.HIFC.union @x8
@x5)
@x2)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x8
(Sec2.HIFC.bot Dummy_value))
@x6)
(Sec2.HIFC.add_source @x8
@x4)))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union (Sec2.HIFC.union @x8
@x5)
(Sec2.HIFC.bot Dummy_value))
@x3)
(Sec2.HIFC.add_source (Sec2.HIFC.union @x8
@x5)
@x1)))))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_77560cc3c5542f34783069a4c7ab9f91 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91))

:named Sec2.HIFC_interpretation_Tm_arrow_77560cc3c5542f34783069a4c7ab9f91))








;;;;;;;;;;;;;;;;_: Prims.unit   -> FStar.Calc.calc_pack [         (fun x60 y61 -> x60 == y61 <: Type);         (fun x58 y59 -> x58 == y59 <: Type);         (fun x56 y57 -> x56 == y57 <: Type);         fun x54 y55 -> x54 == y55 <: Type       ]       (ifc_triple (ifc_triple (b, b, b) (b, b, b)) (b, b, b))       (union (union b b) b,       union (union b b) b,       (b @ (b, b) :: add_source b b) @ (union b b, b) :: add_source (union b b) b)
(declare-fun Tm_arrow_fb18760ef8c492057a4cfbf9840695f6 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_arrow_fb18760ef8c492057a4cfbf9840695f6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type)
 

:pattern ((HasType (Tm_arrow_fb18760ef8c492057a4cfbf9840695f6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_type))
:qid kinding_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6))

:named kinding_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_fb18760ef8c492057a4cfbf9840695f6 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_fb18760ef8c492057a4cfbf9840695f6 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6))

:named Sec2.HIFC_pre_typing_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6
;;; Fact-ids: 
(assert (! 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_fb18760ef8c492057a4cfbf9840695f6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and 
;; def=FStar.Calc.fsti(81,6-81,36); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)
(HasType (ApplyTT @x0
@x10)
(FStar.Calc.calc_pack (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Cons (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
Tm_abs_e1f63cdd415501ba35aa748076131b20
(Prims.Nil (FStar.Preorder.relation (FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow))))))))
(Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x8
@x7)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x5
@x4))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x2
@x1))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x9
@x6)
@x3)
(Sec2.HIFC.union (Sec2.HIFC.union @x8
@x5)
@x2)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x8
@x6)
(Sec2.HIFC.add_source @x8
@x4)))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x8
@x5)
@x3)
(Sec2.HIFC.add_source (Sec2.HIFC.union @x8
@x5)
@x1)))))))
 

:pattern ((ApplyTT @x0
@x10))
:qid Sec2.HIFC_interpretation_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_fb18760ef8c492057a4cfbf9840695f6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid Sec2.HIFC_interpretation_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6))

:named Sec2.HIFC_interpretation_Tm_arrow_fb18760ef8c492057a4cfbf9840695f6))

; Encoding query formula : forall (_: Sec2.HIFC.label & Sec2.HIFC.label & Prims.list Sec2.HIFC.flow)
;   (_: Sec2.HIFC.label & Sec2.HIFC.label & Prims.list Sec2.HIFC.flow)
;   (_: Sec2.HIFC.label & Sec2.HIFC.label & Prims.list Sec2.HIFC.flow).
;   (*  - Could not prove post-condition
; *)
;   forall (b: Sec2.HIFC.label)
;     (b: Sec2.HIFC.label)
;     (b: Prims.list Sec2.HIFC.flow)
;     (b: Sec2.HIFC.label)
;     (b: Sec2.HIFC.label)
;     (b: Prims.list Sec2.HIFC.flow)
;     (b: Sec2.HIFC.label)
;     (b: Sec2.HIFC.label)
;     (b: Prims.list Sec2.HIFC.flow).
;     (_, _, _) == ((b, b, b), (b, b, b), (b, b, b)) ==>
;     (forall (_: Prims.unit).
;         (*  - Could not prove post-condition
; *)
;         (forall (_: Prims.unit).
;             (*  - Could not prove post-condition
; *)
;             (forall (_: Prims.unit).
;                 (*  - Could not prove post-condition
; *)
;                 (forall (_: Prims.unit).
;                     (*  - Could not prove post-condition
; *)
;                     (forall (_: Prims.unit).
;                         (*  - Could not prove post-condition
; *)
;                         forall (_: Prims.unit).
;                           (*  - Could not prove post-condition
; *)
;                           Sec2.HIFC.ifc_triple (b, b, b) (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b)) ==
;                           Sec2.HIFC.ifc_triple (b,
;                             b,
;                             b)
;                             (Sec2.HIFC.union b b,
;                             Sec2.HIFC.union b b,
;                             b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))) /\
;                     (forall (any_result:
;                         (_: Prims.unit
;                             -> FStar.Calc.calc_pack [fun x14 y15 -> x14 == y15 <: Type0]
;                                 (Sec2.HIFC.ifc_triple (b,
;                                     b,
;                                     b)
;                                     (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b)))
;                                 (Sec2.HIFC.ifc_triple (b,
;                                     b,
;                                     b)
;                                     (Sec2.HIFC.union b b,
;                                     Sec2.HIFC.union b b,
;                                     b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)))))
;                         (_: Prims.unit).
;                         (*  - Could not prove post-condition
; *)
;                         Sec2.HIFC.ifc_triple (b,
;                           b,
;                           b)
;                           (Sec2.HIFC.union b b,
;                           Sec2.HIFC.union b b,
;                           b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)) ==
;                         (Sec2.HIFC.union b (Sec2.HIFC.union b b),
;                         Sec2.HIFC.union b (Sec2.HIFC.union b b),
;                         b @
;                         Sec2.HIFC.add_source b
;                           ((Sec2.HIFC.bot,
;                             Sec2.HIFC.union b b) ::
;                             (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)))))) /\
;                 (forall (any_result:
;                     (_: Prims.unit
;                         -> FStar.Calc.calc_pack [
;                               (fun x16 y17 -> x16 == y17 <: Type0);
;                               fun x14 y15 -> x14 == y15 <: Type0
;                             ]
;                             (Sec2.HIFC.ifc_triple (b,
;                                 b,
;                                 b)
;                                 (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b)))
;                             (Sec2.HIFC.union b (Sec2.HIFC.union b b),
;                             Sec2.HIFC.union b (Sec2.HIFC.union b b),
;                             b @
;                             Sec2.HIFC.add_source b
;                               ((Sec2.HIFC.bot,
;                                 Sec2.HIFC.union b b) ::
;                                 (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))))))
;                     (_: Prims.unit).
;                     (*  - Could not prove post-condition
; *)
;                     (forall (w0: Sec2.HIFC.label) (w1: Sec2.HIFC.label) (w2: Sec2.HIFC.label).
;                         FStar.Set.equal (Sec2.HIFC.union w0 (Sec2.HIFC.union w1 w2))
;                           (Sec2.HIFC.union (Sec2.HIFC.union w0 w1) w2)) /\
;                     (forall (pure_result: Prims.unit).
;                         (forall (w0: Sec2.HIFC.label) (w1: Sec2.HIFC.label) (w2: Sec2.HIFC.label).
;                             FStar.Set.equal (Sec2.HIFC.union w0 (Sec2.HIFC.union w1 w2))
;                               (Sec2.HIFC.union (Sec2.HIFC.union w0 w1) w2)) ==>
;                         (Sec2.HIFC.union b (Sec2.HIFC.union b b),
;                         Sec2.HIFC.union b (Sec2.HIFC.union b b),
;                         b @
;                         Sec2.HIFC.add_source b
;                           ((Sec2.HIFC.bot,
;                             Sec2.HIFC.union b b) ::
;                             (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)))) ==
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         b @
;                         Sec2.HIFC.add_source b
;                           ((Sec2.HIFC.bot,
;                             Sec2.HIFC.union b b) ::
;                             (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))))))) /\
;             (forall (any_result:
;                 (_: Prims.unit
;                     -> FStar.Calc.calc_pack [
;                           (fun x18 y19 -> x18 == y19 <: Type0);
;                           (fun x16 y17 -> x16 == y17 <: Type0);
;                           fun x14 y15 -> x14 == y15 <: Type0
;                         ]
;                         (Sec2.HIFC.ifc_triple (b, b, b) (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b)))
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         b @
;                         Sec2.HIFC.add_source b
;                           ((Sec2.HIFC.bot,
;                             Sec2.HIFC.union b b) ::
;                             (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))))))
;                 (_: Prims.unit).
;                 (*  - Could not prove post-condition
; *)
;                 (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 b @
;                 Sec2.HIFC.add_source b
;                   ((Sec2.HIFC.bot,
;                     Sec2.HIFC.union b b) ::
;                     (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)))) ==
;                 (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 b @
;                 (Sec2.HIFC.union b Sec2.HIFC.bot,
;                 Sec2.HIFC.union b b) ::
;                 Sec2.HIFC.add_source b (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))))) /\
;         (forall (any_result:
;             (_: Prims.unit
;                 -> FStar.Calc.calc_pack [
;                       (fun x20 y21 -> x20 == y21 <: Type0);
;                       (fun x18 y19 -> x18 == y19 <: Type0);
;                       (fun x16 y17 -> x16 == y17 <: Type0);
;                       fun x14 y15 -> x14 == y15 <: Type0
;                     ]
;                     (Sec2.HIFC.ifc_triple (b, b, b) (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b)))
;                     (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                     Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                     b @
;                     (Sec2.HIFC.union b Sec2.HIFC.bot,
;                     Sec2.HIFC.union b b) ::
;                     Sec2.HIFC.add_source b (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)))))
;             (_: Prims.unit).
;             (*  - Could not prove post-condition
; *)
;             (forall (s: FStar.Set.set Sec2.HIFC.loc).
;                 FStar.Set.equal (Sec2.HIFC.union s Sec2.HIFC.bot) s) /\
;             (forall (pure_result: Prims.unit).
;                 (forall (s: FStar.Set.set Sec2.HIFC.loc).
;                     FStar.Set.equal (Sec2.HIFC.union s Sec2.HIFC.bot) s) ==>
;                 (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 b @
;                 (Sec2.HIFC.union b Sec2.HIFC.bot,
;                 Sec2.HIFC.union b b) ::
;                 Sec2.HIFC.add_source b (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))) ==
;                 (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 b @
;                 (b,
;                 Sec2.HIFC.union b b) ::
;                 Sec2.HIFC.add_source b (b @ (b, b) :: Sec2.HIFC.add_source b b))))) /\
;     (forall (any_result:
;         (_: Prims.unit
;             -> FStar.Calc.calc_pack [
;                   (fun x22 y23 -> x22 == y23 <: Type0);
;                   (fun x20 y21 -> x20 == y21 <: Type0);
;                   (fun x18 y19 -> x18 == y19 <: Type0);
;                   (fun x16 y17 -> x16 == y17 <: Type0);
;                   fun x14 y15 -> x14 == y15 <: Type0
;                 ]
;                 (Sec2.HIFC.ifc_triple (b, b, b) (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b)))
;                 (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                 b @
;                 (b,
;                 Sec2.HIFC.union b b) ::
;                 Sec2.HIFC.add_source b (b @ (b, b) :: Sec2.HIFC.add_source b b)))).
;         FStar.Range.labeled (FStar.Sealed.seal FStar.Calc.fsti(86,37-86,50))
;           "Could not prove that this calc-chain is compatible"
;           (forall (x:
;               FStar.Set.set Sec2.HIFC.loc & FStar.Set.set Sec2.HIFC.loc & Prims.list Sec2.HIFC.flow)
;               (y:
;               FStar.Set.set Sec2.HIFC.loc & FStar.Set.set Sec2.HIFC.loc & Prims.list Sec2.HIFC.flow)
;             .
;               (exists (w:
;                   FStar.Set.set Sec2.HIFC.loc &
;                   FStar.Set.set Sec2.HIFC.loc &
;                   Prims.list Sec2.HIFC.flow).
;                   (exists (w:
;                       FStar.Set.set Sec2.HIFC.loc &
;                       FStar.Set.set Sec2.HIFC.loc &
;                       Prims.list Sec2.HIFC.flow).
;                       (exists (w:
;                           FStar.Set.set Sec2.HIFC.loc &
;                           FStar.Set.set Sec2.HIFC.loc &
;                           Prims.list Sec2.HIFC.flow).
;                           (exists (w:
;                               FStar.Set.set Sec2.HIFC.loc &
;                               FStar.Set.set Sec2.HIFC.loc &
;                               Prims.list Sec2.HIFC.flow).
;                               (exists (w:
;                                   FStar.Set.set Sec2.HIFC.loc &
;                                   FStar.Set.set Sec2.HIFC.loc &
;                                   Prims.list Sec2.HIFC.flow).
;                                   x == w /\ w == w) /\ w == w) /\ w == w) /\ w == w) /\ w == y) ==>
;               x == y) /\
;         (forall (pure_result: Prims.unit).
;             Sec2.HIFC.ifc_triple (b, b, b) (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b)) ==
;             (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;             Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;             b @
;             (b,
;             Sec2.HIFC.union b b) ::
;             Sec2.HIFC.add_source b (b @ (b, b) :: Sec2.HIFC.add_source b b)) ==>
;             (forall (_: Prims.unit).
;                 (*  - Could not prove post-condition
; *)
;                 (forall (_: Prims.unit).
;                     (*  - Could not prove post-condition
; *)
;                     (forall (_: Prims.unit).
;                         (*  - Could not prove post-condition
; *)
;                         (forall (_: Prims.unit).
;                             (*  - Could not prove post-condition
; *)
;                             forall (_: Prims.unit).
;                               (*  - Could not prove post-condition
; *)
;                               Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b))
;                                 (b,
;                                 b,
;                                 b) ==
;                               Sec2.HIFC.ifc_triple (Sec2.HIFC.union b b,
;                                 Sec2.HIFC.union b b,
;                                 b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))
;                                 (b,
;                                 b,
;                                 b)) /\
;                         (forall (any_result:
;                             (_: Prims.unit
;                                 -> FStar.Calc.calc_pack [fun x54 y55 -> x54 == y55 <: Type0]
;                                     (Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b))
;                                         (b,
;                                         b,
;                                         b))
;                                     (Sec2.HIFC.ifc_triple (Sec2.HIFC.union b b,
;                                         Sec2.HIFC.union b b,
;                                         b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))
;                                         (b,
;                                         b,
;                                         b))))
;                             (_: Prims.unit).
;                             (*  - Could not prove post-condition
; *)
;                             Sec2.HIFC.ifc_triple (Sec2.HIFC.union b b,
;                               Sec2.HIFC.union b b,
;                               b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b))
;                               (b,
;                               b,
;                               b) ==
;                             (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                             Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                             (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)) @
;                             Sec2.HIFC.add_source (Sec2.HIFC.union b b) ((Sec2.HIFC.bot, b) :: b)))) /\
;                     (forall (any_result:
;                         (_: Prims.unit
;                             -> FStar.Calc.calc_pack [
;                                   (fun x56 y57 -> x56 == y57 <: Type0);
;                                   fun x54 y55 -> x54 == y55 <: Type0
;                                 ]
;                                 (Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b))
;                                     (b,
;                                     b,
;                                     b))
;                                 (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                                 Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                                 (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)) @
;                                 Sec2.HIFC.add_source (Sec2.HIFC.union b b) ((Sec2.HIFC.bot, b) :: b))
;                               ))
;                         (_: Prims.unit).
;                         (*  - Could not prove post-condition
; *)
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         (b @ Sec2.HIFC.add_source b ((Sec2.HIFC.bot, b) :: b)) @
;                         Sec2.HIFC.add_source (Sec2.HIFC.union b b) ((Sec2.HIFC.bot, b) :: b)) ==
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         (b @ (Sec2.HIFC.union b Sec2.HIFC.bot, b) :: Sec2.HIFC.add_source b b) @
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) Sec2.HIFC.bot,
;                         b) ::
;                         Sec2.HIFC.add_source (Sec2.HIFC.union b b) b))) /\
;                 (forall (any_result:
;                     (_: Prims.unit
;                         -> FStar.Calc.calc_pack [
;                               (fun x58 y59 -> x58 == y59 <: Type0);
;                               (fun x56 y57 -> x56 == y57 <: Type0);
;                               fun x54 y55 -> x54 == y55 <: Type0
;                             ]
;                             (Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b))
;                                 (b,
;                                 b,
;                                 b))
;                             (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                             Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                             (b @ (Sec2.HIFC.union b Sec2.HIFC.bot, b) :: Sec2.HIFC.add_source b b) @
;                             (Sec2.HIFC.union (Sec2.HIFC.union b b) Sec2.HIFC.bot,
;                             b) ::
;                             Sec2.HIFC.add_source (Sec2.HIFC.union b b) b)))
;                     (_: Prims.unit).
;                     (*  - Could not prove post-condition
; *)
;                     (forall (s: FStar.Set.set Sec2.HIFC.loc).
;                         FStar.Set.equal (Sec2.HIFC.union s Sec2.HIFC.bot) s) /\
;                     (forall (pure_result: Prims.unit).
;                         (forall (s: FStar.Set.set Sec2.HIFC.loc).
;                             FStar.Set.equal (Sec2.HIFC.union s Sec2.HIFC.bot) s) ==>
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         (b @ (Sec2.HIFC.union b Sec2.HIFC.bot, b) :: Sec2.HIFC.add_source b b) @
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) Sec2.HIFC.bot,
;                         b) ::
;                         Sec2.HIFC.add_source (Sec2.HIFC.union b b) b) ==
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         (b @ (b, b) :: Sec2.HIFC.add_source b b) @
;                         (Sec2.HIFC.union b b, b) :: Sec2.HIFC.add_source (Sec2.HIFC.union b b) b)))) /\
;             (forall (any_result:
;                 (_: Prims.unit
;                     -> FStar.Calc.calc_pack [
;                           (fun x60 y61 -> x60 == y61 <: Type0);
;                           (fun x58 y59 -> x58 == y59 <: Type0);
;                           (fun x56 y57 -> x56 == y57 <: Type0);
;                           fun x54 y55 -> x54 == y55 <: Type0
;                         ]
;                         (Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (b, b, b) (b, b, b)) (b, b, b))
;                         (Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         Sec2.HIFC.union (Sec2.HIFC.union b b) b,
;                         (b @ (b, b) :: Sec2.HIFC.add_source b b) @
;                         (Sec2.HIFC.union b b, b) :: Sec2.HIFC.add_source (Sec2.HIFC.union b b) b))).
;                 Prims.auto_squash (FStar.Range.labeled (FStar.Sealed.seal FStar.Calc.fsti(86,37-86,50)
;                         )
;                       "Could not prove that this calc-chain is compatible"
;                       (forall (x:
;                           FStar.Set.set Sec2.HIFC.loc &
;                           FStar.Set.set Sec2.HIFC.loc &
;                           Prims.list Sec2.HIFC.flow)
;                           (y:
;                           FStar.Set.set Sec2.HIFC.loc &
;                           FStar.Set.set Sec2.HIFC.loc &
;                           Prims.list Sec2.HIFC.flow).
;                           (exists (w:
;                               FStar.Set.set Sec2.HIFC.loc &
;                               FStar.Set.set Sec2.HIFC.loc &
;                               Prims.list Sec2.HIFC.flow).
;                               (exists (w:
;                                   FStar.Set.set Sec2.HIFC.loc &
;                                   FStar.Set.set Sec2.HIFC.loc &
;                                   Prims.list Sec2.HIFC.flow).
;                                   (exists (w:
;                                       FStar.Set.set Sec2.HIFC.loc &
;                                       FStar.Set.set Sec2.HIFC.loc &
;                                       Prims.list Sec2.HIFC.flow).
;                                       (exists (w:
;                                           FStar.Set.set Sec2.HIFC.loc &
;                                           FStar.Set.set Sec2.HIFC.loc &
;                                           Prims.list Sec2.HIFC.flow).
;                                           x == w /\ w == w) /\ w == w) /\ w == w) /\ w == y) ==>
;                           x == y)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let assoc_hst`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)))
(HasType @x1
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)))
(HasType @x2
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))))

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Prims.list Sec2.HIFC.flow))

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x7 Term))
 (! (implies (HasType @x7
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x8 Term))
 (! (implies (HasType @x8
(Prims.list Sec2.HIFC.flow))

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x9 Term))
 (! (implies (HasType @x9
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Sec2.HIFC.label)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.list Sec2.HIFC.flow))

;; def=Sec2.HIFC.fst(496,0-532,3); use=Sec2.HIFC.fst(497,2-532,3)
(= (FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))
@x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))
(FStar.Pervasives.Native.tuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x10
@x11)))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(497,2-532,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x12 Term))
 (! (implies (HasType @x12
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(497,2-515,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x13 Term))
 (! (implies (HasType @x13
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(497,2-515,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x14 Term))
 (! (implies (HasType @x14
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(497,2-515,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(497,2-515,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x16 Term))
 (! (implies (HasType @x16
Prims.unit)

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x17 Term))
 (! (implies (HasType @x17
Prims.unit)

;; def=Sec2.HIFC.fst(499,4-499,8); use=Sec2.HIFC.fst(499,9-499,12)
(or label_1

;; def=Sec2.HIFC.fst(499,4-499,8); use=Sec2.HIFC.fst(499,9-499,12)
(= (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x4
@x5)
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x10
@x11)))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x6
@x9)
(Sec2.HIFC.union @x7
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Sec2.HIFC.add_source @x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11))))))
)
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(Tm_arrow_22cbb3dff78549e28ed156aa37454280 @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x17 Term))
 (! (implies (HasType @x17
Prims.unit)

;; def=Sec2.HIFC.fst(501,4-501,8); use=Sec2.HIFC.fst(501,9-501,12)
(or label_2

;; def=Sec2.HIFC.fst(501,4-501,8); use=Sec2.HIFC.fst(501,9-501,12)
(= (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x6
@x9)
(Sec2.HIFC.union @x7
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Sec2.HIFC.add_source @x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11)))))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x3
(Sec2.HIFC.union @x6
@x9))
(Sec2.HIFC.union @x4
(Sec2.HIFC.union @x7
@x10))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union @x6
@x9))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Sec2.HIFC.add_source @x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11))))))))
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.13))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_arrow_0296da1cb98869f78ba0ab5dc1b3b37a @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x16 Term))
 (! (implies (HasType @x16
Prims.unit)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(503,11-503,17)
(and 
;; def=Sec2.HIFC.fst(503,18-503,96); use=Sec2.HIFC.fst(503,11-503,17)
(forall ((@x17 Term) (@x18 Term) (@x19 Term))
 (! (implies (and (HasType @x17
Sec2.HIFC.label)
(HasType @x18
Sec2.HIFC.label)
(HasType @x19
Sec2.HIFC.label))

;; def=Sec2.HIFC.fst(503,36-503,95); use=Sec2.HIFC.fst(503,11-503,17)
(or label_3

;; def=Sec2.HIFC.fst(503,36-503,95); use=Sec2.HIFC.fst(503,11-503,17)
(Valid 
;; def=Sec2.HIFC.fst(503,36-503,95); use=Sec2.HIFC.fst(503,11-503,17)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.union @x17
(Sec2.HIFC.union @x18
@x19))
(Sec2.HIFC.union (Sec2.HIFC.union @x17
@x18)
@x19))
)
)
)
 
;;no pats
:qid @query.20))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(503,11-503,17)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=Sec2.HIFC.fst(503,18-503,96); use=Sec2.HIFC.fst(503,11-503,17)
(forall ((@x18 Term) (@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x18
Sec2.HIFC.label)
(HasType @x19
Sec2.HIFC.label)
(HasType @x20
Sec2.HIFC.label))

;; def=Sec2.HIFC.fst(503,36-503,95); use=Sec2.HIFC.fst(503,11-503,17)
(Valid 
;; def=Sec2.HIFC.fst(503,36-503,95); use=Sec2.HIFC.fst(503,11-503,17)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.union @x18
(Sec2.HIFC.union @x19
@x20))
(Sec2.HIFC.union (Sec2.HIFC.union @x18
@x19)
@x20))
)
)
 
;;no pats
:qid @query.22))
)

;; def=Sec2.HIFC.fst(503,4-503,8); use=Sec2.HIFC.fst(503,11-503,96)
(or label_4

;; def=Sec2.HIFC.fst(503,4-503,8); use=Sec2.HIFC.fst(503,11-503,96)
(= (FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x3
(Sec2.HIFC.union @x6
@x9))
(Sec2.HIFC.union @x4
(Sec2.HIFC.union @x7
@x10))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union @x6
@x9))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Sec2.HIFC.add_source @x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11)))))))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union @x6
@x9))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Sec2.HIFC.add_source @x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11))))))))
)
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.12))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Tm_arrow_720474a2dddde4de2194d8367f561bae @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Sec2.HIFC.fst(507,4-507,8); use=Sec2.HIFC.fst(507,9-507,12)
(or label_5

;; def=Sec2.HIFC.fst(507,4-507,8); use=Sec2.HIFC.fst(507,9-507,12)
(= (FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union @x6
@x9))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Sec2.HIFC.add_source @x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11)))))))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x4
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.union @x6
@x9))
(Sec2.HIFC.add_source @x4
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Sec2.HIFC.add_source @x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11))))))))
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.11))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(Tm_arrow_60e084ecf033a308bb971fd436253458 @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-515,3)
(forall ((@x14 Term))
 (! (implies (HasType @x14
Prims.unit)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(511,11-511,17)
(and 
;; def=Sec2.HIFC.fst(511,18-511,55); use=Sec2.HIFC.fst(511,11-511,17)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(FStar.Set.set (Sec2.HIFC.loc Dummy_value)))

;; def=Sec2.HIFC.fst(511,29-511,54); use=Sec2.HIFC.fst(511,11-511,17)
(or label_6

;; def=Sec2.HIFC.fst(511,29-511,54); use=Sec2.HIFC.fst(511,11-511,17)
(Valid 
;; def=Sec2.HIFC.fst(511,29-511,54); use=Sec2.HIFC.fst(511,11-511,17)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.union @x15
(Sec2.HIFC.bot Dummy_value))
@x15)
)
)
)
 
;;no pats
:qid @query.27))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(511,11-511,17)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.unit)

;; def=Sec2.HIFC.fst(511,18-511,55); use=Sec2.HIFC.fst(511,11-511,17)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Set.set (Sec2.HIFC.loc Dummy_value)))

;; def=Sec2.HIFC.fst(511,29-511,54); use=Sec2.HIFC.fst(511,11-511,17)
(Valid 
;; def=Sec2.HIFC.fst(511,29-511,54); use=Sec2.HIFC.fst(511,11-511,17)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.union @x16
(Sec2.HIFC.bot Dummy_value))
@x16)
)
)
 
;;no pats
:qid @query.29))
)

;; def=Sec2.HIFC.fst(511,4-511,8); use=Sec2.HIFC.fst(511,11-511,55)
(or label_7

;; def=Sec2.HIFC.fst(511,4-511,8); use=Sec2.HIFC.fst(511,11-511,55)
(= (FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x4
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.union @x6
@x9))
(Sec2.HIFC.add_source @x4
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Sec2.HIFC.add_source @x7
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11)))))))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x4
(Sec2.HIFC.union @x6
@x9))
(Sec2.HIFC.add_source @x4
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x7
@x9)
(Sec2.HIFC.add_source @x7
@x11))))))))
)
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.10))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x12 Term))
 (! (implies (HasType @x12
(Tm_arrow_e3c3f9ddf60668b3eade611c5c073a58 @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(497,2-532,3)
(and 
;; def=FStar.Calc.fsti(47,4-47,55); use=FStar.Calc.fsti(47,4-47,55)
(forall ((@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
(HasType @x14
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x15 Term))
 (! (and (HasType @x15
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x16 Term))
 (! (and (HasType @x16
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x17 Term))
 (! (and (HasType @x17
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x18 Term))
 (! (and (HasType @x18
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x19 Term))
 (! (and (HasType @x19
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(40,12-40,18); use=FStar.Calc.fsti(40,12-40,18)
(= @x13
@x19)


;; def=Sec2.HIFC.fst(499,4-499,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x19
@x18)
)
 
;;no pats
:qid @query.36))


;; def=Sec2.HIFC.fst(501,4-501,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x18
@x17)
)
 
;;no pats
:qid @query.35))


;; def=Sec2.HIFC.fst(503,4-503,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x17
@x16)
)
 
;;no pats
:qid @query.34))


;; def=Sec2.HIFC.fst(507,4-507,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x16
@x15)
)
 
;;no pats
:qid @query.33))


;; def=Sec2.HIFC.fst(511,4-511,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x15
@x14)
)
 
;;no pats
:qid @query.32))
)

;; def=Sec2.HIFC.fst(497,7-497,11); use=Sec2.HIFC.fst(497,2-532,3)
(or label_8

;; def=Sec2.HIFC.fst(497,7-497,11); use=Sec2.HIFC.fst(497,2-532,3)
(= @x13
@x14)
)
)
 
;;no pats
:qid @query.31))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=Sec2.HIFC.fst(497,7-497,11); use=Sec2.HIFC.fst(497,2-532,3)
(= (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x4
@x5)
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x7
@x8)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x10
@x11)))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x4
(Sec2.HIFC.union @x6
@x9))
(Sec2.HIFC.add_source @x4
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x8
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x7
@x9)
(Sec2.HIFC.add_source @x7
@x11))))))))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(497,2-532,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x14 Term))
 (! (implies (HasType @x14
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(516,2-532,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x15 Term))
 (! (implies (HasType @x15
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(516,2-532,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x16 Term))
 (! (implies (HasType @x16
Prims.unit)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(516,2-532,3)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x17 Term))
 (! (implies (HasType @x17
Prims.unit)

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x18 Term))
 (! (implies (HasType @x18
Prims.unit)

;; def=Sec2.HIFC.fst(518,4-518,8); use=Sec2.HIFC.fst(518,9-518,12)
(or label_9

;; def=Sec2.HIFC.fst(518,4-518,8); use=Sec2.HIFC.fst(518,9-518,12)
(= (Sec2.HIFC.ifc_triple (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x3
@x4
@x5)
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x6
@x7
@x8))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x10
@x11))
(Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x3
@x6)
(Sec2.HIFC.union @x4
@x7)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x6)
@x8))))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x10
@x11)))
)
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x17 Term))
 (! (implies (HasType @x17
(Tm_arrow_fb4b5c777f97e737af56818ed18ff900 @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x18 Term))
 (! (implies (HasType @x18
Prims.unit)

;; def=Sec2.HIFC.fst(520,4-520,8); use=Sec2.HIFC.fst(520,9-520,12)
(or label_10

;; def=Sec2.HIFC.fst(520,4-520,8); use=Sec2.HIFC.fst(520,9-520,12)
(= (Sec2.HIFC.ifc_triple (FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union @x3
@x6)
(Sec2.HIFC.union @x4
@x7)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x6)
@x8))))
(FStar.Pervasives.Native.Mktuple3 Sec2.HIFC.label
Sec2.HIFC.label
(Prims.list Sec2.HIFC.flow)
@x9
@x10
@x11))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x6)
@x8)))
(Sec2.HIFC.add_source (Sec2.HIFC.union @x4
@x7)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11)))))
)
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
)
 
;;no pats
:qid @query.40))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(Tm_arrow_e0c5bcdc8e8bb32a12fa3a46ddcb596b @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x17 Term))
 (! (implies (HasType @x17
Prims.unit)

;; def=Sec2.HIFC.fst(524,4-524,8); use=Sec2.HIFC.fst(524,9-524,12)
(or label_11

;; def=Sec2.HIFC.fst(524,4-524,8); use=Sec2.HIFC.fst(524,9-524,12)
(= (FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Sec2.HIFC.add_source @x4
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x6)
@x8)))
(Sec2.HIFC.add_source (Sec2.HIFC.union @x4
@x7)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
@x9)
@x11))))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x4
(Sec2.HIFC.bot Dummy_value))
@x6)
(Sec2.HIFC.add_source @x4
@x8)))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
(Sec2.HIFC.bot Dummy_value))
@x9)
(Sec2.HIFC.add_source (Sec2.HIFC.union @x4
@x7)
@x11)))))
)
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
)
 
;;no pats
:qid @query.39))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(Tm_arrow_77560cc3c5542f34783069a4c7ab9f91 @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(516,2-532,3)
(forall ((@x16 Term))
 (! (implies (HasType @x16
Prims.unit)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(528,11-528,17)
(and 
;; def=Sec2.HIFC.fst(528,18-528,55); use=Sec2.HIFC.fst(528,11-528,17)
(forall ((@x17 Term))
 (! (implies (HasType @x17
(FStar.Set.set (Sec2.HIFC.loc Dummy_value)))

;; def=Sec2.HIFC.fst(528,29-528,54); use=Sec2.HIFC.fst(528,11-528,17)
(or label_12

;; def=Sec2.HIFC.fst(528,29-528,54); use=Sec2.HIFC.fst(528,11-528,17)
(Valid 
;; def=Sec2.HIFC.fst(528,29-528,54); use=Sec2.HIFC.fst(528,11-528,17)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.union @x17
(Sec2.HIFC.bot Dummy_value))
@x17)
)
)
)
 
;;no pats
:qid @query.49))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(528,11-528,17)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=Sec2.HIFC.fst(528,18-528,55); use=Sec2.HIFC.fst(528,11-528,17)
(forall ((@x18 Term))
 (! (implies (HasType @x18
(FStar.Set.set (Sec2.HIFC.loc Dummy_value)))

;; def=Sec2.HIFC.fst(528,29-528,54); use=Sec2.HIFC.fst(528,11-528,17)
(Valid 
;; def=Sec2.HIFC.fst(528,29-528,54); use=Sec2.HIFC.fst(528,11-528,17)
(FStar.Set.equal (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.union @x18
(Sec2.HIFC.bot Dummy_value))
@x18)
)
)
 
;;no pats
:qid @query.51))
)

;; def=Sec2.HIFC.fst(528,4-528,8); use=Sec2.HIFC.fst(528,11-528,55)
(or label_13

;; def=Sec2.HIFC.fst(528,4-528,8); use=Sec2.HIFC.fst(528,11-528,55)
(= (FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x4
(Sec2.HIFC.bot Dummy_value))
@x6)
(Sec2.HIFC.add_source @x4
@x8)))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
(Sec2.HIFC.bot Dummy_value))
@x9)
(Sec2.HIFC.add_source (Sec2.HIFC.union @x4
@x7)
@x11))))
(FStar.Pervasives.Native.Mktuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)
(Sec2.HIFC.union (Sec2.HIFC.union @x3
@x6)
@x9)
(Sec2.HIFC.union (Sec2.HIFC.union @x4
@x7)
@x10)
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x5
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
@x4
@x6)
(Sec2.HIFC.add_source @x4
@x8)))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.union @x4
@x7)
@x9)
(Sec2.HIFC.add_source (Sec2.HIFC.union @x4
@x7)
@x11)))))
)
)
 
;;no pats
:qid @query.50))
)
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
)
)
 
;;no pats
:qid @query.38))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(497,2-532,3)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Tm_arrow_fb18760ef8c492057a4cfbf9840695f6 @x11
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3))

;; def=FStar.Calc.fsti(47,4-47,55); use=FStar.Calc.fsti(47,4-47,55)
(forall ((@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x15
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))
(HasType @x16
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x17 Term))
 (! (and (HasType @x17
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x18 Term))
 (! (and (HasType @x18
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x19 Term))
 (! (and (HasType @x19
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(42,16-42,65); use=FStar.Calc.fsti(42,16-42,65)
(exists ((@x20 Term))
 (! (and (HasType @x20
(FStar.Pervasives.Native.tuple3 (FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(FStar.Set.set (Sec2.HIFC.loc Dummy_value))
(Prims.list Sec2.HIFC.flow)))

;; def=FStar.Calc.fsti(40,12-40,18); use=FStar.Calc.fsti(40,12-40,18)
(= @x15
@x20)


;; def=Sec2.HIFC.fst(518,4-518,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x20
@x19)
)
 
;;no pats
:qid @query.57))


;; def=Sec2.HIFC.fst(520,4-520,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x19
@x18)
)
 
;;no pats
:qid @query.56))


;; def=Sec2.HIFC.fst(524,4-524,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x18
@x17)
)
 
;;no pats
:qid @query.55))


;; def=Sec2.HIFC.fst(528,4-528,8); use=Sec2.HIFC.fst(497,2-532,3)
(= @x17
@x16)
)
 
;;no pats
:qid @query.54))
)

;; def=Sec2.HIFC.fst(516,7-516,11); use=Sec2.HIFC.fst(497,2-532,3)
(or label_14

;; def=Sec2.HIFC.fst(516,7-516,11); use=Sec2.HIFC.fst(497,2-532,3)
(= @x15
@x16)
)
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.37))
)
)
 
;;no pats
:qid @query.30))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.assoc_hst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, equation_FStar.List.Tot.Base.op_At, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.ifc_triple, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.lemma_equal_elim, lemma_FStar.Set.lemma_equal_intro, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, typing_FStar.List.Tot.Base.op_At, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Sec2.HIFC.union, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let assoc_hst


; <Start encoding let assoc_hst>

(declare-fun Sec2.HIFC.assoc_hst (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: label & label & Prims.list flow ->     _: label & label & Prims.list flow ->     _: label & label & Prims.list flow   -> Prims.unit
(declare-fun Tm_arrow_845f393943d1f903f40a99cad7836c13 () Term)
(declare-fun Sec2.HIFC.assoc_hst@tok () Term)

; </end encoding let assoc_hst>


; encoding sigelt #push-options "--warn_error -271"


; <Skipped #push-options "--warn_error -271"/>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(539,3-565,5)

(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

(declare-fun Tm_refine_c1c63d5cc68c7c904c0b757378643161 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(539,29-539,52); use=Sec2.HIFC.fst(539,29-539,52)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_c1c63d5cc68c7c904c0b757378643161))

:named refinement_kinding_Tm_refine_c1c63d5cc68c7c904c0b757378643161))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(539,29-539,52); use=Sec2.HIFC.fst(539,29-539,52)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x2))
(and (HasTypeFuel @u0
@x1
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(539,36-539,50); use=Sec2.HIFC.fst(539,36-539,50)
(not 
;; def=Sec2.HIFC.fst(539,37-539,50); use=Sec2.HIFC.fst(539,37-539,50)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x1
@x2))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x2)))
:qid refinement_interpretation_Tm_refine_c1c63d5cc68c7c904c0b757378643161))

:named refinement_interpretation_Tm_refine_c1c63d5cc68c7c904c0b757378643161))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c1c63d5cc68c7c904c0b757378643161
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(539,29-539,52); use=Sec2.HIFC.fst(539,29-539,52)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x0)))
(Valid (Prims.hasEq (Sec2.HIFC.loc Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x0))))
:qid haseqTm_refine_c1c63d5cc68c7c904c0b757378643161))

:named haseqTm_refine_c1c63d5cc68c7c904c0b757378643161))


(declare-fun Tm_refine_012dd887d11f0a9c078835e9e582dfd7 (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(540,8-542,25); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_012dd887d11f0a9c078835e9e582dfd7 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_012dd887d11f0a9c078835e9e582dfd7 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_012dd887d11f0a9c078835e9e582dfd7))

:named refinement_kinding_Tm_refine_012dd887d11f0a9c078835e9e582dfd7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(540,8-542,25); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_012dd887d11f0a9c078835e9e582dfd7 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)
(let ((@lb6 (ApplyTT @x4
@x2)))

;; def=Sec2.HIFC.fst(541,15-541,35); use=Sec2.HIFC.fst(539,3-565,5)
(= (Sec2.HIFC.sel @x2
@x3)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb6)
@x3))
))

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(539,3-565,5)
(= @x5
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_012dd887d11f0a9c078835e9e582dfd7.1))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_012dd887d11f0a9c078835e9e582dfd7 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_012dd887d11f0a9c078835e9e582dfd7))

:named refinement_interpretation_Tm_refine_012dd887d11f0a9c078835e9e582dfd7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_012dd887d11f0a9c078835e9e582dfd7
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(540,8-542,25); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_012dd887d11f0a9c078835e9e582dfd7 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_012dd887d11f0a9c078835e9e582dfd7 @x0
@x1
@x2))))
:qid haseqTm_refine_012dd887d11f0a9c078835e9e582dfd7))

:named haseqTm_refine_012dd887d11f0a9c078835e9e582dfd7))
;;;;;;;;;;;;;;;;s0: store{p s0} -> l: loc{~(FStar.Set.mem l w)}   -> FStar.Pervasives.Lemma       (ensures         ((let _, s1 = f s0 in             sel s0 l == sel s1 l)           <:           Type)) [SMTPat ()]
(declare-fun Tm_arrow_0367599c62789af1a03ca124fff55b24 (Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0367599c62789af1a03ca124fff55b24
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(539,12-542,25); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_arrow_0367599c62789af1a03ca124fff55b24 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_arrow_0367599c62789af1a03ca124fff55b24 @x0
@x1
@x2)
Tm_type))
:qid kinding_Tm_arrow_0367599c62789af1a03ca124fff55b24))

:named kinding_Tm_arrow_0367599c62789af1a03ca124fff55b24))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(539,12-542,25); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_0367599c62789af1a03ca124fff55b24 @x2
@x3
@x4))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_0367599c62789af1a03ca124fff55b24 @x2
@x3
@x4)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_0367599c62789af1a03ca124fff55b24))

:named Sec2.HIFC_pre_typing_Tm_arrow_0367599c62789af1a03ca124fff55b24))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0367599c62789af1a03ca124fff55b24
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(539,12-542,25); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_0367599c62789af1a03ca124fff55b24 @x1
@x2
@x3))
(and 
;; def=Sec2.HIFC.fst(539,12-542,25); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x3))
(HasType @x5
(Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x2)))
(HasType (ApplyTT (ApplyTT @x0
@x4)
@x5)
(Tm_refine_012dd887d11f0a9c078835e9e582dfd7 @x4
@x5
@x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x4)
@x5))
:qid Sec2.HIFC_interpretation_Tm_arrow_0367599c62789af1a03ca124fff55b24.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(539,12-542,25); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x3))
(IsTotFun (ApplyTT @x0
@x4)))
 

:pattern ((ApplyTT @x0
@x4))
:qid Sec2.HIFC_interpretation_Tm_arrow_0367599c62789af1a03ca124fff55b24.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_0367599c62789af1a03ca124fff55b24 @x1
@x2
@x3)))
:qid Sec2.HIFC_interpretation_Tm_arrow_0367599c62789af1a03ca124fff55b24))

:named Sec2.HIFC_interpretation_Tm_arrow_0367599c62789af1a03ca124fff55b24))


(declare-fun Tm_abs_aea7f1210492040ffa387c191a6301d1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_aea7f1210492040ffa387c191a6301d1
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(546,36-546,65); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_aea7f1210492040ffa387c191a6301d1 @x0
@x1
@x2)
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x2))
 

:pattern ((Tm_abs_aea7f1210492040ffa387c191a6301d1 @x0
@x1
@x2))
:qid typing_Tm_abs_aea7f1210492040ffa387c191a6301d1))

:named typing_Tm_abs_aea7f1210492040ffa387c191a6301d1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_aea7f1210492040ffa387c191a6301d1
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(546,36-546,65); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_aea7f1210492040ffa387c191a6301d1 @x3
@x4
@x5)
@x0)
@x1)
@x2)
(Prims.l_and (ApplyTT (ApplyTT (ApplyTT @x3
@x0)
@x1)
@x2)
(Sec2.HIFC.modifies @x4
@x0
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_aea7f1210492040ffa387c191a6301d1 @x3
@x4
@x5)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_aea7f1210492040ffa387c191a6301d1))

:named interpretation_Tm_abs_aea7f1210492040ffa387c191a6301d1))





(declare-fun Tm_refine_9147601266a4ae9748ca869db6f5ca70 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_9147601266a4ae9748ca869db6f5ca70 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_9147601266a4ae9748ca869db6f5ca70 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_9147601266a4ae9748ca869db6f5ca70))

:named refinement_kinding_Tm_refine_9147601266a4ae9748ca869db6f5ca70))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9147601266a4ae9748ca869db6f5ca70 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x4
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(539,3-565,5)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(539,3-565,5)
(Prims.l_and (ApplyTT (ApplyTT (ApplyTT @x2
@x3)
(FStar.Pervasives.Native.fst @x4
Sec2.HIFC.store
@x1))
(FStar.Pervasives.Native.snd @x4
Sec2.HIFC.store
@x1))
(Sec2.HIFC.modifies @x5
@x3
(FStar.Pervasives.Native.snd @x4
Sec2.HIFC.store
@x1)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9147601266a4ae9748ca869db6f5ca70 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_9147601266a4ae9748ca869db6f5ca70))

:named refinement_interpretation_Tm_refine_9147601266a4ae9748ca869db6f5ca70))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9147601266a4ae9748ca869db6f5ca70
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9147601266a4ae9748ca869db6f5ca70 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x2
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9147601266a4ae9748ca869db6f5ca70 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_9147601266a4ae9748ca869db6f5ca70))

:named haseqTm_refine_9147601266a4ae9748ca869db6f5ca70))
;;;;;;;;;;;;;;;;s0: store{p s0}   -> r:     (a & store)       { q s0 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) /\         modifies w s0 (FStar.Pervasives.Native.snd r) }
(declare-fun Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 @x0
@x1
@x2
@x3)
Tm_type))
:qid kinding_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943))

:named kinding_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 @x2
@x3
@x4
@x5))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 @x2
@x3
@x4
@x5)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943))

:named Sec2.HIFC_pre_typing_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 @x1
@x2
@x3
@x4))
(and 
;; def=Sec2.HIFC.fst(13,31-13,84); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x4))
(HasType (ApplyTT @x0
@x5)
(Tm_refine_9147601266a4ae9748ca869db6f5ca70 @x3
@x5
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x5))
:qid Sec2.HIFC_interpretation_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 @x1
@x2
@x3
@x4)))
:qid Sec2.HIFC_interpretation_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943))

:named Sec2.HIFC_interpretation_Tm_arrow_ebbab97c2c0de93167f72e0ea4214943))
(declare-fun Tm_abs_b546411220681f4285897c7783351f1e (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_b546411220681f4285897c7783351f1e
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(546,79-546,83); use=Sec2.HIFC.fst(546,79-546,83)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_abs_b546411220681f4285897c7783351f1e @x0
@x1
@x2
@x3
@x4)
(Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 @x1
@x2
@x3
@x4))
 

:pattern ((Tm_abs_b546411220681f4285897c7783351f1e @x0
@x1
@x2
@x3
@x4))
:qid typing_Tm_abs_b546411220681f4285897c7783351f1e))

:named typing_Tm_abs_b546411220681f4285897c7783351f1e))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_b546411220681f4285897c7783351f1e
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(546,79-546,83); use=Sec2.HIFC.fst(546,79-546,83)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (Tm_abs_b546411220681f4285897c7783351f1e @x1
@x2
@x3
@x4
@x5)
@x0)
(ApplyTT @x1
@x0))
 

:pattern ((ApplyTT (Tm_abs_b546411220681f4285897c7783351f1e @x1
@x2
@x3
@x4
@x5)
@x0))
:qid interpretation_Tm_abs_b546411220681f4285897c7783351f1e))

:named interpretation_Tm_abs_b546411220681f4285897c7783351f1e))






















(declare-fun Tm_refine_cbb04bd239028cb47ed678f4ac7578ed (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(549,8-551,49); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_refine_cbb04bd239028cb47ed678f4ac7578ed @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type)
 

:pattern ((HasType (Tm_refine_cbb04bd239028cb47ed678f4ac7578ed @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
:qid refinement_kinding_Tm_refine_cbb04bd239028cb47ed678f4ac7578ed))

:named refinement_kinding_Tm_refine_cbb04bd239028cb47ed678f4ac7578ed))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(549,8-551,49); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cbb04bd239028cb47ed678f4ac7578ed @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(539,3-565,5)
(and 
;; def=Sec2.HIFC.fst(549,24-549,40); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Sec2.HIFC.fst(549,26-549,39); use=Sec2.HIFC.fst(539,3-565,5)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x2
@x3))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=Sec2.HIFC.fst(550,23-550,50); use=Sec2.HIFC.fst(539,3-565,5)
(Valid 
;; def=Sec2.HIFC.fst(550,23-550,50); use=Sec2.HIFC.fst(539,3-565,5)
(Sec2.HIFC.does_not_read_loc @x4
@x5
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x6
@x7
@x4)
(Tm_abs_b546411220681f4285897c7783351f1e @x8
@x7
@x4
@x6
@x5)
@x3
@x2
@x9)
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(539,3-565,5)
(= @x10
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_cbb04bd239028cb47ed678f4ac7578ed.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cbb04bd239028cb47ed678f4ac7578ed @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid refinement_interpretation_Tm_refine_cbb04bd239028cb47ed678f4ac7578ed))

:named refinement_interpretation_Tm_refine_cbb04bd239028cb47ed678f4ac7578ed))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cbb04bd239028cb47ed678f4ac7578ed
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(549,8-551,49); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cbb04bd239028cb47ed678f4ac7578ed @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cbb04bd239028cb47ed678f4ac7578ed @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))))
:qid haseqTm_refine_cbb04bd239028cb47ed678f4ac7578ed))

:named haseqTm_refine_cbb04bd239028cb47ed678f4ac7578ed))
;;;;;;;;;;;;;;;;l: loc -> s: store{p s}   -> FStar.Pervasives.Lemma (requires ~(FStar.Set.mem l r))       (ensures does_not_read_loc (fun s0 -> f s0) r l s)       [SMTPat (does_not_read_loc (fun s0 -> f s0) r l s)]
(declare-fun Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(548,23-551,49); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid kinding_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750))

:named kinding_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(548,23-551,49); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750 @x2
@x3
@x4
@x5
@x6
@x7))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750))

:named Sec2.HIFC_pre_typing_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(548,23-551,49); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750 @x1
@x2
@x3
@x4
@x5
@x6))
(and 
;; def=Sec2.HIFC.fst(548,23-551,49); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Sec2.HIFC.fst(549,26-549,39); use=Sec2.HIFC.fst(539,3-565,5)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x7
@x6))
)

(HasType @x7
(Sec2.HIFC.loc Dummy_value))
(HasType @x8
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x5)))
(HasType (ApplyTT (ApplyTT @x0
@x7)
@x8)
(Tm_refine_cbb04bd239028cb47ed678f4ac7578ed @x7
@x6
@x4
@x5
@x3
@x2
@x1
@x8)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x7)
@x8))
:qid Sec2.HIFC_interpretation_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(548,23-551,49); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Sec2.HIFC.loc Dummy_value))
(IsTotFun (ApplyTT @x0
@x7)))
 

:pattern ((ApplyTT @x0
@x7))
:qid Sec2.HIFC_interpretation_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750 @x1
@x2
@x3
@x4
@x5
@x6)))
:qid Sec2.HIFC_interpretation_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750))

:named Sec2.HIFC_interpretation_Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750))




























(declare-fun Tm_refine_f2e6756bef020026f7411897831c3a06 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(558,8-561,37); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_refine_f2e6756bef020026f7411897831c3a06 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type)
 

:pattern ((HasType (Tm_refine_f2e6756bef020026f7411897831c3a06 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_type))
:qid refinement_kinding_Tm_refine_f2e6756bef020026f7411897831c3a06))

:named refinement_kinding_Tm_refine_f2e6756bef020026f7411897831c3a06))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(558,8-561,37); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f2e6756bef020026f7411897831c3a06 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(539,3-565,5)
(and 
;; def=Sec2.HIFC.fst(559,18-559,40); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Sec2.HIFC.fst(559,19-559,40); use=Sec2.HIFC.fst(539,3-565,5)
(Valid 
;; def=Sec2.HIFC.fst(559,19-559,40); use=Sec2.HIFC.fst(539,3-565,5)
(Sec2.HIFC.has_flow @x2
@x3
@x4)
)
)


;; def=Sec2.HIFC.fst(559,44-559,52); use=Sec2.HIFC.fst(539,3-565,5)
(not (= @x2
@x3))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.unit)

;; def=Sec2.HIFC.fst(560,17-560,39); use=Sec2.HIFC.fst(539,3-565,5)
(Valid 
;; def=Sec2.HIFC.fst(560,17-560,39); use=Sec2.HIFC.fst(539,3-565,5)
(Sec2.HIFC.no_leakage @x5
@x6
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x7
@x8
@x5)
(Tm_abs_b546411220681f4285897c7783351f1e @x9
@x8
@x5
@x7
@x6)
@x2
@x3)
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(539,3-565,5)
(= @x10
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_f2e6756bef020026f7411897831c3a06.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f2e6756bef020026f7411897831c3a06 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
:qid refinement_interpretation_Tm_refine_f2e6756bef020026f7411897831c3a06))

:named refinement_interpretation_Tm_refine_f2e6756bef020026f7411897831c3a06))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f2e6756bef020026f7411897831c3a06
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(558,8-561,37); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f2e6756bef020026f7411897831c3a06 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f2e6756bef020026f7411897831c3a06 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))))
:qid haseqTm_refine_f2e6756bef020026f7411897831c3a06))

:named haseqTm_refine_f2e6756bef020026f7411897831c3a06))
;;;;;;;;;;;;;;;;from: loc -> to: loc   -> FStar.Pervasives.Lemma (requires ~(has_flow from to fs) /\ from <> to)       (ensures no_leakage (fun s0 -> f s0) from to)       [SMTPat (has_flow from to fs)]
(declare-fun Tm_arrow_cb738f1749d0cec8fc68f515881221ab (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cb738f1749d0cec8fc68f515881221ab
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(79,47-561,37); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_arrow_cb738f1749d0cec8fc68f515881221ab @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_arrow_cb738f1749d0cec8fc68f515881221ab @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid kinding_Tm_arrow_cb738f1749d0cec8fc68f515881221ab))

:named kinding_Tm_arrow_cb738f1749d0cec8fc68f515881221ab))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(79,47-561,37); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_cb738f1749d0cec8fc68f515881221ab @x2
@x3
@x4
@x5
@x6
@x7))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_cb738f1749d0cec8fc68f515881221ab @x2
@x3
@x4
@x5
@x6
@x7)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_cb738f1749d0cec8fc68f515881221ab))

:named Sec2.HIFC_pre_typing_Tm_arrow_cb738f1749d0cec8fc68f515881221ab))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cb738f1749d0cec8fc68f515881221ab
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(79,47-561,37); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_cb738f1749d0cec8fc68f515881221ab @x1
@x2
@x3
@x4
@x5
@x6))
(and 
;; def=Sec2.HIFC.fst(79,47-561,37); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and 
;; def=Sec2.HIFC.fst(559,18-559,40); use=Sec2.HIFC.fst(539,3-565,5)
(not 
;; def=Sec2.HIFC.fst(559,19-559,40); use=Sec2.HIFC.fst(539,3-565,5)
(Valid 
;; def=Sec2.HIFC.fst(559,19-559,40); use=Sec2.HIFC.fst(539,3-565,5)
(Sec2.HIFC.has_flow @x7
@x8
@x6)
)
)


;; def=Sec2.HIFC.fst(559,44-559,52); use=Sec2.HIFC.fst(539,3-565,5)
(not (= @x7
@x8))

(HasType @x7
(Sec2.HIFC.loc Dummy_value))
(HasType @x8
(Sec2.HIFC.loc Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x7)
@x8)
(Tm_refine_f2e6756bef020026f7411897831c3a06 @x7
@x8
@x6
@x5
@x4
@x3
@x2
@x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x7)
@x8))
:qid Sec2.HIFC_interpretation_Tm_arrow_cb738f1749d0cec8fc68f515881221ab.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(79,47-561,37); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x7 Term))
 (! (implies (HasType @x7
(Sec2.HIFC.loc Dummy_value))
(IsTotFun (ApplyTT @x0
@x7)))
 

:pattern ((ApplyTT @x0
@x7))
:qid Sec2.HIFC_interpretation_Tm_arrow_cb738f1749d0cec8fc68f515881221ab.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_cb738f1749d0cec8fc68f515881221ab @x1
@x2
@x3
@x4
@x5
@x6)))
:qid Sec2.HIFC_interpretation_Tm_arrow_cb738f1749d0cec8fc68f515881221ab))

:named Sec2.HIFC_interpretation_Tm_arrow_cb738f1749d0cec8fc68f515881221ab))















































































; Encoding query formula : forall (a: Type)
;   (r: Sec2.HIFC.label)
;   (w: Sec2.HIFC.label)
;   (fs: Sec2.HIFC.flows)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hifc a r w fs p q).
;   (*  - Could not prove post-condition
; *)
;   (forall (s0: Sec2.HIFC.store{p s0}) (l: Sec2.HIFC.loc{~(FStar.Set.mem l w)}).
;       (*  - Could not prove post-condition
; *)
;       forall (p: Prims.pure_post Prims.unit).
;         (forall (pure_result: Prims.unit).
;             (let _, s1 = f s0 in
;               Sec2.HIFC.sel s0 l == Sec2.HIFC.sel s1 l) ==>
;             p pure_result) ==>
;         (forall (any_result: Prims.unit). p any_result)) /\
;   (forall (any_result:
;       (s0: Sec2.HIFC.store{p s0} -> l: Sec2.HIFC.loc{~(FStar.Set.mem l w)}
;           -> FStar.Pervasives.Lemma
;               (ensures
;                 ((let _, s1 = f s0 in
;                     Sec2.HIFC.sel s0 l == Sec2.HIFC.sel s1 l)
;                   <:
;                   Type0)) [SMTPat ()])).
;       (forall (s0: Sec2.HIFC.store{p s0}) (l: Sec2.HIFC.loc{~(FStar.Set.mem l w)}). {:pattern ()}
;           Prims.auto_squash (let _, s1 = f s0 in
;               Sec2.HIFC.sel s0 l == Sec2.HIFC.sel s1 l)) ==>
;       (forall (s0: Sec2.HIFC.store{p s0}).
;           (*  - Could not prove post-condition
; *)
;           q s0 (FStar.Pervasives.Native.fst (f s0)) (FStar.Pervasives.Native.snd (f s0)) ==>
;           q s0 (FStar.Pervasives.Native.fst (f s0)) (FStar.Pervasives.Native.snd (f s0)) /\
;           Sec2.HIFC.modifies w s0 (FStar.Pervasives.Native.snd (f s0))) /\
;       (forall (any_result:
;           Sec2.HIFC.hst a p (fun s0 x s1 -> q s0 x s1 /\ Sec2.HIFC.modifies w s0 s1)).
;           (fun s0 -> f s0) == any_result ==>
;           Sec2.HIFC.reads f r /\
;           (forall (pure_result: Prims.unit).
;               Sec2.HIFC.reads f r ==>
;               (forall (l: Sec2.HIFC.loc) (s: Sec2.HIFC.store{p s}).
;                   (*  - Could not prove post-condition
; *)
;                   forall (p: Prims.pure_post Prims.unit).
;                     ~(FStar.Set.mem l r) /\
;                     (forall (pure_result: Prims.unit).
;                         Sec2.HIFC.does_not_read_loc (fun s0 -> f s0) r l s ==> p pure_result) ==>
;                     ~(FStar.Set.mem l r) /\
;                     (forall (any_result: Sec2.HIFC.loc).
;                         l == any_result ==>
;                         Sec2.HIFC.reads (fun s0 -> f s0) r /\
;                         (forall (pure_result: Prims.unit).
;                             Sec2.HIFC.does_not_read_loc (fun s0 -> f s0) r l s ==>
;                             Sec2.HIFC.does_not_read_loc f r l s /\
;                             (forall (pure_result: Prims.unit).
;                                 Sec2.HIFC.does_not_read_loc f r l s ==> p pure_result)))) /\
;               (forall (any_result:
;                   (l: Sec2.HIFC.loc -> s: Sec2.HIFC.store{p s}
;                       -> FStar.Pervasives.Lemma (requires ~(FStar.Set.mem l r))
;                           (ensures Sec2.HIFC.does_not_read_loc (fun s0 -> f s0) r l s)
;                           [SMTPat (Sec2.HIFC.does_not_read_loc (fun s0 -> f s0) r l s)])).
;                   (forall (l: Sec2.HIFC.loc) (s: Sec2.HIFC.store{p s}).
;                       {:pattern Sec2.HIFC.does_not_read_loc (fun s0 -> f s0) r l s}
;                       ~(FStar.Set.mem l r) ==> Sec2.HIFC.does_not_read_loc (fun s0 -> f s0) r l s) ==>
;                   Sec2.HIFC.reads (fun s0 -> f s0) r /\
;                   (forall (pure_result: Prims.unit).
;                       Sec2.HIFC.reads (fun s0 -> f s0) r ==>
;                       Sec2.HIFC.writes (fun s0 -> f s0) w /\
;                       (forall (pure_result: Prims.unit).
;                           Sec2.HIFC.writes (fun s0 -> f s0) w ==>
;                           (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc).
;                               (*  - Could not prove post-condition
; *)
;                               forall (p: Prims.pure_post Prims.unit).
;                                 ~(Sec2.HIFC.has_flow from to fs) /\ from <> to /\
;                                 (forall (pure_result: Prims.unit).
;                                     Sec2.HIFC.no_leakage (fun s0 -> f s0) from to ==> p pure_result) ==>
;                                 Sec2.HIFC.no_leakage f from to /\
;                                 (forall (pure_result: Prims.unit).
;                                     Sec2.HIFC.no_leakage f from to ==> p pure_result)) /\
;                           (forall (any_result:
;                               (from: Sec2.HIFC.loc -> to: Sec2.HIFC.loc
;                                   -> FStar.Pervasives.Lemma
;                                       (requires ~(Sec2.HIFC.has_flow from to fs) /\ from <> to)
;                                       (ensures Sec2.HIFC.no_leakage (fun s0 -> f s0) from to)
;                                       [SMTPat (Sec2.HIFC.has_flow from to fs)])).
;                               (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc).
;                                   {:pattern Sec2.HIFC.has_flow from to fs}
;                                   ~(Sec2.HIFC.has_flow from to fs) /\ from <> to ==>
;                                   Sec2.HIFC.no_leakage (fun s0 -> f s0) from to) ==>
;                               Sec2.HIFC.respects (fun s0 -> f s0) fs /\
;                               (forall (pure_result: Prims.unit).
;                                   Sec2.HIFC.respects (fun s0 -> f s0) fs ==>
;                                   Sec2.HIFC.reads (fun s0 -> f s0) r /\
;                                   Sec2.HIFC.writes (fun s0 -> f s0) w /\
;                                   Sec2.HIFC.respects (fun s0 -> f s0) fs))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let frame`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flows)
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0))
(HasType @x6
(Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5)))

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(539,3-565,5)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x4))
(HasType @x8
(Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x2)))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(544,8-544,10)
(forall ((@x10 Term))
 (! (implies (and (or label_1
(HasType @x10
Prims.unit))
(let ((@lb11 (ApplyTT @x6
@x7)))

;; def=Sec2.HIFC.fst(541,15-541,35); use=Sec2.HIFC.fst(544,8-544,10)
(or label_2

;; def=Sec2.HIFC.fst(541,15-541,35); use=Sec2.HIFC.fst(544,8-544,10)
(= (Sec2.HIFC.sel @x7
@x8)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb11)
@x8))
)
))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(544,8-544,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(544,8-544,10)
(ApplyTT @x9
@x10)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(544,8-544,10)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(544,8-544,10)
(ApplyTT @x9
@x10)
)
)
:qid @query.3))
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x10 Term))
 (! (implies (HasType @x10
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(539,3-565,5)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(539,3-565,5)
(ApplyTT @x9
@x10)
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Tm_arrow_0367599c62789af1a03ca124fff55b24 @x6
@x2
@x4))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x4))
(HasType @x9
(Tm_refine_c1c63d5cc68c7c904c0b757378643161 @x2)))
(let ((@lb10 (ApplyTT @x6
@x8)))

;; def=Sec2.HIFC.fst(541,15-541,35); use=Sec2.HIFC.fst(541,15-541,35)
(= (Sec2.HIFC.sel @x8
@x9)
(Sec2.HIFC.sel (FStar.Pervasives.Native.Mktuple2__2 @lb10)
@x9))
))
 

:pattern (Tm_unit)
:qid @query.6))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(539,3-565,5)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x4))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(546,79-546,83)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(546,79-546,83)
(ApplyTT (ApplyTT (ApplyTT @x5
@x8)
(FStar.Pervasives.Native.fst @x0
Sec2.HIFC.store
(ApplyTT @x6
@x8)))
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(ApplyTT @x6
@x8)))
)
)

;; def=Sec2.HIFC.fst(546,36-546,65); use=Sec2.HIFC.fst(546,79-546,83)
(and 
;; def=Sec2.HIFC.fst(546,36-546,45); use=Sec2.HIFC.fst(546,79-546,83)
(or label_3

;; def=Sec2.HIFC.fst(546,36-546,45); use=Sec2.HIFC.fst(546,79-546,83)
(Valid 
;; def=Sec2.HIFC.fst(546,36-546,45); use=Sec2.HIFC.fst(546,79-546,83)
(ApplyTT (ApplyTT (ApplyTT @x5
@x8)
(FStar.Pervasives.Native.fst @x0
Sec2.HIFC.store
(ApplyTT @x6
@x8)))
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(ApplyTT @x6
@x8)))
)
)


;; def=Sec2.HIFC.fst(546,49-546,65); use=Sec2.HIFC.fst(546,79-546,83)
(or label_4

;; def=Sec2.HIFC.fst(546,49-546,65); use=Sec2.HIFC.fst(546,79-546,83)
(Valid 
;; def=Sec2.HIFC.fst(546,49-546,65); use=Sec2.HIFC.fst(546,79-546,83)
(Sec2.HIFC.modifies @x2
@x8
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(ApplyTT @x6
@x8)))
)
)
)
)
 
;;no pats
:qid @query.7))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Sec2.HIFC.hst @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)))

;; def=Sec2.HIFC.fst(546,8-546,83); use=Sec2.HIFC.fst(546,8-546,83)
(= (Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x8)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(547,4-547,10)
(and 
;; def=Sec2.HIFC.fst(547,11-547,22); use=Sec2.HIFC.fst(547,4-547,10)
(or label_5

;; def=Sec2.HIFC.fst(547,11-547,22); use=Sec2.HIFC.fst(547,4-547,10)
(Valid 
;; def=Sec2.HIFC.fst(547,11-547,22); use=Sec2.HIFC.fst(547,4-547,10)
(Sec2.HIFC.reads @x0
@x4
@x5
@x6
@x1)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(547,4-547,10)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Prims.unit)

;; def=Sec2.HIFC.fst(547,11-547,22); use=Sec2.HIFC.fst(547,4-547,10)
(Valid 
;; def=Sec2.HIFC.fst(547,11-547,22); use=Sec2.HIFC.fst(547,4-547,10)
(Sec2.HIFC.reads @x0
@x4
@x5
@x6
@x1)
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(539,3-565,5)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x10
(Sec2.HIFC.loc Dummy_value))
(HasType @x11
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x4)))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(549,24-549,40); use=Sec2.HIFC.fst(552,8-553,42)
(not 
;; def=Sec2.HIFC.fst(549,26-549,39); use=Sec2.HIFC.fst(552,8-553,42)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x10
@x1))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(552,8-553,42)
(forall ((@x13 Term))
 (! (implies (and (or label_6
(HasType @x13
Prims.unit))

;; def=Sec2.HIFC.fst(550,23-550,50); use=Sec2.HIFC.fst(552,8-553,42)
(or label_7

;; def=Sec2.HIFC.fst(550,23-550,50); use=Sec2.HIFC.fst(552,8-553,42)
(Valid 
;; def=Sec2.HIFC.fst(550,23-550,50); use=Sec2.HIFC.fst(552,8-553,42)
(Sec2.HIFC.does_not_read_loc @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x1
@x10
@x11)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(552,8-553,42)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(552,8-553,42)
(ApplyTT @x12
@x13)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(552,8-553,42)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(552,8-553,42)
(ApplyTT @x12
@x13)
)
)
:qid @query.12))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(552,8-553,42)
(and 
;; def=Sec2.HIFC.fst(149,73-149,89); use=Sec2.HIFC.fst(552,39-552,40)
(or label_8

;; def=Sec2.HIFC.fst(149,73-149,89); use=Sec2.HIFC.fst(552,39-552,40)
(not 
;; def=Sec2.HIFC.fst(149,74-149,89); use=Sec2.HIFC.fst(552,39-552,40)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x10
@x1))
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(552,8-553,42)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(149,67-548,22); use=Sec2.HIFC.fst(552,8-553,42)
(= @x10
@x13)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(552,8-552,34)
(and 
;; def=Sec2.HIFC.fst(151,14-151,25); use=Sec2.HIFC.fst(552,8-552,34)
(or label_9

;; def=Sec2.HIFC.fst(151,14-151,25); use=Sec2.HIFC.fst(552,8-552,34)
(Valid 
;; def=Sec2.HIFC.fst(151,14-151,25); use=Sec2.HIFC.fst(552,8-552,34)
(Sec2.HIFC.reads @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x1)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(552,8-552,34)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=Sec2.HIFC.fst(152,13-152,41); use=Sec2.HIFC.fst(552,8-552,34)
(Valid 
;; def=Sec2.HIFC.fst(152,13-152,41); use=Sec2.HIFC.fst(552,8-552,34)
(Sec2.HIFC.does_not_read_loc @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x1
@x10
@x11)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(553,8-553,14)
(and 
;; def=Sec2.HIFC.fst(553,15-553,42); use=Sec2.HIFC.fst(553,8-553,14)
(or label_10

;; def=Sec2.HIFC.fst(553,15-553,42); use=Sec2.HIFC.fst(553,8-553,14)
(Valid 
;; def=Sec2.HIFC.fst(553,15-553,42); use=Sec2.HIFC.fst(553,8-553,14)
(Sec2.HIFC.does_not_read_loc @x0
@x4
@x5
@x6
@x1
@x10
@x11)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(553,8-553,14)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Prims.unit)

;; def=Sec2.HIFC.fst(553,15-553,42); use=Sec2.HIFC.fst(553,8-553,14)
(Valid 
;; def=Sec2.HIFC.fst(553,15-553,42); use=Sec2.HIFC.fst(553,8-553,14)
(Sec2.HIFC.does_not_read_loc @x0
@x4
@x5
@x6
@x1
@x10
@x11)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(553,8-553,14)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(553,8-553,14)
(ApplyTT @x12
@x15)
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Tm_arrow_d07d2d4a9c2e420f8147da8845f2c750 @x6
@x2
@x5
@x0
@x4
@x1))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x11
(Sec2.HIFC.loc Dummy_value))
(HasType @x12
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x4))

;; def=Sec2.HIFC.fst(549,24-549,40); use=Sec2.HIFC.fst(549,24-549,40)
(not 
;; def=Sec2.HIFC.fst(549,26-549,39); use=Sec2.HIFC.fst(549,26-549,39)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x11
@x1))
)
)

;; def=Sec2.HIFC.fst(550,23-550,50); use=Sec2.HIFC.fst(550,23-550,50)
(Valid 
;; def=Sec2.HIFC.fst(550,23-550,50); use=Sec2.HIFC.fst(550,23-550,50)
(Sec2.HIFC.does_not_read_loc @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x1
@x11
@x12)
)
)
 

:pattern ((Sec2.HIFC.does_not_read_loc @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x1
@x11
@x12))
:qid @query.17))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(555,4-555,10)
(and 
;; def=Sec2.HIFC.fst(555,11-555,22); use=Sec2.HIFC.fst(555,4-555,10)
(or label_11

;; def=Sec2.HIFC.fst(555,11-555,22); use=Sec2.HIFC.fst(555,4-555,10)
(Valid 
;; def=Sec2.HIFC.fst(555,11-555,22); use=Sec2.HIFC.fst(555,4-555,10)
(Sec2.HIFC.reads @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x1)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(555,4-555,10)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.unit)

;; def=Sec2.HIFC.fst(555,11-555,22); use=Sec2.HIFC.fst(555,4-555,10)
(Valid 
;; def=Sec2.HIFC.fst(555,11-555,22); use=Sec2.HIFC.fst(555,4-555,10)
(Sec2.HIFC.reads @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x1)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(556,4-556,10)
(and 
;; def=Sec2.HIFC.fst(556,11-556,23); use=Sec2.HIFC.fst(556,4-556,10)
(or label_12

;; def=Sec2.HIFC.fst(556,11-556,23); use=Sec2.HIFC.fst(556,4-556,10)
(Valid 
;; def=Sec2.HIFC.fst(556,11-556,23); use=Sec2.HIFC.fst(556,4-556,10)
(Sec2.HIFC.writes @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(556,4-556,10)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.unit)

;; def=Sec2.HIFC.fst(556,11-556,23); use=Sec2.HIFC.fst(556,4-556,10)
(Valid 
;; def=Sec2.HIFC.fst(556,11-556,23); use=Sec2.HIFC.fst(556,4-556,10)
(Sec2.HIFC.writes @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x2)
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(539,3-565,5)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x13
(Sec2.HIFC.loc Dummy_value))
(HasType @x14
(Sec2.HIFC.loc Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(559,18-559,40); use=Sec2.HIFC.fst(562,8-562,37)
(not 
;; def=Sec2.HIFC.fst(559,19-559,40); use=Sec2.HIFC.fst(562,8-562,37)
(Valid 
;; def=Sec2.HIFC.fst(559,19-559,40); use=Sec2.HIFC.fst(562,8-562,37)
(Sec2.HIFC.has_flow @x13
@x14
@x3)
)
)


;; def=Sec2.HIFC.fst(559,44-559,52); use=Sec2.HIFC.fst(562,8-562,37)
(not (= @x13
@x14))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(562,8-562,37)
(forall ((@x16 Term))
 (! (implies (and (or label_13
(HasType @x16
Prims.unit))

;; def=Sec2.HIFC.fst(560,17-560,39); use=Sec2.HIFC.fst(562,8-562,37)
(or label_14

;; def=Sec2.HIFC.fst(560,17-560,39); use=Sec2.HIFC.fst(562,8-562,37)
(Valid 
;; def=Sec2.HIFC.fst(560,17-560,39); use=Sec2.HIFC.fst(562,8-562,37)
(Sec2.HIFC.no_leakage @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x13
@x14)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(562,8-562,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(562,8-562,37)
(ApplyTT @x15
@x16)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(562,8-562,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(562,8-562,37)
(ApplyTT @x15
@x16)
)
)
:qid @query.22))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(562,8-562,37)
(and 
;; def=Sec2.HIFC.fst(562,15-562,37); use=Sec2.HIFC.fst(562,15-562,37)
(or label_15

;; def=Sec2.HIFC.fst(562,15-562,37); use=Sec2.HIFC.fst(562,15-562,37)
(Valid 
;; def=Sec2.HIFC.fst(562,15-562,37); use=Sec2.HIFC.fst(562,15-562,37)
(Sec2.HIFC.no_leakage @x0
@x4
@x5
@x6
@x13
@x14)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(562,8-562,37)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=Sec2.HIFC.fst(562,15-562,37); use=Sec2.HIFC.fst(562,8-562,14)
(Valid 
;; def=Sec2.HIFC.fst(562,15-562,37); use=Sec2.HIFC.fst(562,8-562,14)
(Sec2.HIFC.no_leakage @x0
@x4
@x5
@x6
@x13
@x14)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(562,8-562,37)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(562,8-562,37)
(ApplyTT @x15
@x16)
)
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Tm_arrow_cb738f1749d0cec8fc68f515881221ab @x6
@x2
@x5
@x4
@x0
@x3))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(539,3-565,5)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
(Sec2.HIFC.loc Dummy_value))
(HasType @x15
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(559,18-559,40); use=Sec2.HIFC.fst(559,18-559,40)
(not 
;; def=Sec2.HIFC.fst(559,19-559,40); use=Sec2.HIFC.fst(559,19-559,40)
(Valid 
;; def=Sec2.HIFC.fst(559,19-559,40); use=Sec2.HIFC.fst(559,19-559,40)
(Sec2.HIFC.has_flow @x14
@x15
@x3)
)
)


;; def=Sec2.HIFC.fst(559,44-559,52); use=Sec2.HIFC.fst(559,44-559,52)
(not (= @x14
@x15))
)

;; def=Sec2.HIFC.fst(560,17-560,39); use=Sec2.HIFC.fst(560,17-560,39)
(Valid 
;; def=Sec2.HIFC.fst(560,17-560,39); use=Sec2.HIFC.fst(560,17-560,39)
(Sec2.HIFC.no_leakage @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x14
@x15)
)
)
 

:pattern ((Sec2.HIFC.has_flow @x14
@x15
@x3))
:qid @query.25))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(564,4-564,10)
(and 
;; def=Sec2.HIFC.fst(564,11-564,26); use=Sec2.HIFC.fst(564,4-564,10)
(or label_16

;; def=Sec2.HIFC.fst(564,11-564,26); use=Sec2.HIFC.fst(564,4-564,10)
(Valid 
;; def=Sec2.HIFC.fst(564,11-564,26); use=Sec2.HIFC.fst(564,4-564,10)
(Sec2.HIFC.respects @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x3)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(564,4-564,10)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=Sec2.HIFC.fst(564,11-564,26); use=Sec2.HIFC.fst(564,4-564,10)
(Valid 
;; def=Sec2.HIFC.fst(564,11-564,26); use=Sec2.HIFC.fst(564,4-564,10)
(Sec2.HIFC.respects @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x3)
)
)

;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(565,4-565,5)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(565,4-565,5)
(or label_17

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(565,4-565,5)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(565,4-565,5)
(Sec2.HIFC.reads @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x1)
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(565,4-565,5)
(or label_18

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(565,4-565,5)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(565,4-565,5)
(Sec2.HIFC.writes @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x2)
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(565,4-565,5)
(or label_19

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(565,4-565,5)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(565,4-565,5)
(Sec2.HIFC.respects @x0
@x4
(Tm_abs_aea7f1210492040ffa387c191a6301d1 @x5
@x2
@x0)
(Tm_abs_b546411220681f4285897c7783351f1e @x6
@x2
@x0
@x5
@x4)
@x3)
)
)
)
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.24))
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.9))
)
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.frame, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Sec2.HIFC_interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.does_not_read_loc, equation_Sec2.HIFC.does_not_read_loc_v, equation_Sec2.HIFC.hifc, equation_Sec2.HIFC.hst, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, interpretation_Tm_abs_b546411220681f4285897c7783351f1e, proj_equation_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_c1c63d5cc68c7c904c0b757378643161, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let frame


; <Start encoding let frame>

(declare-fun Sec2.HIFC.frame (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_aea7f1210492040ffa387c191a6301d1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> r: label -> w: label -> fs: flows -> f: hifc a r w fs p q   -> hifc a r w fs p (fun s0 x s1 -> q s0 x s1 /\ modifies w s0 s1)
(declare-fun Tm_arrow_ebd1b9c044307e008c1179976c8862cd () Term)
(declare-fun Sec2.HIFC.frame@tok () Term)




(declare-fun Tm_refine_9147601266a4ae9748ca869db6f5ca70 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s0: store{p s0}   -> r:     (a & store)       { q s0 (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) /\         modifies w s0 (FStar.Pervasives.Native.snd r) }
(declare-fun Tm_arrow_ebbab97c2c0de93167f72e0ea4214943 (Term Term Term Term) Term)
(declare-fun Tm_abs_b546411220681f4285897c7783351f1e (Term Term Term Term Term) Term)

; </end encoding let frame>


; encoding sigelt #pop-options


; <Skipped #pop-options/>


; encoding sigelt let bind


; <Start encoding let bind>




(declare-fun Sec2.HIFC.bind (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)




(declare-fun Tm_abs_f7e222c8a1b256944e317c2e1858cb19 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_81352b41955f7435d065c56b33adc158 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_889e5f64232ff2016b5b868b355f1762 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_e1151eb7f7460125b13ec037482afc11 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_dd969c89f73db3bba9c66583f31547e1 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2d87a9a365c95c9c6cb1b5d2a36665ec (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type ->     b: Type ->     r0: label ->     w0: label ->     fs0: flows ->     p: pre ->     q: post a ->     r1: label ->     w1: label ->     fs1: flows ->     r: (_: a -> pre) ->     s: (_: a -> post b) ->     x: hifc a r0 w0 fs0 p q ->     y: (x: a -> hifc b r1 w1 fs1 (r x) (s x))   -> hifc b       (union r0 r1)       (union w0 w1)       (fs0 @ add_source r0 ((bot, w1) :: fs1))       (fun s0 -> p s0 /\ (forall (x: a) (s1: store). q s0 x s1 /\ modifies w0 s0 s1 ==> r x s1))       (fun s0 r s2 ->           exists (x: a) (s1: store).             q s0 x s1 /\ modifies w0 s0 s1 /\ s x s1 r s2 /\ modifies w1 s1 s2)
(declare-fun Tm_arrow_019dd3bc2fb445c391a5accf66375bde () Term)
(declare-fun Sec2.HIFC.bind@tok () Term)



















;;;;;;;;;;;;;;;;a: a -> s0: store -> x: b -> s1: store -> Type
(declare-fun Tm_arrow_9f79f3cf62c5fd9f7a579a38d591b428 (Term Term) Term)
(declare-fun Tm_abs_b66282cc8218c5159a8e82d76c1bd0d6 (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;a: a -> hifc b r1 w1 fs1 (r a) (fun s0 x s1 -> s a s0 x s1 /\ modifies w1 s0 s1)
(declare-fun Tm_arrow_884af5a216de409a755938c744a23974 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_abs_9131ba0be0edbde848d7d87cf4a2a379 (Term Term Term Term Term Term Term Term) Term)

; </end encoding let bind>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(603,4-603,5)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Type)
;   (w: Sec2.HIFC.label)
;   (r: Sec2.HIFC.label)
;   (f: Sec2.HIFC.flow)
;   (fs: Prims.list Sec2.HIFC.flow)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (c: Sec2.HIFC.hifc a r w (f :: fs) p q).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (Sec2.HIFC.hifc a r w fs p q)).
;     (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc) (v: Prims.int).
;         Sec2.HIFC.has_flow_1 from to f /\ from <> to ==>
;         (forall (s0: Sec2.HIFC.store) (x: a) (x': a) (s1: Sec2.HIFC.store) (s1': Sec2.HIFC.store).
;             p s0 /\ p (Sec2.HIFC.upd s0 from v) /\ q s0 x s1 /\ Sec2.HIFC.modifies w s0 s1 /\
;             q (Sec2.HIFC.upd s0 from v) x' s1' /\ Sec2.HIFC.modifies w (Sec2.HIFC.upd s0 from v) s1' ==>
;             Sec2.HIFC.sel s1 to == Sec2.HIFC.sel s1' to)) /\
;     (forall (pure_result: Sec2.HIFC.hifc a r w fs p q). Prims.auto_squash (p pure_result)) ==>
;     (Sec2.HIFC.reads c r /\ Sec2.HIFC.writes c w /\ Sec2.HIFC.respects c (f :: fs) ==>
;       Sec2.HIFC.reads c r /\ Sec2.HIFC.writes c w /\ Sec2.HIFC.respects c fs) /\
;     (forall (any_result: Sec2.HIFC.hifc a r w (f :: fs) p q).
;         any_result == c ==>
;         (forall (return_val: Sec2.HIFC.hifc a r w fs p q). return_val == any_result ==> p return_val
;         ))


; Context: While encoding a query
; While typechecking the top-level declaration `let refine_flow_hifc`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flow)
(HasType @x4
(Prims.list Sec2.HIFC.flow))
(HasType @x5
Sec2.HIFC.pre)
(HasType @x6
(Sec2.HIFC.post @x0))
(HasType @x7
(Sec2.HIFC.hifc @x0
@x2
@x1
(Prims.Cons Sec2.HIFC.flow
@x3
@x4)
@x5
@x6)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post (Sec2.HIFC.hifc @x0
@x2
@x1
@x4
@x5
@x6)))

;; def=Sec2.HIFC.fst(591,11-601,40); use=Sec2.HIFC.fst(603,4-603,5)
(forall ((@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x9
(Sec2.HIFC.loc Dummy_value))
(HasType @x10
(Sec2.HIFC.loc Dummy_value))
(HasType @x11
Prims.int)

;; def=Sec2.HIFC.fst(592,13-592,33); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(592,13-592,33); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.has_flow_1 @x9
@x10
@x3)
)


;; def=Sec2.HIFC.fst(593,13-593,23); use=Sec2.HIFC.fst(603,4-603,5)
(not (= @x9
@x10))
)

;; def=Sec2.HIFC.fst(594,13-601,39); use=Sec2.HIFC.fst(603,4-603,5)
(forall ((@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x12
Sec2.HIFC.store)
(HasType @x13
@x0)
(HasType @x14
@x0)
(HasType @x15
Sec2.HIFC.store)
(HasType @x16
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(595,15-595,19); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(595,15-595,19); use=Sec2.HIFC.fst(603,4-603,5)
(ApplyTT @x5
@x12)
)


;; def=Sec2.HIFC.fst(596,15-596,32); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(596,15-596,32); use=Sec2.HIFC.fst(603,4-603,5)
(ApplyTT @x5
(Sec2.HIFC.upd @x12
@x9
@x11))
)


;; def=Sec2.HIFC.fst(597,15-597,24); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(597,15-597,24); use=Sec2.HIFC.fst(603,4-603,5)
(ApplyTT (ApplyTT (ApplyTT @x6
@x12)
@x13)
@x15)
)


;; def=Sec2.HIFC.fst(598,15-598,31); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(598,15-598,31); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.modifies @x1
@x12
@x15)
)


;; def=Sec2.HIFC.fst(599,15-599,39); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(599,15-599,39); use=Sec2.HIFC.fst(603,4-603,5)
(ApplyTT (ApplyTT (ApplyTT @x6
(Sec2.HIFC.upd @x12
@x9
@x11))
@x14)
@x16)
)


;; def=Sec2.HIFC.fst(600,15-600,45); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(600,15-600,45); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.modifies @x1
(Sec2.HIFC.upd @x12
@x9
@x11)
@x16)
)
)

;; def=Sec2.HIFC.fst(601,15-601,38); use=Sec2.HIFC.fst(603,4-603,5)
(= (Sec2.HIFC.sel @x15
@x10)
(Sec2.HIFC.sel @x16
@x10))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(603,4-603,5)
(forall ((@x9 Term))
 (! (implies (or label_1
(HasType @x9
(Sec2.HIFC.hifc @x0
@x2
@x1
@x4
@x5
@x6)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(603,4-603,5)
(ApplyTT @x8
@x9)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(603,4-603,5)
(ApplyTT @x8
@x9)
)
)
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(603,4-603,5)
(and (implies 
;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(603,4-603,5)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.reads @x0
@x5
@x6
@x7
@x2)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.writes @x0
@x5
@x6
@x7
@x1)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.respects @x0
@x5
@x6
@x7
(Prims.Cons Sec2.HIFC.flow
@x3
@x4))
)
)


;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(603,4-603,5)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(603,4-603,5)
(or label_2

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.reads @x0
@x5
@x6
@x7
@x2)
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(603,4-603,5)
(or label_3

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.writes @x0
@x5
@x6
@x7
@x1)
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(603,4-603,5)
(or label_4

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(603,4-603,5)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(603,4-603,5)
(Sec2.HIFC.respects @x0
@x5
@x6
@x7
@x4)
)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(603,4-603,5)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Sec2.HIFC.hifc @x0
@x2
@x1
(Prims.Cons Sec2.HIFC.flow
@x3
@x4)
@x5
@x6))

;; def=Sec2.HIFC.fst(588,17-589,28); use=Sec2.HIFC.fst(603,4-603,5)
(= @x9
@x7)
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Sec2.HIFC.hifc @x0
@x2
@x1
@x4
@x5
@x6))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x10
@x9)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x8
@x10)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.refine_flow_hifc, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, Sec2.HIFC_interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4, constructor_distinct_Prims.Cons, data_typing_intro_Prims.Cons@tok, eq2-interp, equation_FStar.Pervasives.Native.fst, equation_FStar.Pervasives.Native.snd, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.has_flow, equation_Sec2.HIFC.hifc, equation_Sec2.HIFC.hst, equation_Sec2.HIFC.label, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, l_or-interp, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0, refinement_kinding_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.upd

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let refine_flow_hifc


; <Start encoding let refine_flow_hifc>

(declare-fun Sec2.HIFC.refine_flow_hifc (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_9e6750ab2b24ceb014ada43184dd411d (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;c: hifc a r w (f :: fs) p q -> Prims.Pure (hifc a r w fs p q)
(declare-fun Tm_arrow_70b48ff4966ccd94723f0adf9b9c8cbd () Term)
(declare-fun Sec2.HIFC.refine_flow_hifc@tok () Term)


; </end encoding let refine_flow_hifc>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(611,3-612,5)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)









(declare-fun Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(611,35-611,38); use=Sec2.HIFC.fst(611,35-611,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x0
@x1
@x2
@x3)
(Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x1
@x2
@x3))
 

:pattern ((Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960))

:named typing_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(611,35-611,38); use=Sec2.HIFC.fst(611,35-611,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x1
@x2
@x3
@x4)
@x0)
(ApplyTT @x1
@x0))
 

:pattern ((ApplyTT (Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960))

:named interpretation_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960))






; Encoding query formula : forall (a: Type)
;   (r0: Sec2.HIFC.label)
;   (w0: Sec2.HIFC.label)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (p': (_: Sec2.HIFC.store -> Prims.logical))
;   (q': (_: Sec2.HIFC.store -> _: a -> _: Sec2.HIFC.store -> Prims.logical))
;   (fs0: Sec2.HIFC.flows)
;   (f: Sec2.HIFC.hifc a r0 w0 fs0 p q).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (Sec2.HIFC.hst a p' q')).
;     (forall (s: Sec2.HIFC.store). p' s ==> p s) /\
;     (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store). p' s0 /\ q s0 x s1 ==> q' s0 x s1) /\
;     (forall (pure_result: Sec2.HIFC.hst a p' q'). Prims.auto_squash (p pure_result)) ==>
;     (forall (s: s0: Sec2.HIFC.store{p' s0}).
;         (*  - Could not prove post-condition
; *)
;         (p' s ==> p s) /\
;         (forall (any_result: s0: Sec2.HIFC.store{p' s0}).
;             s == any_result ==>
;             (forall (any_result:
;                 r:
;                 (a & Sec2.HIFC.store)
;                   {q s (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r)}).
;                 f s == any_result ==>
;                 q s (FStar.Pervasives.Native.fst (f s)) (FStar.Pervasives.Native.snd (f s)) ==>
;                 q' s (FStar.Pervasives.Native.fst (f s)) (FStar.Pervasives.Native.snd (f s))))) /\
;     (forall (any_result: Sec2.HIFC.hst a p' q').
;         (fun s -> f s) == any_result ==>
;         (forall (any_result: Sec2.HIFC.hst a p' q').
;             any_result == (fun s -> f s) ==>
;             (forall (return_val: Sec2.HIFC.hst a p' q'). return_val == any_result ==> p return_val))
;     )


; Context: While encoding a query
; While typechecking the top-level declaration `let consequence`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.pre)
(HasType @x4
(Sec2.HIFC.post @x0))
(HasType @x5
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(HasType @x6
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0))
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
(Sec2.HIFC.hifc @x0
@x1
@x2
@x7
@x3
@x4)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Prims.pure_post (Sec2.HIFC.hst @x0
@x5
@x6)))

;; def=Sec2.HIFC.fst(608,14-608,38); use=Sec2.HIFC.fst(611,3-612,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(608,25-608,29); use=Sec2.HIFC.fst(611,3-612,5)
(Valid 
;; def=Sec2.HIFC.fst(608,25-608,29); use=Sec2.HIFC.fst(611,3-612,5)
(ApplyTT @x5
@x10)
)
)

;; def=Sec2.HIFC.fst(608,34-608,37); use=Sec2.HIFC.fst(611,3-612,5)
(Valid 
;; def=Sec2.HIFC.fst(608,34-608,37); use=Sec2.HIFC.fst(611,3-612,5)
(ApplyTT @x3
@x10)
)
)
 
;;no pats
:qid @query.2))


;; def=Sec2.HIFC.fst(609,14-609,65); use=Sec2.HIFC.fst(611,3-612,5)
(forall ((@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x10
Sec2.HIFC.store)
(HasType @x11
@x0)
(HasType @x12
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(609,31-609,36); use=Sec2.HIFC.fst(611,3-612,5)
(Valid 
;; def=Sec2.HIFC.fst(609,31-609,36); use=Sec2.HIFC.fst(611,3-612,5)
(ApplyTT @x5
@x10)
)


;; def=Sec2.HIFC.fst(609,40-609,49); use=Sec2.HIFC.fst(611,3-612,5)
(Valid 
;; def=Sec2.HIFC.fst(609,40-609,49); use=Sec2.HIFC.fst(611,3-612,5)
(ApplyTT (ApplyTT (ApplyTT @x4
@x10)
@x11)
@x12)
)
)

;; def=Sec2.HIFC.fst(609,54-609,64); use=Sec2.HIFC.fst(611,3-612,5)
(Valid 
;; def=Sec2.HIFC.fst(609,54-609,64); use=Sec2.HIFC.fst(611,3-612,5)
(ApplyTT (ApplyTT (ApplyTT @x6
@x10)
@x11)
@x12)
)
)
 
;;no pats
:qid @query.3))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(611,3-612,5)
(forall ((@x10 Term))
 (! (implies (or label_1
(HasType @x10
(Sec2.HIFC.hst @x0
@x5
@x6)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(611,3-612,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(611,3-612,5)
(ApplyTT @x9
@x10)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(611,3-612,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(611,3-612,5)
(ApplyTT @x9
@x10)
)
)
:qid @query.4))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(611,3-612,5)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(611,3-612,5)
(forall ((@x10 Term))
 (! (implies (HasType @x10
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x5))

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(611,35-611,38)
(and (implies 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(611,37-611,38)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(611,37-611,38)
(ApplyTT @x5
@x10)
)


;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(611,37-611,38)
(or label_2

;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(611,37-611,38)
(Valid 
;; def=Sec2.HIFC.fst(13,40-13,44); use=Sec2.HIFC.fst(611,37-611,38)
(ApplyTT @x3
@x10)
)
)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(611,35-611,38)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Tm_refine_013102ccaffb74d33eaab4c36743a80c @x5))

;; def=Sec2.HIFC.fst(13,31-611,31); use=Sec2.HIFC.fst(611,35-611,38)
(= @x10
@x11)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(611,35-611,38)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Tm_refine_c41bcf947a2882470c6be718c9c77aa9 @x4
@x10
@x0))

;; def=Sec2.HIFC.fst(13,49-611,38); use=Sec2.HIFC.fst(611,35-611,38)
(= (ApplyTT @x8
@x10)
@x12)


;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(611,35-611,38)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(611,35-611,38)
(ApplyTT (ApplyTT (ApplyTT @x4
@x10)
(FStar.Pervasives.Native.fst @x0
Sec2.HIFC.store
(ApplyTT @x8
@x10)))
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(ApplyTT @x8
@x10)))
)
)

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(611,35-611,38)
(or label_3

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(611,35-611,38)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(611,35-611,38)
(ApplyTT (ApplyTT (ApplyTT @x6
@x10)
(FStar.Pervasives.Native.fst @x0
Sec2.HIFC.store
(ApplyTT @x8
@x10)))
(FStar.Pervasives.Native.snd @x0
Sec2.HIFC.store
(ApplyTT @x8
@x10)))
)
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(611,3-612,5)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(Sec2.HIFC.hst @x0
@x5
@x6))

;; def=Sec2.HIFC.fst(611,8-611,38); use=Sec2.HIFC.fst(611,8-611,38)
(= (Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x8
@x0
@x6
@x5)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(611,3-612,5)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Sec2.HIFC.hst @x0
@x5
@x6))

;; def=Sec2.HIFC.fst(607,9-612,5); use=Sec2.HIFC.fst(611,3-612,5)
(= @x11
(Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x8
@x0
@x6
@x5))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Sec2.HIFC.hst @x0
@x5
@x6))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x12
@x11)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x9
@x12)
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.consequence, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Sec2.HIFC.store, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_kinding_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_FStar.Pervasives.Native.fst, typing_FStar.Pervasives.Native.snd

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let consequence


; <Start encoding let consequence>



(declare-fun Sec2.HIFC.consequence (Term Term Term Term Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;a: Type ->     r0: label ->     w0: label ->     p: pre ->     q: post a ->     p': (_: store -> Prims.logical) ->     q': (_: store -> _: a -> _: store -> Prims.logical) ->     fs0: flows ->     f: hifc a r0 w0 fs0 p q   -> Prims.Pure (hst a p' q')
(declare-fun Tm_arrow_4e1d8a0af2849c1437a3b18fe068ad03 () Term)
(declare-fun Sec2.HIFC.consequence@tok () Term)







(declare-fun Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 (Term Term Term Term) Term)

; </end encoding let consequence>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(618,4-618,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Type).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     p /\ (forall (pure_result: Prims.unit). p ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let norm_spec`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(615,15-615,16); use=Sec2.HIFC.fst(616,44-616,45)
(Valid 
;; def=Sec2.HIFC.fst(615,15-615,16); use=Sec2.HIFC.fst(616,44-616,45)
@x0
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(618,4-618,6)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=Sec2.HIFC.fst(615,15-615,16); use=Sec2.HIFC.fst(617,19-617,20)
(or label_2

;; def=Sec2.HIFC.fst(615,15-615,16); use=Sec2.HIFC.fst(617,19-617,20)
(Valid 
;; def=Sec2.HIFC.fst(615,15-615,16); use=Sec2.HIFC.fst(617,19-617,20)
@x0
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(618,4-618,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(618,4-618,6)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(618,4-618,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(618,4-618,6)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.norm_spec, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let norm_spec


; <Start encoding let norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.norm_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.norm_spec@tok () Term)

; </end encoding let norm_spec>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(622,4-622,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Type).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     p /\ (forall (pure_result: Prims.unit). p ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let norm_spec_inv`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(619,19-619,20); use=Sec2.HIFC.fst(620,20-620,21)
(Valid 
;; def=Sec2.HIFC.fst(619,19-619,20); use=Sec2.HIFC.fst(620,20-620,21)
@x0
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(622,4-622,6)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=Sec2.HIFC.fst(619,19-619,20); use=Sec2.HIFC.fst(621,43-621,44)
(or label_2

;; def=Sec2.HIFC.fst(619,19-619,20); use=Sec2.HIFC.fst(621,43-621,44)
(Valid 
;; def=Sec2.HIFC.fst(619,19-619,20); use=Sec2.HIFC.fst(621,43-621,44)
@x0
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(622,4-622,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(622,4-622,6)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(622,4-622,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(622,4-622,6)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.norm_spec_inv, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let norm_spec_inv


; <Start encoding let norm_spec_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.norm_spec_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.norm_spec_inv@tok () Term)

; </end encoding let norm_spec_inv>

;;;;;;;;;;;;;;;;typing_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960
;;; Fact-ids: Name Sec2.HIFC.consequence; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(611,35-611,38); use=Sec2.HIFC.fst(611,35-611,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x0
@x1
@x2
@x3)
(Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4 @x1
@x2
@x3))
 

:pattern ((Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960))

:named typing_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.consequence; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(606,4-606,15); use=Sec2.HIFC.fst(606,4-606,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and 
;; def=Sec2.HIFC.fst(608,14-608,38); use=Sec2.HIFC.fst(608,14-608,38)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(608,25-608,29); use=Sec2.HIFC.fst(608,25-608,29)
(Valid 
;; def=Sec2.HIFC.fst(608,25-608,29); use=Sec2.HIFC.fst(608,25-608,29)
(ApplyTT @x5
@x9)
)
)

;; def=Sec2.HIFC.fst(608,34-608,37); use=Sec2.HIFC.fst(608,34-608,37)
(Valid 
;; def=Sec2.HIFC.fst(608,34-608,37); use=Sec2.HIFC.fst(608,34-608,37)
(ApplyTT @x3
@x9)
)
)
 
;;no pats
:qid typing_Sec2.HIFC.consequence.1))


;; def=Sec2.HIFC.fst(609,14-609,65); use=Sec2.HIFC.fst(609,14-609,65)
(forall ((@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x9
Sec2.HIFC.store)
(HasType @x10
@x0)
(HasType @x11
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(609,31-609,36); use=Sec2.HIFC.fst(609,31-609,36)
(Valid 
;; def=Sec2.HIFC.fst(609,31-609,36); use=Sec2.HIFC.fst(609,31-609,36)
(ApplyTT @x5
@x9)
)


;; def=Sec2.HIFC.fst(609,40-609,49); use=Sec2.HIFC.fst(609,40-609,49)
(Valid 
;; def=Sec2.HIFC.fst(609,40-609,49); use=Sec2.HIFC.fst(609,40-609,49)
(ApplyTT (ApplyTT (ApplyTT @x4
@x9)
@x10)
@x11)
)
)

;; def=Sec2.HIFC.fst(609,54-609,64); use=Sec2.HIFC.fst(609,54-609,64)
(Valid 
;; def=Sec2.HIFC.fst(609,54-609,64); use=Sec2.HIFC.fst(609,54-609,64)
(ApplyTT (ApplyTT (ApplyTT @x6
@x9)
@x10)
@x11)
)
)
 
;;no pats
:qid typing_Sec2.HIFC.consequence.2))

(HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.pre)
(HasType @x4
(Sec2.HIFC.post @x0))
(HasType @x5
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(HasType @x6
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0))
(HasType @x7
Sec2.HIFC.flows)
(HasType @x8
(Sec2.HIFC.hifc @x0
@x1
@x2
@x7
@x3
@x4)))
(HasType (Sec2.HIFC.consequence @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(Tm_refine_2de144b248e44491dd25cf268cee4763 @x0
@x5
@x6)))
 

:pattern ((Sec2.HIFC.consequence @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Sec2.HIFC.consequence))

:named typing_Sec2.HIFC.consequence))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(24,9-24,20); use=Sec2.HIFC.fst(24,9-24,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_2de144b248e44491dd25cf268cee4763 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de144b248e44491dd25cf268cee4763 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_2de144b248e44491dd25cf268cee4763))

:named refinement_kinding_Tm_refine_2de144b248e44491dd25cf268cee4763))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(24,9-24,20); use=Sec2.HIFC.fst(24,9-24,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de144b248e44491dd25cf268cee4763 @x2
@x3
@x4))
(HasTypeFuel @u0
@x1
(Sec2.HIFC.hst @x2
@x3
@x4)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de144b248e44491dd25cf268cee4763 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_2de144b248e44491dd25cf268cee4763))

:named refinement_interpretation_Tm_refine_2de144b248e44491dd25cf268cee4763))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960
;;; Fact-ids: Name Sec2.HIFC.consequence; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(611,35-611,38); use=Sec2.HIFC.fst(611,35-611,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x1
@x2
@x3
@x4)
@x0)
(ApplyTT @x1
@x0))
 

:pattern ((ApplyTT (Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960))

:named interpretation_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de144b248e44491dd25cf268cee4763
;;; Fact-ids: Name Sec2.HIFC.subcomp_hst; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(24,9-24,20); use=Sec2.HIFC.fst(24,9-24,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de144b248e44491dd25cf268cee4763 @x0
@x1
@x2)))
(Valid (Prims.hasEq (Sec2.HIFC.hst @x0
@x1
@x2))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de144b248e44491dd25cf268cee4763 @x0
@x1
@x2))))
:qid haseqTm_refine_2de144b248e44491dd25cf268cee4763))

:named haseqTm_refine_2de144b248e44491dd25cf268cee4763))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.consequence
;;; Fact-ids: Name Sec2.HIFC.consequence; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(606,4-606,15); use=Sec2.HIFC.fst(606,4-606,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (Sec2.HIFC.consequence @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
(Tm_abs_0a16e079ffe167a2e232ab33bbb1a960 @x8
@x0
@x6
@x5))
 

:pattern ((Sec2.HIFC.consequence @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid equation_Sec2.HIFC.consequence))

:named equation_Sec2.HIFC.consequence))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(635,3-650,5)

(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


(declare-fun Tm_refine_5bb75f32a4b0a52f70622979ebb12ead (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(643,8-646,38); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (HasType (Tm_refine_5bb75f32a4b0a52f70622979ebb12ead @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)
Tm_type)
 

:pattern ((HasType (Tm_refine_5bb75f32a4b0a52f70622979ebb12ead @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)
Tm_type))
:qid refinement_kinding_Tm_refine_5bb75f32a4b0a52f70622979ebb12ead))

:named refinement_kinding_Tm_refine_5bb75f32a4b0a52f70622979ebb12ead))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(643,8-646,38); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5bb75f32a4b0a52f70622979ebb12ead @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(635,3-650,5)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(635,3-650,5)
(and 
;; def=Sec2.HIFC.fst(644,18-644,41); use=Sec2.HIFC.fst(635,3-650,5)
(not 
;; def=Sec2.HIFC.fst(644,19-644,41); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(644,19-644,41); use=Sec2.HIFC.fst(635,3-650,5)
(Sec2.HIFC.has_flow @x2
@x3
@x4)
)
)


;; def=Sec2.HIFC.fst(644,45-644,53); use=Sec2.HIFC.fst(635,3-650,5)
(not (= @x2
@x3))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=Sec2.HIFC.fst(645,17-645,39); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(645,17-645,39); use=Sec2.HIFC.fst(635,3-650,5)
(Sec2.HIFC.no_leakage @x5
@x6
@x7
(Sec2.HIFC.consequence @x5
@x8
@x9
@x10
@x11
@x6
@x7
@x12
@x13)
@x2
@x3)
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(635,3-650,5)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(635,3-650,5)
(= @x14
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_5bb75f32a4b0a52f70622979ebb12ead.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5bb75f32a4b0a52f70622979ebb12ead @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13)))
:qid refinement_interpretation_Tm_refine_5bb75f32a4b0a52f70622979ebb12ead))

:named refinement_interpretation_Tm_refine_5bb75f32a4b0a52f70622979ebb12ead))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5bb75f32a4b0a52f70622979ebb12ead
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(643,8-646,38); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5bb75f32a4b0a52f70622979ebb12ead @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5bb75f32a4b0a52f70622979ebb12ead @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))))
:qid haseqTm_refine_5bb75f32a4b0a52f70622979ebb12ead))

:named haseqTm_refine_5bb75f32a4b0a52f70622979ebb12ead))
;;;;;;;;;;;;;;;;from: loc -> to: loc   -> FStar.Pervasives.Lemma (requires ~(has_flow from to fs1) /\ from <> to)       (ensures no_leakage (consequence a r0 w0 p q p' q' fs0 f) from to)       [SMTPat (no_leakage (consequence a r0 w0 p q p' q' fs0 f) from to)]
(declare-fun Tm_arrow_441317bda2dc59104dcaa384d012d621 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_441317bda2dc59104dcaa384d012d621
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(79,47-646,38); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (HasType (Tm_arrow_441317bda2dc59104dcaa384d012d621 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
Tm_type)
 

:pattern ((HasType (Tm_arrow_441317bda2dc59104dcaa384d012d621 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
Tm_type))
:qid kinding_Tm_arrow_441317bda2dc59104dcaa384d012d621))

:named kinding_Tm_arrow_441317bda2dc59104dcaa384d012d621))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(79,47-646,38); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_441317bda2dc59104dcaa384d012d621 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_441317bda2dc59104dcaa384d012d621 @x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_441317bda2dc59104dcaa384d012d621))

:named Sec2.HIFC_pre_typing_Tm_arrow_441317bda2dc59104dcaa384d012d621))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_441317bda2dc59104dcaa384d012d621
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(79,47-646,38); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_441317bda2dc59104dcaa384d012d621 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
(and 
;; def=Sec2.HIFC.fst(79,47-646,38); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x11 Term) (@x12 Term))
 (! (implies (and 
;; def=Sec2.HIFC.fst(644,18-644,41); use=Sec2.HIFC.fst(635,3-650,5)
(not 
;; def=Sec2.HIFC.fst(644,19-644,41); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(644,19-644,41); use=Sec2.HIFC.fst(635,3-650,5)
(Sec2.HIFC.has_flow @x11
@x12
@x10)
)
)


;; def=Sec2.HIFC.fst(644,45-644,53); use=Sec2.HIFC.fst(635,3-650,5)
(not (= @x11
@x12))

(HasType @x11
(Sec2.HIFC.loc Dummy_value))
(HasType @x12
(Sec2.HIFC.loc Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x11)
@x12)
(Tm_refine_5bb75f32a4b0a52f70622979ebb12ead @x11
@x12
@x10
@x9
@x8
@x7
@x6
@x5
@x4
@x3
@x2
@x1)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x11)
@x12))
:qid Sec2.HIFC_interpretation_Tm_arrow_441317bda2dc59104dcaa384d012d621.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(79,47-646,38); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x11 Term))
 (! (implies (HasType @x11
(Sec2.HIFC.loc Dummy_value))
(IsTotFun (ApplyTT @x0
@x11)))
 

:pattern ((ApplyTT @x0
@x11))
:qid Sec2.HIFC_interpretation_Tm_arrow_441317bda2dc59104dcaa384d012d621.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_441317bda2dc59104dcaa384d012d621 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)))
:qid Sec2.HIFC_interpretation_Tm_arrow_441317bda2dc59104dcaa384d012d621))

:named Sec2.HIFC_interpretation_Tm_arrow_441317bda2dc59104dcaa384d012d621))

; Encoding query formula : forall (a: Type) (r0: Sec2.HIFC.label) (w0: Sec2.HIFC.label) (fs0: Sec2.HIFC.flows)
;   (p: Sec2.HIFC.pre) (q: Sec2.HIFC.post a) (r1: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;   (fs1: Sec2.HIFC.flows) (p': (_: Sec2.HIFC.store -> Prims.logical))
;   (q': (_: Sec2.HIFC.store -> _: a -> _: Sec2.HIFC.store -> Prims.logical))
;   (f: Sec2.HIFC.hifc a r0 w0 fs0 p q).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (Sec2.HIFC.hifc a r1 w1 fs1 p' q')).
;     Sec2.HIFC.label_inclusion r0 r1 /\ Sec2.HIFC.label_inclusion w0 w1 /\
;     (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;         (match fs0 with
;           | [] -> Prims.l_False
;           | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;         (forall (from: Prims.int) (to: Prims.int).
;             FStar.Set.mem from
;               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;             true /\
;             FStar.Set.mem to
;               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;             true /\ from <> to == true ==>
;             (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                 (match fs1 with
;                   | [] -> Prims.l_False
;                   | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                 (FStar.Set.mem from
;                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                   true) /\
;                 (FStar.Set.mem to
;                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                   true)))) /\ (forall (s: Sec2.HIFC.store). p' s ==> p s) /\
;     (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store). p' s0 /\ q s0 x s1 ==> q' s0 x s1) /\
;     (forall (pure_result: Sec2.HIFC.hifc a r1 w1 fs1 p' q'). Prims.auto_squash (p pure_result)) ==>
;     (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;         (match fs0 with
;           | [] -> Prims.l_False
;           | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;         (forall (from: Prims.int) (to: Prims.int).
;             FStar.Set.mem from
;               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;             true /\
;             FStar.Set.mem to
;               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;             true /\ from <> to == true ==>
;             (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                 (match fs1 with
;                   | [] -> Prims.l_False
;                   | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                 (FStar.Set.mem from
;                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                   true) /\
;                 (FStar.Set.mem to
;                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                   true)))) /\
;     (forall (pure_result: Prims.unit).
;         Sec2.HIFC.flows_included_in fs0 fs1 ==>
;         Sec2.HIFC.flows_included_in fs0 fs1 /\
;         (forall (pure_result: Prims.unit).
;             Sec2.HIFC.flows_included_in fs0 fs1 ==>
;             (forall (s: Sec2.HIFC.store). p' s ==> p s) /\
;             (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store).
;                 p' s0 /\ q s0 x s1 ==> q' s0 x s1) /\
;             (forall (pure_result: Sec2.HIFC.hst a p' q').
;                 Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f == pure_result ==>
;                 Sec2.HIFC.reads (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f) r0 /\
;                 Sec2.HIFC.label_inclusion r0 r1 /\
;                 (forall (pure_result: Prims.unit).
;                     Sec2.HIFC.reads (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f) r1 ==>
;                     Sec2.HIFC.reads (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f) r1 /\
;                     (forall (pure_result: Prims.unit).
;                         Sec2.HIFC.reads (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f) r1 ==>
;                         Sec2.HIFC.writes (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f) w1 /\
;                         (forall (pure_result: Prims.unit).
;                             Sec2.HIFC.writes (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f) w1 ==>
;                             (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc).
;                                 (*  - Could not prove post-condition
; *)
;                                 forall (p: Prims.pure_post Prims.unit).
;                                   ~(Sec2.HIFC.has_flow from to fs1) /\ from <> to /\
;                                   (forall (pure_result: Prims.unit).
;                                       Sec2.HIFC.no_leakage (Sec2.HIFC.consequence a
;                                             r0
;                                             w0
;                                             p
;                                             q
;                                             p'
;                                             q'
;                                             fs0
;                                             f)
;                                         from
;                                         to ==>
;                                       p pure_result) ==>
;                                   Sec2.HIFC.no_leakage f from to /\
;                                   (forall (pure_result: Prims.unit).
;                                       Sec2.HIFC.no_leakage f from to ==> p pure_result)) /\
;                             (forall (any_result:
;                                 (from: Sec2.HIFC.loc -> to: Sec2.HIFC.loc
;                                     -> FStar.Pervasives.Lemma
;                                         (requires ~(Sec2.HIFC.has_flow from to fs1) /\ from <> to)
;                                         (ensures
;                                           Sec2.HIFC.no_leakage (Sec2.HIFC.consequence a
;                                                 r0
;                                                 w0
;                                                 p
;                                                 q
;                                                 p'
;                                                 q'
;                                                 fs0
;                                                 f)
;                                             from
;                                             to)
;                                         [
;                                           SMTPat (Sec2.HIFC.no_leakage (Sec2.HIFC.consequence a
;                                                     r0
;                                                     w0
;                                                     p
;                                                     q
;                                                     p'
;                                                     q'
;                                                     fs0
;                                                     f)
;                                                 from
;                                                 to)
;                                         ])).
;                                 (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc).
;                                     {:pattern
; 
;                                       Sec2.HIFC.no_leakage (Sec2.HIFC.consequence a
;                                             r0
;                                             w0
;                                             p
;                                             q
;                                             p'
;                                             q'
;                                             fs0
;                                             f)
;                                         from
;                                         to}
;                                     ~(Sec2.HIFC.has_flow from to fs1) /\ from <> to ==>
;                                     Sec2.HIFC.no_leakage (Sec2.HIFC.consequence a
;                                           r0
;                                           w0
;                                           p
;                                           q
;                                           p'
;                                           q'
;                                           fs0
;                                           f)
;                                       from
;                                       to) ==>
;                                 Sec2.HIFC.respects (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f)
;                                   fs1 /\
;                                 (forall (pure_result: Prims.unit).
;                                     Sec2.HIFC.respects (Sec2.HIFC.consequence a
;                                           r0
;                                           w0
;                                           p
;                                           q
;                                           p'
;                                           q'
;                                           fs0
;                                           f)
;                                       fs1 ==>
;                                     Sec2.HIFC.reads (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f)
;                                       r1 /\
;                                     Sec2.HIFC.writes (Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f)
;                                       w1 /\
;                                     Sec2.HIFC.respects (Sec2.HIFC.consequence a
;                                           r0
;                                           w0
;                                           p
;                                           q
;                                           p'
;                                           q'
;                                           fs0
;                                           f)
;                                       fs1 /\
;                                     (forall (any_result: Sec2.HIFC.hst a p' q').
;                                         any_result == Sec2.HIFC.consequence a r0 w0 p q p' q' fs0 f ==>
;                                         (forall (return_val: Sec2.HIFC.hifc a r1 w1 fs1 p' q').
;                                             return_val == any_result ==> p return_val))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let sub_hifc`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flows)
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0))
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.label)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(HasType @x10
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0))
(HasType @x11
(Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Prims.pure_post (Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10)))

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(635,3-650,5)
(Sec2.HIFC.label_inclusion @x1
@x6)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(635,3-650,5)
(Sec2.HIFC.label_inclusion @x2
@x7)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb14 @x3))
(ite (is-Prims.Nil @lb14)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb14)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x13
(Prims.Cons_hd @lb14))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x13
(Prims.Cons_tl @lb14))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
Prims.int)
(HasType @x15
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb16 @x13))
(FStar.Pervasives.Native.Mktuple2__1 @lb16)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x15
(let ((@lb16 @x13))
(FStar.Pervasives.Native.Mktuple2__2 @lb16)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x14
@x15)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x16 Term))
 (! (and (HasType @x16
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb17 @x8))
(ite (is-Prims.Nil @lb17)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb17)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x16
(Prims.Cons_hd @lb17))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x16
(Prims.Cons_tl @lb17))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb17 @x16))
(FStar.Pervasives.Native.Mktuple2__1 @lb17)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x15
(let ((@lb17 @x16))
(FStar.Pervasives.Native.Mktuple2__2 @lb17)))
(BoxBool true))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))


;; def=Sec2.HIFC.fst(632,15-632,39); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(632,26-632,30); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(632,26-632,30); use=Sec2.HIFC.fst(635,3-650,5)
(ApplyTT @x9
@x13)
)
)

;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(635,3-650,5)
(ApplyTT @x4
@x13)
)
)
 
;;no pats
:qid @query.5))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x13
Sec2.HIFC.store)
(HasType @x14
@x0)
(HasType @x15
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(635,3-650,5)
(ApplyTT @x9
@x13)
)


;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(635,3-650,5)
(ApplyTT (ApplyTT (ApplyTT @x5
@x13)
@x14)
@x15)
)
)

;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(635,3-650,5)
(ApplyTT (ApplyTT (ApplyTT @x10
@x13)
@x14)
@x15)
)
)
 
;;no pats
:qid @query.6))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x13 Term))
 (! (implies (or label_1
(HasType @x13
(Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(635,3-650,5)
(ApplyTT @x12
@x13)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(635,3-650,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(635,3-650,5)
(ApplyTT @x12
@x13)
)
)
:qid @query.7))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(636,4-636,13)
(and 
;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb14 @x3))
(ite (is-Prims.Nil @lb14)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb14)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x13
(Prims.Cons_hd @lb14))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x13
(Prims.Cons_tl @lb14))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
Prims.int)
(HasType @x15
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb16 @x13))
(FStar.Pervasives.Native.Mktuple2__1 @lb16)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x15
(let ((@lb16 @x13))
(FStar.Pervasives.Native.Mktuple2__2 @lb16)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x14
@x15)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(or label_2

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x16 Term))
 (! (and (HasType @x16
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb17 @x8))
(ite (is-Prims.Nil @lb17)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb17)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x16
(Prims.Cons_hd @lb17))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x16
(Prims.Cons_tl @lb17))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb17 @x16))
(FStar.Pervasives.Native.Mktuple2__1 @lb17)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x15
(let ((@lb17 @x16))
(FStar.Pervasives.Native.Mktuple2__2 @lb17)))
(BoxBool true))
)
 
;;no pats
:qid @query.10))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(636,4-636,13)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.unit)

;; def=Sec2.HIFC.fst(636,14-636,43); use=Sec2.HIFC.fst(636,4-636,13)
(Valid 
;; def=Sec2.HIFC.fst(636,14-636,43); use=Sec2.HIFC.fst(636,4-636,13)
(Sec2.HIFC.flows_included_in @x3
@x8)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(637,4-637,10)
(and 
;; def=Sec2.HIFC.fst(637,11-637,42); use=Sec2.HIFC.fst(637,4-637,10)
(or label_3

;; def=Sec2.HIFC.fst(637,11-637,42); use=Sec2.HIFC.fst(637,4-637,10)
(Valid 
;; def=Sec2.HIFC.fst(637,11-637,42); use=Sec2.HIFC.fst(637,4-637,10)
(Sec2.HIFC.flows_included_in @x3
@x8)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(637,4-637,10)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
Prims.unit)

;; def=Sec2.HIFC.fst(637,11-637,42); use=Sec2.HIFC.fst(637,4-637,10)
(Valid 
;; def=Sec2.HIFC.fst(637,11-637,42); use=Sec2.HIFC.fst(637,4-637,10)
(Sec2.HIFC.flows_included_in @x3
@x8)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(638,26-638,37)
(and 
;; def=Sec2.HIFC.fst(608,14-608,38); use=Sec2.HIFC.fst(638,26-638,37)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(608,25-608,29); use=Sec2.HIFC.fst(638,26-638,37)
(Valid 
;; def=Sec2.HIFC.fst(608,25-608,29); use=Sec2.HIFC.fst(638,26-638,37)
(ApplyTT @x9
@x15)
)
)

;; def=Sec2.HIFC.fst(608,34-608,37); use=Sec2.HIFC.fst(638,26-638,37)
(or label_4

;; def=Sec2.HIFC.fst(608,34-608,37); use=Sec2.HIFC.fst(638,26-638,37)
(Valid 
;; def=Sec2.HIFC.fst(608,34-608,37); use=Sec2.HIFC.fst(638,26-638,37)
(ApplyTT @x4
@x15)
)
)
)
 
;;no pats
:qid @query.13))


;; def=Sec2.HIFC.fst(609,14-609,65); use=Sec2.HIFC.fst(638,26-638,37)
(forall ((@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x15
Sec2.HIFC.store)
(HasType @x16
@x0)
(HasType @x17
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(609,31-609,36); use=Sec2.HIFC.fst(638,26-638,37)
(Valid 
;; def=Sec2.HIFC.fst(609,31-609,36); use=Sec2.HIFC.fst(638,26-638,37)
(ApplyTT @x9
@x15)
)


;; def=Sec2.HIFC.fst(609,40-609,49); use=Sec2.HIFC.fst(638,26-638,37)
(Valid 
;; def=Sec2.HIFC.fst(609,40-609,49); use=Sec2.HIFC.fst(638,26-638,37)
(ApplyTT (ApplyTT (ApplyTT @x5
@x15)
@x16)
@x17)
)
)

;; def=Sec2.HIFC.fst(609,54-609,64); use=Sec2.HIFC.fst(638,26-638,37)
(or label_5

;; def=Sec2.HIFC.fst(609,54-609,64); use=Sec2.HIFC.fst(638,26-638,37)
(Valid 
;; def=Sec2.HIFC.fst(609,54-609,64); use=Sec2.HIFC.fst(638,26-638,37)
(ApplyTT (ApplyTT (ApplyTT @x10
@x15)
@x16)
@x17)
)
)
)
 
;;no pats
:qid @query.14))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(638,26-638,37)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(Sec2.HIFC.hst @x0
@x9
@x10))

;; def=Sec2.HIFC.fst(638,8-638,61); use=Sec2.HIFC.fst(638,8-638,61)
(= (Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x15)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(639,4-639,19)
(and 
;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(639,4-639,19)
(or label_6

;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(639,4-639,19)
(Valid 
;; def=Sec2.HIFC.fst(138,20-138,31); use=Sec2.HIFC.fst(639,4-639,19)
(Sec2.HIFC.reads @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x1)
)
)


;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(639,4-639,19)
(or label_7

;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(639,4-639,19)
(Valid 
;; def=Sec2.HIFC.fst(139,20-139,44); use=Sec2.HIFC.fst(639,4-639,19)
(Sec2.HIFC.label_inclusion @x1
@x6)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(639,4-639,19)
(forall ((@x16 Term))
 (! (implies (and (HasType @x16
Prims.unit)

;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(639,4-639,19)
(Valid 
;; def=Sec2.HIFC.fst(140,19-140,31); use=Sec2.HIFC.fst(639,4-639,19)
(Sec2.HIFC.reads @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x6)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(640,4-640,10)
(and 
;; def=Sec2.HIFC.fst(640,11-640,23); use=Sec2.HIFC.fst(640,4-640,10)
(or label_8

;; def=Sec2.HIFC.fst(640,11-640,23); use=Sec2.HIFC.fst(640,4-640,10)
(Valid 
;; def=Sec2.HIFC.fst(640,11-640,23); use=Sec2.HIFC.fst(640,4-640,10)
(Sec2.HIFC.reads @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x6)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(640,4-640,10)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
Prims.unit)

;; def=Sec2.HIFC.fst(640,11-640,23); use=Sec2.HIFC.fst(640,4-640,10)
(Valid 
;; def=Sec2.HIFC.fst(640,11-640,23); use=Sec2.HIFC.fst(640,4-640,10)
(Sec2.HIFC.reads @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x6)
)
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(641,4-641,10)
(and 
;; def=Sec2.HIFC.fst(641,11-641,24); use=Sec2.HIFC.fst(641,4-641,10)
(or label_9

;; def=Sec2.HIFC.fst(641,11-641,24); use=Sec2.HIFC.fst(641,4-641,10)
(Valid 
;; def=Sec2.HIFC.fst(641,11-641,24); use=Sec2.HIFC.fst(641,4-641,10)
(Sec2.HIFC.writes @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x7)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(641,4-641,10)
(forall ((@x18 Term))
 (! (implies (and (HasType @x18
Prims.unit)

;; def=Sec2.HIFC.fst(641,11-641,24); use=Sec2.HIFC.fst(641,4-641,10)
(Valid 
;; def=Sec2.HIFC.fst(641,11-641,24); use=Sec2.HIFC.fst(641,4-641,10)
(Sec2.HIFC.writes @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x7)
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(635,3-650,5)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x19
(Sec2.HIFC.loc Dummy_value))
(HasType @x20
(Sec2.HIFC.loc Dummy_value)))

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(644,18-644,41); use=Sec2.HIFC.fst(647,8-647,41)
(not 
;; def=Sec2.HIFC.fst(644,19-644,41); use=Sec2.HIFC.fst(647,8-647,41)
(Valid 
;; def=Sec2.HIFC.fst(644,19-644,41); use=Sec2.HIFC.fst(647,8-647,41)
(Sec2.HIFC.has_flow @x19
@x20
@x8)
)
)


;; def=Sec2.HIFC.fst(644,45-644,53); use=Sec2.HIFC.fst(647,8-647,41)
(not (= @x19
@x20))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(647,8-647,41)
(forall ((@x22 Term))
 (! (implies (and (or label_10
(HasType @x22
Prims.unit))

;; def=Sec2.HIFC.fst(645,17-645,39); use=Sec2.HIFC.fst(647,8-647,41)
(or label_11

;; def=Sec2.HIFC.fst(645,17-645,39); use=Sec2.HIFC.fst(647,8-647,41)
(Valid 
;; def=Sec2.HIFC.fst(645,17-645,39); use=Sec2.HIFC.fst(647,8-647,41)
(Sec2.HIFC.no_leakage @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x19
@x20)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(647,8-647,41)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(647,8-647,41)
(ApplyTT @x21
@x22)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(647,8-647,41)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(647,8-647,41)
(ApplyTT @x21
@x22)
)
)
:qid @query.21))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(647,8-647,41)
(and 
;; def=Sec2.HIFC.fst(647,15-647,41); use=Sec2.HIFC.fst(647,15-647,41)
(or label_12

;; def=Sec2.HIFC.fst(647,15-647,41); use=Sec2.HIFC.fst(647,15-647,41)
(Valid 
;; def=Sec2.HIFC.fst(647,15-647,41); use=Sec2.HIFC.fst(647,15-647,41)
(Sec2.HIFC.no_leakage @x0
@x4
@x5
@x11
@x19
@x20)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(647,8-647,41)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
Prims.unit)

;; def=Sec2.HIFC.fst(647,15-647,41); use=Sec2.HIFC.fst(647,8-647,14)
(Valid 
;; def=Sec2.HIFC.fst(647,15-647,41); use=Sec2.HIFC.fst(647,8-647,14)
(Sec2.HIFC.no_leakage @x0
@x4
@x5
@x11
@x19
@x20)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(647,8-647,41)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(647,8-647,41)
(ApplyTT @x21
@x22)
)
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x19 Term))
 (! (implies (and (HasType @x19
(Tm_arrow_441317bda2dc59104dcaa384d012d621 @x11
@x3
@x5
@x4
@x2
@x1
@x10
@x9
@x0
@x8))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x20 Term) (@x21 Term))
 (! (implies (and (HasType @x20
(Sec2.HIFC.loc Dummy_value))
(HasType @x21
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(644,18-644,41); use=Sec2.HIFC.fst(644,18-644,41)
(not 
;; def=Sec2.HIFC.fst(644,19-644,41); use=Sec2.HIFC.fst(644,19-644,41)
(Valid 
;; def=Sec2.HIFC.fst(644,19-644,41); use=Sec2.HIFC.fst(644,19-644,41)
(Sec2.HIFC.has_flow @x20
@x21
@x8)
)
)


;; def=Sec2.HIFC.fst(644,45-644,53); use=Sec2.HIFC.fst(644,45-644,53)
(not (= @x20
@x21))
)

;; def=Sec2.HIFC.fst(645,17-645,39); use=Sec2.HIFC.fst(645,17-645,39)
(Valid 
;; def=Sec2.HIFC.fst(645,17-645,39); use=Sec2.HIFC.fst(645,17-645,39)
(Sec2.HIFC.no_leakage @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x20
@x21)
)
)
 

:pattern ((Sec2.HIFC.no_leakage @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x20
@x21))
:qid @query.24))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(649,4-649,10)
(and 
;; def=Sec2.HIFC.fst(649,11-649,27); use=Sec2.HIFC.fst(649,4-649,10)
(or label_13

;; def=Sec2.HIFC.fst(649,11-649,27); use=Sec2.HIFC.fst(649,4-649,10)
(Valid 
;; def=Sec2.HIFC.fst(649,11-649,27); use=Sec2.HIFC.fst(649,4-649,10)
(Sec2.HIFC.respects @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x8)
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(649,4-649,10)
(forall ((@x20 Term))
 (! (implies (and (HasType @x20
Prims.unit)

;; def=Sec2.HIFC.fst(649,11-649,27); use=Sec2.HIFC.fst(649,4-649,10)
(Valid 
;; def=Sec2.HIFC.fst(649,11-649,27); use=Sec2.HIFC.fst(649,4-649,10)
(Sec2.HIFC.respects @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x8)
)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(635,3-650,5)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(650,4-650,5)
(or label_14

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(650,4-650,5)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(650,4-650,5)
(Sec2.HIFC.reads @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x6)
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(650,4-650,5)
(or label_15

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(650,4-650,5)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(650,4-650,5)
(Sec2.HIFC.writes @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x7)
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(650,4-650,5)
(or label_16

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(650,4-650,5)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(650,4-650,5)
(Sec2.HIFC.respects @x0
@x9
@x10
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11)
@x8)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(635,3-650,5)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Sec2.HIFC.hst @x0
@x9
@x10))

;; def=Sec2.HIFC.fst(627,9-650,5); use=Sec2.HIFC.fst(635,3-650,5)
(= @x21
(Sec2.HIFC.consequence @x0
@x1
@x2
@x4
@x5
@x9
@x10
@x3
@x11))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x22
@x21)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x12
@x22)
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.sub_hifc, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Sec2.HIFC_interpretation_Tm_arrow_e2686d5e9b22c9c9b08cc170672d47c4, bool_inversion, equation_Sec2.HIFC.consequence, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.has_flow, equation_Sec2.HIFC.hifc, equation_Sec2.HIFC.hst, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.store, equation_Sec2.HIFC.writes, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, interpretation_Tm_abs_0a16e079ffe167a2e232ab33bbb1a960, lemma_FStar.Set.subset_mem, proj_equation_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_c41bcf947a2882470c6be718c9c77aa9, refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.upd

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let sub_hifc


; <Start encoding let sub_hifc>



(declare-fun Sec2.HIFC.sub_hifc (Term Term Term Term Term Term Term Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;a: Type ->     r0: label ->     w0: label ->     fs0: flows ->     p: pre ->     q: post a ->     r1: label ->     w1: label ->     fs1: flows ->     f: hifc a r0 w0 fs0 p q   -> Prims.Pure (hifc a r1 w1 fs1 p' q')
(declare-fun Tm_arrow_679da4e5b841b35f2eaa0c912fd99505 () Term)
(declare-fun Sec2.HIFC.sub_hifc@tok () Term)




; </end encoding let sub_hifc>


; encoding sigelt let if_then_else


; <Start encoding let if_then_else>

(declare-fun Sec2.HIFC.if_then_else (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type ->     r0: label ->     w0: label ->     f0: flows ->     p0: pre ->     q0: post a ->     r1: label ->     w1: label ->     f1: flows ->     p1: pre ->     q1: post a ->     c_then: hifc a r0 w0 f0 p0 q0 ->     c_else: hifc a r1 w1 f1 p1 q1 ->     b: Prims.bool   -> Type
(declare-fun Tm_arrow_64fb4106817ff7324758542526d9cd4b () Term)
(declare-fun Sec2.HIFC.if_then_else@tok () Term)

(declare-fun Tm_abs_0f2b32adc7408ef5cdec319243217217 (Term Term Term) Term)

(declare-fun Tm_abs_a040289925092e326cdf3ab083f77f64 (Term Term Term Term) Term)

; </end encoding let if_then_else>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(HasType (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid typing_Prims.op_Equals_Equals_Equals))

:named typing_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Equation for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))

;; def=Prims.fst(498,52-498,68); use=Prims.fst(498,52-498,68)
(and 
;; def=Prims.fst(498,52-498,58); use=Prims.fst(498,52-498,58)
(= @x0
@x1)


;; def=Prims.fst(498,62-498,68); use=Prims.fst(498,62-498,68)
(= @x2
@x3)
)
)
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid equation_Prims.op_Equals_Equals_Equals))

:named equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Prop-typing for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(Valid (Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_Prims.op_Equals_Equals_Equals))

:named defn_equation_Prims.op_Equals_Equals_Equals))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(665,8-667,39)

;;;;;;;;;;;;;;;;a : Type (Type)
(declare-fun x_fe28d8bcde588226b4e538b35321de05_1 () Term)
;;;;;;;;;;;;;;;;binder_x_fe28d8bcde588226b4e538b35321de05_1
;;; Fact-ids: 
(assert (! (HasType x_fe28d8bcde588226b4e538b35321de05_1
Tm_type)
:named binder_x_fe28d8bcde588226b4e538b35321de05_1))
;;;;;;;;;;;;;;;;x : a (a)
(declare-fun x_e09860b75d8922ab497a3e5bc9347578_2 () Term)
;;;;;;;;;;;;;;;;binder_x_e09860b75d8922ab497a3e5bc9347578_2
;;; Fact-ids: 
(assert (! (HasType x_e09860b75d8922ab497a3e5bc9347578_2
x_fe28d8bcde588226b4e538b35321de05_1)
:named binder_x_e09860b75d8922ab497a3e5bc9347578_2))
;;;;;;;;;;;;;;;;l0 : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_3 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3))
;;;;;;;;;;;;;;;;l1 : Prims.list a (Prims.list a)
(declare-fun x_0a56e3de562c08d8ab59f4ac6f626a98_4 () Term)
;;;;;;;;;;;;;;;;binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4
;;; Fact-ids: 
(assert (! (HasType x_0a56e3de562c08d8ab59f4ac6f626a98_4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))
:named binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.append_memP@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit).
;       (FStar.List.Tot.Base.memP x (l0 @ l1) <==>
;         FStar.List.Tot.Base.memP x l0 \/ FStar.List.Tot.Base.memP x l1) ==>
;       p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? l0) /\ ~(Cons? l0) ==> Prims.l_False) /\
;       (l0 == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? l0) ==>
;         (forall (b: a) (b: Prims.list a).
;             l0 == b :: b ==>
;             (x << x \/ (b << l0 \/ b === l0 /\ l1 << l1)) /\
;             (forall (any_result: Prims.list a).
;                 l1 == any_result ==>
;                 (forall (pure_result: Prims.unit).
;                     (FStar.List.Tot.Base.memP x (b @ l1) <==>
;                       FStar.List.Tot.Base.memP x b \/ FStar.List.Tot.Base.memP x l1) ==>
;                     k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec append_memP`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=Sec2.HIFC.fst(665,8-667,39); use=Sec2.HIFC.fst(665,8-667,39)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(665,8-667,39)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=Sec2.HIFC.fst(664,12-664,87); use=Sec2.HIFC.fst(665,8-667,39)
(or label_2

;; def=Sec2.HIFC.fst(664,12-664,87); use=Sec2.HIFC.fst(665,8-667,39)
(iff 
;; def=Sec2.HIFC.fst(664,13-664,38); use=Sec2.HIFC.fst(665,8-667,39)
(Valid 
;; def=Sec2.HIFC.fst(664,13-664,38); use=Sec2.HIFC.fst(665,8-667,39)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3
x_0a56e3de562c08d8ab59f4ac6f626a98_4))
)


;; def=Sec2.HIFC.fst(664,44-664,86); use=Sec2.HIFC.fst(665,8-667,39)
(or 
;; def=Sec2.HIFC.fst(664,45-664,63); use=Sec2.HIFC.fst(665,8-667,39)
(Valid 
;; def=Sec2.HIFC.fst(664,45-664,63); use=Sec2.HIFC.fst(665,8-667,39)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
)


;; def=Sec2.HIFC.fst(664,67-664,85); use=Sec2.HIFC.fst(665,8-667,39)
(Valid 
;; def=Sec2.HIFC.fst(664,67-664,85); use=Sec2.HIFC.fst(665,8-667,39)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_4)
)
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(665,8-667,39)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(665,8-667,39)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(665,8-667,39)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(665,8-667,39)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(665,8-667,39)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=Sec2.HIFC.fst(665,8-667,39)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(665,8-667,39)
(Valid 
;; def=Prims.fst(402,73-402,79); use=Sec2.HIFC.fst(665,8-667,39)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(665,8-667,39)
(Valid 
;; def=Prims.fst(402,84-402,87); use=Sec2.HIFC.fst(665,8-667,39)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(665,8-667,39)
(and (implies 
;; def=Sec2.HIFC.fst(663,30-663,32); use=Sec2.HIFC.fst(665,14-665,16)
(and 
;; def=Sec2.HIFC.fst(663,30-663,32); use=Sec2.HIFC.fst(665,14-665,16)
(not 
;; def=Sec2.HIFC.fst(663,30-663,32); use=Sec2.HIFC.fst(665,14-665,16)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)


;; def=Sec2.HIFC.fst(663,30-663,32); use=Sec2.HIFC.fst(665,14-665,16)
(not 
;; def=Sec2.HIFC.fst(663,30-663,32); use=Sec2.HIFC.fst(665,14-665,16)
(BoxBool_proj_0 (Prims.uu___is_Cons x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)
)

label_3)
(implies 
;; def=Sec2.HIFC.fst(663,30-666,12); use=Sec2.HIFC.fst(665,14-666,12)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.Nil x_fe28d8bcde588226b4e538b35321de05_1))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(665,8-667,39)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(665,8-667,39)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(665,8-667,39)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=Sec2.HIFC.fst(665,8-667,39)
(not 
;; def=Sec2.HIFC.fst(663,30-663,32); use=Sec2.HIFC.fst(665,14-665,16)
(BoxBool_proj_0 (Prims.uu___is_Nil x_fe28d8bcde588226b4e538b35321de05_1
x_0a56e3de562c08d8ab59f4ac6f626a98_3))
)


;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(665,8-667,39)
(forall ((@x2 Term))
 (! (implies (HasType @x2
x_fe28d8bcde588226b4e538b35321de05_1)

;; def=Prims.fst(413,99-413,120); use=Sec2.HIFC.fst(665,8-667,39)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Sec2.HIFC.fst(663,30-667,16); use=Sec2.HIFC.fst(665,14-667,16)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_3
(Prims.Cons x_fe28d8bcde588226b4e538b35321de05_1
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(665,8-667,39)
(and 
;; def=Sec2.HIFC.fst(663,24-667,39); use=Sec2.HIFC.fst(667,37-667,39)
(or label_4

;; def=Sec2.HIFC.fst(665,8-667,39); use=Sec2.HIFC.fst(667,37-667,39)
(Valid 
;; def=Sec2.HIFC.fst(665,8-667,39); use=Sec2.HIFC.fst(667,37-667,39)
(Prims.precedes x_fe28d8bcde588226b4e538b35321de05_1
x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_e09860b75d8922ab497a3e5bc9347578_2)
)


;; def=Sec2.HIFC.fst(665,8-667,39); use=Sec2.HIFC.fst(667,37-667,39)
(Valid 
;; def=Sec2.HIFC.fst(665,8-667,39); use=Sec2.HIFC.fst(667,37-667,39)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
)


;; def=Sec2.HIFC.fst(663,30-667,39); use=Sec2.HIFC.fst(667,37-667,39)
(and 
;; def=Sec2.HIFC.fst(663,30-663,32); use=Sec2.HIFC.fst(667,37-667,39)
(Valid 
;; def=Sec2.HIFC.fst(663,30-663,32); use=Sec2.HIFC.fst(667,37-667,39)
(Prims.op_Equals_Equals_Equals (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_3)
)


;; def=Sec2.HIFC.fst(665,8-667,39); use=Sec2.HIFC.fst(667,37-667,39)
(Valid 
;; def=Sec2.HIFC.fst(665,8-667,39); use=Sec2.HIFC.fst(667,37-667,39)
(Prims.precedes (Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1)
x_0a56e3de562c08d8ab59f4ac6f626a98_4
x_0a56e3de562c08d8ab59f4ac6f626a98_4)
)
)
)


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(665,8-667,39)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list x_fe28d8bcde588226b4e538b35321de05_1))

;; def=Sec2.HIFC.fst(663,33-663,35); use=Sec2.HIFC.fst(665,8-667,39)
(= x_0a56e3de562c08d8ab59f4ac6f626a98_4
@x4)
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(667,20-667,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(664,12-664,87); use=Sec2.HIFC.fst(667,20-667,31)
(iff 
;; def=Sec2.HIFC.fst(664,13-664,38); use=Sec2.HIFC.fst(667,20-667,31)
(Valid 
;; def=Sec2.HIFC.fst(664,13-664,38); use=Sec2.HIFC.fst(667,20-667,31)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
(FStar.List.Tot.Base.op_At x_fe28d8bcde588226b4e538b35321de05_1
@x3
x_0a56e3de562c08d8ab59f4ac6f626a98_4))
)


;; def=Sec2.HIFC.fst(664,44-664,86); use=Sec2.HIFC.fst(667,20-667,31)
(or 
;; def=Sec2.HIFC.fst(664,45-664,63); use=Sec2.HIFC.fst(667,20-667,31)
(Valid 
;; def=Sec2.HIFC.fst(664,45-664,63); use=Sec2.HIFC.fst(667,20-667,31)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
@x3)
)


;; def=Sec2.HIFC.fst(664,67-664,85); use=Sec2.HIFC.fst(667,20-667,31)
(Valid 
;; def=Sec2.HIFC.fst(664,67-664,85); use=Sec2.HIFC.fst(667,20-667,31)
(FStar.List.Tot.Base.memP x_fe28d8bcde588226b4e538b35321de05_1
x_e09860b75d8922ab497a3e5bc9347578_2
x_0a56e3de562c08d8ab59f4ac6f626a98_4)
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(667,20-667,31)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(667,20-667,31)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.append_memP, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_3, binder_x_0a56e3de562c08d8ab59f4ac6f626a98_4, binder_x_e09860b75d8922ab497a3e5bc9347578_2, binder_x_fe28d8bcde588226b4e538b35321de05_1, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equation_FStar.List.Tot.Base.op_At, equation_Prims.eq2, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_Prims.list, l_or-interp, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_Prims.Cons, typing_FStar.List.Tot.Base.op_At

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec append_memP


; <Start encoding let rec append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.append_memP@tok () Term)

; </end encoding let rec append_memP>


; encoding sigelt #push-options "--warn_error -271"


; <Skipped #push-options "--warn_error -271"/>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(676,3-691,54)

(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(677,8-680,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae))

:named refinement_kinding_Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(677,8-680,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(676,3-691,54)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(676,3-691,54)
(and 
;; def=Sec2.HIFC.fst(678,18-678,39); use=Sec2.HIFC.fst(676,3-691,54)
(Valid 
;; def=Sec2.HIFC.fst(678,18-678,39); use=Sec2.HIFC.fst(676,3-691,54)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
@x3)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(679,18-679,47); use=Sec2.HIFC.fst(676,3-691,54)
(Valid 
;; def=Sec2.HIFC.fst(679,18-679,47); use=Sec2.HIFC.fst(676,3-691,54)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x4))
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(676,3-691,54)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(676,3-691,54)
(= @x5
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae))

:named refinement_interpretation_Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae))
;;;;;;;;;;;;;;;;haseq for Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(677,8-680,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae @x0
@x1
@x2))))
:qid haseqTm_refine_78b5e8d7880d43a2142b3aa32e9186ae))

:named haseqTm_refine_78b5e8d7880d43a2142b3aa32e9186ae))
;;;;;;;;;;;;;;;;f0: flow   -> FStar.Pervasives.Lemma (requires FStar.List.Tot.Base.memP f0 fs)       (ensures FStar.List.Tot.Base.memP f0 (fs @ fs'))       [SMTPat (FStar.List.Tot.Base.memP f0 (fs @ fs'))]
(declare-fun Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(676,16-680,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a))

:named kinding_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(676,16-680,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a))

:named Sec2.HIFC_pre_typing_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(676,16-680,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(676,16-680,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x3 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(676,3-691,54)
(Valid 
;; def=Sec2.HIFC.fst(678,18-678,39); use=Sec2.HIFC.fst(676,3-691,54)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
@x2)
)

(HasType @x3
Sec2.HIFC.flow))
(HasType (ApplyTT @x0
@x3)
(Tm_refine_78b5e8d7880d43a2142b3aa32e9186ae @x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a))

:named Sec2.HIFC_interpretation_Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a))
(declare-fun Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a (Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(684,8-687,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a))

:named refinement_kinding_Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(684,8-687,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(635,71-635,97); use=Sec2.HIFC.fst(676,3-691,54)
(not 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(676,3-691,54)
(and 
;; def=Sec2.HIFC.fst(685,18-685,40); use=Sec2.HIFC.fst(676,3-691,54)
(Valid 
;; def=Sec2.HIFC.fst(685,18-685,40); use=Sec2.HIFC.fst(676,3-691,54)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
@x3)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(686,18-686,47); use=Sec2.HIFC.fst(676,3-691,54)
(Valid 
;; def=Sec2.HIFC.fst(686,18-686,47); use=Sec2.HIFC.fst(676,3-691,54)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x4
@x3))
)
)

;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(676,3-691,54)
(not 
;; def=Prims.fst(635,86-635,95); use=Sec2.HIFC.fst(676,3-691,54)
(= @x5
@x1)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a.1))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a))

:named refinement_interpretation_Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(684,8-687,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a @x0
@x1
@x2))))
:qid haseqTm_refine_92d3732274bbe3f4fdf5ca4496f0d64a))

:named haseqTm_refine_92d3732274bbe3f4fdf5ca4496f0d64a))
;;;;;;;;;;;;;;;;f0: flow   -> FStar.Pervasives.Lemma (requires FStar.List.Tot.Base.memP f0 fs')       (ensures FStar.List.Tot.Base.memP f0 (fs @ fs'))       [SMTPat (FStar.List.Tot.Base.memP f0 (fs @ fs'))]
(declare-fun Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8 (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(683,16-687,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8))

:named kinding_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(683,16-687,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8 @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8))

:named Sec2.HIFC_pre_typing_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(683,16-687,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8 @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(683,16-687,47); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x3 Term))
 (! (implies (and 
;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(676,3-691,54)
(Valid 
;; def=Sec2.HIFC.fst(685,18-685,40); use=Sec2.HIFC.fst(676,3-691,54)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
@x2)
)

(HasType @x3
Sec2.HIFC.flow))
(HasType (ApplyTT @x0
@x3)
(Tm_refine_92d3732274bbe3f4fdf5ca4496f0d64a @x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8 @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8))

:named Sec2.HIFC_interpretation_Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8))

; Encoding query formula : forall (fs: Sec2.HIFC.flows) (fs': Sec2.HIFC.flows).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;             (match fs with
;               | [] -> Prims.l_False
;               | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;             (forall (from: Prims.int) (to: Prims.int).
;                 FStar.Set.mem from
;                   (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true /\
;                 FStar.Set.mem to
;                   (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true /\ from <> to == true ==>
;                 (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                     (match
;                         match fs with
;                         | [] -> fs'
;                         | a :: tl -> a :: (tl @ fs')
;                       with
;                       | [] -> Prims.l_False
;                       | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                     (FStar.Set.mem from
;                         (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                       true) /\
;                     (FStar.Set.mem to
;                         (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                       true)))) /\
;         (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;             (match fs' with
;               | [] -> Prims.l_False
;               | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;             (forall (from: Prims.int) (to: Prims.int).
;                 FStar.Set.mem from
;                   (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true /\
;                 FStar.Set.mem to
;                   (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true /\ from <> to == true ==>
;                 (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                     (match
;                         match fs with
;                         | [] -> fs'
;                         | a :: tl -> a :: (tl @ fs')
;                       with
;                       | [] -> Prims.l_False
;                       | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                     (FStar.Set.mem from
;                         (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                       true) /\
;                     (FStar.Set.mem to
;                         (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                       true)))) ==>
;         p pure_result) ==>
;     (forall (f0: Sec2.HIFC.flow).
;         (*  - Could not prove post-condition
; *)
;         forall (p: Prims.pure_post Prims.unit).
;           FStar.List.Tot.Base.memP f0 fs /\
;           (forall (pure_result: Prims.unit).
;               FStar.List.Tot.Base.memP f0 (fs @ fs') ==> p pure_result) ==>
;           (forall (pure_result: Prims.unit).
;               (FStar.List.Tot.Base.memP f0 (fs @ fs') <==>
;                 FStar.List.Tot.Base.memP f0 fs \/ FStar.List.Tot.Base.memP f0 fs') ==>
;               p pure_result)) /\
;     (forall (any_result:
;         (f0: Sec2.HIFC.flow
;             -> FStar.Pervasives.Lemma (requires FStar.List.Tot.Base.memP f0 fs)
;                 (ensures FStar.List.Tot.Base.memP f0 (fs @ fs'))
;                 [SMTPat (FStar.List.Tot.Base.memP f0 (fs @ fs'))])).
;         (forall (f0: Sec2.HIFC.flow). {:pattern FStar.List.Tot.Base.memP f0 (fs @ fs')}
;             FStar.List.Tot.Base.memP f0 fs ==> FStar.List.Tot.Base.memP f0 (fs @ fs')) ==>
;         (forall (f0: Sec2.HIFC.flow).
;             (*  - Could not prove post-condition
; *)
;             forall (p: Prims.pure_post Prims.unit).
;               FStar.List.Tot.Base.memP f0 fs' /\
;               (forall (pure_result: Prims.unit).
;                   FStar.List.Tot.Base.memP f0 (fs @ fs') ==> p pure_result) ==>
;               (forall (pure_result: Prims.unit).
;                   (FStar.List.Tot.Base.memP f0 (fs @ fs') <==>
;                     FStar.List.Tot.Base.memP f0 fs \/ FStar.List.Tot.Base.memP f0 fs') ==>
;                   p pure_result)) /\
;         (forall (any_result:
;             (f0: Sec2.HIFC.flow
;                 -> FStar.Pervasives.Lemma (requires FStar.List.Tot.Base.memP f0 fs')
;                     (ensures FStar.List.Tot.Base.memP f0 (fs @ fs'))
;                     [SMTPat (FStar.List.Tot.Base.memP f0 (fs @ fs'))])).
;             (forall (f0: Sec2.HIFC.flow). {:pattern FStar.List.Tot.Base.memP f0 (fs @ fs')}
;                 FStar.List.Tot.Base.memP f0 fs' ==> FStar.List.Tot.Base.memP f0 (fs @ fs')) ==>
;             Sec2.HIFC.flows_included_in fs (fs @ fs') /\
;             (forall (pure_result: Prims.unit).
;                 (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                     (match fs with
;                       | [] -> Prims.l_False
;                       | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;                     (forall (from: Prims.int) (to: Prims.int).
;                         FStar.Set.mem from
;                           (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                         true /\
;                         FStar.Set.mem to
;                           (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                         true /\ from <> to == true ==>
;                         (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                             (match
;                                 match fs with
;                                 | [] -> fs'
;                                 | a :: tl -> a :: (tl @ fs')
;                               with
;                               | [] -> Prims.l_False
;                               | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                             (FStar.Set.mem from
;                                 (match f1 as proj_ret returns$ FStar.Set.set Prims.int with
;                                   | _1, _ -> _1) ==
;                               true) /\
;                             (FStar.Set.mem to
;                                 (match f1 as proj_ret returns$ FStar.Set.set Prims.int with
;                                   | _, _2 -> _2) ==
;                               true)))) ==>
;                 Sec2.HIFC.flows_included_in fs' (fs @ fs') /\
;                 (forall (pure_result: Prims.unit).
;                     (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                         (match fs' with
;                           | [] -> Prims.l_False
;                           | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;                         (forall (from: Prims.int) (to: Prims.int).
;                             FStar.Set.mem from
;                               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with
;                                 | _1, _ -> _1) ==
;                             true /\
;                             FStar.Set.mem to
;                               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with
;                                 | _, _2 -> _2) ==
;                             true /\ from <> to == true ==>
;                             (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                                 (match
;                                     match fs with
;                                     | [] -> fs'
;                                     | a :: tl -> a :: (tl @ fs')
;                                   with
;                                   | [] -> Prims.l_False
;                                   | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                                 (FStar.Set.mem from
;                                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with
;                                       | _1, _ -> _1) ==
;                                   true) /\
;                                 (FStar.Set.mem to
;                                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with
;                                       | _, _2 -> _2) ==
;                                   true)))) ==>
;                     p pure_result))))


; Context: While encoding a query
; While typechecking the top-level declaration `let weaken_flows_append`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x3 Term))
 (! (implies (and (or label_1
(HasType @x3
Prims.unit))

;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb5 @x0))
(ite (is-Prims.Nil @lb5)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb5)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x4
(Prims.Cons_hd @lb5))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
(Prims.Cons_tl @lb5))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
Prims.int)
(HasType @x6
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb7 @x4))
(FStar.Pervasives.Native.Mktuple2__1 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x6
(let ((@lb7 @x4))
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x5
@x6)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(or label_2

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x7 Term))
 (! (and (HasType @x7
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb8 (let ((@lb8 @x0))
(ite (is-Prims.Nil @lb8)
@x1
(ite (is-Prims.Cons @lb8)
(Prims.Cons Sec2.HIFC.flow
(Prims.Cons_hd @lb8)
(FStar.List.Tot.Base.append Sec2.HIFC.flow
(Prims.Cons_tl @lb8)
@x1))
Tm_unit)))))
(ite (is-Prims.Nil @lb8)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb8)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x7
(Prims.Cons_hd @lb8))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x7
(Prims.Cons_tl @lb8))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb8 @x7))
(FStar.Pervasives.Native.Mktuple2__1 @lb8)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x6
(let ((@lb8 @x7))
(FStar.Pervasives.Native.Mktuple2__2 @lb8)))
(BoxBool true))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb5 @x1))
(ite (is-Prims.Nil @lb5)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb5)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x4
(Prims.Cons_hd @lb5))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
(Prims.Cons_tl @lb5))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
Prims.int)
(HasType @x6
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb7 @x4))
(FStar.Pervasives.Native.Mktuple2__1 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x6
(let ((@lb7 @x4))
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x5
@x6)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x7 Term))
 (! (and (HasType @x7
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb8 (let ((@lb8 @x0))
(ite (is-Prims.Nil @lb8)
@x1
(ite (is-Prims.Cons @lb8)
(Prims.Cons Sec2.HIFC.flow
(Prims.Cons_hd @lb8)
(FStar.List.Tot.Base.append Sec2.HIFC.flow
(Prims.Cons_tl @lb8)
@x1))
Tm_unit)))))
(ite (is-Prims.Nil @lb8)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb8)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x7
(Prims.Cons_hd @lb8))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x7
(Prims.Cons_tl @lb8))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb8 @x7))
(FStar.Pervasives.Native.Mktuple2__1 @lb8)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x6
(let ((@lb8 @x7))
(FStar.Pervasives.Native.Mktuple2__2 @lb8)))
(BoxBool true))
)
 
;;no pats
:qid @query.8))
)
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(676,3-691,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(676,3-691,54)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(676,3-691,54)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(676,3-691,54)
(ApplyTT @x2
@x3)
)
)
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(676,3-691,54)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Sec2.HIFC.flow)

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(678,18-678,39); use=Sec2.HIFC.fst(681,8-681,29)
(Valid 
;; def=Sec2.HIFC.fst(678,18-678,39); use=Sec2.HIFC.fst(681,8-681,29)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
@x0)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(681,8-681,29)
(forall ((@x5 Term))
 (! (implies (and (or label_4
(HasType @x5
Prims.unit))

;; def=Sec2.HIFC.fst(679,18-679,47); use=Sec2.HIFC.fst(681,8-681,29)
(or label_5

;; def=Sec2.HIFC.fst(679,18-679,47); use=Sec2.HIFC.fst(681,8-681,29)
(Valid 
;; def=Sec2.HIFC.fst(679,18-679,47); use=Sec2.HIFC.fst(681,8-681,29)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(681,8-681,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(681,8-681,29)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(681,8-681,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(681,8-681,29)
(ApplyTT @x4
@x5)
)
)
:qid @query.11))
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(681,8-681,29)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(664,12-664,87); use=Sec2.HIFC.fst(681,8-681,19)
(iff 
;; def=Sec2.HIFC.fst(664,13-664,38); use=Sec2.HIFC.fst(681,8-681,19)
(Valid 
;; def=Sec2.HIFC.fst(664,13-664,38); use=Sec2.HIFC.fst(681,8-681,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)


;; def=Sec2.HIFC.fst(664,44-664,86); use=Sec2.HIFC.fst(681,8-681,19)
(or 
;; def=Sec2.HIFC.fst(664,45-664,63); use=Sec2.HIFC.fst(681,8-681,19)
(Valid 
;; def=Sec2.HIFC.fst(664,45-664,63); use=Sec2.HIFC.fst(681,8-681,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
@x0)
)


;; def=Sec2.HIFC.fst(664,67-664,85); use=Sec2.HIFC.fst(681,8-681,19)
(Valid 
;; def=Sec2.HIFC.fst(664,67-664,85); use=Sec2.HIFC.fst(681,8-681,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
@x1)
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(681,8-681,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(681,8-681,29)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Tm_arrow_0c28bd04ce75a20af4e3591b8493b25a @x1
@x0))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(678,18-678,39); use=Sec2.HIFC.fst(678,18-678,39)
(Valid 
;; def=Sec2.HIFC.fst(678,18-678,39); use=Sec2.HIFC.fst(678,18-678,39)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
@x0)
)
)

;; def=Sec2.HIFC.fst(679,18-679,47); use=Sec2.HIFC.fst(679,18-679,47)
(Valid 
;; def=Sec2.HIFC.fst(679,18-679,47); use=Sec2.HIFC.fst(679,18-679,47)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)
)
 

:pattern ((FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
Sec2.HIFC.flow
@x4
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1)))
:qid @query.14))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(676,3-691,54)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Sec2.HIFC.flow)

;; def=Prims.fst(406,51-406,91); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=Sec2.HIFC.fst(685,18-685,40); use=Sec2.HIFC.fst(688,8-688,29)
(Valid 
;; def=Sec2.HIFC.fst(685,18-685,40); use=Sec2.HIFC.fst(688,8-688,29)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
@x1)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(688,8-688,29)
(forall ((@x6 Term))
 (! (implies (and (or label_6
(HasType @x6
Prims.unit))

;; def=Sec2.HIFC.fst(686,18-686,47); use=Sec2.HIFC.fst(688,8-688,29)
(or label_7

;; def=Sec2.HIFC.fst(686,18-686,47); use=Sec2.HIFC.fst(688,8-688,29)
(Valid 
;; def=Sec2.HIFC.fst(686,18-686,47); use=Sec2.HIFC.fst(688,8-688,29)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(688,8-688,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(688,8-688,29)
(ApplyTT @x5
@x6)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(688,8-688,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(688,8-688,29)
(ApplyTT @x5
@x6)
)
)
:qid @query.17))
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(688,8-688,29)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=Sec2.HIFC.fst(664,12-664,87); use=Sec2.HIFC.fst(688,8-688,19)
(iff 
;; def=Sec2.HIFC.fst(664,13-664,38); use=Sec2.HIFC.fst(688,8-688,19)
(Valid 
;; def=Sec2.HIFC.fst(664,13-664,38); use=Sec2.HIFC.fst(688,8-688,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)


;; def=Sec2.HIFC.fst(664,44-664,86); use=Sec2.HIFC.fst(688,8-688,19)
(or 
;; def=Sec2.HIFC.fst(664,45-664,63); use=Sec2.HIFC.fst(688,8-688,19)
(Valid 
;; def=Sec2.HIFC.fst(664,45-664,63); use=Sec2.HIFC.fst(688,8-688,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
@x0)
)


;; def=Sec2.HIFC.fst(664,67-664,85); use=Sec2.HIFC.fst(688,8-688,19)
(Valid 
;; def=Sec2.HIFC.fst(664,67-664,85); use=Sec2.HIFC.fst(688,8-688,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x4
@x1)
)
)
)
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(688,8-688,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(688,8-688,29)
(ApplyTT @x5
@x6)
)
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Tm_arrow_a80d71aa30a4e726f8b990d2a98ccfd8 @x0
@x1))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(676,3-691,54)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Sec2.HIFC.flow)

;; def=Sec2.HIFC.fst(685,18-685,40); use=Sec2.HIFC.fst(685,18-685,40)
(Valid 
;; def=Sec2.HIFC.fst(685,18-685,40); use=Sec2.HIFC.fst(685,18-685,40)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
@x1)
)
)

;; def=Sec2.HIFC.fst(686,18-686,47); use=Sec2.HIFC.fst(686,18-686,47)
(Valid 
;; def=Sec2.HIFC.fst(686,18-686,47); use=Sec2.HIFC.fst(686,18-686,47)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)
)
 

:pattern ((FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
Sec2.HIFC.flow
@x5
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1)))
:qid @query.20))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(690,4-690,17)
(and 
;; def=Sec2.HIFC.fst(690,18-690,53); use=Sec2.HIFC.fst(690,4-690,17)
(or label_8

;; def=Sec2.HIFC.fst(690,18-690,53); use=Sec2.HIFC.fst(690,4-690,17)
(Valid 
;; def=Sec2.HIFC.fst(690,18-690,53); use=Sec2.HIFC.fst(690,4-690,17)
(Sec2.HIFC.flows_included_in @x0
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(690,4-690,17)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb7 @x0))
(ite (is-Prims.Nil @lb7)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb7)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x6
(Prims.Cons_hd @lb7))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(Prims.Cons_tl @lb7))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
Prims.int)
(HasType @x8
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x7
(let ((@lb9 @x6))
(FStar.Pervasives.Native.Mktuple2__1 @lb9)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x8
(let ((@lb9 @x6))
(FStar.Pervasives.Native.Mktuple2__2 @lb9)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x7
@x8)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x9 Term))
 (! (and (HasType @x9
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb10 (let ((@lb10 @x0))
(ite (is-Prims.Nil @lb10)
@x1
(ite (is-Prims.Cons @lb10)
(Prims.Cons Sec2.HIFC.flow
(Prims.Cons_hd @lb10)
(FStar.List.Tot.Base.append Sec2.HIFC.flow
(Prims.Cons_tl @lb10)
@x1))
Tm_unit)))))
(ite (is-Prims.Nil @lb10)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb10)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x9
(Prims.Cons_hd @lb10))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x9
(Prims.Cons_tl @lb10))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x7
(let ((@lb10 @x9))
(FStar.Pervasives.Native.Mktuple2__1 @lb10)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x8
(let ((@lb10 @x9))
(FStar.Pervasives.Native.Mktuple2__2 @lb10)))
(BoxBool true))
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(691,4-691,17)
(and 
;; def=Sec2.HIFC.fst(691,18-691,54); use=Sec2.HIFC.fst(691,4-691,17)
(or label_9

;; def=Sec2.HIFC.fst(691,18-691,54); use=Sec2.HIFC.fst(691,4-691,17)
(Valid 
;; def=Sec2.HIFC.fst(691,18-691,54); use=Sec2.HIFC.fst(691,4-691,17)
(Sec2.HIFC.flows_included_in @x1
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x0
@x1))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(691,4-691,17)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb8 @x1))
(ite (is-Prims.Nil @lb8)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb8)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x7
(Prims.Cons_hd @lb8))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x7
(Prims.Cons_tl @lb8))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
Prims.int)
(HasType @x9
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x8
(let ((@lb10 @x7))
(FStar.Pervasives.Native.Mktuple2__1 @lb10)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x9
(let ((@lb10 @x7))
(FStar.Pervasives.Native.Mktuple2__2 @lb10)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x8
@x9)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x10 Term))
 (! (and (HasType @x10
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb11 (let ((@lb11 @x0))
(ite (is-Prims.Nil @lb11)
@x1
(ite (is-Prims.Cons @lb11)
(Prims.Cons Sec2.HIFC.flow
(Prims.Cons_hd @lb11)
(FStar.List.Tot.Base.append Sec2.HIFC.flow
(Prims.Cons_tl @lb11)
@x1))
Tm_unit)))))
(ite (is-Prims.Nil @lb11)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb11)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x10
(Prims.Cons_hd @lb11))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x10
(Prims.Cons_tl @lb11))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x8
(let ((@lb11 @x10))
(FStar.Pervasives.Native.Mktuple2__1 @lb11)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x9
(let ((@lb11 @x10))
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(BoxBool true))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(691,4-691,17)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(691,4-691,17)
(ApplyTT @x2
@x6)
)
)
 
;;no pats
:qid @query.25))
)
)
 
;;no pats
:qid @query.21))
)
)
 
;;no pats
:qid @query.19))
)
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.weaken_flows_append, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows_included_in, equation_Sec2.HIFC.label, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let weaken_flows_append


; <Start encoding let weaken_flows_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.weaken_flows_append (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.weaken_flows_append@tok () Term)

; </end encoding let weaken_flows_append>


; encoding sigelt #pop-options


; <Skipped #pop-options/>

;;; Fact-ids: Name Prims.op_Negation; Namespace Prims
(assert (! 
;; def=Prims.fst(534,4-534,15); use=Prims.fst(534,4-534,15)
(forall ((@x0 Term))
 (! (= (Prims.op_Negation @x0)
(BoxBool (not (BoxBool_proj_0 @x0))))
 

:pattern ((Prims.op_Negation @x0))
:qid primitive_Prims.op_Negation))

:named primitive_Prims.op_Negation))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;;;;;;;;;;;;;;;Lemma: Sec2.HIFC.weaken_flows_append
;;; Fact-ids: Name Sec2.HIFC.weaken_flows_append; Namespace Sec2.HIFC
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.flows)
(HasType @x1
Sec2.HIFC.flows))

;; def=Sec2.HIFC.fst(673,19-674,81); use=Sec2.HIFC.fst(673,19-674,81)
(and 
;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 @x0))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb6 (let ((@lb6 @x0))
(ite (is-Prims.Nil @lb6)
@x1
(ite (is-Prims.Cons @lb6)
(Prims.Cons Sec2.HIFC.flow
(Prims.Cons_hd @lb6)
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
Sec2.HIFC.flow
(Prims.Cons_tl @lb6)
@x1))
Tm_unit)))))
(ite (is-Prims.Nil @lb6)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb6)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x5
(Prims.Cons_hd @lb6))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
Sec2.HIFC.flow
@x5
(Prims.Cons_tl @lb6))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid lemma_Sec2.HIFC.weaken_flows_append.3))
)
 
;;no pats
:qid lemma_Sec2.HIFC.weaken_flows_append.2))
)
 
;;no pats
:qid lemma_Sec2.HIFC.weaken_flows_append.1))


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 @x1))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb6 (let ((@lb6 @x0))
(ite (is-Prims.Nil @lb6)
@x1
(ite (is-Prims.Cons @lb6)
(Prims.Cons Sec2.HIFC.flow
(Prims.Cons_hd @lb6)
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
Sec2.HIFC.flow
(Prims.Cons_tl @lb6)
@x1))
Tm_unit)))))
(ite (is-Prims.Nil @lb6)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb6)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x5
(Prims.Cons_hd @lb6))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
Sec2.HIFC.flow
@x5
(Prims.Cons_tl @lb6))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid lemma_Sec2.HIFC.weaken_flows_append.6))
)
 
;;no pats
:qid lemma_Sec2.HIFC.weaken_flows_append.5))
)
 
;;no pats
:qid lemma_Sec2.HIFC.weaken_flows_append.4))
)
)
 

:pattern (Tm_unit)
:qid lemma_Sec2.HIFC.weaken_flows_append))
:named lemma_Sec2.HIFC.weaken_flows_append))
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)





; Encoding query formula : (forall (a: Type) (r0: Sec2.HIFC.label) (w0: Sec2.HIFC.label) (fs0: Sec2.HIFC.flows)
;     (p: Sec2.HIFC.pre) (q: Sec2.HIFC.post a) (r1: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;     (fs1: Sec2.HIFC.flows) (p': (_: Sec2.HIFC.store -> Prims.logical))
;     (q': (_: Sec2.HIFC.store -> _: a -> _: Sec2.HIFC.store -> Prims.logical))
;     (p: Prims.pure_post (Sec2.HIFC.hifc a r1 w1 fs1 p' q')).
;     Sec2.HIFC.label_inclusion r0 r1 /\ Sec2.HIFC.label_inclusion w0 w1 ==>
;     (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;         Prims.op_Negation (Prims.op_Negation (match fs0 with
;                 | [] -> true
;                 | _ -> false) &&
;             Prims.op_Negation (match fs0 with
;                 | _ :: _ -> true
;                 | _ -> false)) /\
;         ((match fs0 with
;             | [] -> Prims.l_False
;             | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;           (forall (from: Prims.int) (to: Prims.int).
;               FStar.Set.mem from
;                 (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;               true /\
;               FStar.Set.mem to
;                 (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;               true /\ from <> to == true ==>
;               (forall (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                   Prims.op_Negation (Prims.op_Negation (match fs1 with
;                           | [] -> true
;                           | _ -> false) &&
;                       Prims.op_Negation (match fs1 with
;                           | _ :: _ -> true
;                           | _ -> false))))))) /\
; (forall (a: Type) (r0: Sec2.HIFC.label) (w0: Sec2.HIFC.label) (fs0: Sec2.HIFC.flows)
;     (p: Sec2.HIFC.pre) (q: Sec2.HIFC.post a) (r1: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;     (fs1: Sec2.HIFC.flows) (p': (_: Sec2.HIFC.store -> Prims.logical))
;     (q': (_: Sec2.HIFC.store -> _: a -> _: Sec2.HIFC.store -> Prims.logical))
;     (p: Prims.pure_post (Sec2.HIFC.hifc a r1 w1 fs1 p' q'))
;     (q: Prims.pure_post (Sec2.HIFC.hifc a r1 w1 fs1 p' q')).
;     (forall (x: Sec2.HIFC.hifc a r1 w1 fs1 p' q'). p x ==> q x) ==>
;     Sec2.HIFC.label_inclusion r0 r1 /\ Sec2.HIFC.label_inclusion w0 w1 /\
;     (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;         (match fs0 with
;           | [] -> Prims.l_False
;           | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;         (forall (from: Prims.int) (to: Prims.int).
;             FStar.Set.mem from
;               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;             true /\
;             FStar.Set.mem to
;               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;             true /\ from <> to == true ==>
;             (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                 (match fs1 with
;                   | [] -> Prims.l_False
;                   | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                 (FStar.Set.mem from
;                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                   true) /\
;                 (FStar.Set.mem to
;                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                   true)))) /\ (forall (s: Sec2.HIFC.store). p' s ==> p s) /\
;     (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store). p' s0 /\ q s0 x s1 ==> q' s0 x s1) /\
;     (forall (pure_result: Sec2.HIFC.hifc a r1 w1 fs1 p' q'). Prims.auto_squash (p pure_result)) ==>
;     Sec2.HIFC.label_inclusion r0 r1 /\ Sec2.HIFC.label_inclusion w0 w1 /\
;     (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;         (match fs0 with
;           | [] -> Prims.l_False
;           | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;         (forall (from: Prims.int) (to: Prims.int).
;             FStar.Set.mem from
;               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;             true /\
;             FStar.Set.mem to
;               (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;             true /\ from <> to == true ==>
;             (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                 (match fs1 with
;                   | [] -> Prims.l_False
;                   | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                 (FStar.Set.mem from
;                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                   true) /\
;                 (FStar.Set.mem to
;                     (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                   true)))) /\ (forall (s: Sec2.HIFC.store). p' s ==> p s) /\
;     (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store). p' s0 /\ q s0 x s1 ==> q' s0 x s1) /\
;     (forall (pure_result: Sec2.HIFC.hifc a r1 w1 fs1 p' q'). Prims.auto_squash (q pure_result)))


; Context: While encoding a query
; While checking the subcomp combinator
; While checking layered effect definition `Sec2.HIFC.HIFC`
; While typechecking the top-level declaration `layered_effect { HIFC ... }`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (and (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flows)
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0))
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.label)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(HasType @x10
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0))
(HasType @x11
(Prims.pure_post (Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10)))

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x1
@x6)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x2
@x7)
)
)
(forall ((@x12 Term))
 (! (implies (HasType @x12
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(and (or label_1
(not (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_Negation (let ((@lb13 @x3))
(ite (is-Prims.Nil @lb13)
(BoxBool true)
(BoxBool false))))
(Prims.op_Negation (let ((@lb13 @x3))
(ite (is-Prims.Cons @lb13)
(BoxBool true)
(BoxBool false))))))))
(implies (let ((@lb13 @x3))
(ite (is-Prims.Nil @lb13)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(705,14-705,22)
false

(ite (is-Prims.Cons @lb13)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(705,14-705,22)
(= @x12
(Prims.Cons_hd @lb13))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x12
(Prims.Cons_tl @lb13))
)
)

Unreachable)))
(forall ((@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x13
Prims.int)
(HasType @x14
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x13
(let ((@lb15 @x12))
(FStar.Pervasives.Native.Mktuple2__1 @lb15)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb15 @x12))
(FStar.Pervasives.Native.Mktuple2__2 @lb15)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (Prims.op_disEquality Prims.int
@x13
@x14)
(BoxBool true))
)
(forall ((@x15 Term))
 (! (implies (HasType @x15
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(or label_2
(not (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_Negation (let ((@lb16 @x8))
(ite (is-Prims.Nil @lb16)
(BoxBool true)
(BoxBool false))))
(Prims.op_Negation (let ((@lb16 @x8))
(ite (is-Prims.Cons @lb16)
(BoxBool true)
(BoxBool false)))))))))
 
;;no pats
:qid @query.3)))
 
;;no pats
:qid @query.2)))))
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query))
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flows)
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0))
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.label)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Tm_arrow_55cebe27886a2171323030e813be5a0e)
(HasType @x10
(Tm_arrow_e5cbf9b4cae3455000588dc1cbe9f953 @x0))
(HasType @x11
(Prims.pure_post (Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10)))
(HasType @x12
(Prims.pure_post (Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10)))

;; def=Prims.fst(334,28-334,55); use=Prims.fst(334,28-334,55)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10))

;; def=Prims.fst(334,43-334,46); use=Prims.fst(334,43-334,46)
(Valid 
;; def=Prims.fst(334,43-334,46); use=Prims.fst(334,43-334,46)
(ApplyTT @x11
@x13)
)
)

;; def=Prims.fst(334,51-334,54); use=Prims.fst(334,51-334,54)
(Valid 
;; def=Prims.fst(334,51-334,54); use=Prims.fst(334,51-334,54)
(ApplyTT @x12
@x13)
)
)
 
;;no pats
:qid @query.5))


;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x1
@x6)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x2
@x7)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb14 @x3))
(ite (is-Prims.Nil @lb14)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(705,14-705,22)
false

(ite (is-Prims.Cons @lb14)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(705,14-705,22)
(= @x13
(Prims.Cons_hd @lb14))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x13
(Prims.Cons_tl @lb14))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
Prims.int)
(HasType @x15
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb16 @x13))
(FStar.Pervasives.Native.Mktuple2__1 @lb16)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x15
(let ((@lb16 @x13))
(FStar.Pervasives.Native.Mktuple2__2 @lb16)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (Prims.op_disEquality Prims.int
@x14
@x15)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(705,14-705,22)
(exists ((@x16 Term))
 (! (and (HasType @x16
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb17 @x8))
(ite (is-Prims.Nil @lb17)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(705,14-705,22)
false

(ite (is-Prims.Cons @lb17)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(705,14-705,22)
(= @x16
(Prims.Cons_hd @lb17))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x16
(Prims.Cons_tl @lb17))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb17 @x16))
(FStar.Pervasives.Native.Mktuple2__1 @lb17)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x15
(let ((@lb17 @x16))
(FStar.Pervasives.Native.Mktuple2__2 @lb17)))
(BoxBool true))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))


;; def=Sec2.HIFC.fst(632,15-632,39); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(632,26-632,30); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(632,26-632,30); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x9
@x13)
)
)

;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x4
@x13)
)
)
 
;;no pats
:qid @query.9))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x13
Sec2.HIFC.store)
(HasType @x14
@x0)
(HasType @x15
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x9
@x13)
)


;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT (ApplyTT (ApplyTT @x5
@x13)
@x14)
@x15)
)
)

;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT (ApplyTT (ApplyTT @x10
@x13)
@x14)
@x15)
)
)
 
;;no pats
:qid @query.10))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.11))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(705,14-705,22)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(or label_3

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x1
@x6)
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(or label_4

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x2
@x7)
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb14 @x3))
(ite (is-Prims.Nil @lb14)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(705,14-705,22)
false

(ite (is-Prims.Cons @lb14)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(705,14-705,22)
(= @x13
(Prims.Cons_hd @lb14))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x13
(Prims.Cons_tl @lb14))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x14
Prims.int)
(HasType @x15
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb16 @x13))
(FStar.Pervasives.Native.Mktuple2__1 @lb16)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x15
(let ((@lb16 @x13))
(FStar.Pervasives.Native.Mktuple2__2 @lb16)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (Prims.op_disEquality Prims.int
@x14
@x15)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(705,14-705,22)
(or label_5

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(705,14-705,22)
(exists ((@x16 Term))
 (! (and (HasType @x16
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb17 @x8))
(ite (is-Prims.Nil @lb17)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(705,14-705,22)
false

(ite (is-Prims.Cons @lb17)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(705,14-705,22)
(= @x16
(Prims.Cons_hd @lb17))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(705,14-705,22)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x16
(Prims.Cons_tl @lb17))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x14
(let ((@lb17 @x16))
(FStar.Pervasives.Native.Mktuple2__1 @lb17)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(705,14-705,22)
(= (FStar.Set.mem Prims.int
@x15
(let ((@lb17 @x16))
(FStar.Pervasives.Native.Mktuple2__2 @lb17)))
(BoxBool true))
)
 
;;no pats
:qid @query.14))
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))


;; def=Sec2.HIFC.fst(632,15-632,39); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(632,26-632,30); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(632,26-632,30); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x9
@x13)
)
)

;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(or label_6

;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x4
@x13)
)
)
)
 
;;no pats
:qid @query.15))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x13 Term) (@x14 Term) (@x15 Term))
 (! (implies (and (HasType @x13
Sec2.HIFC.store)
(HasType @x14
@x0)
(HasType @x15
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x9
@x13)
)


;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT (ApplyTT (ApplyTT @x5
@x13)
@x14)
@x15)
)
)

;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(705,14-705,22)
(or label_7

;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT (ApplyTT (ApplyTT @x10
@x13)
@x14)
@x15)
)
)
)
 
;;no pats
:qid @query.16))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(705,14-705,22)
(or label_8

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x12
@x13)
)
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.4))))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.HIFC, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, bool_inversion, bool_typing, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, fuel_guarded_inversion_Prims.list, primitive_Prims.op_AmpAmp, primitive_Prims.op_Negation, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (a: Type) (r0: Sec2.HIFC.label) (w0: Sec2.HIFC.label) (f0: Sec2.HIFC.flows)
;   (p0: Sec2.HIFC.pre) (q0: Sec2.HIFC.post a) (r1: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;   (f1: Sec2.HIFC.flows) (p1: Sec2.HIFC.pre) (q1: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hifc a r0 w0 f0 p0 q0) (g: Sec2.HIFC.hifc a r1 w1 f1 p1 q1) (p: Prims.bool)
;   (_: Prims.squash p).
;   Sec2.HIFC.label_inclusion r0 (Sec2.HIFC.union r0 r1) /\
;   Sec2.HIFC.label_inclusion w0 (Sec2.HIFC.union w0 w1) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match f0 with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (match f0 @ f1 with
;                 | [] -> Prims.l_False
;                 | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s: Sec2.HIFC.store).
;       (match p with
;         | true -> p0 s
;         | _ -> p1 s) ==>
;       p0 s) /\
;   (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store).
;       (match p with
;         | true -> p0 s0
;         | _ -> p1 s0) /\ q0 s0 x s1 ==>
;       (match p with
;         | true -> q0 s0 x s1
;         | _ -> q1 s0 x s1))


; Context: While encoding a query
; While checking if-then-else soundness
; While checking layered effect definition `Sec2.HIFC.HIFC`
; While typechecking the top-level declaration `layered_effect { HIFC ... }`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flows)
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0))
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.label)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Sec2.HIFC.pre)
(HasType @x10
(Sec2.HIFC.post @x0))
(HasType @x11
(Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5))
(HasType @x12
(Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10))
(HasType @x13
Prims.bool)
(HasType @x14
(Prims.squash (Prims.b2t @x13))))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(705,14-705,22)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x1
(Sec2.HIFC.union @x1
@x6))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x2
(Sec2.HIFC.union @x2
@x7))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb16 @x3))
(ite (is-Prims.Nil @lb16)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb16)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x15
(Prims.Cons_hd @lb16))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x15
(Prims.Cons_tl @lb16))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x16
Prims.int)
(HasType @x17
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x16
(let ((@lb18 @x15))
(FStar.Pervasives.Native.Mktuple2__1 @lb18)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x17
(let ((@lb18 @x15))
(FStar.Pervasives.Native.Mktuple2__2 @lb18)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x16
@x17)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x18 Term))
 (! (and (HasType @x18
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb19 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x8)))
(ite (is-Prims.Nil @lb19)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb19)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x18
(Prims.Cons_hd @lb19))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x18
(Prims.Cons_tl @lb19))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x16
(let ((@lb19 @x18))
(FStar.Pervasives.Native.Mktuple2__1 @lb19)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x17
(let ((@lb19 @x18))
(FStar.Pervasives.Native.Mktuple2__2 @lb19)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(632,15-632,39); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Sec2.HIFC.store)
(let ((@lb16 @x13))
(ite (= @lb16
(BoxBool true))

;; def=Sec2.HIFC.fst(660,32-660,36); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(660,32-660,36); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT @x4
@x15)
)


;; def=Sec2.HIFC.fst(660,42-660,46); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(660,42-660,46); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT @x9
@x15)
)
)))

;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(or label_4

;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x4
@x15)
)
)
)
 
;;no pats
:qid @query.4))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x15
Sec2.HIFC.store)
(HasType @x16
@x0)
(HasType @x17
Sec2.HIFC.store)
(let ((@lb18 @x13))
(ite (= @lb18
(BoxBool true))

;; def=Sec2.HIFC.fst(660,32-660,36); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(660,32-660,36); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT @x4
@x15)
)


;; def=Sec2.HIFC.fst(660,42-660,46); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(660,42-660,46); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT @x9
@x15)
)
))

;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT (ApplyTT (ApplyTT @x5
@x15)
@x16)
@x17)
)
)
(let ((@lb18 @x13))
(ite (= @lb18
(BoxBool true))

;; def=Sec2.HIFC.fst(661,38-661,48); use=Sec2.HIFC.fst(706,19-706,31)
(or label_5

;; def=Sec2.HIFC.fst(661,38-661,48); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(661,38-661,48); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT (ApplyTT (ApplyTT @x5
@x15)
@x16)
@x17)
)
)


;; def=Sec2.HIFC.fst(661,54-661,64); use=Sec2.HIFC.fst(706,19-706,31)
(or label_6

;; def=Sec2.HIFC.fst(661,54-661,64); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(661,54-661,64); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT (ApplyTT (ApplyTT @x10
@x15)
@x16)
@x17)
)
)
)))
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.HIFC, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, b2t_def, bool_inversion, constructor_distinct_Prims.Cons, data_elim_Prims.Cons, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Prims.squash, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_Prims.list, int_inversion, lemma_FStar.List.Tot.Properties.append_l_nil, lemma_FStar.Set.mem_union, lemma_Sec2.HIFC.weaken_flows_append, primitive_Prims.op_BarBar, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c, typing_Prims.int, typing_Sec2.HIFC.flow

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop
(push) ;; push{2

; Starting query at dummy(0,0-0,0)

(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_de09779676242898794a0b057d5f5bb4 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(706,19-706,31); use=Sec2.HIFC.fst(706,19-706,31)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_de09779676242898794a0b057d5f5bb4 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_de09779676242898794a0b057d5f5bb4 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_de09779676242898794a0b057d5f5bb4))

:named refinement_kinding_Tm_refine_de09779676242898794a0b057d5f5bb4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(706,19-706,31); use=Sec2.HIFC.fst(706,19-706,31)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_de09779676242898794a0b057d5f5bb4 @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Sec2.HIFC.fst(706,19-706,31); use=Sec2.HIFC.fst(706,19-706,31)
(not (BoxBool_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_de09779676242898794a0b057d5f5bb4 @x2)))
:qid refinement_interpretation_Tm_refine_de09779676242898794a0b057d5f5bb4))

:named refinement_interpretation_Tm_refine_de09779676242898794a0b057d5f5bb4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_de09779676242898794a0b057d5f5bb4
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(706,19-706,31); use=Sec2.HIFC.fst(706,19-706,31)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_de09779676242898794a0b057d5f5bb4 @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_de09779676242898794a0b057d5f5bb4 @x0))))
:qid haseqTm_refine_de09779676242898794a0b057d5f5bb4))

:named haseqTm_refine_de09779676242898794a0b057d5f5bb4))

; Encoding query formula : forall (a: Type) (r0: Sec2.HIFC.label) (w0: Sec2.HIFC.label) (f0: Sec2.HIFC.flows)
;   (p0: Sec2.HIFC.pre) (q0: Sec2.HIFC.post a) (r1: Sec2.HIFC.label) (w1: Sec2.HIFC.label)
;   (f1: Sec2.HIFC.flows) (p1: Sec2.HIFC.pre) (q1: Sec2.HIFC.post a)
;   (f: Sec2.HIFC.hifc a r0 w0 f0 p0 q0) (g: Sec2.HIFC.hifc a r1 w1 f1 p1 q1) (p: Prims.bool)
;   (_: _: Prims.unit{~p}).
;   Sec2.HIFC.label_inclusion r1 (Sec2.HIFC.union r0 r1) /\
;   Sec2.HIFC.label_inclusion w1 (Sec2.HIFC.union w0 w1) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match f1 with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (match f0 @ f1 with
;                 | [] -> Prims.l_False
;                 | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s: Sec2.HIFC.store).
;       (match p with
;         | true -> p0 s
;         | _ -> p1 s) ==>
;       p1 s) /\
;   (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store).
;       (match p with
;         | true -> p0 s0
;         | _ -> p1 s0) /\ q1 s0 x s1 ==>
;       (match p with
;         | true -> q0 s0 x s1
;         | _ -> q1 s0 x s1))


; Context: While encoding a query
; While checking if-then-else soundness
; While checking layered effect definition `Sec2.HIFC.HIFC`
; While typechecking the top-level declaration `layered_effect { HIFC ... }`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flows)
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0))
(HasType @x6
Sec2.HIFC.label)
(HasType @x7
Sec2.HIFC.label)
(HasType @x8
Sec2.HIFC.flows)
(HasType @x9
Sec2.HIFC.pre)
(HasType @x10
(Sec2.HIFC.post @x0))
(HasType @x11
(Sec2.HIFC.hifc @x0
@x1
@x2
@x3
@x4
@x5))
(HasType @x12
(Sec2.HIFC.hifc @x0
@x6
@x7
@x8
@x9
@x10))
(HasType @x13
Prims.bool)
(HasType @x14
(Tm_refine_de09779676242898794a0b057d5f5bb4 @x13)))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(705,14-705,22)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x6
(Sec2.HIFC.union @x1
@x6))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(705,14-705,22)
(Sec2.HIFC.label_inclusion @x7
(Sec2.HIFC.union @x2
@x7))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(166,2-167,126)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb16 @x8))
(ite (is-Prims.Nil @lb16)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb16)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x15
(Prims.Cons_hd @lb16))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x15
(Prims.Cons_tl @lb16))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(167,8-167,126)
(forall ((@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x16
Prims.int)
(HasType @x17
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x16
(let ((@lb18 @x15))
(FStar.Pervasives.Native.Mktuple2__1 @lb18)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x17
(let ((@lb18 @x15))
(FStar.Pervasives.Native.Mktuple2__2 @lb18)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (Prims.op_disEquality Prims.int
@x16
@x17)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(167,65-167,125)
(exists ((@x18 Term))
 (! (and (HasType @x18
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb19 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
@x3
@x8)))
(ite (is-Prims.Nil @lb19)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=FStar.List.Tot.Base.fst(230,10-230,15)
false

(ite (is-Prims.Cons @lb19)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=FStar.List.Tot.Base.fst(231,14-231,32)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=FStar.List.Tot.Base.fst(231,14-231,20)
(= @x18
(Prims.Cons_hd @lb19))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=FStar.List.Tot.Base.fst(231,24-231,32)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x18
(Prims.Cons_tl @lb19))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x16
(let ((@lb19 @x18))
(FStar.Pervasives.Native.Mktuple2__1 @lb19)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Prims.fst(180,31-180,42)
(= (FStar.Set.mem Prims.int
@x17
(let ((@lb19 @x18))
(FStar.Pervasives.Native.Mktuple2__2 @lb19)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(632,15-632,39); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
Sec2.HIFC.store)
(let ((@lb16 @x13))
(ite (= @lb16
(BoxBool true))

;; def=Sec2.HIFC.fst(660,32-660,36); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(660,32-660,36); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT @x4
@x15)
)


;; def=Sec2.HIFC.fst(660,42-660,46); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(660,42-660,46); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT @x9
@x15)
)
)))

;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(or label_4

;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(632,35-632,38); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT @x9
@x15)
)
)
)
 
;;no pats
:qid @query.4))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(705,14-705,22)
(forall ((@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x15
Sec2.HIFC.store)
(HasType @x16
@x0)
(HasType @x17
Sec2.HIFC.store)
(let ((@lb18 @x13))
(ite (= @lb18
(BoxBool true))

;; def=Sec2.HIFC.fst(660,32-660,36); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(660,32-660,36); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT @x4
@x15)
)


;; def=Sec2.HIFC.fst(660,42-660,46); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(660,42-660,46); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT @x9
@x15)
)
))

;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(705,14-705,22)
(Valid 
;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(705,14-705,22)
(ApplyTT (ApplyTT (ApplyTT @x10
@x15)
@x16)
@x17)
)
)
(let ((@lb18 @x13))
(ite (= @lb18
(BoxBool true))

;; def=Sec2.HIFC.fst(661,38-661,48); use=Sec2.HIFC.fst(706,19-706,31)
(or label_5

;; def=Sec2.HIFC.fst(661,38-661,48); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(661,38-661,48); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT (ApplyTT (ApplyTT @x5
@x15)
@x16)
@x17)
)
)


;; def=Sec2.HIFC.fst(661,54-661,64); use=Sec2.HIFC.fst(706,19-706,31)
(or label_6

;; def=Sec2.HIFC.fst(661,54-661,64); use=Sec2.HIFC.fst(706,19-706,31)
(Valid 
;; def=Sec2.HIFC.fst(661,54-661,64); use=Sec2.HIFC.fst(706,19-706,31)
(ApplyTT (ApplyTT (ApplyTT @x10
@x15)
@x16)
@x17)
)
)
)))
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.HIFC, 3)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented, @query, bool_inversion, constructor_distinct_Prims.Cons, data_elim_Prims.Cons, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_Prims.list, int_inversion, lemma_FStar.Set.mem_union, lemma_Sec2.HIFC.weaken_flows_append, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_de09779676242898794a0b057d5f5bb4, typing_FStar.List.Tot.Base.op_At, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.union

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt layered_effect { HIFC ... }


; <Skipped layered_effect { HIFC ... }/>

;;;;;;;;;;;;;;;;typing_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(99,79-99,104); use=Sec2.HIFC.fst(99,79-99,104)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69)
 

:pattern ((Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0))
:qid typing_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841))

:named typing_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841))
;;;;;;;;;;;;;;;;typing_Tm_abs_1063a06958c00b4b72a910385e4b0f74
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(100,88-100,98); use=Sec2.HIFC.fst(100,88-100,98)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0)
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x0))
 

:pattern ((Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0))
:qid typing_Tm_abs_1063a06958c00b4b72a910385e4b0f74))

:named typing_Tm_abs_1063a06958c00b4b72a910385e4b0f74))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(99,4-99,9); use=Sec2.HIFC.fst(99,4-99,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType (Sec2.HIFC.iread @x0)
(Sec2.HIFC.hifc Prims.int
(Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0))))
 

:pattern ((Sec2.HIFC.iread @x0))
:qid typing_Sec2.HIFC.iread))

:named typing_Sec2.HIFC.iread))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_9529abafdc772ca069b23b7c81336a0f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_9529abafdc772ca069b23b7c81336a0f @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_9529abafdc772ca069b23b7c81336a0f))

:named refinement_kinding_Tm_refine_9529abafdc772ca069b23b7c81336a0f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9529abafdc772ca069b23b7c81336a0f @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 Prims.int
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Prims.l_and (Prims.eq2 Sec2.HIFC.store
@x2
(FStar.Pervasives.Native.snd Prims.int
Sec2.HIFC.store
@x1))
(Prims.eq2 Prims.int
(FStar.Pervasives.Native.fst Prims.int
Sec2.HIFC.store
@x1)
(Sec2.HIFC.sel @x2
@x3)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9529abafdc772ca069b23b7c81336a0f @x2
@x3)))
:qid refinement_interpretation_Tm_refine_9529abafdc772ca069b23b7c81336a0f))

:named refinement_interpretation_Tm_refine_9529abafdc772ca069b23b7c81336a0f))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! (HasType Tm_arrow_3058dd70c27cdd5bb06324151a2eca69
Tm_type)
:named kinding_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x0)
Tm_type))
:qid kinding_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))

:named kinding_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(99,79-99,104); use=Sec2.HIFC.fst(99,79-99,104)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x3)
@x0)
@x1)
@x2)
(Prims.l_and (Prims.eq2 Sec2.HIFC.store
@x0
@x2)
(Prims.eq2 Prims.int
@x1
(Sec2.HIFC.sel @x0
@x3))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x3)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841))

:named interpretation_Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1063a06958c00b4b72a910385e4b0f74
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(100,88-100,98); use=Sec2.HIFC.fst(100,88-100,98)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x1)
@x0)
(FStar.Pervasives.Native.Mktuple2 Prims.int
Sec2.HIFC.store
(Sec2.HIFC.sel @x0
@x1)
@x0))
 

:pattern ((ApplyTT (Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x1)
@x0))
:qid interpretation_Tm_abs_1063a06958c00b4b72a910385e4b0f74))

:named interpretation_Tm_abs_1063a06958c00b4b72a910385e4b0f74))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9529abafdc772ca069b23b7c81336a0f
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9529abafdc772ca069b23b7c81336a0f @x0
@x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 Prims.int
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9529abafdc772ca069b23b7c81336a0f @x0
@x1))))
:qid haseqTm_refine_9529abafdc772ca069b23b7c81336a0f))

:named haseqTm_refine_9529abafdc772ca069b23b7c81336a0f))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.iread
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(99,4-99,9); use=Sec2.HIFC.fst(99,4-99,9)
(forall ((@x0 Term))
 (! (= (Sec2.HIFC.iread @x0)
(Tm_abs_1063a06958c00b4b72a910385e4b0f74 @x0))
 

:pattern ((Sec2.HIFC.iread @x0))
:qid equation_Sec2.HIFC.iread))

:named equation_Sec2.HIFC.iread))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,13-99,28); use=Sec2.HIFC.fst(12,13-99,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
:qid Sec2.HIFC_pre_typing_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))

:named Sec2.HIFC_pre_typing_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))

:named Sec2.HIFC_pre_typing_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,13-99,28); use=Sec2.HIFC.fst(12,13-99,24)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69)
(and 
;; def=Sec2.HIFC.fst(12,13-99,28); use=Sec2.HIFC.fst(12,13-99,24)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
Prims.int)
(HasType @x3
Sec2.HIFC.store))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(12,13-99,28); use=Sec2.HIFC.fst(12,13-99,24)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.store)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69.2))


;; def=Sec2.HIFC.fst(12,13-99,28); use=Sec2.HIFC.fst(12,13-99,24)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
Prims.int))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
:qid Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))

:named Sec2.HIFC_interpretation_Tm_arrow_3058dd70c27cdd5bb06324151a2eca69))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba
;;; Fact-ids: Name Sec2.HIFC.iread; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x1))
(and 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Sec2.HIFC.store)
(HasType (ApplyTT @x0
@x2)
(Tm_refine_9529abafdc772ca069b23b7c81336a0f @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))

:named Sec2.HIFC_interpretation_Tm_arrow_21d4b9d56431ffc8a5659599b59fc9ba))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(715,4-715,27)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



(declare-fun Tm_abs_596585c29c4c433657332ee7c4e601f0 (Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_596585c29c4c433657332ee7c4e601f0
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(715,18-715,27)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_596585c29c4c433657332ee7c4e601f0 @x0)
Tm_arrow_3058dd70c27cdd5bb06324151a2eca69)
 

:pattern ((Tm_abs_596585c29c4c433657332ee7c4e601f0 @x0))
:qid typing_Tm_abs_596585c29c4c433657332ee7c4e601f0))

:named typing_Tm_abs_596585c29c4c433657332ee7c4e601f0))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_596585c29c4c433657332ee7c4e601f0
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(715,18-715,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_596585c29c4c433657332ee7c4e601f0 @x3)
@x0)
@x1)
@x2)
(Prims.eq2 Prims.int
@x1
(Sec2.HIFC.sel @x0
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_596585c29c4c433657332ee7c4e601f0 @x3)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_596585c29c4c433657332ee7c4e601f0))

:named interpretation_Tm_abs_596585c29c4c433657332ee7c4e601f0))





















; Encoding query formula : forall (l: Sec2.HIFC.loc).
;   (*  - Could not prove post-condition
; *)
;   (forall (s0: Sec2.HIFC.store) (r: Prims.int & Sec2.HIFC.store).
;       s0 == FStar.Pervasives.Native.snd r /\ FStar.Pervasives.Native.fst r == Sec2.HIFC.sel s0 l ==>
;       FStar.Pervasives.Native.fst r == Sec2.HIFC.sel s0 l) /\
;   (Sec2.HIFC.reads (Sec2.HIFC.iread l) (Sec2.HIFC.single l) /\
;     Sec2.HIFC.writes (Sec2.HIFC.iread l) Sec2.HIFC.bot /\ Sec2.HIFC.respects (Sec2.HIFC.iread l) [] ==>
;     Sec2.HIFC.reads (Sec2.HIFC.iread l) (Sec2.HIFC.single l) /\
;     Sec2.HIFC.writes (Sec2.HIFC.iread l) Sec2.HIFC.bot /\ Sec2.HIFC.respects (Sec2.HIFC.iread l) [])


; Context: While encoding a query
; While typechecking the top-level declaration `let read`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(715,18-715,27)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(715,18-715,27)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
(FStar.Pervasives.Native.tuple2 Prims.int
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(99,79-99,87); use=Sec2.HIFC.fst(715,19-715,24)
(= @x1
(FStar.Pervasives.Native.snd Prims.int
Sec2.HIFC.store
@x2))


;; def=Sec2.HIFC.fst(99,91-99,104); use=Sec2.HIFC.fst(715,19-715,24)
(= (FStar.Pervasives.Native.fst Prims.int
Sec2.HIFC.store
@x2)
(Sec2.HIFC.sel @x1
@x0))
)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(715,18-715,27)
(or label_1

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(715,18-715,27)
(= (FStar.Pervasives.Native.fst Prims.int
Sec2.HIFC.store
@x2)
(Sec2.HIFC.sel @x1
@x0))
)
)
 
;;no pats
:qid @query.1))

(implies 
;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(715,18-715,27)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(715,18-715,27)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(715,18-715,27)
(Sec2.HIFC.reads Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)
(Sec2.HIFC.iread @x0)
(Sec2.HIFC.single @x0))
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(715,18-715,27)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(715,18-715,27)
(Sec2.HIFC.writes Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)
(Sec2.HIFC.iread @x0)
(Sec2.HIFC.bot Dummy_value))
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(715,18-715,27)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(715,18-715,27)
(Sec2.HIFC.respects Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_9a6fe70ee55b4ba2d6c11e6852d1d841 @x0)
(Sec2.HIFC.iread @x0)
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(715,18-715,27)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(715,18-715,27)
(or label_2

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(715,18-715,27)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(715,18-715,27)
(Sec2.HIFC.reads Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_596585c29c4c433657332ee7c4e601f0 @x0)
(Sec2.HIFC.iread @x0)
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(715,18-715,27)
(or label_3

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(715,18-715,27)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(715,18-715,27)
(Sec2.HIFC.writes Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_596585c29c4c433657332ee7c4e601f0 @x0)
(Sec2.HIFC.iread @x0)
(Sec2.HIFC.bot Dummy_value))
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(715,18-715,27)
(or label_4

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(715,18-715,27)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(715,18-715,27)
(Sec2.HIFC.respects Prims.int
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_596585c29c4c433657332ee7c4e601f0 @x0)
(Sec2.HIFC.iread @x0)
(Prims.Nil Sec2.HIFC.flow))
)
)
)
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.read, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_FStar.Pervasives.Native.snd, equation_Prims.eqtype, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.iread, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.sel, equation_Sec2.HIFC.single, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, int_inversion, interpretation_Tm_abs_1063a06958c00b4b72a910385e4b0f74, lemma_FStar.Map.lemma_SelUpd2, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let read


; <Start encoding let read>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.read (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.read@tok () Term)

; </end encoding let read>

;;;;;;;;;;;;;;;;typing_Tm_abs_6a0f7f89976d121f804f25efeeaa811b
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(105,80-105,93); use=Sec2.HIFC.fst(105,80-105,93)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x0
@x1)
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x0
@x1))
 

:pattern ((Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x0
@x1))
:qid typing_Tm_abs_6a0f7f89976d121f804f25efeeaa811b))

:named typing_Tm_abs_6a0f7f89976d121f804f25efeeaa811b))
;;;;;;;;;;;;;;;;typing_Tm_abs_646db81909cc4e23f004eadbd1c87948
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(104,89-104,105); use=Sec2.HIFC.fst(104,89-104,105)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)
Tm_arrow_273d4dced1c60f264fc624ef79088526)
 

:pattern ((Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1))
:qid typing_Tm_abs_646db81909cc4e23f004eadbd1c87948))

:named typing_Tm_abs_646db81909cc4e23f004eadbd1c87948))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(104,4-104,10); use=Sec2.HIFC.fst(104,4-104,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
Prims.int))
(HasType (Sec2.HIFC.iwrite @x0
@x1)
(Sec2.HIFC.hifc Prims.unit
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1))))
 

:pattern ((Sec2.HIFC.iwrite @x0
@x1))
:qid typing_Sec2.HIFC.iwrite))

:named typing_Sec2.HIFC.iwrite))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_5f1781a61415e06189d852ef3c304242 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_5f1781a61415e06189d852ef3c304242 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_5f1781a61415e06189d852ef3c304242))

:named refinement_kinding_Tm_refine_5f1781a61415e06189d852ef3c304242))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5f1781a61415e06189d852ef3c304242 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 Prims.unit
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Valid 
;; def=Sec2.HIFC.fst(13,63-13,83); use=Sec2.HIFC.fst(13,63-13,83)
(Prims.eq2 Sec2.HIFC.store
(FStar.Pervasives.Native.snd Prims.unit
Sec2.HIFC.store
@x1)
(Sec2.HIFC.upd @x2
@x3
@x4))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5f1781a61415e06189d852ef3c304242 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_5f1781a61415e06189d852ef3c304242))

:named refinement_interpretation_Tm_refine_5f1781a61415e06189d852ef3c304242))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))

:named kinding_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_273d4dced1c60f264fc624ef79088526
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! (HasType Tm_arrow_273d4dced1c60f264fc624ef79088526
Tm_type)
:named kinding_Tm_arrow_273d4dced1c60f264fc624ef79088526))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_6a0f7f89976d121f804f25efeeaa811b
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(105,80-105,93); use=Sec2.HIFC.fst(105,80-105,93)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x2)
@x0)
(FStar.Pervasives.Native.Mktuple2 Prims.unit
Sec2.HIFC.store
Tm_unit
(Sec2.HIFC.upd @x0
@x2
@x1)))
 

:pattern ((ApplyTT (Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x2)
@x0))
:qid interpretation_Tm_abs_6a0f7f89976d121f804f25efeeaa811b))

:named interpretation_Tm_abs_6a0f7f89976d121f804f25efeeaa811b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_646db81909cc4e23f004eadbd1c87948
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(104,89-104,105); use=Sec2.HIFC.fst(104,89-104,105)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_646db81909cc4e23f004eadbd1c87948 @x3
@x4)
@x0)
@x1)
@x2)
(Prims.eq2 Sec2.HIFC.store
@x2
(Sec2.HIFC.upd @x0
@x3
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_646db81909cc4e23f004eadbd1c87948 @x3
@x4)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_646db81909cc4e23f004eadbd1c87948))

:named interpretation_Tm_abs_646db81909cc4e23f004eadbd1c87948))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5f1781a61415e06189d852ef3c304242
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,49-13,84); use=Sec2.HIFC.fst(13,49-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5f1781a61415e06189d852ef3c304242 @x0
@x1
@x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 Prims.unit
Sec2.HIFC.store))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5f1781a61415e06189d852ef3c304242 @x0
@x1
@x2))))
:qid haseqTm_refine_5f1781a61415e06189d852ef3c304242))

:named haseqTm_refine_5f1781a61415e06189d852ef3c304242))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.iwrite
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(104,4-104,10); use=Sec2.HIFC.fst(104,4-104,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.iwrite @x0
@x1)
(Tm_abs_6a0f7f89976d121f804f25efeeaa811b @x1
@x0))
 

:pattern ((Sec2.HIFC.iwrite @x0
@x1))
:qid equation_Sec2.HIFC.iwrite))

:named equation_Sec2.HIFC.iwrite))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))

:named Sec2.HIFC_pre_typing_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,13-104,38); use=Sec2.HIFC.fst(12,13-104,33)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_273d4dced1c60f264fc624ef79088526)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_273d4dced1c60f264fc624ef79088526))
:qid Sec2.HIFC_pre_typing_Tm_arrow_273d4dced1c60f264fc624ef79088526))

:named Sec2.HIFC_pre_typing_Tm_arrow_273d4dced1c60f264fc624ef79088526))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(13,34-13,84); use=Sec2.HIFC.fst(13,34-13,84)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Sec2.HIFC.store)
(HasType (ApplyTT @x0
@x3)
(Tm_refine_5f1781a61415e06189d852ef3c304242 @x3
@x2
@x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_4182d5cbc56ca1029b9a580811ac506d @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))

:named Sec2.HIFC_interpretation_Tm_arrow_4182d5cbc56ca1029b9a580811ac506d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526
;;; Fact-ids: Name Sec2.HIFC.iwrite; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(12,13-104,38); use=Sec2.HIFC.fst(12,13-104,33)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_273d4dced1c60f264fc624ef79088526)
(and 
;; def=Sec2.HIFC.fst(12,13-104,38); use=Sec2.HIFC.fst(12,13-104,33)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
Prims.unit)
(HasType @x3
Sec2.HIFC.store))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526.1))

(IsTotFun @x0)

;; def=Sec2.HIFC.fst(12,13-104,38); use=Sec2.HIFC.fst(12,13-104,33)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Sec2.HIFC.store)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526.2))


;; def=Sec2.HIFC.fst(12,13-104,38); use=Sec2.HIFC.fst(12,13-104,33)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Sec2.HIFC.store)
(HasType @x2
Prims.unit))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_273d4dced1c60f264fc624ef79088526))
:qid Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526))

:named Sec2.HIFC_interpretation_Tm_arrow_273d4dced1c60f264fc624ef79088526))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(720,4-720,30)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



(declare-fun Tm_abs_cb057cab74cf813efe886e9a6fd72751 (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_cb057cab74cf813efe886e9a6fd72751
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(720,18-720,30)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_cb057cab74cf813efe886e9a6fd72751 @x0
@x1)
Tm_arrow_273d4dced1c60f264fc624ef79088526)
 

:pattern ((Tm_abs_cb057cab74cf813efe886e9a6fd72751 @x0
@x1))
:qid typing_Tm_abs_cb057cab74cf813efe886e9a6fd72751))

:named typing_Tm_abs_cb057cab74cf813efe886e9a6fd72751))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_cb057cab74cf813efe886e9a6fd72751
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(720,18-720,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_cb057cab74cf813efe886e9a6fd72751 @x3
@x4)
@x0)
@x1)
@x2)
(Prims.eq2 Prims.int
(Sec2.HIFC.sel @x2
@x3)
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_cb057cab74cf813efe886e9a6fd72751 @x3
@x4)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_cb057cab74cf813efe886e9a6fd72751))

:named interpretation_Tm_abs_cb057cab74cf813efe886e9a6fd72751))





















; Encoding query formula : forall (l: Sec2.HIFC.loc) (x: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   (forall (s0: Sec2.HIFC.store) (r: Prims.unit & Sec2.HIFC.store).
;       FStar.Pervasives.Native.snd r == Sec2.HIFC.upd s0 l x ==>
;       Sec2.HIFC.sel (FStar.Pervasives.Native.snd r) l == x) /\
;   (Sec2.HIFC.reads (Sec2.HIFC.iwrite l x) Sec2.HIFC.bot /\
;     Sec2.HIFC.writes (Sec2.HIFC.iwrite l x) (Sec2.HIFC.single l) /\
;     Sec2.HIFC.respects (Sec2.HIFC.iwrite l x) [] ==>
;     Sec2.HIFC.reads (Sec2.HIFC.iwrite l x) Sec2.HIFC.bot /\
;     Sec2.HIFC.writes (Sec2.HIFC.iwrite l x) (Sec2.HIFC.single l) /\
;     Sec2.HIFC.respects (Sec2.HIFC.iwrite l x) [])


; Context: While encoding a query
; While typechecking the top-level declaration `let write`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(Sec2.HIFC.loc Dummy_value))
(HasType @x1
Prims.int))

;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(720,18-720,30)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(720,18-720,30)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
(FStar.Pervasives.Native.tuple2 Prims.unit
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(104,89-104,105); use=Sec2.HIFC.fst(720,19-720,25)
(= (FStar.Pervasives.Native.snd Prims.unit
Sec2.HIFC.store
@x3)
(Sec2.HIFC.upd @x2
@x0
@x1))
)

;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(720,18-720,30)
(or label_1

;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(720,18-720,30)
(= (Sec2.HIFC.sel (FStar.Pervasives.Native.snd Prims.unit
Sec2.HIFC.store
@x3)
@x0)
@x1)
)
)
 
;;no pats
:qid @query.1))

(implies 
;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(720,18-720,30)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(720,18-720,30)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(720,18-720,30)
(Sec2.HIFC.reads Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)
(Sec2.HIFC.iwrite @x0
@x1)
(Sec2.HIFC.bot Dummy_value))
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(720,18-720,30)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(720,18-720,30)
(Sec2.HIFC.writes Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)
(Sec2.HIFC.iwrite @x0
@x1)
(Sec2.HIFC.single @x0))
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(720,18-720,30)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(720,18-720,30)
(Sec2.HIFC.respects Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_646db81909cc4e23f004eadbd1c87948 @x0
@x1)
(Sec2.HIFC.iwrite @x0
@x1)
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(720,18-720,30)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(720,18-720,30)
(or label_2

;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(720,18-720,30)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(720,18-720,30)
(Sec2.HIFC.reads Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_cb057cab74cf813efe886e9a6fd72751 @x0
@x1)
(Sec2.HIFC.iwrite @x0
@x1)
(Sec2.HIFC.bot Dummy_value))
)
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(720,18-720,30)
(or label_3

;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(720,18-720,30)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(720,18-720,30)
(Sec2.HIFC.writes Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_cb057cab74cf813efe886e9a6fd72751 @x0
@x1)
(Sec2.HIFC.iwrite @x0
@x1)
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(720,18-720,30)
(or label_4

;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(720,18-720,30)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(720,18-720,30)
(Sec2.HIFC.respects Prims.unit
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_cb057cab74cf813efe886e9a6fd72751 @x0
@x1)
(Sec2.HIFC.iwrite @x0
@x1)
(Prims.Nil Sec2.HIFC.flow))
)
)
)
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.write, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_pretyping_f8666440faa91836cc5a13998af863fc, equation_FStar.Pervasives.Native.snd, equation_Prims.eqtype, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.iwrite, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.sel, equation_Sec2.HIFC.single, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, int_inversion, interpretation_Tm_abs_6a0f7f89976d121f804f25efeeaa811b, lemma_FStar.Map.lemma_SelUpd1, lemma_FStar.Map.lemma_SelUpd2, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_FStar.Map.upd, typing_Prims.int, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let write


; <Start encoding let write>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.write (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.write@tok () Term)

; </end encoding let write>

;;;;;;;;;;;;;;;;typing_Tm_abs_735bfa0400a12573ed48312f042e45e7
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(630,69-630,73); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_735bfa0400a12573ed48312f042e45e7 @x0)
(Tm_arrow_61bb9550f39772f18eaab129c43c3788 @x0))
 

:pattern ((Tm_abs_735bfa0400a12573ed48312f042e45e7 @x0))
:qid typing_Tm_abs_735bfa0400a12573ed48312f042e45e7))

:named typing_Tm_abs_735bfa0400a12573ed48312f042e45e7))
;;;;;;;;;;;;;;;;typing_Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(635,86-635,95); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 @x0
@x1)
(Tm_arrow_61bb9550f39772f18eaab129c43c3788 @x1))
 

:pattern ((Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 @x0
@x1))
:qid typing_Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0))

:named typing_Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0))
;;;;;;;;;;;;;;;;typing_Tm_abs_5e34897418ce4950a4effcc8c159cf53
;;; Fact-ids: Name FStar.Pervasives.trivial_pure_post; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(134,57-134,61); use=FStar.Pervasives.fsti(134,57-134,61)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_5e34897418ce4950a4effcc8c159cf53 @x0)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
 

:pattern ((Tm_abs_5e34897418ce4950a4effcc8c159cf53 @x0))
:qid typing_Tm_abs_5e34897418ce4950a4effcc8c159cf53))

:named typing_Tm_abs_5e34897418ce4950a4effcc8c159cf53))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.return; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(94,4-94,10); use=Sec2.HIFC.fst(94,4-94,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0))
(HasType (Sec2.HIFC.return @x0
@x1)
(Sec2.HIFC.hifc @x0
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_a1d9d1a4344fce8ebdff365dca7a3d02 @x1
@x0))))
 

:pattern ((Sec2.HIFC.return @x0
@x1))
:qid typing_Sec2.HIFC.return))

:named typing_Sec2.HIFC.return))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_wp_monotonic; Namespace Prims
(assert (! 
;; def=Prims.fst(337,4-337,21); use=Prims.fst(337,4-337,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.pure_wp_ @x0)))
(HasType (Prims.pure_wp_monotonic @x0
@x1)
Prims.logical))
 

:pattern ((Prims.pure_wp_monotonic @x0
@x1))
:qid typing_Prims.pure_wp_monotonic))

:named typing_Prims.pure_wp_monotonic))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,4-325,12); use=Prims.fst(325,4-325,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_wp_ @x0)
Tm_type))
 

:pattern ((Prims.pure_wp_ @x0))
:qid typing_Prims.pure_wp_))

:named typing_Prims.pure_wp_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! 
;; def=Prims.fst(339,4-339,11); use=Prims.fst(339,4-339,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_wp @x0)
Tm_type))
 

:pattern ((Prims.pure_wp @x0))
:qid typing_Prims.pure_wp))

:named typing_Prims.pure_wp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (HasType Prims.pure_pre
Tm_type)
:named typing_Prims.pure_pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! 
;; def=Prims.fst(214,5-214,10); use=Prims.fst(214,5-214,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.logical)
(HasType (Prims.l_not @x0)
Prims.logical))
 

:pattern ((Prims.l_not @x0))
:qid typing_Prims.l_not))

:named typing_Prims.l_not))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(315,31-315,40); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b))

:named refinement_kinding_Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=FStar.Monotonic.Pure.fst(59,16-59,17); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6))

:named refinement_kinding_Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! 
;; def=Prims.fst(339,24-339,61); use=Prims.fst(339,24-339,61)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_15e0beb75f7033bad5fae236999feebe @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_15e0beb75f7033bad5fae236999feebe @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_15e0beb75f7033bad5fae236999feebe))

:named refinement_kinding_Tm_refine_15e0beb75f7033bad5fae236999feebe))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(315,31-315,40); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b @x2))
(HasTypeFuel @u0
@x1
@x2))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b @x2)))
:qid refinement_interpretation_Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b))

:named refinement_interpretation_Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=FStar.Monotonic.Pure.fst(59,16-59,17); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x3)

;; def=Prims.fst(635,71-635,97); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(not 
;; def=Prims.fst(635,72-635,97); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(Valid 
;; def=Prims.fst(635,72-635,97); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(ApplyTT @x2
(Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 @x1
@x3))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6))

:named refinement_interpretation_Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! 
;; def=Prims.fst(339,24-339,61); use=Prims.fst(339,24-339,61)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_15e0beb75f7033bad5fae236999feebe @x2))
(and (HasTypeFuel @u0
@x1
(Prims.pure_wp_ @x2))

;; def=Prims.fst(339,38-339,60); use=Prims.fst(339,38-339,60)
(Valid 
;; def=Prims.fst(339,38-339,60); use=Prims.fst(339,38-339,60)
(Prims.pure_wp_monotonic @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_15e0beb75f7033bad5fae236999feebe @x2)))
:qid refinement_interpretation_Tm_refine_15e0beb75f7033bad5fae236999feebe))

:named refinement_interpretation_Tm_refine_15e0beb75f7033bad5fae236999feebe))
;;;;;;;;;;;;;;;;not interpretation
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (iff (not (Valid @x0))
(Valid (Prims.l_not @x0)))
 

:pattern ((Prims.l_not @x0))
:qid l_not-interp))
:named l_not-interp))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,25-325,53); use=Prims.fst(325,25-325,53)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x0)
Tm_type))
:qid kinding_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))

:named kinding_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=FStar.Monotonic.Pure.fst(59,16-59,50); use=FStar.Monotonic.Pure.fst(59,46-59,60)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd))

:named kinding_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_61bb9550f39772f18eaab129c43c3788
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(315,31-315,54); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_61bb9550f39772f18eaab129c43c3788 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_61bb9550f39772f18eaab129c43c3788 @x0)
Tm_type))
:qid kinding_Tm_arrow_61bb9550f39772f18eaab129c43c3788))

:named kinding_Tm_arrow_61bb9550f39772f18eaab129c43c3788))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_735bfa0400a12573ed48312f042e45e7
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(630,69-630,73); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_735bfa0400a12573ed48312f042e45e7 @x1)
@x0)
Prims.l_True)
 

:pattern ((ApplyTT (Tm_abs_735bfa0400a12573ed48312f042e45e7 @x1)
@x0))
:qid interpretation_Tm_abs_735bfa0400a12573ed48312f042e45e7))

:named interpretation_Tm_abs_735bfa0400a12573ed48312f042e45e7))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(635,86-635,95); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 @x1
@x2)
@x0)
(Prims.l_not (Prims.eq2 @x2
@x0
@x1)))
 

:pattern ((ApplyTT (Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0))

:named interpretation_Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_5e34897418ce4950a4effcc8c159cf53
;;; Fact-ids: Name FStar.Pervasives.trivial_pure_post; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(134,57-134,61); use=FStar.Pervasives.fsti(134,57-134,61)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_5e34897418ce4950a4effcc8c159cf53 @x1)
@x0)
Prims.l_True)
 

:pattern ((ApplyTT (Tm_abs_5e34897418ce4950a4effcc8c159cf53 @x1)
@x0))
:qid interpretation_Tm_abs_5e34897418ce4950a4effcc8c159cf53))

:named interpretation_Tm_abs_5e34897418ce4950a4effcc8c159cf53))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(315,31-315,40); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b @x0)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b @x0))))
:qid haseqTm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b))

:named haseqTm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=FStar.Monotonic.Pure.fst(59,16-59,17); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 @x0
@x1)))
(Valid (Prims.hasEq @x1)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 @x0
@x1))))
:qid haseqTm_refine_9d7e1da4c8ccc98f1562bffecfa030b6))

:named haseqTm_refine_9d7e1da4c8ccc98f1562bffecfa030b6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_15e0beb75f7033bad5fae236999feebe
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! 
;; def=Prims.fst(339,24-339,61); use=Prims.fst(339,24-339,61)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_15e0beb75f7033bad5fae236999feebe @x0)))
(Valid (Prims.hasEq (Prims.pure_wp_ @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_15e0beb75f7033bad5fae236999feebe @x0))))
:qid haseqTm_refine_15e0beb75f7033bad5fae236999feebe))

:named haseqTm_refine_15e0beb75f7033bad5fae236999feebe))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (HasType Prims.pure_pre
Tm_type)
:named function_token_typing_Prims.pure_pre))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.return
;;; Fact-ids: Name Sec2.HIFC.return; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(94,4-94,10); use=Sec2.HIFC.fst(94,4-94,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Sec2.HIFC.return @x0
@x1)
(Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a @x1
@x0))
 

:pattern ((Sec2.HIFC.return @x0
@x1))
:qid equation_Sec2.HIFC.return))

:named equation_Sec2.HIFC.return))
;;;;;;;;;;;;;;;;Equation for Prims.pure_wp'
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,4-325,12); use=Prims.fst(325,4-325,12)
(forall ((@x0 Term))
 (! (= (Prims.pure_wp_ @x0)
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x0))
 

:pattern ((Prims.pure_wp_ @x0))
:qid equation_Prims.pure_wp_))

:named equation_Prims.pure_wp_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_wp
;;; Fact-ids: Name Prims.pure_wp; Namespace Prims
(assert (! 
;; def=Prims.fst(339,4-339,11); use=Prims.fst(339,4-339,11)
(forall ((@x0 Term))
 (! (= (Prims.pure_wp @x0)
(Tm_refine_15e0beb75f7033bad5fae236999feebe @x0))
 

:pattern ((Prims.pure_wp @x0))
:qid equation_Prims.pure_wp))

:named equation_Prims.pure_wp))
;;;;;;;;;;;;;;;;Equation for Prims.pure_pre
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (= Prims.pure_pre
Tm_type)
:named equation_Prims.pure_pre))
;;;;;;;;;;;;;;;;Equation for Prims.l_not
;;; Fact-ids: Name Prims.l_not; Namespace Prims
(assert (! 
;; def=Prims.fst(214,5-214,10); use=Prims.fst(214,5-214,10)
(forall ((@x0 Term))
 (! (= (Prims.l_not @x0)
(Prims.l_imp @x0
Prims.l_False))
 

:pattern ((Prims.l_not @x0))
:qid equation_Prims.l_not))

:named equation_Prims.l_not))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,25-325,53); use=Prims.fst(325,25-325,53)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x2)))
:qid Prims_pre_typing_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))

:named Prims_pre_typing_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,25-325,53); use=Prims.fst(325,25-325,53)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x1))
(and 
;; def=Prims.fst(325,25-325,53); use=Prims.fst(325,25-325,53)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.pure_post @x1))
(HasType (ApplyTT @x0
@x2)
Prims.pure_pre))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x1)))
:qid Prims_interpretation_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))

:named Prims_interpretation_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=FStar.Monotonic.Pure.fst(59,16-59,50); use=FStar.Monotonic.Pure.fst(59,46-59,60)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd @x2
@x3)))
:qid FStar.Monotonic.Pure_pre_typing_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd))

:named FStar.Monotonic.Pure_pre_typing_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(315,31-315,54); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_61bb9550f39772f18eaab129c43c3788 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_61bb9550f39772f18eaab129c43c3788 @x2)))
:qid FStar.Monotonic.Pure_pre_typing_Tm_arrow_61bb9550f39772f18eaab129c43c3788))

:named FStar.Monotonic.Pure_pre_typing_Tm_arrow_61bb9550f39772f18eaab129c43c3788))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=FStar.Monotonic.Pure.fst(59,16-59,50); use=FStar.Monotonic.Pure.fst(59,46-59,60)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd @x1
@x2))
(and 
;; def=FStar.Monotonic.Pure.fst(59,16-59,50); use=FStar.Monotonic.Pure.fst(59,46-59,60)
(forall ((@x3 Term))
 (! (implies (and 
;; def=Prims.fst(630,56-630,74); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(Valid 
;; def=Prims.fst(630,56-630,74); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(ApplyTT @x2
(Tm_abs_735bfa0400a12573ed48312f042e45e7 @x1))
)

(HasType @x3
Prims.unit))
(HasType (ApplyTT @x0
@x3)
(Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 @x2
@x1)))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.Monotonic.Pure_interpretation_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd @x1
@x2)))
:qid FStar.Monotonic.Pure_interpretation_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd))

:named FStar.Monotonic.Pure_interpretation_Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_61bb9550f39772f18eaab129c43c3788
;;; Fact-ids: Name FStar.Monotonic.Pure.elim_pure; Namespace FStar.Monotonic.Pure
(assert (! 
;; def=Prims.fst(315,31-315,54); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_61bb9550f39772f18eaab129c43c3788 @x1))
(and 
;; def=Prims.fst(315,31-315,54); use=FStar.Monotonic.Pure.fst(59,59-59,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b @x1))
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Monotonic.Pure_interpretation_Tm_arrow_61bb9550f39772f18eaab129c43c3788.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_61bb9550f39772f18eaab129c43c3788 @x1)))
:qid FStar.Monotonic.Pure_interpretation_Tm_arrow_61bb9550f39772f18eaab129c43c3788))

:named FStar.Monotonic.Pure_interpretation_Tm_arrow_61bb9550f39772f18eaab129c43c3788))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(728,4-729,19)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)













(declare-fun Tm_abs_7b372358421686aba07509ee0dbf1509 (Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_7b372358421686aba07509ee0dbf1509
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(725,60-725,68); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_7b372358421686aba07509ee0dbf1509 @x0)
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x0))
 

:pattern ((Tm_abs_7b372358421686aba07509ee0dbf1509 @x0))
:qid typing_Tm_abs_7b372358421686aba07509ee0dbf1509))

:named typing_Tm_abs_7b372358421686aba07509ee0dbf1509))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_7b372358421686aba07509ee0dbf1509
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(725,60-725,68); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_7b372358421686aba07509ee0dbf1509 @x3)
@x0)
@x1)
@x2)
(Prims.eq2 Sec2.HIFC.store
@x0
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_7b372358421686aba07509ee0dbf1509 @x3)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_7b372358421686aba07509ee0dbf1509))

:named interpretation_Tm_abs_7b372358421686aba07509ee0dbf1509))



(declare-fun Tm_abs_3d8ea00c797bf8e846b42966314a2705 (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_3d8ea00c797bf8e846b42966314a2705
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(94,78-94,96); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x0
@x1)
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x1))
 

:pattern ((Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x0
@x1))
:qid typing_Tm_abs_3d8ea00c797bf8e846b42966314a2705))

:named typing_Tm_abs_3d8ea00c797bf8e846b42966314a2705))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_3d8ea00c797bf8e846b42966314a2705
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(94,78-94,96); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x3
@x4)
@x0)
@x1)
@x2)
(Prims.l_and (Prims.eq2 Sec2.HIFC.store
@x0
@x2)
(Prims.eq2 @x4
@x1
(ApplyTT @x3
Tm_unit))))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x3
@x4)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_3d8ea00c797bf8e846b42966314a2705))

:named interpretation_Tm_abs_3d8ea00c797bf8e846b42966314a2705))








;;;;;;;;;;;;;;;;r: a & store -> Type0
(declare-fun Tm_arrow_41485433691be9aaa7dbc84f8db29f17 (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_41485433691be9aaa7dbc84f8db29f17
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,51-13,62); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_41485433691be9aaa7dbc84f8db29f17 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_41485433691be9aaa7dbc84f8db29f17 @x0)
Tm_type))
:qid kinding_Tm_arrow_41485433691be9aaa7dbc84f8db29f17))

:named kinding_Tm_arrow_41485433691be9aaa7dbc84f8db29f17))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,51-13,62); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_41485433691be9aaa7dbc84f8db29f17 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_41485433691be9aaa7dbc84f8db29f17 @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_41485433691be9aaa7dbc84f8db29f17))

:named Sec2.HIFC_pre_typing_Tm_arrow_41485433691be9aaa7dbc84f8db29f17))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_41485433691be9aaa7dbc84f8db29f17
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(13,51-13,62); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_41485433691be9aaa7dbc84f8db29f17 @x1))
(and 
;; def=Sec2.HIFC.fst(13,51-13,62); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(FStar.Pervasives.Native.tuple2 @x1
Sec2.HIFC.store))
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_41485433691be9aaa7dbc84f8db29f17.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_41485433691be9aaa7dbc84f8db29f17 @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_41485433691be9aaa7dbc84f8db29f17))

:named Sec2.HIFC_interpretation_Tm_arrow_41485433691be9aaa7dbc84f8db29f17))
(declare-fun Tm_abs_cdcb5254b48fffd1acbd4e11af441112 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_cdcb5254b48fffd1acbd4e11af441112
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(94,78-725,68); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_cdcb5254b48fffd1acbd4e11af441112 @x0
@x1
@x2)
(Tm_arrow_41485433691be9aaa7dbc84f8db29f17 @x2))
 

:pattern ((Tm_abs_cdcb5254b48fffd1acbd4e11af441112 @x0
@x1
@x2))
:qid typing_Tm_abs_cdcb5254b48fffd1acbd4e11af441112))

:named typing_Tm_abs_cdcb5254b48fffd1acbd4e11af441112))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_cdcb5254b48fffd1acbd4e11af441112
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(94,78-725,68); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_cdcb5254b48fffd1acbd4e11af441112 @x1
@x2
@x3)
@x0)
(Prims.l_imp (Prims.l_and (Prims.eq2 Sec2.HIFC.store
@x1
(FStar.Pervasives.Native.snd @x3
Sec2.HIFC.store
@x0))
(Prims.eq2 @x3
(FStar.Pervasives.Native.fst @x3
Sec2.HIFC.store
@x0)
(ApplyTT @x2
Tm_unit)))
(Prims.eq2 Sec2.HIFC.store
@x1
(FStar.Pervasives.Native.snd @x3
Sec2.HIFC.store
@x0))))
 

:pattern ((ApplyTT (Tm_abs_cdcb5254b48fffd1acbd4e11af441112 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_cdcb5254b48fffd1acbd4e11af441112))

:named interpretation_Tm_abs_cdcb5254b48fffd1acbd4e11af441112))

(declare-fun Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a (Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a
;;; Fact-ids: 
(assert (! 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a @x0
@x1)
Tm_arrow_7d7d48468a52a2b9aef50133e3181f2b)
 

:pattern ((Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a @x0
@x1))
:qid typing_Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a))

:named typing_Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a
;;; Fact-ids: 
(assert (! 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a @x1
@x2)
@x0)
(Prims.l_Forall (FStar.Pervasives.Native.tuple2 @x1
Sec2.HIFC.store)
(Tm_abs_cdcb5254b48fffd1acbd4e11af441112 @x0
@x2
@x1)))
 

:pattern ((ApplyTT (Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a @x1
@x2)
@x0))
:qid interpretation_Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a))

:named interpretation_Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.l_Forall Sec2.HIFC.store
(Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a @x1
@x0)))

;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
(FStar.Pervasives.Native.tuple2 @x1
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(94,78-94,86); use=Sec2.HIFC.fst(729,4-729,10)
(= @x2
(FStar.Pervasives.Native.snd @x1
Sec2.HIFC.store
@x3))


;; def=Sec2.HIFC.fst(94,90-94,96); use=Sec2.HIFC.fst(729,4-729,10)
(= (FStar.Pervasives.Native.fst @x1
Sec2.HIFC.store
@x3)
(ApplyTT @x0
Tm_unit))
)

;; def=Sec2.HIFC.fst(725,60-725,68); use=Sec2.HIFC.fst(729,4-729,19)
(= @x2
(FStar.Pervasives.Native.snd @x1
Sec2.HIFC.store
@x3))
)
 
;;no pats
:qid l_quant_interp_85268c417b188334056c6128401c8ee1.1))
)
 

:pattern ((Valid (Prims.l_Forall Sec2.HIFC.store
(Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a @x1
@x0))))
:qid l_quant_interp_85268c417b188334056c6128401c8ee1))

:named l_quant_interp_85268c417b188334056c6128401c8ee1))
























































;;;;;;;;;;;;;;;;return_val: hifc a bot bot [] (fun _ -> Prims.l_True) (fun s0 _ s1 -> s0 == s1) -> Prims.GTot Type0
(declare-fun Tm_arrow_1edda780a8ff1338ead82ed626886daa (Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1edda780a8ff1338ead82ed626886daa
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(725,9-725,70); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_1edda780a8ff1338ead82ed626886daa @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_1edda780a8ff1338ead82ed626886daa @x0)
Tm_type))
:qid kinding_Tm_arrow_1edda780a8ff1338ead82ed626886daa))

:named kinding_Tm_arrow_1edda780a8ff1338ead82ed626886daa))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(725,9-725,70); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_1edda780a8ff1338ead82ed626886daa @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_1edda780a8ff1338ead82ed626886daa @x2)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_1edda780a8ff1338ead82ed626886daa))

:named Sec2.HIFC_pre_typing_Tm_arrow_1edda780a8ff1338ead82ed626886daa))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1edda780a8ff1338ead82ed626886daa
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(725,9-725,70); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_1edda780a8ff1338ead82ed626886daa @x1))
(and 
;; def=Sec2.HIFC.fst(725,9-725,70); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Sec2.HIFC.hifc @x1
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x1)))
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Sec2.HIFC_interpretation_Tm_arrow_1edda780a8ff1338ead82ed626886daa.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_1edda780a8ff1338ead82ed626886daa @x1)))
:qid Sec2.HIFC_interpretation_Tm_arrow_1edda780a8ff1338ead82ed626886daa))

:named Sec2.HIFC_interpretation_Tm_arrow_1edda780a8ff1338ead82ed626886daa))
(declare-fun Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b @x0
@x1
@x2)
(Tm_arrow_1edda780a8ff1338ead82ed626886daa @x2))
 

:pattern ((Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b @x0
@x1
@x2))
:qid typing_Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b))

:named typing_Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b @x1
@x2
@x3)
@x0)
(Prims.l_imp (Prims.eq2 (Sec2.HIFC.hifc @x3
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x3))
@x0
@x1)
(ApplyTT @x2
@x0)))
 

:pattern ((ApplyTT (Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b))

:named interpretation_Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b))




;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.l_Forall (Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2))
(Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b @x1
@x0
@x2)))

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2)))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x3
@x1)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x3)
)
)
 
;;no pats
:qid l_quant_interp_0a792bc95a9bbca5c5ce3fa7bdd7b177.1))
)
 

:pattern ((Valid (Prims.l_Forall (Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2))
(Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b @x1
@x0
@x2))))
:qid l_quant_interp_0a792bc95a9bbca5c5ce3fa7bdd7b177))

:named l_quant_interp_0a792bc95a9bbca5c5ce3fa7bdd7b177))





(declare-fun Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8 @x0
@x1
@x2)
(Tm_arrow_1edda780a8ff1338ead82ed626886daa @x2))
 

:pattern ((Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8 @x0
@x1
@x2))
:qid typing_Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8))

:named typing_Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8 @x1
@x2
@x3)
@x0)
(Prims.l_imp (Prims.eq2 (Sec2.HIFC.hifc @x3
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x3))
@x0
(Sec2.HIFC.return @x3
(ApplyTT @x1
Tm_unit)))
(Prims.l_imp (Prims.eq2 (Sec2.HIFC.hifc @x3
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x3))
@x0
(Sec2.HIFC.return @x3
(ApplyTT @x1
Tm_unit)))
(Prims.l_Forall (Sec2.HIFC.hifc @x3
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x3))
(Tm_abs_52dd81b1b2e13bc232eb3b26fc67a02b @x0
@x2
@x3)))))
 

:pattern ((ApplyTT (Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8))

:named interpretation_Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8))








;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.l_Forall (Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2))
(Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8 @x1
@x0
@x2)))

;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2)))

;; def=Prims.fst(356,26-356,41); use=Sec2.HIFC.fst(728,4-729,19)
(= @x3
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit)))


;; def=Sec2.HIFC.fst(725,9-729,19); use=Sec2.HIFC.fst(728,4-729,19)
(= @x3
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit)))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2)))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x4
@x3)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x4)
)
)
 
;;no pats
:qid l_quant_interp_4abab196a1d6a4486201c49feff6d163.2))
)
 
;;no pats
:qid l_quant_interp_4abab196a1d6a4486201c49feff6d163.1))
)
 

:pattern ((Valid (Prims.l_Forall (Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2))
(Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8 @x1
@x0
@x2))))
:qid l_quant_interp_4abab196a1d6a4486201c49feff6d163))

:named l_quant_interp_4abab196a1d6a4486201c49feff6d163))




;;;;;;;;;;;;;;;;any_result: hifc a bot bot [] (fun _ -> Prims.l_True) (fun s0 r s1 -> s0 == s1 /\ r == f ())   -> Prims.GTot Type0
(declare-fun Tm_arrow_933774e72bdf7760163358af0baad84d (Term Term) Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_933774e72bdf7760163358af0baad84d
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(94,28-94,97); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_933774e72bdf7760163358af0baad84d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_933774e72bdf7760163358af0baad84d @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_933774e72bdf7760163358af0baad84d))

:named kinding_Tm_arrow_933774e72bdf7760163358af0baad84d))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(94,28-94,97); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_933774e72bdf7760163358af0baad84d @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_933774e72bdf7760163358af0baad84d @x2
@x3)))
:qid Sec2.HIFC_pre_typing_Tm_arrow_933774e72bdf7760163358af0baad84d))

:named Sec2.HIFC_pre_typing_Tm_arrow_933774e72bdf7760163358af0baad84d))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_933774e72bdf7760163358af0baad84d
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(94,28-94,97); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_933774e72bdf7760163358af0baad84d @x1
@x2))
(and 
;; def=Sec2.HIFC.fst(94,28-94,97); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x1
@x2)))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Sec2.HIFC_interpretation_Tm_arrow_933774e72bdf7760163358af0baad84d.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_933774e72bdf7760163358af0baad84d @x1
@x2)))
:qid Sec2.HIFC_interpretation_Tm_arrow_933774e72bdf7760163358af0baad84d))

:named Sec2.HIFC_interpretation_Tm_arrow_933774e72bdf7760163358af0baad84d))
(declare-fun Tm_abs_fae972115ea27c8162f17c3baed73aaa (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_fae972115ea27c8162f17c3baed73aaa
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_fae972115ea27c8162f17c3baed73aaa @x0
@x1
@x2)
(Tm_arrow_933774e72bdf7760163358af0baad84d @x1
@x2))
 

:pattern ((Tm_abs_fae972115ea27c8162f17c3baed73aaa @x0
@x1
@x2))
:qid typing_Tm_abs_fae972115ea27c8162f17c3baed73aaa))

:named typing_Tm_abs_fae972115ea27c8162f17c3baed73aaa))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_fae972115ea27c8162f17c3baed73aaa
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_fae972115ea27c8162f17c3baed73aaa @x1
@x2
@x3)
@x0)
(Prims.l_imp (Prims.eq2 (Sec2.HIFC.hifc @x3
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x2
@x3))
(Sec2.HIFC.return @x3
(ApplyTT @x2
Tm_unit))
@x0)
(Prims.l_and (Prims.l_and (Prims.l_Forall Sec2.HIFC.store
(Tm_abs_1ea7d35c6bae97ca7fbac5c80ffa3f2a @x3
@x2))
(Prims.l_imp (Prims.l_and (Prims.l_and (Sec2.HIFC.reads @x3
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x2
@x3)
(Sec2.HIFC.return @x3
(ApplyTT @x2
Tm_unit))
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.writes @x3
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x2
@x3)
(Sec2.HIFC.return @x3
(ApplyTT @x2
Tm_unit))
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.respects @x3
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x2
@x3)
(Sec2.HIFC.return @x3
(ApplyTT @x2
Tm_unit))
(Prims.Nil Sec2.HIFC.flow)))
(Prims.l_and (Prims.l_and (Sec2.HIFC.reads @x3
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x3)
(Sec2.HIFC.return @x3
(ApplyTT @x2
Tm_unit))
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.writes @x3
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x3)
(Sec2.HIFC.return @x3
(ApplyTT @x2
Tm_unit))
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.respects @x3
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x3)
(Sec2.HIFC.return @x3
(ApplyTT @x2
Tm_unit))
(Prims.Nil Sec2.HIFC.flow)))))
(Prims.l_Forall (Sec2.HIFC.hifc @x3
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x3))
(Tm_abs_fbdba9f7a8581eb0e8eb7e14c12446d8 @x2
@x1
@x3)))))
 

:pattern ((ApplyTT (Tm_abs_fae972115ea27c8162f17c3baed73aaa @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_fae972115ea27c8162f17c3baed73aaa))

:named interpretation_Tm_abs_fae972115ea27c8162f17c3baed73aaa))




































;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.l_Forall (Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x1
@x2))
(Tm_abs_fae972115ea27c8162f17c3baed73aaa @x0
@x1
@x2)))

;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x1
@x2)))

;; def=Sec2.HIFC.fst(725,9-729,19); use=Sec2.HIFC.fst(728,4-729,19)
(= (Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit))
@x3)
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(728,4-729,19)
(and 
;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)

;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(729,4-729,19)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Sec2.HIFC.store)
(HasType @x5
(FStar.Pervasives.Native.tuple2 @x2
Sec2.HIFC.store))

;; def=Sec2.HIFC.fst(94,78-94,86); use=Sec2.HIFC.fst(729,4-729,10)
(= @x4
(FStar.Pervasives.Native.snd @x2
Sec2.HIFC.store
@x5))


;; def=Sec2.HIFC.fst(94,90-94,96); use=Sec2.HIFC.fst(729,4-729,10)
(= (FStar.Pervasives.Native.fst @x2
Sec2.HIFC.store
@x5)
(ApplyTT @x1
Tm_unit))
)

;; def=Sec2.HIFC.fst(725,60-725,68); use=Sec2.HIFC.fst(729,4-729,19)
(= @x4
(FStar.Pervasives.Native.snd @x2
Sec2.HIFC.store
@x5))
)
 
;;no pats
:qid l_quant_interp_867243bbcc0c287708af6a37a421be53.2))


;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)
(implies 
;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(729,4-729,19)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(729,4-729,19)
(Sec2.HIFC.reads @x2
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x1
@x2)
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit))
(Sec2.HIFC.bot Dummy_value))
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(729,4-729,19)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(729,4-729,19)
(Sec2.HIFC.writes @x2
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x1
@x2)
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit))
(Sec2.HIFC.bot Dummy_value))
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)
(Sec2.HIFC.respects @x2
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x1
@x2)
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit))
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Sec2.HIFC.fst(88,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)
(and 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(729,4-729,19)
(Valid 
;; def=Sec2.HIFC.fst(88,4-88,13); use=Sec2.HIFC.fst(729,4-729,19)
(Sec2.HIFC.reads @x2
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2)
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit))
(Sec2.HIFC.bot Dummy_value))
)


;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(729,4-729,19)
(Valid 
;; def=Sec2.HIFC.fst(89,4-89,14); use=Sec2.HIFC.fst(729,4-729,19)
(Sec2.HIFC.writes @x2
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2)
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit))
(Sec2.HIFC.bot Dummy_value))
)


;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)
(Valid 
;; def=Sec2.HIFC.fst(90,4-90,17); use=Sec2.HIFC.fst(729,4-729,19)
(Sec2.HIFC.respects @x2
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2)
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit))
(Prims.Nil Sec2.HIFC.flow))
)
)
)
)



;; def=Prims.fst(356,2-356,58); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2)))

;; def=Prims.fst(356,26-356,41); use=Sec2.HIFC.fst(728,4-729,19)
(= @x4
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit)))


;; def=Sec2.HIFC.fst(725,9-729,19); use=Sec2.HIFC.fst(728,4-729,19)
(= @x4
(Sec2.HIFC.return @x2
(ApplyTT @x1
Tm_unit)))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x2)))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x5
@x4)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x0
@x5)
)
)
 
;;no pats
:qid l_quant_interp_867243bbcc0c287708af6a37a421be53.4))
)
 
;;no pats
:qid l_quant_interp_867243bbcc0c287708af6a37a421be53.3))
)
)
 
;;no pats
:qid l_quant_interp_867243bbcc0c287708af6a37a421be53.1))
)
 

:pattern ((Valid (Prims.l_Forall (Sec2.HIFC.hifc @x2
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x1
@x2))
(Tm_abs_fae972115ea27c8162f17c3baed73aaa @x0
@x1
@x2))))
:qid l_quant_interp_867243bbcc0c287708af6a37a421be53))

:named l_quant_interp_867243bbcc0c287708af6a37a421be53))

(declare-fun Tm_abs_748d8505b2957efd59cc2dc91d9c8b54 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_748d8505b2957efd59cc2dc91d9c8b54
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(369,38-369,57); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_748d8505b2957efd59cc2dc91d9c8b54 @x0
@x1
@x2)
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
 

:pattern ((Tm_abs_748d8505b2957efd59cc2dc91d9c8b54 @x0
@x1
@x2))
:qid typing_Tm_abs_748d8505b2957efd59cc2dc91d9c8b54))

:named typing_Tm_abs_748d8505b2957efd59cc2dc91d9c8b54))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_748d8505b2957efd59cc2dc91d9c8b54
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(369,38-369,57); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_748d8505b2957efd59cc2dc91d9c8b54 @x1
@x2
@x3)
@x0)
(Prims.l_imp (Prims.eq2 @x3
(ApplyTT @x1
Tm_unit)
@x0)
(Prims.l_Forall (Sec2.HIFC.hifc @x3
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_3d8ea00c797bf8e846b42966314a2705 @x1
@x3))
(Tm_abs_fae972115ea27c8162f17c3baed73aaa @x2
@x1
@x3))))
 

:pattern ((ApplyTT (Tm_abs_748d8505b2957efd59cc2dc91d9c8b54 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_748d8505b2957efd59cc2dc91d9c8b54))

:named interpretation_Tm_abs_748d8505b2957efd59cc2dc91d9c8b54))







; Encoding query formula : forall (a: Type) (wp: Prims.pure_wp a) (f: (_: Prims.unit -> Prims.PURE a)).
;   (*  - Could not prove post-condition
; *)
;   forall (p:
;     Prims.pure_post (Sec2.HIFC.hifc a
;           Sec2.HIFC.bot
;           Sec2.HIFC.bot
;           []
;           (fun _ -> Prims.l_True)
;           (fun s0 _ s1 -> s0 == s1))).
;     wp (fun _ -> Prims.l_True) /\
;     (forall (pure_result:
;         Sec2.HIFC.hifc a
;           Sec2.HIFC.bot
;           Sec2.HIFC.bot
;           []
;           (fun _ -> Prims.l_True)
;           (fun s0 _ s1 -> s0 == s1)).
;         Prims.auto_squash (p pure_result)) ==>
;     (forall (pure_result: Prims.unit).
;         (forall (a: Type0) (wp: Prims.pure_wp a) (p: Prims.pure_post a) (q: Prims.pure_post a).
;             (forall (x: a). p x ==> q x) ==> wp p ==> wp q) ==>
;         wp (fun bind_result_1 ->
;               f () == bind_result_1 ==>
;               (forall (any_result:
;                   Sec2.HIFC.hifc a
;                     Sec2.HIFC.bot
;                     Sec2.HIFC.bot
;                     []
;                     (fun _ -> Prims.l_True)
;                     (fun s0 r s1 -> s0 == s1 /\ r == f ())).
;                   Sec2.HIFC.return a (f ()) == any_result ==>
;                   (forall (s0: Sec2.HIFC.store) (r: a & Sec2.HIFC.store).
;                       s0 == FStar.Pervasives.Native.snd r /\ FStar.Pervasives.Native.fst r == f () ==>
;                       s0 == FStar.Pervasives.Native.snd r) /\
;                   (Sec2.HIFC.reads (Sec2.HIFC.return a (f ())) Sec2.HIFC.bot /\
;                     Sec2.HIFC.writes (Sec2.HIFC.return a (f ())) Sec2.HIFC.bot /\
;                     Sec2.HIFC.respects (Sec2.HIFC.return a (f ())) [] ==>
;                     Sec2.HIFC.reads (Sec2.HIFC.return a (f ())) Sec2.HIFC.bot /\
;                     Sec2.HIFC.writes (Sec2.HIFC.return a (f ())) Sec2.HIFC.bot /\
;                     Sec2.HIFC.respects (Sec2.HIFC.return a (f ())) []) /\
;                   (forall (return_val:
;                       Sec2.HIFC.hifc a
;                         Sec2.HIFC.bot
;                         Sec2.HIFC.bot
;                         []
;                         (fun _ -> Prims.l_True)
;                         (fun s0 _ s1 -> s0 == s1)).
;                       return_val == Sec2.HIFC.return a (f ()) ==>
;                       return_val == Sec2.HIFC.return a (f ()) ==>
;                       (forall (return_val:
;                           Sec2.HIFC.hifc a
;                             Sec2.HIFC.bot
;                             Sec2.HIFC.bot
;                             []
;                             (fun _ -> Prims.l_True)
;                             (fun s0 _ s1 -> s0 == s1)).
;                           return_val == return_val ==> p return_val)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let lift_PURE_HIFC`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.pure_wp @x0))
(HasType @x2
(Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd @x0
@x1)))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (Sec2.HIFC.hifc @x0
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x0))))

;; def=Sec2.HIFC.fst(726,16-726,34); use=Sec2.HIFC.fst(728,4-729,19)
(Valid 
;; def=Sec2.HIFC.fst(726,16-726,34); use=Sec2.HIFC.fst(728,4-729,19)
(ApplyTT @x1
(Tm_abs_5e34897418ce4950a4effcc8c159cf53 @x0))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x4 Term))
 (! (implies (or label_1
(HasType @x4
(Sec2.HIFC.hifc @x0
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x0))))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(728,4-729,19)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(728,4-729,19)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(728,4-729,19)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(728,4-729,19)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(728,25-728,57)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=FStar.Monotonic.Pure.fst(42,4-42,53); use=Sec2.HIFC.fst(728,25-728,57)
(forall ((@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x5
Tm_type)
(HasType @x6
(Prims.pure_wp @x5)))

;; def=FStar.Monotonic.Pure.fst(34,2-34,75); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post @x5))
(HasType @x8
(Prims.pure_post @x5))

;; def=FStar.Monotonic.Pure.fst(34,28-34,55); use=Sec2.HIFC.fst(728,4-729,19)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
@x5)

;; def=FStar.Monotonic.Pure.fst(34,43-34,46); use=Sec2.HIFC.fst(728,4-729,19)
(Valid 
;; def=FStar.Monotonic.Pure.fst(34,43-34,46); use=Sec2.HIFC.fst(728,4-729,19)
(ApplyTT @x7
@x9)
)
)

;; def=FStar.Monotonic.Pure.fst(34,51-34,54); use=Sec2.HIFC.fst(728,4-729,19)
(Valid 
;; def=FStar.Monotonic.Pure.fst(34,51-34,54); use=Sec2.HIFC.fst(728,4-729,19)
(ApplyTT @x8
@x9)
)
)
 
;;no pats
:qid @query.6))


;; def=FStar.Monotonic.Pure.fst(34,61-34,65); use=Sec2.HIFC.fst(728,4-729,19)
(Valid 
;; def=FStar.Monotonic.Pure.fst(34,61-34,65); use=Sec2.HIFC.fst(728,4-729,19)
(ApplyTT @x6
@x7)
)
)

;; def=FStar.Monotonic.Pure.fst(34,70-34,74); use=Sec2.HIFC.fst(728,4-729,19)
(Valid 
;; def=FStar.Monotonic.Pure.fst(34,70-34,74); use=Sec2.HIFC.fst(728,4-729,19)
(ApplyTT @x6
@x8)
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)

;; def=Prims.fst(369,7-369,58); use=Sec2.HIFC.fst(728,4-729,19)
(or label_2

;; def=Prims.fst(369,7-369,58); use=Sec2.HIFC.fst(728,4-729,19)
(Valid 
;; def=Prims.fst(369,7-369,58); use=Sec2.HIFC.fst(728,4-729,19)
(ApplyTT @x1
(Tm_abs_748d8505b2957efd59cc2dc91d9c8b54 @x2
@x3
@x0))
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.lift_PURE_HIFC, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da, Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3, eq2-interp, equation_FStar.Pervasives.Native.snd, equation_Prims.eqtype, equation_Prims.l_True, equation_Prims.logical, equation_Prims.pure_post, equation_Prims.pure_post_, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.hifc, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.no_leakage, equation_Sec2.HIFC.no_leakage_k, equation_Sec2.HIFC.reads, equation_Sec2.HIFC.related_runs, equation_Sec2.HIFC.respects, equation_Sec2.HIFC.return, equation_Sec2.HIFC.sel, equation_Sec2.HIFC.store, equation_Sec2.HIFC.upd, equation_Sec2.HIFC.writes, int_inversion, interpretation_Tm_abs_5e34897418ce4950a4effcc8c159cf53, interpretation_Tm_abs_748d8505b2957efd59cc2dc91d9c8b54, interpretation_Tm_abs_d8f6311fe730dc1a0e5f2ce486ca7c9a, l_imp-interp, l_quant_interp_867243bbcc0c287708af6a37a421be53, lemma_FStar.Map.lemma_SelUpd2, proj_equation_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, refinement_interpretation_Tm_refine_013102ccaffb74d33eaab4c36743a80c, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5, refinement_interpretation_Tm_refine_e42d42a18df6499f852ef32d15f0eed0, refinement_interpretation_Tm_refine_e49ec169ea1c198e613d500cb9096326, typing_Prims.int, typing_Prims.l_True, typing_Tm_abs_5e34897418ce4950a4effcc8c159cf53, typing_Tm_abs_748d8505b2957efd59cc2dc91d9c8b54

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lift_PURE_HIFC


; <Start encoding let lift_PURE_HIFC>













(declare-fun Sec2.HIFC.lift_PURE_HIFC (Term Term Term) Term)













(declare-fun Tm_abs_7b372358421686aba07509ee0dbf1509 (Term) Term)
(declare-fun Tm_refine_f4c42b63623399c58d6f3ab61438eb94 (Term) Term)


;;;;;;;;;;;;;;;;a: Type -> wp: Prims.pure_wp a -> f: (_: Prims.unit -> Prims.PURE a)   -> Prims.Pure (hifc a bot bot [] (fun _ -> Prims.l_True) (fun s0 _ s1 -> s0 == s1))
(declare-fun Tm_arrow_2766b05da78cdb593a0eba4f8afa570c () Term)
(declare-fun Sec2.HIFC.lift_PURE_HIFC@tok () Term)
















; </end encoding let lift_PURE_HIFC>

;;;;;;;;;;;;;;;;typing_Tm_abs_7b372358421686aba07509ee0dbf1509
;;; Fact-ids: Name Sec2.HIFC.lift_PURE_HIFC; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(725,60-725,68); use=Sec2.HIFC.fst(725,60-725,68)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_7b372358421686aba07509ee0dbf1509 @x0)
(Tm_arrow_377a9b09134d28404fafc8a65f7f3a0c @x0))
 

:pattern ((Tm_abs_7b372358421686aba07509ee0dbf1509 @x0))
:qid typing_Tm_abs_7b372358421686aba07509ee0dbf1509))

:named typing_Tm_abs_7b372358421686aba07509ee0dbf1509))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_7b372358421686aba07509ee0dbf1509
;;; Fact-ids: Name Sec2.HIFC.lift_PURE_HIFC; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(725,60-725,68); use=Sec2.HIFC.fst(725,60-725,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (Tm_abs_7b372358421686aba07509ee0dbf1509 @x3)
@x0)
@x1)
@x2)
(Prims.eq2 Sec2.HIFC.store
@x0
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (Tm_abs_7b372358421686aba07509ee0dbf1509 @x3)
@x0)
@x1)
@x2))
:qid interpretation_Tm_abs_7b372358421686aba07509ee0dbf1509))

:named interpretation_Tm_abs_7b372358421686aba07509ee0dbf1509))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(731,0-731,40)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

























; Encoding query formula : forall (a: Type)
;   (wp: Prims.pure_wp a)
;   (p:
;   Prims.pure_post (Sec2.HIFC.hifc a
;         Sec2.HIFC.bot
;         Sec2.HIFC.bot
;         []
;         (fun _ -> Prims.l_True)
;         (fun s0 _ s1 -> s0 == s1)))
;   (q:
;   Prims.pure_post (Sec2.HIFC.hifc a
;         Sec2.HIFC.bot
;         Sec2.HIFC.bot
;         []
;         (fun _ -> Prims.l_True)
;         (fun s0 _ s1 -> s0 == s1))).
;   (forall (x:
;       Sec2.HIFC.hifc a
;         Sec2.HIFC.bot
;         Sec2.HIFC.bot
;         []
;         (fun _ -> Prims.l_True)
;         (fun s0 _ s1 -> s0 == s1)).
;       p x ==> q x) ==>
;   wp (fun _ -> Prims.l_True) /\
;   (forall (pure_result:
;       Sec2.HIFC.hifc a
;         Sec2.HIFC.bot
;         Sec2.HIFC.bot
;         []
;         (fun _ -> Prims.l_True)
;         (fun s0 _ s1 -> s0 == s1)).
;       Prims.auto_squash (p pure_result)) ==>
;   wp (fun _ -> Prims.l_True) /\
;   (forall (pure_result:
;       Sec2.HIFC.hifc a
;         Sec2.HIFC.bot
;         Sec2.HIFC.bot
;         []
;         (fun _ -> Prims.l_True)
;         (fun s0 _ s1 -> s0 == s1)).
;       Prims.auto_squash (q pure_result))


; Context: While encoding a query
; While typechecking the top-level declaration `sub_effect PURE ~> HIFC`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.pure_wp @x0))
(HasType @x2
(Prims.pure_post (Sec2.HIFC.hifc @x0
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x0))))
(HasType @x3
(Prims.pure_post (Sec2.HIFC.hifc @x0
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x0))))

;; def=Prims.fst(334,28-334,55); use=Prims.fst(334,28-334,55)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Sec2.HIFC.hifc @x0
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x0)))

;; def=Prims.fst(334,43-334,46); use=Prims.fst(334,43-334,46)
(Valid 
;; def=Prims.fst(334,43-334,46); use=Prims.fst(334,43-334,46)
(ApplyTT @x2
@x4)
)
)

;; def=Prims.fst(334,51-334,54); use=Prims.fst(334,51-334,54)
(Valid 
;; def=Prims.fst(334,51-334,54); use=Prims.fst(334,51-334,54)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(726,16-726,34); use=Sec2.HIFC.fst(731,26-731,40)
(Valid 
;; def=Sec2.HIFC.fst(726,16-726,34); use=Sec2.HIFC.fst(731,26-731,40)
(ApplyTT @x1
(Tm_abs_5e34897418ce4950a4effcc8c159cf53 @x0))
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(731,26-731,40)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Sec2.HIFC.hifc @x0
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x0)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(731,26-731,40)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(731,26-731,40)
(ApplyTT @x2
@x4)
)
)
 
;;no pats
:qid @query.2))
)

;; def=Prims.fst(441,29-441,97); use=Sec2.HIFC.fst(731,26-731,40)
(and 
;; def=Sec2.HIFC.fst(726,16-726,34); use=Sec2.HIFC.fst(731,26-731,40)
(or label_1

;; def=Sec2.HIFC.fst(726,16-726,34); use=Sec2.HIFC.fst(731,26-731,40)
(Valid 
;; def=Sec2.HIFC.fst(726,16-726,34); use=Sec2.HIFC.fst(731,26-731,40)
(ApplyTT @x1
(Tm_abs_5e34897418ce4950a4effcc8c159cf53 @x0))
)
)


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(731,26-731,40)
(forall ((@x4 Term))
 (! (implies (HasType @x4
(Sec2.HIFC.hifc @x0
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value)
(Prims.Nil Sec2.HIFC.flow)
Tm_abs_c3794d9278af0177a0cdef3355c2de9a
(Tm_abs_7b372358421686aba07509ee0dbf1509 @x0)))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(731,26-731,40)
(or label_2

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(731,26-731,40)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(731,26-731,40)
(ApplyTT @x3
@x4)
)
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.0, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt sub_effect PURE ~> HIFC


; <Skipped sub_effect PURE ~> HIFC/>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(750,5-750,63)

(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Non_total_Tm_arrow_0bec7e58ef9f3f0adff38297182a4c10 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Typing for non-total arrows
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(734,17-735,25); use=Sec2.HIFC.fst(735,21-735,35)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flow)
(HasType @x4
(Prims.list Sec2.HIFC.flow))
(HasType @x5
Sec2.HIFC.pre)
(HasType @x6
(Sec2.HIFC.post @x0)))
(HasType (Non_total_Tm_arrow_0bec7e58ef9f3f0adff38297182a4c10 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
 

:pattern ((HasType (Non_total_Tm_arrow_0bec7e58ef9f3f0adff38297182a4c10 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_type))
:qid non_total_function_typing_Non_total_Tm_arrow_0bec7e58ef9f3f0adff38297182a4c10))

:named non_total_function_typing_Non_total_Tm_arrow_0bec7e58ef9f3f0adff38297182a4c10))
(declare-fun Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Typing for non-total arrows
;;; Fact-ids: 
(assert (! 
;; def=Sec2.HIFC.fst(734,17-736,14); use=Sec2.HIFC.fst(736,23-750,63)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
(Prims.list Sec2.HIFC.flow))
(HasType @x4
Sec2.HIFC.pre)
(HasType @x5
(Sec2.HIFC.post @x0)))
(HasType (Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
 

:pattern ((HasType (Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid non_total_function_typing_Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f))

:named non_total_function_typing_Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f))



; Encoding query formula : forall (a: Type)
;   (w: Sec2.HIFC.label)
;   (r: Sec2.HIFC.label)
;   (f: Sec2.HIFC.flow)
;   (fs: Prims.list Sec2.HIFC.flow)
;   (p: Sec2.HIFC.pre)
;   (q: Sec2.HIFC.post a)
;   (c: (_: Prims.unit -> Sec2.HIFC.HIFC a)).
;   (*  - Could not prove post-condition
; *)
;   (forall (_: Prims.unit).
;       Sec2.HIFC.label_inclusion r r /\ Sec2.HIFC.label_inclusion w w /\
;       (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;           (match fs with
;             | [] -> Prims.l_False
;             | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;           (forall (from: Prims.int) (to: Prims.int).
;               FStar.Set.mem from
;                 (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;               true /\
;               FStar.Set.mem to
;                 (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;               true /\ from <> to == true ==>
;               (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                   (match fs with
;                     | [] -> Prims.l_False
;                     | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                   (FStar.Set.mem from
;                       (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                     true) /\
;                   (FStar.Set.mem to
;                       (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                     true)))) /\
;       (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store). p s0 /\ q s0 x s1 ==> q s0 x s1)) /\
;   (forall (p: Prims.pure_post (_: Prims.unit -> Sec2.HIFC.HIFC a)).
;       (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc) (v: Prims.int).
;           Sec2.HIFC.has_flow_1 from to f /\ from <> to ==>
;           (forall (s0: Sec2.HIFC.store) (x: a) (x': a) (s1: Sec2.HIFC.store) (s1': Sec2.HIFC.store).
;               p s0 /\ p (Sec2.HIFC.upd s0 from v) /\ q s0 x s1 /\ Sec2.HIFC.modifies w s0 s1 /\
;               q (Sec2.HIFC.upd s0 from v) x' s1' /\
;               Sec2.HIFC.modifies w (Sec2.HIFC.upd s0 from v) s1' ==>
;               Sec2.HIFC.sel s1 to == Sec2.HIFC.sel s1' to)) /\
;       (forall (pure_result: (_: Prims.unit -> Sec2.HIFC.HIFC a)). Prims.auto_squash (p pure_result)) ==>
;       (forall (_: Prims.unit).
;           (forall (from: Sec2.HIFC.loc) (to: Sec2.HIFC.loc) (v: Prims.int).
;               Sec2.HIFC.has_flow_1 from to f /\ from <> to ==>
;               (forall (s0: Sec2.HIFC.store)
;                   (x: a)
;                   (x': a)
;                   (s1: Sec2.HIFC.store)
;                   (s1': Sec2.HIFC.store).
;                   p s0 /\ p (Sec2.HIFC.upd s0 from v) /\ q s0 x s1 /\ Sec2.HIFC.modifies w s0 s1 /\
;                   q (Sec2.HIFC.upd s0 from v) x' s1' /\
;                   Sec2.HIFC.modifies w (Sec2.HIFC.upd s0 from v) s1' ==>
;                   Sec2.HIFC.sel s1 to == Sec2.HIFC.sel s1' to)) /\
;           Sec2.HIFC.label_inclusion r r /\ Sec2.HIFC.label_inclusion w w /\
;           (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (match fs with
;                 | [] -> Prims.l_False
;                 | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;               (forall (from: Prims.int) (to: Prims.int).
;                   FStar.Set.mem from
;                     (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                   true /\
;                   FStar.Set.mem to
;                     (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                   true /\ from <> to == true ==>
;                   (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;                       (match fs with
;                         | [] -> Prims.l_False
;                         | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;                       (FStar.Set.mem from
;                           (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                         true) /\
;                       (FStar.Set.mem to
;                           (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                         true)))) /\
;           (forall (s0: Sec2.HIFC.store) (x: a) (s1: Sec2.HIFC.store).
;               p s0 /\ q s0 x s1 ==> q s0 x s1)) /\
;       (forall (any_result: (_: Prims.unit -> Sec2.HIFC.HIFC a)). p any_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let refine_flow`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Sec2.HIFC.label)
(HasType @x2
Sec2.HIFC.label)
(HasType @x3
Sec2.HIFC.flow)
(HasType @x4
(Prims.list Sec2.HIFC.flow))
(HasType @x5
Sec2.HIFC.pre)
(HasType @x6
(Sec2.HIFC.post @x0))
(HasType @x7
(Non_total_Tm_arrow_0bec7e58ef9f3f0adff38297182a4c10 @x0
@x2
@x1
@x3
@x4
@x5
@x6)))

;; def=Sec2.HIFC.fst(750,5-750,63); use=Sec2.HIFC.fst(750,5-750,63)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x8 Term))
 (! (implies (HasType @x8
Prims.unit)

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(750,5-750,63)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(750,5-750,63)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(750,5-750,63)
(Sec2.HIFC.label_inclusion @x2
@x2)
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(750,5-750,63)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(750,5-750,63)
(Sec2.HIFC.label_inclusion @x1
@x1)
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb10 @x4))
(ite (is-Prims.Nil @lb10)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(750,5-750,63)
false

(ite (is-Prims.Cons @lb10)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(750,5-750,63)
(= @x9
(Prims.Cons_hd @lb10))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x9
(Prims.Cons_tl @lb10))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x10
Prims.int)
(HasType @x11
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (FStar.Set.mem Prims.int
@x10
(let ((@lb12 @x9))
(FStar.Pervasives.Native.Mktuple2__1 @lb12)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (FStar.Set.mem Prims.int
@x11
(let ((@lb12 @x9))
(FStar.Pervasives.Native.Mktuple2__2 @lb12)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (Prims.op_disEquality Prims.int
@x10
@x11)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(750,5-750,63)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(750,5-750,63)
(exists ((@x12 Term))
 (! (and (HasType @x12
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb13 @x4))
(ite (is-Prims.Nil @lb13)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(750,5-750,63)
false

(ite (is-Prims.Cons @lb13)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(750,5-750,63)
(= @x12
(Prims.Cons_hd @lb13))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x12
(Prims.Cons_tl @lb13))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (FStar.Set.mem Prims.int
@x10
(let ((@lb13 @x12))
(FStar.Pervasives.Native.Mktuple2__1 @lb13)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (FStar.Set.mem Prims.int
@x11
(let ((@lb13 @x12))
(FStar.Pervasives.Native.Mktuple2__2 @lb13)))
(BoxBool true))
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x9
Sec2.HIFC.store)
(HasType @x10
@x0)
(HasType @x11
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT @x5
@x9)
)


;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT (ApplyTT (ApplyTT @x6
@x9)
@x10)
@x11)
)
)

;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(750,5-750,63)
(or label_4

;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT (ApplyTT (ApplyTT @x6
@x9)
@x10)
@x11)
)
)
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post (Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f @x0
@x2
@x1
@x4
@x5
@x6)))

;; def=Sec2.HIFC.fst(738,11-748,40); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x9 Term) (@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x9
(Sec2.HIFC.loc Dummy_value))
(HasType @x10
(Sec2.HIFC.loc Dummy_value))
(HasType @x11
Prims.int)

;; def=Sec2.HIFC.fst(739,13-739,33); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(739,13-739,33); use=Sec2.HIFC.fst(750,5-750,63)
(Sec2.HIFC.has_flow_1 @x9
@x10
@x3)
)


;; def=Sec2.HIFC.fst(740,13-740,23); use=Sec2.HIFC.fst(750,5-750,63)
(not (= @x9
@x10))
)

;; def=Sec2.HIFC.fst(741,13-748,39); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term))
 (! (implies (and (HasType @x12
Sec2.HIFC.store)
(HasType @x13
@x0)
(HasType @x14
@x0)
(HasType @x15
Sec2.HIFC.store)
(HasType @x16
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(742,15-742,19); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(742,15-742,19); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT @x5
@x12)
)


;; def=Sec2.HIFC.fst(743,15-743,32); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(743,15-743,32); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT @x5
(Sec2.HIFC.upd @x12
@x9
@x11))
)


;; def=Sec2.HIFC.fst(744,15-744,24); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(744,15-744,24); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT (ApplyTT (ApplyTT @x6
@x12)
@x13)
@x15)
)


;; def=Sec2.HIFC.fst(745,15-745,31); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(745,15-745,31); use=Sec2.HIFC.fst(750,5-750,63)
(Sec2.HIFC.modifies @x1
@x12
@x15)
)


;; def=Sec2.HIFC.fst(746,15-746,39); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(746,15-746,39); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT (ApplyTT (ApplyTT @x6
(Sec2.HIFC.upd @x12
@x9
@x11))
@x14)
@x16)
)


;; def=Sec2.HIFC.fst(747,15-747,45); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(747,15-747,45); use=Sec2.HIFC.fst(750,5-750,63)
(Sec2.HIFC.modifies @x1
(Sec2.HIFC.upd @x12
@x9
@x11)
@x16)
)
)

;; def=Sec2.HIFC.fst(748,15-748,38); use=Sec2.HIFC.fst(750,5-750,63)
(= (Sec2.HIFC.sel @x15
@x10)
(Sec2.HIFC.sel @x16
@x10))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))


;; def=Prims.fst(441,36-441,97); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f @x0
@x2
@x1
@x4
@x5
@x6))

;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Prims.fst(441,83-441,96); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT @x8
@x9)
)
)
 
;;no pats
:qid @query.9))
)

;; def=Prims.fst(459,77-459,89); use=Sec2.HIFC.fst(750,5-750,63)
(and 
;; def=dummy(0,0-0,0); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x9 Term))
 (! (implies (HasType @x9
Prims.unit)

;; def=Sec2.HIFC.fst(591,11-633,66); use=Sec2.HIFC.fst(750,5-750,63)
(and 
;; def=Sec2.HIFC.fst(591,11-601,40); use=Sec2.HIFC.fst(750,31-750,47)
(forall ((@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x10
(Sec2.HIFC.loc Dummy_value))
(HasType @x11
(Sec2.HIFC.loc Dummy_value))
(HasType @x12
Prims.int)

;; def=Sec2.HIFC.fst(592,13-592,33); use=Sec2.HIFC.fst(750,31-750,47)
(Valid 
;; def=Sec2.HIFC.fst(592,13-592,33); use=Sec2.HIFC.fst(750,31-750,47)
(Sec2.HIFC.has_flow_1 @x10
@x11
@x3)
)


;; def=Sec2.HIFC.fst(593,13-593,23); use=Sec2.HIFC.fst(750,31-750,47)
(not (= @x10
@x11))
)

;; def=Sec2.HIFC.fst(594,13-601,39); use=Sec2.HIFC.fst(750,31-750,47)
(forall ((@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term))
 (! (implies (and (HasType @x13
Sec2.HIFC.store)
(HasType @x14
@x0)
(HasType @x15
@x0)
(HasType @x16
Sec2.HIFC.store)
(HasType @x17
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(595,15-595,19); use=Sec2.HIFC.fst(750,31-750,47)
(Valid 
;; def=Sec2.HIFC.fst(595,15-595,19); use=Sec2.HIFC.fst(750,31-750,47)
(ApplyTT @x5
@x13)
)


;; def=Sec2.HIFC.fst(596,15-596,32); use=Sec2.HIFC.fst(750,31-750,47)
(Valid 
;; def=Sec2.HIFC.fst(596,15-596,32); use=Sec2.HIFC.fst(750,31-750,47)
(ApplyTT @x5
(Sec2.HIFC.upd @x13
@x10
@x12))
)


;; def=Sec2.HIFC.fst(597,15-597,24); use=Sec2.HIFC.fst(750,31-750,47)
(Valid 
;; def=Sec2.HIFC.fst(597,15-597,24); use=Sec2.HIFC.fst(750,31-750,47)
(ApplyTT (ApplyTT (ApplyTT @x6
@x13)
@x14)
@x16)
)


;; def=Sec2.HIFC.fst(598,15-598,31); use=Sec2.HIFC.fst(750,31-750,47)
(Valid 
;; def=Sec2.HIFC.fst(598,15-598,31); use=Sec2.HIFC.fst(750,31-750,47)
(Sec2.HIFC.modifies @x1
@x13
@x16)
)


;; def=Sec2.HIFC.fst(599,15-599,39); use=Sec2.HIFC.fst(750,31-750,47)
(Valid 
;; def=Sec2.HIFC.fst(599,15-599,39); use=Sec2.HIFC.fst(750,31-750,47)
(ApplyTT (ApplyTT (ApplyTT @x6
(Sec2.HIFC.upd @x13
@x10
@x12))
@x15)
@x17)
)


;; def=Sec2.HIFC.fst(600,15-600,45); use=Sec2.HIFC.fst(750,31-750,47)
(Valid 
;; def=Sec2.HIFC.fst(600,15-600,45); use=Sec2.HIFC.fst(750,31-750,47)
(Sec2.HIFC.modifies @x1
(Sec2.HIFC.upd @x13
@x10
@x12)
@x17)
)
)

;; def=Sec2.HIFC.fst(601,15-601,38); use=Sec2.HIFC.fst(750,31-750,47)
(or label_5

;; def=Sec2.HIFC.fst(601,15-601,38); use=Sec2.HIFC.fst(750,31-750,47)
(= (Sec2.HIFC.sel @x16
@x11)
(Sec2.HIFC.sel @x17
@x11))
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))


;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(750,5-750,63)
(or label_6

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(750,5-750,63)
(Sec2.HIFC.label_inclusion @x2
@x2)
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(750,5-750,63)
(or label_7

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(750,5-750,63)
(Sec2.HIFC.label_inclusion @x1
@x1)
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb11 @x4))
(ite (is-Prims.Nil @lb11)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(750,5-750,63)
false

(ite (is-Prims.Cons @lb11)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(750,5-750,63)
(= @x10
(Prims.Cons_hd @lb11))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x10
(Prims.Cons_tl @lb11))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x11
Prims.int)
(HasType @x12
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (FStar.Set.mem Prims.int
@x11
(let ((@lb13 @x10))
(FStar.Pervasives.Native.Mktuple2__1 @lb13)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (FStar.Set.mem Prims.int
@x12
(let ((@lb13 @x10))
(FStar.Pervasives.Native.Mktuple2__2 @lb13)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (Prims.op_disEquality Prims.int
@x11
@x12)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(750,5-750,63)
(or label_8

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(750,5-750,63)
(exists ((@x13 Term))
 (! (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb14 @x4))
(ite (is-Prims.Nil @lb14)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(750,5-750,63)
false

(ite (is-Prims.Cons @lb14)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(750,5-750,63)
(= @x13
(Prims.Cons_hd @lb14))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(750,5-750,63)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x13
(Prims.Cons_tl @lb14))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (FStar.Set.mem Prims.int
@x11
(let ((@lb14 @x13))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(750,5-750,63)
(= (FStar.Set.mem Prims.int
@x12
(let ((@lb14 @x13))
(FStar.Pervasives.Native.Mktuple2__2 @lb14)))
(BoxBool true))
)
 
;;no pats
:qid @query.15))
)
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x10
Sec2.HIFC.store)
(HasType @x11
@x0)
(HasType @x12
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(633,32-633,37); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT @x5
@x10)
)


;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(633,41-633,50); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT (ApplyTT (ApplyTT @x6
@x10)
@x11)
@x12)
)
)

;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(750,5-750,63)
(or label_9

;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Sec2.HIFC.fst(633,55-633,65); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT (ApplyTT (ApplyTT @x6
@x10)
@x11)
@x12)
)
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.10))


;; def=Prims.fst(451,66-451,102); use=Sec2.HIFC.fst(750,5-750,63)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f @x0
@x2
@x1
@x4
@x5
@x6))

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(750,5-750,63)
(or label_10

;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(750,5-750,63)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Sec2.HIFC.fst(750,5-750,63)
(ApplyTT @x8
@x9)
)
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.refine_flow, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, equation_FStar.Set.subset, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let refine_flow


; <Start encoding let refine_flow>

(declare-fun Non_total_Tm_arrow_0bec7e58ef9f3f0adff38297182a4c10 (Term Term Term Term Term Term Term) Term)
(declare-fun Sec2.HIFC.refine_flow (Term Term Term Term Term Term Term Term) Term)

(declare-fun Non_total_Tm_arrow_73bbf71340a6a8758e3d65d029e71f4f (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_179ae4bd9b87557e14879097576cdf2a (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;$c: (_: Prims.unit -> HIFC a) -> Prims.Pure (_: Prims.unit -> HIFC a)
(declare-fun Tm_arrow_99ea10bdb523d4015d0995ba670bed8e () Term)
(declare-fun Sec2.HIFC.refine_flow@tok () Term)



;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_Sec2.HIFC_1465 (Term Term Term Term Term Term Term Term) Term)

; </end encoding let refine_flow>


; encoding sigelt let ref


; <Start encoding let ref>

(declare-fun Sec2.HIFC.ref (Term) Term)
;;;;;;;;;;;;;;;;l: label -> Type
(declare-fun Tm_arrow_0c2e11a4e8b5f1a4ab211f1c6ad57d76 () Term)
(declare-fun Sec2.HIFC.ref@tok () Term)
(declare-fun Tm_refine_eeba74df603eda36cf3875c2e80291f6 (Term) Term)

; </end encoding let ref>


; encoding sigelt val Sec2.HIFC.high


; <Start encoding val Sec2.HIFC.high>

(declare-fun Sec2.HIFC.high (Dummy_sort) Term)

; </end encoding val Sec2.HIFC.high>


; encoding sigelt let low


; <Start encoding let low>

(declare-fun Sec2.HIFC.low (Dummy_sort) Term)

; </end encoding let low>


; encoding sigelt let lref


; <Start encoding let lref>

(declare-fun Sec2.HIFC.lref () Term)

; </end encoding let lref>


; encoding sigelt let href


; <Start encoding let href>

(declare-fun Sec2.HIFC.href () Term)

; </end encoding let href>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.ref; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(754,4-754,7); use=Sec2.HIFC.fst(754,4-754,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Sec2.HIFC.label)
(HasType (Sec2.HIFC.ref @x0)
Tm_type))
 

:pattern ((Sec2.HIFC.ref @x0))
:qid typing_Sec2.HIFC.ref))

:named typing_Sec2.HIFC.ref))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.lref; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.lref
Tm_type)
:named typing_Sec2.HIFC.lref))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.low; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(756,4-756,7); use=Sec2.HIFC.fst(756,4-756,7)
(forall ((@u0 Dummy_sort))
 (! (HasType (Sec2.HIFC.low @u0)
Sec2.HIFC.label)
 

:pattern ((Sec2.HIFC.low @u0))
:qid typing_Sec2.HIFC.low))

:named typing_Sec2.HIFC.low))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.href; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.href
Tm_type)
:named typing_Sec2.HIFC.href))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Sec2.HIFC.high; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(755,11-755,15); use=Sec2.HIFC.fst(755,11-755,15)
(forall ((@u0 Dummy_sort))
 (! (HasType (Sec2.HIFC.high @u0)
Sec2.HIFC.label)
 

:pattern ((Sec2.HIFC.high @u0))
:qid typing_Sec2.HIFC.high))

:named typing_Sec2.HIFC.high))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.complement; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(42,4-42,14); use=FStar.Set.fsti(42,4-42,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0)))
(HasType (FStar.Set.complement @x0
@x1)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.complement @x0
@x1))
:qid typing_FStar.Set.complement))

:named typing_FStar.Set.complement))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Sec2.HIFC.ref; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(754,20-754,41); use=Sec2.HIFC.fst(754,20-754,41)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_eeba74df603eda36cf3875c2e80291f6 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_eeba74df603eda36cf3875c2e80291f6 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_eeba74df603eda36cf3875c2e80291f6))

:named refinement_kinding_Tm_refine_eeba74df603eda36cf3875c2e80291f6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Sec2.HIFC.ref; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(754,20-754,41); use=Sec2.HIFC.fst(754,20-754,41)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_eeba74df603eda36cf3875c2e80291f6 @x2))
(and (HasTypeFuel @u0
@x1
(Sec2.HIFC.loc Dummy_value))

;; def=Sec2.HIFC.fst(754,27-754,40); use=Sec2.HIFC.fst(754,27-754,40)
(BoxBool_proj_0 (FStar.Set.mem (Sec2.HIFC.loc Dummy_value)
@x1
@x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_eeba74df603eda36cf3875c2e80291f6 @x2)))
:qid refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6))

:named refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_complement
;;; Fact-ids: Name FStar.Set.mem_complement; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0)))

;; def=FStar.Set.fsti(82,12-82,50); use=FStar.Set.fsti(82,12-82,50)
(= (FStar.Set.mem @x0
@x1
(FStar.Set.complement @x0
@x2))
(Prims.op_Negation (FStar.Set.mem @x0
@x1
@x2)))
)
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.complement @x0
@x2)))
:qid lemma_FStar.Set.mem_complement))
:named lemma_FStar.Set.mem_complement))
;;;;;;;;;;;;;;;;haseq for Tm_refine_eeba74df603eda36cf3875c2e80291f6
;;; Fact-ids: Name Sec2.HIFC.ref; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(754,20-754,41); use=Sec2.HIFC.fst(754,20-754,41)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_eeba74df603eda36cf3875c2e80291f6 @x0)))
(Valid (Prims.hasEq (Sec2.HIFC.loc Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_eeba74df603eda36cf3875c2e80291f6 @x0))))
:qid haseqTm_refine_eeba74df603eda36cf3875c2e80291f6))

:named haseqTm_refine_eeba74df603eda36cf3875c2e80291f6))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Sec2.HIFC.lref; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.lref
Tm_type)
:named function_token_typing_Sec2.HIFC.lref))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Sec2.HIFC.href; Namespace Sec2.HIFC
(assert (! (HasType Sec2.HIFC.href
Tm_type)
:named function_token_typing_Sec2.HIFC.href))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.ref
;;; Fact-ids: Name Sec2.HIFC.ref; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(754,4-754,7); use=Sec2.HIFC.fst(754,4-754,7)
(forall ((@x0 Term))
 (! (= (Sec2.HIFC.ref @x0)
(Tm_refine_eeba74df603eda36cf3875c2e80291f6 @x0))
 

:pattern ((Sec2.HIFC.ref @x0))
:qid equation_Sec2.HIFC.ref))

:named equation_Sec2.HIFC.ref))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.lref
;;; Fact-ids: Name Sec2.HIFC.lref; Namespace Sec2.HIFC
(assert (! (= Sec2.HIFC.lref
(Sec2.HIFC.ref (Sec2.HIFC.low Dummy_value)))
:named equation_Sec2.HIFC.lref))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.low
;;; Fact-ids: Name Sec2.HIFC.low; Namespace Sec2.HIFC
(assert (! 
;; def=Sec2.HIFC.fst(756,4-756,7); use=Sec2.HIFC.fst(756,4-756,7)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=Sec2.HIFC.fst(756,4-756,7); use=Sec2.HIFC.fst(756,4-756,7)
(Sec2.HIFC.low @u0)

(FStar.Set.complement (Sec2.HIFC.loc Dummy_value)
(Sec2.HIFC.high Dummy_value)))
 

:pattern (
;; def=Sec2.HIFC.fst(756,4-756,7); use=Sec2.HIFC.fst(756,4-756,7)
(Sec2.HIFC.low @u0)
)
:qid equation_Sec2.HIFC.low))

:named equation_Sec2.HIFC.low))
;;;;;;;;;;;;;;;;Equation for Sec2.HIFC.href
;;; Fact-ids: Name Sec2.HIFC.href; Namespace Sec2.HIFC
(assert (! (= Sec2.HIFC.href
(Sec2.HIFC.ref (Sec2.HIFC.high Dummy_value)))
:named equation_Sec2.HIFC.href))
(push) ;; push{2

; Starting query at Sec2.HIFC.fst(766,3-767,13)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot)
;     (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single h))
;     (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single h)) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source (Sec2.HIFC.single l) [Sec2.HIFC.bot, Sec2.HIFC.single h] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (match
;                   Sec2.HIFC.add_source (Sec2.HIFC.single l) [Sec2.HIFC.bot, Sec2.HIFC.single h]
;                 with
;                 | [] -> Prims.l_False
;                 | y :: q -> f1 == y \/ FStar.List.Tot.Base.memP f1 q) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.unit) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.int) (s1: Sec2.HIFC.store).
;           x == Sec2.HIFC.sel s0 l /\ Sec2.HIFC.modifies Sec2.HIFC.bot s0 s1 /\
;           (Sec2.HIFC.sel s1 h == x) /\ Sec2.HIFC.modifies (Sec2.HIFC.single h) s1 s1) ==>
;       Sec2.HIFC.sel s1 h == Sec2.HIFC.sel s0 l)


; Context: While encoding a query
; While typechecking the top-level declaration `let test`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(766,3-767,13)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(766,3-767,13)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(766,3-767,13)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(766,3-767,13)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value)))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(766,3-767,13)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(766,3-767,13)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(766,3-767,13)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1)))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(766,3-767,13)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(766,3-767,13)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(766,3-767,13)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(766,3-767,13)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(766,3-767,13)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(766,3-767,13)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(766,3-767,13)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(766,3-767,13)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(766,3-767,13)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(766,3-767,13)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(766,3-767,13)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(766,3-767,13)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb6 (Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Prims.Nil Sec2.HIFC.flow)))))
(ite (is-Prims.Nil @lb6)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(766,3-767,13)
false

(ite (is-Prims.Cons @lb6)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(766,3-767,13)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(766,3-767,13)
(= @x5
(Prims.Cons_hd @lb6))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(766,3-767,13)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(766,3-767,13)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Cons_tl @lb6))
)
)

Unreachable)))

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(766,3-767,13)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(766,3-767,13)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(766,3-767,13)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(766,3-767,13)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(766,12-766,16)
(= @x5
(Sec2.HIFC.sel @x2
@x0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(766,3-767,13)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(766,3-767,13)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(767,4-767,9)
(= (Sec2.HIFC.sel @x4
@x1)
@x5)


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(766,3-767,13)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(766,3-767,13)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x1)
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(765,28-765,48); use=Sec2.HIFC.fst(766,3-767,13)
(or label_4

;; def=Sec2.HIFC.fst(765,28-765,48); use=Sec2.HIFC.fst(766,3-767,13)
(= (Sec2.HIFC.sel @x4
@x1)
(Sec2.HIFC.sel @x2
@x0))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @query, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, int_inversion, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.label, typing_Sec2.HIFC.single

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test


; <Start encoding let test>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test@tok () Term)

; </end encoding let test>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(775,3-776,13)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot)
;     (Sec2.HIFC.single l) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single h))
;     (Sec2.HIFC.single h) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source (Sec2.HIFC.single l) [Sec2.HIFC.bot, Sec2.HIFC.single h] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (f1 == (Sec2.HIFC.single l, Sec2.HIFC.single h) \/ FStar.List.Tot.Base.memP f1 []) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.unit) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.int) (s1: Sec2.HIFC.store).
;           x == Sec2.HIFC.sel s0 l /\ Sec2.HIFC.modifies Sec2.HIFC.bot s0 s1 /\
;           (Sec2.HIFC.sel s1 h == x) /\ Sec2.HIFC.modifies (Sec2.HIFC.single h) s1 s1) ==>
;       Sec2.HIFC.sel s1 h == Sec2.HIFC.sel s0 l)


; Context: While encoding a query
; While typechecking the top-level declaration `let test2`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(775,3-776,13)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(775,3-776,13)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(775,3-776,13)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(775,3-776,13)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(775,3-776,13)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(775,3-776,13)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(775,3-776,13)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Sec2.HIFC.single @x1))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(775,3-776,13)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(775,3-776,13)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(775,3-776,13)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(775,3-776,13)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(775,3-776,13)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(775,3-776,13)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(775,3-776,13)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(775,3-776,13)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(775,3-776,13)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(775,3-776,13)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(775,3-776,13)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(775,3-776,13)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(775,3-776,13)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(775,3-776,13)
(= @x5
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x0)
(Sec2.HIFC.single @x1)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(775,3-776,13)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(775,3-776,13)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(775,3-776,13)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(775,3-776,13)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(775,3-776,13)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(775,3-776,13)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(775,12-775,16)
(= @x5
(Sec2.HIFC.sel @x2
@x0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(775,3-776,13)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(775,3-776,13)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(776,4-776,9)
(= (Sec2.HIFC.sel @x4
@x1)
@x5)


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(775,3-776,13)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(775,3-776,13)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x1)
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(774,28-774,48); use=Sec2.HIFC.fst(775,3-776,13)
(or label_4

;; def=Sec2.HIFC.fst(774,28-774,48); use=Sec2.HIFC.fst(775,3-776,13)
(= (Sec2.HIFC.sel @x4
@x1)
(Sec2.HIFC.sel @x2
@x0))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test2, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.single, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test2


; <Start encoding let test2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test2@tok () Term)

; </end encoding let test2>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(784,4-784,20)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot)
;     (Sec2.HIFC.single l) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single h))
;     (Sec2.HIFC.single h) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source (Sec2.HIFC.single l) [Sec2.HIFC.bot, Sec2.HIFC.single h] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (f1 == (Sec2.HIFC.single l, Sec2.HIFC.single h) \/ FStar.List.Tot.Base.memP f1 []) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.unit) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.int) (s1: Sec2.HIFC.store).
;           x == Sec2.HIFC.sel s0 l /\ Sec2.HIFC.modifies Sec2.HIFC.bot s0 s1 /\
;           (Sec2.HIFC.sel s1 h == x) /\ Sec2.HIFC.modifies (Sec2.HIFC.single h) s1 s1) ==>
;       Sec2.HIFC.sel s1 h == Sec2.HIFC.sel s0 l)


; Context: While encoding a query
; While typechecking the top-level declaration `let test3`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(784,4-784,20)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(784,4-784,20)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(784,4-784,20)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(784,4-784,20)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(784,4-784,20)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(784,4-784,20)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(784,4-784,20)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Sec2.HIFC.single @x1))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(784,4-784,20)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(784,4-784,20)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(784,4-784,20)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(784,4-784,20)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(784,4-784,20)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(784,4-784,20)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(784,4-784,20)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(784,4-784,20)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(784,4-784,20)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(784,4-784,20)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(784,4-784,20)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(784,4-784,20)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(784,4-784,20)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(784,4-784,20)
(= @x5
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x0)
(Sec2.HIFC.single @x1)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(784,4-784,20)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(784,4-784,20)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(784,4-784,20)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(784,4-784,20)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(784,4-784,20)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(784,4-784,20)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(784,13-784,17)
(= @x5
(Sec2.HIFC.sel @x2
@x0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(784,4-784,20)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(784,4-784,20)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(784,4-784,9)
(= (Sec2.HIFC.sel @x4
@x1)
@x5)


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(784,4-784,20)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(784,4-784,20)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x1)
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(783,28-783,48); use=Sec2.HIFC.fst(784,4-784,20)
(or label_4

;; def=Sec2.HIFC.fst(783,28-783,48); use=Sec2.HIFC.fst(784,4-784,20)
(= (Sec2.HIFC.sel @x4
@x1)
(Sec2.HIFC.sel @x2
@x0))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test3, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.single, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test3


; <Start encoding let test3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test3 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test3@tok () Term)

; </end encoding let test3>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(790,4-790,20)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot) Sec2.HIFC.low /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single h)) Sec2.HIFC.high /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source (Sec2.HIFC.single l) [Sec2.HIFC.bot, Sec2.HIFC.single h] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (f1 == (Sec2.HIFC.low, Sec2.HIFC.high) \/ FStar.List.Tot.Base.memP f1 []) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.unit) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.int) (s1: Sec2.HIFC.store).
;           x == Sec2.HIFC.sel s0 l /\ Sec2.HIFC.modifies Sec2.HIFC.bot s0 s1 /\
;           (Sec2.HIFC.sel s1 h == x) /\ Sec2.HIFC.modifies (Sec2.HIFC.single h) s1 s1) ==>
;       Sec2.HIFC.sel s1 h == Sec2.HIFC.sel s0 l)


; Context: While encoding a query
; While typechecking the top-level declaration `let test3_lab`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(790,4-790,20)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(790,4-790,20)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(790,4-790,20)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(790,4-790,20)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.low Dummy_value))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(790,4-790,20)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(790,4-790,20)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(790,4-790,20)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Sec2.HIFC.high Dummy_value))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(790,4-790,20)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(790,4-790,20)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(790,4-790,20)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(790,4-790,20)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(790,4-790,20)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(790,4-790,20)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(790,4-790,20)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(790,4-790,20)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(790,4-790,20)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(790,4-790,20)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(790,4-790,20)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(790,4-790,20)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(790,4-790,20)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(790,4-790,20)
(= @x5
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.low Dummy_value)
(Sec2.HIFC.high Dummy_value)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(790,4-790,20)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(790,4-790,20)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(790,4-790,20)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(790,4-790,20)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(790,4-790,20)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(790,4-790,20)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(790,13-790,17)
(= @x5
(Sec2.HIFC.sel @x2
@x0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(790,4-790,20)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(790,4-790,20)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(790,4-790,9)
(= (Sec2.HIFC.sel @x4
@x1)
@x5)


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(790,4-790,20)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(790,4-790,20)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x1)
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(789,28-789,48); use=Sec2.HIFC.fst(790,4-790,20)
(or label_4

;; def=Sec2.HIFC.fst(789,28-789,48); use=Sec2.HIFC.fst(790,4-790,20)
(= (Sec2.HIFC.sel @x4
@x1)
(Sec2.HIFC.sel @x2
@x0))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test3_lab, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.mem_complement, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, lemma_FStar.Set.subset_mem, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_Negation, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.low, typing_Sec2.HIFC.single, typing_Sec2.HIFC.union, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test3_lab


; <Start encoding let test3_lab>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test3_lab (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test3_lab@tok () Term)

; </end encoding let test3_lab>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(796,4-797,10)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href) (x: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single l))
;     (Sec2.HIFC.single l) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single h) Sec2.HIFC.bot)
;     (Sec2.HIFC.single h) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source Sec2.HIFC.bot [Sec2.HIFC.bot, Sec2.HIFC.bot] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           Prims.l_False)) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.int) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.unit) (s1: Sec2.HIFC.store).
;           Sec2.HIFC.sel s1 h == 0 /\ Sec2.HIFC.modifies (Sec2.HIFC.single h) s0 s1 /\
;           (x == Sec2.HIFC.sel s1 l) /\ Sec2.HIFC.modifies Sec2.HIFC.bot s1 s1) ==>
;       Sec2.HIFC.sel s1 h == 0 /\ x == Sec2.HIFC.sel s1 l)


; Context: While encoding a query
; While typechecking the top-level declaration `let test3_1`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href)
(HasType @x2
Prims.int))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(796,4-797,10)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(796,4-797,10)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(796,4-797,10)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(796,4-797,10)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(796,4-797,10)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(796,4-797,10)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(796,4-797,10)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x1))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(796,4-797,10)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb4 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb4)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(796,4-797,10)
false

(ite (is-Prims.Cons @lb4)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(796,4-797,10)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(796,4-797,10)
(= @x3
(Prims.Cons_hd @lb4))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(796,4-797,10)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(796,4-797,10)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(Prims.Cons_tl @lb4))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(796,4-797,10)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Prims.int)
(HasType @x5
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(796,4-797,10)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(796,4-797,10)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(796,4-797,10)
(= (Prims.op_disEquality Prims.int
@x4
@x5)
(BoxBool true))
)
label_3)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(796,4-797,10)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
Sec2.HIFC.store)
(HasType @x4
Prims.int)
(HasType @x5
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(796,4-797,10)
(exists ((@x6 Term) (@x7 Term))
 (! (and (HasType @x6
Prims.unit)
(HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(796,4-796,9)
(= (Sec2.HIFC.sel @x7
@x1)
(BoxInt 0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(796,4-797,10)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(796,4-797,10)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x1)
@x3
@x7)
)


;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(797,4-797,8)
(= @x4
(Sec2.HIFC.sel @x7
@x0))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(796,4-797,10)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(796,4-797,10)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x7
@x5)
)
)
 
;;no pats
:qid @query.4))
)

;; def=Sec2.HIFC.fst(795,28-795,58); use=Sec2.HIFC.fst(796,4-797,10)
(and 
;; def=Sec2.HIFC.fst(795,28-795,41); use=Sec2.HIFC.fst(796,4-797,10)
(or label_4

;; def=Sec2.HIFC.fst(795,28-795,41); use=Sec2.HIFC.fst(796,4-797,10)
(= (Sec2.HIFC.sel @x5
@x1)
(BoxInt 0))
)


;; def=Sec2.HIFC.fst(795,45-795,58); use=Sec2.HIFC.fst(796,4-797,10)
(or label_5

;; def=Sec2.HIFC.fst(795,45-795,58); use=Sec2.HIFC.fst(796,4-797,10)
(= @x4
(Sec2.HIFC.sel @x5
@x0))
)
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test3_1, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.single, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test3_1


; <Start encoding let test3_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test3_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test3_1@tok () Term)

; </end encoding let test3_1>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(804,4-805,10)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href) (x: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single h))
;     (Sec2.HIFC.single h) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot)
;     (Sec2.HIFC.single l) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source Sec2.HIFC.bot [Sec2.HIFC.bot, Sec2.HIFC.bot] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (f1 == (Sec2.HIFC.single h, Sec2.HIFC.bot) \/ FStar.List.Tot.Base.memP f1 []) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.int) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.unit) (s1: Sec2.HIFC.store).
;           Sec2.HIFC.sel s1 l == x /\ Sec2.HIFC.modifies (Sec2.HIFC.single l) s0 s1 /\
;           (x == Sec2.HIFC.sel s1 h) /\ Sec2.HIFC.modifies Sec2.HIFC.bot s1 s1) ==>
;       Sec2.HIFC.sel s1 l == x /\ x == Sec2.HIFC.sel s1 h)


; Context: While encoding a query
; While typechecking the top-level declaration `let test4`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href)
(HasType @x2
Prims.int))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(804,4-805,10)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(804,4-805,10)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(804,4-805,10)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(804,4-805,10)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Sec2.HIFC.single @x1))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(804,4-805,10)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(804,4-805,10)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(804,4-805,10)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(804,4-805,10)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb4 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb4)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(804,4-805,10)
false

(ite (is-Prims.Cons @lb4)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(804,4-805,10)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(804,4-805,10)
(= @x3
(Prims.Cons_hd @lb4))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(804,4-805,10)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(804,4-805,10)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(Prims.Cons_tl @lb4))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(804,4-805,10)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Prims.int)
(HasType @x5
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(804,4-805,10)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(804,4-805,10)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(804,4-805,10)
(= (Prims.op_disEquality Prims.int
@x4
@x5)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(804,4-805,10)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(804,4-805,10)
(exists ((@x6 Term))
 (! (and (HasType @x6
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(804,4-805,10)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(804,4-805,10)
(= @x6
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x1)
(Sec2.HIFC.bot Dummy_value)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(804,4-805,10)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(804,4-805,10)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(804,4-805,10)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__1 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(804,4-805,10)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(804,4-805,10)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
Sec2.HIFC.store)
(HasType @x4
Prims.int)
(HasType @x5
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(804,4-805,10)
(exists ((@x6 Term) (@x7 Term))
 (! (and (HasType @x6
Prims.unit)
(HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(804,4-804,9)
(= (Sec2.HIFC.sel @x7
@x0)
@x2)


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(804,4-805,10)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(804,4-805,10)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x0)
@x3
@x7)
)


;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(805,4-805,8)
(= @x4
(Sec2.HIFC.sel @x7
@x1))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(804,4-805,10)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(804,4-805,10)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x7
@x5)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(803,28-803,58); use=Sec2.HIFC.fst(804,4-805,10)
(and 
;; def=Sec2.HIFC.fst(803,28-803,41); use=Sec2.HIFC.fst(804,4-805,10)
(or label_4

;; def=Sec2.HIFC.fst(803,28-803,41); use=Sec2.HIFC.fst(804,4-805,10)
(= (Sec2.HIFC.sel @x5
@x0)
@x2)
)


;; def=Sec2.HIFC.fst(803,45-803,58); use=Sec2.HIFC.fst(804,4-805,10)
(or label_5

;; def=Sec2.HIFC.fst(803,45-803,58); use=Sec2.HIFC.fst(804,4-805,10)
(= @x4
(Sec2.HIFC.sel @x5
@x1))
)
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test4, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.single, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test4


; <Start encoding let test4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test4 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test4@tok () Term)

; </end encoding let test4>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(811,4-812,10)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href) (x: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single h))
;     (Sec2.HIFC.single h) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot)
;     (Sec2.HIFC.single l) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source Sec2.HIFC.bot [Sec2.HIFC.bot, Sec2.HIFC.bot] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           Prims.l_False)) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.int) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.unit) (s1: Sec2.HIFC.store).
;           Sec2.HIFC.sel s1 l == x /\ Sec2.HIFC.modifies (Sec2.HIFC.single l) s0 s1 /\
;           (x == Sec2.HIFC.sel s1 h) /\ Sec2.HIFC.modifies Sec2.HIFC.bot s1 s1) ==>
;       Sec2.HIFC.sel s1 l == x /\ x == Sec2.HIFC.sel s1 h)


; Context: While encoding a query
; While typechecking the top-level declaration `let test5`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href)
(HasType @x2
Prims.int))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(811,4-812,10)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(811,4-812,10)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(811,4-812,10)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(811,4-812,10)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Sec2.HIFC.single @x1))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(811,4-812,10)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(811,4-812,10)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(811,4-812,10)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(811,4-812,10)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb4 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb4)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(811,4-812,10)
false

(ite (is-Prims.Cons @lb4)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(811,4-812,10)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(811,4-812,10)
(= @x3
(Prims.Cons_hd @lb4))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(811,4-812,10)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(811,4-812,10)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(Prims.Cons_tl @lb4))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(811,4-812,10)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Prims.int)
(HasType @x5
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(811,4-812,10)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(811,4-812,10)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(811,4-812,10)
(= (Prims.op_disEquality Prims.int
@x4
@x5)
(BoxBool true))
)
label_3)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(811,4-812,10)
(forall ((@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x3
Sec2.HIFC.store)
(HasType @x4
Prims.int)
(HasType @x5
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(811,4-812,10)
(exists ((@x6 Term) (@x7 Term))
 (! (and (HasType @x6
Prims.unit)
(HasType @x7
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(811,4-811,9)
(= (Sec2.HIFC.sel @x7
@x0)
@x2)


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(811,4-812,10)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(811,4-812,10)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x0)
@x3
@x7)
)


;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(812,4-812,8)
(= @x4
(Sec2.HIFC.sel @x7
@x1))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(811,4-812,10)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(811,4-812,10)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x7
@x5)
)
)
 
;;no pats
:qid @query.4))
)

;; def=Sec2.HIFC.fst(810,28-810,58); use=Sec2.HIFC.fst(811,4-812,10)
(and 
;; def=Sec2.HIFC.fst(810,28-810,41); use=Sec2.HIFC.fst(811,4-812,10)
(or label_4

;; def=Sec2.HIFC.fst(810,28-810,41); use=Sec2.HIFC.fst(811,4-812,10)
(= (Sec2.HIFC.sel @x5
@x0)
@x2)
)


;; def=Sec2.HIFC.fst(810,45-810,58); use=Sec2.HIFC.fst(811,4-812,10)
(or label_5

;; def=Sec2.HIFC.fst(810,45-810,58); use=Sec2.HIFC.fst(811,4-812,10)
(= @x4
(Sec2.HIFC.sel @x5
@x1))
)
)
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test5, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, false_interp, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.single, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test5


; <Start encoding let test5>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test5 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test5@tok () Term)

; </end encoding let test5>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(818,3-819,13)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot) Sec2.HIFC.low /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single h)) Sec2.HIFC.high /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source (Sec2.HIFC.single l) [Sec2.HIFC.bot, Sec2.HIFC.single h] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (f1 == (Sec2.HIFC.low, Sec2.HIFC.high) \/ FStar.List.Tot.Base.memP f1 []) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.unit) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.int) (s1: Sec2.HIFC.store).
;           x == Sec2.HIFC.sel s0 l /\ Sec2.HIFC.modifies Sec2.HIFC.bot s0 s1 /\
;           (Sec2.HIFC.sel s1 h == x) /\ Sec2.HIFC.modifies (Sec2.HIFC.single h) s1 s1) ==>
;       Sec2.HIFC.sel s1 h == Sec2.HIFC.sel s0 l)


; Context: While encoding a query
; While typechecking the top-level declaration `let test6`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(818,3-819,13)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(818,3-819,13)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(818,3-819,13)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(818,3-819,13)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.low Dummy_value))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(818,3-819,13)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(818,3-819,13)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(818,3-819,13)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Sec2.HIFC.high Dummy_value))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(818,3-819,13)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x1))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(818,3-819,13)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(818,3-819,13)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(818,3-819,13)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(818,3-819,13)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(818,3-819,13)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(818,3-819,13)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(818,3-819,13)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(818,3-819,13)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(818,3-819,13)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(818,3-819,13)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(818,3-819,13)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(818,3-819,13)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(818,3-819,13)
(= @x5
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.low Dummy_value)
(Sec2.HIFC.high Dummy_value)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(818,3-819,13)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(818,3-819,13)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(818,3-819,13)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(818,3-819,13)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(818,3-819,13)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(818,3-819,13)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(818,12-818,16)
(= @x5
(Sec2.HIFC.sel @x2
@x0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(818,3-819,13)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(818,3-819,13)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(819,4-819,9)
(= (Sec2.HIFC.sel @x4
@x1)
@x5)


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(818,3-819,13)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(818,3-819,13)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x1)
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(817,28-817,48); use=Sec2.HIFC.fst(818,3-819,13)
(or label_4

;; def=Sec2.HIFC.fst(817,28-817,48); use=Sec2.HIFC.fst(818,3-819,13)
(= (Sec2.HIFC.sel @x4
@x1)
(Sec2.HIFC.sel @x2
@x0))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test6, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.mem_complement, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_Negation, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.low, typing_Sec2.HIFC.single, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test6


; <Start encoding let test6>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test6 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test6@tok () Term)

; </end encoding let test6>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(826,3-827,13)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single h) Sec2.HIFC.bot)
;     (Sec2.HIFC.single h) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single l))
;     (Sec2.HIFC.single l) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match [] @ Sec2.HIFC.add_source (Sec2.HIFC.single h) [Sec2.HIFC.bot, Sec2.HIFC.single l] with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (f1 == (Sec2.HIFC.high, Sec2.HIFC.low) \/ FStar.List.Tot.Base.memP f1 []) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.unit) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.int) (s1: Sec2.HIFC.store).
;           x == Sec2.HIFC.sel s0 h /\ Sec2.HIFC.modifies Sec2.HIFC.bot s0 s1 /\
;           (Sec2.HIFC.sel s1 l == x) /\ Sec2.HIFC.modifies (Sec2.HIFC.single l) s1 s1) ==>
;       Sec2.HIFC.sel s1 l == Sec2.HIFC.sel s0 h)


; Context: While encoding a query
; While typechecking the top-level declaration `let test7`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(826,3-827,13)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(826,3-827,13)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(826,3-827,13)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(826,3-827,13)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x1))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(826,3-827,13)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(826,3-827,13)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(826,3-827,13)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(826,3-827,13)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(826,3-827,13)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(826,3-827,13)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(826,3-827,13)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(826,3-827,13)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(826,3-827,13)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(826,3-827,13)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(826,3-827,13)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(826,3-827,13)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(826,3-827,13)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(826,3-827,13)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(826,3-827,13)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(826,3-827,13)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(826,3-827,13)
(= @x5
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.high Dummy_value)
(Sec2.HIFC.low Dummy_value)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(826,3-827,13)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(826,3-827,13)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(826,3-827,13)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(826,3-827,13)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(826,3-827,13)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(826,3-827,13)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(826,12-826,16)
(= @x5
(Sec2.HIFC.sel @x2
@x1))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(826,3-827,13)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(826,3-827,13)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(827,4-827,9)
(= (Sec2.HIFC.sel @x4
@x0)
@x5)


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(826,3-827,13)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(826,3-827,13)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x0)
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(825,28-825,48); use=Sec2.HIFC.fst(826,3-827,13)
(or label_4

;; def=Sec2.HIFC.fst(825,28-825,48); use=Sec2.HIFC.fst(826,3-827,13)
(= (Sec2.HIFC.sel @x4
@x0)
(Sec2.HIFC.sel @x2
@x1))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test7, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.low, typing_Sec2.HIFC.single, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test7


; <Start encoding let test7>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test7 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test7@tok () Term)

; </end encoding let test7>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(835,3-837,19)

(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single h)
;         (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot))
;     (Sec2.HIFC.union (Sec2.HIFC.single h) (Sec2.HIFC.single l)) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot
;         (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single l)))
;     (Sec2.HIFC.single l) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match
;           [] @
;           Sec2.HIFC.add_source (Sec2.HIFC.single h)
;             ((Sec2.HIFC.bot,
;               Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single l)) ::
;               ([] @ Sec2.HIFC.add_source (Sec2.HIFC.single l) [Sec2.HIFC.bot, Sec2.HIFC.single l]))
;         with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (f1 == (Sec2.HIFC.single h, Sec2.HIFC.single l) \/ FStar.List.Tot.Base.memP f1 []) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true)))) /\
;   (forall (s0: Sec2.HIFC.store) (x: Prims.unit) (s1: Sec2.HIFC.store).
;       (exists (x: Prims.int) (s1: Sec2.HIFC.store).
;           x == Sec2.HIFC.sel s0 h /\ Sec2.HIFC.modifies Sec2.HIFC.bot s0 s1 /\
;           (exists (x: Prims.int) (s1: Sec2.HIFC.store).
;               x == Sec2.HIFC.sel s1 l /\ Sec2.HIFC.modifies Sec2.HIFC.bot s1 s1 /\
;               (Sec2.HIFC.sel s1 l == x + 1) /\ Sec2.HIFC.modifies (Sec2.HIFC.single l) s1 s1) /\
;           Sec2.HIFC.modifies (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single l)) s1 s1) ==>
;       Sec2.HIFC.sel s1 l == Sec2.HIFC.sel s0 l + 1)


; Context: While encoding a query
; While typechecking the top-level declaration `let test8`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(835,3-837,19)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(835,3-837,19)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(835,3-837,19)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(835,3-837,19)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(835,3-837,19)
(= @x5
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(835,13-835,17)
(= @x5
(Sec2.HIFC.sel @x2
@x1))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x7 Term) (@x8 Term))
 (! (and (HasType @x7
Prims.int)
(HasType @x8
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(836,12-836,16)
(= @x7
(Sec2.HIFC.sel @x6
@x0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x6
@x8)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(837,4-837,9)
(= (Sec2.HIFC.sel @x4
@x0)
(Prims.op_Addition @x7
(BoxInt 1)))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x0)
@x8
@x4)
)
)
 
;;no pats
:qid @query.6))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(834,28-834,52); use=Sec2.HIFC.fst(835,3-837,19)
(or label_4

;; def=Sec2.HIFC.fst(834,28-834,52); use=Sec2.HIFC.fst(835,3-837,19)
(= (Sec2.HIFC.sel @x4
@x0)
(Prims.op_Addition (Sec2.HIFC.sel @x2
@x0)
(BoxInt 1)))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test8, 1)
; STATUS: unknown because (incomplete quantifiers)

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='2' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(835,3-837,19)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(835,3-837,19)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(835,3-837,19)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(835,3-837,19)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(835,3-837,19)
(= @x5
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(835,13-835,17)
(= @x5
(Sec2.HIFC.sel @x2
@x1))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x7 Term) (@x8 Term))
 (! (and (HasType @x7
Prims.int)
(HasType @x8
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(836,12-836,16)
(= @x7
(Sec2.HIFC.sel @x6
@x0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x6
@x8)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(837,4-837,9)
(= (Sec2.HIFC.sel @x4
@x0)
(Prims.op_Addition @x7
(BoxInt 1)))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x0)
@x8
@x4)
)
)
 
;;no pats
:qid @query.6))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(834,28-834,52); use=Sec2.HIFC.fst(835,3-837,19)
(or label_4

;; def=Sec2.HIFC.fst(834,28-834,52); use=Sec2.HIFC.fst(835,3-837,19)
(= (Sec2.HIFC.sel @x4
@x0)
(Prims.op_Addition (Sec2.HIFC.sel @x2
@x0)
(BoxInt 1)))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test8, 1)
; STATUS: unknown because (incomplete quantifiers)

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='4' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel (SFuel (SFuel ZFuel)))))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href))

;; def=Sec2.HIFC.fst(629,15-633,66); use=Sec2.HIFC.fst(835,3-837,19)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb3 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))))
(ite (is-Prims.Nil @lb3)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(835,3-837,19)
false

(ite (is-Prims.Cons @lb3)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(835,3-837,19)
(= @x2
(Prims.Cons_hd @lb3))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x2
(Prims.Cons_tl @lb3))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x3
Prims.int)
(HasType @x4
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__1 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb5 @x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (Prims.op_disEquality Prims.int
@x3
@x4)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(835,3-837,19)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x5 Term))
 (! (and (HasType @x5
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(835,3-837,19)
(= @x5
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(835,3-837,19)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x5
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x3
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(835,3-837,19)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x5))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Sec2.HIFC.fst(633,15-633,66); use=Sec2.HIFC.fst(835,3-837,19)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
Sec2.HIFC.store)
(HasType @x3
Prims.unit)
(HasType @x4
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x5 Term) (@x6 Term))
 (! (and (HasType @x5
Prims.int)
(HasType @x6
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(835,13-835,17)
(= @x5
(Sec2.HIFC.sel @x2
@x1))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x2
@x6)
)


;; def=Sec2.HIFC.fst(581,26-581,111); use=Sec2.HIFC.fst(835,3-837,19)
(exists ((@x7 Term) (@x8 Term))
 (! (and (HasType @x7
Prims.int)
(HasType @x8
Sec2.HIFC.store)

;; def=Sec2.HIFC.fst(714,28-714,41); use=Sec2.HIFC.fst(836,12-836,16)
(= @x7
(Sec2.HIFC.sel @x6
@x0))


;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,54-581,71); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.bot Dummy_value)
@x6
@x8)
)


;; def=Sec2.HIFC.fst(719,27-719,40); use=Sec2.HIFC.fst(837,4-837,9)
(= (Sec2.HIFC.sel @x4
@x0)
(Prims.op_Addition @x7
(BoxInt 1)))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.single @x0)
@x8
@x4)
)
)
 
;;no pats
:qid @query.6))


;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Valid 
;; def=Sec2.HIFC.fst(581,92-581,109); use=Sec2.HIFC.fst(835,3-837,19)
(Sec2.HIFC.modifies (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
@x6
@x4)
)
)
 
;;no pats
:qid @query.5))
)

;; def=Sec2.HIFC.fst(834,28-834,52); use=Sec2.HIFC.fst(835,3-837,19)
(or label_4

;; def=Sec2.HIFC.fst(834,28-834,52); use=Sec2.HIFC.fst(835,3-837,19)
(= (Sec2.HIFC.sel @x4
@x0)
(Prims.op_Addition (Sec2.HIFC.sel @x2
@x0)
(BoxInt 1)))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test8, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented, @query, FStar.Sealed_interpretation_Tm_arrow_6980332764c4493a7b0df5c02f7aefbe, Sec2.HIFC_interpretation_Tm_arrow_58c4a2d168f0eb2ac650669cc2ec9f76, bool_inversion, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok, data_typing_intro_Prims.Cons@tok, data_typing_intro_Prims.Nil@tok, eq2-interp, equation_FStar.List.Tot.Base.op_At, equation_FStar.Set.subset, equation_Sec2.HIFC.add_source, equation_Sec2.HIFC.bot, equation_Sec2.HIFC.flow, equation_Sec2.HIFC.flows, equation_Sec2.HIFC.href, equation_Sec2.HIFC.label, equation_Sec2.HIFC.label_inclusion, equation_Sec2.HIFC.loc, equation_Sec2.HIFC.low, equation_Sec2.HIFC.lref, equation_Sec2.HIFC.modifies, equation_Sec2.HIFC.ref, equation_Sec2.HIFC.single, equation_Sec2.HIFC.union, equation_with_fuel_FStar.List.Tot.Base.append.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.map.fuel_instrumented, equation_with_fuel_FStar.List.Tot.Base.memP.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.tuple2, fuel_guarded_inversion_Prims.list, int_inversion, interpretation_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021, l_or-interp, lemma_FStar.Set.mem_complement, lemma_FStar.Set.mem_empty, lemma_FStar.Set.mem_singleton, lemma_FStar.Set.mem_union, primitive_Prims.op_BarBar, primitive_Prims.op_Equality, primitive_Prims.op_Negation, primitive_Prims.op_disEquality, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, refinement_interpretation_Tm_refine_eeba74df603eda36cf3875c2e80291f6, token_correspondence_FStar.List.Tot.Base.map.fuel_instrumented, typing_FStar.List.Tot.Base.op_At, typing_FStar.Set.mem, typing_Prims.int, typing_Sec2.HIFC.add_source, typing_Sec2.HIFC.bot, typing_Sec2.HIFC.flow, typing_Sec2.HIFC.high, typing_Sec2.HIFC.label, typing_Sec2.HIFC.single, typing_Sec2.HIFC.union, typing_Tm_abs_d08aeea6ff1dc3fc36f7ff3217fea021

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let test8


; <Start encoding let test8>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Sec2.HIFC.test8 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Sec2.HIFC.test8@tok () Term)

; </end encoding let test8>


; encoding sigelt effect IFC a w r fs = Sec2.HIFC.HIFC a


; <Skipped effect IFC a w r fs = Sec2.HIFC.HIFC a/>

(push) ;; push{2

; Starting query at Sec2.HIFC.fst(842,4-842,56)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (l: Sec2.HIFC.lref) (h: Sec2.HIFC.href) (b: Prims.bool).
;   (*  - Could not prove post-condition
; *)
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot
;         (Sec2.HIFC.union (Sec2.HIFC.union Sec2.HIFC.bot
;                 (Sec2.HIFC.union (Sec2.HIFC.single h) Sec2.HIFC.bot))
;             (Sec2.HIFC.union Sec2.HIFC.bot
;                 (Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot) Sec2.HIFC.bot)
;             )))
;     (Sec2.HIFC.union (Sec2.HIFC.single h) (Sec2.HIFC.single l)) /\
;   Sec2.HIFC.label_inclusion (Sec2.HIFC.union Sec2.HIFC.bot
;         (Sec2.HIFC.union (Sec2.HIFC.union Sec2.HIFC.bot
;                 (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single l)))
;             (Sec2.HIFC.union Sec2.HIFC.bot
;                 (Sec2.HIFC.union (Sec2.HIFC.union Sec2.HIFC.bot Sec2.HIFC.bot) (Sec2.HIFC.single l))
;             )))
;     (Sec2.HIFC.single l) /\
;   (forall (f0: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;       (match
;           [] @
;           Sec2.HIFC.add_source Sec2.HIFC.bot
;             ((Sec2.HIFC.bot,
;               Sec2.HIFC.union (Sec2.HIFC.union Sec2.HIFC.bot
;                     (Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single l)))
;                 (Sec2.HIFC.union Sec2.HIFC.bot
;                     (Sec2.HIFC.union (Sec2.HIFC.union Sec2.HIFC.bot Sec2.HIFC.bot)
;                         (Sec2.HIFC.single l)))) ::
;               (([] @
;                 Sec2.HIFC.add_source Sec2.HIFC.bot
;                   ((Sec2.HIFC.bot,
;                     Sec2.HIFC.union Sec2.HIFC.bot (Sec2.HIFC.single l)) ::
;                     ([] @
;                       Sec2.HIFC.add_source (Sec2.HIFC.single h) [Sec2.HIFC.bot, Sec2.HIFC.single l])
;                   )) @
;                 [] @
;                 Sec2.HIFC.add_source Sec2.HIFC.bot
;                   ((Sec2.HIFC.bot,
;                     Sec2.HIFC.union (Sec2.HIFC.union Sec2.HIFC.bot Sec2.HIFC.bot)
;                       (Sec2.HIFC.single l)) ::
;                     (([] @ Sec2.HIFC.add_source (Sec2.HIFC.single l) [Sec2.HIFC.bot, Sec2.HIFC.bot]) @
;                       Sec2.HIFC.add_source (Sec2.HIFC.union (Sec2.HIFC.single l) Sec2.HIFC.bot)
;                         [Sec2.HIFC.bot, Sec2.HIFC.single l]))))
;         with
;         | [] -> Prims.l_False
;         | y :: q -> f0 == y \/ FStar.List.Tot.Base.memP f0 q) ==>
;       (forall (from: Prims.int) (to: Prims.int).
;           FStar.Set.mem from
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;           true /\
;           FStar.Set.mem to
;             (match f0 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;           true /\ from <> to == true ==>
;           (exists (f1: FStar.Set.set Prims.int & FStar.Set.set Prims.int).
;               (f1 == (Sec2.HIFC.single h, Sec2.HIFC.single l) \/ FStar.List.Tot.Base.memP f1 []) /\
;               (FStar.Set.mem from
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _1, _ -> _1) ==
;                 true) /\
;               (FStar.Set.mem to
;                   (match f1 as proj_ret returns$ FStar.Set.set Prims.int with | _, _2 -> _2) ==
;                 true))))


; Context: While encoding a query
; While typechecking the top-level declaration `let test_cond`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href)
(HasType @x2
Prims.bool))

;; def=Sec2.HIFC.fst(629,15-631,69); use=Sec2.HIFC.fst(842,4-842,56)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.bot Dummy_value)))))
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(842,4-842,56)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb4 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))
(Sec2.HIFC.add_source (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))))))))
(ite (is-Prims.Nil @lb4)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(842,4-842,56)
false

(ite (is-Prims.Cons @lb4)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(842,4-842,56)
(= @x3
(Prims.Cons_hd @lb4))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(Prims.Cons_tl @lb4))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(842,4-842,56)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Prims.int)
(HasType @x5
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (Prims.op_disEquality Prims.int
@x4
@x5)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(842,4-842,56)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(842,4-842,56)
(exists ((@x6 Term))
 (! (and (HasType @x6
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(842,4-842,56)
(= @x6
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__1 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test_cond, 1)
; STATUS: unknown because unknown

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='2' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href)
(HasType @x2
Prims.bool))

;; def=Sec2.HIFC.fst(629,15-631,69); use=Sec2.HIFC.fst(842,4-842,56)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.bot Dummy_value)))))
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(842,4-842,56)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb4 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))
(Sec2.HIFC.add_source (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))))))))
(ite (is-Prims.Nil @lb4)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(842,4-842,56)
false

(ite (is-Prims.Cons @lb4)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(842,4-842,56)
(= @x3
(Prims.Cons_hd @lb4))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(Prims.Cons_tl @lb4))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(842,4-842,56)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Prims.int)
(HasType @x5
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (Prims.op_disEquality Prims.int
@x4
@x5)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(842,4-842,56)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(842,4-842,56)
(exists ((@x6 Term))
 (! (and (HasType @x6
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(842,4-842,56)
(= @x6
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__1 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test_cond, 1)
; STATUS: unknown because unknown

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='4' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel (SFuel (SFuel ZFuel)))))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href)
(HasType @x2
Prims.bool))

;; def=Sec2.HIFC.fst(629,15-631,69); use=Sec2.HIFC.fst(842,4-842,56)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.bot Dummy_value)))))
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(842,4-842,56)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb4 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))
(Sec2.HIFC.add_source (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))))))))
(ite (is-Prims.Nil @lb4)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(842,4-842,56)
false

(ite (is-Prims.Cons @lb4)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(842,4-842,56)
(= @x3
(Prims.Cons_hd @lb4))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(Prims.Cons_tl @lb4))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(842,4-842,56)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Prims.int)
(HasType @x5
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (Prims.op_disEquality Prims.int
@x4
@x5)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(842,4-842,56)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(842,4-842,56)
(exists ((@x6 Term))
 (! (and (HasType @x6
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(842,4-842,56)
(= @x6
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__1 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test_cond, 1)
; STATUS: unknown because (incomplete quantifiers)

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(push) ;; push{0

; <fuel='8' ifuel='2'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel (SFuel (SFuel (SFuel (SFuel (SFuel (SFuel ZFuel)))))))))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel (SFuel ZFuel)))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Sec2.HIFC.lref)
(HasType @x1
Sec2.HIFC.href)
(HasType @x2
Prims.bool))

;; def=Sec2.HIFC.fst(629,15-631,69); use=Sec2.HIFC.fst(842,4-842,56)
(and 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(or label_1

;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=Sec2.HIFC.fst(629,15-629,36); use=Sec2.HIFC.fst(842,4-842,56)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.bot Dummy_value)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.bot Dummy_value)))))
(Sec2.HIFC.union (Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))
)
)


;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(or label_2

;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=Sec2.HIFC.fst(630,15-630,36); use=Sec2.HIFC.fst(842,4-842,56)
(Sec2.HIFC.label_inclusion (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))))
(Sec2.HIFC.single @x0))
)
)


;; def=Sec2.HIFC.fst(166,2-167,126); use=Sec2.HIFC.fst(842,4-842,56)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))
(let ((@lb4 (FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x1)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.bot Dummy_value)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.union (Sec2.HIFC.union (Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Sec2.HIFC.single @x0)))
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(FStar.List.Tot.Base.op_At Sec2.HIFC.flow
(Prims.Nil Sec2.HIFC.flow)
(Sec2.HIFC.add_source (Sec2.HIFC.single @x0)
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.bot Dummy_value))
(Prims.Nil Sec2.HIFC.flow))))
(Sec2.HIFC.add_source (Sec2.HIFC.union (Sec2.HIFC.single @x0)
(Sec2.HIFC.bot Dummy_value))
(Prims.Cons Sec2.HIFC.flow
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.bot Dummy_value)
(Sec2.HIFC.single @x0))
(Prims.Nil Sec2.HIFC.flow)))))))))))))
(ite (is-Prims.Nil @lb4)

;; def=FStar.List.Tot.Base.fst(230,10-230,15); use=Sec2.HIFC.fst(842,4-842,56)
false

(ite (is-Prims.Cons @lb4)

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(842,4-842,56)
(= @x3
(Prims.Cons_hd @lb4))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x3
(Prims.Cons_tl @lb4))
)
)

Unreachable))))

;; def=Sec2.HIFC.fst(167,8-167,126); use=Sec2.HIFC.fst(842,4-842,56)
(forall ((@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x4
Prims.int)
(HasType @x5
Prims.int)

;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__1 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb6 @x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (Prims.op_disEquality Prims.int
@x4
@x5)
(BoxBool true))
)

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(842,4-842,56)
(or label_3

;; def=Sec2.HIFC.fst(167,65-167,125); use=Sec2.HIFC.fst(842,4-842,56)
(exists ((@x6 Term))
 (! (and (HasType @x6
(FStar.Pervasives.Native.tuple2 (FStar.Set.set Prims.int)
(FStar.Set.set Prims.int)))

;; def=FStar.List.Tot.Base.fst(231,14-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(or 
;; def=FStar.List.Tot.Base.fst(231,14-231,20); use=Sec2.HIFC.fst(842,4-842,56)
(= @x6
(FStar.Pervasives.Native.Mktuple2 Sec2.HIFC.label
Sec2.HIFC.label
(Sec2.HIFC.single @x1)
(Sec2.HIFC.single @x0)))


;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(Valid 
;; def=FStar.List.Tot.Base.fst(231,24-231,32); use=Sec2.HIFC.fst(842,4-842,56)
(FStar.List.Tot.Base.memP Sec2.HIFC.flow
@x6
(Prims.Nil Sec2.HIFC.flow))
)
)


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x4
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__1 @lb7)))
(BoxBool true))


;; def=Prims.fst(180,31-180,42); use=Sec2.HIFC.fst(842,4-842,56)
(= (FStar.Set.mem Prims.int
@x5
(let ((@lb7 @x6))
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(BoxBool true))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (Sec2.HIFC.test_cond, 1)
; STATUS: unknown because canceled
