(set-info :smt-lib-version 2.6)
(set-logic NIA)
(set-info :source |
Generated by: Matthias Heizmann
Generated on: 2024-04-13
Generator: Ultimate Automizer
Application: Software Verification
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2024 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2024-04-13, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: State of the Art in Software Verification and
     Witness Validation: SV-COMP 2024.  TACAS 2024
[6] https://sv-comp.sosy-lab.org/2024/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~__tmp_55_0~0_-1 () Int)
(declare-fun |ULTIMATE.start_main_~main__y~0#1_-1| () Int)
(declare-fun |ULTIMATE.start_main_~main__x~0#1_-1| () Int)
(declare-fun |v_ULTIMATE.start_main_~main____CPAchecker_TMP_0~0#1_12_fresh_1| () Int)
(declare-fun ~__tmp_55_0~0_1 () Int)
(declare-fun |ULTIMATE.start_main_~main__y~0#1_1| () Int)
(declare-fun |ULTIMATE.start_main_~main__x~0#1_1| () Int)
(declare-fun |v_ULTIMATE.start_main_~main____CPAchecker_TMP_0~1#1_6_fresh_1| () Int)
(assert (<= |ULTIMATE.start_main_~main__y~0#1_-1| (+ 51 |ULTIMATE.start_main_~main__x~0#1_-1|)))
(assert (>= |ULTIMATE.start_main_~main__y~0#1_-1| (+ 51 |ULTIMATE.start_main_~main__x~0#1_-1|)))
(assert (not (let ((cse9 (div |ULTIMATE.start_main_~main__y~0#1_1| 2))) (let ((cse13 (* 2 (* cse9 cse9))) (cse5 (* (- 1) |ULTIMATE.start_main_~main__y~0#1_1|)) (cse7 (mod |ULTIMATE.start_main_~main__y~0#1_1| 2))) (or (and (exists ((v_y_37 Int)) (let ((cse2 (* v_y_37 2)) (cse3 (* v_y_37 4)) (cse0 (div (+ cse5 1) 2))) (and (= (+ (* v_y_37 99) (* (* v_y_37 v_y_37) 2) |ULTIMATE.start_main_~main__x~0#1_1| 1275 cse0) (* 2 (* cse0 cse0))) (forall ((v_itHalf_1 Int)) (let ((cse1 (+ v_itHalf_1 v_y_37 26 cse0))) (or (= cse1 0) (< v_itHalf_1 1) (< (+ cse2 (* 101 v_itHalf_1) (* 2 (* v_itHalf_1 v_itHalf_1)) (* (* v_itHalf_1 v_y_37) 4)) 0) (< 0 cse1)))) (<= (+ v_y_37 1) 0) (<= (+ v_y_37 26 cse0) 0) (forall ((v_itHalf_1 Int)) (or (< v_itHalf_1 1) (< (+ cse2 (* 101 v_itHalf_1) (* 2 (* v_itHalf_1 v_itHalf_1)) (* (* v_itHalf_1 v_y_37) 4)) 0) (< 0 (+ v_itHalf_1 v_y_37 26 cse0)))) (forall ((v_itHalf_1 Int)) (let ((cse4 (+ v_itHalf_1 v_y_37 26 cse0))) (or (< v_itHalf_1 0) (< (+ 51 (* v_itHalf_1 103) (* 2 (* v_itHalf_1 v_itHalf_1)) (* (* v_itHalf_1 v_y_37) 4) cse3) 0) (= cse4 0) (< 0 cse4)))) (forall ((v_itHalf_1 Int)) (or (< v_itHalf_1 0) (< (+ 51 (* v_itHalf_1 103) (* 2 (* v_itHalf_1 v_itHalf_1)) (* (* v_itHalf_1 v_y_37) 4) cse3) 0) (< 0 (+ v_itHalf_1 v_y_37 26 cse0))))))) (= (mod (+ |ULTIMATE.start_main_~main__y~0#1_1| 1) 2) 0)) (exists ((v_y_45 Int) (v_y_52 Int)) (let ((cse10 (* v_y_45 4)) (cse11 (* 2 cse7)) (cse6 (* v_y_45 2))) (and (forall ((v_itHalf_1 Int)) (let ((cse8 (+ v_itHalf_1 v_y_52 v_y_45 25))) (or (< (+ (* (* v_itHalf_1 v_y_45) 4) (* 101 v_itHalf_1) (* 2 (* v_itHalf_1 v_itHalf_1)) cse6) (+ (* 2 (* v_itHalf_1 cse7)) cse7)) (= cse8 cse9) (< v_itHalf_1 1) (< cse9 cse8)))) (<= (+ cse6 1) cse7) (forall ((v_itHalf_1 Int)) (or (< v_itHalf_1 0) (< cse9 (+ v_itHalf_1 v_y_52 v_y_45 27)) (< (+ (* (* v_itHalf_1 v_y_45) 4) 51 (* v_itHalf_1 103) cse10 (* 2 (* v_itHalf_1 v_itHalf_1))) (+ (* 2 (* v_itHalf_1 cse7)) cse11)))) (forall ((v_itHalf_1 Int)) (let ((cse12 (+ v_itHalf_1 v_y_52 v_y_45 26))) (or (< v_itHalf_1 0) (< cse9 cse12) (= cse12 cse9) (< (+ (* (* v_itHalf_1 v_y_45) 4) 51 (* v_itHalf_1 103) cse10 (* 2 (* v_itHalf_1 v_itHalf_1))) (+ (* 2 (* v_itHalf_1 cse7)) cse11))))) (<= (+ v_y_52 cse7) 0) (forall ((v_itHalf_1 Int)) (or (< cse9 (+ v_itHalf_1 v_y_52 v_y_45 26)) (< (+ (* (* v_itHalf_1 v_y_45) 4) (* 101 v_itHalf_1) (* 2 (* v_itHalf_1 v_itHalf_1)) cse6) (+ (* 2 (* v_itHalf_1 cse7)) cse7)) (< v_itHalf_1 1))) (<= (+ v_y_52 v_y_45 26) cse9) (= (+ (* (* cse7 cse9) 2) (* 2 (* v_y_45 v_y_45)) (* (* v_y_52 cse9) 4) |ULTIMATE.start_main_~main__x~0#1_1| (* v_y_45 99) 1275 cse9) (+ (* 2 (* v_y_52 v_y_52)) v_y_52 (* cse7 50) (* (* v_y_45 cse7) 2) cse13 (* 2 (* v_y_52 cse7)))) (<= 0 (+ (* v_y_52 2) cse7))))) (exists ((v_z_52 Int)) (and (<= v_z_52 1) (<= 2 (+ v_z_52 cse7)) (exists ((v_y_45 Int) (v_y_52 Int)) (let ((cse17 (* v_y_52 4)) (cse18 (* v_y_45 4)) (cse19 (* v_z_52 2)) (cse15 (* v_y_45 2)) (cse14 (* v_y_52 2))) (and (forall ((v_itHalf_1 Int)) (let ((cse16 (+ v_itHalf_1 v_y_52 v_y_45 25))) (or (< (+ (* (* v_itHalf_1 v_y_45) 4) (* 101 v_itHalf_1) (* 4 (* v_itHalf_1 v_y_52)) cse14 (* 2 (* v_itHalf_1 v_itHalf_1)) cse15) (+ v_z_52 (* (* v_itHalf_1 v_z_52) 2))) (= cse16 cse9) (< v_itHalf_1 1) (< cse9 cse16)))) (<= (+ cse14 cse15 1) v_z_52) (= (+ (* 2 (* v_y_52 v_y_52)) (* 2 (* v_y_45 v_y_45)) (* 4 (* v_y_52 v_y_45)) 1274 (* 2 (* v_z_52 cse9)) (* v_y_52 99) |ULTIMATE.start_main_~main__x~0#1_1| (* v_y_45 99)) (+ (* 3 cse9) (* (* v_z_52 v_y_45) 2) (* v_z_52 48) (* 2 (* v_z_52 v_y_52)) cse13)) (forall ((v_itHalf_1 Int)) (or (< (+ (* (* v_itHalf_1 v_y_45) 4) 51 (* 4 (* v_itHalf_1 v_y_52)) cse17 (* v_itHalf_1 103) cse18 (* 2 (* v_itHalf_1 v_itHalf_1))) (+ cse19 (* (* v_itHalf_1 v_z_52) 2))) (< v_itHalf_1 0) (< cse9 (+ v_itHalf_1 v_y_52 v_y_45 26)))) (<= cse14 (+ v_z_52 1)) (forall ((v_itHalf_1 Int)) (let ((cse20 (+ v_itHalf_1 v_y_52 v_y_45 26))) (or (< (+ (* (* v_itHalf_1 v_y_45) 4) 51 (* 4 (* v_itHalf_1 v_y_52)) cse17 (* v_itHalf_1 103) cse18 (* 2 (* v_itHalf_1 v_itHalf_1))) (+ cse19 (* (* v_itHalf_1 v_z_52) 2))) (< v_itHalf_1 0) (< cse9 cse20) (= cse20 cse9)))) (forall ((v_itHalf_1 Int)) (or (< (+ (* (* v_itHalf_1 v_y_45) 4) (* 101 v_itHalf_1) (* 4 (* v_itHalf_1 v_y_52)) cse14 (* 2 (* v_itHalf_1 v_itHalf_1)) cse15) (+ v_z_52 (* (* v_itHalf_1 v_z_52) 2))) (< v_itHalf_1 1) (< cse9 (+ v_itHalf_1 v_y_52 v_y_45 25)))) (<= v_z_52 cse14) (<= (+ v_y_52 v_y_45 25) cse9)))))) (and (exists ((v_y_27 Int)) (let ((cse22 (* v_y_27 2)) (cse23 (* v_y_27 4)) (cse21 (div cse5 2))) (and (forall ((v_itHalf_1 Int)) (or (< 0 (+ v_itHalf_1 v_y_27 27 cse21)) (< (+ cse22 (* v_itHalf_1 103) (* 2 (* v_itHalf_1 v_itHalf_1)) (* (* v_itHalf_1 v_y_27) 4) 1) 0) (< v_itHalf_1 1))) (forall ((v_itHalf_1 Int)) (or (< 0 (+ v_itHalf_1 v_y_27 27 cse21)) (< v_itHalf_1 0) (< (+ 53 (* v_itHalf_1 105) (* 2 (* v_itHalf_1 v_itHalf_1)) cse23 (* (* v_itHalf_1 v_y_27) 4)) 0))) (<= (+ v_y_27 1) 0) (forall ((v_itHalf_1 Int)) (let ((cse24 (+ v_itHalf_1 v_y_27 26 cse21))) (or (= cse24 0) (< (+ cse22 (* v_itHalf_1 103) (* 2 (* v_itHalf_1 v_itHalf_1)) (* (* v_itHalf_1 v_y_27) 4) 1) 0) (< 0 cse24) (< v_itHalf_1 1)))) (forall ((v_itHalf_1 Int)) (let ((cse25 (+ v_itHalf_1 v_y_27 26 cse21))) (or (= cse25 0) (< v_itHalf_1 0) (< 0 cse25) (< (+ 53 (* v_itHalf_1 105) (* 2 (* v_itHalf_1 v_itHalf_1)) cse23 (* (* v_itHalf_1 v_y_27) 4)) 0)))) (<= (+ v_y_27 27 cse21) 0) (= (+ (* 2 (* v_y_27 v_y_27)) |ULTIMATE.start_main_~main__x~0#1_1| (* 101 v_y_27) 1325) (+ (* (* cse21 cse21) 2) cse21))))) (= cse7 0)))))))
(assert (<= |v_ULTIMATE.start_main_~main____CPAchecker_TMP_0~0#1_12_fresh_1| ~__tmp_55_0~0_-1))
(assert (>= |v_ULTIMATE.start_main_~main____CPAchecker_TMP_0~0#1_12_fresh_1| ~__tmp_55_0~0_-1))
(assert (< |ULTIMATE.start_main_~main__x~0#1_-1| 0))
(assert (<= |v_ULTIMATE.start_main_~main____CPAchecker_TMP_0~1#1_6_fresh_1| ~__tmp_55_0~0_1))
(assert (>= |v_ULTIMATE.start_main_~main____CPAchecker_TMP_0~1#1_6_fresh_1| ~__tmp_55_0~0_1))
(assert (<= |v_ULTIMATE.start_main_~main____CPAchecker_TMP_0~1#1_6_fresh_1| |ULTIMATE.start_main_~main__y~0#1_-1|))
(assert (>= |v_ULTIMATE.start_main_~main____CPAchecker_TMP_0~1#1_6_fresh_1| |ULTIMATE.start_main_~main__y~0#1_-1|))
(assert (<= (+ |ULTIMATE.start_main_~main__y~0#1_-1| 1) |ULTIMATE.start_main_~main__y~0#1_1|))
(assert (>= (+ |ULTIMATE.start_main_~main__y~0#1_-1| 1) |ULTIMATE.start_main_~main__y~0#1_1|))
(assert (<= |ULTIMATE.start_main_~main__x~0#1_1| (+ |ULTIMATE.start_main_~main__x~0#1_-1| |ULTIMATE.start_main_~main__y~0#1_-1|)))
(assert (>= |ULTIMATE.start_main_~main__x~0#1_1| (+ |ULTIMATE.start_main_~main__x~0#1_-1| |ULTIMATE.start_main_~main__y~0#1_-1|)))
(check-sat)
(exit)
