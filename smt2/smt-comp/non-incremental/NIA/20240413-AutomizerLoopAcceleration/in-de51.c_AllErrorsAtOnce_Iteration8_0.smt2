(set-info :smt-lib-version 2.6)
(set-logic NIA)
(set-info :source |
Generated by: Matthias Heizmann
Generated on: 2024-04-13
Generator: Ultimate Automizer
Application: Software Verification
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2024 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2024-04-13, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: State of the Art in Software Verification and
     Witness Validation: SV-COMP 2024.  TACAS 2024
[6] https://sv-comp.sosy-lab.org/2024/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |ULTIMATE.start_main_~y~0#1_-1| () Int)
(declare-fun |ULTIMATE.start_main_~z~0#1_-1| () Int)
(declare-fun |ULTIMATE.start_main_~y~0#1_0| () Int)
(declare-fun |ULTIMATE.start_main_~z~0#1_0| () Int)
(assert (<= |ULTIMATE.start_main_~z~0#1_-1| 0))
(assert (<= 1 |ULTIMATE.start_main_~y~0#1_-1|))
(assert (exists ((v_z_18 Int)) (and (<= v_z_18 4294967295) (let ((cse0 (* v_z_18 4294967295))) (<= (+ 18446744069414584320 (* (div (+ |ULTIMATE.start_main_~y~0#1_-1| (- 18446744069414584321) cse0) 4294967296) 4294967296)) cse0)) (<= 1 v_z_18))))
(assert (<= (+ 18446744069414584320 (* (div (+ (* (- 1) |ULTIMATE.start_main_~z~0#1_-1|) (- 18446744069414584321)) 4294967296) 4294967296) |ULTIMATE.start_main_~y~0#1_-1|) 0))
(assert (not (exists ((v_y_34 Int) (v_y_35 Int) (v_z_35 Int) (v_y_31 Int) (v_z_34 Int) (v_y_22 Int)) (let ((cse3 (* v_y_22 4294967296)) (cse7 (* v_y_31 4294967296)) (cse9 (* v_y_34 4294967296))) (let ((cse5 (+ cse7 v_z_34 |ULTIMATE.start_main_~z~0#1_0| cse9)) (cse0 (+ (* v_y_35 4294967296) (* v_z_35 4294967295))) (cse4 (+ cse3 1)) (cse6 (+ v_z_34 cse9))) (and (<= 1 cse0) (let ((cse1 (* v_z_34 4294967295)) (cse2 (* 4294967295 (mod |ULTIMATE.start_main_~z~0#1_0| 4294967296)))) (<= (+ 18446744069414584320 (* (div (+ |ULTIMATE.start_main_~z~0#1_0| cse1 (- 18446744069414584321) cse2) 4294967296) 4294967296)) (+ cse3 cse1 cse2))) (<= cse4 cse5) (<= 0 v_z_35) (<= 0 cse6) (<= cse5 (+ (* v_y_22 8589934592) 4294967296)) (<= cse0 4294967295) (<= cse4 |ULTIMATE.start_main_~z~0#1_0|) (<= v_y_22 0) (<= (+ v_z_34 v_z_35 (mod (+ 4294967295 |ULTIMATE.start_main_~z~0#1_0|) 4294967296)) 4294967295) (let ((cse8 (* v_z_35 18446744065119617025))) (<= (+ 18446744069414584320 cse7 (* 4294967296 (div (+ |ULTIMATE.start_main_~z~0#1_0| cse8 (- 18446744069414584321)) 4294967296)) cse9) (+ cse3 cse8))) (<= cse6 4294967295)))))))
(assert (< 0 (mod |ULTIMATE.start_main_~y~0#1_-1| 4294967296)))
(assert (<= (+ |ULTIMATE.start_main_~z~0#1_-1| 1) |ULTIMATE.start_main_~z~0#1_0|))
(assert (>= (+ |ULTIMATE.start_main_~z~0#1_-1| 1) |ULTIMATE.start_main_~z~0#1_0|))
(assert (<= (+ |ULTIMATE.start_main_~y~0#1_0| 1) |ULTIMATE.start_main_~y~0#1_-1|))
(assert (>= (+ |ULTIMATE.start_main_~y~0#1_0| 1) |ULTIMATE.start_main_~y~0#1_-1|))
(check-sat)
(exit)
