(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x23 (stack E empty)))
 (let ((?x22 (stack J ?x23)))
 (let ((?x24 (stack G ?x22)))
 (let ((?x25 (stack I ?x24)))
 (let ((?x88 (left s_tmp_)))
 (= ?x88 ?x25)))))))
(assert
 (let ((?x26 (stack D empty)))
 (let ((?x27 (stack F ?x26)))
 (let ((?x91 (center s_tmp__)))
 (= ?x91 ?x27)))))
(assert
 (let ((?x28 (stack A empty)))
 (let ((?x29 (stack B ?x28)))
 (let ((?x30 (stack C ?x29)))
 (let ((?x31 (stack H ?x30)))
 (let ((?x94 (right s_tmp___)))
 (= ?x94 ?x31)))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x121 (left s_tmp__)))
 (= (left s_tmp___) ?x121)))
(assert
 (let ((?x91 (center s_tmp__)))
 (= (center s_tmp___) ?x91)))
(assert
 (let ((?x125 (center s_tmp_)))
 (= ?x125 (center s_tmp))))
(assert
 (let ((?x128 (right s_tmp_)))
 (= ?x128 (right s_tmp))))
(assert
 (let ((?x88 (left s_tmp_)))
 (let ((?x121 (left s_tmp__)))
 (= ?x121 ?x88))))
(assert
 (let ((?x128 (right s_tmp_)))
 (let ((?x132 (right s_tmp__)))
 (= ?x132 ?x128))))
(assert
 (= c__ c!1))
(assert
 (let ((?x65 (left s_)))
 (let ((?x227 (left s__)))
 (let (($x251 (= ?x227 ?x65)))
 (let ((?x68 (right s_)))
 (let (($x206 ((_ is stack ) ?x68)))
 (let (($x212 (= c_ right-to-left)))
 (let (($x213 (and $x212 $x206)))
 (let ((?x70 (center s_)))
 (let (($x214 ((_ is stack ) ?x70)))
 (let (($x215 (= c_ center-to-right)))
 (let (($x207 (and $x215 $x214)))
 (let (($x208 (= c_ center-to-left)))
 (let (($x209 (and $x208 $x214)))
 (let (($x260 (ite $x209 (= ?x227 (stack (top ?x70) ?x65)) (ite $x207 $x251 (ite $x213 (= ?x227 (stack (top ?x68) ?x65)) $x251)))))
 (let (($x238 (= ?x227 (rest ?x65))))
 (let (($x231 ((_ is stack ) ?x65)))
 (let (($x232 (= c_ left-to-right)))
 (let (($x233 (and $x232 $x231)))
 (let (($x234 (= c_ left-to-center)))
 (let (($x235 (and $x234 $x231)))
 (ite $x235 $x238 (ite $x233 $x238 $x260)))))))))))))))))))))))
(assert
 (let ((?x68 (right s_)))
 (let ((?x220 (right s__)))
 (let (($x247 (= ?x220 ?x68)))
 (let (($x244 (= ?x220 (rest ?x68))))
 (let (($x206 ((_ is stack ) ?x68)))
 (let (($x210 (= c_ right-to-center)))
 (let (($x211 (and $x210 $x206)))
 (let (($x212 (= c_ right-to-left)))
 (let (($x213 (and $x212 $x206)))
 (let ((?x70 (center s_)))
 (let (($x214 ((_ is stack ) ?x70)))
 (let (($x215 (= c_ center-to-right)))
 (let (($x207 (and $x215 $x214)))
 (let (($x257 (ite $x207 (= ?x220 (stack (top ?x70) ?x68)) (ite $x213 $x244 (ite $x211 $x244 $x247)))))
 (let (($x208 (= c_ center-to-left)))
 (let (($x209 (and $x208 $x214)))
 (let ((?x65 (left s_)))
 (let (($x231 ((_ is stack ) ?x65)))
 (let (($x232 (= c_ left-to-right)))
 (let (($x233 (and $x232 $x231)))
 (let (($x234 (= c_ left-to-center)))
 (let (($x235 (and $x234 $x231)))
 (ite $x235 (= ?x220 (stack (top ?x65) ?x68)) (ite $x233 $x247 (ite $x209 $x247 $x257))))))))))))))))))))))))))
(assert
 (let ((?x70 (center s_)))
 (let ((?x217 (center s__)))
 (let (($x249 (= ?x217 ?x70)))
 (let ((?x68 (right s_)))
 (let (($x206 ((_ is stack ) ?x68)))
 (let (($x210 (= c_ right-to-center)))
 (let (($x211 (and $x210 $x206)))
 (let (($x212 (= c_ right-to-left)))
 (let (($x213 (and $x212 $x206)))
 (let (($x241 (= ?x217 (rest ?x70))))
 (let (($x214 ((_ is stack ) ?x70)))
 (let (($x215 (= c_ center-to-right)))
 (let (($x207 (and $x215 $x214)))
 (let (($x256 (ite $x207 $x241 (ite $x213 $x249 (ite $x211 (= ?x217 (stack (top ?x68) ?x70)) $x249)))))
 (let (($x208 (= c_ center-to-left)))
 (let (($x209 (and $x208 $x214)))
 (let ((?x65 (left s_)))
 (let (($x231 ((_ is stack ) ?x65)))
 (let (($x232 (= c_ left-to-right)))
 (let (($x233 (and $x232 $x231)))
 (let (($x234 (= c_ left-to-center)))
 (let (($x235 (and $x234 $x231)))
 (ite $x235 $x249 (ite $x233 (= ?x217 (stack (top ?x65) ?x70)) (ite $x209 $x241 $x256))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x227 (left s__)))
 (let ((?x135 (left s___)))
 (let (($x380 (= ?x135 ?x227)))
 (let ((?x220 (right s__)))
 (let ((?x347 (top ?x220)))
 (let ((?x348 (stack ?x347 ?x227)))
 (let (($x374 (= ?x135 ?x348)))
 (let (($x350 ((_ is stack ) ?x220)))
 (let (($x353 (= c__ right-to-left)))
 (let (($x354 (and $x353 $x350)))
 (let ((?x217 (center s__)))
 (let (($x355 ((_ is stack ) ?x217)))
 (let (($x356 (= c__ center-to-right)))
 (let (($x357 (and $x356 $x355)))
 (let ((?x343 (top ?x217)))
 (let ((?x344 (stack ?x343 ?x227)))
 (let (($x371 (= ?x135 ?x344)))
 (let (($x358 (= c__ center-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x137 (rest ?x227)))
 (let (($x367 (= ?x135 ?x137)))
 (let (($x360 ((_ is stack ) ?x227)))
 (let (($x361 (= c__ left-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let (($x363 (= c__ left-to-center)))
 (let (($x364 (and $x363 $x360)))
 (ite $x364 $x367 (ite $x362 $x367 (ite $x359 $x371 (ite $x357 $x380 (ite $x354 $x374 $x380))))))))))))))))))))))))))))))))
(assert
 (let ((?x220 (right s__)))
 (let ((?x138 (right s___)))
 (let (($x376 (= ?x138 ?x220)))
 (let ((?x346 (rest ?x220)))
 (let (($x373 (= ?x138 ?x346)))
 (let (($x350 ((_ is stack ) ?x220)))
 (let (($x351 (= c__ right-to-center)))
 (let (($x352 (and $x351 $x350)))
 (let (($x353 (= c__ right-to-left)))
 (let (($x354 (and $x353 $x350)))
 (let ((?x217 (center s__)))
 (let ((?x343 (top ?x217)))
 (let ((?x345 (stack ?x343 ?x220)))
 (let (($x372 (= ?x138 ?x345)))
 (let (($x355 ((_ is stack ) ?x217)))
 (let (($x356 (= c__ center-to-right)))
 (let (($x357 (and $x356 $x355)))
 (let (($x358 (= c__ center-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x227 (left s__)))
 (let (($x360 ((_ is stack ) ?x227)))
 (let (($x361 (= c__ left-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let (($x393 (ite $x362 $x376 (ite $x359 $x376 (ite $x357 $x372 (ite $x354 $x373 (ite $x352 $x373 $x376)))))))
 (let ((?x203 (top ?x227)))
 (let ((?x339 (stack ?x203 ?x220)))
 (let (($x368 (= ?x138 ?x339)))
 (let (($x363 (= c__ left-to-center)))
 (let (($x364 (and $x363 $x360)))
 (ite $x364 $x368 $x393)))))))))))))))))))))))))))))))
(assert
 (let ((?x217 (center s__)))
 (let ((?x340 (center s___)))
 (let (($x378 (= ?x340 ?x217)))
 (let ((?x220 (right s__)))
 (let ((?x347 (top ?x220)))
 (let ((?x349 (stack ?x347 ?x217)))
 (let (($x375 (= ?x340 ?x349)))
 (let (($x350 ((_ is stack ) ?x220)))
 (let (($x351 (= c__ right-to-center)))
 (let (($x352 (and $x351 $x350)))
 (let (($x353 (= c__ right-to-left)))
 (let (($x354 (and $x353 $x350)))
 (let ((?x342 (rest ?x217)))
 (let (($x370 (= ?x340 ?x342)))
 (let (($x355 ((_ is stack ) ?x217)))
 (let (($x356 (= c__ center-to-right)))
 (let (($x357 (and $x356 $x355)))
 (let (($x358 (= c__ center-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x227 (left s__)))
 (let ((?x203 (top ?x227)))
 (let ((?x341 (stack ?x203 ?x217)))
 (let (($x369 (= ?x340 ?x341)))
 (let (($x360 ((_ is stack ) ?x227)))
 (let (($x361 (= c__ left-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let (($x392 (ite $x362 $x369 (ite $x359 $x370 (ite $x357 $x370 (ite $x354 $x378 (ite $x352 $x375 $x378)))))))
 (let (($x363 (= c__ left-to-center)))
 (let (($x364 (and $x363 $x360)))
 (ite $x364 $x378 $x392)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x135 (left s___)))
 (let ((?x267 (left s____)))
 (let (($x518 (= ?x267 ?x135)))
 (let ((?x138 (right s___)))
 (let ((?x485 (top ?x138)))
 (let ((?x486 (stack ?x485 ?x135)))
 (let (($x512 (= ?x267 ?x486)))
 (let (($x488 ((_ is stack ) ?x138)))
 (let (($x491 (= c___ right-to-left)))
 (let (($x492 (and $x491 $x488)))
 (let ((?x340 (center s___)))
 (let (($x493 ((_ is stack ) ?x340)))
 (let (($x494 (= c___ center-to-right)))
 (let (($x495 (and $x494 $x493)))
 (let ((?x481 (top ?x340)))
 (let ((?x482 (stack ?x481 ?x135)))
 (let (($x509 (= ?x267 ?x482)))
 (let (($x496 (= c___ center-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x311 (rest ?x135)))
 (let (($x505 (= ?x267 ?x311)))
 (let (($x498 ((_ is stack ) ?x135)))
 (let (($x499 (= c___ left-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let (($x501 (= c___ left-to-center)))
 (let (($x502 (and $x501 $x498)))
 (ite $x502 $x505 (ite $x500 $x505 (ite $x497 $x509 (ite $x495 $x518 (ite $x492 $x512 $x518))))))))))))))))))))))))))))))))
(assert
 (let ((?x138 (right s___)))
 (let ((?x312 (right s____)))
 (let (($x514 (= ?x312 ?x138)))
 (let ((?x484 (rest ?x138)))
 (let (($x511 (= ?x312 ?x484)))
 (let (($x488 ((_ is stack ) ?x138)))
 (let (($x489 (= c___ right-to-center)))
 (let (($x490 (and $x489 $x488)))
 (let (($x491 (= c___ right-to-left)))
 (let (($x492 (and $x491 $x488)))
 (let ((?x340 (center s___)))
 (let ((?x481 (top ?x340)))
 (let ((?x483 (stack ?x481 ?x138)))
 (let (($x510 (= ?x312 ?x483)))
 (let (($x493 ((_ is stack ) ?x340)))
 (let (($x494 (= c___ center-to-right)))
 (let (($x495 (and $x494 $x493)))
 (let (($x496 (= c___ center-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x135 (left s___)))
 (let (($x498 ((_ is stack ) ?x135)))
 (let (($x499 (= c___ left-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let (($x531 (ite $x500 $x514 (ite $x497 $x514 (ite $x495 $x510 (ite $x492 $x511 (ite $x490 $x511 $x514)))))))
 (let ((?x338 (top ?x135)))
 (let ((?x477 (stack ?x338 ?x138)))
 (let (($x506 (= ?x312 ?x477)))
 (let (($x501 (= c___ left-to-center)))
 (let (($x502 (and $x501 $x498)))
 (ite $x502 $x506 $x531)))))))))))))))))))))))))))))))
(assert
 (let ((?x340 (center s___)))
 (let ((?x478 (center s____)))
 (let (($x516 (= ?x478 ?x340)))
 (let ((?x138 (right s___)))
 (let ((?x485 (top ?x138)))
 (let ((?x487 (stack ?x485 ?x340)))
 (let (($x513 (= ?x478 ?x487)))
 (let (($x488 ((_ is stack ) ?x138)))
 (let (($x489 (= c___ right-to-center)))
 (let (($x490 (and $x489 $x488)))
 (let (($x491 (= c___ right-to-left)))
 (let (($x492 (and $x491 $x488)))
 (let ((?x480 (rest ?x340)))
 (let (($x508 (= ?x478 ?x480)))
 (let (($x493 ((_ is stack ) ?x340)))
 (let (($x494 (= c___ center-to-right)))
 (let (($x495 (and $x494 $x493)))
 (let (($x496 (= c___ center-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x135 (left s___)))
 (let ((?x338 (top ?x135)))
 (let ((?x479 (stack ?x338 ?x340)))
 (let (($x507 (= ?x478 ?x479)))
 (let (($x498 ((_ is stack ) ?x135)))
 (let (($x499 (= c___ left-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let (($x530 (ite $x500 $x507 (ite $x497 $x508 (ite $x495 $x508 (ite $x492 $x516 (ite $x490 $x513 $x516)))))))
 (let (($x501 (= c___ left-to-center)))
 (let (($x502 (and $x501 $x498)))
 (ite $x502 $x516 $x530)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x267 (left s____)))
 (let ((?x396 (left s_____)))
 (let (($x656 (= ?x396 ?x267)))
 (let ((?x312 (right s____)))
 (let ((?x623 (top ?x312)))
 (let ((?x624 (stack ?x623 ?x267)))
 (let (($x650 (= ?x396 ?x624)))
 (let (($x626 ((_ is stack ) ?x312)))
 (let (($x629 (= c____ right-to-left)))
 (let (($x630 (and $x629 $x626)))
 (let ((?x478 (center s____)))
 (let (($x631 ((_ is stack ) ?x478)))
 (let (($x632 (= c____ center-to-right)))
 (let (($x633 (and $x632 $x631)))
 (let ((?x619 (top ?x478)))
 (let ((?x620 (stack ?x619 ?x267)))
 (let (($x647 (= ?x396 ?x620)))
 (let (($x634 (= c____ center-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x429 (rest ?x267)))
 (let (($x643 (= ?x396 ?x429)))
 (let (($x636 ((_ is stack ) ?x267)))
 (let (($x637 (= c____ left-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let (($x639 (= c____ left-to-center)))
 (let (($x640 (and $x639 $x636)))
 (ite $x640 $x643 (ite $x638 $x643 (ite $x635 $x647 (ite $x633 $x656 (ite $x630 $x650 $x656))))))))))))))))))))))))))))))))
(assert
 (let ((?x312 (right s____)))
 (let ((?x430 (right s_____)))
 (let (($x652 (= ?x430 ?x312)))
 (let ((?x622 (rest ?x312)))
 (let (($x649 (= ?x430 ?x622)))
 (let (($x626 ((_ is stack ) ?x312)))
 (let (($x627 (= c____ right-to-center)))
 (let (($x628 (and $x627 $x626)))
 (let (($x629 (= c____ right-to-left)))
 (let (($x630 (and $x629 $x626)))
 (let ((?x478 (center s____)))
 (let ((?x619 (top ?x478)))
 (let ((?x621 (stack ?x619 ?x312)))
 (let (($x648 (= ?x430 ?x621)))
 (let (($x631 ((_ is stack ) ?x478)))
 (let (($x632 (= c____ center-to-right)))
 (let (($x633 (and $x632 $x631)))
 (let (($x634 (= c____ center-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x267 (left s____)))
 (let (($x636 ((_ is stack ) ?x267)))
 (let (($x637 (= c____ left-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let (($x669 (ite $x638 $x652 (ite $x635 $x652 (ite $x633 $x648 (ite $x630 $x649 (ite $x628 $x649 $x652)))))))
 (let ((?x476 (top ?x267)))
 (let ((?x615 (stack ?x476 ?x312)))
 (let (($x644 (= ?x430 ?x615)))
 (let (($x639 (= c____ left-to-center)))
 (let (($x640 (and $x639 $x636)))
 (ite $x640 $x644 $x669)))))))))))))))))))))))))))))))
(assert
 (let ((?x478 (center s____)))
 (let ((?x616 (center s_____)))
 (let (($x654 (= ?x616 ?x478)))
 (let ((?x312 (right s____)))
 (let ((?x623 (top ?x312)))
 (let ((?x625 (stack ?x623 ?x478)))
 (let (($x651 (= ?x616 ?x625)))
 (let (($x626 ((_ is stack ) ?x312)))
 (let (($x627 (= c____ right-to-center)))
 (let (($x628 (and $x627 $x626)))
 (let (($x629 (= c____ right-to-left)))
 (let (($x630 (and $x629 $x626)))
 (let ((?x618 (rest ?x478)))
 (let (($x646 (= ?x616 ?x618)))
 (let (($x631 ((_ is stack ) ?x478)))
 (let (($x632 (= c____ center-to-right)))
 (let (($x633 (and $x632 $x631)))
 (let (($x634 (= c____ center-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x267 (left s____)))
 (let ((?x476 (top ?x267)))
 (let ((?x617 (stack ?x476 ?x478)))
 (let (($x645 (= ?x616 ?x617)))
 (let (($x636 ((_ is stack ) ?x267)))
 (let (($x637 (= c____ left-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let (($x668 (ite $x638 $x645 (ite $x635 $x646 (ite $x633 $x646 (ite $x630 $x654 (ite $x628 $x651 $x654)))))))
 (let (($x639 (= c____ left-to-center)))
 (let (($x640 (and $x639 $x636)))
 (ite $x640 $x654 $x668)))))))))))))))))))))))))))))))
(assert
 (let ((?x41 (stack I (stack H (stack G (stack E (stack B empty)))))))
 (let ((?x430 (right s_____)))
 (let (($x672 (= ?x430 ?x41)))
 (let ((?x36 (stack D (stack C empty))))
 (let ((?x616 (center s_____)))
 (let (($x703 (= ?x616 ?x36)))
 (let ((?x34 (stack A (stack F (stack J empty)))))
 (let ((?x396 (left s_____)))
 (let (($x704 (= ?x396 ?x34)))
 (let (($x706 (not (and $x704 $x703 $x672))))
 (not $x706))))))))))))
(check-sat)
(exit)
