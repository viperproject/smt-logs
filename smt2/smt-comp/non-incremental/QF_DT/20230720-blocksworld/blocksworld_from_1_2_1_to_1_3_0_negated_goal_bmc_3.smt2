(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat) 
(declare-datatypes ((Enum_A_B_C_D 0)) (((A) (B) (C) (D))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x17 (stack C empty)))
 (let ((?x67 (left s_tmp_)))
 (= ?x67 ?x17))))
(assert
 (let ((?x16 (stack A empty)))
 (let ((?x18 (stack B ?x16)))
 (let ((?x70 (center s_tmp__)))
 (= ?x70 ?x18)))))
(assert
 (let ((?x19 (stack D empty)))
 (let ((?x73 (right s_tmp___)))
 (= ?x73 ?x19))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x100 (left s_tmp__)))
 (= (left s_tmp___) ?x100)))
(assert
 (let ((?x70 (center s_tmp__)))
 (= (center s_tmp___) ?x70)))
(assert
 (let ((?x104 (center s_tmp_)))
 (= ?x104 (center s_tmp))))
(assert
 (let ((?x107 (right s_tmp_)))
 (= ?x107 (right s_tmp))))
(assert
 (let ((?x67 (left s_tmp_)))
 (let ((?x100 (left s_tmp__)))
 (= ?x100 ?x67))))
(assert
 (let ((?x107 (right s_tmp_)))
 (let ((?x111 (right s_tmp__)))
 (= ?x111 ?x107))))
(assert
 (= c__ c!1))
(assert
 (let ((?x44 (left s_)))
 (let ((?x167 (left s__)))
 (let (($x212 (= ?x167 ?x44)))
 (let ((?x47 (right s_)))
 (let (($x182 ((_ is stack ) ?x47)))
 (let (($x185 (= c_ right-to-left)))
 (let (($x186 (and $x185 $x182)))
 (let ((?x49 (center s_)))
 (let (($x187 ((_ is stack ) ?x49)))
 (let (($x188 (= c_ center-to-right)))
 (let (($x189 (and $x188 $x187)))
 (let (($x190 (= c_ center-to-left)))
 (let (($x191 (and $x190 $x187)))
 (let (($x221 (ite $x191 (= ?x167 (stack (top ?x49) ?x44)) (ite $x189 $x212 (ite $x186 (= ?x167 (stack (top ?x47) ?x44)) $x212)))))
 (let (($x199 (= ?x167 (rest ?x44))))
 (let (($x192 ((_ is stack ) ?x44)))
 (let (($x193 (= c_ left-to-right)))
 (let (($x194 (and $x193 $x192)))
 (let (($x195 (= c_ left-to-center)))
 (let (($x196 (and $x195 $x192)))
 (ite $x196 $x199 (ite $x194 $x199 $x221)))))))))))))))))))))))
(assert
 (let ((?x47 (right s_)))
 (let ((?x172 (right s__)))
 (let (($x208 (= ?x172 ?x47)))
 (let (($x205 (= ?x172 (rest ?x47))))
 (let (($x182 ((_ is stack ) ?x47)))
 (let (($x183 (= c_ right-to-center)))
 (let (($x184 (and $x183 $x182)))
 (let (($x185 (= c_ right-to-left)))
 (let (($x186 (and $x185 $x182)))
 (let ((?x49 (center s_)))
 (let (($x187 ((_ is stack ) ?x49)))
 (let (($x188 (= c_ center-to-right)))
 (let (($x189 (and $x188 $x187)))
 (let (($x218 (ite $x189 (= ?x172 (stack (top ?x49) ?x47)) (ite $x186 $x205 (ite $x184 $x205 $x208)))))
 (let (($x190 (= c_ center-to-left)))
 (let (($x191 (and $x190 $x187)))
 (let ((?x44 (left s_)))
 (let (($x192 ((_ is stack ) ?x44)))
 (let (($x193 (= c_ left-to-right)))
 (let (($x194 (and $x193 $x192)))
 (let (($x195 (= c_ left-to-center)))
 (let (($x196 (and $x195 $x192)))
 (ite $x196 (= ?x172 (stack (top ?x44) ?x47)) (ite $x194 $x208 (ite $x191 $x208 $x218))))))))))))))))))))))))))
(assert
 (let ((?x49 (center s_)))
 (let ((?x169 (center s__)))
 (let (($x210 (= ?x169 ?x49)))
 (let ((?x47 (right s_)))
 (let (($x182 ((_ is stack ) ?x47)))
 (let (($x183 (= c_ right-to-center)))
 (let (($x184 (and $x183 $x182)))
 (let (($x185 (= c_ right-to-left)))
 (let (($x186 (and $x185 $x182)))
 (let (($x202 (= ?x169 (rest ?x49))))
 (let (($x187 ((_ is stack ) ?x49)))
 (let (($x188 (= c_ center-to-right)))
 (let (($x189 (and $x188 $x187)))
 (let (($x217 (ite $x189 $x202 (ite $x186 $x210 (ite $x184 (= ?x169 (stack (top ?x47) ?x49)) $x210)))))
 (let (($x190 (= c_ center-to-left)))
 (let (($x191 (and $x190 $x187)))
 (let ((?x44 (left s_)))
 (let (($x192 ((_ is stack ) ?x44)))
 (let (($x193 (= c_ left-to-right)))
 (let (($x194 (and $x193 $x192)))
 (let (($x195 (= c_ left-to-center)))
 (let (($x196 (and $x195 $x192)))
 (ite $x196 $x210 (ite $x194 (= ?x169 (stack (top ?x44) ?x49)) (ite $x191 $x202 $x217))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x167 (left s__)))
 (let ((?x114 (left s___)))
 (let (($x338 (= ?x114 ?x167)))
 (let ((?x172 (right s__)))
 (let ((?x305 (top ?x172)))
 (let ((?x306 (stack ?x305 ?x167)))
 (let (($x332 (= ?x114 ?x306)))
 (let (($x308 ((_ is stack ) ?x172)))
 (let (($x311 (= c__ right-to-left)))
 (let (($x312 (and $x311 $x308)))
 (let ((?x169 (center s__)))
 (let (($x313 ((_ is stack ) ?x169)))
 (let (($x314 (= c__ center-to-right)))
 (let (($x315 (and $x314 $x313)))
 (let ((?x301 (top ?x169)))
 (let ((?x302 (stack ?x301 ?x167)))
 (let (($x329 (= ?x114 ?x302)))
 (let (($x316 (= c__ center-to-left)))
 (let (($x317 (and $x316 $x313)))
 (let ((?x116 (rest ?x167)))
 (let (($x325 (= ?x114 ?x116)))
 (let (($x318 ((_ is stack ) ?x167)))
 (let (($x319 (= c__ left-to-right)))
 (let (($x320 (and $x319 $x318)))
 (let (($x321 (= c__ left-to-center)))
 (let (($x322 (and $x321 $x318)))
 (ite $x322 $x325 (ite $x320 $x325 (ite $x317 $x329 (ite $x315 $x338 (ite $x312 $x332 $x338))))))))))))))))))))))))))))))))
(assert
 (let ((?x172 (right s__)))
 (let ((?x117 (right s___)))
 (let (($x334 (= ?x117 ?x172)))
 (let ((?x304 (rest ?x172)))
 (let (($x331 (= ?x117 ?x304)))
 (let (($x308 ((_ is stack ) ?x172)))
 (let (($x309 (= c__ right-to-center)))
 (let (($x310 (and $x309 $x308)))
 (let (($x311 (= c__ right-to-left)))
 (let (($x312 (and $x311 $x308)))
 (let ((?x169 (center s__)))
 (let ((?x301 (top ?x169)))
 (let ((?x303 (stack ?x301 ?x172)))
 (let (($x330 (= ?x117 ?x303)))
 (let (($x313 ((_ is stack ) ?x169)))
 (let (($x314 (= c__ center-to-right)))
 (let (($x315 (and $x314 $x313)))
 (let (($x316 (= c__ center-to-left)))
 (let (($x317 (and $x316 $x313)))
 (let ((?x167 (left s__)))
 (let (($x318 ((_ is stack ) ?x167)))
 (let (($x319 (= c__ left-to-right)))
 (let (($x320 (and $x319 $x318)))
 (let (($x351 (ite $x320 $x334 (ite $x317 $x334 (ite $x315 $x330 (ite $x312 $x331 (ite $x310 $x331 $x334)))))))
 (let ((?x164 (top ?x167)))
 (let ((?x297 (stack ?x164 ?x172)))
 (let (($x326 (= ?x117 ?x297)))
 (let (($x321 (= c__ left-to-center)))
 (let (($x322 (and $x321 $x318)))
 (ite $x322 $x326 $x351)))))))))))))))))))))))))))))))
(assert
 (let ((?x169 (center s__)))
 (let ((?x298 (center s___)))
 (let (($x336 (= ?x298 ?x169)))
 (let ((?x172 (right s__)))
 (let ((?x305 (top ?x172)))
 (let ((?x307 (stack ?x305 ?x169)))
 (let (($x333 (= ?x298 ?x307)))
 (let (($x308 ((_ is stack ) ?x172)))
 (let (($x309 (= c__ right-to-center)))
 (let (($x310 (and $x309 $x308)))
 (let (($x311 (= c__ right-to-left)))
 (let (($x312 (and $x311 $x308)))
 (let ((?x300 (rest ?x169)))
 (let (($x328 (= ?x298 ?x300)))
 (let (($x313 ((_ is stack ) ?x169)))
 (let (($x314 (= c__ center-to-right)))
 (let (($x315 (and $x314 $x313)))
 (let (($x316 (= c__ center-to-left)))
 (let (($x317 (and $x316 $x313)))
 (let ((?x167 (left s__)))
 (let ((?x164 (top ?x167)))
 (let ((?x299 (stack ?x164 ?x169)))
 (let (($x327 (= ?x298 ?x299)))
 (let (($x318 ((_ is stack ) ?x167)))
 (let (($x319 (= c__ left-to-right)))
 (let (($x320 (and $x319 $x318)))
 (let (($x350 (ite $x320 $x327 (ite $x317 $x328 (ite $x315 $x328 (ite $x312 $x336 (ite $x310 $x333 $x336)))))))
 (let (($x321 (= c__ left-to-center)))
 (let (($x322 (and $x321 $x318)))
 (ite $x322 $x336 $x350)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x114 (left s___)))
 (let ((?x270 (left s____)))
 (let (($x478 (= ?x270 ?x114)))
 (let ((?x117 (right s___)))
 (let ((?x445 (top ?x117)))
 (let ((?x446 (stack ?x445 ?x114)))
 (let (($x472 (= ?x270 ?x446)))
 (let (($x448 ((_ is stack ) ?x117)))
 (let (($x451 (= c___ right-to-left)))
 (let (($x452 (and $x451 $x448)))
 (let ((?x298 (center s___)))
 (let (($x453 ((_ is stack ) ?x298)))
 (let (($x454 (= c___ center-to-right)))
 (let (($x455 (and $x454 $x453)))
 (let ((?x441 (top ?x298)))
 (let ((?x442 (stack ?x441 ?x114)))
 (let (($x469 (= ?x270 ?x442)))
 (let (($x456 (= c___ center-to-left)))
 (let (($x457 (and $x456 $x453)))
 (let ((?x296 (rest ?x114)))
 (let (($x465 (= ?x270 ?x296)))
 (let (($x458 ((_ is stack ) ?x114)))
 (let (($x459 (= c___ left-to-right)))
 (let (($x460 (and $x459 $x458)))
 (let (($x461 (= c___ left-to-center)))
 (let (($x462 (and $x461 $x458)))
 (ite $x462 $x465 (ite $x460 $x465 (ite $x457 $x469 (ite $x455 $x478 (ite $x452 $x472 $x478))))))))))))))))))))))))))))))))
(assert
 (let ((?x117 (right s___)))
 (let ((?x435 (right s____)))
 (let (($x474 (= ?x435 ?x117)))
 (let ((?x444 (rest ?x117)))
 (let (($x471 (= ?x435 ?x444)))
 (let (($x448 ((_ is stack ) ?x117)))
 (let (($x449 (= c___ right-to-center)))
 (let (($x450 (and $x449 $x448)))
 (let (($x451 (= c___ right-to-left)))
 (let (($x452 (and $x451 $x448)))
 (let ((?x298 (center s___)))
 (let ((?x441 (top ?x298)))
 (let ((?x443 (stack ?x441 ?x117)))
 (let (($x470 (= ?x435 ?x443)))
 (let (($x453 ((_ is stack ) ?x298)))
 (let (($x454 (= c___ center-to-right)))
 (let (($x455 (and $x454 $x453)))
 (let (($x456 (= c___ center-to-left)))
 (let (($x457 (and $x456 $x453)))
 (let ((?x114 (left s___)))
 (let (($x458 ((_ is stack ) ?x114)))
 (let (($x459 (= c___ left-to-right)))
 (let (($x460 (and $x459 $x458)))
 (let (($x491 (ite $x460 $x474 (ite $x457 $x474 (ite $x455 $x470 (ite $x452 $x471 (ite $x450 $x471 $x474)))))))
 (let ((?x436 (top ?x114)))
 (let ((?x437 (stack ?x436 ?x117)))
 (let (($x466 (= ?x435 ?x437)))
 (let (($x461 (= c___ left-to-center)))
 (let (($x462 (and $x461 $x458)))
 (ite $x462 $x466 $x491)))))))))))))))))))))))))))))))
(assert
 (let ((?x298 (center s___)))
 (let ((?x438 (center s____)))
 (let (($x476 (= ?x438 ?x298)))
 (let ((?x117 (right s___)))
 (let ((?x445 (top ?x117)))
 (let ((?x447 (stack ?x445 ?x298)))
 (let (($x473 (= ?x438 ?x447)))
 (let (($x448 ((_ is stack ) ?x117)))
 (let (($x449 (= c___ right-to-center)))
 (let (($x450 (and $x449 $x448)))
 (let (($x451 (= c___ right-to-left)))
 (let (($x452 (and $x451 $x448)))
 (let ((?x440 (rest ?x298)))
 (let (($x468 (= ?x438 ?x440)))
 (let (($x453 ((_ is stack ) ?x298)))
 (let (($x454 (= c___ center-to-right)))
 (let (($x455 (and $x454 $x453)))
 (let (($x456 (= c___ center-to-left)))
 (let (($x457 (and $x456 $x453)))
 (let ((?x114 (left s___)))
 (let ((?x436 (top ?x114)))
 (let ((?x439 (stack ?x436 ?x298)))
 (let (($x467 (= ?x438 ?x439)))
 (let (($x458 ((_ is stack ) ?x114)))
 (let (($x459 (= c___ left-to-right)))
 (let (($x460 (and $x459 $x458)))
 (let (($x490 (ite $x460 $x467 (ite $x457 $x468 (ite $x455 $x468 (ite $x452 $x476 (ite $x450 $x473 $x476)))))))
 (let (($x461 (= c___ left-to-center)))
 (let (($x462 (and $x461 $x458)))
 (ite $x462 $x476 $x490)))))))))))))))))))))))))))))))
(assert
 (let ((?x435 (right s____)))
 (let (($x494 (= ?x435 empty)))
 (let ((?x16 (stack A empty)))
 (let ((?x18 (stack B ?x16)))
 (let ((?x20 (stack C ?x18)))
 (let ((?x438 (center s____)))
 (let (($x525 (= ?x438 ?x20)))
 (let ((?x19 (stack D empty)))
 (let ((?x270 (left s____)))
 (let (($x526 (= ?x270 ?x19)))
 (let (($x528 (not (and $x526 $x525 $x494))))
 (not $x528)))))))))))))
(check-sat)
(exit)
