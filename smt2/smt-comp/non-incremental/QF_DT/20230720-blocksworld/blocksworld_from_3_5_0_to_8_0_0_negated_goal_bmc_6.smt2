(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H 0)) (((A) (B) (C) (D) (E) (F) (G) (H))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x20 (stack D empty)))
 (let ((?x21 (stack H ?x20)))
 (let ((?x22 (stack G ?x21)))
 (let ((?x82 (left s_tmp_)))
 (= ?x82 ?x22))))))
(assert
 (let ((?x23 (stack C empty)))
 (let ((?x24 (stack F ?x23)))
 (let ((?x25 (stack E ?x24)))
 (let ((?x26 (stack B ?x25)))
 (let ((?x27 (stack A ?x26)))
 (let ((?x85 (center s_tmp__)))
 (= ?x85 ?x27))))))))
(assert
 (let ((?x88 (right s_tmp___)))
 (= ?x88 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x115 (left s_tmp__)))
 (= (left s_tmp___) ?x115)))
(assert
 (let ((?x85 (center s_tmp__)))
 (= (center s_tmp___) ?x85)))
(assert
 (let ((?x119 (center s_tmp_)))
 (= ?x119 (center s_tmp))))
(assert
 (let ((?x122 (right s_tmp_)))
 (= ?x122 (right s_tmp))))
(assert
 (let ((?x82 (left s_tmp_)))
 (let ((?x115 (left s_tmp__)))
 (= ?x115 ?x82))))
(assert
 (let ((?x122 (right s_tmp_)))
 (let ((?x126 (right s_tmp__)))
 (= ?x126 ?x122))))
(assert
 (= c__ c!1))
(assert
 (let ((?x59 (left s_)))
 (let ((?x193 (left s__)))
 (let (($x238 (= ?x193 ?x59)))
 (let ((?x62 (right s_)))
 (let (($x208 ((_ is stack ) ?x62)))
 (let (($x212 (and (= c_ right-to-left) $x208)))
 (let ((?x64 (center s_)))
 (let (($x213 ((_ is stack ) ?x64)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x215 (and $x214 $x213)))
 (let (($x216 (= c_ center-to-left)))
 (let (($x217 (and $x216 $x213)))
 (let (($x247 (ite $x217 (= ?x193 (stack (top ?x64) ?x59)) (ite $x215 $x238 (ite $x212 (= ?x193 (stack (top ?x62) ?x59)) $x238)))))
 (let (($x225 (= ?x193 (rest ?x59))))
 (let (($x218 ((_ is stack ) ?x59)))
 (let (($x219 (= c_ left-to-right)))
 (let (($x220 (and $x219 $x218)))
 (let (($x221 (= c_ left-to-center)))
 (let (($x222 (and $x221 $x218)))
 (ite $x222 $x225 (ite $x220 $x225 $x247))))))))))))))))))))))
(assert
 (let ((?x62 (right s_)))
 (let ((?x195 (right s__)))
 (let (($x234 (= ?x195 ?x62)))
 (let (($x231 (= ?x195 (rest ?x62))))
 (let (($x208 ((_ is stack ) ?x62)))
 (let (($x210 (and (= c_ right-to-center) $x208)))
 (let (($x212 (and (= c_ right-to-left) $x208)))
 (let ((?x64 (center s_)))
 (let (($x213 ((_ is stack ) ?x64)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x215 (and $x214 $x213)))
 (let (($x244 (ite $x215 (= ?x195 (stack (top ?x64) ?x62)) (ite $x212 $x231 (ite $x210 $x231 $x234)))))
 (let (($x216 (= c_ center-to-left)))
 (let (($x217 (and $x216 $x213)))
 (let ((?x59 (left s_)))
 (let (($x218 ((_ is stack ) ?x59)))
 (let (($x219 (= c_ left-to-right)))
 (let (($x220 (and $x219 $x218)))
 (let (($x221 (= c_ left-to-center)))
 (let (($x222 (and $x221 $x218)))
 (ite $x222 (= ?x195 (stack (top ?x59) ?x62)) (ite $x220 $x234 (ite $x217 $x234 $x244))))))))))))))))))))))))
(assert
 (let ((?x64 (center s_)))
 (let ((?x198 (center s__)))
 (let (($x236 (= ?x198 ?x64)))
 (let ((?x62 (right s_)))
 (let (($x208 ((_ is stack ) ?x62)))
 (let (($x210 (and (= c_ right-to-center) $x208)))
 (let (($x212 (and (= c_ right-to-left) $x208)))
 (let (($x228 (= ?x198 (rest ?x64))))
 (let (($x213 ((_ is stack ) ?x64)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x215 (and $x214 $x213)))
 (let (($x243 (ite $x215 $x228 (ite $x212 $x236 (ite $x210 (= ?x198 (stack (top ?x62) ?x64)) $x236)))))
 (let (($x216 (= c_ center-to-left)))
 (let (($x217 (and $x216 $x213)))
 (let ((?x59 (left s_)))
 (let (($x218 ((_ is stack ) ?x59)))
 (let (($x219 (= c_ left-to-right)))
 (let (($x220 (and $x219 $x218)))
 (let (($x221 (= c_ left-to-center)))
 (let (($x222 (and $x221 $x218)))
 (ite $x222 $x236 (ite $x220 (= ?x198 (stack (top ?x59) ?x64)) (ite $x217 $x228 $x243))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x193 (left s__)))
 (let ((?x131 (left s___)))
 (let (($x348 (= ?x131 ?x193)))
 (let ((?x195 (right s__)))
 (let ((?x315 (top ?x195)))
 (let ((?x316 (stack ?x315 ?x193)))
 (let (($x342 (= ?x131 ?x316)))
 (let (($x318 ((_ is stack ) ?x195)))
 (let (($x321 (= c__ right-to-left)))
 (let (($x322 (and $x321 $x318)))
 (let ((?x198 (center s__)))
 (let (($x323 ((_ is stack ) ?x198)))
 (let (($x324 (= c__ center-to-right)))
 (let (($x325 (and $x324 $x323)))
 (let ((?x311 (top ?x198)))
 (let ((?x312 (stack ?x311 ?x193)))
 (let (($x339 (= ?x131 ?x312)))
 (let (($x326 (= c__ center-to-left)))
 (let (($x327 (and $x326 $x323)))
 (let ((?x132 (rest ?x193)))
 (let (($x335 (= ?x131 ?x132)))
 (let (($x328 ((_ is stack ) ?x193)))
 (let (($x329 (= c__ left-to-right)))
 (let (($x330 (and $x329 $x328)))
 (let (($x331 (= c__ left-to-center)))
 (let (($x332 (and $x331 $x328)))
 (ite $x332 $x335 (ite $x330 $x335 (ite $x327 $x339 (ite $x325 $x348 (ite $x322 $x342 $x348))))))))))))))))))))))))))))))))
(assert
 (let ((?x195 (right s__)))
 (let ((?x190 (right s___)))
 (let (($x344 (= ?x190 ?x195)))
 (let ((?x314 (rest ?x195)))
 (let (($x341 (= ?x190 ?x314)))
 (let (($x318 ((_ is stack ) ?x195)))
 (let (($x319 (= c__ right-to-center)))
 (let (($x320 (and $x319 $x318)))
 (let (($x321 (= c__ right-to-left)))
 (let (($x322 (and $x321 $x318)))
 (let ((?x198 (center s__)))
 (let ((?x311 (top ?x198)))
 (let ((?x313 (stack ?x311 ?x195)))
 (let (($x340 (= ?x190 ?x313)))
 (let (($x323 ((_ is stack ) ?x198)))
 (let (($x324 (= c__ center-to-right)))
 (let (($x325 (and $x324 $x323)))
 (let (($x326 (= c__ center-to-left)))
 (let (($x327 (and $x326 $x323)))
 (let ((?x193 (left s__)))
 (let (($x328 ((_ is stack ) ?x193)))
 (let (($x329 (= c__ left-to-right)))
 (let (($x330 (and $x329 $x328)))
 (let (($x361 (ite $x330 $x344 (ite $x327 $x344 (ite $x325 $x340 (ite $x322 $x341 (ite $x320 $x341 $x344)))))))
 (let ((?x306 (top ?x193)))
 (let ((?x307 (stack ?x306 ?x195)))
 (let (($x336 (= ?x190 ?x307)))
 (let (($x331 (= c__ left-to-center)))
 (let (($x332 (and $x331 $x328)))
 (ite $x332 $x336 $x361)))))))))))))))))))))))))))))))
(assert
 (let ((?x198 (center s__)))
 (let ((?x308 (center s___)))
 (let (($x346 (= ?x308 ?x198)))
 (let ((?x195 (right s__)))
 (let ((?x315 (top ?x195)))
 (let ((?x317 (stack ?x315 ?x198)))
 (let (($x343 (= ?x308 ?x317)))
 (let (($x318 ((_ is stack ) ?x195)))
 (let (($x319 (= c__ right-to-center)))
 (let (($x320 (and $x319 $x318)))
 (let (($x321 (= c__ right-to-left)))
 (let (($x322 (and $x321 $x318)))
 (let ((?x310 (rest ?x198)))
 (let (($x338 (= ?x308 ?x310)))
 (let (($x323 ((_ is stack ) ?x198)))
 (let (($x324 (= c__ center-to-right)))
 (let (($x325 (and $x324 $x323)))
 (let (($x326 (= c__ center-to-left)))
 (let (($x327 (and $x326 $x323)))
 (let ((?x193 (left s__)))
 (let ((?x306 (top ?x193)))
 (let ((?x309 (stack ?x306 ?x198)))
 (let (($x337 (= ?x308 ?x309)))
 (let (($x328 ((_ is stack ) ?x193)))
 (let (($x329 (= c__ left-to-right)))
 (let (($x330 (and $x329 $x328)))
 (let (($x360 (ite $x330 $x337 (ite $x327 $x338 (ite $x325 $x338 (ite $x322 $x346 (ite $x320 $x343 $x346)))))))
 (let (($x331 (= c__ left-to-center)))
 (let (($x332 (and $x331 $x328)))
 (ite $x332 $x346 $x360)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x131 (left s___)))
 (let ((?x283 (left s____)))
 (let (($x487 (= ?x283 ?x131)))
 (let ((?x190 (right s___)))
 (let ((?x454 (top ?x190)))
 (let ((?x455 (stack ?x454 ?x131)))
 (let (($x481 (= ?x283 ?x455)))
 (let (($x457 ((_ is stack ) ?x190)))
 (let (($x460 (= c___ right-to-left)))
 (let (($x461 (and $x460 $x457)))
 (let ((?x308 (center s___)))
 (let (($x462 ((_ is stack ) ?x308)))
 (let (($x463 (= c___ center-to-right)))
 (let (($x464 (and $x463 $x462)))
 (let ((?x450 (top ?x308)))
 (let ((?x451 (stack ?x450 ?x131)))
 (let (($x478 (= ?x283 ?x451)))
 (let (($x465 (= c___ center-to-left)))
 (let (($x466 (and $x465 $x462)))
 (let ((?x284 (rest ?x131)))
 (let (($x474 (= ?x283 ?x284)))
 (let (($x467 ((_ is stack ) ?x131)))
 (let (($x468 (= c___ left-to-right)))
 (let (($x469 (and $x468 $x467)))
 (let (($x470 (= c___ left-to-center)))
 (let (($x471 (and $x470 $x467)))
 (ite $x471 $x474 (ite $x469 $x474 (ite $x466 $x478 (ite $x464 $x487 (ite $x461 $x481 $x487))))))))))))))))))))))))))))))))
(assert
 (let ((?x190 (right s___)))
 (let ((?x305 (right s____)))
 (let (($x483 (= ?x305 ?x190)))
 (let ((?x453 (rest ?x190)))
 (let (($x480 (= ?x305 ?x453)))
 (let (($x457 ((_ is stack ) ?x190)))
 (let (($x458 (= c___ right-to-center)))
 (let (($x459 (and $x458 $x457)))
 (let (($x460 (= c___ right-to-left)))
 (let (($x461 (and $x460 $x457)))
 (let ((?x308 (center s___)))
 (let ((?x450 (top ?x308)))
 (let ((?x452 (stack ?x450 ?x190)))
 (let (($x479 (= ?x305 ?x452)))
 (let (($x462 ((_ is stack ) ?x308)))
 (let (($x463 (= c___ center-to-right)))
 (let (($x464 (and $x463 $x462)))
 (let (($x465 (= c___ center-to-left)))
 (let (($x466 (and $x465 $x462)))
 (let ((?x131 (left s___)))
 (let (($x467 ((_ is stack ) ?x131)))
 (let (($x468 (= c___ left-to-right)))
 (let (($x469 (and $x468 $x467)))
 (let (($x500 (ite $x469 $x483 (ite $x466 $x483 (ite $x464 $x479 (ite $x461 $x480 (ite $x459 $x480 $x483)))))))
 (let ((?x445 (top ?x131)))
 (let ((?x446 (stack ?x445 ?x190)))
 (let (($x475 (= ?x305 ?x446)))
 (let (($x470 (= c___ left-to-center)))
 (let (($x471 (and $x470 $x467)))
 (ite $x471 $x475 $x500)))))))))))))))))))))))))))))))
(assert
 (let ((?x308 (center s___)))
 (let ((?x447 (center s____)))
 (let (($x485 (= ?x447 ?x308)))
 (let ((?x190 (right s___)))
 (let ((?x454 (top ?x190)))
 (let ((?x456 (stack ?x454 ?x308)))
 (let (($x482 (= ?x447 ?x456)))
 (let (($x457 ((_ is stack ) ?x190)))
 (let (($x458 (= c___ right-to-center)))
 (let (($x459 (and $x458 $x457)))
 (let (($x460 (= c___ right-to-left)))
 (let (($x461 (and $x460 $x457)))
 (let ((?x449 (rest ?x308)))
 (let (($x477 (= ?x447 ?x449)))
 (let (($x462 ((_ is stack ) ?x308)))
 (let (($x463 (= c___ center-to-right)))
 (let (($x464 (and $x463 $x462)))
 (let (($x465 (= c___ center-to-left)))
 (let (($x466 (and $x465 $x462)))
 (let ((?x131 (left s___)))
 (let ((?x445 (top ?x131)))
 (let ((?x448 (stack ?x445 ?x308)))
 (let (($x476 (= ?x447 ?x448)))
 (let (($x467 ((_ is stack ) ?x131)))
 (let (($x468 (= c___ left-to-right)))
 (let (($x469 (and $x468 $x467)))
 (let (($x499 (ite $x469 $x476 (ite $x466 $x477 (ite $x464 $x477 (ite $x461 $x485 (ite $x459 $x482 $x485)))))))
 (let (($x470 (= c___ left-to-center)))
 (let (($x471 (and $x470 $x467)))
 (ite $x471 $x485 $x499)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x283 (left s____)))
 (let ((?x364 (left s_____)))
 (let (($x625 (= ?x364 ?x283)))
 (let ((?x305 (right s____)))
 (let ((?x592 (top ?x305)))
 (let ((?x593 (stack ?x592 ?x283)))
 (let (($x619 (= ?x364 ?x593)))
 (let (($x595 ((_ is stack ) ?x305)))
 (let (($x598 (= c____ right-to-left)))
 (let (($x599 (and $x598 $x595)))
 (let ((?x447 (center s____)))
 (let (($x600 ((_ is stack ) ?x447)))
 (let (($x601 (= c____ center-to-right)))
 (let (($x602 (and $x601 $x600)))
 (let ((?x588 (top ?x447)))
 (let ((?x589 (stack ?x588 ?x283)))
 (let (($x616 (= ?x364 ?x589)))
 (let (($x603 (= c____ center-to-left)))
 (let (($x604 (and $x603 $x600)))
 (let ((?x397 (rest ?x283)))
 (let (($x612 (= ?x364 ?x397)))
 (let (($x605 ((_ is stack ) ?x283)))
 (let (($x606 (= c____ left-to-right)))
 (let (($x607 (and $x606 $x605)))
 (let (($x608 (= c____ left-to-center)))
 (let (($x609 (and $x608 $x605)))
 (ite $x609 $x612 (ite $x607 $x612 (ite $x604 $x616 (ite $x602 $x625 (ite $x599 $x619 $x625))))))))))))))))))))))))))))))))
(assert
 (let ((?x305 (right s____)))
 (let ((?x398 (right s_____)))
 (let (($x621 (= ?x398 ?x305)))
 (let ((?x591 (rest ?x305)))
 (let (($x618 (= ?x398 ?x591)))
 (let (($x595 ((_ is stack ) ?x305)))
 (let (($x596 (= c____ right-to-center)))
 (let (($x597 (and $x596 $x595)))
 (let (($x598 (= c____ right-to-left)))
 (let (($x599 (and $x598 $x595)))
 (let ((?x447 (center s____)))
 (let ((?x588 (top ?x447)))
 (let ((?x590 (stack ?x588 ?x305)))
 (let (($x617 (= ?x398 ?x590)))
 (let (($x600 ((_ is stack ) ?x447)))
 (let (($x601 (= c____ center-to-right)))
 (let (($x602 (and $x601 $x600)))
 (let (($x603 (= c____ center-to-left)))
 (let (($x604 (and $x603 $x600)))
 (let ((?x283 (left s____)))
 (let (($x605 ((_ is stack ) ?x283)))
 (let (($x606 (= c____ left-to-right)))
 (let (($x607 (and $x606 $x605)))
 (let (($x638 (ite $x607 $x621 (ite $x604 $x621 (ite $x602 $x617 (ite $x599 $x618 (ite $x597 $x618 $x621)))))))
 (let ((?x444 (top ?x283)))
 (let ((?x584 (stack ?x444 ?x305)))
 (let (($x613 (= ?x398 ?x584)))
 (let (($x608 (= c____ left-to-center)))
 (let (($x609 (and $x608 $x605)))
 (ite $x609 $x613 $x638)))))))))))))))))))))))))))))))
(assert
 (let ((?x447 (center s____)))
 (let ((?x585 (center s_____)))
 (let (($x623 (= ?x585 ?x447)))
 (let ((?x305 (right s____)))
 (let ((?x592 (top ?x305)))
 (let ((?x594 (stack ?x592 ?x447)))
 (let (($x620 (= ?x585 ?x594)))
 (let (($x595 ((_ is stack ) ?x305)))
 (let (($x596 (= c____ right-to-center)))
 (let (($x597 (and $x596 $x595)))
 (let (($x598 (= c____ right-to-left)))
 (let (($x599 (and $x598 $x595)))
 (let ((?x587 (rest ?x447)))
 (let (($x615 (= ?x585 ?x587)))
 (let (($x600 ((_ is stack ) ?x447)))
 (let (($x601 (= c____ center-to-right)))
 (let (($x602 (and $x601 $x600)))
 (let (($x603 (= c____ center-to-left)))
 (let (($x604 (and $x603 $x600)))
 (let ((?x283 (left s____)))
 (let ((?x444 (top ?x283)))
 (let ((?x586 (stack ?x444 ?x447)))
 (let (($x614 (= ?x585 ?x586)))
 (let (($x605 ((_ is stack ) ?x283)))
 (let (($x606 (= c____ left-to-right)))
 (let (($x607 (and $x606 $x605)))
 (let (($x637 (ite $x607 $x614 (ite $x604 $x615 (ite $x602 $x615 (ite $x599 $x623 (ite $x597 $x620 $x623)))))))
 (let (($x608 (= c____ left-to-center)))
 (let (($x609 (and $x608 $x605)))
 (ite $x609 $x623 $x637)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x364 (left s_____)))
 (let ((?x503 (left s______)))
 (let (($x763 (= ?x503 ?x364)))
 (let ((?x398 (right s_____)))
 (let ((?x730 (top ?x398)))
 (let ((?x731 (stack ?x730 ?x364)))
 (let (($x757 (= ?x503 ?x731)))
 (let (($x733 ((_ is stack ) ?x398)))
 (let (($x736 (= c_____ right-to-left)))
 (let (($x737 (and $x736 $x733)))
 (let ((?x585 (center s_____)))
 (let (($x738 ((_ is stack ) ?x585)))
 (let (($x739 (= c_____ center-to-right)))
 (let (($x740 (and $x739 $x738)))
 (let ((?x726 (top ?x585)))
 (let ((?x727 (stack ?x726 ?x364)))
 (let (($x754 (= ?x503 ?x727)))
 (let (($x741 (= c_____ center-to-left)))
 (let (($x742 (and $x741 $x738)))
 (let ((?x536 (rest ?x364)))
 (let (($x750 (= ?x503 ?x536)))
 (let (($x743 ((_ is stack ) ?x364)))
 (let (($x744 (= c_____ left-to-right)))
 (let (($x745 (and $x744 $x743)))
 (let (($x746 (= c_____ left-to-center)))
 (let (($x747 (and $x746 $x743)))
 (ite $x747 $x750 (ite $x745 $x750 (ite $x742 $x754 (ite $x740 $x763 (ite $x737 $x757 $x763))))))))))))))))))))))))))))))))
(assert
 (let ((?x398 (right s_____)))
 (let ((?x537 (right s______)))
 (let (($x759 (= ?x537 ?x398)))
 (let ((?x729 (rest ?x398)))
 (let (($x756 (= ?x537 ?x729)))
 (let (($x733 ((_ is stack ) ?x398)))
 (let (($x734 (= c_____ right-to-center)))
 (let (($x735 (and $x734 $x733)))
 (let (($x736 (= c_____ right-to-left)))
 (let (($x737 (and $x736 $x733)))
 (let ((?x585 (center s_____)))
 (let ((?x726 (top ?x585)))
 (let ((?x728 (stack ?x726 ?x398)))
 (let (($x755 (= ?x537 ?x728)))
 (let (($x738 ((_ is stack ) ?x585)))
 (let (($x739 (= c_____ center-to-right)))
 (let (($x740 (and $x739 $x738)))
 (let (($x741 (= c_____ center-to-left)))
 (let (($x742 (and $x741 $x738)))
 (let ((?x364 (left s_____)))
 (let (($x743 ((_ is stack ) ?x364)))
 (let (($x744 (= c_____ left-to-right)))
 (let (($x745 (and $x744 $x743)))
 (let (($x776 (ite $x745 $x759 (ite $x742 $x759 (ite $x740 $x755 (ite $x737 $x756 (ite $x735 $x756 $x759)))))))
 (let ((?x583 (top ?x364)))
 (let ((?x722 (stack ?x583 ?x398)))
 (let (($x751 (= ?x537 ?x722)))
 (let (($x746 (= c_____ left-to-center)))
 (let (($x747 (and $x746 $x743)))
 (ite $x747 $x751 $x776)))))))))))))))))))))))))))))))
(assert
 (let ((?x585 (center s_____)))
 (let ((?x723 (center s______)))
 (let (($x761 (= ?x723 ?x585)))
 (let ((?x398 (right s_____)))
 (let ((?x730 (top ?x398)))
 (let ((?x732 (stack ?x730 ?x585)))
 (let (($x758 (= ?x723 ?x732)))
 (let (($x733 ((_ is stack ) ?x398)))
 (let (($x734 (= c_____ right-to-center)))
 (let (($x735 (and $x734 $x733)))
 (let (($x736 (= c_____ right-to-left)))
 (let (($x737 (and $x736 $x733)))
 (let ((?x725 (rest ?x585)))
 (let (($x753 (= ?x723 ?x725)))
 (let (($x738 ((_ is stack ) ?x585)))
 (let (($x739 (= c_____ center-to-right)))
 (let (($x740 (and $x739 $x738)))
 (let (($x741 (= c_____ center-to-left)))
 (let (($x742 (and $x741 $x738)))
 (let ((?x364 (left s_____)))
 (let ((?x583 (top ?x364)))
 (let ((?x724 (stack ?x583 ?x585)))
 (let (($x752 (= ?x723 ?x724)))
 (let (($x743 ((_ is stack ) ?x364)))
 (let (($x744 (= c_____ left-to-right)))
 (let (($x745 (and $x744 $x743)))
 (let (($x775 (ite $x745 $x752 (ite $x742 $x753 (ite $x740 $x753 (ite $x737 $x761 (ite $x735 $x758 $x761)))))))
 (let (($x746 (= c_____ left-to-center)))
 (let (($x747 (and $x746 $x743)))
 (ite $x747 $x761 $x775)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x503 (left s______)))
 (let ((?x641 (left s_______)))
 (let (($x901 (= ?x641 ?x503)))
 (let ((?x537 (right s______)))
 (let ((?x868 (top ?x537)))
 (let ((?x869 (stack ?x868 ?x503)))
 (let (($x895 (= ?x641 ?x869)))
 (let (($x871 ((_ is stack ) ?x537)))
 (let (($x874 (= c______ right-to-left)))
 (let (($x875 (and $x874 $x871)))
 (let ((?x723 (center s______)))
 (let (($x876 ((_ is stack ) ?x723)))
 (let (($x877 (= c______ center-to-right)))
 (let (($x878 (and $x877 $x876)))
 (let ((?x864 (top ?x723)))
 (let ((?x865 (stack ?x864 ?x503)))
 (let (($x892 (= ?x641 ?x865)))
 (let (($x879 (= c______ center-to-left)))
 (let (($x880 (and $x879 $x876)))
 (let ((?x674 (rest ?x503)))
 (let (($x888 (= ?x641 ?x674)))
 (let (($x881 ((_ is stack ) ?x503)))
 (let (($x882 (= c______ left-to-right)))
 (let (($x883 (and $x882 $x881)))
 (let (($x884 (= c______ left-to-center)))
 (let (($x885 (and $x884 $x881)))
 (ite $x885 $x888 (ite $x883 $x888 (ite $x880 $x892 (ite $x878 $x901 (ite $x875 $x895 $x901))))))))))))))))))))))))))))))))
(assert
 (let ((?x537 (right s______)))
 (let ((?x675 (right s_______)))
 (let (($x897 (= ?x675 ?x537)))
 (let ((?x867 (rest ?x537)))
 (let (($x894 (= ?x675 ?x867)))
 (let (($x871 ((_ is stack ) ?x537)))
 (let (($x872 (= c______ right-to-center)))
 (let (($x873 (and $x872 $x871)))
 (let (($x874 (= c______ right-to-left)))
 (let (($x875 (and $x874 $x871)))
 (let ((?x723 (center s______)))
 (let ((?x864 (top ?x723)))
 (let ((?x866 (stack ?x864 ?x537)))
 (let (($x893 (= ?x675 ?x866)))
 (let (($x876 ((_ is stack ) ?x723)))
 (let (($x877 (= c______ center-to-right)))
 (let (($x878 (and $x877 $x876)))
 (let (($x879 (= c______ center-to-left)))
 (let (($x880 (and $x879 $x876)))
 (let ((?x503 (left s______)))
 (let (($x881 ((_ is stack ) ?x503)))
 (let (($x882 (= c______ left-to-right)))
 (let (($x883 (and $x882 $x881)))
 (let (($x914 (ite $x883 $x897 (ite $x880 $x897 (ite $x878 $x893 (ite $x875 $x894 (ite $x873 $x894 $x897)))))))
 (let ((?x721 (top ?x503)))
 (let ((?x860 (stack ?x721 ?x537)))
 (let (($x889 (= ?x675 ?x860)))
 (let (($x884 (= c______ left-to-center)))
 (let (($x885 (and $x884 $x881)))
 (ite $x885 $x889 $x914)))))))))))))))))))))))))))))))
(assert
 (let ((?x723 (center s______)))
 (let ((?x861 (center s_______)))
 (let (($x899 (= ?x861 ?x723)))
 (let ((?x537 (right s______)))
 (let ((?x868 (top ?x537)))
 (let ((?x870 (stack ?x868 ?x723)))
 (let (($x896 (= ?x861 ?x870)))
 (let (($x871 ((_ is stack ) ?x537)))
 (let (($x872 (= c______ right-to-center)))
 (let (($x873 (and $x872 $x871)))
 (let (($x874 (= c______ right-to-left)))
 (let (($x875 (and $x874 $x871)))
 (let ((?x863 (rest ?x723)))
 (let (($x891 (= ?x861 ?x863)))
 (let (($x876 ((_ is stack ) ?x723)))
 (let (($x877 (= c______ center-to-right)))
 (let (($x878 (and $x877 $x876)))
 (let (($x879 (= c______ center-to-left)))
 (let (($x880 (and $x879 $x876)))
 (let ((?x503 (left s______)))
 (let ((?x721 (top ?x503)))
 (let ((?x862 (stack ?x721 ?x723)))
 (let (($x890 (= ?x861 ?x862)))
 (let (($x881 ((_ is stack ) ?x503)))
 (let (($x882 (= c______ left-to-right)))
 (let (($x883 (and $x882 $x881)))
 (let (($x913 (ite $x883 $x890 (ite $x880 $x891 (ite $x878 $x891 (ite $x875 $x899 (ite $x873 $x896 $x899)))))))
 (let (($x884 (= c______ left-to-center)))
 (let (($x885 (and $x884 $x881)))
 (ite $x885 $x899 $x913)))))))))))))))))))))))))))))))
(assert
 (let ((?x675 (right s_______)))
 (let (($x917 (= ?x675 empty)))
 (let ((?x861 (center s_______)))
 (let (($x948 (= ?x861 empty)))
 (let ((?x33 (stack H (stack D (stack E (stack A (stack B (stack G empty))))))))
 (let ((?x35 (stack C (stack F ?x33))))
 (let ((?x641 (left s_______)))
 (let (($x949 (= ?x641 ?x35)))
 (let (($x951 (not (and $x949 $x948 $x917))))
 (not $x951)))))))))))
(check-sat)
(exit)
