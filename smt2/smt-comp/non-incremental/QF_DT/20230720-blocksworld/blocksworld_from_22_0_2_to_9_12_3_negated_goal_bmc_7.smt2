(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V) (W) (X))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x37 (stack D empty)))
 (let ((?x36 (stack Q ?x37)))
 (let ((?x38 (stack E ?x36)))
 (let ((?x39 (stack K ?x38)))
 (let ((?x40 (stack P ?x39)))
 (let ((?x41 (stack W ?x40)))
 (let ((?x42 (stack M ?x41)))
 (let ((?x43 (stack V ?x42)))
 (let ((?x44 (stack I ?x43)))
 (let ((?x45 (stack X ?x44)))
 (let ((?x46 (stack T ?x45)))
 (let ((?x47 (stack A ?x46)))
 (let ((?x48 (stack R ?x47)))
 (let ((?x49 (stack S ?x48)))
 (let ((?x50 (stack H ?x49)))
 (let ((?x51 (stack C ?x50)))
 (let ((?x52 (stack J ?x51)))
 (let ((?x53 (stack O ?x52)))
 (let ((?x54 (stack N ?x53)))
 (let ((?x55 (stack L ?x54)))
 (let ((?x56 (stack U ?x55)))
 (let ((?x57 (stack G ?x56)))
 (let ((?x128 (left s_tmp_)))
 (= ?x128 ?x57)))))))))))))))))))))))))
(assert
 (let ((?x131 (center s_tmp__)))
 (= ?x131 empty)))
(assert
 (let ((?x58 (stack B empty)))
 (let ((?x59 (stack F ?x58)))
 (let ((?x134 (right s_tmp___)))
 (= ?x134 ?x59)))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x161 (left s_tmp__)))
 (= (left s_tmp___) ?x161)))
(assert
 (let ((?x131 (center s_tmp__)))
 (= (center s_tmp___) ?x131)))
(assert
 (let ((?x165 (center s_tmp_)))
 (= ?x165 (center s_tmp))))
(assert
 (let ((?x168 (right s_tmp_)))
 (= ?x168 (right s_tmp))))
(assert
 (let ((?x128 (left s_tmp_)))
 (let ((?x161 (left s_tmp__)))
 (= ?x161 ?x128))))
(assert
 (let ((?x168 (right s_tmp_)))
 (let ((?x172 (right s_tmp__)))
 (= ?x172 ?x168))))
(assert
 (= c__ c!1))
(assert
 (let ((?x105 (left s_)))
 (let ((?x291 (left s__)))
 (let (($x333 (= ?x291 ?x105)))
 (let ((?x108 (right s_)))
 (let (($x318 ((_ is stack ) ?x108)))
 (let (($x315 (= c_ right-to-left)))
 (let (($x295 (and $x315 $x318)))
 (let ((?x110 (center s_)))
 (let (($x296 ((_ is stack ) ?x110)))
 (let (($x298 (and (= c_ center-to-right) $x296)))
 (let (($x300 (and (= c_ center-to-left) $x296)))
 (let (($x342 (ite $x300 (= ?x291 (stack (top ?x110) ?x105)) (ite $x298 $x333 (ite $x295 (= ?x291 (stack (top ?x108) ?x105)) $x333)))))
 (let (($x320 (= ?x291 (rest ?x105))))
 (let (($x292 ((_ is stack ) ?x105)))
 (let (($x293 (= c_ left-to-right)))
 (let (($x294 (and $x293 $x292)))
 (let (($x307 (= c_ left-to-center)))
 (let (($x308 (and $x307 $x292)))
 (ite $x308 $x320 (ite $x294 $x320 $x342)))))))))))))))))))))
(assert
 (let ((?x108 (right s_)))
 (let ((?x305 (right s__)))
 (let (($x329 (= ?x305 ?x108)))
 (let (($x326 (= ?x305 (rest ?x108))))
 (let (($x318 ((_ is stack ) ?x108)))
 (let (($x313 (= c_ right-to-center)))
 (let (($x314 (and $x313 $x318)))
 (let (($x315 (= c_ right-to-left)))
 (let (($x295 (and $x315 $x318)))
 (let ((?x110 (center s_)))
 (let (($x296 ((_ is stack ) ?x110)))
 (let (($x298 (and (= c_ center-to-right) $x296)))
 (let (($x339 (ite $x298 (= ?x305 (stack (top ?x110) ?x108)) (ite $x295 $x326 (ite $x314 $x326 $x329)))))
 (let (($x300 (and (= c_ center-to-left) $x296)))
 (let ((?x105 (left s_)))
 (let (($x292 ((_ is stack ) ?x105)))
 (let (($x293 (= c_ left-to-right)))
 (let (($x294 (and $x293 $x292)))
 (let (($x307 (= c_ left-to-center)))
 (let (($x308 (and $x307 $x292)))
 (ite $x308 (= ?x305 (stack (top ?x105) ?x108)) (ite $x294 $x329 (ite $x300 $x329 $x339))))))))))))))))))))))))
(assert
 (let ((?x110 (center s_)))
 (let ((?x311 (center s__)))
 (let (($x331 (= ?x311 ?x110)))
 (let ((?x108 (right s_)))
 (let (($x318 ((_ is stack ) ?x108)))
 (let (($x313 (= c_ right-to-center)))
 (let (($x314 (and $x313 $x318)))
 (let (($x315 (= c_ right-to-left)))
 (let (($x295 (and $x315 $x318)))
 (let (($x323 (= ?x311 (rest ?x110))))
 (let (($x296 ((_ is stack ) ?x110)))
 (let (($x298 (and (= c_ center-to-right) $x296)))
 (let (($x338 (ite $x298 $x323 (ite $x295 $x331 (ite $x314 (= ?x311 (stack (top ?x108) ?x110)) $x331)))))
 (let (($x300 (and (= c_ center-to-left) $x296)))
 (let ((?x105 (left s_)))
 (let (($x292 ((_ is stack ) ?x105)))
 (let (($x293 (= c_ left-to-right)))
 (let (($x294 (and $x293 $x292)))
 (let (($x307 (= c_ left-to-center)))
 (let (($x308 (and $x307 $x292)))
 (ite $x308 $x331 (ite $x294 (= ?x311 (stack (top ?x105) ?x110)) (ite $x300 $x323 $x338))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x291 (left s__)))
 (let ((?x175 (left s___)))
 (let (($x445 (= ?x175 ?x291)))
 (let ((?x305 (right s__)))
 (let ((?x412 (top ?x305)))
 (let ((?x413 (stack ?x412 ?x291)))
 (let (($x439 (= ?x175 ?x413)))
 (let (($x415 ((_ is stack ) ?x305)))
 (let (($x418 (= c__ right-to-left)))
 (let (($x419 (and $x418 $x415)))
 (let ((?x311 (center s__)))
 (let (($x420 ((_ is stack ) ?x311)))
 (let (($x421 (= c__ center-to-right)))
 (let (($x422 (and $x421 $x420)))
 (let ((?x408 (top ?x311)))
 (let ((?x409 (stack ?x408 ?x291)))
 (let (($x436 (= ?x175 ?x409)))
 (let (($x423 (= c__ center-to-left)))
 (let (($x424 (and $x423 $x420)))
 (let ((?x177 (rest ?x291)))
 (let (($x432 (= ?x175 ?x177)))
 (let (($x425 ((_ is stack ) ?x291)))
 (let (($x426 (= c__ left-to-right)))
 (let (($x427 (and $x426 $x425)))
 (let (($x428 (= c__ left-to-center)))
 (let (($x429 (and $x428 $x425)))
 (ite $x429 $x432 (ite $x427 $x432 (ite $x424 $x436 (ite $x422 $x445 (ite $x419 $x439 $x445))))))))))))))))))))))))))))))))
(assert
 (let ((?x305 (right s__)))
 (let ((?x178 (right s___)))
 (let (($x441 (= ?x178 ?x305)))
 (let ((?x411 (rest ?x305)))
 (let (($x438 (= ?x178 ?x411)))
 (let (($x415 ((_ is stack ) ?x305)))
 (let (($x416 (= c__ right-to-center)))
 (let (($x417 (and $x416 $x415)))
 (let (($x418 (= c__ right-to-left)))
 (let (($x419 (and $x418 $x415)))
 (let ((?x311 (center s__)))
 (let ((?x408 (top ?x311)))
 (let ((?x410 (stack ?x408 ?x305)))
 (let (($x437 (= ?x178 ?x410)))
 (let (($x420 ((_ is stack ) ?x311)))
 (let (($x421 (= c__ center-to-right)))
 (let (($x422 (and $x421 $x420)))
 (let (($x423 (= c__ center-to-left)))
 (let (($x424 (and $x423 $x420)))
 (let ((?x291 (left s__)))
 (let (($x425 ((_ is stack ) ?x291)))
 (let (($x426 (= c__ left-to-right)))
 (let (($x427 (and $x426 $x425)))
 (let (($x458 (ite $x427 $x441 (ite $x424 $x441 (ite $x422 $x437 (ite $x419 $x438 (ite $x417 $x438 $x441)))))))
 (let ((?x285 (top ?x291)))
 (let ((?x404 (stack ?x285 ?x305)))
 (let (($x433 (= ?x178 ?x404)))
 (let (($x428 (= c__ left-to-center)))
 (let (($x429 (and $x428 $x425)))
 (ite $x429 $x433 $x458)))))))))))))))))))))))))))))))
(assert
 (let ((?x311 (center s__)))
 (let ((?x405 (center s___)))
 (let (($x443 (= ?x405 ?x311)))
 (let ((?x305 (right s__)))
 (let ((?x412 (top ?x305)))
 (let ((?x414 (stack ?x412 ?x311)))
 (let (($x440 (= ?x405 ?x414)))
 (let (($x415 ((_ is stack ) ?x305)))
 (let (($x416 (= c__ right-to-center)))
 (let (($x417 (and $x416 $x415)))
 (let (($x418 (= c__ right-to-left)))
 (let (($x419 (and $x418 $x415)))
 (let ((?x407 (rest ?x311)))
 (let (($x435 (= ?x405 ?x407)))
 (let (($x420 ((_ is stack ) ?x311)))
 (let (($x421 (= c__ center-to-right)))
 (let (($x422 (and $x421 $x420)))
 (let (($x423 (= c__ center-to-left)))
 (let (($x424 (and $x423 $x420)))
 (let ((?x291 (left s__)))
 (let ((?x285 (top ?x291)))
 (let ((?x406 (stack ?x285 ?x311)))
 (let (($x434 (= ?x405 ?x406)))
 (let (($x425 ((_ is stack ) ?x291)))
 (let (($x426 (= c__ left-to-right)))
 (let (($x427 (and $x426 $x425)))
 (let (($x457 (ite $x427 $x434 (ite $x424 $x435 (ite $x422 $x435 (ite $x419 $x443 (ite $x417 $x440 $x443)))))))
 (let (($x428 (= c__ left-to-center)))
 (let (($x429 (and $x428 $x425)))
 (ite $x429 $x443 $x457)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x175 (left s___)))
 (let ((?x349 (left s____)))
 (let (($x583 (= ?x349 ?x175)))
 (let ((?x178 (right s___)))
 (let ((?x550 (top ?x178)))
 (let ((?x551 (stack ?x550 ?x175)))
 (let (($x577 (= ?x349 ?x551)))
 (let (($x553 ((_ is stack ) ?x178)))
 (let (($x556 (= c___ right-to-left)))
 (let (($x557 (and $x556 $x553)))
 (let ((?x405 (center s___)))
 (let (($x558 ((_ is stack ) ?x405)))
 (let (($x559 (= c___ center-to-right)))
 (let (($x560 (and $x559 $x558)))
 (let ((?x546 (top ?x405)))
 (let ((?x547 (stack ?x546 ?x175)))
 (let (($x574 (= ?x349 ?x547)))
 (let (($x561 (= c___ center-to-left)))
 (let (($x562 (and $x561 $x558)))
 (let ((?x381 (rest ?x175)))
 (let (($x570 (= ?x349 ?x381)))
 (let (($x563 ((_ is stack ) ?x175)))
 (let (($x564 (= c___ left-to-right)))
 (let (($x565 (and $x564 $x563)))
 (let (($x566 (= c___ left-to-center)))
 (let (($x567 (and $x566 $x563)))
 (ite $x567 $x570 (ite $x565 $x570 (ite $x562 $x574 (ite $x560 $x583 (ite $x557 $x577 $x583))))))))))))))))))))))))))))))))
(assert
 (let ((?x178 (right s___)))
 (let ((?x382 (right s____)))
 (let (($x579 (= ?x382 ?x178)))
 (let ((?x549 (rest ?x178)))
 (let (($x576 (= ?x382 ?x549)))
 (let (($x553 ((_ is stack ) ?x178)))
 (let (($x554 (= c___ right-to-center)))
 (let (($x555 (and $x554 $x553)))
 (let (($x556 (= c___ right-to-left)))
 (let (($x557 (and $x556 $x553)))
 (let ((?x405 (center s___)))
 (let ((?x546 (top ?x405)))
 (let ((?x548 (stack ?x546 ?x178)))
 (let (($x575 (= ?x382 ?x548)))
 (let (($x558 ((_ is stack ) ?x405)))
 (let (($x559 (= c___ center-to-right)))
 (let (($x560 (and $x559 $x558)))
 (let (($x561 (= c___ center-to-left)))
 (let (($x562 (and $x561 $x558)))
 (let ((?x175 (left s___)))
 (let (($x563 ((_ is stack ) ?x175)))
 (let (($x564 (= c___ left-to-right)))
 (let (($x565 (and $x564 $x563)))
 (let (($x596 (ite $x565 $x579 (ite $x562 $x579 (ite $x560 $x575 (ite $x557 $x576 (ite $x555 $x576 $x579)))))))
 (let ((?x403 (top ?x175)))
 (let ((?x542 (stack ?x403 ?x178)))
 (let (($x571 (= ?x382 ?x542)))
 (let (($x566 (= c___ left-to-center)))
 (let (($x567 (and $x566 $x563)))
 (ite $x567 $x571 $x596)))))))))))))))))))))))))))))))
(assert
 (let ((?x405 (center s___)))
 (let ((?x543 (center s____)))
 (let (($x581 (= ?x543 ?x405)))
 (let ((?x178 (right s___)))
 (let ((?x550 (top ?x178)))
 (let ((?x552 (stack ?x550 ?x405)))
 (let (($x578 (= ?x543 ?x552)))
 (let (($x553 ((_ is stack ) ?x178)))
 (let (($x554 (= c___ right-to-center)))
 (let (($x555 (and $x554 $x553)))
 (let (($x556 (= c___ right-to-left)))
 (let (($x557 (and $x556 $x553)))
 (let ((?x545 (rest ?x405)))
 (let (($x573 (= ?x543 ?x545)))
 (let (($x558 ((_ is stack ) ?x405)))
 (let (($x559 (= c___ center-to-right)))
 (let (($x560 (and $x559 $x558)))
 (let (($x561 (= c___ center-to-left)))
 (let (($x562 (and $x561 $x558)))
 (let ((?x175 (left s___)))
 (let ((?x403 (top ?x175)))
 (let ((?x544 (stack ?x403 ?x405)))
 (let (($x572 (= ?x543 ?x544)))
 (let (($x563 ((_ is stack ) ?x175)))
 (let (($x564 (= c___ left-to-right)))
 (let (($x565 (and $x564 $x563)))
 (let (($x595 (ite $x565 $x572 (ite $x562 $x573 (ite $x560 $x573 (ite $x557 $x581 (ite $x555 $x578 $x581)))))))
 (let (($x566 (= c___ left-to-center)))
 (let (($x567 (and $x566 $x563)))
 (ite $x567 $x581 $x595)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x349 (left s____)))
 (let ((?x461 (left s_____)))
 (let (($x721 (= ?x461 ?x349)))
 (let ((?x382 (right s____)))
 (let ((?x688 (top ?x382)))
 (let ((?x689 (stack ?x688 ?x349)))
 (let (($x715 (= ?x461 ?x689)))
 (let (($x691 ((_ is stack ) ?x382)))
 (let (($x694 (= c____ right-to-left)))
 (let (($x695 (and $x694 $x691)))
 (let ((?x543 (center s____)))
 (let (($x696 ((_ is stack ) ?x543)))
 (let (($x697 (= c____ center-to-right)))
 (let (($x698 (and $x697 $x696)))
 (let ((?x684 (top ?x543)))
 (let ((?x685 (stack ?x684 ?x349)))
 (let (($x712 (= ?x461 ?x685)))
 (let (($x699 (= c____ center-to-left)))
 (let (($x700 (and $x699 $x696)))
 (let ((?x494 (rest ?x349)))
 (let (($x708 (= ?x461 ?x494)))
 (let (($x701 ((_ is stack ) ?x349)))
 (let (($x702 (= c____ left-to-right)))
 (let (($x703 (and $x702 $x701)))
 (let (($x704 (= c____ left-to-center)))
 (let (($x705 (and $x704 $x701)))
 (ite $x705 $x708 (ite $x703 $x708 (ite $x700 $x712 (ite $x698 $x721 (ite $x695 $x715 $x721))))))))))))))))))))))))))))))))
(assert
 (let ((?x382 (right s____)))
 (let ((?x495 (right s_____)))
 (let (($x717 (= ?x495 ?x382)))
 (let ((?x687 (rest ?x382)))
 (let (($x714 (= ?x495 ?x687)))
 (let (($x691 ((_ is stack ) ?x382)))
 (let (($x692 (= c____ right-to-center)))
 (let (($x693 (and $x692 $x691)))
 (let (($x694 (= c____ right-to-left)))
 (let (($x695 (and $x694 $x691)))
 (let ((?x543 (center s____)))
 (let ((?x684 (top ?x543)))
 (let ((?x686 (stack ?x684 ?x382)))
 (let (($x713 (= ?x495 ?x686)))
 (let (($x696 ((_ is stack ) ?x543)))
 (let (($x697 (= c____ center-to-right)))
 (let (($x698 (and $x697 $x696)))
 (let (($x699 (= c____ center-to-left)))
 (let (($x700 (and $x699 $x696)))
 (let ((?x349 (left s____)))
 (let (($x701 ((_ is stack ) ?x349)))
 (let (($x702 (= c____ left-to-right)))
 (let (($x703 (and $x702 $x701)))
 (let (($x734 (ite $x703 $x717 (ite $x700 $x717 (ite $x698 $x713 (ite $x695 $x714 (ite $x693 $x714 $x717)))))))
 (let ((?x541 (top ?x349)))
 (let ((?x680 (stack ?x541 ?x382)))
 (let (($x709 (= ?x495 ?x680)))
 (let (($x704 (= c____ left-to-center)))
 (let (($x705 (and $x704 $x701)))
 (ite $x705 $x709 $x734)))))))))))))))))))))))))))))))
(assert
 (let ((?x543 (center s____)))
 (let ((?x681 (center s_____)))
 (let (($x719 (= ?x681 ?x543)))
 (let ((?x382 (right s____)))
 (let ((?x688 (top ?x382)))
 (let ((?x690 (stack ?x688 ?x543)))
 (let (($x716 (= ?x681 ?x690)))
 (let (($x691 ((_ is stack ) ?x382)))
 (let (($x692 (= c____ right-to-center)))
 (let (($x693 (and $x692 $x691)))
 (let (($x694 (= c____ right-to-left)))
 (let (($x695 (and $x694 $x691)))
 (let ((?x683 (rest ?x543)))
 (let (($x711 (= ?x681 ?x683)))
 (let (($x696 ((_ is stack ) ?x543)))
 (let (($x697 (= c____ center-to-right)))
 (let (($x698 (and $x697 $x696)))
 (let (($x699 (= c____ center-to-left)))
 (let (($x700 (and $x699 $x696)))
 (let ((?x349 (left s____)))
 (let ((?x541 (top ?x349)))
 (let ((?x682 (stack ?x541 ?x543)))
 (let (($x710 (= ?x681 ?x682)))
 (let (($x701 ((_ is stack ) ?x349)))
 (let (($x702 (= c____ left-to-right)))
 (let (($x703 (and $x702 $x701)))
 (let (($x733 (ite $x703 $x710 (ite $x700 $x711 (ite $x698 $x711 (ite $x695 $x719 (ite $x693 $x716 $x719)))))))
 (let (($x704 (= c____ left-to-center)))
 (let (($x705 (and $x704 $x701)))
 (ite $x705 $x719 $x733)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x461 (left s_____)))
 (let ((?x599 (left s______)))
 (let (($x859 (= ?x599 ?x461)))
 (let ((?x495 (right s_____)))
 (let ((?x826 (top ?x495)))
 (let ((?x827 (stack ?x826 ?x461)))
 (let (($x853 (= ?x599 ?x827)))
 (let (($x829 ((_ is stack ) ?x495)))
 (let (($x832 (= c_____ right-to-left)))
 (let (($x833 (and $x832 $x829)))
 (let ((?x681 (center s_____)))
 (let (($x834 ((_ is stack ) ?x681)))
 (let (($x835 (= c_____ center-to-right)))
 (let (($x836 (and $x835 $x834)))
 (let ((?x822 (top ?x681)))
 (let ((?x823 (stack ?x822 ?x461)))
 (let (($x850 (= ?x599 ?x823)))
 (let (($x837 (= c_____ center-to-left)))
 (let (($x838 (and $x837 $x834)))
 (let ((?x632 (rest ?x461)))
 (let (($x846 (= ?x599 ?x632)))
 (let (($x839 ((_ is stack ) ?x461)))
 (let (($x840 (= c_____ left-to-right)))
 (let (($x841 (and $x840 $x839)))
 (let (($x842 (= c_____ left-to-center)))
 (let (($x843 (and $x842 $x839)))
 (ite $x843 $x846 (ite $x841 $x846 (ite $x838 $x850 (ite $x836 $x859 (ite $x833 $x853 $x859))))))))))))))))))))))))))))))))
(assert
 (let ((?x495 (right s_____)))
 (let ((?x633 (right s______)))
 (let (($x855 (= ?x633 ?x495)))
 (let ((?x825 (rest ?x495)))
 (let (($x852 (= ?x633 ?x825)))
 (let (($x829 ((_ is stack ) ?x495)))
 (let (($x830 (= c_____ right-to-center)))
 (let (($x831 (and $x830 $x829)))
 (let (($x832 (= c_____ right-to-left)))
 (let (($x833 (and $x832 $x829)))
 (let ((?x681 (center s_____)))
 (let ((?x822 (top ?x681)))
 (let ((?x824 (stack ?x822 ?x495)))
 (let (($x851 (= ?x633 ?x824)))
 (let (($x834 ((_ is stack ) ?x681)))
 (let (($x835 (= c_____ center-to-right)))
 (let (($x836 (and $x835 $x834)))
 (let (($x837 (= c_____ center-to-left)))
 (let (($x838 (and $x837 $x834)))
 (let ((?x461 (left s_____)))
 (let (($x839 ((_ is stack ) ?x461)))
 (let (($x840 (= c_____ left-to-right)))
 (let (($x841 (and $x840 $x839)))
 (let (($x872 (ite $x841 $x855 (ite $x838 $x855 (ite $x836 $x851 (ite $x833 $x852 (ite $x831 $x852 $x855)))))))
 (let ((?x679 (top ?x461)))
 (let ((?x818 (stack ?x679 ?x495)))
 (let (($x847 (= ?x633 ?x818)))
 (let (($x842 (= c_____ left-to-center)))
 (let (($x843 (and $x842 $x839)))
 (ite $x843 $x847 $x872)))))))))))))))))))))))))))))))
(assert
 (let ((?x681 (center s_____)))
 (let ((?x819 (center s______)))
 (let (($x857 (= ?x819 ?x681)))
 (let ((?x495 (right s_____)))
 (let ((?x826 (top ?x495)))
 (let ((?x828 (stack ?x826 ?x681)))
 (let (($x854 (= ?x819 ?x828)))
 (let (($x829 ((_ is stack ) ?x495)))
 (let (($x830 (= c_____ right-to-center)))
 (let (($x831 (and $x830 $x829)))
 (let (($x832 (= c_____ right-to-left)))
 (let (($x833 (and $x832 $x829)))
 (let ((?x821 (rest ?x681)))
 (let (($x849 (= ?x819 ?x821)))
 (let (($x834 ((_ is stack ) ?x681)))
 (let (($x835 (= c_____ center-to-right)))
 (let (($x836 (and $x835 $x834)))
 (let (($x837 (= c_____ center-to-left)))
 (let (($x838 (and $x837 $x834)))
 (let ((?x461 (left s_____)))
 (let ((?x679 (top ?x461)))
 (let ((?x820 (stack ?x679 ?x681)))
 (let (($x848 (= ?x819 ?x820)))
 (let (($x839 ((_ is stack ) ?x461)))
 (let (($x840 (= c_____ left-to-right)))
 (let (($x841 (and $x840 $x839)))
 (let (($x871 (ite $x841 $x848 (ite $x838 $x849 (ite $x836 $x849 (ite $x833 $x857 (ite $x831 $x854 $x857)))))))
 (let (($x842 (= c_____ left-to-center)))
 (let (($x843 (and $x842 $x839)))
 (ite $x843 $x857 $x871)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x599 (left s______)))
 (let ((?x737 (left s_______)))
 (let (($x997 (= ?x737 ?x599)))
 (let ((?x633 (right s______)))
 (let ((?x964 (top ?x633)))
 (let ((?x965 (stack ?x964 ?x599)))
 (let (($x991 (= ?x737 ?x965)))
 (let (($x967 ((_ is stack ) ?x633)))
 (let (($x970 (= c______ right-to-left)))
 (let (($x971 (and $x970 $x967)))
 (let ((?x819 (center s______)))
 (let (($x972 ((_ is stack ) ?x819)))
 (let (($x973 (= c______ center-to-right)))
 (let (($x974 (and $x973 $x972)))
 (let ((?x960 (top ?x819)))
 (let ((?x961 (stack ?x960 ?x599)))
 (let (($x988 (= ?x737 ?x961)))
 (let (($x975 (= c______ center-to-left)))
 (let (($x976 (and $x975 $x972)))
 (let ((?x770 (rest ?x599)))
 (let (($x984 (= ?x737 ?x770)))
 (let (($x977 ((_ is stack ) ?x599)))
 (let (($x978 (= c______ left-to-right)))
 (let (($x979 (and $x978 $x977)))
 (let (($x980 (= c______ left-to-center)))
 (let (($x981 (and $x980 $x977)))
 (ite $x981 $x984 (ite $x979 $x984 (ite $x976 $x988 (ite $x974 $x997 (ite $x971 $x991 $x997))))))))))))))))))))))))))))))))
(assert
 (let ((?x633 (right s______)))
 (let ((?x771 (right s_______)))
 (let (($x993 (= ?x771 ?x633)))
 (let ((?x963 (rest ?x633)))
 (let (($x990 (= ?x771 ?x963)))
 (let (($x967 ((_ is stack ) ?x633)))
 (let (($x968 (= c______ right-to-center)))
 (let (($x969 (and $x968 $x967)))
 (let (($x970 (= c______ right-to-left)))
 (let (($x971 (and $x970 $x967)))
 (let ((?x819 (center s______)))
 (let ((?x960 (top ?x819)))
 (let ((?x962 (stack ?x960 ?x633)))
 (let (($x989 (= ?x771 ?x962)))
 (let (($x972 ((_ is stack ) ?x819)))
 (let (($x973 (= c______ center-to-right)))
 (let (($x974 (and $x973 $x972)))
 (let (($x975 (= c______ center-to-left)))
 (let (($x976 (and $x975 $x972)))
 (let ((?x599 (left s______)))
 (let (($x977 ((_ is stack ) ?x599)))
 (let (($x978 (= c______ left-to-right)))
 (let (($x979 (and $x978 $x977)))
 (let (($x1010 (ite $x979 $x993 (ite $x976 $x993 (ite $x974 $x989 (ite $x971 $x990 (ite $x969 $x990 $x993)))))))
 (let ((?x817 (top ?x599)))
 (let ((?x956 (stack ?x817 ?x633)))
 (let (($x985 (= ?x771 ?x956)))
 (let (($x980 (= c______ left-to-center)))
 (let (($x981 (and $x980 $x977)))
 (ite $x981 $x985 $x1010)))))))))))))))))))))))))))))))
(assert
 (let ((?x819 (center s______)))
 (let ((?x957 (center s_______)))
 (let (($x995 (= ?x957 ?x819)))
 (let ((?x633 (right s______)))
 (let ((?x964 (top ?x633)))
 (let ((?x966 (stack ?x964 ?x819)))
 (let (($x992 (= ?x957 ?x966)))
 (let (($x967 ((_ is stack ) ?x633)))
 (let (($x968 (= c______ right-to-center)))
 (let (($x969 (and $x968 $x967)))
 (let (($x970 (= c______ right-to-left)))
 (let (($x971 (and $x970 $x967)))
 (let ((?x959 (rest ?x819)))
 (let (($x987 (= ?x957 ?x959)))
 (let (($x972 ((_ is stack ) ?x819)))
 (let (($x973 (= c______ center-to-right)))
 (let (($x974 (and $x973 $x972)))
 (let (($x975 (= c______ center-to-left)))
 (let (($x976 (and $x975 $x972)))
 (let ((?x599 (left s______)))
 (let ((?x817 (top ?x599)))
 (let ((?x958 (stack ?x817 ?x819)))
 (let (($x986 (= ?x957 ?x958)))
 (let (($x977 ((_ is stack ) ?x599)))
 (let (($x978 (= c______ left-to-right)))
 (let (($x979 (and $x978 $x977)))
 (let (($x1009 (ite $x979 $x986 (ite $x976 $x987 (ite $x974 $x987 (ite $x971 $x995 (ite $x969 $x992 $x995)))))))
 (let (($x980 (= c______ left-to-center)))
 (let (($x981 (and $x980 $x977)))
 (ite $x981 $x995 $x1009)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x737 (left s_______)))
 (let ((?x875 (left s________)))
 (let (($x1135 (= ?x875 ?x737)))
 (let ((?x771 (right s_______)))
 (let ((?x1102 (top ?x771)))
 (let ((?x1103 (stack ?x1102 ?x737)))
 (let (($x1129 (= ?x875 ?x1103)))
 (let (($x1105 ((_ is stack ) ?x771)))
 (let (($x1108 (= c_______ right-to-left)))
 (let (($x1109 (and $x1108 $x1105)))
 (let ((?x957 (center s_______)))
 (let (($x1110 ((_ is stack ) ?x957)))
 (let (($x1111 (= c_______ center-to-right)))
 (let (($x1112 (and $x1111 $x1110)))
 (let ((?x1098 (top ?x957)))
 (let ((?x1099 (stack ?x1098 ?x737)))
 (let (($x1126 (= ?x875 ?x1099)))
 (let (($x1113 (= c_______ center-to-left)))
 (let (($x1114 (and $x1113 $x1110)))
 (let ((?x908 (rest ?x737)))
 (let (($x1122 (= ?x875 ?x908)))
 (let (($x1115 ((_ is stack ) ?x737)))
 (let (($x1116 (= c_______ left-to-right)))
 (let (($x1117 (and $x1116 $x1115)))
 (let (($x1118 (= c_______ left-to-center)))
 (let (($x1119 (and $x1118 $x1115)))
 (ite $x1119 $x1122 (ite $x1117 $x1122 (ite $x1114 $x1126 (ite $x1112 $x1135 (ite $x1109 $x1129 $x1135))))))))))))))))))))))))))))))))
(assert
 (let ((?x771 (right s_______)))
 (let ((?x909 (right s________)))
 (let (($x1131 (= ?x909 ?x771)))
 (let ((?x1101 (rest ?x771)))
 (let (($x1128 (= ?x909 ?x1101)))
 (let (($x1105 ((_ is stack ) ?x771)))
 (let (($x1106 (= c_______ right-to-center)))
 (let (($x1107 (and $x1106 $x1105)))
 (let (($x1108 (= c_______ right-to-left)))
 (let (($x1109 (and $x1108 $x1105)))
 (let ((?x957 (center s_______)))
 (let ((?x1098 (top ?x957)))
 (let ((?x1100 (stack ?x1098 ?x771)))
 (let (($x1127 (= ?x909 ?x1100)))
 (let (($x1110 ((_ is stack ) ?x957)))
 (let (($x1111 (= c_______ center-to-right)))
 (let (($x1112 (and $x1111 $x1110)))
 (let (($x1113 (= c_______ center-to-left)))
 (let (($x1114 (and $x1113 $x1110)))
 (let ((?x737 (left s_______)))
 (let (($x1115 ((_ is stack ) ?x737)))
 (let (($x1116 (= c_______ left-to-right)))
 (let (($x1117 (and $x1116 $x1115)))
 (let (($x1148 (ite $x1117 $x1131 (ite $x1114 $x1131 (ite $x1112 $x1127 (ite $x1109 $x1128 (ite $x1107 $x1128 $x1131)))))))
 (let ((?x955 (top ?x737)))
 (let ((?x1094 (stack ?x955 ?x771)))
 (let (($x1123 (= ?x909 ?x1094)))
 (let (($x1118 (= c_______ left-to-center)))
 (let (($x1119 (and $x1118 $x1115)))
 (ite $x1119 $x1123 $x1148)))))))))))))))))))))))))))))))
(assert
 (let ((?x957 (center s_______)))
 (let ((?x1095 (center s________)))
 (let (($x1133 (= ?x1095 ?x957)))
 (let ((?x771 (right s_______)))
 (let ((?x1102 (top ?x771)))
 (let ((?x1104 (stack ?x1102 ?x957)))
 (let (($x1130 (= ?x1095 ?x1104)))
 (let (($x1105 ((_ is stack ) ?x771)))
 (let (($x1106 (= c_______ right-to-center)))
 (let (($x1107 (and $x1106 $x1105)))
 (let (($x1108 (= c_______ right-to-left)))
 (let (($x1109 (and $x1108 $x1105)))
 (let ((?x1097 (rest ?x957)))
 (let (($x1125 (= ?x1095 ?x1097)))
 (let (($x1110 ((_ is stack ) ?x957)))
 (let (($x1111 (= c_______ center-to-right)))
 (let (($x1112 (and $x1111 $x1110)))
 (let (($x1113 (= c_______ center-to-left)))
 (let (($x1114 (and $x1113 $x1110)))
 (let ((?x737 (left s_______)))
 (let ((?x955 (top ?x737)))
 (let ((?x1096 (stack ?x955 ?x957)))
 (let (($x1124 (= ?x1095 ?x1096)))
 (let (($x1115 ((_ is stack ) ?x737)))
 (let (($x1116 (= c_______ left-to-right)))
 (let (($x1117 (and $x1116 $x1115)))
 (let (($x1147 (ite $x1117 $x1124 (ite $x1114 $x1125 (ite $x1112 $x1125 (ite $x1109 $x1133 (ite $x1107 $x1130 $x1133)))))))
 (let (($x1118 (= c_______ left-to-center)))
 (let (($x1119 (and $x1118 $x1115)))
 (ite $x1119 $x1133 $x1147)))))))))))))))))))))))))))))))
(assert
 (let ((?x58 (stack B empty)))
 (let ((?x59 (stack F ?x58)))
 (let ((?x81 (stack V ?x59)))
 (let ((?x909 (right s________)))
 (let (($x1151 (= ?x909 ?x81)))
 (let ((?x74 (stack Q (stack I (stack E (stack K (stack S (stack P empty))))))))
 (let ((?x80 (stack X (stack R (stack O (stack M (stack G (stack H ?x74))))))))
 (let ((?x1095 (center s________)))
 (let (($x1182 (= ?x1095 ?x80)))
 (let ((?x65 (stack W (stack A (stack L (stack N (stack J (stack U empty))))))))
 (let ((?x68 (stack D (stack T (stack C ?x65)))))
 (let ((?x875 (left s________)))
 (let (($x1183 (= ?x875 ?x68)))
 (let (($x1185 (not (and $x1183 $x1182 $x1151))))
 (not $x1185))))))))))))))))
(check-sat)
(exit)
