(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x25 (stack G empty)))
 (let ((?x97 (left s_tmp_)))
 (= ?x97 ?x25))))
(assert
 (let ((?x26 (stack K empty)))
 (let ((?x27 (stack I ?x26)))
 (let ((?x28 (stack B ?x27)))
 (let ((?x29 (stack L ?x28)))
 (let ((?x30 (stack E ?x29)))
 (let ((?x31 (stack H ?x30)))
 (let ((?x32 (stack A ?x31)))
 (let ((?x100 (center s_tmp__)))
 (= ?x100 ?x32))))))))))
(assert
 (let ((?x33 (stack C empty)))
 (let ((?x34 (stack D ?x33)))
 (let ((?x35 (stack F ?x34)))
 (let ((?x36 (stack J ?x35)))
 (let ((?x37 (stack M ?x36)))
 (let ((?x103 (right s_tmp___)))
 (= ?x103 ?x37))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x130 (left s_tmp__)))
 (= (left s_tmp___) ?x130)))
(assert
 (let ((?x100 (center s_tmp__)))
 (= (center s_tmp___) ?x100)))
(assert
 (let ((?x134 (center s_tmp_)))
 (= ?x134 (center s_tmp))))
(assert
 (let ((?x137 (right s_tmp_)))
 (= ?x137 (right s_tmp))))
(assert
 (let ((?x97 (left s_tmp_)))
 (let ((?x130 (left s_tmp__)))
 (= ?x130 ?x97))))
(assert
 (let ((?x137 (right s_tmp_)))
 (let ((?x141 (right s_tmp__)))
 (= ?x141 ?x137))))
(assert
 (= c__ c!1))
(assert
 (let ((?x74 (left s_)))
 (let ((?x224 (left s__)))
 (let (($x269 (= ?x224 ?x74)))
 (let ((?x77 (right s_)))
 (let (($x233 ((_ is stack ) ?x77)))
 (let (($x245 (= c_ right-to-left)))
 (let (($x234 (and $x245 $x233)))
 (let ((?x79 (center s_)))
 (let (($x235 ((_ is stack ) ?x79)))
 (let (($x236 (= c_ center-to-right)))
 (let (($x246 (and $x236 $x235)))
 (let (($x247 (= c_ center-to-left)))
 (let (($x248 (and $x247 $x235)))
 (let (($x278 (ite $x248 (= ?x224 (stack (top ?x79) ?x74)) (ite $x246 $x269 (ite $x234 (= ?x224 (stack (top ?x77) ?x74)) $x269)))))
 (let (($x256 (= ?x224 (rest ?x74))))
 (let (($x249 ((_ is stack ) ?x74)))
 (let (($x250 (= c_ left-to-right)))
 (let (($x251 (and $x250 $x249)))
 (let (($x252 (= c_ left-to-center)))
 (let (($x253 (and $x252 $x249)))
 (ite $x253 $x256 (ite $x251 $x256 $x278)))))))))))))))))))))))
(assert
 (let ((?x77 (right s_)))
 (let ((?x229 (right s__)))
 (let (($x265 (= ?x229 ?x77)))
 (let (($x262 (= ?x229 (rest ?x77))))
 (let (($x233 ((_ is stack ) ?x77)))
 (let (($x243 (= c_ right-to-center)))
 (let (($x244 (and $x243 $x233)))
 (let (($x245 (= c_ right-to-left)))
 (let (($x234 (and $x245 $x233)))
 (let ((?x79 (center s_)))
 (let (($x235 ((_ is stack ) ?x79)))
 (let (($x236 (= c_ center-to-right)))
 (let (($x246 (and $x236 $x235)))
 (let (($x275 (ite $x246 (= ?x229 (stack (top ?x79) ?x77)) (ite $x234 $x262 (ite $x244 $x262 $x265)))))
 (let (($x247 (= c_ center-to-left)))
 (let (($x248 (and $x247 $x235)))
 (let ((?x74 (left s_)))
 (let (($x249 ((_ is stack ) ?x74)))
 (let (($x250 (= c_ left-to-right)))
 (let (($x251 (and $x250 $x249)))
 (let (($x252 (= c_ left-to-center)))
 (let (($x253 (and $x252 $x249)))
 (ite $x253 (= ?x229 (stack (top ?x74) ?x77)) (ite $x251 $x265 (ite $x248 $x265 $x275))))))))))))))))))))))))))
(assert
 (let ((?x79 (center s_)))
 (let ((?x226 (center s__)))
 (let (($x267 (= ?x226 ?x79)))
 (let ((?x77 (right s_)))
 (let (($x233 ((_ is stack ) ?x77)))
 (let (($x243 (= c_ right-to-center)))
 (let (($x244 (and $x243 $x233)))
 (let (($x245 (= c_ right-to-left)))
 (let (($x234 (and $x245 $x233)))
 (let (($x259 (= ?x226 (rest ?x79))))
 (let (($x235 ((_ is stack ) ?x79)))
 (let (($x236 (= c_ center-to-right)))
 (let (($x246 (and $x236 $x235)))
 (let (($x274 (ite $x246 $x259 (ite $x234 $x267 (ite $x244 (= ?x226 (stack (top ?x77) ?x79)) $x267)))))
 (let (($x247 (= c_ center-to-left)))
 (let (($x248 (and $x247 $x235)))
 (let ((?x74 (left s_)))
 (let (($x249 ((_ is stack ) ?x74)))
 (let (($x250 (= c_ left-to-right)))
 (let (($x251 (and $x250 $x249)))
 (let (($x252 (= c_ left-to-center)))
 (let (($x253 (and $x252 $x249)))
 (ite $x253 $x267 (ite $x251 (= ?x226 (stack (top ?x74) ?x79)) (ite $x248 $x259 $x274))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x224 (left s__)))
 (let ((?x144 (left s___)))
 (let (($x398 (= ?x144 ?x224)))
 (let ((?x229 (right s__)))
 (let ((?x365 (top ?x229)))
 (let ((?x366 (stack ?x365 ?x224)))
 (let (($x392 (= ?x144 ?x366)))
 (let (($x368 ((_ is stack ) ?x229)))
 (let (($x371 (= c__ right-to-left)))
 (let (($x372 (and $x371 $x368)))
 (let ((?x226 (center s__)))
 (let (($x373 ((_ is stack ) ?x226)))
 (let (($x374 (= c__ center-to-right)))
 (let (($x375 (and $x374 $x373)))
 (let ((?x361 (top ?x226)))
 (let ((?x362 (stack ?x361 ?x224)))
 (let (($x389 (= ?x144 ?x362)))
 (let (($x376 (= c__ center-to-left)))
 (let (($x377 (and $x376 $x373)))
 (let ((?x146 (rest ?x224)))
 (let (($x385 (= ?x144 ?x146)))
 (let (($x378 ((_ is stack ) ?x224)))
 (let (($x379 (= c__ left-to-right)))
 (let (($x380 (and $x379 $x378)))
 (let (($x381 (= c__ left-to-center)))
 (let (($x382 (and $x381 $x378)))
 (ite $x382 $x385 (ite $x380 $x385 (ite $x377 $x389 (ite $x375 $x398 (ite $x372 $x392 $x398))))))))))))))))))))))))))))))))
(assert
 (let ((?x229 (right s__)))
 (let ((?x147 (right s___)))
 (let (($x394 (= ?x147 ?x229)))
 (let ((?x364 (rest ?x229)))
 (let (($x391 (= ?x147 ?x364)))
 (let (($x368 ((_ is stack ) ?x229)))
 (let (($x369 (= c__ right-to-center)))
 (let (($x370 (and $x369 $x368)))
 (let (($x371 (= c__ right-to-left)))
 (let (($x372 (and $x371 $x368)))
 (let ((?x226 (center s__)))
 (let ((?x361 (top ?x226)))
 (let ((?x363 (stack ?x361 ?x229)))
 (let (($x390 (= ?x147 ?x363)))
 (let (($x373 ((_ is stack ) ?x226)))
 (let (($x374 (= c__ center-to-right)))
 (let (($x375 (and $x374 $x373)))
 (let (($x376 (= c__ center-to-left)))
 (let (($x377 (and $x376 $x373)))
 (let ((?x224 (left s__)))
 (let (($x378 ((_ is stack ) ?x224)))
 (let (($x379 (= c__ left-to-right)))
 (let (($x380 (and $x379 $x378)))
 (let (($x411 (ite $x380 $x394 (ite $x377 $x394 (ite $x375 $x390 (ite $x372 $x391 (ite $x370 $x391 $x394)))))))
 (let ((?x221 (top ?x224)))
 (let ((?x357 (stack ?x221 ?x229)))
 (let (($x386 (= ?x147 ?x357)))
 (let (($x381 (= c__ left-to-center)))
 (let (($x382 (and $x381 $x378)))
 (ite $x382 $x386 $x411)))))))))))))))))))))))))))))))
(assert
 (let ((?x226 (center s__)))
 (let ((?x358 (center s___)))
 (let (($x396 (= ?x358 ?x226)))
 (let ((?x229 (right s__)))
 (let ((?x365 (top ?x229)))
 (let ((?x367 (stack ?x365 ?x226)))
 (let (($x393 (= ?x358 ?x367)))
 (let (($x368 ((_ is stack ) ?x229)))
 (let (($x369 (= c__ right-to-center)))
 (let (($x370 (and $x369 $x368)))
 (let (($x371 (= c__ right-to-left)))
 (let (($x372 (and $x371 $x368)))
 (let ((?x360 (rest ?x226)))
 (let (($x388 (= ?x358 ?x360)))
 (let (($x373 ((_ is stack ) ?x226)))
 (let (($x374 (= c__ center-to-right)))
 (let (($x375 (and $x374 $x373)))
 (let (($x376 (= c__ center-to-left)))
 (let (($x377 (and $x376 $x373)))
 (let ((?x224 (left s__)))
 (let ((?x221 (top ?x224)))
 (let ((?x359 (stack ?x221 ?x226)))
 (let (($x387 (= ?x358 ?x359)))
 (let (($x378 ((_ is stack ) ?x224)))
 (let (($x379 (= c__ left-to-right)))
 (let (($x380 (and $x379 $x378)))
 (let (($x410 (ite $x380 $x387 (ite $x377 $x388 (ite $x375 $x388 (ite $x372 $x396 (ite $x370 $x393 $x396)))))))
 (let (($x381 (= c__ left-to-center)))
 (let (($x382 (and $x381 $x378)))
 (ite $x382 $x396 $x410)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x144 (left s___)))
 (let ((?x285 (left s____)))
 (let (($x536 (= ?x285 ?x144)))
 (let ((?x147 (right s___)))
 (let ((?x503 (top ?x147)))
 (let ((?x504 (stack ?x503 ?x144)))
 (let (($x530 (= ?x285 ?x504)))
 (let (($x506 ((_ is stack ) ?x147)))
 (let (($x509 (= c___ right-to-left)))
 (let (($x510 (and $x509 $x506)))
 (let ((?x358 (center s___)))
 (let (($x511 ((_ is stack ) ?x358)))
 (let (($x512 (= c___ center-to-right)))
 (let (($x513 (and $x512 $x511)))
 (let ((?x499 (top ?x358)))
 (let ((?x500 (stack ?x499 ?x144)))
 (let (($x527 (= ?x285 ?x500)))
 (let (($x514 (= c___ center-to-left)))
 (let (($x515 (and $x514 $x511)))
 (let ((?x329 (rest ?x144)))
 (let (($x523 (= ?x285 ?x329)))
 (let (($x516 ((_ is stack ) ?x144)))
 (let (($x517 (= c___ left-to-right)))
 (let (($x518 (and $x517 $x516)))
 (let (($x519 (= c___ left-to-center)))
 (let (($x520 (and $x519 $x516)))
 (ite $x520 $x523 (ite $x518 $x523 (ite $x515 $x527 (ite $x513 $x536 (ite $x510 $x530 $x536))))))))))))))))))))))))))))))))
(assert
 (let ((?x147 (right s___)))
 (let ((?x330 (right s____)))
 (let (($x532 (= ?x330 ?x147)))
 (let ((?x502 (rest ?x147)))
 (let (($x529 (= ?x330 ?x502)))
 (let (($x506 ((_ is stack ) ?x147)))
 (let (($x507 (= c___ right-to-center)))
 (let (($x508 (and $x507 $x506)))
 (let (($x509 (= c___ right-to-left)))
 (let (($x510 (and $x509 $x506)))
 (let ((?x358 (center s___)))
 (let ((?x499 (top ?x358)))
 (let ((?x501 (stack ?x499 ?x147)))
 (let (($x528 (= ?x330 ?x501)))
 (let (($x511 ((_ is stack ) ?x358)))
 (let (($x512 (= c___ center-to-right)))
 (let (($x513 (and $x512 $x511)))
 (let (($x514 (= c___ center-to-left)))
 (let (($x515 (and $x514 $x511)))
 (let ((?x144 (left s___)))
 (let (($x516 ((_ is stack ) ?x144)))
 (let (($x517 (= c___ left-to-right)))
 (let (($x518 (and $x517 $x516)))
 (let (($x549 (ite $x518 $x532 (ite $x515 $x532 (ite $x513 $x528 (ite $x510 $x529 (ite $x508 $x529 $x532)))))))
 (let ((?x356 (top ?x144)))
 (let ((?x495 (stack ?x356 ?x147)))
 (let (($x524 (= ?x330 ?x495)))
 (let (($x519 (= c___ left-to-center)))
 (let (($x520 (and $x519 $x516)))
 (ite $x520 $x524 $x549)))))))))))))))))))))))))))))))
(assert
 (let ((?x358 (center s___)))
 (let ((?x496 (center s____)))
 (let (($x534 (= ?x496 ?x358)))
 (let ((?x147 (right s___)))
 (let ((?x503 (top ?x147)))
 (let ((?x505 (stack ?x503 ?x358)))
 (let (($x531 (= ?x496 ?x505)))
 (let (($x506 ((_ is stack ) ?x147)))
 (let (($x507 (= c___ right-to-center)))
 (let (($x508 (and $x507 $x506)))
 (let (($x509 (= c___ right-to-left)))
 (let (($x510 (and $x509 $x506)))
 (let ((?x498 (rest ?x358)))
 (let (($x526 (= ?x496 ?x498)))
 (let (($x511 ((_ is stack ) ?x358)))
 (let (($x512 (= c___ center-to-right)))
 (let (($x513 (and $x512 $x511)))
 (let (($x514 (= c___ center-to-left)))
 (let (($x515 (and $x514 $x511)))
 (let ((?x144 (left s___)))
 (let ((?x356 (top ?x144)))
 (let ((?x497 (stack ?x356 ?x358)))
 (let (($x525 (= ?x496 ?x497)))
 (let (($x516 ((_ is stack ) ?x144)))
 (let (($x517 (= c___ left-to-right)))
 (let (($x518 (and $x517 $x516)))
 (let (($x548 (ite $x518 $x525 (ite $x515 $x526 (ite $x513 $x526 (ite $x510 $x534 (ite $x508 $x531 $x534)))))))
 (let (($x519 (= c___ left-to-center)))
 (let (($x520 (and $x519 $x516)))
 (ite $x520 $x534 $x548)))))))))))))))))))))))))))))))
(assert
 (let ((?x50 (stack I (stack F (stack B empty)))))
 (let ((?x330 (right s____)))
 (let (($x552 (= ?x330 ?x50)))
 (let ((?x47 (stack K (stack L (stack C (stack A empty))))))
 (let ((?x496 (center s____)))
 (let (($x583 (= ?x496 ?x47)))
 (let ((?x43 (stack D (stack M (stack H (stack J (stack G (stack E empty))))))))
 (let ((?x285 (left s____)))
 (let (($x584 (= ?x285 ?x43)))
 (let (($x586 (not (and $x584 $x583 $x552))))
 (not $x586))))))))))))
(check-sat)
(exit)
