(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x33 (stack B empty)))
 (let ((?x34 (stack F ?x33)))
 (let ((?x35 (stack J ?x34)))
 (let ((?x36 (stack H ?x35)))
 (let ((?x37 (stack T ?x36)))
 (let ((?x121 (left s_tmp_)))
 (= ?x121 ?x37))))))))
(assert
 (let ((?x38 (stack Q empty)))
 (let ((?x39 (stack N ?x38)))
 (let ((?x40 (stack E ?x39)))
 (let ((?x41 (stack G ?x40)))
 (let ((?x42 (stack A ?x41)))
 (let ((?x43 (stack R ?x42)))
 (let ((?x44 (stack L ?x43)))
 (let ((?x45 (stack C ?x44)))
 (let ((?x124 (center s_tmp__)))
 (= ?x124 ?x45)))))))))))
(assert
 (let ((?x46 (stack D empty)))
 (let ((?x47 (stack I ?x46)))
 (let ((?x48 (stack K ?x47)))
 (let ((?x49 (stack M ?x48)))
 (let ((?x50 (stack O ?x49)))
 (let ((?x51 (stack P ?x50)))
 (let ((?x52 (stack S ?x51)))
 (let ((?x53 (stack U ?x52)))
 (let ((?x127 (right s_tmp___)))
 (= ?x127 ?x53)))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x154 (left s_tmp__)))
 (= (left s_tmp___) ?x154)))
(assert
 (let ((?x124 (center s_tmp__)))
 (= (center s_tmp___) ?x124)))
(assert
 (let ((?x158 (center s_tmp_)))
 (= ?x158 (center s_tmp))))
(assert
 (let ((?x161 (right s_tmp_)))
 (= ?x161 (right s_tmp))))
(assert
 (let ((?x121 (left s_tmp_)))
 (let ((?x154 (left s_tmp__)))
 (= ?x154 ?x121))))
(assert
 (let ((?x161 (right s_tmp_)))
 (let ((?x165 (right s_tmp__)))
 (= ?x165 ?x161))))
(assert
 (= c__ c!1))
(assert
 (let ((?x98 (left s_)))
 (let ((?x293 (left s__)))
 (let (($x317 (= ?x293 ?x98)))
 (let ((?x101 (right s_)))
 (let (($x275 ((_ is stack ) ?x101)))
 (let (($x287 (= c_ right-to-left)))
 (let (($x270 (and $x287 $x275)))
 (let ((?x103 (center s_)))
 (let (($x271 ((_ is stack ) ?x103)))
 (let (($x272 (= c_ center-to-right)))
 (let (($x294 (and $x272 $x271)))
 (let (($x295 (= c_ center-to-left)))
 (let (($x296 (and $x295 $x271)))
 (let (($x326 (ite $x296 (= ?x293 (stack (top ?x103) ?x98)) (ite $x294 $x317 (ite $x270 (= ?x293 (stack (top ?x101) ?x98)) $x317)))))
 (let (($x304 (= ?x293 (rest ?x98))))
 (let (($x297 ((_ is stack ) ?x98)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x300 (= c_ left-to-center)))
 (let (($x301 (and $x300 $x297)))
 (ite $x301 $x304 (ite $x299 $x304 $x326)))))))))))))))))))))))
(assert
 (let ((?x101 (right s_)))
 (let ((?x289 (right s__)))
 (let (($x313 (= ?x289 ?x101)))
 (let (($x310 (= ?x289 (rest ?x101))))
 (let (($x275 ((_ is stack ) ?x101)))
 (let (($x285 (= c_ right-to-center)))
 (let (($x286 (and $x285 $x275)))
 (let (($x287 (= c_ right-to-left)))
 (let (($x270 (and $x287 $x275)))
 (let ((?x103 (center s_)))
 (let (($x271 ((_ is stack ) ?x103)))
 (let (($x272 (= c_ center-to-right)))
 (let (($x294 (and $x272 $x271)))
 (let (($x323 (ite $x294 (= ?x289 (stack (top ?x103) ?x101)) (ite $x270 $x310 (ite $x286 $x310 $x313)))))
 (let (($x295 (= c_ center-to-left)))
 (let (($x296 (and $x295 $x271)))
 (let ((?x98 (left s_)))
 (let (($x297 ((_ is stack ) ?x98)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x300 (= c_ left-to-center)))
 (let (($x301 (and $x300 $x297)))
 (ite $x301 (= ?x289 (stack (top ?x98) ?x101)) (ite $x299 $x313 (ite $x296 $x313 $x323))))))))))))))))))))))))))
(assert
 (let ((?x103 (center s_)))
 (let ((?x277 (center s__)))
 (let (($x315 (= ?x277 ?x103)))
 (let ((?x101 (right s_)))
 (let (($x275 ((_ is stack ) ?x101)))
 (let (($x285 (= c_ right-to-center)))
 (let (($x286 (and $x285 $x275)))
 (let (($x287 (= c_ right-to-left)))
 (let (($x270 (and $x287 $x275)))
 (let (($x307 (= ?x277 (rest ?x103))))
 (let (($x271 ((_ is stack ) ?x103)))
 (let (($x272 (= c_ center-to-right)))
 (let (($x294 (and $x272 $x271)))
 (let (($x322 (ite $x294 $x307 (ite $x270 $x315 (ite $x286 (= ?x277 (stack (top ?x101) ?x103)) $x315)))))
 (let (($x295 (= c_ center-to-left)))
 (let (($x296 (and $x295 $x271)))
 (let ((?x98 (left s_)))
 (let (($x297 ((_ is stack ) ?x98)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x300 (= c_ left-to-center)))
 (let (($x301 (and $x300 $x297)))
 (ite $x301 $x315 (ite $x299 (= ?x277 (stack (top ?x98) ?x103)) (ite $x296 $x307 $x322))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x293 (left s__)))
 (let ((?x168 (left s___)))
 (let (($x446 (= ?x168 ?x293)))
 (let ((?x289 (right s__)))
 (let ((?x413 (top ?x289)))
 (let ((?x414 (stack ?x413 ?x293)))
 (let (($x440 (= ?x168 ?x414)))
 (let (($x416 ((_ is stack ) ?x289)))
 (let (($x419 (= c__ right-to-left)))
 (let (($x420 (and $x419 $x416)))
 (let ((?x277 (center s__)))
 (let (($x421 ((_ is stack ) ?x277)))
 (let (($x422 (= c__ center-to-right)))
 (let (($x423 (and $x422 $x421)))
 (let ((?x409 (top ?x277)))
 (let ((?x410 (stack ?x409 ?x293)))
 (let (($x437 (= ?x168 ?x410)))
 (let (($x424 (= c__ center-to-left)))
 (let (($x425 (and $x424 $x421)))
 (let ((?x170 (rest ?x293)))
 (let (($x433 (= ?x168 ?x170)))
 (let (($x426 ((_ is stack ) ?x293)))
 (let (($x427 (= c__ left-to-right)))
 (let (($x428 (and $x427 $x426)))
 (let (($x429 (= c__ left-to-center)))
 (let (($x430 (and $x429 $x426)))
 (ite $x430 $x433 (ite $x428 $x433 (ite $x425 $x437 (ite $x423 $x446 (ite $x420 $x440 $x446))))))))))))))))))))))))))))))))
(assert
 (let ((?x289 (right s__)))
 (let ((?x171 (right s___)))
 (let (($x442 (= ?x171 ?x289)))
 (let ((?x412 (rest ?x289)))
 (let (($x439 (= ?x171 ?x412)))
 (let (($x416 ((_ is stack ) ?x289)))
 (let (($x417 (= c__ right-to-center)))
 (let (($x418 (and $x417 $x416)))
 (let (($x419 (= c__ right-to-left)))
 (let (($x420 (and $x419 $x416)))
 (let ((?x277 (center s__)))
 (let ((?x409 (top ?x277)))
 (let ((?x411 (stack ?x409 ?x289)))
 (let (($x438 (= ?x171 ?x411)))
 (let (($x421 ((_ is stack ) ?x277)))
 (let (($x422 (= c__ center-to-right)))
 (let (($x423 (and $x422 $x421)))
 (let (($x424 (= c__ center-to-left)))
 (let (($x425 (and $x424 $x421)))
 (let ((?x293 (left s__)))
 (let (($x426 ((_ is stack ) ?x293)))
 (let (($x427 (= c__ left-to-right)))
 (let (($x428 (and $x427 $x426)))
 (let (($x459 (ite $x428 $x442 (ite $x425 $x442 (ite $x423 $x438 (ite $x420 $x439 (ite $x418 $x439 $x442)))))))
 (let ((?x269 (top ?x293)))
 (let ((?x405 (stack ?x269 ?x289)))
 (let (($x434 (= ?x171 ?x405)))
 (let (($x429 (= c__ left-to-center)))
 (let (($x430 (and $x429 $x426)))
 (ite $x430 $x434 $x459)))))))))))))))))))))))))))))))
(assert
 (let ((?x277 (center s__)))
 (let ((?x406 (center s___)))
 (let (($x444 (= ?x406 ?x277)))
 (let ((?x289 (right s__)))
 (let ((?x413 (top ?x289)))
 (let ((?x415 (stack ?x413 ?x277)))
 (let (($x441 (= ?x406 ?x415)))
 (let (($x416 ((_ is stack ) ?x289)))
 (let (($x417 (= c__ right-to-center)))
 (let (($x418 (and $x417 $x416)))
 (let (($x419 (= c__ right-to-left)))
 (let (($x420 (and $x419 $x416)))
 (let ((?x408 (rest ?x277)))
 (let (($x436 (= ?x406 ?x408)))
 (let (($x421 ((_ is stack ) ?x277)))
 (let (($x422 (= c__ center-to-right)))
 (let (($x423 (and $x422 $x421)))
 (let (($x424 (= c__ center-to-left)))
 (let (($x425 (and $x424 $x421)))
 (let ((?x293 (left s__)))
 (let ((?x269 (top ?x293)))
 (let ((?x407 (stack ?x269 ?x277)))
 (let (($x435 (= ?x406 ?x407)))
 (let (($x426 ((_ is stack ) ?x293)))
 (let (($x427 (= c__ left-to-right)))
 (let (($x428 (and $x427 $x426)))
 (let (($x458 (ite $x428 $x435 (ite $x425 $x436 (ite $x423 $x436 (ite $x420 $x444 (ite $x418 $x441 $x444)))))))
 (let (($x429 (= c__ left-to-center)))
 (let (($x430 (and $x429 $x426)))
 (ite $x430 $x444 $x458)))))))))))))))))))))))))))))))
(assert
 (let ((?x59 (stack F (stack E (stack D (stack C (stack B (stack A empty))))))))
 (let ((?x65 (stack L (stack K (stack J (stack I (stack H (stack G ?x59))))))))
 (let ((?x71 (stack R (stack Q (stack P (stack O (stack N (stack M ?x65))))))))
 (let ((?x74 (stack U (stack T (stack S ?x71)))))
 (let ((?x171 (right s___)))
 (let (($x462 (= ?x171 ?x74)))
 (let ((?x406 (center s___)))
 (let (($x493 (= ?x406 empty)))
 (let ((?x168 (left s___)))
 (let (($x494 (= ?x168 empty)))
 (let (($x496 (not (and $x494 $x493 $x462))))
 (not $x496)))))))))))))
(check-sat)
(exit)
