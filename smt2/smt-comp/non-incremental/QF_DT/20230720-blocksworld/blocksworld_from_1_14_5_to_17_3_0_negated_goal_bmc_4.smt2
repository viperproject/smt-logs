(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x33 (stack O empty)))
 (let ((?x117 (left s_tmp_)))
 (= ?x117 ?x33))))
(assert
 (let ((?x32 (stack G empty)))
 (let ((?x34 (stack A ?x32)))
 (let ((?x35 (stack D ?x34)))
 (let ((?x36 (stack L ?x35)))
 (let ((?x37 (stack C ?x36)))
 (let ((?x38 (stack B ?x37)))
 (let ((?x39 (stack S ?x38)))
 (let ((?x40 (stack K ?x39)))
 (let ((?x41 (stack P ?x40)))
 (let ((?x42 (stack N ?x41)))
 (let ((?x43 (stack I ?x42)))
 (let ((?x44 (stack E ?x43)))
 (let ((?x45 (stack J ?x44)))
 (let ((?x46 (stack Q ?x45)))
 (let ((?x120 (center s_tmp__)))
 (= ?x120 ?x46)))))))))))))))))
(assert
 (let ((?x47 (stack F empty)))
 (let ((?x48 (stack H ?x47)))
 (let ((?x49 (stack M ?x48)))
 (let ((?x50 (stack R ?x49)))
 (let ((?x51 (stack T ?x50)))
 (let ((?x123 (right s_tmp___)))
 (= ?x123 ?x51))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x150 (left s_tmp__)))
 (= (left s_tmp___) ?x150)))
(assert
 (let ((?x120 (center s_tmp__)))
 (= (center s_tmp___) ?x120)))
(assert
 (let ((?x154 (center s_tmp_)))
 (= ?x154 (center s_tmp))))
(assert
 (let ((?x157 (right s_tmp_)))
 (= ?x157 (right s_tmp))))
(assert
 (let ((?x117 (left s_tmp_)))
 (let ((?x150 (left s_tmp__)))
 (= ?x150 ?x117))))
(assert
 (let ((?x157 (right s_tmp_)))
 (let ((?x161 (right s_tmp__)))
 (= ?x161 ?x157))))
(assert
 (= c__ c!1))
(assert
 (let ((?x94 (left s_)))
 (let ((?x268 (left s__)))
 (let (($x310 (= ?x268 ?x94)))
 (let ((?x97 (right s_)))
 (let (($x280 ((_ is stack ) ?x97)))
 (let (($x283 (= c_ right-to-left)))
 (let (($x284 (and $x283 $x280)))
 (let ((?x99 (center s_)))
 (let (($x285 ((_ is stack ) ?x99)))
 (let (($x286 (= c_ center-to-right)))
 (let (($x287 (and $x286 $x285)))
 (let (($x288 (= c_ center-to-left)))
 (let (($x289 (and $x288 $x285)))
 (let (($x319 (ite $x289 (= ?x268 (stack (top ?x99) ?x94)) (ite $x287 $x310 (ite $x284 (= ?x268 (stack (top ?x97) ?x94)) $x310)))))
 (let (($x297 (= ?x268 (rest ?x94))))
 (let (($x290 ((_ is stack ) ?x94)))
 (let (($x291 (= c_ left-to-right)))
 (let (($x292 (and $x291 $x290)))
 (let (($x293 (= c_ left-to-center)))
 (let (($x294 (and $x293 $x290)))
 (ite $x294 $x297 (ite $x292 $x297 $x319)))))))))))))))))))))))
(assert
 (let ((?x97 (right s_)))
 (let ((?x270 (right s__)))
 (let (($x306 (= ?x270 ?x97)))
 (let (($x303 (= ?x270 (rest ?x97))))
 (let (($x280 ((_ is stack ) ?x97)))
 (let (($x281 (= c_ right-to-center)))
 (let (($x282 (and $x281 $x280)))
 (let (($x283 (= c_ right-to-left)))
 (let (($x284 (and $x283 $x280)))
 (let ((?x99 (center s_)))
 (let (($x285 ((_ is stack ) ?x99)))
 (let (($x286 (= c_ center-to-right)))
 (let (($x287 (and $x286 $x285)))
 (let (($x316 (ite $x287 (= ?x270 (stack (top ?x99) ?x97)) (ite $x284 $x303 (ite $x282 $x303 $x306)))))
 (let (($x288 (= c_ center-to-left)))
 (let (($x289 (and $x288 $x285)))
 (let ((?x94 (left s_)))
 (let (($x290 ((_ is stack ) ?x94)))
 (let (($x291 (= c_ left-to-right)))
 (let (($x292 (and $x291 $x290)))
 (let (($x293 (= c_ left-to-center)))
 (let (($x294 (and $x293 $x290)))
 (ite $x294 (= ?x270 (stack (top ?x94) ?x97)) (ite $x292 $x306 (ite $x289 $x306 $x316))))))))))))))))))))))))))
(assert
 (let ((?x99 (center s_)))
 (let ((?x273 (center s__)))
 (let (($x308 (= ?x273 ?x99)))
 (let ((?x97 (right s_)))
 (let (($x280 ((_ is stack ) ?x97)))
 (let (($x281 (= c_ right-to-center)))
 (let (($x282 (and $x281 $x280)))
 (let (($x283 (= c_ right-to-left)))
 (let (($x284 (and $x283 $x280)))
 (let (($x300 (= ?x273 (rest ?x99))))
 (let (($x285 ((_ is stack ) ?x99)))
 (let (($x286 (= c_ center-to-right)))
 (let (($x287 (and $x286 $x285)))
 (let (($x315 (ite $x287 $x300 (ite $x284 $x308 (ite $x282 (= ?x273 (stack (top ?x97) ?x99)) $x308)))))
 (let (($x288 (= c_ center-to-left)))
 (let (($x289 (and $x288 $x285)))
 (let ((?x94 (left s_)))
 (let (($x290 ((_ is stack ) ?x94)))
 (let (($x291 (= c_ left-to-right)))
 (let (($x292 (and $x291 $x290)))
 (let (($x293 (= c_ left-to-center)))
 (let (($x294 (and $x293 $x290)))
 (ite $x294 $x308 (ite $x292 (= ?x273 (stack (top ?x94) ?x99)) (ite $x289 $x300 $x315))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x268 (left s__)))
 (let ((?x164 (left s___)))
 (let (($x439 (= ?x164 ?x268)))
 (let ((?x270 (right s__)))
 (let ((?x406 (top ?x270)))
 (let ((?x407 (stack ?x406 ?x268)))
 (let (($x433 (= ?x164 ?x407)))
 (let (($x409 ((_ is stack ) ?x270)))
 (let (($x412 (= c__ right-to-left)))
 (let (($x413 (and $x412 $x409)))
 (let ((?x273 (center s__)))
 (let (($x414 ((_ is stack ) ?x273)))
 (let (($x415 (= c__ center-to-right)))
 (let (($x416 (and $x415 $x414)))
 (let ((?x402 (top ?x273)))
 (let ((?x403 (stack ?x402 ?x268)))
 (let (($x430 (= ?x164 ?x403)))
 (let (($x417 (= c__ center-to-left)))
 (let (($x418 (and $x417 $x414)))
 (let ((?x166 (rest ?x268)))
 (let (($x426 (= ?x164 ?x166)))
 (let (($x419 ((_ is stack ) ?x268)))
 (let (($x420 (= c__ left-to-right)))
 (let (($x421 (and $x420 $x419)))
 (let (($x422 (= c__ left-to-center)))
 (let (($x423 (and $x422 $x419)))
 (ite $x423 $x426 (ite $x421 $x426 (ite $x418 $x430 (ite $x416 $x439 (ite $x413 $x433 $x439))))))))))))))))))))))))))))))))
(assert
 (let ((?x270 (right s__)))
 (let ((?x167 (right s___)))
 (let (($x435 (= ?x167 ?x270)))
 (let ((?x405 (rest ?x270)))
 (let (($x432 (= ?x167 ?x405)))
 (let (($x409 ((_ is stack ) ?x270)))
 (let (($x410 (= c__ right-to-center)))
 (let (($x411 (and $x410 $x409)))
 (let (($x412 (= c__ right-to-left)))
 (let (($x413 (and $x412 $x409)))
 (let ((?x273 (center s__)))
 (let ((?x402 (top ?x273)))
 (let ((?x404 (stack ?x402 ?x270)))
 (let (($x431 (= ?x167 ?x404)))
 (let (($x414 ((_ is stack ) ?x273)))
 (let (($x415 (= c__ center-to-right)))
 (let (($x416 (and $x415 $x414)))
 (let (($x417 (= c__ center-to-left)))
 (let (($x418 (and $x417 $x414)))
 (let ((?x268 (left s__)))
 (let (($x419 ((_ is stack ) ?x268)))
 (let (($x420 (= c__ left-to-right)))
 (let (($x421 (and $x420 $x419)))
 (let (($x452 (ite $x421 $x435 (ite $x418 $x435 (ite $x416 $x431 (ite $x413 $x432 (ite $x411 $x432 $x435)))))))
 (let ((?x262 (top ?x268)))
 (let ((?x398 (stack ?x262 ?x270)))
 (let (($x427 (= ?x167 ?x398)))
 (let (($x422 (= c__ left-to-center)))
 (let (($x423 (and $x422 $x419)))
 (ite $x423 $x427 $x452)))))))))))))))))))))))))))))))
(assert
 (let ((?x273 (center s__)))
 (let ((?x399 (center s___)))
 (let (($x437 (= ?x399 ?x273)))
 (let ((?x270 (right s__)))
 (let ((?x406 (top ?x270)))
 (let ((?x408 (stack ?x406 ?x273)))
 (let (($x434 (= ?x399 ?x408)))
 (let (($x409 ((_ is stack ) ?x270)))
 (let (($x410 (= c__ right-to-center)))
 (let (($x411 (and $x410 $x409)))
 (let (($x412 (= c__ right-to-left)))
 (let (($x413 (and $x412 $x409)))
 (let ((?x401 (rest ?x273)))
 (let (($x429 (= ?x399 ?x401)))
 (let (($x414 ((_ is stack ) ?x273)))
 (let (($x415 (= c__ center-to-right)))
 (let (($x416 (and $x415 $x414)))
 (let (($x417 (= c__ center-to-left)))
 (let (($x418 (and $x417 $x414)))
 (let ((?x268 (left s__)))
 (let ((?x262 (top ?x268)))
 (let ((?x400 (stack ?x262 ?x273)))
 (let (($x428 (= ?x399 ?x400)))
 (let (($x419 ((_ is stack ) ?x268)))
 (let (($x420 (= c__ left-to-right)))
 (let (($x421 (and $x420 $x419)))
 (let (($x451 (ite $x421 $x428 (ite $x418 $x429 (ite $x416 $x429 (ite $x413 $x437 (ite $x411 $x434 $x437)))))))
 (let (($x422 (= c__ left-to-center)))
 (let (($x423 (and $x422 $x419)))
 (ite $x423 $x437 $x451)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x164 (left s___)))
 (let ((?x326 (left s____)))
 (let (($x577 (= ?x326 ?x164)))
 (let ((?x167 (right s___)))
 (let ((?x544 (top ?x167)))
 (let ((?x545 (stack ?x544 ?x164)))
 (let (($x571 (= ?x326 ?x545)))
 (let (($x547 ((_ is stack ) ?x167)))
 (let (($x550 (= c___ right-to-left)))
 (let (($x551 (and $x550 $x547)))
 (let ((?x399 (center s___)))
 (let (($x552 ((_ is stack ) ?x399)))
 (let (($x553 (= c___ center-to-right)))
 (let (($x554 (and $x553 $x552)))
 (let ((?x540 (top ?x399)))
 (let ((?x541 (stack ?x540 ?x164)))
 (let (($x568 (= ?x326 ?x541)))
 (let (($x555 (= c___ center-to-left)))
 (let (($x556 (and $x555 $x552)))
 (let ((?x370 (rest ?x164)))
 (let (($x564 (= ?x326 ?x370)))
 (let (($x557 ((_ is stack ) ?x164)))
 (let (($x558 (= c___ left-to-right)))
 (let (($x559 (and $x558 $x557)))
 (let (($x560 (= c___ left-to-center)))
 (let (($x561 (and $x560 $x557)))
 (ite $x561 $x564 (ite $x559 $x564 (ite $x556 $x568 (ite $x554 $x577 (ite $x551 $x571 $x577))))))))))))))))))))))))))))))))
(assert
 (let ((?x167 (right s___)))
 (let ((?x371 (right s____)))
 (let (($x573 (= ?x371 ?x167)))
 (let ((?x543 (rest ?x167)))
 (let (($x570 (= ?x371 ?x543)))
 (let (($x547 ((_ is stack ) ?x167)))
 (let (($x548 (= c___ right-to-center)))
 (let (($x549 (and $x548 $x547)))
 (let (($x550 (= c___ right-to-left)))
 (let (($x551 (and $x550 $x547)))
 (let ((?x399 (center s___)))
 (let ((?x540 (top ?x399)))
 (let ((?x542 (stack ?x540 ?x167)))
 (let (($x569 (= ?x371 ?x542)))
 (let (($x552 ((_ is stack ) ?x399)))
 (let (($x553 (= c___ center-to-right)))
 (let (($x554 (and $x553 $x552)))
 (let (($x555 (= c___ center-to-left)))
 (let (($x556 (and $x555 $x552)))
 (let ((?x164 (left s___)))
 (let (($x557 ((_ is stack ) ?x164)))
 (let (($x558 (= c___ left-to-right)))
 (let (($x559 (and $x558 $x557)))
 (let (($x590 (ite $x559 $x573 (ite $x556 $x573 (ite $x554 $x569 (ite $x551 $x570 (ite $x549 $x570 $x573)))))))
 (let ((?x397 (top ?x164)))
 (let ((?x536 (stack ?x397 ?x167)))
 (let (($x565 (= ?x371 ?x536)))
 (let (($x560 (= c___ left-to-center)))
 (let (($x561 (and $x560 $x557)))
 (ite $x561 $x565 $x590)))))))))))))))))))))))))))))))
(assert
 (let ((?x399 (center s___)))
 (let ((?x537 (center s____)))
 (let (($x575 (= ?x537 ?x399)))
 (let ((?x167 (right s___)))
 (let ((?x544 (top ?x167)))
 (let ((?x546 (stack ?x544 ?x399)))
 (let (($x572 (= ?x537 ?x546)))
 (let (($x547 ((_ is stack ) ?x167)))
 (let (($x548 (= c___ right-to-center)))
 (let (($x549 (and $x548 $x547)))
 (let (($x550 (= c___ right-to-left)))
 (let (($x551 (and $x550 $x547)))
 (let ((?x539 (rest ?x399)))
 (let (($x567 (= ?x537 ?x539)))
 (let (($x552 ((_ is stack ) ?x399)))
 (let (($x553 (= c___ center-to-right)))
 (let (($x554 (and $x553 $x552)))
 (let (($x555 (= c___ center-to-left)))
 (let (($x556 (and $x555 $x552)))
 (let ((?x164 (left s___)))
 (let ((?x397 (top ?x164)))
 (let ((?x538 (stack ?x397 ?x399)))
 (let (($x566 (= ?x537 ?x538)))
 (let (($x557 ((_ is stack ) ?x164)))
 (let (($x558 (= c___ left-to-right)))
 (let (($x559 (and $x558 $x557)))
 (let (($x589 (ite $x559 $x566 (ite $x556 $x567 (ite $x554 $x567 (ite $x551 $x575 (ite $x549 $x572 $x575)))))))
 (let (($x560 (= c___ left-to-center)))
 (let (($x561 (and $x560 $x557)))
 (ite $x561 $x575 $x589)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x326 (left s____)))
 (let ((?x455 (left s_____)))
 (let (($x715 (= ?x455 ?x326)))
 (let ((?x371 (right s____)))
 (let ((?x682 (top ?x371)))
 (let ((?x683 (stack ?x682 ?x326)))
 (let (($x709 (= ?x455 ?x683)))
 (let (($x685 ((_ is stack ) ?x371)))
 (let (($x688 (= c____ right-to-left)))
 (let (($x689 (and $x688 $x685)))
 (let ((?x537 (center s____)))
 (let (($x690 ((_ is stack ) ?x537)))
 (let (($x691 (= c____ center-to-right)))
 (let (($x692 (and $x691 $x690)))
 (let ((?x678 (top ?x537)))
 (let ((?x679 (stack ?x678 ?x326)))
 (let (($x706 (= ?x455 ?x679)))
 (let (($x693 (= c____ center-to-left)))
 (let (($x694 (and $x693 $x690)))
 (let ((?x488 (rest ?x326)))
 (let (($x702 (= ?x455 ?x488)))
 (let (($x695 ((_ is stack ) ?x326)))
 (let (($x696 (= c____ left-to-right)))
 (let (($x697 (and $x696 $x695)))
 (let (($x698 (= c____ left-to-center)))
 (let (($x699 (and $x698 $x695)))
 (ite $x699 $x702 (ite $x697 $x702 (ite $x694 $x706 (ite $x692 $x715 (ite $x689 $x709 $x715))))))))))))))))))))))))))))))))
(assert
 (let ((?x371 (right s____)))
 (let ((?x489 (right s_____)))
 (let (($x711 (= ?x489 ?x371)))
 (let ((?x681 (rest ?x371)))
 (let (($x708 (= ?x489 ?x681)))
 (let (($x685 ((_ is stack ) ?x371)))
 (let (($x686 (= c____ right-to-center)))
 (let (($x687 (and $x686 $x685)))
 (let (($x688 (= c____ right-to-left)))
 (let (($x689 (and $x688 $x685)))
 (let ((?x537 (center s____)))
 (let ((?x678 (top ?x537)))
 (let ((?x680 (stack ?x678 ?x371)))
 (let (($x707 (= ?x489 ?x680)))
 (let (($x690 ((_ is stack ) ?x537)))
 (let (($x691 (= c____ center-to-right)))
 (let (($x692 (and $x691 $x690)))
 (let (($x693 (= c____ center-to-left)))
 (let (($x694 (and $x693 $x690)))
 (let ((?x326 (left s____)))
 (let (($x695 ((_ is stack ) ?x326)))
 (let (($x696 (= c____ left-to-right)))
 (let (($x697 (and $x696 $x695)))
 (let (($x728 (ite $x697 $x711 (ite $x694 $x711 (ite $x692 $x707 (ite $x689 $x708 (ite $x687 $x708 $x711)))))))
 (let ((?x535 (top ?x326)))
 (let ((?x674 (stack ?x535 ?x371)))
 (let (($x703 (= ?x489 ?x674)))
 (let (($x698 (= c____ left-to-center)))
 (let (($x699 (and $x698 $x695)))
 (ite $x699 $x703 $x728)))))))))))))))))))))))))))))))
(assert
 (let ((?x537 (center s____)))
 (let ((?x675 (center s_____)))
 (let (($x713 (= ?x675 ?x537)))
 (let ((?x371 (right s____)))
 (let ((?x682 (top ?x371)))
 (let ((?x684 (stack ?x682 ?x537)))
 (let (($x710 (= ?x675 ?x684)))
 (let (($x685 ((_ is stack ) ?x371)))
 (let (($x686 (= c____ right-to-center)))
 (let (($x687 (and $x686 $x685)))
 (let (($x688 (= c____ right-to-left)))
 (let (($x689 (and $x688 $x685)))
 (let ((?x677 (rest ?x537)))
 (let (($x705 (= ?x675 ?x677)))
 (let (($x690 ((_ is stack ) ?x537)))
 (let (($x691 (= c____ center-to-right)))
 (let (($x692 (and $x691 $x690)))
 (let (($x693 (= c____ center-to-left)))
 (let (($x694 (and $x693 $x690)))
 (let ((?x326 (left s____)))
 (let ((?x535 (top ?x326)))
 (let ((?x676 (stack ?x535 ?x537)))
 (let (($x704 (= ?x675 ?x676)))
 (let (($x695 ((_ is stack ) ?x326)))
 (let (($x696 (= c____ left-to-right)))
 (let (($x697 (and $x696 $x695)))
 (let (($x727 (ite $x697 $x704 (ite $x694 $x705 (ite $x692 $x705 (ite $x689 $x713 (ite $x687 $x710 $x713)))))))
 (let (($x698 (= c____ left-to-center)))
 (let (($x699 (and $x698 $x695)))
 (ite $x699 $x713 $x727)))))))))))))))))))))))))))))))
(assert
 (let ((?x489 (right s_____)))
 (let (($x731 (= ?x489 empty)))
 (let ((?x70 (stack P (stack N (stack K empty)))))
 (let ((?x675 (center s_____)))
 (let (($x762 (= ?x675 ?x70)))
 (let ((?x56 (stack T (stack R (stack F (stack D (stack I (stack O empty))))))))
 (let ((?x62 (stack M (stack L (stack E (stack B (stack C (stack Q ?x56))))))))
 (let ((?x67 (stack H (stack J (stack A (stack G (stack S ?x62)))))))
 (let ((?x455 (left s_____)))
 (let (($x763 (= ?x455 ?x67)))
 (let (($x765 (not (and $x763 $x762 $x731))))
 (not $x765)))))))))))))
(check-sat)
(exit)
