(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x34 (stack Q empty)))
 (let ((?x33 (stack B ?x34)))
 (let ((?x35 (stack G ?x33)))
 (let ((?x36 (stack H ?x35)))
 (let ((?x37 (stack O ?x36)))
 (let ((?x38 (stack D ?x37)))
 (let ((?x39 (stack I ?x38)))
 (let ((?x40 (stack P ?x39)))
 (let ((?x41 (stack U ?x40)))
 (let ((?x42 (stack C ?x41)))
 (let ((?x43 (stack K ?x42)))
 (let ((?x44 (stack L ?x43)))
 (let ((?x45 (stack T ?x44)))
 (let ((?x46 (stack E ?x45)))
 (let ((?x47 (stack M ?x46)))
 (let ((?x48 (stack R ?x47)))
 (let ((?x49 (stack A ?x48)))
 (let ((?x50 (stack J ?x49)))
 (let ((?x121 (left s_tmp_)))
 (= ?x121 ?x50)))))))))))))))))))))
(assert
 (let ((?x124 (center s_tmp__)))
 (= ?x124 empty)))
(assert
 (let ((?x51 (stack F empty)))
 (let ((?x52 (stack N ?x51)))
 (let ((?x53 (stack S ?x52)))
 (let ((?x127 (right s_tmp___)))
 (= ?x127 ?x53))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x154 (left s_tmp__)))
 (= (left s_tmp___) ?x154)))
(assert
 (let ((?x124 (center s_tmp__)))
 (= (center s_tmp___) ?x124)))
(assert
 (let ((?x158 (center s_tmp_)))
 (= ?x158 (center s_tmp))))
(assert
 (let ((?x161 (right s_tmp_)))
 (= ?x161 (right s_tmp))))
(assert
 (let ((?x121 (left s_tmp_)))
 (let ((?x154 (left s_tmp__)))
 (= ?x154 ?x121))))
(assert
 (let ((?x161 (right s_tmp_)))
 (let ((?x165 (right s_tmp__)))
 (= ?x165 ?x161))))
(assert
 (= c__ c!1))
(assert
 (let ((?x98 (left s_)))
 (let ((?x272 (left s__)))
 (let (($x317 (= ?x272 ?x98)))
 (let ((?x101 (right s_)))
 (let (($x287 ((_ is stack ) ?x101)))
 (let (($x281 (= c_ right-to-left)))
 (let (($x291 (and $x281 $x287)))
 (let ((?x103 (center s_)))
 (let (($x292 ((_ is stack ) ?x103)))
 (let (($x294 (and (= c_ center-to-right) $x292)))
 (let (($x296 (and (= c_ center-to-left) $x292)))
 (let (($x326 (ite $x296 (= ?x272 (stack (top ?x103) ?x98)) (ite $x294 $x317 (ite $x291 (= ?x272 (stack (top ?x101) ?x98)) $x317)))))
 (let (($x304 (= ?x272 (rest ?x98))))
 (let (($x297 ((_ is stack ) ?x98)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x300 (= c_ left-to-center)))
 (let (($x301 (and $x300 $x297)))
 (ite $x301 $x304 (ite $x299 $x304 $x326)))))))))))))))))))))
(assert
 (let ((?x101 (right s_)))
 (let ((?x283 (right s__)))
 (let (($x313 (= ?x283 ?x101)))
 (let (($x310 (= ?x283 (rest ?x101))))
 (let (($x287 ((_ is stack ) ?x101)))
 (let (($x279 (= c_ right-to-center)))
 (let (($x280 (and $x279 $x287)))
 (let (($x281 (= c_ right-to-left)))
 (let (($x291 (and $x281 $x287)))
 (let ((?x103 (center s_)))
 (let (($x292 ((_ is stack ) ?x103)))
 (let (($x294 (and (= c_ center-to-right) $x292)))
 (let (($x323 (ite $x294 (= ?x283 (stack (top ?x103) ?x101)) (ite $x291 $x310 (ite $x280 $x310 $x313)))))
 (let (($x296 (and (= c_ center-to-left) $x292)))
 (let ((?x98 (left s_)))
 (let (($x297 ((_ is stack ) ?x98)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x300 (= c_ left-to-center)))
 (let (($x301 (and $x300 $x297)))
 (ite $x301 (= ?x283 (stack (top ?x98) ?x101)) (ite $x299 $x313 (ite $x296 $x313 $x323))))))))))))))))))))))))
(assert
 (let ((?x103 (center s_)))
 (let ((?x274 (center s__)))
 (let (($x315 (= ?x274 ?x103)))
 (let ((?x101 (right s_)))
 (let (($x287 ((_ is stack ) ?x101)))
 (let (($x279 (= c_ right-to-center)))
 (let (($x280 (and $x279 $x287)))
 (let (($x281 (= c_ right-to-left)))
 (let (($x291 (and $x281 $x287)))
 (let (($x307 (= ?x274 (rest ?x103))))
 (let (($x292 ((_ is stack ) ?x103)))
 (let (($x294 (and (= c_ center-to-right) $x292)))
 (let (($x322 (ite $x294 $x307 (ite $x291 $x315 (ite $x280 (= ?x274 (stack (top ?x101) ?x103)) $x315)))))
 (let (($x296 (and (= c_ center-to-left) $x292)))
 (let ((?x98 (left s_)))
 (let (($x297 ((_ is stack ) ?x98)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x300 (= c_ left-to-center)))
 (let (($x301 (and $x300 $x297)))
 (ite $x301 $x315 (ite $x299 (= ?x274 (stack (top ?x98) ?x103)) (ite $x296 $x307 $x322))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x272 (left s__)))
 (let ((?x168 (left s___)))
 (let (($x429 (= ?x168 ?x272)))
 (let ((?x283 (right s__)))
 (let ((?x396 (top ?x283)))
 (let ((?x397 (stack ?x396 ?x272)))
 (let (($x423 (= ?x168 ?x397)))
 (let (($x399 ((_ is stack ) ?x283)))
 (let (($x402 (= c__ right-to-left)))
 (let (($x403 (and $x402 $x399)))
 (let ((?x274 (center s__)))
 (let (($x404 ((_ is stack ) ?x274)))
 (let (($x405 (= c__ center-to-right)))
 (let (($x406 (and $x405 $x404)))
 (let ((?x392 (top ?x274)))
 (let ((?x393 (stack ?x392 ?x272)))
 (let (($x420 (= ?x168 ?x393)))
 (let (($x407 (= c__ center-to-left)))
 (let (($x408 (and $x407 $x404)))
 (let ((?x170 (rest ?x272)))
 (let (($x416 (= ?x168 ?x170)))
 (let (($x409 ((_ is stack ) ?x272)))
 (let (($x410 (= c__ left-to-right)))
 (let (($x411 (and $x410 $x409)))
 (let (($x412 (= c__ left-to-center)))
 (let (($x413 (and $x412 $x409)))
 (ite $x413 $x416 (ite $x411 $x416 (ite $x408 $x420 (ite $x406 $x429 (ite $x403 $x423 $x429))))))))))))))))))))))))))))))))
(assert
 (let ((?x283 (right s__)))
 (let ((?x171 (right s___)))
 (let (($x425 (= ?x171 ?x283)))
 (let ((?x395 (rest ?x283)))
 (let (($x422 (= ?x171 ?x395)))
 (let (($x399 ((_ is stack ) ?x283)))
 (let (($x400 (= c__ right-to-center)))
 (let (($x401 (and $x400 $x399)))
 (let (($x402 (= c__ right-to-left)))
 (let (($x403 (and $x402 $x399)))
 (let ((?x274 (center s__)))
 (let ((?x392 (top ?x274)))
 (let ((?x394 (stack ?x392 ?x283)))
 (let (($x421 (= ?x171 ?x394)))
 (let (($x404 ((_ is stack ) ?x274)))
 (let (($x405 (= c__ center-to-right)))
 (let (($x406 (and $x405 $x404)))
 (let (($x407 (= c__ center-to-left)))
 (let (($x408 (and $x407 $x404)))
 (let ((?x272 (left s__)))
 (let (($x409 ((_ is stack ) ?x272)))
 (let (($x410 (= c__ left-to-right)))
 (let (($x411 (and $x410 $x409)))
 (let (($x442 (ite $x411 $x425 (ite $x408 $x425 (ite $x406 $x421 (ite $x403 $x422 (ite $x401 $x422 $x425)))))))
 (let ((?x269 (top ?x272)))
 (let ((?x388 (stack ?x269 ?x283)))
 (let (($x417 (= ?x171 ?x388)))
 (let (($x412 (= c__ left-to-center)))
 (let (($x413 (and $x412 $x409)))
 (ite $x413 $x417 $x442)))))))))))))))))))))))))))))))
(assert
 (let ((?x274 (center s__)))
 (let ((?x389 (center s___)))
 (let (($x427 (= ?x389 ?x274)))
 (let ((?x283 (right s__)))
 (let ((?x396 (top ?x283)))
 (let ((?x398 (stack ?x396 ?x274)))
 (let (($x424 (= ?x389 ?x398)))
 (let (($x399 ((_ is stack ) ?x283)))
 (let (($x400 (= c__ right-to-center)))
 (let (($x401 (and $x400 $x399)))
 (let (($x402 (= c__ right-to-left)))
 (let (($x403 (and $x402 $x399)))
 (let ((?x391 (rest ?x274)))
 (let (($x419 (= ?x389 ?x391)))
 (let (($x404 ((_ is stack ) ?x274)))
 (let (($x405 (= c__ center-to-right)))
 (let (($x406 (and $x405 $x404)))
 (let (($x407 (= c__ center-to-left)))
 (let (($x408 (and $x407 $x404)))
 (let ((?x272 (left s__)))
 (let ((?x269 (top ?x272)))
 (let ((?x390 (stack ?x269 ?x274)))
 (let (($x418 (= ?x389 ?x390)))
 (let (($x409 ((_ is stack ) ?x272)))
 (let (($x410 (= c__ left-to-right)))
 (let (($x411 (and $x410 $x409)))
 (let (($x441 (ite $x411 $x418 (ite $x408 $x419 (ite $x406 $x419 (ite $x403 $x427 (ite $x401 $x424 $x427)))))))
 (let (($x412 (= c__ left-to-center)))
 (let (($x413 (and $x412 $x409)))
 (ite $x413 $x427 $x441)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x168 (left s___)))
 (let ((?x333 (left s____)))
 (let (($x567 (= ?x333 ?x168)))
 (let ((?x171 (right s___)))
 (let ((?x534 (top ?x171)))
 (let ((?x535 (stack ?x534 ?x168)))
 (let (($x561 (= ?x333 ?x535)))
 (let (($x537 ((_ is stack ) ?x171)))
 (let (($x540 (= c___ right-to-left)))
 (let (($x541 (and $x540 $x537)))
 (let ((?x389 (center s___)))
 (let (($x542 ((_ is stack ) ?x389)))
 (let (($x543 (= c___ center-to-right)))
 (let (($x544 (and $x543 $x542)))
 (let ((?x530 (top ?x389)))
 (let ((?x531 (stack ?x530 ?x168)))
 (let (($x558 (= ?x333 ?x531)))
 (let (($x545 (= c___ center-to-left)))
 (let (($x546 (and $x545 $x542)))
 (let ((?x365 (rest ?x168)))
 (let (($x554 (= ?x333 ?x365)))
 (let (($x547 ((_ is stack ) ?x168)))
 (let (($x548 (= c___ left-to-right)))
 (let (($x549 (and $x548 $x547)))
 (let (($x550 (= c___ left-to-center)))
 (let (($x551 (and $x550 $x547)))
 (ite $x551 $x554 (ite $x549 $x554 (ite $x546 $x558 (ite $x544 $x567 (ite $x541 $x561 $x567))))))))))))))))))))))))))))))))
(assert
 (let ((?x171 (right s___)))
 (let ((?x366 (right s____)))
 (let (($x563 (= ?x366 ?x171)))
 (let ((?x533 (rest ?x171)))
 (let (($x560 (= ?x366 ?x533)))
 (let (($x537 ((_ is stack ) ?x171)))
 (let (($x538 (= c___ right-to-center)))
 (let (($x539 (and $x538 $x537)))
 (let (($x540 (= c___ right-to-left)))
 (let (($x541 (and $x540 $x537)))
 (let ((?x389 (center s___)))
 (let ((?x530 (top ?x389)))
 (let ((?x532 (stack ?x530 ?x171)))
 (let (($x559 (= ?x366 ?x532)))
 (let (($x542 ((_ is stack ) ?x389)))
 (let (($x543 (= c___ center-to-right)))
 (let (($x544 (and $x543 $x542)))
 (let (($x545 (= c___ center-to-left)))
 (let (($x546 (and $x545 $x542)))
 (let ((?x168 (left s___)))
 (let (($x547 ((_ is stack ) ?x168)))
 (let (($x548 (= c___ left-to-right)))
 (let (($x549 (and $x548 $x547)))
 (let (($x580 (ite $x549 $x563 (ite $x546 $x563 (ite $x544 $x559 (ite $x541 $x560 (ite $x539 $x560 $x563)))))))
 (let ((?x387 (top ?x168)))
 (let ((?x526 (stack ?x387 ?x171)))
 (let (($x555 (= ?x366 ?x526)))
 (let (($x550 (= c___ left-to-center)))
 (let (($x551 (and $x550 $x547)))
 (ite $x551 $x555 $x580)))))))))))))))))))))))))))))))
(assert
 (let ((?x389 (center s___)))
 (let ((?x527 (center s____)))
 (let (($x565 (= ?x527 ?x389)))
 (let ((?x171 (right s___)))
 (let ((?x534 (top ?x171)))
 (let ((?x536 (stack ?x534 ?x389)))
 (let (($x562 (= ?x527 ?x536)))
 (let (($x537 ((_ is stack ) ?x171)))
 (let (($x538 (= c___ right-to-center)))
 (let (($x539 (and $x538 $x537)))
 (let (($x540 (= c___ right-to-left)))
 (let (($x541 (and $x540 $x537)))
 (let ((?x529 (rest ?x389)))
 (let (($x557 (= ?x527 ?x529)))
 (let (($x542 ((_ is stack ) ?x389)))
 (let (($x543 (= c___ center-to-right)))
 (let (($x544 (and $x543 $x542)))
 (let (($x545 (= c___ center-to-left)))
 (let (($x546 (and $x545 $x542)))
 (let ((?x168 (left s___)))
 (let ((?x387 (top ?x168)))
 (let ((?x528 (stack ?x387 ?x389)))
 (let (($x556 (= ?x527 ?x528)))
 (let (($x547 ((_ is stack ) ?x168)))
 (let (($x548 (= c___ left-to-right)))
 (let (($x549 (and $x548 $x547)))
 (let (($x579 (ite $x549 $x556 (ite $x546 $x557 (ite $x544 $x557 (ite $x541 $x565 (ite $x539 $x562 $x565)))))))
 (let (($x550 (= c___ left-to-center)))
 (let (($x551 (and $x550 $x547)))
 (ite $x551 $x565 $x579)))))))))))))))))))))))))))))))
(assert
 (let ((?x74 (stack T (stack J (stack E (stack D empty))))))
 (let ((?x366 (right s____)))
 (let (($x583 (= ?x366 ?x74)))
 (let ((?x63 (stack S (stack A (stack M (stack P (stack R (stack B empty))))))))
 (let ((?x69 (stack H (stack U (stack I (stack C (stack O (stack F ?x63))))))))
 (let ((?x70 (stack L ?x69)))
 (let ((?x527 (center s____)))
 (let (($x614 (= ?x527 ?x70)))
 (let ((?x57 (stack Q (stack G (stack K (stack N empty))))))
 (let ((?x333 (left s____)))
 (let (($x615 (= ?x333 ?x57)))
 (let (($x617 (not (and $x615 $x614 $x583))))
 (not $x617))))))))))))))
(check-sat)
(exit)
