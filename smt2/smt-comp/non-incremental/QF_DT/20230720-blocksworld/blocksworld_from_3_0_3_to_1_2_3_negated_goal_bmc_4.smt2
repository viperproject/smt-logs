(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F 0)) (((A) (B) (C) (D) (E) (F))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x19 (stack F empty)))
 (let ((?x18 (stack E ?x19)))
 (let ((?x20 (stack D ?x18)))
 (let ((?x74 (left s_tmp_)))
 (= ?x74 ?x20))))))
(assert
 (let ((?x77 (center s_tmp__)))
 (= ?x77 empty)))
(assert
 (let ((?x21 (stack A empty)))
 (let ((?x22 (stack B ?x21)))
 (let ((?x23 (stack C ?x22)))
 (let ((?x80 (right s_tmp___)))
 (= ?x80 ?x23))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x107 (left s_tmp__)))
 (= (left s_tmp___) ?x107)))
(assert
 (let ((?x77 (center s_tmp__)))
 (= (center s_tmp___) ?x77)))
(assert
 (let ((?x111 (center s_tmp_)))
 (= ?x111 (center s_tmp))))
(assert
 (let ((?x114 (right s_tmp_)))
 (= ?x114 (right s_tmp))))
(assert
 (let ((?x74 (left s_tmp_)))
 (let ((?x107 (left s_tmp__)))
 (= ?x107 ?x74))))
(assert
 (let ((?x114 (right s_tmp_)))
 (let ((?x118 (right s_tmp__)))
 (= ?x118 ?x114))))
(assert
 (= c__ c!1))
(assert
 (let ((?x51 (left s_)))
 (let ((?x189 (left s__)))
 (let (($x225 (= ?x189 ?x51)))
 (let ((?x54 (right s_)))
 (let (($x195 ((_ is stack ) ?x54)))
 (let (($x198 (= c_ right-to-left)))
 (let (($x199 (and $x198 $x195)))
 (let ((?x56 (center s_)))
 (let (($x200 ((_ is stack ) ?x56)))
 (let (($x202 (and (= c_ center-to-right) $x200)))
 (let (($x204 (and (= c_ center-to-left) $x200)))
 (let (($x234 (ite $x204 (= ?x189 (stack (top ?x56) ?x51)) (ite $x202 $x225 (ite $x199 (= ?x189 (stack (top ?x54) ?x51)) $x225)))))
 (let (($x212 (= ?x189 (rest ?x51))))
 (let (($x205 ((_ is stack ) ?x51)))
 (let (($x206 (= c_ left-to-right)))
 (let (($x207 (and $x206 $x205)))
 (let (($x208 (= c_ left-to-center)))
 (let (($x209 (and $x208 $x205)))
 (ite $x209 $x212 (ite $x207 $x212 $x234)))))))))))))))))))))
(assert
 (let ((?x54 (right s_)))
 (let ((?x182 (right s__)))
 (let (($x221 (= ?x182 ?x54)))
 (let (($x218 (= ?x182 (rest ?x54))))
 (let (($x195 ((_ is stack ) ?x54)))
 (let (($x196 (= c_ right-to-center)))
 (let (($x197 (and $x196 $x195)))
 (let (($x198 (= c_ right-to-left)))
 (let (($x199 (and $x198 $x195)))
 (let ((?x56 (center s_)))
 (let (($x200 ((_ is stack ) ?x56)))
 (let (($x202 (and (= c_ center-to-right) $x200)))
 (let (($x231 (ite $x202 (= ?x182 (stack (top ?x56) ?x54)) (ite $x199 $x218 (ite $x197 $x218 $x221)))))
 (let (($x204 (and (= c_ center-to-left) $x200)))
 (let ((?x51 (left s_)))
 (let (($x205 ((_ is stack ) ?x51)))
 (let (($x206 (= c_ left-to-right)))
 (let (($x207 (and $x206 $x205)))
 (let (($x208 (= c_ left-to-center)))
 (let (($x209 (and $x208 $x205)))
 (ite $x209 (= ?x182 (stack (top ?x51) ?x54)) (ite $x207 $x221 (ite $x204 $x221 $x231))))))))))))))))))))))))
(assert
 (let ((?x56 (center s_)))
 (let ((?x179 (center s__)))
 (let (($x223 (= ?x179 ?x56)))
 (let ((?x54 (right s_)))
 (let (($x195 ((_ is stack ) ?x54)))
 (let (($x196 (= c_ right-to-center)))
 (let (($x197 (and $x196 $x195)))
 (let (($x198 (= c_ right-to-left)))
 (let (($x199 (and $x198 $x195)))
 (let (($x215 (= ?x179 (rest ?x56))))
 (let (($x200 ((_ is stack ) ?x56)))
 (let (($x202 (and (= c_ center-to-right) $x200)))
 (let (($x230 (ite $x202 $x215 (ite $x199 $x223 (ite $x197 (= ?x179 (stack (top ?x54) ?x56)) $x223)))))
 (let (($x204 (and (= c_ center-to-left) $x200)))
 (let ((?x51 (left s_)))
 (let (($x205 ((_ is stack ) ?x51)))
 (let (($x206 (= c_ left-to-right)))
 (let (($x207 (and $x206 $x205)))
 (let (($x208 (= c_ left-to-center)))
 (let (($x209 (and $x208 $x205)))
 (ite $x209 $x223 (ite $x207 (= ?x179 (stack (top ?x51) ?x56)) (ite $x204 $x215 $x230))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x189 (left s__)))
 (let ((?x121 (left s___)))
 (let (($x336 (= ?x121 ?x189)))
 (let ((?x182 (right s__)))
 (let ((?x303 (top ?x182)))
 (let ((?x304 (stack ?x303 ?x189)))
 (let (($x330 (= ?x121 ?x304)))
 (let (($x306 ((_ is stack ) ?x182)))
 (let (($x309 (= c__ right-to-left)))
 (let (($x310 (and $x309 $x306)))
 (let ((?x179 (center s__)))
 (let (($x311 ((_ is stack ) ?x179)))
 (let (($x312 (= c__ center-to-right)))
 (let (($x313 (and $x312 $x311)))
 (let ((?x299 (top ?x179)))
 (let ((?x300 (stack ?x299 ?x189)))
 (let (($x327 (= ?x121 ?x300)))
 (let (($x314 (= c__ center-to-left)))
 (let (($x315 (and $x314 $x311)))
 (let ((?x123 (rest ?x189)))
 (let (($x323 (= ?x121 ?x123)))
 (let (($x316 ((_ is stack ) ?x189)))
 (let (($x317 (= c__ left-to-right)))
 (let (($x318 (and $x317 $x316)))
 (let (($x319 (= c__ left-to-center)))
 (let (($x320 (and $x319 $x316)))
 (ite $x320 $x323 (ite $x318 $x323 (ite $x315 $x327 (ite $x313 $x336 (ite $x310 $x330 $x336))))))))))))))))))))))))))))))))
(assert
 (let ((?x182 (right s__)))
 (let ((?x124 (right s___)))
 (let (($x332 (= ?x124 ?x182)))
 (let ((?x302 (rest ?x182)))
 (let (($x329 (= ?x124 ?x302)))
 (let (($x306 ((_ is stack ) ?x182)))
 (let (($x307 (= c__ right-to-center)))
 (let (($x308 (and $x307 $x306)))
 (let (($x309 (= c__ right-to-left)))
 (let (($x310 (and $x309 $x306)))
 (let ((?x179 (center s__)))
 (let ((?x299 (top ?x179)))
 (let ((?x301 (stack ?x299 ?x182)))
 (let (($x328 (= ?x124 ?x301)))
 (let (($x311 ((_ is stack ) ?x179)))
 (let (($x312 (= c__ center-to-right)))
 (let (($x313 (and $x312 $x311)))
 (let (($x314 (= c__ center-to-left)))
 (let (($x315 (and $x314 $x311)))
 (let ((?x189 (left s__)))
 (let (($x316 ((_ is stack ) ?x189)))
 (let (($x317 (= c__ left-to-right)))
 (let (($x318 (and $x317 $x316)))
 (let (($x349 (ite $x318 $x332 (ite $x315 $x332 (ite $x313 $x328 (ite $x310 $x329 (ite $x308 $x329 $x332)))))))
 (let ((?x177 (top ?x189)))
 (let ((?x295 (stack ?x177 ?x182)))
 (let (($x324 (= ?x124 ?x295)))
 (let (($x319 (= c__ left-to-center)))
 (let (($x320 (and $x319 $x316)))
 (ite $x320 $x324 $x349)))))))))))))))))))))))))))))))
(assert
 (let ((?x179 (center s__)))
 (let ((?x296 (center s___)))
 (let (($x334 (= ?x296 ?x179)))
 (let ((?x182 (right s__)))
 (let ((?x303 (top ?x182)))
 (let ((?x305 (stack ?x303 ?x179)))
 (let (($x331 (= ?x296 ?x305)))
 (let (($x306 ((_ is stack ) ?x182)))
 (let (($x307 (= c__ right-to-center)))
 (let (($x308 (and $x307 $x306)))
 (let (($x309 (= c__ right-to-left)))
 (let (($x310 (and $x309 $x306)))
 (let ((?x298 (rest ?x179)))
 (let (($x326 (= ?x296 ?x298)))
 (let (($x311 ((_ is stack ) ?x179)))
 (let (($x312 (= c__ center-to-right)))
 (let (($x313 (and $x312 $x311)))
 (let (($x314 (= c__ center-to-left)))
 (let (($x315 (and $x314 $x311)))
 (let ((?x189 (left s__)))
 (let ((?x177 (top ?x189)))
 (let ((?x297 (stack ?x177 ?x179)))
 (let (($x325 (= ?x296 ?x297)))
 (let (($x316 ((_ is stack ) ?x189)))
 (let (($x317 (= c__ left-to-right)))
 (let (($x318 (and $x317 $x316)))
 (let (($x348 (ite $x318 $x325 (ite $x315 $x326 (ite $x313 $x326 (ite $x310 $x334 (ite $x308 $x331 $x334)))))))
 (let (($x319 (= c__ left-to-center)))
 (let (($x320 (and $x319 $x316)))
 (ite $x320 $x334 $x348)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x121 (left s___)))
 (let ((?x241 (left s____)))
 (let (($x474 (= ?x241 ?x121)))
 (let ((?x124 (right s___)))
 (let ((?x441 (top ?x124)))
 (let ((?x442 (stack ?x441 ?x121)))
 (let (($x468 (= ?x241 ?x442)))
 (let (($x444 ((_ is stack ) ?x124)))
 (let (($x447 (= c___ right-to-left)))
 (let (($x448 (and $x447 $x444)))
 (let ((?x296 (center s___)))
 (let (($x449 ((_ is stack ) ?x296)))
 (let (($x450 (= c___ center-to-right)))
 (let (($x451 (and $x450 $x449)))
 (let ((?x437 (top ?x296)))
 (let ((?x438 (stack ?x437 ?x121)))
 (let (($x465 (= ?x241 ?x438)))
 (let (($x452 (= c___ center-to-left)))
 (let (($x453 (and $x452 $x449)))
 (let ((?x272 (rest ?x121)))
 (let (($x461 (= ?x241 ?x272)))
 (let (($x454 ((_ is stack ) ?x121)))
 (let (($x455 (= c___ left-to-right)))
 (let (($x456 (and $x455 $x454)))
 (let (($x457 (= c___ left-to-center)))
 (let (($x458 (and $x457 $x454)))
 (ite $x458 $x461 (ite $x456 $x461 (ite $x453 $x465 (ite $x451 $x474 (ite $x448 $x468 $x474))))))))))))))))))))))))))))))))
(assert
 (let ((?x124 (right s___)))
 (let ((?x273 (right s____)))
 (let (($x470 (= ?x273 ?x124)))
 (let ((?x440 (rest ?x124)))
 (let (($x467 (= ?x273 ?x440)))
 (let (($x444 ((_ is stack ) ?x124)))
 (let (($x445 (= c___ right-to-center)))
 (let (($x446 (and $x445 $x444)))
 (let (($x447 (= c___ right-to-left)))
 (let (($x448 (and $x447 $x444)))
 (let ((?x296 (center s___)))
 (let ((?x437 (top ?x296)))
 (let ((?x439 (stack ?x437 ?x124)))
 (let (($x466 (= ?x273 ?x439)))
 (let (($x449 ((_ is stack ) ?x296)))
 (let (($x450 (= c___ center-to-right)))
 (let (($x451 (and $x450 $x449)))
 (let (($x452 (= c___ center-to-left)))
 (let (($x453 (and $x452 $x449)))
 (let ((?x121 (left s___)))
 (let (($x454 ((_ is stack ) ?x121)))
 (let (($x455 (= c___ left-to-right)))
 (let (($x456 (and $x455 $x454)))
 (let (($x487 (ite $x456 $x470 (ite $x453 $x470 (ite $x451 $x466 (ite $x448 $x467 (ite $x446 $x467 $x470)))))))
 (let ((?x294 (top ?x121)))
 (let ((?x433 (stack ?x294 ?x124)))
 (let (($x462 (= ?x273 ?x433)))
 (let (($x457 (= c___ left-to-center)))
 (let (($x458 (and $x457 $x454)))
 (ite $x458 $x462 $x487)))))))))))))))))))))))))))))))
(assert
 (let ((?x296 (center s___)))
 (let ((?x434 (center s____)))
 (let (($x472 (= ?x434 ?x296)))
 (let ((?x124 (right s___)))
 (let ((?x441 (top ?x124)))
 (let ((?x443 (stack ?x441 ?x296)))
 (let (($x469 (= ?x434 ?x443)))
 (let (($x444 ((_ is stack ) ?x124)))
 (let (($x445 (= c___ right-to-center)))
 (let (($x446 (and $x445 $x444)))
 (let (($x447 (= c___ right-to-left)))
 (let (($x448 (and $x447 $x444)))
 (let ((?x436 (rest ?x296)))
 (let (($x464 (= ?x434 ?x436)))
 (let (($x449 ((_ is stack ) ?x296)))
 (let (($x450 (= c___ center-to-right)))
 (let (($x451 (and $x450 $x449)))
 (let (($x452 (= c___ center-to-left)))
 (let (($x453 (and $x452 $x449)))
 (let ((?x121 (left s___)))
 (let ((?x294 (top ?x121)))
 (let ((?x435 (stack ?x294 ?x296)))
 (let (($x463 (= ?x434 ?x435)))
 (let (($x454 ((_ is stack ) ?x121)))
 (let (($x455 (= c___ left-to-right)))
 (let (($x456 (and $x455 $x454)))
 (let (($x486 (ite $x456 $x463 (ite $x453 $x464 (ite $x451 $x464 (ite $x448 $x472 (ite $x446 $x469 $x472)))))))
 (let (($x457 (= c___ left-to-center)))
 (let (($x458 (and $x457 $x454)))
 (ite $x458 $x472 $x486)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x241 (left s____)))
 (let ((?x352 (left s_____)))
 (let (($x612 (= ?x352 ?x241)))
 (let ((?x273 (right s____)))
 (let ((?x579 (top ?x273)))
 (let ((?x580 (stack ?x579 ?x241)))
 (let (($x606 (= ?x352 ?x580)))
 (let (($x582 ((_ is stack ) ?x273)))
 (let (($x585 (= c____ right-to-left)))
 (let (($x586 (and $x585 $x582)))
 (let ((?x434 (center s____)))
 (let (($x587 ((_ is stack ) ?x434)))
 (let (($x588 (= c____ center-to-right)))
 (let (($x589 (and $x588 $x587)))
 (let ((?x575 (top ?x434)))
 (let ((?x576 (stack ?x575 ?x241)))
 (let (($x603 (= ?x352 ?x576)))
 (let (($x590 (= c____ center-to-left)))
 (let (($x591 (and $x590 $x587)))
 (let ((?x385 (rest ?x241)))
 (let (($x599 (= ?x352 ?x385)))
 (let (($x592 ((_ is stack ) ?x241)))
 (let (($x593 (= c____ left-to-right)))
 (let (($x594 (and $x593 $x592)))
 (let (($x595 (= c____ left-to-center)))
 (let (($x596 (and $x595 $x592)))
 (ite $x596 $x599 (ite $x594 $x599 (ite $x591 $x603 (ite $x589 $x612 (ite $x586 $x606 $x612))))))))))))))))))))))))))))))))
(assert
 (let ((?x273 (right s____)))
 (let ((?x386 (right s_____)))
 (let (($x608 (= ?x386 ?x273)))
 (let ((?x578 (rest ?x273)))
 (let (($x605 (= ?x386 ?x578)))
 (let (($x582 ((_ is stack ) ?x273)))
 (let (($x583 (= c____ right-to-center)))
 (let (($x584 (and $x583 $x582)))
 (let (($x585 (= c____ right-to-left)))
 (let (($x586 (and $x585 $x582)))
 (let ((?x434 (center s____)))
 (let ((?x575 (top ?x434)))
 (let ((?x577 (stack ?x575 ?x273)))
 (let (($x604 (= ?x386 ?x577)))
 (let (($x587 ((_ is stack ) ?x434)))
 (let (($x588 (= c____ center-to-right)))
 (let (($x589 (and $x588 $x587)))
 (let (($x590 (= c____ center-to-left)))
 (let (($x591 (and $x590 $x587)))
 (let ((?x241 (left s____)))
 (let (($x592 ((_ is stack ) ?x241)))
 (let (($x593 (= c____ left-to-right)))
 (let (($x594 (and $x593 $x592)))
 (let (($x625 (ite $x594 $x608 (ite $x591 $x608 (ite $x589 $x604 (ite $x586 $x605 (ite $x584 $x605 $x608)))))))
 (let ((?x432 (top ?x241)))
 (let ((?x571 (stack ?x432 ?x273)))
 (let (($x600 (= ?x386 ?x571)))
 (let (($x595 (= c____ left-to-center)))
 (let (($x596 (and $x595 $x592)))
 (ite $x596 $x600 $x625)))))))))))))))))))))))))))))))
(assert
 (let ((?x434 (center s____)))
 (let ((?x572 (center s_____)))
 (let (($x610 (= ?x572 ?x434)))
 (let ((?x273 (right s____)))
 (let ((?x579 (top ?x273)))
 (let ((?x581 (stack ?x579 ?x434)))
 (let (($x607 (= ?x572 ?x581)))
 (let (($x582 ((_ is stack ) ?x273)))
 (let (($x583 (= c____ right-to-center)))
 (let (($x584 (and $x583 $x582)))
 (let (($x585 (= c____ right-to-left)))
 (let (($x586 (and $x585 $x582)))
 (let ((?x574 (rest ?x434)))
 (let (($x602 (= ?x572 ?x574)))
 (let (($x587 ((_ is stack ) ?x434)))
 (let (($x588 (= c____ center-to-right)))
 (let (($x589 (and $x588 $x587)))
 (let (($x590 (= c____ center-to-left)))
 (let (($x591 (and $x590 $x587)))
 (let ((?x241 (left s____)))
 (let ((?x432 (top ?x241)))
 (let ((?x573 (stack ?x432 ?x434)))
 (let (($x601 (= ?x572 ?x573)))
 (let (($x592 ((_ is stack ) ?x241)))
 (let (($x593 (= c____ left-to-right)))
 (let (($x594 (and $x593 $x592)))
 (let (($x624 (ite $x594 $x601 (ite $x591 $x602 (ite $x589 $x602 (ite $x586 $x610 (ite $x584 $x607 $x610)))))))
 (let (($x595 (= c____ left-to-center)))
 (let (($x596 (and $x595 $x592)))
 (ite $x596 $x610 $x624)))))))))))))))))))))))))))))))
(assert
 (let ((?x21 (stack A empty)))
 (let ((?x22 (stack B ?x21)))
 (let ((?x27 (stack D ?x22)))
 (let ((?x386 (right s_____)))
 (let (($x628 (= ?x386 ?x27)))
 (let ((?x24 (stack C empty)))
 (let ((?x26 (stack F ?x24)))
 (let ((?x572 (center s_____)))
 (let (($x659 (= ?x572 ?x26)))
 (let ((?x25 (stack E empty)))
 (let ((?x352 (left s_____)))
 (let (($x660 (= ?x352 ?x25)))
 (let (($x662 (not (and $x660 $x659 $x628))))
 (not $x662)))))))))))))))
(check-sat)
(exit)
