(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x25 (stack G empty)))
 (let ((?x24 (stack C ?x25)))
 (let ((?x26 (stack B ?x24)))
 (let ((?x27 (stack D ?x26)))
 (let ((?x28 (stack J ?x27)))
 (let ((?x29 (stack I ?x28)))
 (let ((?x30 (stack E ?x29)))
 (let ((?x31 (stack L ?x30)))
 (let ((?x32 (stack A ?x31)))
 (let ((?x94 (left s_tmp_)))
 (= ?x94 ?x32))))))))))))
(assert
 (let ((?x97 (center s_tmp__)))
 (= ?x97 empty)))
(assert
 (let ((?x33 (stack F empty)))
 (let ((?x34 (stack H ?x33)))
 (let ((?x35 (stack K ?x34)))
 (let ((?x100 (right s_tmp___)))
 (= ?x100 ?x35))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x127 (left s_tmp__)))
 (= (left s_tmp___) ?x127)))
(assert
 (let ((?x97 (center s_tmp__)))
 (= (center s_tmp___) ?x97)))
(assert
 (let ((?x131 (center s_tmp_)))
 (= ?x131 (center s_tmp))))
(assert
 (let ((?x134 (right s_tmp_)))
 (= ?x134 (right s_tmp))))
(assert
 (let ((?x94 (left s_tmp_)))
 (let ((?x127 (left s_tmp__)))
 (= ?x127 ?x94))))
(assert
 (let ((?x134 (right s_tmp_)))
 (let ((?x138 (right s_tmp__)))
 (= ?x138 ?x134))))
(assert
 (= c__ c!1))
(assert
 (let ((?x71 (left s_)))
 (let ((?x241 (left s__)))
 (let (($x262 (= ?x241 ?x71)))
 (let ((?x74 (right s_)))
 (let (($x232 ((_ is stack ) ?x74)))
 (let (($x238 (= c_ right-to-left)))
 (let (($x218 (and $x238 $x232)))
 (let ((?x76 (center s_)))
 (let (($x219 ((_ is stack ) ?x76)))
 (let (($x242 (and (= c_ center-to-right) $x219)))
 (let (($x244 (and (= c_ center-to-left) $x219)))
 (let (($x271 (ite $x244 (= ?x241 (stack (top ?x76) ?x71)) (ite $x242 $x262 (ite $x218 (= ?x241 (stack (top ?x74) ?x71)) $x262)))))
 (let (($x249 (= ?x241 (rest ?x71))))
 (let (($x221 ((_ is stack ) ?x71)))
 (let (($x222 (= c_ left-to-right)))
 (let (($x223 (and $x222 $x221)))
 (let (($x245 (= c_ left-to-center)))
 (let (($x246 (and $x245 $x221)))
 (ite $x246 $x249 (ite $x223 $x249 $x271)))))))))))))))))))))
(assert
 (let ((?x74 (right s_)))
 (let ((?x225 (right s__)))
 (let (($x258 (= ?x225 ?x74)))
 (let (($x255 (= ?x225 (rest ?x74))))
 (let (($x232 ((_ is stack ) ?x74)))
 (let (($x236 (= c_ right-to-center)))
 (let (($x237 (and $x236 $x232)))
 (let (($x238 (= c_ right-to-left)))
 (let (($x218 (and $x238 $x232)))
 (let ((?x76 (center s_)))
 (let (($x219 ((_ is stack ) ?x76)))
 (let (($x242 (and (= c_ center-to-right) $x219)))
 (let (($x268 (ite $x242 (= ?x225 (stack (top ?x76) ?x74)) (ite $x218 $x255 (ite $x237 $x255 $x258)))))
 (let (($x244 (and (= c_ center-to-left) $x219)))
 (let ((?x71 (left s_)))
 (let (($x221 ((_ is stack ) ?x71)))
 (let (($x222 (= c_ left-to-right)))
 (let (($x223 (and $x222 $x221)))
 (let (($x245 (= c_ left-to-center)))
 (let (($x246 (and $x245 $x221)))
 (ite $x246 (= ?x225 (stack (top ?x71) ?x74)) (ite $x223 $x258 (ite $x244 $x258 $x268))))))))))))))))))))))))
(assert
 (let ((?x76 (center s_)))
 (let ((?x228 (center s__)))
 (let (($x260 (= ?x228 ?x76)))
 (let ((?x74 (right s_)))
 (let (($x232 ((_ is stack ) ?x74)))
 (let (($x236 (= c_ right-to-center)))
 (let (($x237 (and $x236 $x232)))
 (let (($x238 (= c_ right-to-left)))
 (let (($x218 (and $x238 $x232)))
 (let (($x252 (= ?x228 (rest ?x76))))
 (let (($x219 ((_ is stack ) ?x76)))
 (let (($x242 (and (= c_ center-to-right) $x219)))
 (let (($x267 (ite $x242 $x252 (ite $x218 $x260 (ite $x237 (= ?x228 (stack (top ?x74) ?x76)) $x260)))))
 (let (($x244 (and (= c_ center-to-left) $x219)))
 (let ((?x71 (left s_)))
 (let (($x221 ((_ is stack ) ?x71)))
 (let (($x222 (= c_ left-to-right)))
 (let (($x223 (and $x222 $x221)))
 (let (($x245 (= c_ left-to-center)))
 (let (($x246 (and $x245 $x221)))
 (ite $x246 $x260 (ite $x223 (= ?x228 (stack (top ?x71) ?x76)) (ite $x244 $x252 $x267))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x241 (left s__)))
 (let ((?x143 (left s___)))
 (let (($x373 (= ?x143 ?x241)))
 (let ((?x225 (right s__)))
 (let ((?x340 (top ?x225)))
 (let ((?x341 (stack ?x340 ?x241)))
 (let (($x367 (= ?x143 ?x341)))
 (let (($x343 ((_ is stack ) ?x225)))
 (let (($x346 (= c__ right-to-left)))
 (let (($x347 (and $x346 $x343)))
 (let ((?x228 (center s__)))
 (let (($x348 ((_ is stack ) ?x228)))
 (let (($x349 (= c__ center-to-right)))
 (let (($x350 (and $x349 $x348)))
 (let ((?x336 (top ?x228)))
 (let ((?x337 (stack ?x336 ?x241)))
 (let (($x364 (= ?x143 ?x337)))
 (let (($x351 (= c__ center-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x144 (rest ?x241)))
 (let (($x360 (= ?x143 ?x144)))
 (let (($x353 ((_ is stack ) ?x241)))
 (let (($x354 (= c__ left-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let (($x356 (= c__ left-to-center)))
 (let (($x357 (and $x356 $x353)))
 (ite $x357 $x360 (ite $x355 $x360 (ite $x352 $x364 (ite $x350 $x373 (ite $x347 $x367 $x373))))))))))))))))))))))))))))))))
(assert
 (let ((?x225 (right s__)))
 (let ((?x214 (right s___)))
 (let (($x369 (= ?x214 ?x225)))
 (let ((?x339 (rest ?x225)))
 (let (($x366 (= ?x214 ?x339)))
 (let (($x343 ((_ is stack ) ?x225)))
 (let (($x344 (= c__ right-to-center)))
 (let (($x345 (and $x344 $x343)))
 (let (($x346 (= c__ right-to-left)))
 (let (($x347 (and $x346 $x343)))
 (let ((?x228 (center s__)))
 (let ((?x336 (top ?x228)))
 (let ((?x338 (stack ?x336 ?x225)))
 (let (($x365 (= ?x214 ?x338)))
 (let (($x348 ((_ is stack ) ?x228)))
 (let (($x349 (= c__ center-to-right)))
 (let (($x350 (and $x349 $x348)))
 (let (($x351 (= c__ center-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x241 (left s__)))
 (let (($x353 ((_ is stack ) ?x241)))
 (let (($x354 (= c__ left-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let (($x386 (ite $x355 $x369 (ite $x352 $x369 (ite $x350 $x365 (ite $x347 $x366 (ite $x345 $x366 $x369)))))))
 (let ((?x331 (top ?x241)))
 (let ((?x332 (stack ?x331 ?x225)))
 (let (($x361 (= ?x214 ?x332)))
 (let (($x356 (= c__ left-to-center)))
 (let (($x357 (and $x356 $x353)))
 (ite $x357 $x361 $x386)))))))))))))))))))))))))))))))
(assert
 (let ((?x228 (center s__)))
 (let ((?x333 (center s___)))
 (let (($x371 (= ?x333 ?x228)))
 (let ((?x225 (right s__)))
 (let ((?x340 (top ?x225)))
 (let ((?x342 (stack ?x340 ?x228)))
 (let (($x368 (= ?x333 ?x342)))
 (let (($x343 ((_ is stack ) ?x225)))
 (let (($x344 (= c__ right-to-center)))
 (let (($x345 (and $x344 $x343)))
 (let (($x346 (= c__ right-to-left)))
 (let (($x347 (and $x346 $x343)))
 (let ((?x335 (rest ?x228)))
 (let (($x363 (= ?x333 ?x335)))
 (let (($x348 ((_ is stack ) ?x228)))
 (let (($x349 (= c__ center-to-right)))
 (let (($x350 (and $x349 $x348)))
 (let (($x351 (= c__ center-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x241 (left s__)))
 (let ((?x331 (top ?x241)))
 (let ((?x334 (stack ?x331 ?x228)))
 (let (($x362 (= ?x333 ?x334)))
 (let (($x353 ((_ is stack ) ?x241)))
 (let (($x354 (= c__ left-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let (($x385 (ite $x355 $x362 (ite $x352 $x363 (ite $x350 $x363 (ite $x347 $x371 (ite $x345 $x368 $x371)))))))
 (let (($x356 (= c__ left-to-center)))
 (let (($x357 (and $x356 $x353)))
 (ite $x357 $x371 $x385)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x143 (left s___)))
 (let ((?x308 (left s____)))
 (let (($x512 (= ?x308 ?x143)))
 (let ((?x214 (right s___)))
 (let ((?x479 (top ?x214)))
 (let ((?x480 (stack ?x479 ?x143)))
 (let (($x506 (= ?x308 ?x480)))
 (let (($x482 ((_ is stack ) ?x214)))
 (let (($x485 (= c___ right-to-left)))
 (let (($x486 (and $x485 $x482)))
 (let ((?x333 (center s___)))
 (let (($x487 ((_ is stack ) ?x333)))
 (let (($x488 (= c___ center-to-right)))
 (let (($x489 (and $x488 $x487)))
 (let ((?x475 (top ?x333)))
 (let ((?x476 (stack ?x475 ?x143)))
 (let (($x503 (= ?x308 ?x476)))
 (let (($x490 (= c___ center-to-left)))
 (let (($x491 (and $x490 $x487)))
 (let ((?x309 (rest ?x143)))
 (let (($x499 (= ?x308 ?x309)))
 (let (($x492 ((_ is stack ) ?x143)))
 (let (($x493 (= c___ left-to-right)))
 (let (($x494 (and $x493 $x492)))
 (let (($x495 (= c___ left-to-center)))
 (let (($x496 (and $x495 $x492)))
 (ite $x496 $x499 (ite $x494 $x499 (ite $x491 $x503 (ite $x489 $x512 (ite $x486 $x506 $x512))))))))))))))))))))))))))))))))
(assert
 (let ((?x214 (right s___)))
 (let ((?x330 (right s____)))
 (let (($x508 (= ?x330 ?x214)))
 (let ((?x478 (rest ?x214)))
 (let (($x505 (= ?x330 ?x478)))
 (let (($x482 ((_ is stack ) ?x214)))
 (let (($x483 (= c___ right-to-center)))
 (let (($x484 (and $x483 $x482)))
 (let (($x485 (= c___ right-to-left)))
 (let (($x486 (and $x485 $x482)))
 (let ((?x333 (center s___)))
 (let ((?x475 (top ?x333)))
 (let ((?x477 (stack ?x475 ?x214)))
 (let (($x504 (= ?x330 ?x477)))
 (let (($x487 ((_ is stack ) ?x333)))
 (let (($x488 (= c___ center-to-right)))
 (let (($x489 (and $x488 $x487)))
 (let (($x490 (= c___ center-to-left)))
 (let (($x491 (and $x490 $x487)))
 (let ((?x143 (left s___)))
 (let (($x492 ((_ is stack ) ?x143)))
 (let (($x493 (= c___ left-to-right)))
 (let (($x494 (and $x493 $x492)))
 (let (($x525 (ite $x494 $x508 (ite $x491 $x508 (ite $x489 $x504 (ite $x486 $x505 (ite $x484 $x505 $x508)))))))
 (let ((?x470 (top ?x143)))
 (let ((?x471 (stack ?x470 ?x214)))
 (let (($x500 (= ?x330 ?x471)))
 (let (($x495 (= c___ left-to-center)))
 (let (($x496 (and $x495 $x492)))
 (ite $x496 $x500 $x525)))))))))))))))))))))))))))))))
(assert
 (let ((?x333 (center s___)))
 (let ((?x472 (center s____)))
 (let (($x510 (= ?x472 ?x333)))
 (let ((?x214 (right s___)))
 (let ((?x479 (top ?x214)))
 (let ((?x481 (stack ?x479 ?x333)))
 (let (($x507 (= ?x472 ?x481)))
 (let (($x482 ((_ is stack ) ?x214)))
 (let (($x483 (= c___ right-to-center)))
 (let (($x484 (and $x483 $x482)))
 (let (($x485 (= c___ right-to-left)))
 (let (($x486 (and $x485 $x482)))
 (let ((?x474 (rest ?x333)))
 (let (($x502 (= ?x472 ?x474)))
 (let (($x487 ((_ is stack ) ?x333)))
 (let (($x488 (= c___ center-to-right)))
 (let (($x489 (and $x488 $x487)))
 (let (($x490 (= c___ center-to-left)))
 (let (($x491 (and $x490 $x487)))
 (let ((?x143 (left s___)))
 (let ((?x470 (top ?x143)))
 (let ((?x473 (stack ?x470 ?x333)))
 (let (($x501 (= ?x472 ?x473)))
 (let (($x492 ((_ is stack ) ?x143)))
 (let (($x493 (= c___ left-to-right)))
 (let (($x494 (and $x493 $x492)))
 (let (($x524 (ite $x494 $x501 (ite $x491 $x502 (ite $x489 $x502 (ite $x486 $x510 (ite $x484 $x507 $x510)))))))
 (let (($x495 (= c___ left-to-center)))
 (let (($x496 (and $x495 $x492)))
 (ite $x496 $x510 $x524)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x308 (left s____)))
 (let ((?x389 (left s_____)))
 (let (($x650 (= ?x389 ?x308)))
 (let ((?x330 (right s____)))
 (let ((?x617 (top ?x330)))
 (let ((?x618 (stack ?x617 ?x308)))
 (let (($x644 (= ?x389 ?x618)))
 (let (($x620 ((_ is stack ) ?x330)))
 (let (($x623 (= c____ right-to-left)))
 (let (($x624 (and $x623 $x620)))
 (let ((?x472 (center s____)))
 (let (($x625 ((_ is stack ) ?x472)))
 (let (($x626 (= c____ center-to-right)))
 (let (($x627 (and $x626 $x625)))
 (let ((?x613 (top ?x472)))
 (let ((?x614 (stack ?x613 ?x308)))
 (let (($x641 (= ?x389 ?x614)))
 (let (($x628 (= c____ center-to-left)))
 (let (($x629 (and $x628 $x625)))
 (let ((?x422 (rest ?x308)))
 (let (($x637 (= ?x389 ?x422)))
 (let (($x630 ((_ is stack ) ?x308)))
 (let (($x631 (= c____ left-to-right)))
 (let (($x632 (and $x631 $x630)))
 (let (($x633 (= c____ left-to-center)))
 (let (($x634 (and $x633 $x630)))
 (ite $x634 $x637 (ite $x632 $x637 (ite $x629 $x641 (ite $x627 $x650 (ite $x624 $x644 $x650))))))))))))))))))))))))))))))))
(assert
 (let ((?x330 (right s____)))
 (let ((?x423 (right s_____)))
 (let (($x646 (= ?x423 ?x330)))
 (let ((?x616 (rest ?x330)))
 (let (($x643 (= ?x423 ?x616)))
 (let (($x620 ((_ is stack ) ?x330)))
 (let (($x621 (= c____ right-to-center)))
 (let (($x622 (and $x621 $x620)))
 (let (($x623 (= c____ right-to-left)))
 (let (($x624 (and $x623 $x620)))
 (let ((?x472 (center s____)))
 (let ((?x613 (top ?x472)))
 (let ((?x615 (stack ?x613 ?x330)))
 (let (($x642 (= ?x423 ?x615)))
 (let (($x625 ((_ is stack ) ?x472)))
 (let (($x626 (= c____ center-to-right)))
 (let (($x627 (and $x626 $x625)))
 (let (($x628 (= c____ center-to-left)))
 (let (($x629 (and $x628 $x625)))
 (let ((?x308 (left s____)))
 (let (($x630 ((_ is stack ) ?x308)))
 (let (($x631 (= c____ left-to-right)))
 (let (($x632 (and $x631 $x630)))
 (let (($x663 (ite $x632 $x646 (ite $x629 $x646 (ite $x627 $x642 (ite $x624 $x643 (ite $x622 $x643 $x646)))))))
 (let ((?x469 (top ?x308)))
 (let ((?x609 (stack ?x469 ?x330)))
 (let (($x638 (= ?x423 ?x609)))
 (let (($x633 (= c____ left-to-center)))
 (let (($x634 (and $x633 $x630)))
 (ite $x634 $x638 $x663)))))))))))))))))))))))))))))))
(assert
 (let ((?x472 (center s____)))
 (let ((?x610 (center s_____)))
 (let (($x648 (= ?x610 ?x472)))
 (let ((?x330 (right s____)))
 (let ((?x617 (top ?x330)))
 (let ((?x619 (stack ?x617 ?x472)))
 (let (($x645 (= ?x610 ?x619)))
 (let (($x620 ((_ is stack ) ?x330)))
 (let (($x621 (= c____ right-to-center)))
 (let (($x622 (and $x621 $x620)))
 (let (($x623 (= c____ right-to-left)))
 (let (($x624 (and $x623 $x620)))
 (let ((?x612 (rest ?x472)))
 (let (($x640 (= ?x610 ?x612)))
 (let (($x625 ((_ is stack ) ?x472)))
 (let (($x626 (= c____ center-to-right)))
 (let (($x627 (and $x626 $x625)))
 (let (($x628 (= c____ center-to-left)))
 (let (($x629 (and $x628 $x625)))
 (let ((?x308 (left s____)))
 (let ((?x469 (top ?x308)))
 (let ((?x611 (stack ?x469 ?x472)))
 (let (($x639 (= ?x610 ?x611)))
 (let (($x630 ((_ is stack ) ?x308)))
 (let (($x631 (= c____ left-to-right)))
 (let (($x632 (and $x631 $x630)))
 (let (($x662 (ite $x632 $x639 (ite $x629 $x640 (ite $x627 $x640 (ite $x624 $x648 (ite $x622 $x645 $x648)))))))
 (let (($x633 (= c____ left-to-center)))
 (let (($x634 (and $x633 $x630)))
 (ite $x634 $x648 $x662)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x389 (left s_____)))
 (let ((?x528 (left s______)))
 (let (($x788 (= ?x528 ?x389)))
 (let ((?x423 (right s_____)))
 (let ((?x755 (top ?x423)))
 (let ((?x756 (stack ?x755 ?x389)))
 (let (($x782 (= ?x528 ?x756)))
 (let (($x758 ((_ is stack ) ?x423)))
 (let (($x761 (= c_____ right-to-left)))
 (let (($x762 (and $x761 $x758)))
 (let ((?x610 (center s_____)))
 (let (($x763 ((_ is stack ) ?x610)))
 (let (($x764 (= c_____ center-to-right)))
 (let (($x765 (and $x764 $x763)))
 (let ((?x751 (top ?x610)))
 (let ((?x752 (stack ?x751 ?x389)))
 (let (($x779 (= ?x528 ?x752)))
 (let (($x766 (= c_____ center-to-left)))
 (let (($x767 (and $x766 $x763)))
 (let ((?x561 (rest ?x389)))
 (let (($x775 (= ?x528 ?x561)))
 (let (($x768 ((_ is stack ) ?x389)))
 (let (($x769 (= c_____ left-to-right)))
 (let (($x770 (and $x769 $x768)))
 (let (($x771 (= c_____ left-to-center)))
 (let (($x772 (and $x771 $x768)))
 (ite $x772 $x775 (ite $x770 $x775 (ite $x767 $x779 (ite $x765 $x788 (ite $x762 $x782 $x788))))))))))))))))))))))))))))))))
(assert
 (let ((?x423 (right s_____)))
 (let ((?x562 (right s______)))
 (let (($x784 (= ?x562 ?x423)))
 (let ((?x754 (rest ?x423)))
 (let (($x781 (= ?x562 ?x754)))
 (let (($x758 ((_ is stack ) ?x423)))
 (let (($x759 (= c_____ right-to-center)))
 (let (($x760 (and $x759 $x758)))
 (let (($x761 (= c_____ right-to-left)))
 (let (($x762 (and $x761 $x758)))
 (let ((?x610 (center s_____)))
 (let ((?x751 (top ?x610)))
 (let ((?x753 (stack ?x751 ?x423)))
 (let (($x780 (= ?x562 ?x753)))
 (let (($x763 ((_ is stack ) ?x610)))
 (let (($x764 (= c_____ center-to-right)))
 (let (($x765 (and $x764 $x763)))
 (let (($x766 (= c_____ center-to-left)))
 (let (($x767 (and $x766 $x763)))
 (let ((?x389 (left s_____)))
 (let (($x768 ((_ is stack ) ?x389)))
 (let (($x769 (= c_____ left-to-right)))
 (let (($x770 (and $x769 $x768)))
 (let (($x801 (ite $x770 $x784 (ite $x767 $x784 (ite $x765 $x780 (ite $x762 $x781 (ite $x760 $x781 $x784)))))))
 (let ((?x608 (top ?x389)))
 (let ((?x747 (stack ?x608 ?x423)))
 (let (($x776 (= ?x562 ?x747)))
 (let (($x771 (= c_____ left-to-center)))
 (let (($x772 (and $x771 $x768)))
 (ite $x772 $x776 $x801)))))))))))))))))))))))))))))))
(assert
 (let ((?x610 (center s_____)))
 (let ((?x748 (center s______)))
 (let (($x786 (= ?x748 ?x610)))
 (let ((?x423 (right s_____)))
 (let ((?x755 (top ?x423)))
 (let ((?x757 (stack ?x755 ?x610)))
 (let (($x783 (= ?x748 ?x757)))
 (let (($x758 ((_ is stack ) ?x423)))
 (let (($x759 (= c_____ right-to-center)))
 (let (($x760 (and $x759 $x758)))
 (let (($x761 (= c_____ right-to-left)))
 (let (($x762 (and $x761 $x758)))
 (let ((?x750 (rest ?x610)))
 (let (($x778 (= ?x748 ?x750)))
 (let (($x763 ((_ is stack ) ?x610)))
 (let (($x764 (= c_____ center-to-right)))
 (let (($x765 (and $x764 $x763)))
 (let (($x766 (= c_____ center-to-left)))
 (let (($x767 (and $x766 $x763)))
 (let ((?x389 (left s_____)))
 (let ((?x608 (top ?x389)))
 (let ((?x749 (stack ?x608 ?x610)))
 (let (($x777 (= ?x748 ?x749)))
 (let (($x768 ((_ is stack ) ?x389)))
 (let (($x769 (= c_____ left-to-right)))
 (let (($x770 (and $x769 $x768)))
 (let (($x800 (ite $x770 $x777 (ite $x767 $x778 (ite $x765 $x778 (ite $x762 $x786 (ite $x760 $x783 $x786)))))))
 (let (($x771 (= c_____ left-to-center)))
 (let (($x772 (and $x771 $x768)))
 (ite $x772 $x786 $x800)))))))))))))))))))))))))))))))
(assert
 (let ((?x47 (stack H empty)))
 (let ((?x562 (right s______)))
 (let (($x804 (= ?x562 ?x47)))
 (let ((?x748 (center s______)))
 (let (($x835 (= ?x748 empty)))
 (let ((?x41 (stack I (stack L (stack D (stack F (stack G (stack K empty))))))))
 (let ((?x46 (stack C (stack B (stack J (stack A (stack E ?x41)))))))
 (let ((?x528 (left s______)))
 (let (($x836 (= ?x528 ?x46)))
 (let (($x838 (not (and $x836 $x835 $x804))))
 (not $x838))))))))))))
(check-sat)
(exit)
