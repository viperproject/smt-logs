(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat) 
(declare-datatypes ((Enum_A_B 0)) (((A) (B))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x62 (left s_tmp_)))
 (= ?x62 empty)))
(assert
 (let ((?x15 (stack A empty)))
 (let ((?x14 (stack B ?x15)))
 (let ((?x65 (center s_tmp__)))
 (= ?x65 ?x14)))))
(assert
 (let ((?x68 (right s_tmp___)))
 (= ?x68 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x95 (left s_tmp__)))
 (= (left s_tmp___) ?x95)))
(assert
 (let ((?x65 (center s_tmp__)))
 (= (center s_tmp___) ?x65)))
(assert
 (let ((?x99 (center s_tmp_)))
 (= ?x99 (center s_tmp))))
(assert
 (let ((?x102 (right s_tmp_)))
 (= ?x102 (right s_tmp))))
(assert
 (let ((?x62 (left s_tmp_)))
 (let ((?x95 (left s_tmp__)))
 (= ?x95 ?x62))))
(assert
 (let ((?x102 (right s_tmp_)))
 (let ((?x106 (right s_tmp__)))
 (= ?x106 ?x102))))
(assert
 (= c__ c!1))
(assert
 (let ((?x39 (left s_)))
 (let ((?x155 (left s__)))
 (let (($x200 (= ?x155 ?x39)))
 (let ((?x42 (right s_)))
 (let (($x170 ((_ is stack ) ?x42)))
 (let (($x174 (and (= c_ right-to-left) $x170)))
 (let ((?x44 (center s_)))
 (let (($x175 ((_ is stack ) ?x44)))
 (let (($x176 (= c_ center-to-right)))
 (let (($x177 (and $x176 $x175)))
 (let (($x178 (= c_ center-to-left)))
 (let (($x179 (and $x178 $x175)))
 (let (($x209 (ite $x179 (= ?x155 (stack (top ?x44) ?x39)) (ite $x177 $x200 (ite $x174 (= ?x155 (stack (top ?x42) ?x39)) $x200)))))
 (let (($x187 (= ?x155 (rest ?x39))))
 (let (($x180 ((_ is stack ) ?x39)))
 (let (($x182 (and (= c_ left-to-right) $x180)))
 (let (($x184 (and (= c_ left-to-center) $x180)))
 (ite $x184 $x187 (ite $x182 $x187 $x209))))))))))))))))))))
(assert
 (let ((?x42 (right s_)))
 (let ((?x157 (right s__)))
 (let (($x196 (= ?x157 ?x42)))
 (let (($x193 (= ?x157 (rest ?x42))))
 (let (($x170 ((_ is stack ) ?x42)))
 (let (($x172 (and (= c_ right-to-center) $x170)))
 (let (($x174 (and (= c_ right-to-left) $x170)))
 (let ((?x44 (center s_)))
 (let (($x175 ((_ is stack ) ?x44)))
 (let (($x176 (= c_ center-to-right)))
 (let (($x177 (and $x176 $x175)))
 (let (($x206 (ite $x177 (= ?x157 (stack (top ?x44) ?x42)) (ite $x174 $x193 (ite $x172 $x193 $x196)))))
 (let (($x178 (= c_ center-to-left)))
 (let (($x179 (and $x178 $x175)))
 (let ((?x39 (left s_)))
 (let (($x180 ((_ is stack ) ?x39)))
 (let (($x182 (and (= c_ left-to-right) $x180)))
 (let (($x184 (and (= c_ left-to-center) $x180)))
 (ite $x184 (= ?x157 (stack (top ?x39) ?x42)) (ite $x182 $x196 (ite $x179 $x196 $x206))))))))))))))))))))))
(assert
 (let ((?x44 (center s_)))
 (let ((?x160 (center s__)))
 (let (($x198 (= ?x160 ?x44)))
 (let ((?x42 (right s_)))
 (let (($x170 ((_ is stack ) ?x42)))
 (let (($x172 (and (= c_ right-to-center) $x170)))
 (let (($x174 (and (= c_ right-to-left) $x170)))
 (let (($x190 (= ?x160 (rest ?x44))))
 (let (($x175 ((_ is stack ) ?x44)))
 (let (($x176 (= c_ center-to-right)))
 (let (($x177 (and $x176 $x175)))
 (let (($x205 (ite $x177 $x190 (ite $x174 $x198 (ite $x172 (= ?x160 (stack (top ?x42) ?x44)) $x198)))))
 (let (($x178 (= c_ center-to-left)))
 (let (($x179 (and $x178 $x175)))
 (let ((?x39 (left s_)))
 (let (($x180 ((_ is stack ) ?x39)))
 (let (($x182 (and (= c_ left-to-right) $x180)))
 (let (($x184 (and (= c_ left-to-center) $x180)))
 (ite $x184 $x198 (ite $x182 (= ?x160 (stack (top ?x39) ?x44)) (ite $x179 $x190 $x205))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x155 (left s__)))
 (let ((?x111 (left s___)))
 (let (($x291 (= ?x111 ?x155)))
 (let ((?x157 (right s__)))
 (let ((?x258 (top ?x157)))
 (let ((?x259 (stack ?x258 ?x155)))
 (let (($x285 (= ?x111 ?x259)))
 (let (($x261 ((_ is stack ) ?x157)))
 (let (($x264 (= c__ right-to-left)))
 (let (($x265 (and $x264 $x261)))
 (let ((?x160 (center s__)))
 (let (($x266 ((_ is stack ) ?x160)))
 (let (($x267 (= c__ center-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let ((?x254 (top ?x160)))
 (let ((?x255 (stack ?x254 ?x155)))
 (let (($x282 (= ?x111 ?x255)))
 (let (($x269 (= c__ center-to-left)))
 (let (($x270 (and $x269 $x266)))
 (let ((?x112 (rest ?x155)))
 (let (($x278 (= ?x111 ?x112)))
 (let (($x271 ((_ is stack ) ?x155)))
 (let (($x272 (= c__ left-to-right)))
 (let (($x273 (and $x272 $x271)))
 (let (($x274 (= c__ left-to-center)))
 (let (($x275 (and $x274 $x271)))
 (ite $x275 $x278 (ite $x273 $x278 (ite $x270 $x282 (ite $x268 $x291 (ite $x265 $x285 $x291))))))))))))))))))))))))))))))))
(assert
 (let ((?x157 (right s__)))
 (let ((?x152 (right s___)))
 (let (($x287 (= ?x152 ?x157)))
 (let ((?x257 (rest ?x157)))
 (let (($x284 (= ?x152 ?x257)))
 (let (($x261 ((_ is stack ) ?x157)))
 (let (($x262 (= c__ right-to-center)))
 (let (($x263 (and $x262 $x261)))
 (let (($x264 (= c__ right-to-left)))
 (let (($x265 (and $x264 $x261)))
 (let ((?x160 (center s__)))
 (let ((?x254 (top ?x160)))
 (let ((?x256 (stack ?x254 ?x157)))
 (let (($x283 (= ?x152 ?x256)))
 (let (($x266 ((_ is stack ) ?x160)))
 (let (($x267 (= c__ center-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let (($x269 (= c__ center-to-left)))
 (let (($x270 (and $x269 $x266)))
 (let ((?x155 (left s__)))
 (let (($x271 ((_ is stack ) ?x155)))
 (let (($x272 (= c__ left-to-right)))
 (let (($x273 (and $x272 $x271)))
 (let (($x304 (ite $x273 $x287 (ite $x270 $x287 (ite $x268 $x283 (ite $x265 $x284 (ite $x263 $x284 $x287)))))))
 (let ((?x249 (top ?x155)))
 (let ((?x250 (stack ?x249 ?x157)))
 (let (($x279 (= ?x152 ?x250)))
 (let (($x274 (= c__ left-to-center)))
 (let (($x275 (and $x274 $x271)))
 (ite $x275 $x279 $x304)))))))))))))))))))))))))))))))
(assert
 (let ((?x160 (center s__)))
 (let ((?x251 (center s___)))
 (let (($x289 (= ?x251 ?x160)))
 (let ((?x157 (right s__)))
 (let ((?x258 (top ?x157)))
 (let ((?x260 (stack ?x258 ?x160)))
 (let (($x286 (= ?x251 ?x260)))
 (let (($x261 ((_ is stack ) ?x157)))
 (let (($x262 (= c__ right-to-center)))
 (let (($x263 (and $x262 $x261)))
 (let (($x264 (= c__ right-to-left)))
 (let (($x265 (and $x264 $x261)))
 (let ((?x253 (rest ?x160)))
 (let (($x281 (= ?x251 ?x253)))
 (let (($x266 ((_ is stack ) ?x160)))
 (let (($x267 (= c__ center-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let (($x269 (= c__ center-to-left)))
 (let (($x270 (and $x269 $x266)))
 (let ((?x155 (left s__)))
 (let ((?x249 (top ?x155)))
 (let ((?x252 (stack ?x249 ?x160)))
 (let (($x280 (= ?x251 ?x252)))
 (let (($x271 ((_ is stack ) ?x155)))
 (let (($x272 (= c__ left-to-right)))
 (let (($x273 (and $x272 $x271)))
 (let (($x303 (ite $x273 $x280 (ite $x270 $x281 (ite $x268 $x281 (ite $x265 $x289 (ite $x263 $x286 $x289)))))))
 (let (($x274 (= c__ left-to-center)))
 (let (($x275 (and $x274 $x271)))
 (ite $x275 $x289 $x303)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x111 (left s___)))
 (let ((?x231 (left s____)))
 (let (($x430 (= ?x231 ?x111)))
 (let ((?x152 (right s___)))
 (let ((?x397 (top ?x152)))
 (let ((?x398 (stack ?x397 ?x111)))
 (let (($x424 (= ?x231 ?x398)))
 (let (($x400 ((_ is stack ) ?x152)))
 (let (($x403 (= c___ right-to-left)))
 (let (($x404 (and $x403 $x400)))
 (let ((?x251 (center s___)))
 (let (($x405 ((_ is stack ) ?x251)))
 (let (($x406 (= c___ center-to-right)))
 (let (($x407 (and $x406 $x405)))
 (let ((?x393 (top ?x251)))
 (let ((?x394 (stack ?x393 ?x111)))
 (let (($x421 (= ?x231 ?x394)))
 (let (($x408 (= c___ center-to-left)))
 (let (($x409 (and $x408 $x405)))
 (let ((?x232 (rest ?x111)))
 (let (($x417 (= ?x231 ?x232)))
 (let (($x410 ((_ is stack ) ?x111)))
 (let (($x411 (= c___ left-to-right)))
 (let (($x412 (and $x411 $x410)))
 (let (($x413 (= c___ left-to-center)))
 (let (($x414 (and $x413 $x410)))
 (ite $x414 $x417 (ite $x412 $x417 (ite $x409 $x421 (ite $x407 $x430 (ite $x404 $x424 $x430))))))))))))))))))))))))))))))))
(assert
 (let ((?x152 (right s___)))
 (let ((?x248 (right s____)))
 (let (($x426 (= ?x248 ?x152)))
 (let ((?x396 (rest ?x152)))
 (let (($x423 (= ?x248 ?x396)))
 (let (($x400 ((_ is stack ) ?x152)))
 (let (($x401 (= c___ right-to-center)))
 (let (($x402 (and $x401 $x400)))
 (let (($x403 (= c___ right-to-left)))
 (let (($x404 (and $x403 $x400)))
 (let ((?x251 (center s___)))
 (let ((?x393 (top ?x251)))
 (let ((?x395 (stack ?x393 ?x152)))
 (let (($x422 (= ?x248 ?x395)))
 (let (($x405 ((_ is stack ) ?x251)))
 (let (($x406 (= c___ center-to-right)))
 (let (($x407 (and $x406 $x405)))
 (let (($x408 (= c___ center-to-left)))
 (let (($x409 (and $x408 $x405)))
 (let ((?x111 (left s___)))
 (let (($x410 ((_ is stack ) ?x111)))
 (let (($x411 (= c___ left-to-right)))
 (let (($x412 (and $x411 $x410)))
 (let (($x443 (ite $x412 $x426 (ite $x409 $x426 (ite $x407 $x422 (ite $x404 $x423 (ite $x402 $x423 $x426)))))))
 (let ((?x388 (top ?x111)))
 (let ((?x389 (stack ?x388 ?x152)))
 (let (($x418 (= ?x248 ?x389)))
 (let (($x413 (= c___ left-to-center)))
 (let (($x414 (and $x413 $x410)))
 (ite $x414 $x418 $x443)))))))))))))))))))))))))))))))
(assert
 (let ((?x251 (center s___)))
 (let ((?x390 (center s____)))
 (let (($x428 (= ?x390 ?x251)))
 (let ((?x152 (right s___)))
 (let ((?x397 (top ?x152)))
 (let ((?x399 (stack ?x397 ?x251)))
 (let (($x425 (= ?x390 ?x399)))
 (let (($x400 ((_ is stack ) ?x152)))
 (let (($x401 (= c___ right-to-center)))
 (let (($x402 (and $x401 $x400)))
 (let (($x403 (= c___ right-to-left)))
 (let (($x404 (and $x403 $x400)))
 (let ((?x392 (rest ?x251)))
 (let (($x420 (= ?x390 ?x392)))
 (let (($x405 ((_ is stack ) ?x251)))
 (let (($x406 (= c___ center-to-right)))
 (let (($x407 (and $x406 $x405)))
 (let (($x408 (= c___ center-to-left)))
 (let (($x409 (and $x408 $x405)))
 (let ((?x111 (left s___)))
 (let ((?x388 (top ?x111)))
 (let ((?x391 (stack ?x388 ?x251)))
 (let (($x419 (= ?x390 ?x391)))
 (let (($x410 ((_ is stack ) ?x111)))
 (let (($x411 (= c___ left-to-right)))
 (let (($x412 (and $x411 $x410)))
 (let (($x442 (ite $x412 $x419 (ite $x409 $x420 (ite $x407 $x420 (ite $x404 $x428 (ite $x402 $x425 $x428)))))))
 (let (($x413 (= c___ left-to-center)))
 (let (($x414 (and $x413 $x410)))
 (ite $x414 $x428 $x442)))))))))))))))))))))))))))))))
(assert
 (let ((?x248 (right s____)))
 (let (($x446 (= ?x248 empty)))
 (let ((?x390 (center s____)))
 (let (($x477 (= ?x390 empty)))
 (let ((?x15 (stack A empty)))
 (let ((?x14 (stack B ?x15)))
 (let ((?x231 (left s____)))
 (let (($x478 (= ?x231 ?x14)))
 (let (($x480 (not (and $x478 $x477 $x446))))
 (not $x480)))))))))))
(check-sat)
(exit)
