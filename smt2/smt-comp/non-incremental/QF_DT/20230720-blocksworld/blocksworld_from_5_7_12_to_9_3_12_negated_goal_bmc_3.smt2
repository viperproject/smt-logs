(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V) (W) (X))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x36 (stack J empty)))
 (let ((?x37 (stack X ?x36)))
 (let ((?x38 (stack A ?x37)))
 (let ((?x39 (stack U ?x38)))
 (let ((?x40 (stack B ?x39)))
 (let ((?x130 (left s_tmp_)))
 (= ?x130 ?x40))))))))
(assert
 (let ((?x41 (stack I empty)))
 (let ((?x42 (stack O ?x41)))
 (let ((?x43 (stack Q ?x42)))
 (let ((?x44 (stack D ?x43)))
 (let ((?x45 (stack S ?x44)))
 (let ((?x46 (stack L ?x45)))
 (let ((?x47 (stack M ?x46)))
 (let ((?x133 (center s_tmp__)))
 (= ?x133 ?x47))))))))))
(assert
 (let ((?x48 (stack C empty)))
 (let ((?x49 (stack E ?x48)))
 (let ((?x50 (stack F ?x49)))
 (let ((?x51 (stack G ?x50)))
 (let ((?x52 (stack H ?x51)))
 (let ((?x53 (stack K ?x52)))
 (let ((?x54 (stack N ?x53)))
 (let ((?x55 (stack P ?x54)))
 (let ((?x56 (stack R ?x55)))
 (let ((?x57 (stack T ?x56)))
 (let ((?x58 (stack V ?x57)))
 (let ((?x59 (stack W ?x58)))
 (let ((?x136 (right s_tmp___)))
 (= ?x136 ?x59)))))))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x163 (left s_tmp__)))
 (= (left s_tmp___) ?x163)))
(assert
 (let ((?x133 (center s_tmp__)))
 (= (center s_tmp___) ?x133)))
(assert
 (let ((?x167 (center s_tmp_)))
 (= ?x167 (center s_tmp))))
(assert
 (let ((?x170 (right s_tmp_)))
 (= ?x170 (right s_tmp))))
(assert
 (let ((?x130 (left s_tmp_)))
 (let ((?x163 (left s_tmp__)))
 (= ?x163 ?x130))))
(assert
 (let ((?x170 (right s_tmp_)))
 (let ((?x174 (right s_tmp__)))
 (= ?x174 ?x170))))
(assert
 (= c__ c!1))
(assert
 (let ((?x107 (left s_)))
 (let ((?x320 (left s__)))
 (let (($x299 (= ?x320 ?x107)))
 (let ((?x110 (right s_)))
 (let (($x335 ((_ is stack ) ?x110)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x291 (and $x326 $x335)))
 (let ((?x112 (center s_)))
 (let (($x292 ((_ is stack ) ?x112)))
 (let (($x293 (= c_ center-to-right)))
 (let (($x339 (and $x293 $x292)))
 (let (($x340 (= c_ center-to-left)))
 (let (($x341 (and $x340 $x292)))
 (let (($x311 (ite $x341 (= ?x320 (stack (top ?x112) ?x107)) (ite $x339 $x299 (ite $x291 (= ?x320 (stack (top ?x110) ?x107)) $x299)))))
 (let (($x331 (= ?x320 (rest ?x107))))
 (let (($x300 ((_ is stack ) ?x107)))
 (let (($x301 (= c_ left-to-right)))
 (let (($x302 (and $x301 $x300)))
 (let (($x315 (= c_ left-to-center)))
 (let (($x316 (and $x315 $x300)))
 (ite $x316 $x331 (ite $x302 $x331 $x311)))))))))))))))))))))))
(assert
 (let ((?x110 (right s_)))
 (let ((?x313 (right s__)))
 (let (($x337 (= ?x313 ?x110)))
 (let (($x295 (= ?x313 (rest ?x110))))
 (let (($x335 ((_ is stack ) ?x110)))
 (let (($x324 (= c_ right-to-center)))
 (let (($x325 (and $x324 $x335)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x291 (and $x326 $x335)))
 (let ((?x112 (center s_)))
 (let (($x292 ((_ is stack ) ?x112)))
 (let (($x293 (= c_ center-to-right)))
 (let (($x339 (and $x293 $x292)))
 (let (($x308 (ite $x339 (= ?x313 (stack (top ?x112) ?x110)) (ite $x291 $x295 (ite $x325 $x295 $x337)))))
 (let (($x340 (= c_ center-to-left)))
 (let (($x341 (and $x340 $x292)))
 (let ((?x107 (left s_)))
 (let (($x300 ((_ is stack ) ?x107)))
 (let (($x301 (= c_ left-to-right)))
 (let (($x302 (and $x301 $x300)))
 (let (($x315 (= c_ left-to-center)))
 (let (($x316 (and $x315 $x300)))
 (ite $x316 (= ?x313 (stack (top ?x107) ?x110)) (ite $x302 $x337 (ite $x341 $x337 $x308))))))))))))))))))))))))))
(assert
 (let ((?x112 (center s_)))
 (let ((?x322 (center s__)))
 (let (($x297 (= ?x322 ?x112)))
 (let ((?x110 (right s_)))
 (let (($x335 ((_ is stack ) ?x110)))
 (let (($x324 (= c_ right-to-center)))
 (let (($x325 (and $x324 $x335)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x291 (and $x326 $x335)))
 (let (($x343 (= ?x322 (rest ?x112))))
 (let (($x292 ((_ is stack ) ?x112)))
 (let (($x293 (= c_ center-to-right)))
 (let (($x339 (and $x293 $x292)))
 (let (($x307 (ite $x339 $x343 (ite $x291 $x297 (ite $x325 (= ?x322 (stack (top ?x110) ?x112)) $x297)))))
 (let (($x340 (= c_ center-to-left)))
 (let (($x341 (and $x340 $x292)))
 (let ((?x107 (left s_)))
 (let (($x300 ((_ is stack ) ?x107)))
 (let (($x301 (= c_ left-to-right)))
 (let (($x302 (and $x301 $x300)))
 (let (($x315 (= c_ left-to-center)))
 (let (($x316 (and $x315 $x300)))
 (ite $x316 $x297 (ite $x302 (= ?x322 (stack (top ?x107) ?x112)) (ite $x341 $x343 $x307))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x320 (left s__)))
 (let ((?x177 (left s___)))
 (let (($x464 (= ?x177 ?x320)))
 (let ((?x313 (right s__)))
 (let ((?x431 (top ?x313)))
 (let ((?x432 (stack ?x431 ?x320)))
 (let (($x458 (= ?x177 ?x432)))
 (let (($x434 ((_ is stack ) ?x313)))
 (let (($x437 (= c__ right-to-left)))
 (let (($x438 (and $x437 $x434)))
 (let ((?x322 (center s__)))
 (let (($x439 ((_ is stack ) ?x322)))
 (let (($x440 (= c__ center-to-right)))
 (let (($x441 (and $x440 $x439)))
 (let ((?x427 (top ?x322)))
 (let ((?x428 (stack ?x427 ?x320)))
 (let (($x455 (= ?x177 ?x428)))
 (let (($x442 (= c__ center-to-left)))
 (let (($x443 (and $x442 $x439)))
 (let ((?x179 (rest ?x320)))
 (let (($x451 (= ?x177 ?x179)))
 (let (($x444 ((_ is stack ) ?x320)))
 (let (($x445 (= c__ left-to-right)))
 (let (($x446 (and $x445 $x444)))
 (let (($x447 (= c__ left-to-center)))
 (let (($x448 (and $x447 $x444)))
 (ite $x448 $x451 (ite $x446 $x451 (ite $x443 $x455 (ite $x441 $x464 (ite $x438 $x458 $x464))))))))))))))))))))))))))))))))
(assert
 (let ((?x313 (right s__)))
 (let ((?x180 (right s___)))
 (let (($x460 (= ?x180 ?x313)))
 (let ((?x430 (rest ?x313)))
 (let (($x457 (= ?x180 ?x430)))
 (let (($x434 ((_ is stack ) ?x313)))
 (let (($x435 (= c__ right-to-center)))
 (let (($x436 (and $x435 $x434)))
 (let (($x437 (= c__ right-to-left)))
 (let (($x438 (and $x437 $x434)))
 (let ((?x322 (center s__)))
 (let ((?x427 (top ?x322)))
 (let ((?x429 (stack ?x427 ?x313)))
 (let (($x456 (= ?x180 ?x429)))
 (let (($x439 ((_ is stack ) ?x322)))
 (let (($x440 (= c__ center-to-right)))
 (let (($x441 (and $x440 $x439)))
 (let (($x442 (= c__ center-to-left)))
 (let (($x443 (and $x442 $x439)))
 (let ((?x320 (left s__)))
 (let (($x444 ((_ is stack ) ?x320)))
 (let (($x445 (= c__ left-to-right)))
 (let (($x446 (and $x445 $x444)))
 (let (($x477 (ite $x446 $x460 (ite $x443 $x460 (ite $x441 $x456 (ite $x438 $x457 (ite $x436 $x457 $x460)))))))
 (let ((?x287 (top ?x320)))
 (let ((?x423 (stack ?x287 ?x313)))
 (let (($x452 (= ?x180 ?x423)))
 (let (($x447 (= c__ left-to-center)))
 (let (($x448 (and $x447 $x444)))
 (ite $x448 $x452 $x477)))))))))))))))))))))))))))))))
(assert
 (let ((?x322 (center s__)))
 (let ((?x424 (center s___)))
 (let (($x462 (= ?x424 ?x322)))
 (let ((?x313 (right s__)))
 (let ((?x431 (top ?x313)))
 (let ((?x433 (stack ?x431 ?x322)))
 (let (($x459 (= ?x424 ?x433)))
 (let (($x434 ((_ is stack ) ?x313)))
 (let (($x435 (= c__ right-to-center)))
 (let (($x436 (and $x435 $x434)))
 (let (($x437 (= c__ right-to-left)))
 (let (($x438 (and $x437 $x434)))
 (let ((?x426 (rest ?x322)))
 (let (($x454 (= ?x424 ?x426)))
 (let (($x439 ((_ is stack ) ?x322)))
 (let (($x440 (= c__ center-to-right)))
 (let (($x441 (and $x440 $x439)))
 (let (($x442 (= c__ center-to-left)))
 (let (($x443 (and $x442 $x439)))
 (let ((?x320 (left s__)))
 (let ((?x287 (top ?x320)))
 (let ((?x425 (stack ?x287 ?x322)))
 (let (($x453 (= ?x424 ?x425)))
 (let (($x444 ((_ is stack ) ?x320)))
 (let (($x445 (= c__ left-to-right)))
 (let (($x446 (and $x445 $x444)))
 (let (($x476 (ite $x446 $x453 (ite $x443 $x454 (ite $x441 $x454 (ite $x438 $x462 (ite $x436 $x459 $x462)))))))
 (let (($x447 (= c__ left-to-center)))
 (let (($x448 (and $x447 $x444)))
 (ite $x448 $x462 $x476)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x177 (left s___)))
 (let ((?x351 (left s____)))
 (let (($x602 (= ?x351 ?x177)))
 (let ((?x180 (right s___)))
 (let ((?x569 (top ?x180)))
 (let ((?x570 (stack ?x569 ?x177)))
 (let (($x596 (= ?x351 ?x570)))
 (let (($x572 ((_ is stack ) ?x180)))
 (let (($x575 (= c___ right-to-left)))
 (let (($x576 (and $x575 $x572)))
 (let ((?x424 (center s___)))
 (let (($x577 ((_ is stack ) ?x424)))
 (let (($x578 (= c___ center-to-right)))
 (let (($x579 (and $x578 $x577)))
 (let ((?x565 (top ?x424)))
 (let ((?x566 (stack ?x565 ?x177)))
 (let (($x593 (= ?x351 ?x566)))
 (let (($x580 (= c___ center-to-left)))
 (let (($x581 (and $x580 $x577)))
 (let ((?x393 (rest ?x177)))
 (let (($x589 (= ?x351 ?x393)))
 (let (($x582 ((_ is stack ) ?x177)))
 (let (($x583 (= c___ left-to-right)))
 (let (($x584 (and $x583 $x582)))
 (let (($x585 (= c___ left-to-center)))
 (let (($x586 (and $x585 $x582)))
 (ite $x586 $x589 (ite $x584 $x589 (ite $x581 $x593 (ite $x579 $x602 (ite $x576 $x596 $x602))))))))))))))))))))))))))))))))
(assert
 (let ((?x180 (right s___)))
 (let ((?x394 (right s____)))
 (let (($x598 (= ?x394 ?x180)))
 (let ((?x568 (rest ?x180)))
 (let (($x595 (= ?x394 ?x568)))
 (let (($x572 ((_ is stack ) ?x180)))
 (let (($x573 (= c___ right-to-center)))
 (let (($x574 (and $x573 $x572)))
 (let (($x575 (= c___ right-to-left)))
 (let (($x576 (and $x575 $x572)))
 (let ((?x424 (center s___)))
 (let ((?x565 (top ?x424)))
 (let ((?x567 (stack ?x565 ?x180)))
 (let (($x594 (= ?x394 ?x567)))
 (let (($x577 ((_ is stack ) ?x424)))
 (let (($x578 (= c___ center-to-right)))
 (let (($x579 (and $x578 $x577)))
 (let (($x580 (= c___ center-to-left)))
 (let (($x581 (and $x580 $x577)))
 (let ((?x177 (left s___)))
 (let (($x582 ((_ is stack ) ?x177)))
 (let (($x583 (= c___ left-to-right)))
 (let (($x584 (and $x583 $x582)))
 (let (($x615 (ite $x584 $x598 (ite $x581 $x598 (ite $x579 $x594 (ite $x576 $x595 (ite $x574 $x595 $x598)))))))
 (let ((?x422 (top ?x177)))
 (let ((?x561 (stack ?x422 ?x180)))
 (let (($x590 (= ?x394 ?x561)))
 (let (($x585 (= c___ left-to-center)))
 (let (($x586 (and $x585 $x582)))
 (ite $x586 $x590 $x615)))))))))))))))))))))))))))))))
(assert
 (let ((?x424 (center s___)))
 (let ((?x562 (center s____)))
 (let (($x600 (= ?x562 ?x424)))
 (let ((?x180 (right s___)))
 (let ((?x569 (top ?x180)))
 (let ((?x571 (stack ?x569 ?x424)))
 (let (($x597 (= ?x562 ?x571)))
 (let (($x572 ((_ is stack ) ?x180)))
 (let (($x573 (= c___ right-to-center)))
 (let (($x574 (and $x573 $x572)))
 (let (($x575 (= c___ right-to-left)))
 (let (($x576 (and $x575 $x572)))
 (let ((?x564 (rest ?x424)))
 (let (($x592 (= ?x562 ?x564)))
 (let (($x577 ((_ is stack ) ?x424)))
 (let (($x578 (= c___ center-to-right)))
 (let (($x579 (and $x578 $x577)))
 (let (($x580 (= c___ center-to-left)))
 (let (($x581 (and $x580 $x577)))
 (let ((?x177 (left s___)))
 (let ((?x422 (top ?x177)))
 (let ((?x563 (stack ?x422 ?x424)))
 (let (($x591 (= ?x562 ?x563)))
 (let (($x582 ((_ is stack ) ?x177)))
 (let (($x583 (= c___ left-to-right)))
 (let (($x584 (and $x583 $x582)))
 (let (($x614 (ite $x584 $x591 (ite $x581 $x592 (ite $x579 $x592 (ite $x576 $x600 (ite $x574 $x597 $x600)))))))
 (let (($x585 (= c___ left-to-center)))
 (let (($x586 (and $x585 $x582)))
 (ite $x586 $x600 $x614)))))))))))))))))))))))))))))))
(assert
 (let ((?x77 (stack J (stack I (stack D (stack C (stack B (stack A empty))))))))
 (let ((?x83 (stack X (stack T (stack S (stack Q (stack N (stack M ?x77))))))))
 (let ((?x394 (right s____)))
 (let (($x618 (= ?x394 ?x83)))
 (let ((?x71 (stack U (stack R (stack H empty)))))
 (let ((?x562 (center s____)))
 (let (($x649 (= ?x562 ?x71)))
 (let ((?x65 (stack E (stack O (stack V (stack L (stack W (stack G empty))))))))
 (let ((?x68 (stack F (stack P (stack K ?x65)))))
 (let ((?x351 (left s____)))
 (let (($x650 (= ?x351 ?x68)))
 (let (($x652 (not (and $x650 $x649 $x618))))
 (not $x652))))))))))))))
(check-sat)
(exit)
