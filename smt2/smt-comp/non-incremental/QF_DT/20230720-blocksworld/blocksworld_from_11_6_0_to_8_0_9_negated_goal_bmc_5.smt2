(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x29 (stack D empty)))
 (let ((?x30 (stack M ?x29)))
 (let ((?x31 (stack C ?x30)))
 (let ((?x32 (stack B ?x31)))
 (let ((?x33 (stack H ?x32)))
 (let ((?x34 (stack J ?x33)))
 (let ((?x35 (stack E ?x34)))
 (let ((?x36 (stack A ?x35)))
 (let ((?x37 (stack Q ?x36)))
 (let ((?x38 (stack G ?x37)))
 (let ((?x39 (stack N ?x38)))
 (let ((?x109 (left s_tmp_)))
 (= ?x109 ?x39))))))))))))))
(assert
 (let ((?x40 (stack O empty)))
 (let ((?x41 (stack F ?x40)))
 (let ((?x42 (stack L ?x41)))
 (let ((?x43 (stack K ?x42)))
 (let ((?x44 (stack I ?x43)))
 (let ((?x45 (stack P ?x44)))
 (let ((?x112 (center s_tmp__)))
 (= ?x112 ?x45)))))))))
(assert
 (let ((?x115 (right s_tmp___)))
 (= ?x115 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x142 (left s_tmp__)))
 (= (left s_tmp___) ?x142)))
(assert
 (let ((?x112 (center s_tmp__)))
 (= (center s_tmp___) ?x112)))
(assert
 (let ((?x146 (center s_tmp_)))
 (= ?x146 (center s_tmp))))
(assert
 (let ((?x149 (right s_tmp_)))
 (= ?x149 (right s_tmp))))
(assert
 (let ((?x109 (left s_tmp_)))
 (let ((?x142 (left s_tmp__)))
 (= ?x142 ?x109))))
(assert
 (let ((?x149 (right s_tmp_)))
 (let ((?x153 (right s_tmp__)))
 (= ?x153 ?x149))))
(assert
 (= c__ c!1))
(assert
 (let ((?x86 (left s_)))
 (let ((?x266 (left s__)))
 (let (($x293 (= ?x266 ?x86)))
 (let ((?x89 (right s_)))
 (let (($x251 ((_ is stack ) ?x89)))
 (let (($x246 (and (= c_ right-to-left) $x251)))
 (let ((?x91 (center s_)))
 (let (($x247 ((_ is stack ) ?x91)))
 (let (($x248 (= c_ center-to-right)))
 (let (($x270 (and $x248 $x247)))
 (let (($x271 (= c_ center-to-left)))
 (let (($x272 (and $x271 $x247)))
 (let (($x302 (ite $x272 (= ?x266 (stack (top ?x91) ?x86)) (ite $x270 $x293 (ite $x246 (= ?x266 (stack (top ?x89) ?x86)) $x293)))))
 (let (($x280 (= ?x266 (rest ?x86))))
 (let (($x273 ((_ is stack ) ?x86)))
 (let (($x274 (= c_ left-to-right)))
 (let (($x275 (and $x274 $x273)))
 (let (($x276 (= c_ left-to-center)))
 (let (($x277 (and $x276 $x273)))
 (ite $x277 $x280 (ite $x275 $x280 $x302))))))))))))))))))))))
(assert
 (let ((?x89 (right s_)))
 (let ((?x253 (right s__)))
 (let (($x289 (= ?x253 ?x89)))
 (let (($x286 (= ?x253 (rest ?x89))))
 (let (($x251 ((_ is stack ) ?x89)))
 (let (($x268 (and (= c_ right-to-center) $x251)))
 (let (($x246 (and (= c_ right-to-left) $x251)))
 (let ((?x91 (center s_)))
 (let (($x247 ((_ is stack ) ?x91)))
 (let (($x248 (= c_ center-to-right)))
 (let (($x270 (and $x248 $x247)))
 (let (($x299 (ite $x270 (= ?x253 (stack (top ?x91) ?x89)) (ite $x246 $x286 (ite $x268 $x286 $x289)))))
 (let (($x271 (= c_ center-to-left)))
 (let (($x272 (and $x271 $x247)))
 (let ((?x86 (left s_)))
 (let (($x273 ((_ is stack ) ?x86)))
 (let (($x274 (= c_ left-to-right)))
 (let (($x275 (and $x274 $x273)))
 (let (($x276 (= c_ left-to-center)))
 (let (($x277 (and $x276 $x273)))
 (ite $x277 (= ?x253 (stack (top ?x86) ?x89)) (ite $x275 $x289 (ite $x272 $x289 $x299))))))))))))))))))))))))
(assert
 (let ((?x91 (center s_)))
 (let ((?x256 (center s__)))
 (let (($x291 (= ?x256 ?x91)))
 (let ((?x89 (right s_)))
 (let (($x251 ((_ is stack ) ?x89)))
 (let (($x268 (and (= c_ right-to-center) $x251)))
 (let (($x246 (and (= c_ right-to-left) $x251)))
 (let (($x283 (= ?x256 (rest ?x91))))
 (let (($x247 ((_ is stack ) ?x91)))
 (let (($x248 (= c_ center-to-right)))
 (let (($x270 (and $x248 $x247)))
 (let (($x298 (ite $x270 $x283 (ite $x246 $x291 (ite $x268 (= ?x256 (stack (top ?x89) ?x91)) $x291)))))
 (let (($x271 (= c_ center-to-left)))
 (let (($x272 (and $x271 $x247)))
 (let ((?x86 (left s_)))
 (let (($x273 ((_ is stack ) ?x86)))
 (let (($x274 (= c_ left-to-right)))
 (let (($x275 (and $x274 $x273)))
 (let (($x276 (= c_ left-to-center)))
 (let (($x277 (and $x276 $x273)))
 (ite $x277 $x291 (ite $x275 (= ?x256 (stack (top ?x86) ?x91)) (ite $x272 $x283 $x298))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x266 (left s__)))
 (let ((?x156 (left s___)))
 (let (($x404 (= ?x156 ?x266)))
 (let ((?x253 (right s__)))
 (let ((?x371 (top ?x253)))
 (let ((?x372 (stack ?x371 ?x266)))
 (let (($x398 (= ?x156 ?x372)))
 (let (($x374 ((_ is stack ) ?x253)))
 (let (($x377 (= c__ right-to-left)))
 (let (($x378 (and $x377 $x374)))
 (let ((?x256 (center s__)))
 (let (($x379 ((_ is stack ) ?x256)))
 (let (($x380 (= c__ center-to-right)))
 (let (($x381 (and $x380 $x379)))
 (let ((?x367 (top ?x256)))
 (let ((?x368 (stack ?x367 ?x266)))
 (let (($x395 (= ?x156 ?x368)))
 (let (($x382 (= c__ center-to-left)))
 (let (($x383 (and $x382 $x379)))
 (let ((?x158 (rest ?x266)))
 (let (($x391 (= ?x156 ?x158)))
 (let (($x384 ((_ is stack ) ?x266)))
 (let (($x385 (= c__ left-to-right)))
 (let (($x386 (and $x385 $x384)))
 (let (($x387 (= c__ left-to-center)))
 (let (($x388 (and $x387 $x384)))
 (ite $x388 $x391 (ite $x386 $x391 (ite $x383 $x395 (ite $x381 $x404 (ite $x378 $x398 $x404))))))))))))))))))))))))))))))))
(assert
 (let ((?x253 (right s__)))
 (let ((?x159 (right s___)))
 (let (($x400 (= ?x159 ?x253)))
 (let ((?x370 (rest ?x253)))
 (let (($x397 (= ?x159 ?x370)))
 (let (($x374 ((_ is stack ) ?x253)))
 (let (($x375 (= c__ right-to-center)))
 (let (($x376 (and $x375 $x374)))
 (let (($x377 (= c__ right-to-left)))
 (let (($x378 (and $x377 $x374)))
 (let ((?x256 (center s__)))
 (let ((?x367 (top ?x256)))
 (let ((?x369 (stack ?x367 ?x253)))
 (let (($x396 (= ?x159 ?x369)))
 (let (($x379 ((_ is stack ) ?x256)))
 (let (($x380 (= c__ center-to-right)))
 (let (($x381 (and $x380 $x379)))
 (let (($x382 (= c__ center-to-left)))
 (let (($x383 (and $x382 $x379)))
 (let ((?x266 (left s__)))
 (let (($x384 ((_ is stack ) ?x266)))
 (let (($x385 (= c__ left-to-right)))
 (let (($x386 (and $x385 $x384)))
 (let (($x417 (ite $x386 $x400 (ite $x383 $x400 (ite $x381 $x396 (ite $x378 $x397 (ite $x376 $x397 $x400)))))))
 (let ((?x245 (top ?x266)))
 (let ((?x363 (stack ?x245 ?x253)))
 (let (($x392 (= ?x159 ?x363)))
 (let (($x387 (= c__ left-to-center)))
 (let (($x388 (and $x387 $x384)))
 (ite $x388 $x392 $x417)))))))))))))))))))))))))))))))
(assert
 (let ((?x256 (center s__)))
 (let ((?x364 (center s___)))
 (let (($x402 (= ?x364 ?x256)))
 (let ((?x253 (right s__)))
 (let ((?x371 (top ?x253)))
 (let ((?x373 (stack ?x371 ?x256)))
 (let (($x399 (= ?x364 ?x373)))
 (let (($x374 ((_ is stack ) ?x253)))
 (let (($x375 (= c__ right-to-center)))
 (let (($x376 (and $x375 $x374)))
 (let (($x377 (= c__ right-to-left)))
 (let (($x378 (and $x377 $x374)))
 (let ((?x366 (rest ?x256)))
 (let (($x394 (= ?x364 ?x366)))
 (let (($x379 ((_ is stack ) ?x256)))
 (let (($x380 (= c__ center-to-right)))
 (let (($x381 (and $x380 $x379)))
 (let (($x382 (= c__ center-to-left)))
 (let (($x383 (and $x382 $x379)))
 (let ((?x266 (left s__)))
 (let ((?x245 (top ?x266)))
 (let ((?x365 (stack ?x245 ?x256)))
 (let (($x393 (= ?x364 ?x365)))
 (let (($x384 ((_ is stack ) ?x266)))
 (let (($x385 (= c__ left-to-right)))
 (let (($x386 (and $x385 $x384)))
 (let (($x416 (ite $x386 $x393 (ite $x383 $x394 (ite $x381 $x394 (ite $x378 $x402 (ite $x376 $x399 $x402)))))))
 (let (($x387 (= c__ left-to-center)))
 (let (($x388 (and $x387 $x384)))
 (ite $x388 $x402 $x416)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x156 (left s___)))
 (let ((?x309 (left s____)))
 (let (($x542 (= ?x309 ?x156)))
 (let ((?x159 (right s___)))
 (let ((?x509 (top ?x159)))
 (let ((?x510 (stack ?x509 ?x156)))
 (let (($x536 (= ?x309 ?x510)))
 (let (($x512 ((_ is stack ) ?x159)))
 (let (($x515 (= c___ right-to-left)))
 (let (($x516 (and $x515 $x512)))
 (let ((?x364 (center s___)))
 (let (($x517 ((_ is stack ) ?x364)))
 (let (($x518 (= c___ center-to-right)))
 (let (($x519 (and $x518 $x517)))
 (let ((?x505 (top ?x364)))
 (let ((?x506 (stack ?x505 ?x156)))
 (let (($x533 (= ?x309 ?x506)))
 (let (($x520 (= c___ center-to-left)))
 (let (($x521 (and $x520 $x517)))
 (let ((?x340 (rest ?x156)))
 (let (($x529 (= ?x309 ?x340)))
 (let (($x522 ((_ is stack ) ?x156)))
 (let (($x523 (= c___ left-to-right)))
 (let (($x524 (and $x523 $x522)))
 (let (($x525 (= c___ left-to-center)))
 (let (($x526 (and $x525 $x522)))
 (ite $x526 $x529 (ite $x524 $x529 (ite $x521 $x533 (ite $x519 $x542 (ite $x516 $x536 $x542))))))))))))))))))))))))))))))))
(assert
 (let ((?x159 (right s___)))
 (let ((?x341 (right s____)))
 (let (($x538 (= ?x341 ?x159)))
 (let ((?x508 (rest ?x159)))
 (let (($x535 (= ?x341 ?x508)))
 (let (($x512 ((_ is stack ) ?x159)))
 (let (($x513 (= c___ right-to-center)))
 (let (($x514 (and $x513 $x512)))
 (let (($x515 (= c___ right-to-left)))
 (let (($x516 (and $x515 $x512)))
 (let ((?x364 (center s___)))
 (let ((?x505 (top ?x364)))
 (let ((?x507 (stack ?x505 ?x159)))
 (let (($x534 (= ?x341 ?x507)))
 (let (($x517 ((_ is stack ) ?x364)))
 (let (($x518 (= c___ center-to-right)))
 (let (($x519 (and $x518 $x517)))
 (let (($x520 (= c___ center-to-left)))
 (let (($x521 (and $x520 $x517)))
 (let ((?x156 (left s___)))
 (let (($x522 ((_ is stack ) ?x156)))
 (let (($x523 (= c___ left-to-right)))
 (let (($x524 (and $x523 $x522)))
 (let (($x555 (ite $x524 $x538 (ite $x521 $x538 (ite $x519 $x534 (ite $x516 $x535 (ite $x514 $x535 $x538)))))))
 (let ((?x362 (top ?x156)))
 (let ((?x501 (stack ?x362 ?x159)))
 (let (($x530 (= ?x341 ?x501)))
 (let (($x525 (= c___ left-to-center)))
 (let (($x526 (and $x525 $x522)))
 (ite $x526 $x530 $x555)))))))))))))))))))))))))))))))
(assert
 (let ((?x364 (center s___)))
 (let ((?x502 (center s____)))
 (let (($x540 (= ?x502 ?x364)))
 (let ((?x159 (right s___)))
 (let ((?x509 (top ?x159)))
 (let ((?x511 (stack ?x509 ?x364)))
 (let (($x537 (= ?x502 ?x511)))
 (let (($x512 ((_ is stack ) ?x159)))
 (let (($x513 (= c___ right-to-center)))
 (let (($x514 (and $x513 $x512)))
 (let (($x515 (= c___ right-to-left)))
 (let (($x516 (and $x515 $x512)))
 (let ((?x504 (rest ?x364)))
 (let (($x532 (= ?x502 ?x504)))
 (let (($x517 ((_ is stack ) ?x364)))
 (let (($x518 (= c___ center-to-right)))
 (let (($x519 (and $x518 $x517)))
 (let (($x520 (= c___ center-to-left)))
 (let (($x521 (and $x520 $x517)))
 (let ((?x156 (left s___)))
 (let ((?x362 (top ?x156)))
 (let ((?x503 (stack ?x362 ?x364)))
 (let (($x531 (= ?x502 ?x503)))
 (let (($x522 ((_ is stack ) ?x156)))
 (let (($x523 (= c___ left-to-right)))
 (let (($x524 (and $x523 $x522)))
 (let (($x554 (ite $x524 $x531 (ite $x521 $x532 (ite $x519 $x532 (ite $x516 $x540 (ite $x514 $x537 $x540)))))))
 (let (($x525 (= c___ left-to-center)))
 (let (($x526 (and $x525 $x522)))
 (ite $x526 $x540 $x554)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x309 (left s____)))
 (let ((?x420 (left s_____)))
 (let (($x680 (= ?x420 ?x309)))
 (let ((?x341 (right s____)))
 (let ((?x647 (top ?x341)))
 (let ((?x648 (stack ?x647 ?x309)))
 (let (($x674 (= ?x420 ?x648)))
 (let (($x650 ((_ is stack ) ?x341)))
 (let (($x653 (= c____ right-to-left)))
 (let (($x654 (and $x653 $x650)))
 (let ((?x502 (center s____)))
 (let (($x655 ((_ is stack ) ?x502)))
 (let (($x656 (= c____ center-to-right)))
 (let (($x657 (and $x656 $x655)))
 (let ((?x643 (top ?x502)))
 (let ((?x644 (stack ?x643 ?x309)))
 (let (($x671 (= ?x420 ?x644)))
 (let (($x658 (= c____ center-to-left)))
 (let (($x659 (and $x658 $x655)))
 (let ((?x453 (rest ?x309)))
 (let (($x667 (= ?x420 ?x453)))
 (let (($x660 ((_ is stack ) ?x309)))
 (let (($x661 (= c____ left-to-right)))
 (let (($x662 (and $x661 $x660)))
 (let (($x663 (= c____ left-to-center)))
 (let (($x664 (and $x663 $x660)))
 (ite $x664 $x667 (ite $x662 $x667 (ite $x659 $x671 (ite $x657 $x680 (ite $x654 $x674 $x680))))))))))))))))))))))))))))))))
(assert
 (let ((?x341 (right s____)))
 (let ((?x454 (right s_____)))
 (let (($x676 (= ?x454 ?x341)))
 (let ((?x646 (rest ?x341)))
 (let (($x673 (= ?x454 ?x646)))
 (let (($x650 ((_ is stack ) ?x341)))
 (let (($x651 (= c____ right-to-center)))
 (let (($x652 (and $x651 $x650)))
 (let (($x653 (= c____ right-to-left)))
 (let (($x654 (and $x653 $x650)))
 (let ((?x502 (center s____)))
 (let ((?x643 (top ?x502)))
 (let ((?x645 (stack ?x643 ?x341)))
 (let (($x672 (= ?x454 ?x645)))
 (let (($x655 ((_ is stack ) ?x502)))
 (let (($x656 (= c____ center-to-right)))
 (let (($x657 (and $x656 $x655)))
 (let (($x658 (= c____ center-to-left)))
 (let (($x659 (and $x658 $x655)))
 (let ((?x309 (left s____)))
 (let (($x660 ((_ is stack ) ?x309)))
 (let (($x661 (= c____ left-to-right)))
 (let (($x662 (and $x661 $x660)))
 (let (($x693 (ite $x662 $x676 (ite $x659 $x676 (ite $x657 $x672 (ite $x654 $x673 (ite $x652 $x673 $x676)))))))
 (let ((?x500 (top ?x309)))
 (let ((?x639 (stack ?x500 ?x341)))
 (let (($x668 (= ?x454 ?x639)))
 (let (($x663 (= c____ left-to-center)))
 (let (($x664 (and $x663 $x660)))
 (ite $x664 $x668 $x693)))))))))))))))))))))))))))))))
(assert
 (let ((?x502 (center s____)))
 (let ((?x640 (center s_____)))
 (let (($x678 (= ?x640 ?x502)))
 (let ((?x341 (right s____)))
 (let ((?x647 (top ?x341)))
 (let ((?x649 (stack ?x647 ?x502)))
 (let (($x675 (= ?x640 ?x649)))
 (let (($x650 ((_ is stack ) ?x341)))
 (let (($x651 (= c____ right-to-center)))
 (let (($x652 (and $x651 $x650)))
 (let (($x653 (= c____ right-to-left)))
 (let (($x654 (and $x653 $x650)))
 (let ((?x642 (rest ?x502)))
 (let (($x670 (= ?x640 ?x642)))
 (let (($x655 ((_ is stack ) ?x502)))
 (let (($x656 (= c____ center-to-right)))
 (let (($x657 (and $x656 $x655)))
 (let (($x658 (= c____ center-to-left)))
 (let (($x659 (and $x658 $x655)))
 (let ((?x309 (left s____)))
 (let ((?x500 (top ?x309)))
 (let ((?x641 (stack ?x500 ?x502)))
 (let (($x669 (= ?x640 ?x641)))
 (let (($x660 ((_ is stack ) ?x309)))
 (let (($x661 (= c____ left-to-right)))
 (let (($x662 (and $x661 $x660)))
 (let (($x692 (ite $x662 $x669 (ite $x659 $x670 (ite $x657 $x670 (ite $x654 $x678 (ite $x652 $x675 $x678)))))))
 (let (($x663 (= c____ left-to-center)))
 (let (($x664 (and $x663 $x660)))
 (ite $x664 $x678 $x692)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x420 (left s_____)))
 (let ((?x558 (left s______)))
 (let (($x818 (= ?x558 ?x420)))
 (let ((?x454 (right s_____)))
 (let ((?x785 (top ?x454)))
 (let ((?x786 (stack ?x785 ?x420)))
 (let (($x812 (= ?x558 ?x786)))
 (let (($x788 ((_ is stack ) ?x454)))
 (let (($x791 (= c_____ right-to-left)))
 (let (($x792 (and $x791 $x788)))
 (let ((?x640 (center s_____)))
 (let (($x793 ((_ is stack ) ?x640)))
 (let (($x794 (= c_____ center-to-right)))
 (let (($x795 (and $x794 $x793)))
 (let ((?x781 (top ?x640)))
 (let ((?x782 (stack ?x781 ?x420)))
 (let (($x809 (= ?x558 ?x782)))
 (let (($x796 (= c_____ center-to-left)))
 (let (($x797 (and $x796 $x793)))
 (let ((?x591 (rest ?x420)))
 (let (($x805 (= ?x558 ?x591)))
 (let (($x798 ((_ is stack ) ?x420)))
 (let (($x799 (= c_____ left-to-right)))
 (let (($x800 (and $x799 $x798)))
 (let (($x801 (= c_____ left-to-center)))
 (let (($x802 (and $x801 $x798)))
 (ite $x802 $x805 (ite $x800 $x805 (ite $x797 $x809 (ite $x795 $x818 (ite $x792 $x812 $x818))))))))))))))))))))))))))))))))
(assert
 (let ((?x454 (right s_____)))
 (let ((?x592 (right s______)))
 (let (($x814 (= ?x592 ?x454)))
 (let ((?x784 (rest ?x454)))
 (let (($x811 (= ?x592 ?x784)))
 (let (($x788 ((_ is stack ) ?x454)))
 (let (($x789 (= c_____ right-to-center)))
 (let (($x790 (and $x789 $x788)))
 (let (($x791 (= c_____ right-to-left)))
 (let (($x792 (and $x791 $x788)))
 (let ((?x640 (center s_____)))
 (let ((?x781 (top ?x640)))
 (let ((?x783 (stack ?x781 ?x454)))
 (let (($x810 (= ?x592 ?x783)))
 (let (($x793 ((_ is stack ) ?x640)))
 (let (($x794 (= c_____ center-to-right)))
 (let (($x795 (and $x794 $x793)))
 (let (($x796 (= c_____ center-to-left)))
 (let (($x797 (and $x796 $x793)))
 (let ((?x420 (left s_____)))
 (let (($x798 ((_ is stack ) ?x420)))
 (let (($x799 (= c_____ left-to-right)))
 (let (($x800 (and $x799 $x798)))
 (let (($x831 (ite $x800 $x814 (ite $x797 $x814 (ite $x795 $x810 (ite $x792 $x811 (ite $x790 $x811 $x814)))))))
 (let ((?x638 (top ?x420)))
 (let ((?x777 (stack ?x638 ?x454)))
 (let (($x806 (= ?x592 ?x777)))
 (let (($x801 (= c_____ left-to-center)))
 (let (($x802 (and $x801 $x798)))
 (ite $x802 $x806 $x831)))))))))))))))))))))))))))))))
(assert
 (let ((?x640 (center s_____)))
 (let ((?x778 (center s______)))
 (let (($x816 (= ?x778 ?x640)))
 (let ((?x454 (right s_____)))
 (let ((?x785 (top ?x454)))
 (let ((?x787 (stack ?x785 ?x640)))
 (let (($x813 (= ?x778 ?x787)))
 (let (($x788 ((_ is stack ) ?x454)))
 (let (($x789 (= c_____ right-to-center)))
 (let (($x790 (and $x789 $x788)))
 (let (($x791 (= c_____ right-to-left)))
 (let (($x792 (and $x791 $x788)))
 (let ((?x780 (rest ?x640)))
 (let (($x808 (= ?x778 ?x780)))
 (let (($x793 ((_ is stack ) ?x640)))
 (let (($x794 (= c_____ center-to-right)))
 (let (($x795 (and $x794 $x793)))
 (let (($x796 (= c_____ center-to-left)))
 (let (($x797 (and $x796 $x793)))
 (let ((?x420 (left s_____)))
 (let ((?x638 (top ?x420)))
 (let ((?x779 (stack ?x638 ?x640)))
 (let (($x807 (= ?x778 ?x779)))
 (let (($x798 ((_ is stack ) ?x420)))
 (let (($x799 (= c_____ left-to-right)))
 (let (($x800 (and $x799 $x798)))
 (let (($x830 (ite $x800 $x807 (ite $x797 $x808 (ite $x795 $x808 (ite $x792 $x816 (ite $x790 $x813 $x816)))))))
 (let (($x801 (= c_____ left-to-center)))
 (let (($x802 (and $x801 $x798)))
 (ite $x802 $x816 $x830)))))))))))))))))))))))))))))))
(assert
 (let ((?x59 (stack I (stack H (stack F (stack D (stack C (stack B empty))))))))
 (let ((?x62 (stack Q (stack P (stack M ?x59)))))
 (let ((?x592 (right s______)))
 (let (($x834 (= ?x592 ?x62)))
 (let ((?x778 (center s______)))
 (let (($x865 (= ?x778 empty)))
 (let ((?x51 (stack L (stack G (stack E (stack N (stack O (stack A empty))))))))
 (let ((?x53 (stack J (stack K ?x51))))
 (let ((?x558 (left s______)))
 (let (($x866 (= ?x558 ?x53)))
 (let (($x868 (not (and $x866 $x865 $x834))))
 (not $x868)))))))))))))
(check-sat)
(exit)
