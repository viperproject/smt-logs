(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x35 (stack U empty)))
 (let ((?x34 (stack Q ?x35)))
 (let ((?x36 (stack J ?x34)))
 (let ((?x37 (stack B ?x36)))
 (let ((?x38 (stack C ?x37)))
 (let ((?x39 (stack L ?x38)))
 (let ((?x40 (stack M ?x39)))
 (let ((?x41 (stack T ?x40)))
 (let ((?x42 (stack P ?x41)))
 (let ((?x43 (stack S ?x42)))
 (let ((?x44 (stack I ?x43)))
 (let ((?x45 (stack F ?x44)))
 (let ((?x46 (stack N ?x45)))
 (let ((?x47 (stack D ?x46)))
 (let ((?x48 (stack E ?x47)))
 (let ((?x49 (stack A ?x48)))
 (let ((?x124 (left s_tmp_)))
 (= ?x124 ?x49)))))))))))))))))))
(assert
 (let ((?x50 (stack R empty)))
 (let ((?x51 (stack K ?x50)))
 (let ((?x52 (stack G ?x51)))
 (let ((?x53 (stack V ?x52)))
 (let ((?x127 (center s_tmp__)))
 (= ?x127 ?x53)))))))
(assert
 (let ((?x54 (stack H empty)))
 (let ((?x55 (stack O ?x54)))
 (let ((?x130 (right s_tmp___)))
 (= ?x130 ?x55)))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x157 (left s_tmp__)))
 (= (left s_tmp___) ?x157)))
(assert
 (let ((?x127 (center s_tmp__)))
 (= (center s_tmp___) ?x127)))
(assert
 (let ((?x161 (center s_tmp_)))
 (= ?x161 (center s_tmp))))
(assert
 (let ((?x164 (right s_tmp_)))
 (= ?x164 (right s_tmp))))
(assert
 (let ((?x124 (left s_tmp_)))
 (let ((?x157 (left s_tmp__)))
 (= ?x157 ?x124))))
(assert
 (let ((?x164 (right s_tmp_)))
 (let ((?x168 (right s_tmp__)))
 (= ?x168 ?x164))))
(assert
 (= c__ c!1))
(assert
 (let ((?x101 (left s_)))
 (let ((?x320 (left s__)))
 (let (($x323 (= ?x320 ?x101)))
 (let ((?x104 (right s_)))
 (let (($x305 ((_ is stack ) ?x104)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x285 (and $x326 $x305)))
 (let ((?x106 (center s_)))
 (let (($x286 ((_ is stack ) ?x106)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x336 (and $x287 $x286)))
 (let (($x337 (= c_ center-to-left)))
 (let (($x338 (and $x337 $x286)))
 (let (($x308 (ite $x338 (= ?x320 (stack (top ?x106) ?x101)) (ite $x336 $x323 (ite $x285 (= ?x320 (stack (top ?x104) ?x101)) $x323)))))
 (let ((?x312 (rest ?x101)))
 (let (($x277 (= ?x320 ?x312)))
 (let (($x297 ((_ is stack ) ?x101)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x291 (= c_ left-to-center)))
 (let (($x292 (and $x291 $x297)))
 (ite $x292 $x277 (ite $x299 $x277 $x308))))))))))))))))))))))))
(assert
 (let ((?x104 (right s_)))
 (let ((?x313 (right s__)))
 (let (($x310 (= ?x313 ?x104)))
 (let ((?x301 (rest ?x104)))
 (let (($x334 (= ?x313 ?x301)))
 (let (($x305 ((_ is stack ) ?x104)))
 (let (($x324 (= c_ right-to-center)))
 (let (($x325 (and $x324 $x305)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x285 (and $x326 $x305)))
 (let ((?x106 (center s_)))
 (let (($x286 ((_ is stack ) ?x106)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x336 (and $x287 $x286)))
 (let (($x332 (ite $x336 (= ?x313 (stack (top ?x106) ?x104)) (ite $x285 $x334 (ite $x325 $x334 $x310)))))
 (let (($x337 (= c_ center-to-left)))
 (let (($x338 (and $x337 $x286)))
 (let ((?x101 (left s_)))
 (let (($x297 ((_ is stack ) ?x101)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x291 (= c_ left-to-center)))
 (let (($x292 (and $x291 $x297)))
 (ite $x292 (= ?x313 (stack (top ?x101) ?x104)) (ite $x299 $x310 (ite $x338 $x310 $x332)))))))))))))))))))))))))))
(assert
 (let ((?x106 (center s_)))
 (let ((?x328 (center s__)))
 (let (($x321 (= ?x328 ?x106)))
 (let ((?x104 (right s_)))
 (let (($x305 ((_ is stack ) ?x104)))
 (let (($x324 (= c_ right-to-center)))
 (let (($x325 (and $x324 $x305)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x285 (and $x326 $x305)))
 (let ((?x288 (rest ?x106)))
 (let (($x316 (= ?x328 ?x288)))
 (let (($x286 ((_ is stack ) ?x106)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x336 (and $x287 $x286)))
 (let (($x331 (ite $x336 $x316 (ite $x285 $x321 (ite $x325 (= ?x328 (stack (top ?x104) ?x106)) $x321)))))
 (let (($x337 (= c_ center-to-left)))
 (let (($x338 (and $x337 $x286)))
 (let ((?x101 (left s_)))
 (let (($x297 ((_ is stack ) ?x101)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x291 (= c_ left-to-center)))
 (let (($x292 (and $x291 $x297)))
 (ite $x292 $x321 (ite $x299 (= ?x328 (stack (top ?x101) ?x106)) (ite $x338 $x316 $x331)))))))))))))))))))))))))))
(assert
 (let ((?x77 (stack O (stack K (stack A empty)))))
 (let ((?x313 (right s__)))
 (let (($x339 (= ?x313 ?x77)))
 (let ((?x74 (stack R (stack J (stack P empty)))))
 (let ((?x328 (center s__)))
 (let (($x379 (= ?x328 ?x74)))
 (let ((?x61 (stack M (stack H (stack E (stack U (stack C (stack N empty))))))))
 (let ((?x67 (stack L (stack F (stack S (stack B (stack T (stack D ?x61))))))))
 (let ((?x71 (stack I (stack G (stack V (stack Q ?x67))))))
 (let ((?x320 (left s__)))
 (let (($x380 (= ?x320 ?x71)))
 (let (($x382 (not (and $x380 $x379 $x339))))
 (not $x382))))))))))))))
(check-sat)
(exit)
