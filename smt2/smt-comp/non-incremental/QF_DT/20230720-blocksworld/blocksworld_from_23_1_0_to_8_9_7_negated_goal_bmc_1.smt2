(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V) (W) (X))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x36 (stack X empty)))
 (let ((?x37 (stack L ?x36)))
 (let ((?x38 (stack Q ?x37)))
 (let ((?x39 (stack B ?x38)))
 (let ((?x40 (stack T ?x39)))
 (let ((?x41 (stack E ?x40)))
 (let ((?x42 (stack G ?x41)))
 (let ((?x43 (stack H ?x42)))
 (let ((?x44 (stack S ?x43)))
 (let ((?x45 (stack W ?x44)))
 (let ((?x46 (stack P ?x45)))
 (let ((?x47 (stack D ?x46)))
 (let ((?x48 (stack M ?x47)))
 (let ((?x49 (stack F ?x48)))
 (let ((?x50 (stack K ?x49)))
 (let ((?x51 (stack R ?x50)))
 (let ((?x52 (stack C ?x51)))
 (let ((?x53 (stack A ?x52)))
 (let ((?x54 (stack U ?x53)))
 (let ((?x55 (stack I ?x54)))
 (let ((?x56 (stack O ?x55)))
 (let ((?x57 (stack V ?x56)))
 (let ((?x58 (stack J ?x57)))
 (let ((?x130 (left s_tmp_)))
 (= ?x130 ?x58))))))))))))))))))))))))))
(assert
 (let ((?x59 (stack N empty)))
 (let ((?x133 (center s_tmp__)))
 (= ?x133 ?x59))))
(assert
 (let ((?x136 (right s_tmp___)))
 (= ?x136 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x163 (left s_tmp__)))
 (= (left s_tmp___) ?x163)))
(assert
 (let ((?x133 (center s_tmp__)))
 (= (center s_tmp___) ?x133)))
(assert
 (let ((?x167 (center s_tmp_)))
 (= ?x167 (center s_tmp))))
(assert
 (let ((?x170 (right s_tmp_)))
 (= ?x170 (right s_tmp))))
(assert
 (let ((?x130 (left s_tmp_)))
 (let ((?x163 (left s_tmp__)))
 (= ?x163 ?x130))))
(assert
 (let ((?x170 (right s_tmp_)))
 (let ((?x174 (right s_tmp__)))
 (= ?x174 ?x170))))
(assert
 (= c__ c!1))
(assert
 (let ((?x107 (left s_)))
 (let ((?x308 (left s__)))
 (let (($x335 (= ?x308 ?x107)))
 (let ((?x110 (right s_)))
 (let (($x311 ((_ is stack ) ?x110)))
 (let (($x303 (and (= c_ right-to-left) $x311)))
 (let ((?x112 (center s_)))
 (let (($x304 ((_ is stack ) ?x112)))
 (let (($x305 (= c_ center-to-right)))
 (let (($x297 (and $x305 $x304)))
 (let (($x298 (= c_ center-to-left)))
 (let (($x299 (and $x298 $x304)))
 (let (($x344 (ite $x299 (= ?x308 (stack (top ?x112) ?x107)) (ite $x297 $x335 (ite $x303 (= ?x308 (stack (top ?x110) ?x107)) $x335)))))
 (let ((?x312 (rest ?x107)))
 (let (($x322 (= ?x308 ?x312)))
 (let (($x315 ((_ is stack ) ?x107)))
 (let (($x316 (= c_ left-to-right)))
 (let (($x317 (and $x316 $x315)))
 (let (($x318 (= c_ left-to-center)))
 (let (($x319 (and $x318 $x315)))
 (ite $x319 $x322 (ite $x317 $x322 $x344)))))))))))))))))))))))
(assert
 (let ((?x110 (right s_)))
 (let ((?x313 (right s__)))
 (let (($x331 (= ?x313 ?x110)))
 (let ((?x292 (rest ?x110)))
 (let (($x328 (= ?x313 ?x292)))
 (let (($x311 ((_ is stack ) ?x110)))
 (let (($x301 (and (= c_ right-to-center) $x311)))
 (let (($x303 (and (= c_ right-to-left) $x311)))
 (let ((?x112 (center s_)))
 (let (($x304 ((_ is stack ) ?x112)))
 (let (($x305 (= c_ center-to-right)))
 (let (($x297 (and $x305 $x304)))
 (let (($x341 (ite $x297 (= ?x313 (stack (top ?x112) ?x110)) (ite $x303 $x328 (ite $x301 $x328 $x331)))))
 (let (($x298 (= c_ center-to-left)))
 (let (($x299 (and $x298 $x304)))
 (let ((?x107 (left s_)))
 (let (($x315 ((_ is stack ) ?x107)))
 (let (($x316 (= c_ left-to-right)))
 (let (($x317 (and $x316 $x315)))
 (let (($x318 (= c_ left-to-center)))
 (let (($x319 (and $x318 $x315)))
 (ite $x319 (= ?x313 (stack (top ?x107) ?x110)) (ite $x317 $x331 (ite $x299 $x331 $x341)))))))))))))))))))))))))
(assert
 (let ((?x112 (center s_)))
 (let ((?x295 (center s__)))
 (let (($x333 (= ?x295 ?x112)))
 (let ((?x110 (right s_)))
 (let (($x311 ((_ is stack ) ?x110)))
 (let (($x301 (and (= c_ right-to-center) $x311)))
 (let (($x303 (and (= c_ right-to-left) $x311)))
 (let ((?x288 (rest ?x112)))
 (let (($x325 (= ?x295 ?x288)))
 (let (($x304 ((_ is stack ) ?x112)))
 (let (($x305 (= c_ center-to-right)))
 (let (($x297 (and $x305 $x304)))
 (let (($x340 (ite $x297 $x325 (ite $x303 $x333 (ite $x301 (= ?x295 (stack (top ?x110) ?x112)) $x333)))))
 (let (($x298 (= c_ center-to-left)))
 (let (($x299 (and $x298 $x304)))
 (let ((?x107 (left s_)))
 (let (($x315 ((_ is stack ) ?x107)))
 (let (($x316 (= c_ left-to-right)))
 (let (($x317 (and $x316 $x315)))
 (let (($x318 (= c_ left-to-center)))
 (let (($x319 (and $x318 $x315)))
 (ite $x319 $x333 (ite $x317 (= ?x295 (stack (top ?x107) ?x112)) (ite $x299 $x325 $x340)))))))))))))))))))))))))
(assert
 (let ((?x82 (stack V (stack O (stack K (stack J (stack C (stack A empty))))))))
 (let ((?x83 (stack X ?x82)))
 (let ((?x313 (right s__)))
 (let (($x351 (= ?x313 ?x83)))
 (let ((?x73 (stack M (stack L (stack D (stack S (stack G (stack P empty))))))))
 (let ((?x76 (stack U (stack T (stack E ?x73)))))
 (let ((?x295 (center s__)))
 (let (($x379 (= ?x295 ?x76)))
 (let ((?x65 (stack N (stack H (stack R (stack Q (stack I (stack W empty))))))))
 (let ((?x67 (stack F (stack B ?x65))))
 (let ((?x308 (left s__)))
 (let (($x380 (= ?x308 ?x67)))
 (let (($x382 (not (and $x380 $x379 $x351))))
 (not $x382)))))))))))))))
(check-sat)
(exit)
