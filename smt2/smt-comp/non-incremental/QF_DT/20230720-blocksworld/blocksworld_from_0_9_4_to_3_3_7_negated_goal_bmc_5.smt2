(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x97 (left s_tmp_)))
 (= ?x97 empty)))
(assert
 (let ((?x25 (stack I empty)))
 (let ((?x26 (stack H ?x25)))
 (let ((?x27 (stack M ?x26)))
 (let ((?x28 (stack K ?x27)))
 (let ((?x29 (stack F ?x28)))
 (let ((?x30 (stack B ?x29)))
 (let ((?x31 (stack E ?x30)))
 (let ((?x32 (stack L ?x31)))
 (let ((?x33 (stack G ?x32)))
 (let ((?x100 (center s_tmp__)))
 (= ?x100 ?x33))))))))))))
(assert
 (let ((?x34 (stack A empty)))
 (let ((?x35 (stack C ?x34)))
 (let ((?x36 (stack D ?x35)))
 (let ((?x37 (stack J ?x36)))
 (let ((?x103 (right s_tmp___)))
 (= ?x103 ?x37)))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x130 (left s_tmp__)))
 (= (left s_tmp___) ?x130)))
(assert
 (let ((?x100 (center s_tmp__)))
 (= (center s_tmp___) ?x100)))
(assert
 (let ((?x134 (center s_tmp_)))
 (= ?x134 (center s_tmp))))
(assert
 (let ((?x137 (right s_tmp_)))
 (= ?x137 (right s_tmp))))
(assert
 (let ((?x97 (left s_tmp_)))
 (let ((?x130 (left s_tmp__)))
 (= ?x130 ?x97))))
(assert
 (let ((?x137 (right s_tmp_)))
 (let ((?x141 (right s_tmp__)))
 (= ?x141 ?x137))))
(assert
 (= c__ c!1))
(assert
 (let ((?x74 (left s_)))
 (let ((?x239 (left s__)))
 (let (($x269 (= ?x239 ?x74)))
 (let ((?x77 (right s_)))
 (let (($x224 ((_ is stack ) ?x77)))
 (let (($x233 (= c_ right-to-left)))
 (let (($x243 (and $x233 $x224)))
 (let ((?x79 (center s_)))
 (let (($x244 ((_ is stack ) ?x79)))
 (let (($x245 (= c_ center-to-right)))
 (let (($x246 (and $x245 $x244)))
 (let (($x247 (= c_ center-to-left)))
 (let (($x248 (and $x247 $x244)))
 (let (($x278 (ite $x248 (= ?x239 (stack (top ?x79) ?x74)) (ite $x246 $x269 (ite $x243 (= ?x239 (stack (top ?x77) ?x74)) $x269)))))
 (let (($x256 (= ?x239 (rest ?x74))))
 (let (($x249 ((_ is stack ) ?x74)))
 (let (($x251 (and (= c_ left-to-right) $x249)))
 (let (($x253 (and (= c_ left-to-center) $x249)))
 (ite $x253 $x256 (ite $x251 $x256 $x278)))))))))))))))))))))
(assert
 (let ((?x77 (right s_)))
 (let ((?x235 (right s__)))
 (let (($x265 (= ?x235 ?x77)))
 (let (($x262 (= ?x235 (rest ?x77))))
 (let (($x224 ((_ is stack ) ?x77)))
 (let (($x231 (= c_ right-to-center)))
 (let (($x232 (and $x231 $x224)))
 (let (($x233 (= c_ right-to-left)))
 (let (($x243 (and $x233 $x224)))
 (let ((?x79 (center s_)))
 (let (($x244 ((_ is stack ) ?x79)))
 (let (($x245 (= c_ center-to-right)))
 (let (($x246 (and $x245 $x244)))
 (let (($x275 (ite $x246 (= ?x235 (stack (top ?x79) ?x77)) (ite $x243 $x262 (ite $x232 $x262 $x265)))))
 (let (($x247 (= c_ center-to-left)))
 (let (($x248 (and $x247 $x244)))
 (let ((?x74 (left s_)))
 (let (($x249 ((_ is stack ) ?x74)))
 (let (($x251 (and (= c_ left-to-right) $x249)))
 (let (($x253 (and (= c_ left-to-center) $x249)))
 (ite $x253 (= ?x235 (stack (top ?x74) ?x77)) (ite $x251 $x265 (ite $x248 $x265 $x275))))))))))))))))))))))))
(assert
 (let ((?x79 (center s_)))
 (let ((?x241 (center s__)))
 (let (($x267 (= ?x241 ?x79)))
 (let ((?x77 (right s_)))
 (let (($x224 ((_ is stack ) ?x77)))
 (let (($x231 (= c_ right-to-center)))
 (let (($x232 (and $x231 $x224)))
 (let (($x233 (= c_ right-to-left)))
 (let (($x243 (and $x233 $x224)))
 (let (($x259 (= ?x241 (rest ?x79))))
 (let (($x244 ((_ is stack ) ?x79)))
 (let (($x245 (= c_ center-to-right)))
 (let (($x246 (and $x245 $x244)))
 (let (($x274 (ite $x246 $x259 (ite $x243 $x267 (ite $x232 (= ?x241 (stack (top ?x77) ?x79)) $x267)))))
 (let (($x247 (= c_ center-to-left)))
 (let (($x248 (and $x247 $x244)))
 (let ((?x74 (left s_)))
 (let (($x249 ((_ is stack ) ?x74)))
 (let (($x251 (and (= c_ left-to-right) $x249)))
 (let (($x253 (and (= c_ left-to-center) $x249)))
 (ite $x253 $x267 (ite $x251 (= ?x241 (stack (top ?x74) ?x79)) (ite $x248 $x259 $x274))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x239 (left s__)))
 (let ((?x144 (left s___)))
 (let (($x380 (= ?x144 ?x239)))
 (let ((?x235 (right s__)))
 (let ((?x347 (top ?x235)))
 (let ((?x348 (stack ?x347 ?x239)))
 (let (($x374 (= ?x144 ?x348)))
 (let (($x350 ((_ is stack ) ?x235)))
 (let (($x353 (= c__ right-to-left)))
 (let (($x354 (and $x353 $x350)))
 (let ((?x241 (center s__)))
 (let (($x355 ((_ is stack ) ?x241)))
 (let (($x356 (= c__ center-to-right)))
 (let (($x357 (and $x356 $x355)))
 (let ((?x343 (top ?x241)))
 (let ((?x344 (stack ?x343 ?x239)))
 (let (($x371 (= ?x144 ?x344)))
 (let (($x358 (= c__ center-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x146 (rest ?x239)))
 (let (($x367 (= ?x144 ?x146)))
 (let (($x360 ((_ is stack ) ?x239)))
 (let (($x361 (= c__ left-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let (($x363 (= c__ left-to-center)))
 (let (($x364 (and $x363 $x360)))
 (ite $x364 $x367 (ite $x362 $x367 (ite $x359 $x371 (ite $x357 $x380 (ite $x354 $x374 $x380))))))))))))))))))))))))))))))))
(assert
 (let ((?x235 (right s__)))
 (let ((?x147 (right s___)))
 (let (($x376 (= ?x147 ?x235)))
 (let ((?x346 (rest ?x235)))
 (let (($x373 (= ?x147 ?x346)))
 (let (($x350 ((_ is stack ) ?x235)))
 (let (($x351 (= c__ right-to-center)))
 (let (($x352 (and $x351 $x350)))
 (let (($x353 (= c__ right-to-left)))
 (let (($x354 (and $x353 $x350)))
 (let ((?x241 (center s__)))
 (let ((?x343 (top ?x241)))
 (let ((?x345 (stack ?x343 ?x235)))
 (let (($x372 (= ?x147 ?x345)))
 (let (($x355 ((_ is stack ) ?x241)))
 (let (($x356 (= c__ center-to-right)))
 (let (($x357 (and $x356 $x355)))
 (let (($x358 (= c__ center-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x239 (left s__)))
 (let (($x360 ((_ is stack ) ?x239)))
 (let (($x361 (= c__ left-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let (($x393 (ite $x362 $x376 (ite $x359 $x376 (ite $x357 $x372 (ite $x354 $x373 (ite $x352 $x373 $x376)))))))
 (let ((?x221 (top ?x239)))
 (let ((?x339 (stack ?x221 ?x235)))
 (let (($x368 (= ?x147 ?x339)))
 (let (($x363 (= c__ left-to-center)))
 (let (($x364 (and $x363 $x360)))
 (ite $x364 $x368 $x393)))))))))))))))))))))))))))))))
(assert
 (let ((?x241 (center s__)))
 (let ((?x340 (center s___)))
 (let (($x378 (= ?x340 ?x241)))
 (let ((?x235 (right s__)))
 (let ((?x347 (top ?x235)))
 (let ((?x349 (stack ?x347 ?x241)))
 (let (($x375 (= ?x340 ?x349)))
 (let (($x350 ((_ is stack ) ?x235)))
 (let (($x351 (= c__ right-to-center)))
 (let (($x352 (and $x351 $x350)))
 (let (($x353 (= c__ right-to-left)))
 (let (($x354 (and $x353 $x350)))
 (let ((?x342 (rest ?x241)))
 (let (($x370 (= ?x340 ?x342)))
 (let (($x355 ((_ is stack ) ?x241)))
 (let (($x356 (= c__ center-to-right)))
 (let (($x357 (and $x356 $x355)))
 (let (($x358 (= c__ center-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x239 (left s__)))
 (let ((?x221 (top ?x239)))
 (let ((?x341 (stack ?x221 ?x241)))
 (let (($x369 (= ?x340 ?x341)))
 (let (($x360 ((_ is stack ) ?x239)))
 (let (($x361 (= c__ left-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let (($x392 (ite $x362 $x369 (ite $x359 $x370 (ite $x357 $x370 (ite $x354 $x378 (ite $x352 $x375 $x378)))))))
 (let (($x363 (= c__ left-to-center)))
 (let (($x364 (and $x363 $x360)))
 (ite $x364 $x378 $x392)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x144 (left s___)))
 (let ((?x285 (left s____)))
 (let (($x518 (= ?x285 ?x144)))
 (let ((?x147 (right s___)))
 (let ((?x485 (top ?x147)))
 (let ((?x486 (stack ?x485 ?x144)))
 (let (($x512 (= ?x285 ?x486)))
 (let (($x488 ((_ is stack ) ?x147)))
 (let (($x491 (= c___ right-to-left)))
 (let (($x492 (and $x491 $x488)))
 (let ((?x340 (center s___)))
 (let (($x493 ((_ is stack ) ?x340)))
 (let (($x494 (= c___ center-to-right)))
 (let (($x495 (and $x494 $x493)))
 (let ((?x481 (top ?x340)))
 (let ((?x482 (stack ?x481 ?x144)))
 (let (($x509 (= ?x285 ?x482)))
 (let (($x496 (= c___ center-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x315 (rest ?x144)))
 (let (($x505 (= ?x285 ?x315)))
 (let (($x498 ((_ is stack ) ?x144)))
 (let (($x499 (= c___ left-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let (($x501 (= c___ left-to-center)))
 (let (($x502 (and $x501 $x498)))
 (ite $x502 $x505 (ite $x500 $x505 (ite $x497 $x509 (ite $x495 $x518 (ite $x492 $x512 $x518))))))))))))))))))))))))))))))))
(assert
 (let ((?x147 (right s___)))
 (let ((?x316 (right s____)))
 (let (($x514 (= ?x316 ?x147)))
 (let ((?x484 (rest ?x147)))
 (let (($x511 (= ?x316 ?x484)))
 (let (($x488 ((_ is stack ) ?x147)))
 (let (($x489 (= c___ right-to-center)))
 (let (($x490 (and $x489 $x488)))
 (let (($x491 (= c___ right-to-left)))
 (let (($x492 (and $x491 $x488)))
 (let ((?x340 (center s___)))
 (let ((?x481 (top ?x340)))
 (let ((?x483 (stack ?x481 ?x147)))
 (let (($x510 (= ?x316 ?x483)))
 (let (($x493 ((_ is stack ) ?x340)))
 (let (($x494 (= c___ center-to-right)))
 (let (($x495 (and $x494 $x493)))
 (let (($x496 (= c___ center-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x144 (left s___)))
 (let (($x498 ((_ is stack ) ?x144)))
 (let (($x499 (= c___ left-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let (($x531 (ite $x500 $x514 (ite $x497 $x514 (ite $x495 $x510 (ite $x492 $x511 (ite $x490 $x511 $x514)))))))
 (let ((?x338 (top ?x144)))
 (let ((?x477 (stack ?x338 ?x147)))
 (let (($x506 (= ?x316 ?x477)))
 (let (($x501 (= c___ left-to-center)))
 (let (($x502 (and $x501 $x498)))
 (ite $x502 $x506 $x531)))))))))))))))))))))))))))))))
(assert
 (let ((?x340 (center s___)))
 (let ((?x478 (center s____)))
 (let (($x516 (= ?x478 ?x340)))
 (let ((?x147 (right s___)))
 (let ((?x485 (top ?x147)))
 (let ((?x487 (stack ?x485 ?x340)))
 (let (($x513 (= ?x478 ?x487)))
 (let (($x488 ((_ is stack ) ?x147)))
 (let (($x489 (= c___ right-to-center)))
 (let (($x490 (and $x489 $x488)))
 (let (($x491 (= c___ right-to-left)))
 (let (($x492 (and $x491 $x488)))
 (let ((?x480 (rest ?x340)))
 (let (($x508 (= ?x478 ?x480)))
 (let (($x493 ((_ is stack ) ?x340)))
 (let (($x494 (= c___ center-to-right)))
 (let (($x495 (and $x494 $x493)))
 (let (($x496 (= c___ center-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x144 (left s___)))
 (let ((?x338 (top ?x144)))
 (let ((?x479 (stack ?x338 ?x340)))
 (let (($x507 (= ?x478 ?x479)))
 (let (($x498 ((_ is stack ) ?x144)))
 (let (($x499 (= c___ left-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let (($x530 (ite $x500 $x507 (ite $x497 $x508 (ite $x495 $x508 (ite $x492 $x516 (ite $x490 $x513 $x516)))))))
 (let (($x501 (= c___ left-to-center)))
 (let (($x502 (and $x501 $x498)))
 (ite $x502 $x516 $x530)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x285 (left s____)))
 (let ((?x396 (left s_____)))
 (let (($x656 (= ?x396 ?x285)))
 (let ((?x316 (right s____)))
 (let ((?x623 (top ?x316)))
 (let ((?x624 (stack ?x623 ?x285)))
 (let (($x650 (= ?x396 ?x624)))
 (let (($x626 ((_ is stack ) ?x316)))
 (let (($x629 (= c____ right-to-left)))
 (let (($x630 (and $x629 $x626)))
 (let ((?x478 (center s____)))
 (let (($x631 ((_ is stack ) ?x478)))
 (let (($x632 (= c____ center-to-right)))
 (let (($x633 (and $x632 $x631)))
 (let ((?x619 (top ?x478)))
 (let ((?x620 (stack ?x619 ?x285)))
 (let (($x647 (= ?x396 ?x620)))
 (let (($x634 (= c____ center-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x429 (rest ?x285)))
 (let (($x643 (= ?x396 ?x429)))
 (let (($x636 ((_ is stack ) ?x285)))
 (let (($x637 (= c____ left-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let (($x639 (= c____ left-to-center)))
 (let (($x640 (and $x639 $x636)))
 (ite $x640 $x643 (ite $x638 $x643 (ite $x635 $x647 (ite $x633 $x656 (ite $x630 $x650 $x656))))))))))))))))))))))))))))))))
(assert
 (let ((?x316 (right s____)))
 (let ((?x430 (right s_____)))
 (let (($x652 (= ?x430 ?x316)))
 (let ((?x622 (rest ?x316)))
 (let (($x649 (= ?x430 ?x622)))
 (let (($x626 ((_ is stack ) ?x316)))
 (let (($x627 (= c____ right-to-center)))
 (let (($x628 (and $x627 $x626)))
 (let (($x629 (= c____ right-to-left)))
 (let (($x630 (and $x629 $x626)))
 (let ((?x478 (center s____)))
 (let ((?x619 (top ?x478)))
 (let ((?x621 (stack ?x619 ?x316)))
 (let (($x648 (= ?x430 ?x621)))
 (let (($x631 ((_ is stack ) ?x478)))
 (let (($x632 (= c____ center-to-right)))
 (let (($x633 (and $x632 $x631)))
 (let (($x634 (= c____ center-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x285 (left s____)))
 (let (($x636 ((_ is stack ) ?x285)))
 (let (($x637 (= c____ left-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let (($x669 (ite $x638 $x652 (ite $x635 $x652 (ite $x633 $x648 (ite $x630 $x649 (ite $x628 $x649 $x652)))))))
 (let ((?x476 (top ?x285)))
 (let ((?x615 (stack ?x476 ?x316)))
 (let (($x644 (= ?x430 ?x615)))
 (let (($x639 (= c____ left-to-center)))
 (let (($x640 (and $x639 $x636)))
 (ite $x640 $x644 $x669)))))))))))))))))))))))))))))))
(assert
 (let ((?x478 (center s____)))
 (let ((?x616 (center s_____)))
 (let (($x654 (= ?x616 ?x478)))
 (let ((?x316 (right s____)))
 (let ((?x623 (top ?x316)))
 (let ((?x625 (stack ?x623 ?x478)))
 (let (($x651 (= ?x616 ?x625)))
 (let (($x626 ((_ is stack ) ?x316)))
 (let (($x627 (= c____ right-to-center)))
 (let (($x628 (and $x627 $x626)))
 (let (($x629 (= c____ right-to-left)))
 (let (($x630 (and $x629 $x626)))
 (let ((?x618 (rest ?x478)))
 (let (($x646 (= ?x616 ?x618)))
 (let (($x631 ((_ is stack ) ?x478)))
 (let (($x632 (= c____ center-to-right)))
 (let (($x633 (and $x632 $x631)))
 (let (($x634 (= c____ center-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x285 (left s____)))
 (let ((?x476 (top ?x285)))
 (let ((?x617 (stack ?x476 ?x478)))
 (let (($x645 (= ?x616 ?x617)))
 (let (($x636 ((_ is stack ) ?x285)))
 (let (($x637 (= c____ left-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let (($x668 (ite $x638 $x645 (ite $x635 $x646 (ite $x633 $x646 (ite $x630 $x654 (ite $x628 $x651 $x654)))))))
 (let (($x639 (= c____ left-to-center)))
 (let (($x640 (and $x639 $x636)))
 (ite $x640 $x654 $x668)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x396 (left s_____)))
 (let ((?x534 (left s______)))
 (let (($x794 (= ?x534 ?x396)))
 (let ((?x430 (right s_____)))
 (let ((?x761 (top ?x430)))
 (let ((?x762 (stack ?x761 ?x396)))
 (let (($x788 (= ?x534 ?x762)))
 (let (($x764 ((_ is stack ) ?x430)))
 (let (($x767 (= c_____ right-to-left)))
 (let (($x768 (and $x767 $x764)))
 (let ((?x616 (center s_____)))
 (let (($x769 ((_ is stack ) ?x616)))
 (let (($x770 (= c_____ center-to-right)))
 (let (($x771 (and $x770 $x769)))
 (let ((?x757 (top ?x616)))
 (let ((?x758 (stack ?x757 ?x396)))
 (let (($x785 (= ?x534 ?x758)))
 (let (($x772 (= c_____ center-to-left)))
 (let (($x773 (and $x772 $x769)))
 (let ((?x567 (rest ?x396)))
 (let (($x781 (= ?x534 ?x567)))
 (let (($x774 ((_ is stack ) ?x396)))
 (let (($x775 (= c_____ left-to-right)))
 (let (($x776 (and $x775 $x774)))
 (let (($x777 (= c_____ left-to-center)))
 (let (($x778 (and $x777 $x774)))
 (ite $x778 $x781 (ite $x776 $x781 (ite $x773 $x785 (ite $x771 $x794 (ite $x768 $x788 $x794))))))))))))))))))))))))))))))))
(assert
 (let ((?x430 (right s_____)))
 (let ((?x568 (right s______)))
 (let (($x790 (= ?x568 ?x430)))
 (let ((?x760 (rest ?x430)))
 (let (($x787 (= ?x568 ?x760)))
 (let (($x764 ((_ is stack ) ?x430)))
 (let (($x765 (= c_____ right-to-center)))
 (let (($x766 (and $x765 $x764)))
 (let (($x767 (= c_____ right-to-left)))
 (let (($x768 (and $x767 $x764)))
 (let ((?x616 (center s_____)))
 (let ((?x757 (top ?x616)))
 (let ((?x759 (stack ?x757 ?x430)))
 (let (($x786 (= ?x568 ?x759)))
 (let (($x769 ((_ is stack ) ?x616)))
 (let (($x770 (= c_____ center-to-right)))
 (let (($x771 (and $x770 $x769)))
 (let (($x772 (= c_____ center-to-left)))
 (let (($x773 (and $x772 $x769)))
 (let ((?x396 (left s_____)))
 (let (($x774 ((_ is stack ) ?x396)))
 (let (($x775 (= c_____ left-to-right)))
 (let (($x776 (and $x775 $x774)))
 (let (($x807 (ite $x776 $x790 (ite $x773 $x790 (ite $x771 $x786 (ite $x768 $x787 (ite $x766 $x787 $x790)))))))
 (let ((?x614 (top ?x396)))
 (let ((?x753 (stack ?x614 ?x430)))
 (let (($x782 (= ?x568 ?x753)))
 (let (($x777 (= c_____ left-to-center)))
 (let (($x778 (and $x777 $x774)))
 (ite $x778 $x782 $x807)))))))))))))))))))))))))))))))
(assert
 (let ((?x616 (center s_____)))
 (let ((?x754 (center s______)))
 (let (($x792 (= ?x754 ?x616)))
 (let ((?x430 (right s_____)))
 (let ((?x761 (top ?x430)))
 (let ((?x763 (stack ?x761 ?x616)))
 (let (($x789 (= ?x754 ?x763)))
 (let (($x764 ((_ is stack ) ?x430)))
 (let (($x765 (= c_____ right-to-center)))
 (let (($x766 (and $x765 $x764)))
 (let (($x767 (= c_____ right-to-left)))
 (let (($x768 (and $x767 $x764)))
 (let ((?x756 (rest ?x616)))
 (let (($x784 (= ?x754 ?x756)))
 (let (($x769 ((_ is stack ) ?x616)))
 (let (($x770 (= c_____ center-to-right)))
 (let (($x771 (and $x770 $x769)))
 (let (($x772 (= c_____ center-to-left)))
 (let (($x773 (and $x772 $x769)))
 (let ((?x396 (left s_____)))
 (let ((?x614 (top ?x396)))
 (let ((?x755 (stack ?x614 ?x616)))
 (let (($x783 (= ?x754 ?x755)))
 (let (($x774 ((_ is stack ) ?x396)))
 (let (($x775 (= c_____ left-to-right)))
 (let (($x776 (and $x775 $x774)))
 (let (($x806 (ite $x776 $x783 (ite $x773 $x784 (ite $x771 $x784 (ite $x768 $x792 (ite $x766 $x789 $x792)))))))
 (let (($x777 (= c_____ left-to-center)))
 (let (($x778 (and $x777 $x774)))
 (ite $x778 $x792 $x806)))))))))))))))))))))))))))))))
(assert
 (let ((?x49 (stack K (stack J (stack I (stack H (stack F (stack B empty))))))))
 (let ((?x50 (stack M ?x49)))
 (let ((?x568 (right s______)))
 (let (($x810 (= ?x568 ?x50)))
 (let ((?x43 (stack A (stack D (stack G empty)))))
 (let ((?x754 (center s______)))
 (let (($x841 (= ?x754 ?x43)))
 (let ((?x40 (stack E (stack L (stack C empty)))))
 (let ((?x534 (left s______)))
 (let (($x842 (= ?x534 ?x40)))
 (let (($x844 (not (and $x842 $x841 $x810))))
 (not $x844)))))))))))))
(check-sat)
(exit)
