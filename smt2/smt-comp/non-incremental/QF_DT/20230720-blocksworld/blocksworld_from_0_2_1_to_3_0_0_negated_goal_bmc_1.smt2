(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C 0)) (((A) (B) (C))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x66 (left s_tmp_)))
 (= ?x66 empty)))
(assert
 (let ((?x16 (stack C empty)))
 (let ((?x15 (stack A ?x16)))
 (let ((?x69 (center s_tmp__)))
 (= ?x69 ?x15)))))
(assert
 (let ((?x17 (stack B empty)))
 (let ((?x72 (right s_tmp___)))
 (= ?x72 ?x17))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x99 (left s_tmp__)))
 (= (left s_tmp___) ?x99)))
(assert
 (let ((?x69 (center s_tmp__)))
 (= (center s_tmp___) ?x69)))
(assert
 (let ((?x103 (center s_tmp_)))
 (= ?x103 (center s_tmp))))
(assert
 (let ((?x106 (right s_tmp_)))
 (= ?x106 (right s_tmp))))
(assert
 (let ((?x66 (left s_tmp_)))
 (let ((?x99 (left s_tmp__)))
 (= ?x99 ?x66))))
(assert
 (let ((?x106 (right s_tmp_)))
 (let ((?x110 (right s_tmp__)))
 (= ?x110 ?x106))))
(assert
 (= c__ c!1))
(assert
 (let ((?x43 (left s_)))
 (let ((?x163 (left s__)))
 (let (($x208 (= ?x163 ?x43)))
 (let ((?x46 (right s_)))
 (let (($x178 ((_ is stack ) ?x46)))
 (let (($x181 (= c_ right-to-left)))
 (let (($x182 (and $x181 $x178)))
 (let ((?x48 (center s_)))
 (let (($x183 ((_ is stack ) ?x48)))
 (let (($x184 (= c_ center-to-right)))
 (let (($x185 (and $x184 $x183)))
 (let (($x186 (= c_ center-to-left)))
 (let (($x187 (and $x186 $x183)))
 (let (($x217 (ite $x187 (= ?x163 (stack (top ?x48) ?x43)) (ite $x185 $x208 (ite $x182 (= ?x163 (stack (top ?x46) ?x43)) $x208)))))
 (let ((?x164 (rest ?x43)))
 (let (($x195 (= ?x163 ?x164)))
 (let (($x188 ((_ is stack ) ?x43)))
 (let (($x190 (and (= c_ left-to-right) $x188)))
 (let (($x192 (and (= c_ left-to-center) $x188)))
 (ite $x192 $x195 (ite $x190 $x195 $x217))))))))))))))))))))))
(assert
 (let ((?x46 (right s_)))
 (let ((?x165 (right s__)))
 (let (($x204 (= ?x165 ?x46)))
 (let ((?x174 (rest ?x46)))
 (let (($x201 (= ?x165 ?x174)))
 (let (($x178 ((_ is stack ) ?x46)))
 (let (($x179 (= c_ right-to-center)))
 (let (($x180 (and $x179 $x178)))
 (let (($x181 (= c_ right-to-left)))
 (let (($x182 (and $x181 $x178)))
 (let ((?x48 (center s_)))
 (let (($x183 ((_ is stack ) ?x48)))
 (let (($x184 (= c_ center-to-right)))
 (let (($x185 (and $x184 $x183)))
 (let (($x214 (ite $x185 (= ?x165 (stack (top ?x48) ?x46)) (ite $x182 $x201 (ite $x180 $x201 $x204)))))
 (let (($x186 (= c_ center-to-left)))
 (let (($x187 (and $x186 $x183)))
 (let ((?x43 (left s_)))
 (let (($x188 ((_ is stack ) ?x43)))
 (let (($x190 (and (= c_ left-to-right) $x188)))
 (let (($x192 (and (= c_ left-to-center) $x188)))
 (ite $x192 (= ?x165 (stack (top ?x43) ?x46)) (ite $x190 $x204 (ite $x187 $x204 $x214)))))))))))))))))))))))))
(assert
 (let ((?x48 (center s_)))
 (let ((?x168 (center s__)))
 (let (($x206 (= ?x168 ?x48)))
 (let ((?x46 (right s_)))
 (let (($x178 ((_ is stack ) ?x46)))
 (let (($x179 (= c_ right-to-center)))
 (let (($x180 (and $x179 $x178)))
 (let (($x181 (= c_ right-to-left)))
 (let (($x182 (and $x181 $x178)))
 (let ((?x170 (rest ?x48)))
 (let (($x198 (= ?x168 ?x170)))
 (let (($x183 ((_ is stack ) ?x48)))
 (let (($x184 (= c_ center-to-right)))
 (let (($x185 (and $x184 $x183)))
 (let (($x213 (ite $x185 $x198 (ite $x182 $x206 (ite $x180 (= ?x168 (stack (top ?x46) ?x48)) $x206)))))
 (let (($x186 (= c_ center-to-left)))
 (let (($x187 (and $x186 $x183)))
 (let ((?x43 (left s_)))
 (let (($x188 ((_ is stack ) ?x43)))
 (let (($x190 (and (= c_ left-to-right) $x188)))
 (let (($x192 (and (= c_ left-to-center) $x188)))
 (ite $x192 $x206 (ite $x190 (= ?x168 (stack (top ?x43) ?x48)) (ite $x187 $x198 $x213)))))))))))))))))))))))))
(assert
 (let ((?x165 (right s__)))
 (let (($x236 (= ?x165 empty)))
 (let ((?x168 (center s__)))
 (let (($x224 (= ?x168 empty)))
 (let ((?x19 (stack A (stack B (stack C empty)))))
 (let ((?x163 (left s__)))
 (let (($x247 (= ?x163 ?x19)))
 (let (($x254 (not (and $x247 $x224 $x236))))
 (not $x254))))))))))
(check-sat)
(exit)
