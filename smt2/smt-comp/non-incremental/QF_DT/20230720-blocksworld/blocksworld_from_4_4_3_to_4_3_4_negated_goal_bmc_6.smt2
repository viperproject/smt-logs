(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x24 (stack A empty)))
 (let ((?x23 (stack E ?x24)))
 (let ((?x25 (stack I ?x23)))
 (let ((?x26 (stack F ?x25)))
 (let ((?x90 (left s_tmp_)))
 (= ?x90 ?x26)))))))
(assert
 (let ((?x27 (stack K empty)))
 (let ((?x28 (stack H ?x27)))
 (let ((?x29 (stack D ?x28)))
 (let ((?x30 (stack G ?x29)))
 (let ((?x93 (center s_tmp__)))
 (= ?x93 ?x30)))))))
(assert
 (let ((?x31 (stack B empty)))
 (let ((?x32 (stack C ?x31)))
 (let ((?x33 (stack J ?x32)))
 (let ((?x96 (right s_tmp___)))
 (= ?x96 ?x33))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x123 (left s_tmp__)))
 (= (left s_tmp___) ?x123)))
(assert
 (let ((?x93 (center s_tmp__)))
 (= (center s_tmp___) ?x93)))
(assert
 (let ((?x127 (center s_tmp_)))
 (= ?x127 (center s_tmp))))
(assert
 (let ((?x130 (right s_tmp_)))
 (= ?x130 (right s_tmp))))
(assert
 (let ((?x90 (left s_tmp_)))
 (let ((?x123 (left s_tmp__)))
 (= ?x123 ?x90))))
(assert
 (let ((?x130 (right s_tmp_)))
 (let ((?x134 (right s_tmp__)))
 (= ?x134 ?x130))))
(assert
 (= c__ c!1))
(assert
 (let ((?x67 (left s_)))
 (let ((?x217 (left s__)))
 (let (($x256 (= ?x217 ?x67)))
 (let ((?x70 (right s_)))
 (let (($x223 ((_ is stack ) ?x70)))
 (let (($x232 (= c_ right-to-left)))
 (let (($x212 (and $x232 $x223)))
 (let ((?x72 (center s_)))
 (let (($x213 ((_ is stack ) ?x72)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x227 (and $x214 $x213)))
 (let (($x228 (= c_ center-to-left)))
 (let (($x229 (and $x228 $x213)))
 (let (($x265 (ite $x229 (= ?x217 (stack (top ?x72) ?x67)) (ite $x227 $x256 (ite $x212 (= ?x217 (stack (top ?x70) ?x67)) $x256)))))
 (let (($x243 (= ?x217 (rest ?x67))))
 (let (($x233 ((_ is stack ) ?x67)))
 (let (($x234 (= c_ left-to-right)))
 (let (($x235 (and $x234 $x233)))
 (let (($x239 (= c_ left-to-center)))
 (let (($x240 (and $x239 $x233)))
 (ite $x240 $x243 (ite $x235 $x243 $x265)))))))))))))))))))))))
(assert
 (let ((?x70 (right s_)))
 (let ((?x219 (right s__)))
 (let (($x252 (= ?x219 ?x70)))
 (let (($x249 (= ?x219 (rest ?x70))))
 (let (($x223 ((_ is stack ) ?x70)))
 (let (($x230 (= c_ right-to-center)))
 (let (($x231 (and $x230 $x223)))
 (let (($x232 (= c_ right-to-left)))
 (let (($x212 (and $x232 $x223)))
 (let ((?x72 (center s_)))
 (let (($x213 ((_ is stack ) ?x72)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x227 (and $x214 $x213)))
 (let (($x262 (ite $x227 (= ?x219 (stack (top ?x72) ?x70)) (ite $x212 $x249 (ite $x231 $x249 $x252)))))
 (let (($x228 (= c_ center-to-left)))
 (let (($x229 (and $x228 $x213)))
 (let ((?x67 (left s_)))
 (let (($x233 ((_ is stack ) ?x67)))
 (let (($x234 (= c_ left-to-right)))
 (let (($x235 (and $x234 $x233)))
 (let (($x239 (= c_ left-to-center)))
 (let (($x240 (and $x239 $x233)))
 (ite $x240 (= ?x219 (stack (top ?x67) ?x70)) (ite $x235 $x252 (ite $x229 $x252 $x262))))))))))))))))))))))))))
(assert
 (let ((?x72 (center s_)))
 (let ((?x210 (center s__)))
 (let (($x254 (= ?x210 ?x72)))
 (let ((?x70 (right s_)))
 (let (($x223 ((_ is stack ) ?x70)))
 (let (($x230 (= c_ right-to-center)))
 (let (($x231 (and $x230 $x223)))
 (let (($x232 (= c_ right-to-left)))
 (let (($x212 (and $x232 $x223)))
 (let (($x246 (= ?x210 (rest ?x72))))
 (let (($x213 ((_ is stack ) ?x72)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x227 (and $x214 $x213)))
 (let (($x261 (ite $x227 $x246 (ite $x212 $x254 (ite $x231 (= ?x210 (stack (top ?x70) ?x72)) $x254)))))
 (let (($x228 (= c_ center-to-left)))
 (let (($x229 (and $x228 $x213)))
 (let ((?x67 (left s_)))
 (let (($x233 ((_ is stack ) ?x67)))
 (let (($x234 (= c_ left-to-right)))
 (let (($x235 (and $x234 $x233)))
 (let (($x239 (= c_ left-to-center)))
 (let (($x240 (and $x239 $x233)))
 (ite $x240 $x254 (ite $x235 (= ?x210 (stack (top ?x67) ?x72)) (ite $x229 $x246 $x261))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x217 (left s__)))
 (let ((?x137 (left s___)))
 (let (($x385 (= ?x137 ?x217)))
 (let ((?x219 (right s__)))
 (let ((?x352 (top ?x219)))
 (let ((?x353 (stack ?x352 ?x217)))
 (let (($x379 (= ?x137 ?x353)))
 (let (($x355 ((_ is stack ) ?x219)))
 (let (($x358 (= c__ right-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x210 (center s__)))
 (let (($x360 ((_ is stack ) ?x210)))
 (let (($x361 (= c__ center-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let ((?x348 (top ?x210)))
 (let ((?x349 (stack ?x348 ?x217)))
 (let (($x376 (= ?x137 ?x349)))
 (let (($x363 (= c__ center-to-left)))
 (let (($x364 (and $x363 $x360)))
 (let ((?x139 (rest ?x217)))
 (let (($x372 (= ?x137 ?x139)))
 (let (($x365 ((_ is stack ) ?x217)))
 (let (($x366 (= c__ left-to-right)))
 (let (($x367 (and $x366 $x365)))
 (let (($x368 (= c__ left-to-center)))
 (let (($x369 (and $x368 $x365)))
 (ite $x369 $x372 (ite $x367 $x372 (ite $x364 $x376 (ite $x362 $x385 (ite $x359 $x379 $x385))))))))))))))))))))))))))))))))
(assert
 (let ((?x219 (right s__)))
 (let ((?x140 (right s___)))
 (let (($x381 (= ?x140 ?x219)))
 (let ((?x351 (rest ?x219)))
 (let (($x378 (= ?x140 ?x351)))
 (let (($x355 ((_ is stack ) ?x219)))
 (let (($x356 (= c__ right-to-center)))
 (let (($x357 (and $x356 $x355)))
 (let (($x358 (= c__ right-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x210 (center s__)))
 (let ((?x348 (top ?x210)))
 (let ((?x350 (stack ?x348 ?x219)))
 (let (($x377 (= ?x140 ?x350)))
 (let (($x360 ((_ is stack ) ?x210)))
 (let (($x361 (= c__ center-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let (($x363 (= c__ center-to-left)))
 (let (($x364 (and $x363 $x360)))
 (let ((?x217 (left s__)))
 (let (($x365 ((_ is stack ) ?x217)))
 (let (($x366 (= c__ left-to-right)))
 (let (($x367 (and $x366 $x365)))
 (let (($x398 (ite $x367 $x381 (ite $x364 $x381 (ite $x362 $x377 (ite $x359 $x378 (ite $x357 $x378 $x381)))))))
 (let ((?x208 (top ?x217)))
 (let ((?x344 (stack ?x208 ?x219)))
 (let (($x373 (= ?x140 ?x344)))
 (let (($x368 (= c__ left-to-center)))
 (let (($x369 (and $x368 $x365)))
 (ite $x369 $x373 $x398)))))))))))))))))))))))))))))))
(assert
 (let ((?x210 (center s__)))
 (let ((?x345 (center s___)))
 (let (($x383 (= ?x345 ?x210)))
 (let ((?x219 (right s__)))
 (let ((?x352 (top ?x219)))
 (let ((?x354 (stack ?x352 ?x210)))
 (let (($x380 (= ?x345 ?x354)))
 (let (($x355 ((_ is stack ) ?x219)))
 (let (($x356 (= c__ right-to-center)))
 (let (($x357 (and $x356 $x355)))
 (let (($x358 (= c__ right-to-left)))
 (let (($x359 (and $x358 $x355)))
 (let ((?x347 (rest ?x210)))
 (let (($x375 (= ?x345 ?x347)))
 (let (($x360 ((_ is stack ) ?x210)))
 (let (($x361 (= c__ center-to-right)))
 (let (($x362 (and $x361 $x360)))
 (let (($x363 (= c__ center-to-left)))
 (let (($x364 (and $x363 $x360)))
 (let ((?x217 (left s__)))
 (let ((?x208 (top ?x217)))
 (let ((?x346 (stack ?x208 ?x210)))
 (let (($x374 (= ?x345 ?x346)))
 (let (($x365 ((_ is stack ) ?x217)))
 (let (($x366 (= c__ left-to-right)))
 (let (($x367 (and $x366 $x365)))
 (let (($x397 (ite $x367 $x374 (ite $x364 $x375 (ite $x362 $x375 (ite $x359 $x383 (ite $x357 $x380 $x383)))))))
 (let (($x368 (= c__ left-to-center)))
 (let (($x369 (and $x368 $x365)))
 (ite $x369 $x383 $x397)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x137 (left s___)))
 (let ((?x272 (left s____)))
 (let (($x523 (= ?x272 ?x137)))
 (let ((?x140 (right s___)))
 (let ((?x490 (top ?x140)))
 (let ((?x491 (stack ?x490 ?x137)))
 (let (($x517 (= ?x272 ?x491)))
 (let (($x493 ((_ is stack ) ?x140)))
 (let (($x496 (= c___ right-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x345 (center s___)))
 (let (($x498 ((_ is stack ) ?x345)))
 (let (($x499 (= c___ center-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let ((?x486 (top ?x345)))
 (let ((?x487 (stack ?x486 ?x137)))
 (let (($x514 (= ?x272 ?x487)))
 (let (($x501 (= c___ center-to-left)))
 (let (($x502 (and $x501 $x498)))
 (let ((?x316 (rest ?x137)))
 (let (($x510 (= ?x272 ?x316)))
 (let (($x503 ((_ is stack ) ?x137)))
 (let (($x504 (= c___ left-to-right)))
 (let (($x505 (and $x504 $x503)))
 (let (($x506 (= c___ left-to-center)))
 (let (($x507 (and $x506 $x503)))
 (ite $x507 $x510 (ite $x505 $x510 (ite $x502 $x514 (ite $x500 $x523 (ite $x497 $x517 $x523))))))))))))))))))))))))))))))))
(assert
 (let ((?x140 (right s___)))
 (let ((?x317 (right s____)))
 (let (($x519 (= ?x317 ?x140)))
 (let ((?x489 (rest ?x140)))
 (let (($x516 (= ?x317 ?x489)))
 (let (($x493 ((_ is stack ) ?x140)))
 (let (($x494 (= c___ right-to-center)))
 (let (($x495 (and $x494 $x493)))
 (let (($x496 (= c___ right-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x345 (center s___)))
 (let ((?x486 (top ?x345)))
 (let ((?x488 (stack ?x486 ?x140)))
 (let (($x515 (= ?x317 ?x488)))
 (let (($x498 ((_ is stack ) ?x345)))
 (let (($x499 (= c___ center-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let (($x501 (= c___ center-to-left)))
 (let (($x502 (and $x501 $x498)))
 (let ((?x137 (left s___)))
 (let (($x503 ((_ is stack ) ?x137)))
 (let (($x504 (= c___ left-to-right)))
 (let (($x505 (and $x504 $x503)))
 (let (($x536 (ite $x505 $x519 (ite $x502 $x519 (ite $x500 $x515 (ite $x497 $x516 (ite $x495 $x516 $x519)))))))
 (let ((?x343 (top ?x137)))
 (let ((?x482 (stack ?x343 ?x140)))
 (let (($x511 (= ?x317 ?x482)))
 (let (($x506 (= c___ left-to-center)))
 (let (($x507 (and $x506 $x503)))
 (ite $x507 $x511 $x536)))))))))))))))))))))))))))))))
(assert
 (let ((?x345 (center s___)))
 (let ((?x483 (center s____)))
 (let (($x521 (= ?x483 ?x345)))
 (let ((?x140 (right s___)))
 (let ((?x490 (top ?x140)))
 (let ((?x492 (stack ?x490 ?x345)))
 (let (($x518 (= ?x483 ?x492)))
 (let (($x493 ((_ is stack ) ?x140)))
 (let (($x494 (= c___ right-to-center)))
 (let (($x495 (and $x494 $x493)))
 (let (($x496 (= c___ right-to-left)))
 (let (($x497 (and $x496 $x493)))
 (let ((?x485 (rest ?x345)))
 (let (($x513 (= ?x483 ?x485)))
 (let (($x498 ((_ is stack ) ?x345)))
 (let (($x499 (= c___ center-to-right)))
 (let (($x500 (and $x499 $x498)))
 (let (($x501 (= c___ center-to-left)))
 (let (($x502 (and $x501 $x498)))
 (let ((?x137 (left s___)))
 (let ((?x343 (top ?x137)))
 (let ((?x484 (stack ?x343 ?x345)))
 (let (($x512 (= ?x483 ?x484)))
 (let (($x503 ((_ is stack ) ?x137)))
 (let (($x504 (= c___ left-to-right)))
 (let (($x505 (and $x504 $x503)))
 (let (($x535 (ite $x505 $x512 (ite $x502 $x513 (ite $x500 $x513 (ite $x497 $x521 (ite $x495 $x518 $x521)))))))
 (let (($x506 (= c___ left-to-center)))
 (let (($x507 (and $x506 $x503)))
 (ite $x507 $x521 $x535)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x272 (left s____)))
 (let ((?x401 (left s_____)))
 (let (($x661 (= ?x401 ?x272)))
 (let ((?x317 (right s____)))
 (let ((?x628 (top ?x317)))
 (let ((?x629 (stack ?x628 ?x272)))
 (let (($x655 (= ?x401 ?x629)))
 (let (($x631 ((_ is stack ) ?x317)))
 (let (($x634 (= c____ right-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x483 (center s____)))
 (let (($x636 ((_ is stack ) ?x483)))
 (let (($x637 (= c____ center-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let ((?x624 (top ?x483)))
 (let ((?x625 (stack ?x624 ?x272)))
 (let (($x652 (= ?x401 ?x625)))
 (let (($x639 (= c____ center-to-left)))
 (let (($x640 (and $x639 $x636)))
 (let ((?x434 (rest ?x272)))
 (let (($x648 (= ?x401 ?x434)))
 (let (($x641 ((_ is stack ) ?x272)))
 (let (($x642 (= c____ left-to-right)))
 (let (($x643 (and $x642 $x641)))
 (let (($x644 (= c____ left-to-center)))
 (let (($x645 (and $x644 $x641)))
 (ite $x645 $x648 (ite $x643 $x648 (ite $x640 $x652 (ite $x638 $x661 (ite $x635 $x655 $x661))))))))))))))))))))))))))))))))
(assert
 (let ((?x317 (right s____)))
 (let ((?x435 (right s_____)))
 (let (($x657 (= ?x435 ?x317)))
 (let ((?x627 (rest ?x317)))
 (let (($x654 (= ?x435 ?x627)))
 (let (($x631 ((_ is stack ) ?x317)))
 (let (($x632 (= c____ right-to-center)))
 (let (($x633 (and $x632 $x631)))
 (let (($x634 (= c____ right-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x483 (center s____)))
 (let ((?x624 (top ?x483)))
 (let ((?x626 (stack ?x624 ?x317)))
 (let (($x653 (= ?x435 ?x626)))
 (let (($x636 ((_ is stack ) ?x483)))
 (let (($x637 (= c____ center-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let (($x639 (= c____ center-to-left)))
 (let (($x640 (and $x639 $x636)))
 (let ((?x272 (left s____)))
 (let (($x641 ((_ is stack ) ?x272)))
 (let (($x642 (= c____ left-to-right)))
 (let (($x643 (and $x642 $x641)))
 (let (($x674 (ite $x643 $x657 (ite $x640 $x657 (ite $x638 $x653 (ite $x635 $x654 (ite $x633 $x654 $x657)))))))
 (let ((?x481 (top ?x272)))
 (let ((?x620 (stack ?x481 ?x317)))
 (let (($x649 (= ?x435 ?x620)))
 (let (($x644 (= c____ left-to-center)))
 (let (($x645 (and $x644 $x641)))
 (ite $x645 $x649 $x674)))))))))))))))))))))))))))))))
(assert
 (let ((?x483 (center s____)))
 (let ((?x621 (center s_____)))
 (let (($x659 (= ?x621 ?x483)))
 (let ((?x317 (right s____)))
 (let ((?x628 (top ?x317)))
 (let ((?x630 (stack ?x628 ?x483)))
 (let (($x656 (= ?x621 ?x630)))
 (let (($x631 ((_ is stack ) ?x317)))
 (let (($x632 (= c____ right-to-center)))
 (let (($x633 (and $x632 $x631)))
 (let (($x634 (= c____ right-to-left)))
 (let (($x635 (and $x634 $x631)))
 (let ((?x623 (rest ?x483)))
 (let (($x651 (= ?x621 ?x623)))
 (let (($x636 ((_ is stack ) ?x483)))
 (let (($x637 (= c____ center-to-right)))
 (let (($x638 (and $x637 $x636)))
 (let (($x639 (= c____ center-to-left)))
 (let (($x640 (and $x639 $x636)))
 (let ((?x272 (left s____)))
 (let ((?x481 (top ?x272)))
 (let ((?x622 (stack ?x481 ?x483)))
 (let (($x650 (= ?x621 ?x622)))
 (let (($x641 ((_ is stack ) ?x272)))
 (let (($x642 (= c____ left-to-right)))
 (let (($x643 (and $x642 $x641)))
 (let (($x673 (ite $x643 $x650 (ite $x640 $x651 (ite $x638 $x651 (ite $x635 $x659 (ite $x633 $x656 $x659)))))))
 (let (($x644 (= c____ left-to-center)))
 (let (($x645 (and $x644 $x641)))
 (ite $x645 $x659 $x673)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x401 (left s_____)))
 (let ((?x539 (left s______)))
 (let (($x799 (= ?x539 ?x401)))
 (let ((?x435 (right s_____)))
 (let ((?x766 (top ?x435)))
 (let ((?x767 (stack ?x766 ?x401)))
 (let (($x793 (= ?x539 ?x767)))
 (let (($x769 ((_ is stack ) ?x435)))
 (let (($x772 (= c_____ right-to-left)))
 (let (($x773 (and $x772 $x769)))
 (let ((?x621 (center s_____)))
 (let (($x774 ((_ is stack ) ?x621)))
 (let (($x775 (= c_____ center-to-right)))
 (let (($x776 (and $x775 $x774)))
 (let ((?x762 (top ?x621)))
 (let ((?x763 (stack ?x762 ?x401)))
 (let (($x790 (= ?x539 ?x763)))
 (let (($x777 (= c_____ center-to-left)))
 (let (($x778 (and $x777 $x774)))
 (let ((?x572 (rest ?x401)))
 (let (($x786 (= ?x539 ?x572)))
 (let (($x779 ((_ is stack ) ?x401)))
 (let (($x780 (= c_____ left-to-right)))
 (let (($x781 (and $x780 $x779)))
 (let (($x782 (= c_____ left-to-center)))
 (let (($x783 (and $x782 $x779)))
 (ite $x783 $x786 (ite $x781 $x786 (ite $x778 $x790 (ite $x776 $x799 (ite $x773 $x793 $x799))))))))))))))))))))))))))))))))
(assert
 (let ((?x435 (right s_____)))
 (let ((?x573 (right s______)))
 (let (($x795 (= ?x573 ?x435)))
 (let ((?x765 (rest ?x435)))
 (let (($x792 (= ?x573 ?x765)))
 (let (($x769 ((_ is stack ) ?x435)))
 (let (($x770 (= c_____ right-to-center)))
 (let (($x771 (and $x770 $x769)))
 (let (($x772 (= c_____ right-to-left)))
 (let (($x773 (and $x772 $x769)))
 (let ((?x621 (center s_____)))
 (let ((?x762 (top ?x621)))
 (let ((?x764 (stack ?x762 ?x435)))
 (let (($x791 (= ?x573 ?x764)))
 (let (($x774 ((_ is stack ) ?x621)))
 (let (($x775 (= c_____ center-to-right)))
 (let (($x776 (and $x775 $x774)))
 (let (($x777 (= c_____ center-to-left)))
 (let (($x778 (and $x777 $x774)))
 (let ((?x401 (left s_____)))
 (let (($x779 ((_ is stack ) ?x401)))
 (let (($x780 (= c_____ left-to-right)))
 (let (($x781 (and $x780 $x779)))
 (let (($x812 (ite $x781 $x795 (ite $x778 $x795 (ite $x776 $x791 (ite $x773 $x792 (ite $x771 $x792 $x795)))))))
 (let ((?x619 (top ?x401)))
 (let ((?x758 (stack ?x619 ?x435)))
 (let (($x787 (= ?x573 ?x758)))
 (let (($x782 (= c_____ left-to-center)))
 (let (($x783 (and $x782 $x779)))
 (ite $x783 $x787 $x812)))))))))))))))))))))))))))))))
(assert
 (let ((?x621 (center s_____)))
 (let ((?x759 (center s______)))
 (let (($x797 (= ?x759 ?x621)))
 (let ((?x435 (right s_____)))
 (let ((?x766 (top ?x435)))
 (let ((?x768 (stack ?x766 ?x621)))
 (let (($x794 (= ?x759 ?x768)))
 (let (($x769 ((_ is stack ) ?x435)))
 (let (($x770 (= c_____ right-to-center)))
 (let (($x771 (and $x770 $x769)))
 (let (($x772 (= c_____ right-to-left)))
 (let (($x773 (and $x772 $x769)))
 (let ((?x761 (rest ?x621)))
 (let (($x789 (= ?x759 ?x761)))
 (let (($x774 ((_ is stack ) ?x621)))
 (let (($x775 (= c_____ center-to-right)))
 (let (($x776 (and $x775 $x774)))
 (let (($x777 (= c_____ center-to-left)))
 (let (($x778 (and $x777 $x774)))
 (let ((?x401 (left s_____)))
 (let ((?x619 (top ?x401)))
 (let ((?x760 (stack ?x619 ?x621)))
 (let (($x788 (= ?x759 ?x760)))
 (let (($x779 ((_ is stack ) ?x401)))
 (let (($x780 (= c_____ left-to-right)))
 (let (($x781 (and $x780 $x779)))
 (let (($x811 (ite $x781 $x788 (ite $x778 $x789 (ite $x776 $x789 (ite $x773 $x797 (ite $x771 $x794 $x797)))))))
 (let (($x782 (= c_____ left-to-center)))
 (let (($x783 (and $x782 $x779)))
 (ite $x783 $x797 $x811)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x539 (left s______)))
 (let ((?x677 (left s_______)))
 (let (($x937 (= ?x677 ?x539)))
 (let ((?x573 (right s______)))
 (let ((?x904 (top ?x573)))
 (let ((?x905 (stack ?x904 ?x539)))
 (let (($x931 (= ?x677 ?x905)))
 (let (($x907 ((_ is stack ) ?x573)))
 (let (($x910 (= c______ right-to-left)))
 (let (($x911 (and $x910 $x907)))
 (let ((?x759 (center s______)))
 (let (($x912 ((_ is stack ) ?x759)))
 (let (($x913 (= c______ center-to-right)))
 (let (($x914 (and $x913 $x912)))
 (let ((?x900 (top ?x759)))
 (let ((?x901 (stack ?x900 ?x539)))
 (let (($x928 (= ?x677 ?x901)))
 (let (($x915 (= c______ center-to-left)))
 (let (($x916 (and $x915 $x912)))
 (let ((?x710 (rest ?x539)))
 (let (($x924 (= ?x677 ?x710)))
 (let (($x917 ((_ is stack ) ?x539)))
 (let (($x918 (= c______ left-to-right)))
 (let (($x919 (and $x918 $x917)))
 (let (($x920 (= c______ left-to-center)))
 (let (($x921 (and $x920 $x917)))
 (ite $x921 $x924 (ite $x919 $x924 (ite $x916 $x928 (ite $x914 $x937 (ite $x911 $x931 $x937))))))))))))))))))))))))))))))))
(assert
 (let ((?x573 (right s______)))
 (let ((?x711 (right s_______)))
 (let (($x933 (= ?x711 ?x573)))
 (let ((?x903 (rest ?x573)))
 (let (($x930 (= ?x711 ?x903)))
 (let (($x907 ((_ is stack ) ?x573)))
 (let (($x908 (= c______ right-to-center)))
 (let (($x909 (and $x908 $x907)))
 (let (($x910 (= c______ right-to-left)))
 (let (($x911 (and $x910 $x907)))
 (let ((?x759 (center s______)))
 (let ((?x900 (top ?x759)))
 (let ((?x902 (stack ?x900 ?x573)))
 (let (($x929 (= ?x711 ?x902)))
 (let (($x912 ((_ is stack ) ?x759)))
 (let (($x913 (= c______ center-to-right)))
 (let (($x914 (and $x913 $x912)))
 (let (($x915 (= c______ center-to-left)))
 (let (($x916 (and $x915 $x912)))
 (let ((?x539 (left s______)))
 (let (($x917 ((_ is stack ) ?x539)))
 (let (($x918 (= c______ left-to-right)))
 (let (($x919 (and $x918 $x917)))
 (let (($x950 (ite $x919 $x933 (ite $x916 $x933 (ite $x914 $x929 (ite $x911 $x930 (ite $x909 $x930 $x933)))))))
 (let ((?x757 (top ?x539)))
 (let ((?x896 (stack ?x757 ?x573)))
 (let (($x925 (= ?x711 ?x896)))
 (let (($x920 (= c______ left-to-center)))
 (let (($x921 (and $x920 $x917)))
 (ite $x921 $x925 $x950)))))))))))))))))))))))))))))))
(assert
 (let ((?x759 (center s______)))
 (let ((?x897 (center s_______)))
 (let (($x935 (= ?x897 ?x759)))
 (let ((?x573 (right s______)))
 (let ((?x904 (top ?x573)))
 (let ((?x906 (stack ?x904 ?x759)))
 (let (($x932 (= ?x897 ?x906)))
 (let (($x907 ((_ is stack ) ?x573)))
 (let (($x908 (= c______ right-to-center)))
 (let (($x909 (and $x908 $x907)))
 (let (($x910 (= c______ right-to-left)))
 (let (($x911 (and $x910 $x907)))
 (let ((?x899 (rest ?x759)))
 (let (($x927 (= ?x897 ?x899)))
 (let (($x912 ((_ is stack ) ?x759)))
 (let (($x913 (= c______ center-to-right)))
 (let (($x914 (and $x913 $x912)))
 (let (($x915 (= c______ center-to-left)))
 (let (($x916 (and $x915 $x912)))
 (let ((?x539 (left s______)))
 (let ((?x757 (top ?x539)))
 (let ((?x898 (stack ?x757 ?x759)))
 (let (($x926 (= ?x897 ?x898)))
 (let (($x917 ((_ is stack ) ?x539)))
 (let (($x918 (= c______ left-to-right)))
 (let (($x919 (and $x918 $x917)))
 (let (($x949 (ite $x919 $x926 (ite $x916 $x927 (ite $x914 $x927 (ite $x911 $x935 (ite $x909 $x932 $x935)))))))
 (let (($x920 (= c______ left-to-center)))
 (let (($x921 (and $x920 $x917)))
 (ite $x921 $x935 $x949)))))))))))))))))))))))))))))))
(assert
 (let ((?x43 (stack I (stack H (stack G (stack C empty))))))
 (let ((?x711 (right s_______)))
 (let (($x953 (= ?x711 ?x43)))
 (let ((?x39 (stack B (stack D (stack F empty)))))
 (let ((?x897 (center s_______)))
 (let (($x984 (= ?x897 ?x39)))
 (let ((?x36 (stack J (stack E (stack K (stack A empty))))))
 (let ((?x677 (left s_______)))
 (let (($x985 (= ?x677 ?x36)))
 (let (($x987 (not (and $x985 $x984 $x953))))
 (not $x987))))))))))))
(check-sat)
(exit)
