(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(declare-fun c!8 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_________ () Record_left_center_right)
(declare-fun c!9 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__________ () Record_left_center_right)
(declare-fun c!10 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x23 (stack B empty)))
 (let ((?x22 (stack A ?x23)))
 (let ((?x24 (stack F ?x22)))
 (let ((?x25 (stack G ?x24)))
 (let ((?x26 (stack J ?x25)))
 (let ((?x86 (left s_tmp_)))
 (= ?x86 ?x26))))))))
(assert
 (let ((?x27 (stack E empty)))
 (let ((?x28 (stack I ?x27)))
 (let ((?x89 (center s_tmp__)))
 (= ?x89 ?x28)))))
(assert
 (let ((?x29 (stack C empty)))
 (let ((?x30 (stack D ?x29)))
 (let ((?x31 (stack H ?x30)))
 (let ((?x92 (right s_tmp___)))
 (= ?x92 ?x31))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x119 (left s_tmp__)))
 (= (left s_tmp___) ?x119)))
(assert
 (let ((?x89 (center s_tmp__)))
 (= (center s_tmp___) ?x89)))
(assert
 (let ((?x123 (center s_tmp_)))
 (= ?x123 (center s_tmp))))
(assert
 (let ((?x126 (right s_tmp_)))
 (= ?x126 (right s_tmp))))
(assert
 (let ((?x86 (left s_tmp_)))
 (let ((?x119 (left s_tmp__)))
 (= ?x119 ?x86))))
(assert
 (let ((?x126 (right s_tmp_)))
 (let ((?x130 (right s_tmp__)))
 (= ?x130 ?x126))))
(assert
 (= c__ c!1))
(assert
 (let ((?x63 (left s_)))
 (let ((?x219 (left s__)))
 (let (($x249 (= ?x219 ?x63)))
 (let ((?x66 (right s_)))
 (let (($x216 ((_ is stack ) ?x66)))
 (let (($x222 (= c_ right-to-left)))
 (let (($x223 (and $x222 $x216)))
 (let ((?x68 (center s_)))
 (let (($x224 ((_ is stack ) ?x68)))
 (let (($x225 (= c_ center-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x227 (= c_ center-to-left)))
 (let (($x228 (and $x227 $x224)))
 (let (($x258 (ite $x228 (= ?x219 (stack (top ?x68) ?x63)) (ite $x226 $x249 (ite $x223 (= ?x219 (stack (top ?x66) ?x63)) $x249)))))
 (let (($x236 (= ?x219 (rest ?x63))))
 (let (($x229 ((_ is stack ) ?x63)))
 (let (($x230 (= c_ left-to-right)))
 (let (($x231 (and $x230 $x229)))
 (let (($x232 (= c_ left-to-center)))
 (let (($x233 (and $x232 $x229)))
 (ite $x233 $x236 (ite $x231 $x236 $x258)))))))))))))))))))))))
(assert
 (let ((?x66 (right s_)))
 (let ((?x203 (right s__)))
 (let (($x245 (= ?x203 ?x66)))
 (let (($x242 (= ?x203 (rest ?x66))))
 (let (($x216 ((_ is stack ) ?x66)))
 (let (($x220 (= c_ right-to-center)))
 (let (($x221 (and $x220 $x216)))
 (let (($x222 (= c_ right-to-left)))
 (let (($x223 (and $x222 $x216)))
 (let ((?x68 (center s_)))
 (let (($x224 ((_ is stack ) ?x68)))
 (let (($x225 (= c_ center-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x255 (ite $x226 (= ?x203 (stack (top ?x68) ?x66)) (ite $x223 $x242 (ite $x221 $x242 $x245)))))
 (let (($x227 (= c_ center-to-left)))
 (let (($x228 (and $x227 $x224)))
 (let ((?x63 (left s_)))
 (let (($x229 ((_ is stack ) ?x63)))
 (let (($x230 (= c_ left-to-right)))
 (let (($x231 (and $x230 $x229)))
 (let (($x232 (= c_ left-to-center)))
 (let (($x233 (and $x232 $x229)))
 (ite $x233 (= ?x203 (stack (top ?x63) ?x66)) (ite $x231 $x245 (ite $x228 $x245 $x255))))))))))))))))))))))))))
(assert
 (let ((?x68 (center s_)))
 (let ((?x206 (center s__)))
 (let (($x247 (= ?x206 ?x68)))
 (let ((?x66 (right s_)))
 (let (($x216 ((_ is stack ) ?x66)))
 (let (($x220 (= c_ right-to-center)))
 (let (($x221 (and $x220 $x216)))
 (let (($x222 (= c_ right-to-left)))
 (let (($x223 (and $x222 $x216)))
 (let (($x239 (= ?x206 (rest ?x68))))
 (let (($x224 ((_ is stack ) ?x68)))
 (let (($x225 (= c_ center-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x254 (ite $x226 $x239 (ite $x223 $x247 (ite $x221 (= ?x206 (stack (top ?x66) ?x68)) $x247)))))
 (let (($x227 (= c_ center-to-left)))
 (let (($x228 (and $x227 $x224)))
 (let ((?x63 (left s_)))
 (let (($x229 ((_ is stack ) ?x63)))
 (let (($x230 (= c_ left-to-right)))
 (let (($x231 (and $x230 $x229)))
 (let (($x232 (= c_ left-to-center)))
 (let (($x233 (and $x232 $x229)))
 (ite $x233 $x247 (ite $x231 (= ?x206 (stack (top ?x63) ?x68)) (ite $x228 $x239 $x254))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x219 (left s__)))
 (let ((?x133 (left s___)))
 (let (($x378 (= ?x133 ?x219)))
 (let ((?x203 (right s__)))
 (let ((?x345 (top ?x203)))
 (let ((?x346 (stack ?x345 ?x219)))
 (let (($x372 (= ?x133 ?x346)))
 (let (($x348 ((_ is stack ) ?x203)))
 (let (($x351 (= c__ right-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x206 (center s__)))
 (let (($x353 ((_ is stack ) ?x206)))
 (let (($x354 (= c__ center-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let ((?x341 (top ?x206)))
 (let ((?x342 (stack ?x341 ?x219)))
 (let (($x369 (= ?x133 ?x342)))
 (let (($x356 (= c__ center-to-left)))
 (let (($x357 (and $x356 $x353)))
 (let ((?x135 (rest ?x219)))
 (let (($x365 (= ?x133 ?x135)))
 (let (($x358 ((_ is stack ) ?x219)))
 (let (($x359 (= c__ left-to-right)))
 (let (($x360 (and $x359 $x358)))
 (let (($x361 (= c__ left-to-center)))
 (let (($x362 (and $x361 $x358)))
 (ite $x362 $x365 (ite $x360 $x365 (ite $x357 $x369 (ite $x355 $x378 (ite $x352 $x372 $x378))))))))))))))))))))))))))))))))
(assert
 (let ((?x203 (right s__)))
 (let ((?x136 (right s___)))
 (let (($x374 (= ?x136 ?x203)))
 (let ((?x344 (rest ?x203)))
 (let (($x371 (= ?x136 ?x344)))
 (let (($x348 ((_ is stack ) ?x203)))
 (let (($x349 (= c__ right-to-center)))
 (let (($x350 (and $x349 $x348)))
 (let (($x351 (= c__ right-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x206 (center s__)))
 (let ((?x341 (top ?x206)))
 (let ((?x343 (stack ?x341 ?x203)))
 (let (($x370 (= ?x136 ?x343)))
 (let (($x353 ((_ is stack ) ?x206)))
 (let (($x354 (= c__ center-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let (($x356 (= c__ center-to-left)))
 (let (($x357 (and $x356 $x353)))
 (let ((?x219 (left s__)))
 (let (($x358 ((_ is stack ) ?x219)))
 (let (($x359 (= c__ left-to-right)))
 (let (($x360 (and $x359 $x358)))
 (let (($x391 (ite $x360 $x374 (ite $x357 $x374 (ite $x355 $x370 (ite $x352 $x371 (ite $x350 $x371 $x374)))))))
 (let ((?x201 (top ?x219)))
 (let ((?x337 (stack ?x201 ?x203)))
 (let (($x366 (= ?x136 ?x337)))
 (let (($x361 (= c__ left-to-center)))
 (let (($x362 (and $x361 $x358)))
 (ite $x362 $x366 $x391)))))))))))))))))))))))))))))))
(assert
 (let ((?x206 (center s__)))
 (let ((?x338 (center s___)))
 (let (($x376 (= ?x338 ?x206)))
 (let ((?x203 (right s__)))
 (let ((?x345 (top ?x203)))
 (let ((?x347 (stack ?x345 ?x206)))
 (let (($x373 (= ?x338 ?x347)))
 (let (($x348 ((_ is stack ) ?x203)))
 (let (($x349 (= c__ right-to-center)))
 (let (($x350 (and $x349 $x348)))
 (let (($x351 (= c__ right-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x340 (rest ?x206)))
 (let (($x368 (= ?x338 ?x340)))
 (let (($x353 ((_ is stack ) ?x206)))
 (let (($x354 (= c__ center-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let (($x356 (= c__ center-to-left)))
 (let (($x357 (and $x356 $x353)))
 (let ((?x219 (left s__)))
 (let ((?x201 (top ?x219)))
 (let ((?x339 (stack ?x201 ?x206)))
 (let (($x367 (= ?x338 ?x339)))
 (let (($x358 ((_ is stack ) ?x219)))
 (let (($x359 (= c__ left-to-right)))
 (let (($x360 (and $x359 $x358)))
 (let (($x390 (ite $x360 $x367 (ite $x357 $x368 (ite $x355 $x368 (ite $x352 $x376 (ite $x350 $x373 $x376)))))))
 (let (($x361 (= c__ left-to-center)))
 (let (($x362 (and $x361 $x358)))
 (ite $x362 $x376 $x390)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x133 (left s___)))
 (let ((?x265 (left s____)))
 (let (($x516 (= ?x265 ?x133)))
 (let ((?x136 (right s___)))
 (let ((?x483 (top ?x136)))
 (let ((?x484 (stack ?x483 ?x133)))
 (let (($x510 (= ?x265 ?x484)))
 (let (($x486 ((_ is stack ) ?x136)))
 (let (($x489 (= c___ right-to-left)))
 (let (($x490 (and $x489 $x486)))
 (let ((?x338 (center s___)))
 (let (($x491 ((_ is stack ) ?x338)))
 (let (($x492 (= c___ center-to-right)))
 (let (($x493 (and $x492 $x491)))
 (let ((?x479 (top ?x338)))
 (let ((?x480 (stack ?x479 ?x133)))
 (let (($x507 (= ?x265 ?x480)))
 (let (($x494 (= c___ center-to-left)))
 (let (($x495 (and $x494 $x491)))
 (let ((?x309 (rest ?x133)))
 (let (($x503 (= ?x265 ?x309)))
 (let (($x496 ((_ is stack ) ?x133)))
 (let (($x497 (= c___ left-to-right)))
 (let (($x498 (and $x497 $x496)))
 (let (($x499 (= c___ left-to-center)))
 (let (($x500 (and $x499 $x496)))
 (ite $x500 $x503 (ite $x498 $x503 (ite $x495 $x507 (ite $x493 $x516 (ite $x490 $x510 $x516))))))))))))))))))))))))))))))))
(assert
 (let ((?x136 (right s___)))
 (let ((?x310 (right s____)))
 (let (($x512 (= ?x310 ?x136)))
 (let ((?x482 (rest ?x136)))
 (let (($x509 (= ?x310 ?x482)))
 (let (($x486 ((_ is stack ) ?x136)))
 (let (($x487 (= c___ right-to-center)))
 (let (($x488 (and $x487 $x486)))
 (let (($x489 (= c___ right-to-left)))
 (let (($x490 (and $x489 $x486)))
 (let ((?x338 (center s___)))
 (let ((?x479 (top ?x338)))
 (let ((?x481 (stack ?x479 ?x136)))
 (let (($x508 (= ?x310 ?x481)))
 (let (($x491 ((_ is stack ) ?x338)))
 (let (($x492 (= c___ center-to-right)))
 (let (($x493 (and $x492 $x491)))
 (let (($x494 (= c___ center-to-left)))
 (let (($x495 (and $x494 $x491)))
 (let ((?x133 (left s___)))
 (let (($x496 ((_ is stack ) ?x133)))
 (let (($x497 (= c___ left-to-right)))
 (let (($x498 (and $x497 $x496)))
 (let (($x529 (ite $x498 $x512 (ite $x495 $x512 (ite $x493 $x508 (ite $x490 $x509 (ite $x488 $x509 $x512)))))))
 (let ((?x336 (top ?x133)))
 (let ((?x475 (stack ?x336 ?x136)))
 (let (($x504 (= ?x310 ?x475)))
 (let (($x499 (= c___ left-to-center)))
 (let (($x500 (and $x499 $x496)))
 (ite $x500 $x504 $x529)))))))))))))))))))))))))))))))
(assert
 (let ((?x338 (center s___)))
 (let ((?x476 (center s____)))
 (let (($x514 (= ?x476 ?x338)))
 (let ((?x136 (right s___)))
 (let ((?x483 (top ?x136)))
 (let ((?x485 (stack ?x483 ?x338)))
 (let (($x511 (= ?x476 ?x485)))
 (let (($x486 ((_ is stack ) ?x136)))
 (let (($x487 (= c___ right-to-center)))
 (let (($x488 (and $x487 $x486)))
 (let (($x489 (= c___ right-to-left)))
 (let (($x490 (and $x489 $x486)))
 (let ((?x478 (rest ?x338)))
 (let (($x506 (= ?x476 ?x478)))
 (let (($x491 ((_ is stack ) ?x338)))
 (let (($x492 (= c___ center-to-right)))
 (let (($x493 (and $x492 $x491)))
 (let (($x494 (= c___ center-to-left)))
 (let (($x495 (and $x494 $x491)))
 (let ((?x133 (left s___)))
 (let ((?x336 (top ?x133)))
 (let ((?x477 (stack ?x336 ?x338)))
 (let (($x505 (= ?x476 ?x477)))
 (let (($x496 ((_ is stack ) ?x133)))
 (let (($x497 (= c___ left-to-right)))
 (let (($x498 (and $x497 $x496)))
 (let (($x528 (ite $x498 $x505 (ite $x495 $x506 (ite $x493 $x506 (ite $x490 $x514 (ite $x488 $x511 $x514)))))))
 (let (($x499 (= c___ left-to-center)))
 (let (($x500 (and $x499 $x496)))
 (ite $x500 $x514 $x528)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x265 (left s____)))
 (let ((?x394 (left s_____)))
 (let (($x654 (= ?x394 ?x265)))
 (let ((?x310 (right s____)))
 (let ((?x621 (top ?x310)))
 (let ((?x622 (stack ?x621 ?x265)))
 (let (($x648 (= ?x394 ?x622)))
 (let (($x624 ((_ is stack ) ?x310)))
 (let (($x627 (= c____ right-to-left)))
 (let (($x628 (and $x627 $x624)))
 (let ((?x476 (center s____)))
 (let (($x629 ((_ is stack ) ?x476)))
 (let (($x630 (= c____ center-to-right)))
 (let (($x631 (and $x630 $x629)))
 (let ((?x617 (top ?x476)))
 (let ((?x618 (stack ?x617 ?x265)))
 (let (($x645 (= ?x394 ?x618)))
 (let (($x632 (= c____ center-to-left)))
 (let (($x633 (and $x632 $x629)))
 (let ((?x427 (rest ?x265)))
 (let (($x641 (= ?x394 ?x427)))
 (let (($x634 ((_ is stack ) ?x265)))
 (let (($x635 (= c____ left-to-right)))
 (let (($x636 (and $x635 $x634)))
 (let (($x637 (= c____ left-to-center)))
 (let (($x638 (and $x637 $x634)))
 (ite $x638 $x641 (ite $x636 $x641 (ite $x633 $x645 (ite $x631 $x654 (ite $x628 $x648 $x654))))))))))))))))))))))))))))))))
(assert
 (let ((?x310 (right s____)))
 (let ((?x428 (right s_____)))
 (let (($x650 (= ?x428 ?x310)))
 (let ((?x620 (rest ?x310)))
 (let (($x647 (= ?x428 ?x620)))
 (let (($x624 ((_ is stack ) ?x310)))
 (let (($x625 (= c____ right-to-center)))
 (let (($x626 (and $x625 $x624)))
 (let (($x627 (= c____ right-to-left)))
 (let (($x628 (and $x627 $x624)))
 (let ((?x476 (center s____)))
 (let ((?x617 (top ?x476)))
 (let ((?x619 (stack ?x617 ?x310)))
 (let (($x646 (= ?x428 ?x619)))
 (let (($x629 ((_ is stack ) ?x476)))
 (let (($x630 (= c____ center-to-right)))
 (let (($x631 (and $x630 $x629)))
 (let (($x632 (= c____ center-to-left)))
 (let (($x633 (and $x632 $x629)))
 (let ((?x265 (left s____)))
 (let (($x634 ((_ is stack ) ?x265)))
 (let (($x635 (= c____ left-to-right)))
 (let (($x636 (and $x635 $x634)))
 (let (($x667 (ite $x636 $x650 (ite $x633 $x650 (ite $x631 $x646 (ite $x628 $x647 (ite $x626 $x647 $x650)))))))
 (let ((?x474 (top ?x265)))
 (let ((?x613 (stack ?x474 ?x310)))
 (let (($x642 (= ?x428 ?x613)))
 (let (($x637 (= c____ left-to-center)))
 (let (($x638 (and $x637 $x634)))
 (ite $x638 $x642 $x667)))))))))))))))))))))))))))))))
(assert
 (let ((?x476 (center s____)))
 (let ((?x614 (center s_____)))
 (let (($x652 (= ?x614 ?x476)))
 (let ((?x310 (right s____)))
 (let ((?x621 (top ?x310)))
 (let ((?x623 (stack ?x621 ?x476)))
 (let (($x649 (= ?x614 ?x623)))
 (let (($x624 ((_ is stack ) ?x310)))
 (let (($x625 (= c____ right-to-center)))
 (let (($x626 (and $x625 $x624)))
 (let (($x627 (= c____ right-to-left)))
 (let (($x628 (and $x627 $x624)))
 (let ((?x616 (rest ?x476)))
 (let (($x644 (= ?x614 ?x616)))
 (let (($x629 ((_ is stack ) ?x476)))
 (let (($x630 (= c____ center-to-right)))
 (let (($x631 (and $x630 $x629)))
 (let (($x632 (= c____ center-to-left)))
 (let (($x633 (and $x632 $x629)))
 (let ((?x265 (left s____)))
 (let ((?x474 (top ?x265)))
 (let ((?x615 (stack ?x474 ?x476)))
 (let (($x643 (= ?x614 ?x615)))
 (let (($x634 ((_ is stack ) ?x265)))
 (let (($x635 (= c____ left-to-right)))
 (let (($x636 (and $x635 $x634)))
 (let (($x666 (ite $x636 $x643 (ite $x633 $x644 (ite $x631 $x644 (ite $x628 $x652 (ite $x626 $x649 $x652)))))))
 (let (($x637 (= c____ left-to-center)))
 (let (($x638 (and $x637 $x634)))
 (ite $x638 $x652 $x666)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x394 (left s_____)))
 (let ((?x532 (left s______)))
 (let (($x792 (= ?x532 ?x394)))
 (let ((?x428 (right s_____)))
 (let ((?x759 (top ?x428)))
 (let ((?x760 (stack ?x759 ?x394)))
 (let (($x786 (= ?x532 ?x760)))
 (let (($x762 ((_ is stack ) ?x428)))
 (let (($x765 (= c_____ right-to-left)))
 (let (($x766 (and $x765 $x762)))
 (let ((?x614 (center s_____)))
 (let (($x767 ((_ is stack ) ?x614)))
 (let (($x768 (= c_____ center-to-right)))
 (let (($x769 (and $x768 $x767)))
 (let ((?x755 (top ?x614)))
 (let ((?x756 (stack ?x755 ?x394)))
 (let (($x783 (= ?x532 ?x756)))
 (let (($x770 (= c_____ center-to-left)))
 (let (($x771 (and $x770 $x767)))
 (let ((?x565 (rest ?x394)))
 (let (($x779 (= ?x532 ?x565)))
 (let (($x772 ((_ is stack ) ?x394)))
 (let (($x773 (= c_____ left-to-right)))
 (let (($x774 (and $x773 $x772)))
 (let (($x775 (= c_____ left-to-center)))
 (let (($x776 (and $x775 $x772)))
 (ite $x776 $x779 (ite $x774 $x779 (ite $x771 $x783 (ite $x769 $x792 (ite $x766 $x786 $x792))))))))))))))))))))))))))))))))
(assert
 (let ((?x428 (right s_____)))
 (let ((?x566 (right s______)))
 (let (($x788 (= ?x566 ?x428)))
 (let ((?x758 (rest ?x428)))
 (let (($x785 (= ?x566 ?x758)))
 (let (($x762 ((_ is stack ) ?x428)))
 (let (($x763 (= c_____ right-to-center)))
 (let (($x764 (and $x763 $x762)))
 (let (($x765 (= c_____ right-to-left)))
 (let (($x766 (and $x765 $x762)))
 (let ((?x614 (center s_____)))
 (let ((?x755 (top ?x614)))
 (let ((?x757 (stack ?x755 ?x428)))
 (let (($x784 (= ?x566 ?x757)))
 (let (($x767 ((_ is stack ) ?x614)))
 (let (($x768 (= c_____ center-to-right)))
 (let (($x769 (and $x768 $x767)))
 (let (($x770 (= c_____ center-to-left)))
 (let (($x771 (and $x770 $x767)))
 (let ((?x394 (left s_____)))
 (let (($x772 ((_ is stack ) ?x394)))
 (let (($x773 (= c_____ left-to-right)))
 (let (($x774 (and $x773 $x772)))
 (let (($x805 (ite $x774 $x788 (ite $x771 $x788 (ite $x769 $x784 (ite $x766 $x785 (ite $x764 $x785 $x788)))))))
 (let ((?x612 (top ?x394)))
 (let ((?x751 (stack ?x612 ?x428)))
 (let (($x780 (= ?x566 ?x751)))
 (let (($x775 (= c_____ left-to-center)))
 (let (($x776 (and $x775 $x772)))
 (ite $x776 $x780 $x805)))))))))))))))))))))))))))))))
(assert
 (let ((?x614 (center s_____)))
 (let ((?x752 (center s______)))
 (let (($x790 (= ?x752 ?x614)))
 (let ((?x428 (right s_____)))
 (let ((?x759 (top ?x428)))
 (let ((?x761 (stack ?x759 ?x614)))
 (let (($x787 (= ?x752 ?x761)))
 (let (($x762 ((_ is stack ) ?x428)))
 (let (($x763 (= c_____ right-to-center)))
 (let (($x764 (and $x763 $x762)))
 (let (($x765 (= c_____ right-to-left)))
 (let (($x766 (and $x765 $x762)))
 (let ((?x754 (rest ?x614)))
 (let (($x782 (= ?x752 ?x754)))
 (let (($x767 ((_ is stack ) ?x614)))
 (let (($x768 (= c_____ center-to-right)))
 (let (($x769 (and $x768 $x767)))
 (let (($x770 (= c_____ center-to-left)))
 (let (($x771 (and $x770 $x767)))
 (let ((?x394 (left s_____)))
 (let ((?x612 (top ?x394)))
 (let ((?x753 (stack ?x612 ?x614)))
 (let (($x781 (= ?x752 ?x753)))
 (let (($x772 ((_ is stack ) ?x394)))
 (let (($x773 (= c_____ left-to-right)))
 (let (($x774 (and $x773 $x772)))
 (let (($x804 (ite $x774 $x781 (ite $x771 $x782 (ite $x769 $x782 (ite $x766 $x790 (ite $x764 $x787 $x790)))))))
 (let (($x775 (= c_____ left-to-center)))
 (let (($x776 (and $x775 $x772)))
 (ite $x776 $x790 $x804)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x532 (left s______)))
 (let ((?x670 (left s_______)))
 (let (($x930 (= ?x670 ?x532)))
 (let ((?x566 (right s______)))
 (let ((?x897 (top ?x566)))
 (let ((?x898 (stack ?x897 ?x532)))
 (let (($x924 (= ?x670 ?x898)))
 (let (($x900 ((_ is stack ) ?x566)))
 (let (($x903 (= c______ right-to-left)))
 (let (($x904 (and $x903 $x900)))
 (let ((?x752 (center s______)))
 (let (($x905 ((_ is stack ) ?x752)))
 (let (($x906 (= c______ center-to-right)))
 (let (($x907 (and $x906 $x905)))
 (let ((?x893 (top ?x752)))
 (let ((?x894 (stack ?x893 ?x532)))
 (let (($x921 (= ?x670 ?x894)))
 (let (($x908 (= c______ center-to-left)))
 (let (($x909 (and $x908 $x905)))
 (let ((?x703 (rest ?x532)))
 (let (($x917 (= ?x670 ?x703)))
 (let (($x910 ((_ is stack ) ?x532)))
 (let (($x911 (= c______ left-to-right)))
 (let (($x912 (and $x911 $x910)))
 (let (($x913 (= c______ left-to-center)))
 (let (($x914 (and $x913 $x910)))
 (ite $x914 $x917 (ite $x912 $x917 (ite $x909 $x921 (ite $x907 $x930 (ite $x904 $x924 $x930))))))))))))))))))))))))))))))))
(assert
 (let ((?x566 (right s______)))
 (let ((?x704 (right s_______)))
 (let (($x926 (= ?x704 ?x566)))
 (let ((?x896 (rest ?x566)))
 (let (($x923 (= ?x704 ?x896)))
 (let (($x900 ((_ is stack ) ?x566)))
 (let (($x901 (= c______ right-to-center)))
 (let (($x902 (and $x901 $x900)))
 (let (($x903 (= c______ right-to-left)))
 (let (($x904 (and $x903 $x900)))
 (let ((?x752 (center s______)))
 (let ((?x893 (top ?x752)))
 (let ((?x895 (stack ?x893 ?x566)))
 (let (($x922 (= ?x704 ?x895)))
 (let (($x905 ((_ is stack ) ?x752)))
 (let (($x906 (= c______ center-to-right)))
 (let (($x907 (and $x906 $x905)))
 (let (($x908 (= c______ center-to-left)))
 (let (($x909 (and $x908 $x905)))
 (let ((?x532 (left s______)))
 (let (($x910 ((_ is stack ) ?x532)))
 (let (($x911 (= c______ left-to-right)))
 (let (($x912 (and $x911 $x910)))
 (let (($x943 (ite $x912 $x926 (ite $x909 $x926 (ite $x907 $x922 (ite $x904 $x923 (ite $x902 $x923 $x926)))))))
 (let ((?x750 (top ?x532)))
 (let ((?x889 (stack ?x750 ?x566)))
 (let (($x918 (= ?x704 ?x889)))
 (let (($x913 (= c______ left-to-center)))
 (let (($x914 (and $x913 $x910)))
 (ite $x914 $x918 $x943)))))))))))))))))))))))))))))))
(assert
 (let ((?x752 (center s______)))
 (let ((?x890 (center s_______)))
 (let (($x928 (= ?x890 ?x752)))
 (let ((?x566 (right s______)))
 (let ((?x897 (top ?x566)))
 (let ((?x899 (stack ?x897 ?x752)))
 (let (($x925 (= ?x890 ?x899)))
 (let (($x900 ((_ is stack ) ?x566)))
 (let (($x901 (= c______ right-to-center)))
 (let (($x902 (and $x901 $x900)))
 (let (($x903 (= c______ right-to-left)))
 (let (($x904 (and $x903 $x900)))
 (let ((?x892 (rest ?x752)))
 (let (($x920 (= ?x890 ?x892)))
 (let (($x905 ((_ is stack ) ?x752)))
 (let (($x906 (= c______ center-to-right)))
 (let (($x907 (and $x906 $x905)))
 (let (($x908 (= c______ center-to-left)))
 (let (($x909 (and $x908 $x905)))
 (let ((?x532 (left s______)))
 (let ((?x750 (top ?x532)))
 (let ((?x891 (stack ?x750 ?x752)))
 (let (($x919 (= ?x890 ?x891)))
 (let (($x910 ((_ is stack ) ?x532)))
 (let (($x911 (= c______ left-to-right)))
 (let (($x912 (and $x911 $x910)))
 (let (($x942 (ite $x912 $x919 (ite $x909 $x920 (ite $x907 $x920 (ite $x904 $x928 (ite $x902 $x925 $x928)))))))
 (let (($x913 (= c______ left-to-center)))
 (let (($x914 (and $x913 $x910)))
 (ite $x914 $x928 $x942)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x670 (left s_______)))
 (let ((?x808 (left s________)))
 (let (($x1068 (= ?x808 ?x670)))
 (let ((?x704 (right s_______)))
 (let ((?x1035 (top ?x704)))
 (let ((?x1036 (stack ?x1035 ?x670)))
 (let (($x1062 (= ?x808 ?x1036)))
 (let (($x1038 ((_ is stack ) ?x704)))
 (let (($x1041 (= c_______ right-to-left)))
 (let (($x1042 (and $x1041 $x1038)))
 (let ((?x890 (center s_______)))
 (let (($x1043 ((_ is stack ) ?x890)))
 (let (($x1044 (= c_______ center-to-right)))
 (let (($x1045 (and $x1044 $x1043)))
 (let ((?x1031 (top ?x890)))
 (let ((?x1032 (stack ?x1031 ?x670)))
 (let (($x1059 (= ?x808 ?x1032)))
 (let (($x1046 (= c_______ center-to-left)))
 (let (($x1047 (and $x1046 $x1043)))
 (let ((?x841 (rest ?x670)))
 (let (($x1055 (= ?x808 ?x841)))
 (let (($x1048 ((_ is stack ) ?x670)))
 (let (($x1049 (= c_______ left-to-right)))
 (let (($x1050 (and $x1049 $x1048)))
 (let (($x1051 (= c_______ left-to-center)))
 (let (($x1052 (and $x1051 $x1048)))
 (ite $x1052 $x1055 (ite $x1050 $x1055 (ite $x1047 $x1059 (ite $x1045 $x1068 (ite $x1042 $x1062 $x1068))))))))))))))))))))))))))))))))
(assert
 (let ((?x704 (right s_______)))
 (let ((?x842 (right s________)))
 (let (($x1064 (= ?x842 ?x704)))
 (let ((?x1034 (rest ?x704)))
 (let (($x1061 (= ?x842 ?x1034)))
 (let (($x1038 ((_ is stack ) ?x704)))
 (let (($x1039 (= c_______ right-to-center)))
 (let (($x1040 (and $x1039 $x1038)))
 (let (($x1041 (= c_______ right-to-left)))
 (let (($x1042 (and $x1041 $x1038)))
 (let ((?x890 (center s_______)))
 (let ((?x1031 (top ?x890)))
 (let ((?x1033 (stack ?x1031 ?x704)))
 (let (($x1060 (= ?x842 ?x1033)))
 (let (($x1043 ((_ is stack ) ?x890)))
 (let (($x1044 (= c_______ center-to-right)))
 (let (($x1045 (and $x1044 $x1043)))
 (let (($x1046 (= c_______ center-to-left)))
 (let (($x1047 (and $x1046 $x1043)))
 (let ((?x670 (left s_______)))
 (let (($x1048 ((_ is stack ) ?x670)))
 (let (($x1049 (= c_______ left-to-right)))
 (let (($x1050 (and $x1049 $x1048)))
 (let (($x1081 (ite $x1050 $x1064 (ite $x1047 $x1064 (ite $x1045 $x1060 (ite $x1042 $x1061 (ite $x1040 $x1061 $x1064)))))))
 (let ((?x888 (top ?x670)))
 (let ((?x1027 (stack ?x888 ?x704)))
 (let (($x1056 (= ?x842 ?x1027)))
 (let (($x1051 (= c_______ left-to-center)))
 (let (($x1052 (and $x1051 $x1048)))
 (ite $x1052 $x1056 $x1081)))))))))))))))))))))))))))))))
(assert
 (let ((?x890 (center s_______)))
 (let ((?x1028 (center s________)))
 (let (($x1066 (= ?x1028 ?x890)))
 (let ((?x704 (right s_______)))
 (let ((?x1035 (top ?x704)))
 (let ((?x1037 (stack ?x1035 ?x890)))
 (let (($x1063 (= ?x1028 ?x1037)))
 (let (($x1038 ((_ is stack ) ?x704)))
 (let (($x1039 (= c_______ right-to-center)))
 (let (($x1040 (and $x1039 $x1038)))
 (let (($x1041 (= c_______ right-to-left)))
 (let (($x1042 (and $x1041 $x1038)))
 (let ((?x1030 (rest ?x890)))
 (let (($x1058 (= ?x1028 ?x1030)))
 (let (($x1043 ((_ is stack ) ?x890)))
 (let (($x1044 (= c_______ center-to-right)))
 (let (($x1045 (and $x1044 $x1043)))
 (let (($x1046 (= c_______ center-to-left)))
 (let (($x1047 (and $x1046 $x1043)))
 (let ((?x670 (left s_______)))
 (let ((?x888 (top ?x670)))
 (let ((?x1029 (stack ?x888 ?x890)))
 (let (($x1057 (= ?x1028 ?x1029)))
 (let (($x1048 ((_ is stack ) ?x670)))
 (let (($x1049 (= c_______ left-to-right)))
 (let (($x1050 (and $x1049 $x1048)))
 (let (($x1080 (ite $x1050 $x1057 (ite $x1047 $x1058 (ite $x1045 $x1058 (ite $x1042 $x1066 (ite $x1040 $x1063 $x1066)))))))
 (let (($x1051 (= c_______ left-to-center)))
 (let (($x1052 (and $x1051 $x1048)))
 (ite $x1052 $x1066 $x1080)))))))))))))))))))))))))))))))
(assert
 (= c_________ c!8))
(assert
 (let ((?x808 (left s________)))
 (let ((?x946 (left s_________)))
 (let (($x1206 (= ?x946 ?x808)))
 (let ((?x842 (right s________)))
 (let ((?x1173 (top ?x842)))
 (let ((?x1174 (stack ?x1173 ?x808)))
 (let (($x1200 (= ?x946 ?x1174)))
 (let (($x1176 ((_ is stack ) ?x842)))
 (let (($x1179 (= c________ right-to-left)))
 (let (($x1180 (and $x1179 $x1176)))
 (let ((?x1028 (center s________)))
 (let (($x1181 ((_ is stack ) ?x1028)))
 (let (($x1182 (= c________ center-to-right)))
 (let (($x1183 (and $x1182 $x1181)))
 (let ((?x1169 (top ?x1028)))
 (let ((?x1170 (stack ?x1169 ?x808)))
 (let (($x1197 (= ?x946 ?x1170)))
 (let (($x1184 (= c________ center-to-left)))
 (let (($x1185 (and $x1184 $x1181)))
 (let ((?x979 (rest ?x808)))
 (let (($x1193 (= ?x946 ?x979)))
 (let (($x1186 ((_ is stack ) ?x808)))
 (let (($x1187 (= c________ left-to-right)))
 (let (($x1188 (and $x1187 $x1186)))
 (let (($x1189 (= c________ left-to-center)))
 (let (($x1190 (and $x1189 $x1186)))
 (ite $x1190 $x1193 (ite $x1188 $x1193 (ite $x1185 $x1197 (ite $x1183 $x1206 (ite $x1180 $x1200 $x1206))))))))))))))))))))))))))))))))
(assert
 (let ((?x842 (right s________)))
 (let ((?x980 (right s_________)))
 (let (($x1202 (= ?x980 ?x842)))
 (let ((?x1172 (rest ?x842)))
 (let (($x1199 (= ?x980 ?x1172)))
 (let (($x1176 ((_ is stack ) ?x842)))
 (let (($x1177 (= c________ right-to-center)))
 (let (($x1178 (and $x1177 $x1176)))
 (let (($x1179 (= c________ right-to-left)))
 (let (($x1180 (and $x1179 $x1176)))
 (let ((?x1028 (center s________)))
 (let ((?x1169 (top ?x1028)))
 (let ((?x1171 (stack ?x1169 ?x842)))
 (let (($x1198 (= ?x980 ?x1171)))
 (let (($x1181 ((_ is stack ) ?x1028)))
 (let (($x1182 (= c________ center-to-right)))
 (let (($x1183 (and $x1182 $x1181)))
 (let (($x1184 (= c________ center-to-left)))
 (let (($x1185 (and $x1184 $x1181)))
 (let ((?x808 (left s________)))
 (let (($x1186 ((_ is stack ) ?x808)))
 (let (($x1187 (= c________ left-to-right)))
 (let (($x1188 (and $x1187 $x1186)))
 (let (($x1219 (ite $x1188 $x1202 (ite $x1185 $x1202 (ite $x1183 $x1198 (ite $x1180 $x1199 (ite $x1178 $x1199 $x1202)))))))
 (let ((?x1026 (top ?x808)))
 (let ((?x1165 (stack ?x1026 ?x842)))
 (let (($x1194 (= ?x980 ?x1165)))
 (let (($x1189 (= c________ left-to-center)))
 (let (($x1190 (and $x1189 $x1186)))
 (ite $x1190 $x1194 $x1219)))))))))))))))))))))))))))))))
(assert
 (let ((?x1028 (center s________)))
 (let ((?x1166 (center s_________)))
 (let (($x1204 (= ?x1166 ?x1028)))
 (let ((?x842 (right s________)))
 (let ((?x1173 (top ?x842)))
 (let ((?x1175 (stack ?x1173 ?x1028)))
 (let (($x1201 (= ?x1166 ?x1175)))
 (let (($x1176 ((_ is stack ) ?x842)))
 (let (($x1177 (= c________ right-to-center)))
 (let (($x1178 (and $x1177 $x1176)))
 (let (($x1179 (= c________ right-to-left)))
 (let (($x1180 (and $x1179 $x1176)))
 (let ((?x1168 (rest ?x1028)))
 (let (($x1196 (= ?x1166 ?x1168)))
 (let (($x1181 ((_ is stack ) ?x1028)))
 (let (($x1182 (= c________ center-to-right)))
 (let (($x1183 (and $x1182 $x1181)))
 (let (($x1184 (= c________ center-to-left)))
 (let (($x1185 (and $x1184 $x1181)))
 (let ((?x808 (left s________)))
 (let ((?x1026 (top ?x808)))
 (let ((?x1167 (stack ?x1026 ?x1028)))
 (let (($x1195 (= ?x1166 ?x1167)))
 (let (($x1186 ((_ is stack ) ?x808)))
 (let (($x1187 (= c________ left-to-right)))
 (let (($x1188 (and $x1187 $x1186)))
 (let (($x1218 (ite $x1188 $x1195 (ite $x1185 $x1196 (ite $x1183 $x1196 (ite $x1180 $x1204 (ite $x1178 $x1201 $x1204)))))))
 (let (($x1189 (= c________ left-to-center)))
 (let (($x1190 (and $x1189 $x1186)))
 (ite $x1190 $x1204 $x1218)))))))))))))))))))))))))))))))
(assert
 (= c__________ c!9))
(assert
 (let ((?x946 (left s_________)))
 (let ((?x1084 (left s__________)))
 (let (($x1344 (= ?x1084 ?x946)))
 (let ((?x980 (right s_________)))
 (let ((?x1311 (top ?x980)))
 (let ((?x1312 (stack ?x1311 ?x946)))
 (let (($x1338 (= ?x1084 ?x1312)))
 (let (($x1314 ((_ is stack ) ?x980)))
 (let (($x1317 (= c_________ right-to-left)))
 (let (($x1318 (and $x1317 $x1314)))
 (let ((?x1166 (center s_________)))
 (let (($x1319 ((_ is stack ) ?x1166)))
 (let (($x1320 (= c_________ center-to-right)))
 (let (($x1321 (and $x1320 $x1319)))
 (let ((?x1307 (top ?x1166)))
 (let ((?x1308 (stack ?x1307 ?x946)))
 (let (($x1335 (= ?x1084 ?x1308)))
 (let (($x1322 (= c_________ center-to-left)))
 (let (($x1323 (and $x1322 $x1319)))
 (let ((?x1117 (rest ?x946)))
 (let (($x1331 (= ?x1084 ?x1117)))
 (let (($x1324 ((_ is stack ) ?x946)))
 (let (($x1325 (= c_________ left-to-right)))
 (let (($x1326 (and $x1325 $x1324)))
 (let (($x1327 (= c_________ left-to-center)))
 (let (($x1328 (and $x1327 $x1324)))
 (ite $x1328 $x1331 (ite $x1326 $x1331 (ite $x1323 $x1335 (ite $x1321 $x1344 (ite $x1318 $x1338 $x1344))))))))))))))))))))))))))))))))
(assert
 (let ((?x980 (right s_________)))
 (let ((?x1118 (right s__________)))
 (let (($x1340 (= ?x1118 ?x980)))
 (let ((?x1310 (rest ?x980)))
 (let (($x1337 (= ?x1118 ?x1310)))
 (let (($x1314 ((_ is stack ) ?x980)))
 (let (($x1315 (= c_________ right-to-center)))
 (let (($x1316 (and $x1315 $x1314)))
 (let (($x1317 (= c_________ right-to-left)))
 (let (($x1318 (and $x1317 $x1314)))
 (let ((?x1166 (center s_________)))
 (let ((?x1307 (top ?x1166)))
 (let ((?x1309 (stack ?x1307 ?x980)))
 (let (($x1336 (= ?x1118 ?x1309)))
 (let (($x1319 ((_ is stack ) ?x1166)))
 (let (($x1320 (= c_________ center-to-right)))
 (let (($x1321 (and $x1320 $x1319)))
 (let (($x1322 (= c_________ center-to-left)))
 (let (($x1323 (and $x1322 $x1319)))
 (let ((?x946 (left s_________)))
 (let (($x1324 ((_ is stack ) ?x946)))
 (let (($x1325 (= c_________ left-to-right)))
 (let (($x1326 (and $x1325 $x1324)))
 (let (($x1357 (ite $x1326 $x1340 (ite $x1323 $x1340 (ite $x1321 $x1336 (ite $x1318 $x1337 (ite $x1316 $x1337 $x1340)))))))
 (let ((?x1164 (top ?x946)))
 (let ((?x1303 (stack ?x1164 ?x980)))
 (let (($x1332 (= ?x1118 ?x1303)))
 (let (($x1327 (= c_________ left-to-center)))
 (let (($x1328 (and $x1327 $x1324)))
 (ite $x1328 $x1332 $x1357)))))))))))))))))))))))))))))))
(assert
 (let ((?x1166 (center s_________)))
 (let ((?x1304 (center s__________)))
 (let (($x1342 (= ?x1304 ?x1166)))
 (let ((?x980 (right s_________)))
 (let ((?x1311 (top ?x980)))
 (let ((?x1313 (stack ?x1311 ?x1166)))
 (let (($x1339 (= ?x1304 ?x1313)))
 (let (($x1314 ((_ is stack ) ?x980)))
 (let (($x1315 (= c_________ right-to-center)))
 (let (($x1316 (and $x1315 $x1314)))
 (let (($x1317 (= c_________ right-to-left)))
 (let (($x1318 (and $x1317 $x1314)))
 (let ((?x1306 (rest ?x1166)))
 (let (($x1334 (= ?x1304 ?x1306)))
 (let (($x1319 ((_ is stack ) ?x1166)))
 (let (($x1320 (= c_________ center-to-right)))
 (let (($x1321 (and $x1320 $x1319)))
 (let (($x1322 (= c_________ center-to-left)))
 (let (($x1323 (and $x1322 $x1319)))
 (let ((?x946 (left s_________)))
 (let ((?x1164 (top ?x946)))
 (let ((?x1305 (stack ?x1164 ?x1166)))
 (let (($x1333 (= ?x1304 ?x1305)))
 (let (($x1324 ((_ is stack ) ?x946)))
 (let (($x1325 (= c_________ left-to-right)))
 (let (($x1326 (and $x1325 $x1324)))
 (let (($x1356 (ite $x1326 $x1333 (ite $x1323 $x1334 (ite $x1321 $x1334 (ite $x1318 $x1342 (ite $x1316 $x1339 $x1342)))))))
 (let (($x1327 (= c_________ left-to-center)))
 (let (($x1328 (and $x1327 $x1324)))
 (ite $x1328 $x1342 $x1356)))))))))))))))))))))))))))))))
(assert
 (= c___________ c!10))
(assert
 (let ((?x1084 (left s__________)))
 (let ((?x1222 (left s___________)))
 (let (($x1482 (= ?x1222 ?x1084)))
 (let ((?x1118 (right s__________)))
 (let ((?x1449 (top ?x1118)))
 (let ((?x1450 (stack ?x1449 ?x1084)))
 (let (($x1476 (= ?x1222 ?x1450)))
 (let (($x1452 ((_ is stack ) ?x1118)))
 (let (($x1455 (= c__________ right-to-left)))
 (let (($x1456 (and $x1455 $x1452)))
 (let ((?x1304 (center s__________)))
 (let (($x1457 ((_ is stack ) ?x1304)))
 (let (($x1458 (= c__________ center-to-right)))
 (let (($x1459 (and $x1458 $x1457)))
 (let ((?x1445 (top ?x1304)))
 (let ((?x1446 (stack ?x1445 ?x1084)))
 (let (($x1473 (= ?x1222 ?x1446)))
 (let (($x1460 (= c__________ center-to-left)))
 (let (($x1461 (and $x1460 $x1457)))
 (let ((?x1255 (rest ?x1084)))
 (let (($x1469 (= ?x1222 ?x1255)))
 (let (($x1462 ((_ is stack ) ?x1084)))
 (let (($x1463 (= c__________ left-to-right)))
 (let (($x1464 (and $x1463 $x1462)))
 (let (($x1465 (= c__________ left-to-center)))
 (let (($x1466 (and $x1465 $x1462)))
 (ite $x1466 $x1469 (ite $x1464 $x1469 (ite $x1461 $x1473 (ite $x1459 $x1482 (ite $x1456 $x1476 $x1482))))))))))))))))))))))))))))))))
(assert
 (let ((?x1118 (right s__________)))
 (let ((?x1256 (right s___________)))
 (let (($x1478 (= ?x1256 ?x1118)))
 (let ((?x1448 (rest ?x1118)))
 (let (($x1475 (= ?x1256 ?x1448)))
 (let (($x1452 ((_ is stack ) ?x1118)))
 (let (($x1453 (= c__________ right-to-center)))
 (let (($x1454 (and $x1453 $x1452)))
 (let (($x1455 (= c__________ right-to-left)))
 (let (($x1456 (and $x1455 $x1452)))
 (let ((?x1304 (center s__________)))
 (let ((?x1445 (top ?x1304)))
 (let ((?x1447 (stack ?x1445 ?x1118)))
 (let (($x1474 (= ?x1256 ?x1447)))
 (let (($x1457 ((_ is stack ) ?x1304)))
 (let (($x1458 (= c__________ center-to-right)))
 (let (($x1459 (and $x1458 $x1457)))
 (let (($x1460 (= c__________ center-to-left)))
 (let (($x1461 (and $x1460 $x1457)))
 (let ((?x1084 (left s__________)))
 (let (($x1462 ((_ is stack ) ?x1084)))
 (let (($x1463 (= c__________ left-to-right)))
 (let (($x1464 (and $x1463 $x1462)))
 (let (($x1495 (ite $x1464 $x1478 (ite $x1461 $x1478 (ite $x1459 $x1474 (ite $x1456 $x1475 (ite $x1454 $x1475 $x1478)))))))
 (let ((?x1302 (top ?x1084)))
 (let ((?x1441 (stack ?x1302 ?x1118)))
 (let (($x1470 (= ?x1256 ?x1441)))
 (let (($x1465 (= c__________ left-to-center)))
 (let (($x1466 (and $x1465 $x1462)))
 (ite $x1466 $x1470 $x1495)))))))))))))))))))))))))))))))
(assert
 (let ((?x1304 (center s__________)))
 (let ((?x1442 (center s___________)))
 (let (($x1480 (= ?x1442 ?x1304)))
 (let ((?x1118 (right s__________)))
 (let ((?x1449 (top ?x1118)))
 (let ((?x1451 (stack ?x1449 ?x1304)))
 (let (($x1477 (= ?x1442 ?x1451)))
 (let (($x1452 ((_ is stack ) ?x1118)))
 (let (($x1453 (= c__________ right-to-center)))
 (let (($x1454 (and $x1453 $x1452)))
 (let (($x1455 (= c__________ right-to-left)))
 (let (($x1456 (and $x1455 $x1452)))
 (let ((?x1444 (rest ?x1304)))
 (let (($x1472 (= ?x1442 ?x1444)))
 (let (($x1457 ((_ is stack ) ?x1304)))
 (let (($x1458 (= c__________ center-to-right)))
 (let (($x1459 (and $x1458 $x1457)))
 (let (($x1460 (= c__________ center-to-left)))
 (let (($x1461 (and $x1460 $x1457)))
 (let ((?x1084 (left s__________)))
 (let ((?x1302 (top ?x1084)))
 (let ((?x1443 (stack ?x1302 ?x1304)))
 (let (($x1471 (= ?x1442 ?x1443)))
 (let (($x1462 ((_ is stack ) ?x1084)))
 (let (($x1463 (= c__________ left-to-right)))
 (let (($x1464 (and $x1463 $x1462)))
 (let (($x1494 (ite $x1464 $x1471 (ite $x1461 $x1472 (ite $x1459 $x1472 (ite $x1456 $x1480 (ite $x1454 $x1477 $x1480)))))))
 (let (($x1465 (= c__________ left-to-center)))
 (let (($x1466 (and $x1465 $x1462)))
 (ite $x1466 $x1480 $x1494)))))))))))))))))))))))))))))))
(assert
 (let ((?x27 (stack E empty)))
 (let ((?x1256 (right s___________)))
 (let (($x1498 (= ?x1256 ?x27)))
 (let ((?x1442 (center s___________)))
 (let (($x1529 (= ?x1442 empty)))
 (let ((?x36 (stack A (stack I (stack F (stack J (stack G (stack B empty))))))))
 (let ((?x39 (stack D (stack C (stack H ?x36)))))
 (let ((?x1222 (left s___________)))
 (let (($x1530 (= ?x1222 ?x39)))
 (let (($x1532 (not (and $x1530 $x1529 $x1498))))
 (not $x1532))))))))))))
(check-sat)
(exit)
