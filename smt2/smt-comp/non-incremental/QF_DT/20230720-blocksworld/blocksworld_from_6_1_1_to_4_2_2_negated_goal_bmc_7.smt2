(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H 0)) (((A) (B) (C) (D) (E) (F) (G) (H))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x21 (stack G empty)))
 (let ((?x20 (stack E ?x21)))
 (let ((?x22 (stack D ?x20)))
 (let ((?x23 (stack F ?x22)))
 (let ((?x24 (stack B ?x23)))
 (let ((?x25 (stack A ?x24)))
 (let ((?x80 (left s_tmp_)))
 (= ?x80 ?x25)))))))))
(assert
 (let ((?x26 (stack C empty)))
 (let ((?x83 (center s_tmp__)))
 (= ?x83 ?x26))))
(assert
 (let ((?x27 (stack H empty)))
 (let ((?x86 (right s_tmp___)))
 (= ?x86 ?x27))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x113 (left s_tmp__)))
 (= (left s_tmp___) ?x113)))
(assert
 (let ((?x83 (center s_tmp__)))
 (= (center s_tmp___) ?x83)))
(assert
 (let ((?x117 (center s_tmp_)))
 (= ?x117 (center s_tmp))))
(assert
 (let ((?x120 (right s_tmp_)))
 (= ?x120 (right s_tmp))))
(assert
 (let ((?x80 (left s_tmp_)))
 (let ((?x113 (left s_tmp__)))
 (= ?x113 ?x80))))
(assert
 (let ((?x120 (right s_tmp_)))
 (let ((?x124 (right s_tmp__)))
 (= ?x124 ?x120))))
(assert
 (= c__ c!1))
(assert
 (let ((?x57 (left s_)))
 (let ((?x192 (left s__)))
 (let (($x237 (= ?x192 ?x57)))
 (let ((?x60 (right s_)))
 (let (($x198 ((_ is stack ) ?x60)))
 (let (($x210 (= c_ right-to-left)))
 (let (($x211 (and $x210 $x198)))
 (let ((?x62 (center s_)))
 (let (($x212 ((_ is stack ) ?x62)))
 (let (($x213 (= c_ center-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x215 (= c_ center-to-left)))
 (let (($x216 (and $x215 $x212)))
 (let (($x246 (ite $x216 (= ?x192 (stack (top ?x62) ?x57)) (ite $x214 $x237 (ite $x211 (= ?x192 (stack (top ?x60) ?x57)) $x237)))))
 (let (($x224 (= ?x192 (rest ?x57))))
 (let (($x217 ((_ is stack ) ?x57)))
 (let (($x218 (= c_ left-to-right)))
 (let (($x219 (and $x218 $x217)))
 (let (($x220 (= c_ left-to-center)))
 (let (($x221 (and $x220 $x217)))
 (ite $x221 $x224 (ite $x219 $x224 $x246)))))))))))))))))))))))
(assert
 (let ((?x60 (right s_)))
 (let ((?x200 (right s__)))
 (let (($x233 (= ?x200 ?x60)))
 (let (($x230 (= ?x200 (rest ?x60))))
 (let (($x198 ((_ is stack ) ?x60)))
 (let (($x208 (= c_ right-to-center)))
 (let (($x209 (and $x208 $x198)))
 (let (($x210 (= c_ right-to-left)))
 (let (($x211 (and $x210 $x198)))
 (let ((?x62 (center s_)))
 (let (($x212 ((_ is stack ) ?x62)))
 (let (($x213 (= c_ center-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x243 (ite $x214 (= ?x200 (stack (top ?x62) ?x60)) (ite $x211 $x230 (ite $x209 $x230 $x233)))))
 (let (($x215 (= c_ center-to-left)))
 (let (($x216 (and $x215 $x212)))
 (let ((?x57 (left s_)))
 (let (($x217 ((_ is stack ) ?x57)))
 (let (($x218 (= c_ left-to-right)))
 (let (($x219 (and $x218 $x217)))
 (let (($x220 (= c_ left-to-center)))
 (let (($x221 (and $x220 $x217)))
 (ite $x221 (= ?x200 (stack (top ?x57) ?x60)) (ite $x219 $x233 (ite $x216 $x233 $x243))))))))))))))))))))))))))
(assert
 (let ((?x62 (center s_)))
 (let ((?x206 (center s__)))
 (let (($x235 (= ?x206 ?x62)))
 (let ((?x60 (right s_)))
 (let (($x198 ((_ is stack ) ?x60)))
 (let (($x208 (= c_ right-to-center)))
 (let (($x209 (and $x208 $x198)))
 (let (($x210 (= c_ right-to-left)))
 (let (($x211 (and $x210 $x198)))
 (let (($x227 (= ?x206 (rest ?x62))))
 (let (($x212 ((_ is stack ) ?x62)))
 (let (($x213 (= c_ center-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x242 (ite $x214 $x227 (ite $x211 $x235 (ite $x209 (= ?x206 (stack (top ?x60) ?x62)) $x235)))))
 (let (($x215 (= c_ center-to-left)))
 (let (($x216 (and $x215 $x212)))
 (let ((?x57 (left s_)))
 (let (($x217 ((_ is stack ) ?x57)))
 (let (($x218 (= c_ left-to-right)))
 (let (($x219 (and $x218 $x217)))
 (let (($x220 (= c_ left-to-center)))
 (let (($x221 (and $x220 $x217)))
 (ite $x221 $x235 (ite $x219 (= ?x206 (stack (top ?x57) ?x62)) (ite $x216 $x227 $x242))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x192 (left s__)))
 (let ((?x127 (left s___)))
 (let (($x366 (= ?x127 ?x192)))
 (let ((?x200 (right s__)))
 (let ((?x333 (top ?x200)))
 (let ((?x334 (stack ?x333 ?x192)))
 (let (($x360 (= ?x127 ?x334)))
 (let (($x336 ((_ is stack ) ?x200)))
 (let (($x339 (= c__ right-to-left)))
 (let (($x340 (and $x339 $x336)))
 (let ((?x206 (center s__)))
 (let (($x341 ((_ is stack ) ?x206)))
 (let (($x342 (= c__ center-to-right)))
 (let (($x343 (and $x342 $x341)))
 (let ((?x329 (top ?x206)))
 (let ((?x330 (stack ?x329 ?x192)))
 (let (($x357 (= ?x127 ?x330)))
 (let (($x344 (= c__ center-to-left)))
 (let (($x345 (and $x344 $x341)))
 (let ((?x129 (rest ?x192)))
 (let (($x353 (= ?x127 ?x129)))
 (let (($x346 ((_ is stack ) ?x192)))
 (let (($x347 (= c__ left-to-right)))
 (let (($x348 (and $x347 $x346)))
 (let (($x349 (= c__ left-to-center)))
 (let (($x350 (and $x349 $x346)))
 (ite $x350 $x353 (ite $x348 $x353 (ite $x345 $x357 (ite $x343 $x366 (ite $x340 $x360 $x366))))))))))))))))))))))))))))))))
(assert
 (let ((?x200 (right s__)))
 (let ((?x130 (right s___)))
 (let (($x362 (= ?x130 ?x200)))
 (let ((?x332 (rest ?x200)))
 (let (($x359 (= ?x130 ?x332)))
 (let (($x336 ((_ is stack ) ?x200)))
 (let (($x337 (= c__ right-to-center)))
 (let (($x338 (and $x337 $x336)))
 (let (($x339 (= c__ right-to-left)))
 (let (($x340 (and $x339 $x336)))
 (let ((?x206 (center s__)))
 (let ((?x329 (top ?x206)))
 (let ((?x331 (stack ?x329 ?x200)))
 (let (($x358 (= ?x130 ?x331)))
 (let (($x341 ((_ is stack ) ?x206)))
 (let (($x342 (= c__ center-to-right)))
 (let (($x343 (and $x342 $x341)))
 (let (($x344 (= c__ center-to-left)))
 (let (($x345 (and $x344 $x341)))
 (let ((?x192 (left s__)))
 (let (($x346 ((_ is stack ) ?x192)))
 (let (($x347 (= c__ left-to-right)))
 (let (($x348 (and $x347 $x346)))
 (let (($x379 (ite $x348 $x362 (ite $x345 $x362 (ite $x343 $x358 (ite $x340 $x359 (ite $x338 $x359 $x362)))))))
 (let ((?x189 (top ?x192)))
 (let ((?x325 (stack ?x189 ?x200)))
 (let (($x354 (= ?x130 ?x325)))
 (let (($x349 (= c__ left-to-center)))
 (let (($x350 (and $x349 $x346)))
 (ite $x350 $x354 $x379)))))))))))))))))))))))))))))))
(assert
 (let ((?x206 (center s__)))
 (let ((?x326 (center s___)))
 (let (($x364 (= ?x326 ?x206)))
 (let ((?x200 (right s__)))
 (let ((?x333 (top ?x200)))
 (let ((?x335 (stack ?x333 ?x206)))
 (let (($x361 (= ?x326 ?x335)))
 (let (($x336 ((_ is stack ) ?x200)))
 (let (($x337 (= c__ right-to-center)))
 (let (($x338 (and $x337 $x336)))
 (let (($x339 (= c__ right-to-left)))
 (let (($x340 (and $x339 $x336)))
 (let ((?x328 (rest ?x206)))
 (let (($x356 (= ?x326 ?x328)))
 (let (($x341 ((_ is stack ) ?x206)))
 (let (($x342 (= c__ center-to-right)))
 (let (($x343 (and $x342 $x341)))
 (let (($x344 (= c__ center-to-left)))
 (let (($x345 (and $x344 $x341)))
 (let ((?x192 (left s__)))
 (let ((?x189 (top ?x192)))
 (let ((?x327 (stack ?x189 ?x206)))
 (let (($x355 (= ?x326 ?x327)))
 (let (($x346 ((_ is stack ) ?x192)))
 (let (($x347 (= c__ left-to-right)))
 (let (($x348 (and $x347 $x346)))
 (let (($x378 (ite $x348 $x355 (ite $x345 $x356 (ite $x343 $x356 (ite $x340 $x364 (ite $x338 $x361 $x364)))))))
 (let (($x349 (= c__ left-to-center)))
 (let (($x350 (and $x349 $x346)))
 (ite $x350 $x364 $x378)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x127 (left s___)))
 (let ((?x253 (left s____)))
 (let (($x504 (= ?x253 ?x127)))
 (let ((?x130 (right s___)))
 (let ((?x471 (top ?x130)))
 (let ((?x472 (stack ?x471 ?x127)))
 (let (($x498 (= ?x253 ?x472)))
 (let (($x474 ((_ is stack ) ?x130)))
 (let (($x477 (= c___ right-to-left)))
 (let (($x478 (and $x477 $x474)))
 (let ((?x326 (center s___)))
 (let (($x479 ((_ is stack ) ?x326)))
 (let (($x480 (= c___ center-to-right)))
 (let (($x481 (and $x480 $x479)))
 (let ((?x467 (top ?x326)))
 (let ((?x468 (stack ?x467 ?x127)))
 (let (($x495 (= ?x253 ?x468)))
 (let (($x482 (= c___ center-to-left)))
 (let (($x483 (and $x482 $x479)))
 (let ((?x297 (rest ?x127)))
 (let (($x491 (= ?x253 ?x297)))
 (let (($x484 ((_ is stack ) ?x127)))
 (let (($x485 (= c___ left-to-right)))
 (let (($x486 (and $x485 $x484)))
 (let (($x487 (= c___ left-to-center)))
 (let (($x488 (and $x487 $x484)))
 (ite $x488 $x491 (ite $x486 $x491 (ite $x483 $x495 (ite $x481 $x504 (ite $x478 $x498 $x504))))))))))))))))))))))))))))))))
(assert
 (let ((?x130 (right s___)))
 (let ((?x298 (right s____)))
 (let (($x500 (= ?x298 ?x130)))
 (let ((?x470 (rest ?x130)))
 (let (($x497 (= ?x298 ?x470)))
 (let (($x474 ((_ is stack ) ?x130)))
 (let (($x475 (= c___ right-to-center)))
 (let (($x476 (and $x475 $x474)))
 (let (($x477 (= c___ right-to-left)))
 (let (($x478 (and $x477 $x474)))
 (let ((?x326 (center s___)))
 (let ((?x467 (top ?x326)))
 (let ((?x469 (stack ?x467 ?x130)))
 (let (($x496 (= ?x298 ?x469)))
 (let (($x479 ((_ is stack ) ?x326)))
 (let (($x480 (= c___ center-to-right)))
 (let (($x481 (and $x480 $x479)))
 (let (($x482 (= c___ center-to-left)))
 (let (($x483 (and $x482 $x479)))
 (let ((?x127 (left s___)))
 (let (($x484 ((_ is stack ) ?x127)))
 (let (($x485 (= c___ left-to-right)))
 (let (($x486 (and $x485 $x484)))
 (let (($x517 (ite $x486 $x500 (ite $x483 $x500 (ite $x481 $x496 (ite $x478 $x497 (ite $x476 $x497 $x500)))))))
 (let ((?x324 (top ?x127)))
 (let ((?x463 (stack ?x324 ?x130)))
 (let (($x492 (= ?x298 ?x463)))
 (let (($x487 (= c___ left-to-center)))
 (let (($x488 (and $x487 $x484)))
 (ite $x488 $x492 $x517)))))))))))))))))))))))))))))))
(assert
 (let ((?x326 (center s___)))
 (let ((?x464 (center s____)))
 (let (($x502 (= ?x464 ?x326)))
 (let ((?x130 (right s___)))
 (let ((?x471 (top ?x130)))
 (let ((?x473 (stack ?x471 ?x326)))
 (let (($x499 (= ?x464 ?x473)))
 (let (($x474 ((_ is stack ) ?x130)))
 (let (($x475 (= c___ right-to-center)))
 (let (($x476 (and $x475 $x474)))
 (let (($x477 (= c___ right-to-left)))
 (let (($x478 (and $x477 $x474)))
 (let ((?x466 (rest ?x326)))
 (let (($x494 (= ?x464 ?x466)))
 (let (($x479 ((_ is stack ) ?x326)))
 (let (($x480 (= c___ center-to-right)))
 (let (($x481 (and $x480 $x479)))
 (let (($x482 (= c___ center-to-left)))
 (let (($x483 (and $x482 $x479)))
 (let ((?x127 (left s___)))
 (let ((?x324 (top ?x127)))
 (let ((?x465 (stack ?x324 ?x326)))
 (let (($x493 (= ?x464 ?x465)))
 (let (($x484 ((_ is stack ) ?x127)))
 (let (($x485 (= c___ left-to-right)))
 (let (($x486 (and $x485 $x484)))
 (let (($x516 (ite $x486 $x493 (ite $x483 $x494 (ite $x481 $x494 (ite $x478 $x502 (ite $x476 $x499 $x502)))))))
 (let (($x487 (= c___ left-to-center)))
 (let (($x488 (and $x487 $x484)))
 (ite $x488 $x502 $x516)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x253 (left s____)))
 (let ((?x382 (left s_____)))
 (let (($x642 (= ?x382 ?x253)))
 (let ((?x298 (right s____)))
 (let ((?x609 (top ?x298)))
 (let ((?x610 (stack ?x609 ?x253)))
 (let (($x636 (= ?x382 ?x610)))
 (let (($x612 ((_ is stack ) ?x298)))
 (let (($x615 (= c____ right-to-left)))
 (let (($x616 (and $x615 $x612)))
 (let ((?x464 (center s____)))
 (let (($x617 ((_ is stack ) ?x464)))
 (let (($x618 (= c____ center-to-right)))
 (let (($x619 (and $x618 $x617)))
 (let ((?x605 (top ?x464)))
 (let ((?x606 (stack ?x605 ?x253)))
 (let (($x633 (= ?x382 ?x606)))
 (let (($x620 (= c____ center-to-left)))
 (let (($x621 (and $x620 $x617)))
 (let ((?x415 (rest ?x253)))
 (let (($x629 (= ?x382 ?x415)))
 (let (($x622 ((_ is stack ) ?x253)))
 (let (($x623 (= c____ left-to-right)))
 (let (($x624 (and $x623 $x622)))
 (let (($x625 (= c____ left-to-center)))
 (let (($x626 (and $x625 $x622)))
 (ite $x626 $x629 (ite $x624 $x629 (ite $x621 $x633 (ite $x619 $x642 (ite $x616 $x636 $x642))))))))))))))))))))))))))))))))
(assert
 (let ((?x298 (right s____)))
 (let ((?x416 (right s_____)))
 (let (($x638 (= ?x416 ?x298)))
 (let ((?x608 (rest ?x298)))
 (let (($x635 (= ?x416 ?x608)))
 (let (($x612 ((_ is stack ) ?x298)))
 (let (($x613 (= c____ right-to-center)))
 (let (($x614 (and $x613 $x612)))
 (let (($x615 (= c____ right-to-left)))
 (let (($x616 (and $x615 $x612)))
 (let ((?x464 (center s____)))
 (let ((?x605 (top ?x464)))
 (let ((?x607 (stack ?x605 ?x298)))
 (let (($x634 (= ?x416 ?x607)))
 (let (($x617 ((_ is stack ) ?x464)))
 (let (($x618 (= c____ center-to-right)))
 (let (($x619 (and $x618 $x617)))
 (let (($x620 (= c____ center-to-left)))
 (let (($x621 (and $x620 $x617)))
 (let ((?x253 (left s____)))
 (let (($x622 ((_ is stack ) ?x253)))
 (let (($x623 (= c____ left-to-right)))
 (let (($x624 (and $x623 $x622)))
 (let (($x655 (ite $x624 $x638 (ite $x621 $x638 (ite $x619 $x634 (ite $x616 $x635 (ite $x614 $x635 $x638)))))))
 (let ((?x462 (top ?x253)))
 (let ((?x601 (stack ?x462 ?x298)))
 (let (($x630 (= ?x416 ?x601)))
 (let (($x625 (= c____ left-to-center)))
 (let (($x626 (and $x625 $x622)))
 (ite $x626 $x630 $x655)))))))))))))))))))))))))))))))
(assert
 (let ((?x464 (center s____)))
 (let ((?x602 (center s_____)))
 (let (($x640 (= ?x602 ?x464)))
 (let ((?x298 (right s____)))
 (let ((?x609 (top ?x298)))
 (let ((?x611 (stack ?x609 ?x464)))
 (let (($x637 (= ?x602 ?x611)))
 (let (($x612 ((_ is stack ) ?x298)))
 (let (($x613 (= c____ right-to-center)))
 (let (($x614 (and $x613 $x612)))
 (let (($x615 (= c____ right-to-left)))
 (let (($x616 (and $x615 $x612)))
 (let ((?x604 (rest ?x464)))
 (let (($x632 (= ?x602 ?x604)))
 (let (($x617 ((_ is stack ) ?x464)))
 (let (($x618 (= c____ center-to-right)))
 (let (($x619 (and $x618 $x617)))
 (let (($x620 (= c____ center-to-left)))
 (let (($x621 (and $x620 $x617)))
 (let ((?x253 (left s____)))
 (let ((?x462 (top ?x253)))
 (let ((?x603 (stack ?x462 ?x464)))
 (let (($x631 (= ?x602 ?x603)))
 (let (($x622 ((_ is stack ) ?x253)))
 (let (($x623 (= c____ left-to-right)))
 (let (($x624 (and $x623 $x622)))
 (let (($x654 (ite $x624 $x631 (ite $x621 $x632 (ite $x619 $x632 (ite $x616 $x640 (ite $x614 $x637 $x640)))))))
 (let (($x625 (= c____ left-to-center)))
 (let (($x626 (and $x625 $x622)))
 (ite $x626 $x640 $x654)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x382 (left s_____)))
 (let ((?x520 (left s______)))
 (let (($x780 (= ?x520 ?x382)))
 (let ((?x416 (right s_____)))
 (let ((?x747 (top ?x416)))
 (let ((?x748 (stack ?x747 ?x382)))
 (let (($x774 (= ?x520 ?x748)))
 (let (($x750 ((_ is stack ) ?x416)))
 (let (($x753 (= c_____ right-to-left)))
 (let (($x754 (and $x753 $x750)))
 (let ((?x602 (center s_____)))
 (let (($x755 ((_ is stack ) ?x602)))
 (let (($x756 (= c_____ center-to-right)))
 (let (($x757 (and $x756 $x755)))
 (let ((?x743 (top ?x602)))
 (let ((?x744 (stack ?x743 ?x382)))
 (let (($x771 (= ?x520 ?x744)))
 (let (($x758 (= c_____ center-to-left)))
 (let (($x759 (and $x758 $x755)))
 (let ((?x553 (rest ?x382)))
 (let (($x767 (= ?x520 ?x553)))
 (let (($x760 ((_ is stack ) ?x382)))
 (let (($x761 (= c_____ left-to-right)))
 (let (($x762 (and $x761 $x760)))
 (let (($x763 (= c_____ left-to-center)))
 (let (($x764 (and $x763 $x760)))
 (ite $x764 $x767 (ite $x762 $x767 (ite $x759 $x771 (ite $x757 $x780 (ite $x754 $x774 $x780))))))))))))))))))))))))))))))))
(assert
 (let ((?x416 (right s_____)))
 (let ((?x554 (right s______)))
 (let (($x776 (= ?x554 ?x416)))
 (let ((?x746 (rest ?x416)))
 (let (($x773 (= ?x554 ?x746)))
 (let (($x750 ((_ is stack ) ?x416)))
 (let (($x751 (= c_____ right-to-center)))
 (let (($x752 (and $x751 $x750)))
 (let (($x753 (= c_____ right-to-left)))
 (let (($x754 (and $x753 $x750)))
 (let ((?x602 (center s_____)))
 (let ((?x743 (top ?x602)))
 (let ((?x745 (stack ?x743 ?x416)))
 (let (($x772 (= ?x554 ?x745)))
 (let (($x755 ((_ is stack ) ?x602)))
 (let (($x756 (= c_____ center-to-right)))
 (let (($x757 (and $x756 $x755)))
 (let (($x758 (= c_____ center-to-left)))
 (let (($x759 (and $x758 $x755)))
 (let ((?x382 (left s_____)))
 (let (($x760 ((_ is stack ) ?x382)))
 (let (($x761 (= c_____ left-to-right)))
 (let (($x762 (and $x761 $x760)))
 (let (($x793 (ite $x762 $x776 (ite $x759 $x776 (ite $x757 $x772 (ite $x754 $x773 (ite $x752 $x773 $x776)))))))
 (let ((?x600 (top ?x382)))
 (let ((?x739 (stack ?x600 ?x416)))
 (let (($x768 (= ?x554 ?x739)))
 (let (($x763 (= c_____ left-to-center)))
 (let (($x764 (and $x763 $x760)))
 (ite $x764 $x768 $x793)))))))))))))))))))))))))))))))
(assert
 (let ((?x602 (center s_____)))
 (let ((?x740 (center s______)))
 (let (($x778 (= ?x740 ?x602)))
 (let ((?x416 (right s_____)))
 (let ((?x747 (top ?x416)))
 (let ((?x749 (stack ?x747 ?x602)))
 (let (($x775 (= ?x740 ?x749)))
 (let (($x750 ((_ is stack ) ?x416)))
 (let (($x751 (= c_____ right-to-center)))
 (let (($x752 (and $x751 $x750)))
 (let (($x753 (= c_____ right-to-left)))
 (let (($x754 (and $x753 $x750)))
 (let ((?x742 (rest ?x602)))
 (let (($x770 (= ?x740 ?x742)))
 (let (($x755 ((_ is stack ) ?x602)))
 (let (($x756 (= c_____ center-to-right)))
 (let (($x757 (and $x756 $x755)))
 (let (($x758 (= c_____ center-to-left)))
 (let (($x759 (and $x758 $x755)))
 (let ((?x382 (left s_____)))
 (let ((?x600 (top ?x382)))
 (let ((?x741 (stack ?x600 ?x602)))
 (let (($x769 (= ?x740 ?x741)))
 (let (($x760 ((_ is stack ) ?x382)))
 (let (($x761 (= c_____ left-to-right)))
 (let (($x762 (and $x761 $x760)))
 (let (($x792 (ite $x762 $x769 (ite $x759 $x770 (ite $x757 $x770 (ite $x754 $x778 (ite $x752 $x775 $x778)))))))
 (let (($x763 (= c_____ left-to-center)))
 (let (($x764 (and $x763 $x760)))
 (ite $x764 $x778 $x792)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x520 (left s______)))
 (let ((?x658 (left s_______)))
 (let (($x918 (= ?x658 ?x520)))
 (let ((?x554 (right s______)))
 (let ((?x885 (top ?x554)))
 (let ((?x886 (stack ?x885 ?x520)))
 (let (($x912 (= ?x658 ?x886)))
 (let (($x888 ((_ is stack ) ?x554)))
 (let (($x891 (= c______ right-to-left)))
 (let (($x892 (and $x891 $x888)))
 (let ((?x740 (center s______)))
 (let (($x893 ((_ is stack ) ?x740)))
 (let (($x894 (= c______ center-to-right)))
 (let (($x895 (and $x894 $x893)))
 (let ((?x881 (top ?x740)))
 (let ((?x882 (stack ?x881 ?x520)))
 (let (($x909 (= ?x658 ?x882)))
 (let (($x896 (= c______ center-to-left)))
 (let (($x897 (and $x896 $x893)))
 (let ((?x691 (rest ?x520)))
 (let (($x905 (= ?x658 ?x691)))
 (let (($x898 ((_ is stack ) ?x520)))
 (let (($x899 (= c______ left-to-right)))
 (let (($x900 (and $x899 $x898)))
 (let (($x901 (= c______ left-to-center)))
 (let (($x902 (and $x901 $x898)))
 (ite $x902 $x905 (ite $x900 $x905 (ite $x897 $x909 (ite $x895 $x918 (ite $x892 $x912 $x918))))))))))))))))))))))))))))))))
(assert
 (let ((?x554 (right s______)))
 (let ((?x692 (right s_______)))
 (let (($x914 (= ?x692 ?x554)))
 (let ((?x884 (rest ?x554)))
 (let (($x911 (= ?x692 ?x884)))
 (let (($x888 ((_ is stack ) ?x554)))
 (let (($x889 (= c______ right-to-center)))
 (let (($x890 (and $x889 $x888)))
 (let (($x891 (= c______ right-to-left)))
 (let (($x892 (and $x891 $x888)))
 (let ((?x740 (center s______)))
 (let ((?x881 (top ?x740)))
 (let ((?x883 (stack ?x881 ?x554)))
 (let (($x910 (= ?x692 ?x883)))
 (let (($x893 ((_ is stack ) ?x740)))
 (let (($x894 (= c______ center-to-right)))
 (let (($x895 (and $x894 $x893)))
 (let (($x896 (= c______ center-to-left)))
 (let (($x897 (and $x896 $x893)))
 (let ((?x520 (left s______)))
 (let (($x898 ((_ is stack ) ?x520)))
 (let (($x899 (= c______ left-to-right)))
 (let (($x900 (and $x899 $x898)))
 (let (($x931 (ite $x900 $x914 (ite $x897 $x914 (ite $x895 $x910 (ite $x892 $x911 (ite $x890 $x911 $x914)))))))
 (let ((?x738 (top ?x520)))
 (let ((?x877 (stack ?x738 ?x554)))
 (let (($x906 (= ?x692 ?x877)))
 (let (($x901 (= c______ left-to-center)))
 (let (($x902 (and $x901 $x898)))
 (ite $x902 $x906 $x931)))))))))))))))))))))))))))))))
(assert
 (let ((?x740 (center s______)))
 (let ((?x878 (center s_______)))
 (let (($x916 (= ?x878 ?x740)))
 (let ((?x554 (right s______)))
 (let ((?x885 (top ?x554)))
 (let ((?x887 (stack ?x885 ?x740)))
 (let (($x913 (= ?x878 ?x887)))
 (let (($x888 ((_ is stack ) ?x554)))
 (let (($x889 (= c______ right-to-center)))
 (let (($x890 (and $x889 $x888)))
 (let (($x891 (= c______ right-to-left)))
 (let (($x892 (and $x891 $x888)))
 (let ((?x880 (rest ?x740)))
 (let (($x908 (= ?x878 ?x880)))
 (let (($x893 ((_ is stack ) ?x740)))
 (let (($x894 (= c______ center-to-right)))
 (let (($x895 (and $x894 $x893)))
 (let (($x896 (= c______ center-to-left)))
 (let (($x897 (and $x896 $x893)))
 (let ((?x520 (left s______)))
 (let ((?x738 (top ?x520)))
 (let ((?x879 (stack ?x738 ?x740)))
 (let (($x907 (= ?x878 ?x879)))
 (let (($x898 ((_ is stack ) ?x520)))
 (let (($x899 (= c______ left-to-right)))
 (let (($x900 (and $x899 $x898)))
 (let (($x930 (ite $x900 $x907 (ite $x897 $x908 (ite $x895 $x908 (ite $x892 $x916 (ite $x890 $x913 $x916)))))))
 (let (($x901 (= c______ left-to-center)))
 (let (($x902 (and $x901 $x898)))
 (ite $x902 $x916 $x930)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x658 (left s_______)))
 (let ((?x796 (left s________)))
 (let (($x1056 (= ?x796 ?x658)))
 (let ((?x692 (right s_______)))
 (let ((?x1023 (top ?x692)))
 (let ((?x1024 (stack ?x1023 ?x658)))
 (let (($x1050 (= ?x796 ?x1024)))
 (let (($x1026 ((_ is stack ) ?x692)))
 (let (($x1029 (= c_______ right-to-left)))
 (let (($x1030 (and $x1029 $x1026)))
 (let ((?x878 (center s_______)))
 (let (($x1031 ((_ is stack ) ?x878)))
 (let (($x1032 (= c_______ center-to-right)))
 (let (($x1033 (and $x1032 $x1031)))
 (let ((?x1019 (top ?x878)))
 (let ((?x1020 (stack ?x1019 ?x658)))
 (let (($x1047 (= ?x796 ?x1020)))
 (let (($x1034 (= c_______ center-to-left)))
 (let (($x1035 (and $x1034 $x1031)))
 (let ((?x829 (rest ?x658)))
 (let (($x1043 (= ?x796 ?x829)))
 (let (($x1036 ((_ is stack ) ?x658)))
 (let (($x1037 (= c_______ left-to-right)))
 (let (($x1038 (and $x1037 $x1036)))
 (let (($x1039 (= c_______ left-to-center)))
 (let (($x1040 (and $x1039 $x1036)))
 (ite $x1040 $x1043 (ite $x1038 $x1043 (ite $x1035 $x1047 (ite $x1033 $x1056 (ite $x1030 $x1050 $x1056))))))))))))))))))))))))))))))))
(assert
 (let ((?x692 (right s_______)))
 (let ((?x830 (right s________)))
 (let (($x1052 (= ?x830 ?x692)))
 (let ((?x1022 (rest ?x692)))
 (let (($x1049 (= ?x830 ?x1022)))
 (let (($x1026 ((_ is stack ) ?x692)))
 (let (($x1027 (= c_______ right-to-center)))
 (let (($x1028 (and $x1027 $x1026)))
 (let (($x1029 (= c_______ right-to-left)))
 (let (($x1030 (and $x1029 $x1026)))
 (let ((?x878 (center s_______)))
 (let ((?x1019 (top ?x878)))
 (let ((?x1021 (stack ?x1019 ?x692)))
 (let (($x1048 (= ?x830 ?x1021)))
 (let (($x1031 ((_ is stack ) ?x878)))
 (let (($x1032 (= c_______ center-to-right)))
 (let (($x1033 (and $x1032 $x1031)))
 (let (($x1034 (= c_______ center-to-left)))
 (let (($x1035 (and $x1034 $x1031)))
 (let ((?x658 (left s_______)))
 (let (($x1036 ((_ is stack ) ?x658)))
 (let (($x1037 (= c_______ left-to-right)))
 (let (($x1038 (and $x1037 $x1036)))
 (let (($x1069 (ite $x1038 $x1052 (ite $x1035 $x1052 (ite $x1033 $x1048 (ite $x1030 $x1049 (ite $x1028 $x1049 $x1052)))))))
 (let ((?x876 (top ?x658)))
 (let ((?x1015 (stack ?x876 ?x692)))
 (let (($x1044 (= ?x830 ?x1015)))
 (let (($x1039 (= c_______ left-to-center)))
 (let (($x1040 (and $x1039 $x1036)))
 (ite $x1040 $x1044 $x1069)))))))))))))))))))))))))))))))
(assert
 (let ((?x878 (center s_______)))
 (let ((?x1016 (center s________)))
 (let (($x1054 (= ?x1016 ?x878)))
 (let ((?x692 (right s_______)))
 (let ((?x1023 (top ?x692)))
 (let ((?x1025 (stack ?x1023 ?x878)))
 (let (($x1051 (= ?x1016 ?x1025)))
 (let (($x1026 ((_ is stack ) ?x692)))
 (let (($x1027 (= c_______ right-to-center)))
 (let (($x1028 (and $x1027 $x1026)))
 (let (($x1029 (= c_______ right-to-left)))
 (let (($x1030 (and $x1029 $x1026)))
 (let ((?x1018 (rest ?x878)))
 (let (($x1046 (= ?x1016 ?x1018)))
 (let (($x1031 ((_ is stack ) ?x878)))
 (let (($x1032 (= c_______ center-to-right)))
 (let (($x1033 (and $x1032 $x1031)))
 (let (($x1034 (= c_______ center-to-left)))
 (let (($x1035 (and $x1034 $x1031)))
 (let ((?x658 (left s_______)))
 (let ((?x876 (top ?x658)))
 (let ((?x1017 (stack ?x876 ?x878)))
 (let (($x1045 (= ?x1016 ?x1017)))
 (let (($x1036 ((_ is stack ) ?x658)))
 (let (($x1037 (= c_______ left-to-right)))
 (let (($x1038 (and $x1037 $x1036)))
 (let (($x1068 (ite $x1038 $x1045 (ite $x1035 $x1046 (ite $x1033 $x1046 (ite $x1030 $x1054 (ite $x1028 $x1051 $x1054)))))))
 (let (($x1039 (= c_______ left-to-center)))
 (let (($x1040 (and $x1039 $x1036)))
 (ite $x1040 $x1054 $x1068)))))))))))))))))))))))))))))))
(assert
 (let ((?x33 (stack F (stack A empty))))
 (let ((?x830 (right s________)))
 (let (($x1072 (= ?x830 ?x33)))
 (let ((?x26 (stack C empty)))
 (let ((?x31 (stack D ?x26)))
 (let ((?x1016 (center s________)))
 (let (($x1103 (= ?x1016 ?x31)))
 (let ((?x30 (stack B (stack E (stack H (stack G empty))))))
 (let ((?x796 (left s________)))
 (let (($x1104 (= ?x796 ?x30)))
 (let (($x1106 (not (and $x1104 $x1103 $x1072))))
 (not $x1106)))))))))))))
(check-sat)
(exit)
