(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x23 (stack B empty)))
 (let ((?x22 (stack A ?x23)))
 (let ((?x24 (stack F ?x22)))
 (let ((?x25 (stack G ?x24)))
 (let ((?x26 (stack J ?x25)))
 (let ((?x86 (left s_tmp_)))
 (= ?x86 ?x26))))))))
(assert
 (let ((?x27 (stack E empty)))
 (let ((?x28 (stack I ?x27)))
 (let ((?x89 (center s_tmp__)))
 (= ?x89 ?x28)))))
(assert
 (let ((?x29 (stack C empty)))
 (let ((?x30 (stack D ?x29)))
 (let ((?x31 (stack H ?x30)))
 (let ((?x92 (right s_tmp___)))
 (= ?x92 ?x31))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x119 (left s_tmp__)))
 (= (left s_tmp___) ?x119)))
(assert
 (let ((?x89 (center s_tmp__)))
 (= (center s_tmp___) ?x89)))
(assert
 (let ((?x123 (center s_tmp_)))
 (= ?x123 (center s_tmp))))
(assert
 (let ((?x126 (right s_tmp_)))
 (= ?x126 (right s_tmp))))
(assert
 (let ((?x86 (left s_tmp_)))
 (let ((?x119 (left s_tmp__)))
 (= ?x119 ?x86))))
(assert
 (let ((?x126 (right s_tmp_)))
 (let ((?x130 (right s_tmp__)))
 (= ?x130 ?x126))))
(assert
 (= c__ c!1))
(assert
 (let ((?x63 (left s_)))
 (let ((?x219 (left s__)))
 (let (($x249 (= ?x219 ?x63)))
 (let ((?x66 (right s_)))
 (let (($x216 ((_ is stack ) ?x66)))
 (let (($x222 (= c_ right-to-left)))
 (let (($x223 (and $x222 $x216)))
 (let ((?x68 (center s_)))
 (let (($x224 ((_ is stack ) ?x68)))
 (let (($x225 (= c_ center-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x227 (= c_ center-to-left)))
 (let (($x228 (and $x227 $x224)))
 (let (($x258 (ite $x228 (= ?x219 (stack (top ?x68) ?x63)) (ite $x226 $x249 (ite $x223 (= ?x219 (stack (top ?x66) ?x63)) $x249)))))
 (let (($x236 (= ?x219 (rest ?x63))))
 (let (($x229 ((_ is stack ) ?x63)))
 (let (($x230 (= c_ left-to-right)))
 (let (($x231 (and $x230 $x229)))
 (let (($x232 (= c_ left-to-center)))
 (let (($x233 (and $x232 $x229)))
 (ite $x233 $x236 (ite $x231 $x236 $x258)))))))))))))))))))))))
(assert
 (let ((?x66 (right s_)))
 (let ((?x203 (right s__)))
 (let (($x245 (= ?x203 ?x66)))
 (let (($x242 (= ?x203 (rest ?x66))))
 (let (($x216 ((_ is stack ) ?x66)))
 (let (($x220 (= c_ right-to-center)))
 (let (($x221 (and $x220 $x216)))
 (let (($x222 (= c_ right-to-left)))
 (let (($x223 (and $x222 $x216)))
 (let ((?x68 (center s_)))
 (let (($x224 ((_ is stack ) ?x68)))
 (let (($x225 (= c_ center-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x255 (ite $x226 (= ?x203 (stack (top ?x68) ?x66)) (ite $x223 $x242 (ite $x221 $x242 $x245)))))
 (let (($x227 (= c_ center-to-left)))
 (let (($x228 (and $x227 $x224)))
 (let ((?x63 (left s_)))
 (let (($x229 ((_ is stack ) ?x63)))
 (let (($x230 (= c_ left-to-right)))
 (let (($x231 (and $x230 $x229)))
 (let (($x232 (= c_ left-to-center)))
 (let (($x233 (and $x232 $x229)))
 (ite $x233 (= ?x203 (stack (top ?x63) ?x66)) (ite $x231 $x245 (ite $x228 $x245 $x255))))))))))))))))))))))))))
(assert
 (let ((?x68 (center s_)))
 (let ((?x206 (center s__)))
 (let (($x247 (= ?x206 ?x68)))
 (let ((?x66 (right s_)))
 (let (($x216 ((_ is stack ) ?x66)))
 (let (($x220 (= c_ right-to-center)))
 (let (($x221 (and $x220 $x216)))
 (let (($x222 (= c_ right-to-left)))
 (let (($x223 (and $x222 $x216)))
 (let (($x239 (= ?x206 (rest ?x68))))
 (let (($x224 ((_ is stack ) ?x68)))
 (let (($x225 (= c_ center-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x254 (ite $x226 $x239 (ite $x223 $x247 (ite $x221 (= ?x206 (stack (top ?x66) ?x68)) $x247)))))
 (let (($x227 (= c_ center-to-left)))
 (let (($x228 (and $x227 $x224)))
 (let ((?x63 (left s_)))
 (let (($x229 ((_ is stack ) ?x63)))
 (let (($x230 (= c_ left-to-right)))
 (let (($x231 (and $x230 $x229)))
 (let (($x232 (= c_ left-to-center)))
 (let (($x233 (and $x232 $x229)))
 (ite $x233 $x247 (ite $x231 (= ?x206 (stack (top ?x63) ?x68)) (ite $x228 $x239 $x254))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x219 (left s__)))
 (let ((?x133 (left s___)))
 (let (($x378 (= ?x133 ?x219)))
 (let ((?x203 (right s__)))
 (let ((?x345 (top ?x203)))
 (let ((?x346 (stack ?x345 ?x219)))
 (let (($x372 (= ?x133 ?x346)))
 (let (($x348 ((_ is stack ) ?x203)))
 (let (($x351 (= c__ right-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x206 (center s__)))
 (let (($x353 ((_ is stack ) ?x206)))
 (let (($x354 (= c__ center-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let ((?x341 (top ?x206)))
 (let ((?x342 (stack ?x341 ?x219)))
 (let (($x369 (= ?x133 ?x342)))
 (let (($x356 (= c__ center-to-left)))
 (let (($x357 (and $x356 $x353)))
 (let ((?x135 (rest ?x219)))
 (let (($x365 (= ?x133 ?x135)))
 (let (($x358 ((_ is stack ) ?x219)))
 (let (($x359 (= c__ left-to-right)))
 (let (($x360 (and $x359 $x358)))
 (let (($x361 (= c__ left-to-center)))
 (let (($x362 (and $x361 $x358)))
 (ite $x362 $x365 (ite $x360 $x365 (ite $x357 $x369 (ite $x355 $x378 (ite $x352 $x372 $x378))))))))))))))))))))))))))))))))
(assert
 (let ((?x203 (right s__)))
 (let ((?x136 (right s___)))
 (let (($x374 (= ?x136 ?x203)))
 (let ((?x344 (rest ?x203)))
 (let (($x371 (= ?x136 ?x344)))
 (let (($x348 ((_ is stack ) ?x203)))
 (let (($x349 (= c__ right-to-center)))
 (let (($x350 (and $x349 $x348)))
 (let (($x351 (= c__ right-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x206 (center s__)))
 (let ((?x341 (top ?x206)))
 (let ((?x343 (stack ?x341 ?x203)))
 (let (($x370 (= ?x136 ?x343)))
 (let (($x353 ((_ is stack ) ?x206)))
 (let (($x354 (= c__ center-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let (($x356 (= c__ center-to-left)))
 (let (($x357 (and $x356 $x353)))
 (let ((?x219 (left s__)))
 (let (($x358 ((_ is stack ) ?x219)))
 (let (($x359 (= c__ left-to-right)))
 (let (($x360 (and $x359 $x358)))
 (let (($x391 (ite $x360 $x374 (ite $x357 $x374 (ite $x355 $x370 (ite $x352 $x371 (ite $x350 $x371 $x374)))))))
 (let ((?x201 (top ?x219)))
 (let ((?x337 (stack ?x201 ?x203)))
 (let (($x366 (= ?x136 ?x337)))
 (let (($x361 (= c__ left-to-center)))
 (let (($x362 (and $x361 $x358)))
 (ite $x362 $x366 $x391)))))))))))))))))))))))))))))))
(assert
 (let ((?x206 (center s__)))
 (let ((?x338 (center s___)))
 (let (($x376 (= ?x338 ?x206)))
 (let ((?x203 (right s__)))
 (let ((?x345 (top ?x203)))
 (let ((?x347 (stack ?x345 ?x206)))
 (let (($x373 (= ?x338 ?x347)))
 (let (($x348 ((_ is stack ) ?x203)))
 (let (($x349 (= c__ right-to-center)))
 (let (($x350 (and $x349 $x348)))
 (let (($x351 (= c__ right-to-left)))
 (let (($x352 (and $x351 $x348)))
 (let ((?x340 (rest ?x206)))
 (let (($x368 (= ?x338 ?x340)))
 (let (($x353 ((_ is stack ) ?x206)))
 (let (($x354 (= c__ center-to-right)))
 (let (($x355 (and $x354 $x353)))
 (let (($x356 (= c__ center-to-left)))
 (let (($x357 (and $x356 $x353)))
 (let ((?x219 (left s__)))
 (let ((?x201 (top ?x219)))
 (let ((?x339 (stack ?x201 ?x206)))
 (let (($x367 (= ?x338 ?x339)))
 (let (($x358 ((_ is stack ) ?x219)))
 (let (($x359 (= c__ left-to-right)))
 (let (($x360 (and $x359 $x358)))
 (let (($x390 (ite $x360 $x367 (ite $x357 $x368 (ite $x355 $x368 (ite $x352 $x376 (ite $x350 $x373 $x376)))))))
 (let (($x361 (= c__ left-to-center)))
 (let (($x362 (and $x361 $x358)))
 (ite $x362 $x376 $x390)))))))))))))))))))))))))))))))
(assert
 (let ((?x27 (stack E empty)))
 (let ((?x136 (right s___)))
 (let (($x394 (= ?x136 ?x27)))
 (let ((?x338 (center s___)))
 (let (($x425 (= ?x338 empty)))
 (let ((?x36 (stack A (stack I (stack F (stack J (stack G (stack B empty))))))))
 (let ((?x39 (stack D (stack C (stack H ?x36)))))
 (let ((?x133 (left s___)))
 (let (($x426 (= ?x133 ?x39)))
 (let (($x428 (not (and $x426 $x425 $x394))))
 (not $x428))))))))))))
(check-sat)
(exit)
