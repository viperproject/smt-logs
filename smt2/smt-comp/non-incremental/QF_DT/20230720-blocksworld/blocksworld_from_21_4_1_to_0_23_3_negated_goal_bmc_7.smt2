(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y_Z 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V) (W) (X) (Y) (Z))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y_Z) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x39 (stack Y empty)))
 (let ((?x38 (stack Q ?x39)))
 (let ((?x40 (stack K ?x38)))
 (let ((?x41 (stack T ?x40)))
 (let ((?x42 (stack H ?x41)))
 (let ((?x43 (stack Z ?x42)))
 (let ((?x44 (stack W ?x43)))
 (let ((?x45 (stack X ?x44)))
 (let ((?x46 (stack C ?x45)))
 (let ((?x47 (stack R ?x46)))
 (let ((?x48 (stack U ?x47)))
 (let ((?x49 (stack E ?x48)))
 (let ((?x50 (stack I ?x49)))
 (let ((?x51 (stack B ?x50)))
 (let ((?x52 (stack L ?x51)))
 (let ((?x53 (stack M ?x52)))
 (let ((?x54 (stack A ?x53)))
 (let ((?x55 (stack V ?x54)))
 (let ((?x56 (stack P ?x55)))
 (let ((?x57 (stack O ?x56)))
 (let ((?x58 (stack N ?x57)))
 (let ((?x136 (left s_tmp_)))
 (= ?x136 ?x58))))))))))))))))))))))))
(assert
 (let ((?x59 (stack D empty)))
 (let ((?x60 (stack S ?x59)))
 (let ((?x61 (stack G ?x60)))
 (let ((?x62 (stack J ?x61)))
 (let ((?x139 (center s_tmp__)))
 (= ?x139 ?x62)))))))
(assert
 (let ((?x63 (stack F empty)))
 (let ((?x142 (right s_tmp___)))
 (= ?x142 ?x63))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x169 (left s_tmp__)))
 (= (left s_tmp___) ?x169)))
(assert
 (let ((?x139 (center s_tmp__)))
 (= (center s_tmp___) ?x139)))
(assert
 (let ((?x173 (center s_tmp_)))
 (= ?x173 (center s_tmp))))
(assert
 (let ((?x176 (right s_tmp_)))
 (= ?x176 (right s_tmp))))
(assert
 (let ((?x136 (left s_tmp_)))
 (let ((?x169 (left s_tmp__)))
 (= ?x169 ?x136))))
(assert
 (let ((?x176 (right s_tmp_)))
 (let ((?x180 (right s_tmp__)))
 (= ?x180 ?x176))))
(assert
 (= c__ c!1))
(assert
 (let ((?x113 (left s_)))
 (let ((?x311 (left s__)))
 (let (($x347 (= ?x311 ?x113)))
 (let ((?x116 (right s_)))
 (let (($x317 ((_ is stack ) ?x116)))
 (let (($x320 (= c_ right-to-left)))
 (let (($x321 (and $x320 $x317)))
 (let ((?x118 (center s_)))
 (let (($x322 ((_ is stack ) ?x118)))
 (let (($x323 (= c_ center-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x325 (= c_ center-to-left)))
 (let (($x326 (and $x325 $x322)))
 (let (($x356 (ite $x326 (= ?x311 (stack (top ?x118) ?x113)) (ite $x324 $x347 (ite $x321 (= ?x311 (stack (top ?x116) ?x113)) $x347)))))
 (let (($x334 (= ?x311 (rest ?x113))))
 (let (($x327 ((_ is stack ) ?x113)))
 (let (($x328 (= c_ left-to-right)))
 (let (($x329 (and $x328 $x327)))
 (let (($x330 (= c_ left-to-center)))
 (let (($x331 (and $x330 $x327)))
 (ite $x331 $x334 (ite $x329 $x334 $x356)))))))))))))))))))))))
(assert
 (let ((?x116 (right s_)))
 (let ((?x304 (right s__)))
 (let (($x343 (= ?x304 ?x116)))
 (let (($x340 (= ?x304 (rest ?x116))))
 (let (($x317 ((_ is stack ) ?x116)))
 (let (($x318 (= c_ right-to-center)))
 (let (($x319 (and $x318 $x317)))
 (let (($x320 (= c_ right-to-left)))
 (let (($x321 (and $x320 $x317)))
 (let ((?x118 (center s_)))
 (let (($x322 ((_ is stack ) ?x118)))
 (let (($x323 (= c_ center-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x353 (ite $x324 (= ?x304 (stack (top ?x118) ?x116)) (ite $x321 $x340 (ite $x319 $x340 $x343)))))
 (let (($x325 (= c_ center-to-left)))
 (let (($x326 (and $x325 $x322)))
 (let ((?x113 (left s_)))
 (let (($x327 ((_ is stack ) ?x113)))
 (let (($x328 (= c_ left-to-right)))
 (let (($x329 (and $x328 $x327)))
 (let (($x330 (= c_ left-to-center)))
 (let (($x331 (and $x330 $x327)))
 (ite $x331 (= ?x304 (stack (top ?x113) ?x116)) (ite $x329 $x343 (ite $x326 $x343 $x353))))))))))))))))))))))))))
(assert
 (let ((?x118 (center s_)))
 (let ((?x307 (center s__)))
 (let (($x345 (= ?x307 ?x118)))
 (let ((?x116 (right s_)))
 (let (($x317 ((_ is stack ) ?x116)))
 (let (($x318 (= c_ right-to-center)))
 (let (($x319 (and $x318 $x317)))
 (let (($x320 (= c_ right-to-left)))
 (let (($x321 (and $x320 $x317)))
 (let (($x337 (= ?x307 (rest ?x118))))
 (let (($x322 ((_ is stack ) ?x118)))
 (let (($x323 (= c_ center-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x352 (ite $x324 $x337 (ite $x321 $x345 (ite $x319 (= ?x307 (stack (top ?x116) ?x118)) $x345)))))
 (let (($x325 (= c_ center-to-left)))
 (let (($x326 (and $x325 $x322)))
 (let ((?x113 (left s_)))
 (let (($x327 ((_ is stack ) ?x113)))
 (let (($x328 (= c_ left-to-right)))
 (let (($x329 (and $x328 $x327)))
 (let (($x330 (= c_ left-to-center)))
 (let (($x331 (and $x330 $x327)))
 (ite $x331 $x345 (ite $x329 (= ?x307 (stack (top ?x113) ?x118)) (ite $x326 $x337 $x352))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x311 (left s__)))
 (let ((?x183 (left s___)))
 (let (($x476 (= ?x183 ?x311)))
 (let ((?x304 (right s__)))
 (let ((?x443 (top ?x304)))
 (let ((?x444 (stack ?x443 ?x311)))
 (let (($x470 (= ?x183 ?x444)))
 (let (($x446 ((_ is stack ) ?x304)))
 (let (($x449 (= c__ right-to-left)))
 (let (($x450 (and $x449 $x446)))
 (let ((?x307 (center s__)))
 (let (($x451 ((_ is stack ) ?x307)))
 (let (($x452 (= c__ center-to-right)))
 (let (($x453 (and $x452 $x451)))
 (let ((?x439 (top ?x307)))
 (let ((?x440 (stack ?x439 ?x311)))
 (let (($x467 (= ?x183 ?x440)))
 (let (($x454 (= c__ center-to-left)))
 (let (($x455 (and $x454 $x451)))
 (let ((?x185 (rest ?x311)))
 (let (($x463 (= ?x183 ?x185)))
 (let (($x456 ((_ is stack ) ?x311)))
 (let (($x457 (= c__ left-to-right)))
 (let (($x458 (and $x457 $x456)))
 (let (($x459 (= c__ left-to-center)))
 (let (($x460 (and $x459 $x456)))
 (ite $x460 $x463 (ite $x458 $x463 (ite $x455 $x467 (ite $x453 $x476 (ite $x450 $x470 $x476))))))))))))))))))))))))))))))))
(assert
 (let ((?x304 (right s__)))
 (let ((?x186 (right s___)))
 (let (($x472 (= ?x186 ?x304)))
 (let ((?x442 (rest ?x304)))
 (let (($x469 (= ?x186 ?x442)))
 (let (($x446 ((_ is stack ) ?x304)))
 (let (($x447 (= c__ right-to-center)))
 (let (($x448 (and $x447 $x446)))
 (let (($x449 (= c__ right-to-left)))
 (let (($x450 (and $x449 $x446)))
 (let ((?x307 (center s__)))
 (let ((?x439 (top ?x307)))
 (let ((?x441 (stack ?x439 ?x304)))
 (let (($x468 (= ?x186 ?x441)))
 (let (($x451 ((_ is stack ) ?x307)))
 (let (($x452 (= c__ center-to-right)))
 (let (($x453 (and $x452 $x451)))
 (let (($x454 (= c__ center-to-left)))
 (let (($x455 (and $x454 $x451)))
 (let ((?x311 (left s__)))
 (let (($x456 ((_ is stack ) ?x311)))
 (let (($x457 (= c__ left-to-right)))
 (let (($x458 (and $x457 $x456)))
 (let (($x489 (ite $x458 $x472 (ite $x455 $x472 (ite $x453 $x468 (ite $x450 $x469 (ite $x448 $x469 $x472)))))))
 (let ((?x299 (top ?x311)))
 (let ((?x435 (stack ?x299 ?x304)))
 (let (($x464 (= ?x186 ?x435)))
 (let (($x459 (= c__ left-to-center)))
 (let (($x460 (and $x459 $x456)))
 (ite $x460 $x464 $x489)))))))))))))))))))))))))))))))
(assert
 (let ((?x307 (center s__)))
 (let ((?x436 (center s___)))
 (let (($x474 (= ?x436 ?x307)))
 (let ((?x304 (right s__)))
 (let ((?x443 (top ?x304)))
 (let ((?x445 (stack ?x443 ?x307)))
 (let (($x471 (= ?x436 ?x445)))
 (let (($x446 ((_ is stack ) ?x304)))
 (let (($x447 (= c__ right-to-center)))
 (let (($x448 (and $x447 $x446)))
 (let (($x449 (= c__ right-to-left)))
 (let (($x450 (and $x449 $x446)))
 (let ((?x438 (rest ?x307)))
 (let (($x466 (= ?x436 ?x438)))
 (let (($x451 ((_ is stack ) ?x307)))
 (let (($x452 (= c__ center-to-right)))
 (let (($x453 (and $x452 $x451)))
 (let (($x454 (= c__ center-to-left)))
 (let (($x455 (and $x454 $x451)))
 (let ((?x311 (left s__)))
 (let ((?x299 (top ?x311)))
 (let ((?x437 (stack ?x299 ?x307)))
 (let (($x465 (= ?x436 ?x437)))
 (let (($x456 ((_ is stack ) ?x311)))
 (let (($x457 (= c__ left-to-right)))
 (let (($x458 (and $x457 $x456)))
 (let (($x488 (ite $x458 $x465 (ite $x455 $x466 (ite $x453 $x466 (ite $x450 $x474 (ite $x448 $x471 $x474)))))))
 (let (($x459 (= c__ left-to-center)))
 (let (($x460 (and $x459 $x456)))
 (ite $x460 $x474 $x488)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x183 (left s___)))
 (let ((?x363 (left s____)))
 (let (($x614 (= ?x363 ?x183)))
 (let ((?x186 (right s___)))
 (let ((?x581 (top ?x186)))
 (let ((?x582 (stack ?x581 ?x183)))
 (let (($x608 (= ?x363 ?x582)))
 (let (($x584 ((_ is stack ) ?x186)))
 (let (($x587 (= c___ right-to-left)))
 (let (($x588 (and $x587 $x584)))
 (let ((?x436 (center s___)))
 (let (($x589 ((_ is stack ) ?x436)))
 (let (($x590 (= c___ center-to-right)))
 (let (($x591 (and $x590 $x589)))
 (let ((?x577 (top ?x436)))
 (let ((?x578 (stack ?x577 ?x183)))
 (let (($x605 (= ?x363 ?x578)))
 (let (($x592 (= c___ center-to-left)))
 (let (($x593 (and $x592 $x589)))
 (let ((?x407 (rest ?x183)))
 (let (($x601 (= ?x363 ?x407)))
 (let (($x594 ((_ is stack ) ?x183)))
 (let (($x595 (= c___ left-to-right)))
 (let (($x596 (and $x595 $x594)))
 (let (($x597 (= c___ left-to-center)))
 (let (($x598 (and $x597 $x594)))
 (ite $x598 $x601 (ite $x596 $x601 (ite $x593 $x605 (ite $x591 $x614 (ite $x588 $x608 $x614))))))))))))))))))))))))))))))))
(assert
 (let ((?x186 (right s___)))
 (let ((?x408 (right s____)))
 (let (($x610 (= ?x408 ?x186)))
 (let ((?x580 (rest ?x186)))
 (let (($x607 (= ?x408 ?x580)))
 (let (($x584 ((_ is stack ) ?x186)))
 (let (($x585 (= c___ right-to-center)))
 (let (($x586 (and $x585 $x584)))
 (let (($x587 (= c___ right-to-left)))
 (let (($x588 (and $x587 $x584)))
 (let ((?x436 (center s___)))
 (let ((?x577 (top ?x436)))
 (let ((?x579 (stack ?x577 ?x186)))
 (let (($x606 (= ?x408 ?x579)))
 (let (($x589 ((_ is stack ) ?x436)))
 (let (($x590 (= c___ center-to-right)))
 (let (($x591 (and $x590 $x589)))
 (let (($x592 (= c___ center-to-left)))
 (let (($x593 (and $x592 $x589)))
 (let ((?x183 (left s___)))
 (let (($x594 ((_ is stack ) ?x183)))
 (let (($x595 (= c___ left-to-right)))
 (let (($x596 (and $x595 $x594)))
 (let (($x627 (ite $x596 $x610 (ite $x593 $x610 (ite $x591 $x606 (ite $x588 $x607 (ite $x586 $x607 $x610)))))))
 (let ((?x434 (top ?x183)))
 (let ((?x573 (stack ?x434 ?x186)))
 (let (($x602 (= ?x408 ?x573)))
 (let (($x597 (= c___ left-to-center)))
 (let (($x598 (and $x597 $x594)))
 (ite $x598 $x602 $x627)))))))))))))))))))))))))))))))
(assert
 (let ((?x436 (center s___)))
 (let ((?x574 (center s____)))
 (let (($x612 (= ?x574 ?x436)))
 (let ((?x186 (right s___)))
 (let ((?x581 (top ?x186)))
 (let ((?x583 (stack ?x581 ?x436)))
 (let (($x609 (= ?x574 ?x583)))
 (let (($x584 ((_ is stack ) ?x186)))
 (let (($x585 (= c___ right-to-center)))
 (let (($x586 (and $x585 $x584)))
 (let (($x587 (= c___ right-to-left)))
 (let (($x588 (and $x587 $x584)))
 (let ((?x576 (rest ?x436)))
 (let (($x604 (= ?x574 ?x576)))
 (let (($x589 ((_ is stack ) ?x436)))
 (let (($x590 (= c___ center-to-right)))
 (let (($x591 (and $x590 $x589)))
 (let (($x592 (= c___ center-to-left)))
 (let (($x593 (and $x592 $x589)))
 (let ((?x183 (left s___)))
 (let ((?x434 (top ?x183)))
 (let ((?x575 (stack ?x434 ?x436)))
 (let (($x603 (= ?x574 ?x575)))
 (let (($x594 ((_ is stack ) ?x183)))
 (let (($x595 (= c___ left-to-right)))
 (let (($x596 (and $x595 $x594)))
 (let (($x626 (ite $x596 $x603 (ite $x593 $x604 (ite $x591 $x604 (ite $x588 $x612 (ite $x586 $x609 $x612)))))))
 (let (($x597 (= c___ left-to-center)))
 (let (($x598 (and $x597 $x594)))
 (ite $x598 $x612 $x626)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x363 (left s____)))
 (let ((?x492 (left s_____)))
 (let (($x752 (= ?x492 ?x363)))
 (let ((?x408 (right s____)))
 (let ((?x719 (top ?x408)))
 (let ((?x720 (stack ?x719 ?x363)))
 (let (($x746 (= ?x492 ?x720)))
 (let (($x722 ((_ is stack ) ?x408)))
 (let (($x725 (= c____ right-to-left)))
 (let (($x726 (and $x725 $x722)))
 (let ((?x574 (center s____)))
 (let (($x727 ((_ is stack ) ?x574)))
 (let (($x728 (= c____ center-to-right)))
 (let (($x729 (and $x728 $x727)))
 (let ((?x715 (top ?x574)))
 (let ((?x716 (stack ?x715 ?x363)))
 (let (($x743 (= ?x492 ?x716)))
 (let (($x730 (= c____ center-to-left)))
 (let (($x731 (and $x730 $x727)))
 (let ((?x525 (rest ?x363)))
 (let (($x739 (= ?x492 ?x525)))
 (let (($x732 ((_ is stack ) ?x363)))
 (let (($x733 (= c____ left-to-right)))
 (let (($x734 (and $x733 $x732)))
 (let (($x735 (= c____ left-to-center)))
 (let (($x736 (and $x735 $x732)))
 (ite $x736 $x739 (ite $x734 $x739 (ite $x731 $x743 (ite $x729 $x752 (ite $x726 $x746 $x752))))))))))))))))))))))))))))))))
(assert
 (let ((?x408 (right s____)))
 (let ((?x526 (right s_____)))
 (let (($x748 (= ?x526 ?x408)))
 (let ((?x718 (rest ?x408)))
 (let (($x745 (= ?x526 ?x718)))
 (let (($x722 ((_ is stack ) ?x408)))
 (let (($x723 (= c____ right-to-center)))
 (let (($x724 (and $x723 $x722)))
 (let (($x725 (= c____ right-to-left)))
 (let (($x726 (and $x725 $x722)))
 (let ((?x574 (center s____)))
 (let ((?x715 (top ?x574)))
 (let ((?x717 (stack ?x715 ?x408)))
 (let (($x744 (= ?x526 ?x717)))
 (let (($x727 ((_ is stack ) ?x574)))
 (let (($x728 (= c____ center-to-right)))
 (let (($x729 (and $x728 $x727)))
 (let (($x730 (= c____ center-to-left)))
 (let (($x731 (and $x730 $x727)))
 (let ((?x363 (left s____)))
 (let (($x732 ((_ is stack ) ?x363)))
 (let (($x733 (= c____ left-to-right)))
 (let (($x734 (and $x733 $x732)))
 (let (($x765 (ite $x734 $x748 (ite $x731 $x748 (ite $x729 $x744 (ite $x726 $x745 (ite $x724 $x745 $x748)))))))
 (let ((?x572 (top ?x363)))
 (let ((?x711 (stack ?x572 ?x408)))
 (let (($x740 (= ?x526 ?x711)))
 (let (($x735 (= c____ left-to-center)))
 (let (($x736 (and $x735 $x732)))
 (ite $x736 $x740 $x765)))))))))))))))))))))))))))))))
(assert
 (let ((?x574 (center s____)))
 (let ((?x712 (center s_____)))
 (let (($x750 (= ?x712 ?x574)))
 (let ((?x408 (right s____)))
 (let ((?x719 (top ?x408)))
 (let ((?x721 (stack ?x719 ?x574)))
 (let (($x747 (= ?x712 ?x721)))
 (let (($x722 ((_ is stack ) ?x408)))
 (let (($x723 (= c____ right-to-center)))
 (let (($x724 (and $x723 $x722)))
 (let (($x725 (= c____ right-to-left)))
 (let (($x726 (and $x725 $x722)))
 (let ((?x714 (rest ?x574)))
 (let (($x742 (= ?x712 ?x714)))
 (let (($x727 ((_ is stack ) ?x574)))
 (let (($x728 (= c____ center-to-right)))
 (let (($x729 (and $x728 $x727)))
 (let (($x730 (= c____ center-to-left)))
 (let (($x731 (and $x730 $x727)))
 (let ((?x363 (left s____)))
 (let ((?x572 (top ?x363)))
 (let ((?x713 (stack ?x572 ?x574)))
 (let (($x741 (= ?x712 ?x713)))
 (let (($x732 ((_ is stack ) ?x363)))
 (let (($x733 (= c____ left-to-right)))
 (let (($x734 (and $x733 $x732)))
 (let (($x764 (ite $x734 $x741 (ite $x731 $x742 (ite $x729 $x742 (ite $x726 $x750 (ite $x724 $x747 $x750)))))))
 (let (($x735 (= c____ left-to-center)))
 (let (($x736 (and $x735 $x732)))
 (ite $x736 $x750 $x764)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x492 (left s_____)))
 (let ((?x630 (left s______)))
 (let (($x890 (= ?x630 ?x492)))
 (let ((?x526 (right s_____)))
 (let ((?x857 (top ?x526)))
 (let ((?x858 (stack ?x857 ?x492)))
 (let (($x884 (= ?x630 ?x858)))
 (let (($x860 ((_ is stack ) ?x526)))
 (let (($x863 (= c_____ right-to-left)))
 (let (($x864 (and $x863 $x860)))
 (let ((?x712 (center s_____)))
 (let (($x865 ((_ is stack ) ?x712)))
 (let (($x866 (= c_____ center-to-right)))
 (let (($x867 (and $x866 $x865)))
 (let ((?x853 (top ?x712)))
 (let ((?x854 (stack ?x853 ?x492)))
 (let (($x881 (= ?x630 ?x854)))
 (let (($x868 (= c_____ center-to-left)))
 (let (($x869 (and $x868 $x865)))
 (let ((?x663 (rest ?x492)))
 (let (($x877 (= ?x630 ?x663)))
 (let (($x870 ((_ is stack ) ?x492)))
 (let (($x871 (= c_____ left-to-right)))
 (let (($x872 (and $x871 $x870)))
 (let (($x873 (= c_____ left-to-center)))
 (let (($x874 (and $x873 $x870)))
 (ite $x874 $x877 (ite $x872 $x877 (ite $x869 $x881 (ite $x867 $x890 (ite $x864 $x884 $x890))))))))))))))))))))))))))))))))
(assert
 (let ((?x526 (right s_____)))
 (let ((?x664 (right s______)))
 (let (($x886 (= ?x664 ?x526)))
 (let ((?x856 (rest ?x526)))
 (let (($x883 (= ?x664 ?x856)))
 (let (($x860 ((_ is stack ) ?x526)))
 (let (($x861 (= c_____ right-to-center)))
 (let (($x862 (and $x861 $x860)))
 (let (($x863 (= c_____ right-to-left)))
 (let (($x864 (and $x863 $x860)))
 (let ((?x712 (center s_____)))
 (let ((?x853 (top ?x712)))
 (let ((?x855 (stack ?x853 ?x526)))
 (let (($x882 (= ?x664 ?x855)))
 (let (($x865 ((_ is stack ) ?x712)))
 (let (($x866 (= c_____ center-to-right)))
 (let (($x867 (and $x866 $x865)))
 (let (($x868 (= c_____ center-to-left)))
 (let (($x869 (and $x868 $x865)))
 (let ((?x492 (left s_____)))
 (let (($x870 ((_ is stack ) ?x492)))
 (let (($x871 (= c_____ left-to-right)))
 (let (($x872 (and $x871 $x870)))
 (let (($x903 (ite $x872 $x886 (ite $x869 $x886 (ite $x867 $x882 (ite $x864 $x883 (ite $x862 $x883 $x886)))))))
 (let ((?x710 (top ?x492)))
 (let ((?x849 (stack ?x710 ?x526)))
 (let (($x878 (= ?x664 ?x849)))
 (let (($x873 (= c_____ left-to-center)))
 (let (($x874 (and $x873 $x870)))
 (ite $x874 $x878 $x903)))))))))))))))))))))))))))))))
(assert
 (let ((?x712 (center s_____)))
 (let ((?x850 (center s______)))
 (let (($x888 (= ?x850 ?x712)))
 (let ((?x526 (right s_____)))
 (let ((?x857 (top ?x526)))
 (let ((?x859 (stack ?x857 ?x712)))
 (let (($x885 (= ?x850 ?x859)))
 (let (($x860 ((_ is stack ) ?x526)))
 (let (($x861 (= c_____ right-to-center)))
 (let (($x862 (and $x861 $x860)))
 (let (($x863 (= c_____ right-to-left)))
 (let (($x864 (and $x863 $x860)))
 (let ((?x852 (rest ?x712)))
 (let (($x880 (= ?x850 ?x852)))
 (let (($x865 ((_ is stack ) ?x712)))
 (let (($x866 (= c_____ center-to-right)))
 (let (($x867 (and $x866 $x865)))
 (let (($x868 (= c_____ center-to-left)))
 (let (($x869 (and $x868 $x865)))
 (let ((?x492 (left s_____)))
 (let ((?x710 (top ?x492)))
 (let ((?x851 (stack ?x710 ?x712)))
 (let (($x879 (= ?x850 ?x851)))
 (let (($x870 ((_ is stack ) ?x492)))
 (let (($x871 (= c_____ left-to-right)))
 (let (($x872 (and $x871 $x870)))
 (let (($x902 (ite $x872 $x879 (ite $x869 $x880 (ite $x867 $x880 (ite $x864 $x888 (ite $x862 $x885 $x888)))))))
 (let (($x873 (= c_____ left-to-center)))
 (let (($x874 (and $x873 $x870)))
 (ite $x874 $x888 $x902)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x630 (left s______)))
 (let ((?x768 (left s_______)))
 (let (($x1028 (= ?x768 ?x630)))
 (let ((?x664 (right s______)))
 (let ((?x995 (top ?x664)))
 (let ((?x996 (stack ?x995 ?x630)))
 (let (($x1022 (= ?x768 ?x996)))
 (let (($x998 ((_ is stack ) ?x664)))
 (let (($x1001 (= c______ right-to-left)))
 (let (($x1002 (and $x1001 $x998)))
 (let ((?x850 (center s______)))
 (let (($x1003 ((_ is stack ) ?x850)))
 (let (($x1004 (= c______ center-to-right)))
 (let (($x1005 (and $x1004 $x1003)))
 (let ((?x991 (top ?x850)))
 (let ((?x992 (stack ?x991 ?x630)))
 (let (($x1019 (= ?x768 ?x992)))
 (let (($x1006 (= c______ center-to-left)))
 (let (($x1007 (and $x1006 $x1003)))
 (let ((?x801 (rest ?x630)))
 (let (($x1015 (= ?x768 ?x801)))
 (let (($x1008 ((_ is stack ) ?x630)))
 (let (($x1009 (= c______ left-to-right)))
 (let (($x1010 (and $x1009 $x1008)))
 (let (($x1011 (= c______ left-to-center)))
 (let (($x1012 (and $x1011 $x1008)))
 (ite $x1012 $x1015 (ite $x1010 $x1015 (ite $x1007 $x1019 (ite $x1005 $x1028 (ite $x1002 $x1022 $x1028))))))))))))))))))))))))))))))))
(assert
 (let ((?x664 (right s______)))
 (let ((?x802 (right s_______)))
 (let (($x1024 (= ?x802 ?x664)))
 (let ((?x994 (rest ?x664)))
 (let (($x1021 (= ?x802 ?x994)))
 (let (($x998 ((_ is stack ) ?x664)))
 (let (($x999 (= c______ right-to-center)))
 (let (($x1000 (and $x999 $x998)))
 (let (($x1001 (= c______ right-to-left)))
 (let (($x1002 (and $x1001 $x998)))
 (let ((?x850 (center s______)))
 (let ((?x991 (top ?x850)))
 (let ((?x993 (stack ?x991 ?x664)))
 (let (($x1020 (= ?x802 ?x993)))
 (let (($x1003 ((_ is stack ) ?x850)))
 (let (($x1004 (= c______ center-to-right)))
 (let (($x1005 (and $x1004 $x1003)))
 (let (($x1006 (= c______ center-to-left)))
 (let (($x1007 (and $x1006 $x1003)))
 (let ((?x630 (left s______)))
 (let (($x1008 ((_ is stack ) ?x630)))
 (let (($x1009 (= c______ left-to-right)))
 (let (($x1010 (and $x1009 $x1008)))
 (let (($x1041 (ite $x1010 $x1024 (ite $x1007 $x1024 (ite $x1005 $x1020 (ite $x1002 $x1021 (ite $x1000 $x1021 $x1024)))))))
 (let ((?x848 (top ?x630)))
 (let ((?x987 (stack ?x848 ?x664)))
 (let (($x1016 (= ?x802 ?x987)))
 (let (($x1011 (= c______ left-to-center)))
 (let (($x1012 (and $x1011 $x1008)))
 (ite $x1012 $x1016 $x1041)))))))))))))))))))))))))))))))
(assert
 (let ((?x850 (center s______)))
 (let ((?x988 (center s_______)))
 (let (($x1026 (= ?x988 ?x850)))
 (let ((?x664 (right s______)))
 (let ((?x995 (top ?x664)))
 (let ((?x997 (stack ?x995 ?x850)))
 (let (($x1023 (= ?x988 ?x997)))
 (let (($x998 ((_ is stack ) ?x664)))
 (let (($x999 (= c______ right-to-center)))
 (let (($x1000 (and $x999 $x998)))
 (let (($x1001 (= c______ right-to-left)))
 (let (($x1002 (and $x1001 $x998)))
 (let ((?x990 (rest ?x850)))
 (let (($x1018 (= ?x988 ?x990)))
 (let (($x1003 ((_ is stack ) ?x850)))
 (let (($x1004 (= c______ center-to-right)))
 (let (($x1005 (and $x1004 $x1003)))
 (let (($x1006 (= c______ center-to-left)))
 (let (($x1007 (and $x1006 $x1003)))
 (let ((?x630 (left s______)))
 (let ((?x848 (top ?x630)))
 (let ((?x989 (stack ?x848 ?x850)))
 (let (($x1017 (= ?x988 ?x989)))
 (let (($x1008 ((_ is stack ) ?x630)))
 (let (($x1009 (= c______ left-to-right)))
 (let (($x1010 (and $x1009 $x1008)))
 (let (($x1040 (ite $x1010 $x1017 (ite $x1007 $x1018 (ite $x1005 $x1018 (ite $x1002 $x1026 (ite $x1000 $x1023 $x1026)))))))
 (let (($x1011 (= c______ left-to-center)))
 (let (($x1012 (and $x1011 $x1008)))
 (ite $x1012 $x1026 $x1040)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x768 (left s_______)))
 (let ((?x906 (left s________)))
 (let (($x1166 (= ?x906 ?x768)))
 (let ((?x802 (right s_______)))
 (let ((?x1133 (top ?x802)))
 (let ((?x1134 (stack ?x1133 ?x768)))
 (let (($x1160 (= ?x906 ?x1134)))
 (let (($x1136 ((_ is stack ) ?x802)))
 (let (($x1139 (= c_______ right-to-left)))
 (let (($x1140 (and $x1139 $x1136)))
 (let ((?x988 (center s_______)))
 (let (($x1141 ((_ is stack ) ?x988)))
 (let (($x1142 (= c_______ center-to-right)))
 (let (($x1143 (and $x1142 $x1141)))
 (let ((?x1129 (top ?x988)))
 (let ((?x1130 (stack ?x1129 ?x768)))
 (let (($x1157 (= ?x906 ?x1130)))
 (let (($x1144 (= c_______ center-to-left)))
 (let (($x1145 (and $x1144 $x1141)))
 (let ((?x939 (rest ?x768)))
 (let (($x1153 (= ?x906 ?x939)))
 (let (($x1146 ((_ is stack ) ?x768)))
 (let (($x1147 (= c_______ left-to-right)))
 (let (($x1148 (and $x1147 $x1146)))
 (let (($x1149 (= c_______ left-to-center)))
 (let (($x1150 (and $x1149 $x1146)))
 (ite $x1150 $x1153 (ite $x1148 $x1153 (ite $x1145 $x1157 (ite $x1143 $x1166 (ite $x1140 $x1160 $x1166))))))))))))))))))))))))))))))))
(assert
 (let ((?x802 (right s_______)))
 (let ((?x940 (right s________)))
 (let (($x1162 (= ?x940 ?x802)))
 (let ((?x1132 (rest ?x802)))
 (let (($x1159 (= ?x940 ?x1132)))
 (let (($x1136 ((_ is stack ) ?x802)))
 (let (($x1137 (= c_______ right-to-center)))
 (let (($x1138 (and $x1137 $x1136)))
 (let (($x1139 (= c_______ right-to-left)))
 (let (($x1140 (and $x1139 $x1136)))
 (let ((?x988 (center s_______)))
 (let ((?x1129 (top ?x988)))
 (let ((?x1131 (stack ?x1129 ?x802)))
 (let (($x1158 (= ?x940 ?x1131)))
 (let (($x1141 ((_ is stack ) ?x988)))
 (let (($x1142 (= c_______ center-to-right)))
 (let (($x1143 (and $x1142 $x1141)))
 (let (($x1144 (= c_______ center-to-left)))
 (let (($x1145 (and $x1144 $x1141)))
 (let ((?x768 (left s_______)))
 (let (($x1146 ((_ is stack ) ?x768)))
 (let (($x1147 (= c_______ left-to-right)))
 (let (($x1148 (and $x1147 $x1146)))
 (let (($x1179 (ite $x1148 $x1162 (ite $x1145 $x1162 (ite $x1143 $x1158 (ite $x1140 $x1159 (ite $x1138 $x1159 $x1162)))))))
 (let ((?x986 (top ?x768)))
 (let ((?x1125 (stack ?x986 ?x802)))
 (let (($x1154 (= ?x940 ?x1125)))
 (let (($x1149 (= c_______ left-to-center)))
 (let (($x1150 (and $x1149 $x1146)))
 (ite $x1150 $x1154 $x1179)))))))))))))))))))))))))))))))
(assert
 (let ((?x988 (center s_______)))
 (let ((?x1126 (center s________)))
 (let (($x1164 (= ?x1126 ?x988)))
 (let ((?x802 (right s_______)))
 (let ((?x1133 (top ?x802)))
 (let ((?x1135 (stack ?x1133 ?x988)))
 (let (($x1161 (= ?x1126 ?x1135)))
 (let (($x1136 ((_ is stack ) ?x802)))
 (let (($x1137 (= c_______ right-to-center)))
 (let (($x1138 (and $x1137 $x1136)))
 (let (($x1139 (= c_______ right-to-left)))
 (let (($x1140 (and $x1139 $x1136)))
 (let ((?x1128 (rest ?x988)))
 (let (($x1156 (= ?x1126 ?x1128)))
 (let (($x1141 ((_ is stack ) ?x988)))
 (let (($x1142 (= c_______ center-to-right)))
 (let (($x1143 (and $x1142 $x1141)))
 (let (($x1144 (= c_______ center-to-left)))
 (let (($x1145 (and $x1144 $x1141)))
 (let ((?x768 (left s_______)))
 (let ((?x986 (top ?x768)))
 (let ((?x1127 (stack ?x986 ?x988)))
 (let (($x1155 (= ?x1126 ?x1127)))
 (let (($x1146 ((_ is stack ) ?x768)))
 (let (($x1147 (= c_______ left-to-right)))
 (let (($x1148 (and $x1147 $x1146)))
 (let (($x1178 (ite $x1148 $x1155 (ite $x1145 $x1156 (ite $x1143 $x1156 (ite $x1140 $x1164 (ite $x1138 $x1161 $x1164)))))))
 (let (($x1149 (= c_______ left-to-center)))
 (let (($x1150 (and $x1149 $x1146)))
 (ite $x1150 $x1164 $x1178)))))))))))))))))))))))))))))))
(assert
 (let ((?x89 (stack Y (stack K (stack E empty)))))
 (let ((?x940 (right s________)))
 (let (($x1182 (= ?x940 ?x89)))
 (let ((?x69 (stack Z (stack M (stack T (stack H (stack P (stack J empty))))))))
 (let ((?x75 (stack W (stack B (stack U (stack F (stack N (stack C ?x69))))))))
 (let ((?x81 (stack D (stack Q (stack O (stack S (stack R (stack L ?x75))))))))
 (let ((?x86 (stack A (stack I (stack X (stack V (stack G ?x81)))))))
 (let ((?x1126 (center s________)))
 (let (($x1213 (= ?x1126 ?x86)))
 (let ((?x906 (left s________)))
 (let (($x1214 (= ?x906 empty)))
 (let (($x1216 (not (and $x1214 $x1213 $x1182))))
 (not $x1216))))))))))))))
(check-sat)
(exit)
