(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G 0)) (((A) (B) (C) (D) (E) (F) (G))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x19 (stack E empty)))
 (let ((?x20 (stack F ?x19)))
 (let ((?x21 (stack C ?x20)))
 (let ((?x22 (stack G ?x21)))
 (let ((?x78 (left s_tmp_)))
 (= ?x78 ?x22)))))))
(assert
 (let ((?x23 (stack A empty)))
 (let ((?x24 (stack B ?x23)))
 (let ((?x25 (stack D ?x24)))
 (let ((?x81 (center s_tmp__)))
 (= ?x81 ?x25))))))
(assert
 (let ((?x84 (right s_tmp___)))
 (= ?x84 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x111 (left s_tmp__)))
 (= (left s_tmp___) ?x111)))
(assert
 (let ((?x81 (center s_tmp__)))
 (= (center s_tmp___) ?x81)))
(assert
 (let ((?x115 (center s_tmp_)))
 (= ?x115 (center s_tmp))))
(assert
 (let ((?x118 (right s_tmp_)))
 (= ?x118 (right s_tmp))))
(assert
 (let ((?x78 (left s_tmp_)))
 (let ((?x111 (left s_tmp__)))
 (= ?x111 ?x78))))
(assert
 (let ((?x118 (right s_tmp_)))
 (let ((?x122 (right s_tmp__)))
 (= ?x122 ?x118))))
(assert
 (= c__ c!1))
(assert
 (let ((?x55 (left s_)))
 (let ((?x199 (left s__)))
 (let (($x232 (= ?x199 ?x55)))
 (let ((?x58 (right s_)))
 (let (($x202 ((_ is stack ) ?x58)))
 (let (($x206 (and (= c_ right-to-left) $x202)))
 (let ((?x60 (center s_)))
 (let (($x207 ((_ is stack ) ?x60)))
 (let (($x208 (= c_ center-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x210 (= c_ center-to-left)))
 (let (($x211 (and $x210 $x207)))
 (let (($x241 (ite $x211 (= ?x199 (stack (top ?x60) ?x55)) (ite $x209 $x232 (ite $x206 (= ?x199 (stack (top ?x58) ?x55)) $x232)))))
 (let (($x219 (= ?x199 (rest ?x55))))
 (let (($x212 ((_ is stack ) ?x55)))
 (let (($x213 (= c_ left-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x215 (= c_ left-to-center)))
 (let (($x216 (and $x215 $x212)))
 (ite $x216 $x219 (ite $x214 $x219 $x241))))))))))))))))))))))
(assert
 (let ((?x58 (right s_)))
 (let ((?x195 (right s__)))
 (let (($x228 (= ?x195 ?x58)))
 (let (($x225 (= ?x195 (rest ?x58))))
 (let (($x202 ((_ is stack ) ?x58)))
 (let (($x204 (and (= c_ right-to-center) $x202)))
 (let (($x206 (and (= c_ right-to-left) $x202)))
 (let ((?x60 (center s_)))
 (let (($x207 ((_ is stack ) ?x60)))
 (let (($x208 (= c_ center-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x238 (ite $x209 (= ?x195 (stack (top ?x60) ?x58)) (ite $x206 $x225 (ite $x204 $x225 $x228)))))
 (let (($x210 (= c_ center-to-left)))
 (let (($x211 (and $x210 $x207)))
 (let ((?x55 (left s_)))
 (let (($x212 ((_ is stack ) ?x55)))
 (let (($x213 (= c_ left-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x215 (= c_ left-to-center)))
 (let (($x216 (and $x215 $x212)))
 (ite $x216 (= ?x195 (stack (top ?x55) ?x58)) (ite $x214 $x228 (ite $x211 $x228 $x238))))))))))))))))))))))))
(assert
 (let ((?x60 (center s_)))
 (let ((?x189 (center s__)))
 (let (($x230 (= ?x189 ?x60)))
 (let ((?x58 (right s_)))
 (let (($x202 ((_ is stack ) ?x58)))
 (let (($x204 (and (= c_ right-to-center) $x202)))
 (let (($x206 (and (= c_ right-to-left) $x202)))
 (let (($x222 (= ?x189 (rest ?x60))))
 (let (($x207 ((_ is stack ) ?x60)))
 (let (($x208 (= c_ center-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x237 (ite $x209 $x222 (ite $x206 $x230 (ite $x204 (= ?x189 (stack (top ?x58) ?x60)) $x230)))))
 (let (($x210 (= c_ center-to-left)))
 (let (($x211 (and $x210 $x207)))
 (let ((?x55 (left s_)))
 (let (($x212 ((_ is stack ) ?x55)))
 (let (($x213 (= c_ left-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x215 (= c_ left-to-center)))
 (let (($x216 (and $x215 $x212)))
 (ite $x216 $x230 (ite $x214 (= ?x189 (stack (top ?x55) ?x60)) (ite $x211 $x222 $x237))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x199 (left s__)))
 (let ((?x125 (left s___)))
 (let (($x342 (= ?x125 ?x199)))
 (let ((?x195 (right s__)))
 (let ((?x309 (top ?x195)))
 (let ((?x310 (stack ?x309 ?x199)))
 (let (($x336 (= ?x125 ?x310)))
 (let (($x312 ((_ is stack ) ?x195)))
 (let (($x315 (= c__ right-to-left)))
 (let (($x316 (and $x315 $x312)))
 (let ((?x189 (center s__)))
 (let (($x317 ((_ is stack ) ?x189)))
 (let (($x318 (= c__ center-to-right)))
 (let (($x319 (and $x318 $x317)))
 (let ((?x305 (top ?x189)))
 (let ((?x306 (stack ?x305 ?x199)))
 (let (($x333 (= ?x125 ?x306)))
 (let (($x320 (= c__ center-to-left)))
 (let (($x321 (and $x320 $x317)))
 (let ((?x127 (rest ?x199)))
 (let (($x329 (= ?x125 ?x127)))
 (let (($x322 ((_ is stack ) ?x199)))
 (let (($x323 (= c__ left-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x325 (= c__ left-to-center)))
 (let (($x326 (and $x325 $x322)))
 (ite $x326 $x329 (ite $x324 $x329 (ite $x321 $x333 (ite $x319 $x342 (ite $x316 $x336 $x342))))))))))))))))))))))))))))))))
(assert
 (let ((?x195 (right s__)))
 (let ((?x128 (right s___)))
 (let (($x338 (= ?x128 ?x195)))
 (let ((?x308 (rest ?x195)))
 (let (($x335 (= ?x128 ?x308)))
 (let (($x312 ((_ is stack ) ?x195)))
 (let (($x313 (= c__ right-to-center)))
 (let (($x314 (and $x313 $x312)))
 (let (($x315 (= c__ right-to-left)))
 (let (($x316 (and $x315 $x312)))
 (let ((?x189 (center s__)))
 (let ((?x305 (top ?x189)))
 (let ((?x307 (stack ?x305 ?x195)))
 (let (($x334 (= ?x128 ?x307)))
 (let (($x317 ((_ is stack ) ?x189)))
 (let (($x318 (= c__ center-to-right)))
 (let (($x319 (and $x318 $x317)))
 (let (($x320 (= c__ center-to-left)))
 (let (($x321 (and $x320 $x317)))
 (let ((?x199 (left s__)))
 (let (($x322 ((_ is stack ) ?x199)))
 (let (($x323 (= c__ left-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x355 (ite $x324 $x338 (ite $x321 $x338 (ite $x319 $x334 (ite $x316 $x335 (ite $x314 $x335 $x338)))))))
 (let ((?x184 (top ?x199)))
 (let ((?x301 (stack ?x184 ?x195)))
 (let (($x330 (= ?x128 ?x301)))
 (let (($x325 (= c__ left-to-center)))
 (let (($x326 (and $x325 $x322)))
 (ite $x326 $x330 $x355)))))))))))))))))))))))))))))))
(assert
 (let ((?x189 (center s__)))
 (let ((?x302 (center s___)))
 (let (($x340 (= ?x302 ?x189)))
 (let ((?x195 (right s__)))
 (let ((?x309 (top ?x195)))
 (let ((?x311 (stack ?x309 ?x189)))
 (let (($x337 (= ?x302 ?x311)))
 (let (($x312 ((_ is stack ) ?x195)))
 (let (($x313 (= c__ right-to-center)))
 (let (($x314 (and $x313 $x312)))
 (let (($x315 (= c__ right-to-left)))
 (let (($x316 (and $x315 $x312)))
 (let ((?x304 (rest ?x189)))
 (let (($x332 (= ?x302 ?x304)))
 (let (($x317 ((_ is stack ) ?x189)))
 (let (($x318 (= c__ center-to-right)))
 (let (($x319 (and $x318 $x317)))
 (let (($x320 (= c__ center-to-left)))
 (let (($x321 (and $x320 $x317)))
 (let ((?x199 (left s__)))
 (let ((?x184 (top ?x199)))
 (let ((?x303 (stack ?x184 ?x189)))
 (let (($x331 (= ?x302 ?x303)))
 (let (($x322 ((_ is stack ) ?x199)))
 (let (($x323 (= c__ left-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x354 (ite $x324 $x331 (ite $x321 $x332 (ite $x319 $x332 (ite $x316 $x340 (ite $x314 $x337 $x340)))))))
 (let (($x325 (= c__ left-to-center)))
 (let (($x326 (and $x325 $x322)))
 (ite $x326 $x340 $x354)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x125 (left s___)))
 (let ((?x248 (left s____)))
 (let (($x480 (= ?x248 ?x125)))
 (let ((?x128 (right s___)))
 (let ((?x447 (top ?x128)))
 (let ((?x448 (stack ?x447 ?x125)))
 (let (($x474 (= ?x248 ?x448)))
 (let (($x450 ((_ is stack ) ?x128)))
 (let (($x453 (= c___ right-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x302 (center s___)))
 (let (($x455 ((_ is stack ) ?x302)))
 (let (($x456 (= c___ center-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let ((?x443 (top ?x302)))
 (let ((?x444 (stack ?x443 ?x125)))
 (let (($x471 (= ?x248 ?x444)))
 (let (($x458 (= c___ center-to-left)))
 (let (($x459 (and $x458 $x455)))
 (let ((?x278 (rest ?x125)))
 (let (($x467 (= ?x248 ?x278)))
 (let (($x460 ((_ is stack ) ?x125)))
 (let (($x461 (= c___ left-to-right)))
 (let (($x462 (and $x461 $x460)))
 (let (($x463 (= c___ left-to-center)))
 (let (($x464 (and $x463 $x460)))
 (ite $x464 $x467 (ite $x462 $x467 (ite $x459 $x471 (ite $x457 $x480 (ite $x454 $x474 $x480))))))))))))))))))))))))))))))))
(assert
 (let ((?x128 (right s___)))
 (let ((?x279 (right s____)))
 (let (($x476 (= ?x279 ?x128)))
 (let ((?x446 (rest ?x128)))
 (let (($x473 (= ?x279 ?x446)))
 (let (($x450 ((_ is stack ) ?x128)))
 (let (($x451 (= c___ right-to-center)))
 (let (($x452 (and $x451 $x450)))
 (let (($x453 (= c___ right-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x302 (center s___)))
 (let ((?x443 (top ?x302)))
 (let ((?x445 (stack ?x443 ?x128)))
 (let (($x472 (= ?x279 ?x445)))
 (let (($x455 ((_ is stack ) ?x302)))
 (let (($x456 (= c___ center-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let (($x458 (= c___ center-to-left)))
 (let (($x459 (and $x458 $x455)))
 (let ((?x125 (left s___)))
 (let (($x460 ((_ is stack ) ?x125)))
 (let (($x461 (= c___ left-to-right)))
 (let (($x462 (and $x461 $x460)))
 (let (($x493 (ite $x462 $x476 (ite $x459 $x476 (ite $x457 $x472 (ite $x454 $x473 (ite $x452 $x473 $x476)))))))
 (let ((?x300 (top ?x125)))
 (let ((?x439 (stack ?x300 ?x128)))
 (let (($x468 (= ?x279 ?x439)))
 (let (($x463 (= c___ left-to-center)))
 (let (($x464 (and $x463 $x460)))
 (ite $x464 $x468 $x493)))))))))))))))))))))))))))))))
(assert
 (let ((?x302 (center s___)))
 (let ((?x440 (center s____)))
 (let (($x478 (= ?x440 ?x302)))
 (let ((?x128 (right s___)))
 (let ((?x447 (top ?x128)))
 (let ((?x449 (stack ?x447 ?x302)))
 (let (($x475 (= ?x440 ?x449)))
 (let (($x450 ((_ is stack ) ?x128)))
 (let (($x451 (= c___ right-to-center)))
 (let (($x452 (and $x451 $x450)))
 (let (($x453 (= c___ right-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x442 (rest ?x302)))
 (let (($x470 (= ?x440 ?x442)))
 (let (($x455 ((_ is stack ) ?x302)))
 (let (($x456 (= c___ center-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let (($x458 (= c___ center-to-left)))
 (let (($x459 (and $x458 $x455)))
 (let ((?x125 (left s___)))
 (let ((?x300 (top ?x125)))
 (let ((?x441 (stack ?x300 ?x302)))
 (let (($x469 (= ?x440 ?x441)))
 (let (($x460 ((_ is stack ) ?x125)))
 (let (($x461 (= c___ left-to-right)))
 (let (($x462 (and $x461 $x460)))
 (let (($x492 (ite $x462 $x469 (ite $x459 $x470 (ite $x457 $x470 (ite $x454 $x478 (ite $x452 $x475 $x478)))))))
 (let (($x463 (= c___ left-to-center)))
 (let (($x464 (and $x463 $x460)))
 (ite $x464 $x478 $x492)))))))))))))))))))))))))))))))
(assert
 (let ((?x23 (stack A empty)))
 (let ((?x279 (right s____)))
 (let (($x496 (= ?x279 ?x23)))
 (let ((?x31 (stack B empty)))
 (let ((?x440 (center s____)))
 (let (($x527 (= ?x440 ?x31)))
 (let ((?x30 (stack F (stack C (stack G (stack E (stack D empty)))))))
 (let ((?x248 (left s____)))
 (let (($x528 (= ?x248 ?x30)))
 (let (($x530 (not (and $x528 $x527 $x496))))
 (not $x530))))))))))))
(check-sat)
(exit)
