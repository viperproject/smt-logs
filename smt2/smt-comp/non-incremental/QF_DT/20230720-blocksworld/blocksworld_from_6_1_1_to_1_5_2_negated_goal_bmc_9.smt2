(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H 0)) (((A) (B) (C) (D) (E) (F) (G) (H))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(declare-fun c!8 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_________ () Record_left_center_right)
(declare-fun c!9 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x21 (stack H empty)))
 (let ((?x20 (stack E ?x21)))
 (let ((?x22 (stack D ?x20)))
 (let ((?x23 (stack A ?x22)))
 (let ((?x24 (stack G ?x23)))
 (let ((?x25 (stack B ?x24)))
 (let ((?x81 (left s_tmp_)))
 (= ?x81 ?x25)))))))))
(assert
 (let ((?x26 (stack C empty)))
 (let ((?x84 (center s_tmp__)))
 (= ?x84 ?x26))))
(assert
 (let ((?x27 (stack F empty)))
 (let ((?x87 (right s_tmp___)))
 (= ?x87 ?x27))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x114 (left s_tmp__)))
 (= (left s_tmp___) ?x114)))
(assert
 (let ((?x84 (center s_tmp__)))
 (= (center s_tmp___) ?x84)))
(assert
 (let ((?x118 (center s_tmp_)))
 (= ?x118 (center s_tmp))))
(assert
 (let ((?x121 (right s_tmp_)))
 (= ?x121 (right s_tmp))))
(assert
 (let ((?x81 (left s_tmp_)))
 (let ((?x114 (left s_tmp__)))
 (= ?x114 ?x81))))
(assert
 (let ((?x121 (right s_tmp_)))
 (let ((?x125 (right s_tmp__)))
 (= ?x125 ?x121))))
(assert
 (= c__ c!1))
(assert
 (let ((?x58 (left s_)))
 (let ((?x193 (left s__)))
 (let (($x238 (= ?x193 ?x58)))
 (let ((?x61 (right s_)))
 (let (($x208 ((_ is stack ) ?x61)))
 (let (($x211 (= c_ right-to-left)))
 (let (($x212 (and $x211 $x208)))
 (let ((?x63 (center s_)))
 (let (($x213 ((_ is stack ) ?x63)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x215 (and $x214 $x213)))
 (let (($x216 (= c_ center-to-left)))
 (let (($x217 (and $x216 $x213)))
 (let (($x247 (ite $x217 (= ?x193 (stack (top ?x63) ?x58)) (ite $x215 $x238 (ite $x212 (= ?x193 (stack (top ?x61) ?x58)) $x238)))))
 (let (($x225 (= ?x193 (rest ?x58))))
 (let (($x218 ((_ is stack ) ?x58)))
 (let (($x219 (= c_ left-to-right)))
 (let (($x220 (and $x219 $x218)))
 (let (($x221 (= c_ left-to-center)))
 (let (($x222 (and $x221 $x218)))
 (ite $x222 $x225 (ite $x220 $x225 $x247)))))))))))))))))))))))
(assert
 (let ((?x61 (right s_)))
 (let ((?x195 (right s__)))
 (let (($x234 (= ?x195 ?x61)))
 (let (($x231 (= ?x195 (rest ?x61))))
 (let (($x208 ((_ is stack ) ?x61)))
 (let (($x209 (= c_ right-to-center)))
 (let (($x210 (and $x209 $x208)))
 (let (($x211 (= c_ right-to-left)))
 (let (($x212 (and $x211 $x208)))
 (let ((?x63 (center s_)))
 (let (($x213 ((_ is stack ) ?x63)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x215 (and $x214 $x213)))
 (let (($x244 (ite $x215 (= ?x195 (stack (top ?x63) ?x61)) (ite $x212 $x231 (ite $x210 $x231 $x234)))))
 (let (($x216 (= c_ center-to-left)))
 (let (($x217 (and $x216 $x213)))
 (let ((?x58 (left s_)))
 (let (($x218 ((_ is stack ) ?x58)))
 (let (($x219 (= c_ left-to-right)))
 (let (($x220 (and $x219 $x218)))
 (let (($x221 (= c_ left-to-center)))
 (let (($x222 (and $x221 $x218)))
 (ite $x222 (= ?x195 (stack (top ?x58) ?x61)) (ite $x220 $x234 (ite $x217 $x234 $x244))))))))))))))))))))))))))
(assert
 (let ((?x63 (center s_)))
 (let ((?x198 (center s__)))
 (let (($x236 (= ?x198 ?x63)))
 (let ((?x61 (right s_)))
 (let (($x208 ((_ is stack ) ?x61)))
 (let (($x209 (= c_ right-to-center)))
 (let (($x210 (and $x209 $x208)))
 (let (($x211 (= c_ right-to-left)))
 (let (($x212 (and $x211 $x208)))
 (let (($x228 (= ?x198 (rest ?x63))))
 (let (($x213 ((_ is stack ) ?x63)))
 (let (($x214 (= c_ center-to-right)))
 (let (($x215 (and $x214 $x213)))
 (let (($x243 (ite $x215 $x228 (ite $x212 $x236 (ite $x210 (= ?x198 (stack (top ?x61) ?x63)) $x236)))))
 (let (($x216 (= c_ center-to-left)))
 (let (($x217 (and $x216 $x213)))
 (let ((?x58 (left s_)))
 (let (($x218 ((_ is stack ) ?x58)))
 (let (($x219 (= c_ left-to-right)))
 (let (($x220 (and $x219 $x218)))
 (let (($x221 (= c_ left-to-center)))
 (let (($x222 (and $x221 $x218)))
 (ite $x222 $x236 (ite $x220 (= ?x198 (stack (top ?x58) ?x63)) (ite $x217 $x228 $x243))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x193 (left s__)))
 (let ((?x128 (left s___)))
 (let (($x367 (= ?x128 ?x193)))
 (let ((?x195 (right s__)))
 (let ((?x334 (top ?x195)))
 (let ((?x335 (stack ?x334 ?x193)))
 (let (($x361 (= ?x128 ?x335)))
 (let (($x337 ((_ is stack ) ?x195)))
 (let (($x340 (= c__ right-to-left)))
 (let (($x341 (and $x340 $x337)))
 (let ((?x198 (center s__)))
 (let (($x342 ((_ is stack ) ?x198)))
 (let (($x343 (= c__ center-to-right)))
 (let (($x344 (and $x343 $x342)))
 (let ((?x330 (top ?x198)))
 (let ((?x331 (stack ?x330 ?x193)))
 (let (($x358 (= ?x128 ?x331)))
 (let (($x345 (= c__ center-to-left)))
 (let (($x346 (and $x345 $x342)))
 (let ((?x130 (rest ?x193)))
 (let (($x354 (= ?x128 ?x130)))
 (let (($x347 ((_ is stack ) ?x193)))
 (let (($x348 (= c__ left-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let (($x350 (= c__ left-to-center)))
 (let (($x351 (and $x350 $x347)))
 (ite $x351 $x354 (ite $x349 $x354 (ite $x346 $x358 (ite $x344 $x367 (ite $x341 $x361 $x367))))))))))))))))))))))))))))))))
(assert
 (let ((?x195 (right s__)))
 (let ((?x131 (right s___)))
 (let (($x363 (= ?x131 ?x195)))
 (let ((?x333 (rest ?x195)))
 (let (($x360 (= ?x131 ?x333)))
 (let (($x337 ((_ is stack ) ?x195)))
 (let (($x338 (= c__ right-to-center)))
 (let (($x339 (and $x338 $x337)))
 (let (($x340 (= c__ right-to-left)))
 (let (($x341 (and $x340 $x337)))
 (let ((?x198 (center s__)))
 (let ((?x330 (top ?x198)))
 (let ((?x332 (stack ?x330 ?x195)))
 (let (($x359 (= ?x131 ?x332)))
 (let (($x342 ((_ is stack ) ?x198)))
 (let (($x343 (= c__ center-to-right)))
 (let (($x344 (and $x343 $x342)))
 (let (($x345 (= c__ center-to-left)))
 (let (($x346 (and $x345 $x342)))
 (let ((?x193 (left s__)))
 (let (($x347 ((_ is stack ) ?x193)))
 (let (($x348 (= c__ left-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let (($x380 (ite $x349 $x363 (ite $x346 $x363 (ite $x344 $x359 (ite $x341 $x360 (ite $x339 $x360 $x363)))))))
 (let ((?x190 (top ?x193)))
 (let ((?x326 (stack ?x190 ?x195)))
 (let (($x355 (= ?x131 ?x326)))
 (let (($x350 (= c__ left-to-center)))
 (let (($x351 (and $x350 $x347)))
 (ite $x351 $x355 $x380)))))))))))))))))))))))))))))))
(assert
 (let ((?x198 (center s__)))
 (let ((?x327 (center s___)))
 (let (($x365 (= ?x327 ?x198)))
 (let ((?x195 (right s__)))
 (let ((?x334 (top ?x195)))
 (let ((?x336 (stack ?x334 ?x198)))
 (let (($x362 (= ?x327 ?x336)))
 (let (($x337 ((_ is stack ) ?x195)))
 (let (($x338 (= c__ right-to-center)))
 (let (($x339 (and $x338 $x337)))
 (let (($x340 (= c__ right-to-left)))
 (let (($x341 (and $x340 $x337)))
 (let ((?x329 (rest ?x198)))
 (let (($x357 (= ?x327 ?x329)))
 (let (($x342 ((_ is stack ) ?x198)))
 (let (($x343 (= c__ center-to-right)))
 (let (($x344 (and $x343 $x342)))
 (let (($x345 (= c__ center-to-left)))
 (let (($x346 (and $x345 $x342)))
 (let ((?x193 (left s__)))
 (let ((?x190 (top ?x193)))
 (let ((?x328 (stack ?x190 ?x198)))
 (let (($x356 (= ?x327 ?x328)))
 (let (($x347 ((_ is stack ) ?x193)))
 (let (($x348 (= c__ left-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let (($x379 (ite $x349 $x356 (ite $x346 $x357 (ite $x344 $x357 (ite $x341 $x365 (ite $x339 $x362 $x365)))))))
 (let (($x350 (= c__ left-to-center)))
 (let (($x351 (and $x350 $x347)))
 (ite $x351 $x365 $x379)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x128 (left s___)))
 (let ((?x254 (left s____)))
 (let (($x505 (= ?x254 ?x128)))
 (let ((?x131 (right s___)))
 (let ((?x472 (top ?x131)))
 (let ((?x473 (stack ?x472 ?x128)))
 (let (($x499 (= ?x254 ?x473)))
 (let (($x475 ((_ is stack ) ?x131)))
 (let (($x478 (= c___ right-to-left)))
 (let (($x479 (and $x478 $x475)))
 (let ((?x327 (center s___)))
 (let (($x480 ((_ is stack ) ?x327)))
 (let (($x481 (= c___ center-to-right)))
 (let (($x482 (and $x481 $x480)))
 (let ((?x468 (top ?x327)))
 (let ((?x469 (stack ?x468 ?x128)))
 (let (($x496 (= ?x254 ?x469)))
 (let (($x483 (= c___ center-to-left)))
 (let (($x484 (and $x483 $x480)))
 (let ((?x298 (rest ?x128)))
 (let (($x492 (= ?x254 ?x298)))
 (let (($x485 ((_ is stack ) ?x128)))
 (let (($x486 (= c___ left-to-right)))
 (let (($x487 (and $x486 $x485)))
 (let (($x488 (= c___ left-to-center)))
 (let (($x489 (and $x488 $x485)))
 (ite $x489 $x492 (ite $x487 $x492 (ite $x484 $x496 (ite $x482 $x505 (ite $x479 $x499 $x505))))))))))))))))))))))))))))))))
(assert
 (let ((?x131 (right s___)))
 (let ((?x299 (right s____)))
 (let (($x501 (= ?x299 ?x131)))
 (let ((?x471 (rest ?x131)))
 (let (($x498 (= ?x299 ?x471)))
 (let (($x475 ((_ is stack ) ?x131)))
 (let (($x476 (= c___ right-to-center)))
 (let (($x477 (and $x476 $x475)))
 (let (($x478 (= c___ right-to-left)))
 (let (($x479 (and $x478 $x475)))
 (let ((?x327 (center s___)))
 (let ((?x468 (top ?x327)))
 (let ((?x470 (stack ?x468 ?x131)))
 (let (($x497 (= ?x299 ?x470)))
 (let (($x480 ((_ is stack ) ?x327)))
 (let (($x481 (= c___ center-to-right)))
 (let (($x482 (and $x481 $x480)))
 (let (($x483 (= c___ center-to-left)))
 (let (($x484 (and $x483 $x480)))
 (let ((?x128 (left s___)))
 (let (($x485 ((_ is stack ) ?x128)))
 (let (($x486 (= c___ left-to-right)))
 (let (($x487 (and $x486 $x485)))
 (let (($x518 (ite $x487 $x501 (ite $x484 $x501 (ite $x482 $x497 (ite $x479 $x498 (ite $x477 $x498 $x501)))))))
 (let ((?x325 (top ?x128)))
 (let ((?x464 (stack ?x325 ?x131)))
 (let (($x493 (= ?x299 ?x464)))
 (let (($x488 (= c___ left-to-center)))
 (let (($x489 (and $x488 $x485)))
 (ite $x489 $x493 $x518)))))))))))))))))))))))))))))))
(assert
 (let ((?x327 (center s___)))
 (let ((?x465 (center s____)))
 (let (($x503 (= ?x465 ?x327)))
 (let ((?x131 (right s___)))
 (let ((?x472 (top ?x131)))
 (let ((?x474 (stack ?x472 ?x327)))
 (let (($x500 (= ?x465 ?x474)))
 (let (($x475 ((_ is stack ) ?x131)))
 (let (($x476 (= c___ right-to-center)))
 (let (($x477 (and $x476 $x475)))
 (let (($x478 (= c___ right-to-left)))
 (let (($x479 (and $x478 $x475)))
 (let ((?x467 (rest ?x327)))
 (let (($x495 (= ?x465 ?x467)))
 (let (($x480 ((_ is stack ) ?x327)))
 (let (($x481 (= c___ center-to-right)))
 (let (($x482 (and $x481 $x480)))
 (let (($x483 (= c___ center-to-left)))
 (let (($x484 (and $x483 $x480)))
 (let ((?x128 (left s___)))
 (let ((?x325 (top ?x128)))
 (let ((?x466 (stack ?x325 ?x327)))
 (let (($x494 (= ?x465 ?x466)))
 (let (($x485 ((_ is stack ) ?x128)))
 (let (($x486 (= c___ left-to-right)))
 (let (($x487 (and $x486 $x485)))
 (let (($x517 (ite $x487 $x494 (ite $x484 $x495 (ite $x482 $x495 (ite $x479 $x503 (ite $x477 $x500 $x503)))))))
 (let (($x488 (= c___ left-to-center)))
 (let (($x489 (and $x488 $x485)))
 (ite $x489 $x503 $x517)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x254 (left s____)))
 (let ((?x383 (left s_____)))
 (let (($x643 (= ?x383 ?x254)))
 (let ((?x299 (right s____)))
 (let ((?x610 (top ?x299)))
 (let ((?x611 (stack ?x610 ?x254)))
 (let (($x637 (= ?x383 ?x611)))
 (let (($x613 ((_ is stack ) ?x299)))
 (let (($x616 (= c____ right-to-left)))
 (let (($x617 (and $x616 $x613)))
 (let ((?x465 (center s____)))
 (let (($x618 ((_ is stack ) ?x465)))
 (let (($x619 (= c____ center-to-right)))
 (let (($x620 (and $x619 $x618)))
 (let ((?x606 (top ?x465)))
 (let ((?x607 (stack ?x606 ?x254)))
 (let (($x634 (= ?x383 ?x607)))
 (let (($x621 (= c____ center-to-left)))
 (let (($x622 (and $x621 $x618)))
 (let ((?x416 (rest ?x254)))
 (let (($x630 (= ?x383 ?x416)))
 (let (($x623 ((_ is stack ) ?x254)))
 (let (($x624 (= c____ left-to-right)))
 (let (($x625 (and $x624 $x623)))
 (let (($x626 (= c____ left-to-center)))
 (let (($x627 (and $x626 $x623)))
 (ite $x627 $x630 (ite $x625 $x630 (ite $x622 $x634 (ite $x620 $x643 (ite $x617 $x637 $x643))))))))))))))))))))))))))))))))
(assert
 (let ((?x299 (right s____)))
 (let ((?x417 (right s_____)))
 (let (($x639 (= ?x417 ?x299)))
 (let ((?x609 (rest ?x299)))
 (let (($x636 (= ?x417 ?x609)))
 (let (($x613 ((_ is stack ) ?x299)))
 (let (($x614 (= c____ right-to-center)))
 (let (($x615 (and $x614 $x613)))
 (let (($x616 (= c____ right-to-left)))
 (let (($x617 (and $x616 $x613)))
 (let ((?x465 (center s____)))
 (let ((?x606 (top ?x465)))
 (let ((?x608 (stack ?x606 ?x299)))
 (let (($x635 (= ?x417 ?x608)))
 (let (($x618 ((_ is stack ) ?x465)))
 (let (($x619 (= c____ center-to-right)))
 (let (($x620 (and $x619 $x618)))
 (let (($x621 (= c____ center-to-left)))
 (let (($x622 (and $x621 $x618)))
 (let ((?x254 (left s____)))
 (let (($x623 ((_ is stack ) ?x254)))
 (let (($x624 (= c____ left-to-right)))
 (let (($x625 (and $x624 $x623)))
 (let (($x656 (ite $x625 $x639 (ite $x622 $x639 (ite $x620 $x635 (ite $x617 $x636 (ite $x615 $x636 $x639)))))))
 (let ((?x463 (top ?x254)))
 (let ((?x602 (stack ?x463 ?x299)))
 (let (($x631 (= ?x417 ?x602)))
 (let (($x626 (= c____ left-to-center)))
 (let (($x627 (and $x626 $x623)))
 (ite $x627 $x631 $x656)))))))))))))))))))))))))))))))
(assert
 (let ((?x465 (center s____)))
 (let ((?x603 (center s_____)))
 (let (($x641 (= ?x603 ?x465)))
 (let ((?x299 (right s____)))
 (let ((?x610 (top ?x299)))
 (let ((?x612 (stack ?x610 ?x465)))
 (let (($x638 (= ?x603 ?x612)))
 (let (($x613 ((_ is stack ) ?x299)))
 (let (($x614 (= c____ right-to-center)))
 (let (($x615 (and $x614 $x613)))
 (let (($x616 (= c____ right-to-left)))
 (let (($x617 (and $x616 $x613)))
 (let ((?x605 (rest ?x465)))
 (let (($x633 (= ?x603 ?x605)))
 (let (($x618 ((_ is stack ) ?x465)))
 (let (($x619 (= c____ center-to-right)))
 (let (($x620 (and $x619 $x618)))
 (let (($x621 (= c____ center-to-left)))
 (let (($x622 (and $x621 $x618)))
 (let ((?x254 (left s____)))
 (let ((?x463 (top ?x254)))
 (let ((?x604 (stack ?x463 ?x465)))
 (let (($x632 (= ?x603 ?x604)))
 (let (($x623 ((_ is stack ) ?x254)))
 (let (($x624 (= c____ left-to-right)))
 (let (($x625 (and $x624 $x623)))
 (let (($x655 (ite $x625 $x632 (ite $x622 $x633 (ite $x620 $x633 (ite $x617 $x641 (ite $x615 $x638 $x641)))))))
 (let (($x626 (= c____ left-to-center)))
 (let (($x627 (and $x626 $x623)))
 (ite $x627 $x641 $x655)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x383 (left s_____)))
 (let ((?x521 (left s______)))
 (let (($x781 (= ?x521 ?x383)))
 (let ((?x417 (right s_____)))
 (let ((?x748 (top ?x417)))
 (let ((?x749 (stack ?x748 ?x383)))
 (let (($x775 (= ?x521 ?x749)))
 (let (($x751 ((_ is stack ) ?x417)))
 (let (($x754 (= c_____ right-to-left)))
 (let (($x755 (and $x754 $x751)))
 (let ((?x603 (center s_____)))
 (let (($x756 ((_ is stack ) ?x603)))
 (let (($x757 (= c_____ center-to-right)))
 (let (($x758 (and $x757 $x756)))
 (let ((?x744 (top ?x603)))
 (let ((?x745 (stack ?x744 ?x383)))
 (let (($x772 (= ?x521 ?x745)))
 (let (($x759 (= c_____ center-to-left)))
 (let (($x760 (and $x759 $x756)))
 (let ((?x554 (rest ?x383)))
 (let (($x768 (= ?x521 ?x554)))
 (let (($x761 ((_ is stack ) ?x383)))
 (let (($x762 (= c_____ left-to-right)))
 (let (($x763 (and $x762 $x761)))
 (let (($x764 (= c_____ left-to-center)))
 (let (($x765 (and $x764 $x761)))
 (ite $x765 $x768 (ite $x763 $x768 (ite $x760 $x772 (ite $x758 $x781 (ite $x755 $x775 $x781))))))))))))))))))))))))))))))))
(assert
 (let ((?x417 (right s_____)))
 (let ((?x555 (right s______)))
 (let (($x777 (= ?x555 ?x417)))
 (let ((?x747 (rest ?x417)))
 (let (($x774 (= ?x555 ?x747)))
 (let (($x751 ((_ is stack ) ?x417)))
 (let (($x752 (= c_____ right-to-center)))
 (let (($x753 (and $x752 $x751)))
 (let (($x754 (= c_____ right-to-left)))
 (let (($x755 (and $x754 $x751)))
 (let ((?x603 (center s_____)))
 (let ((?x744 (top ?x603)))
 (let ((?x746 (stack ?x744 ?x417)))
 (let (($x773 (= ?x555 ?x746)))
 (let (($x756 ((_ is stack ) ?x603)))
 (let (($x757 (= c_____ center-to-right)))
 (let (($x758 (and $x757 $x756)))
 (let (($x759 (= c_____ center-to-left)))
 (let (($x760 (and $x759 $x756)))
 (let ((?x383 (left s_____)))
 (let (($x761 ((_ is stack ) ?x383)))
 (let (($x762 (= c_____ left-to-right)))
 (let (($x763 (and $x762 $x761)))
 (let (($x794 (ite $x763 $x777 (ite $x760 $x777 (ite $x758 $x773 (ite $x755 $x774 (ite $x753 $x774 $x777)))))))
 (let ((?x601 (top ?x383)))
 (let ((?x740 (stack ?x601 ?x417)))
 (let (($x769 (= ?x555 ?x740)))
 (let (($x764 (= c_____ left-to-center)))
 (let (($x765 (and $x764 $x761)))
 (ite $x765 $x769 $x794)))))))))))))))))))))))))))))))
(assert
 (let ((?x603 (center s_____)))
 (let ((?x741 (center s______)))
 (let (($x779 (= ?x741 ?x603)))
 (let ((?x417 (right s_____)))
 (let ((?x748 (top ?x417)))
 (let ((?x750 (stack ?x748 ?x603)))
 (let (($x776 (= ?x741 ?x750)))
 (let (($x751 ((_ is stack ) ?x417)))
 (let (($x752 (= c_____ right-to-center)))
 (let (($x753 (and $x752 $x751)))
 (let (($x754 (= c_____ right-to-left)))
 (let (($x755 (and $x754 $x751)))
 (let ((?x743 (rest ?x603)))
 (let (($x771 (= ?x741 ?x743)))
 (let (($x756 ((_ is stack ) ?x603)))
 (let (($x757 (= c_____ center-to-right)))
 (let (($x758 (and $x757 $x756)))
 (let (($x759 (= c_____ center-to-left)))
 (let (($x760 (and $x759 $x756)))
 (let ((?x383 (left s_____)))
 (let ((?x601 (top ?x383)))
 (let ((?x742 (stack ?x601 ?x603)))
 (let (($x770 (= ?x741 ?x742)))
 (let (($x761 ((_ is stack ) ?x383)))
 (let (($x762 (= c_____ left-to-right)))
 (let (($x763 (and $x762 $x761)))
 (let (($x793 (ite $x763 $x770 (ite $x760 $x771 (ite $x758 $x771 (ite $x755 $x779 (ite $x753 $x776 $x779)))))))
 (let (($x764 (= c_____ left-to-center)))
 (let (($x765 (and $x764 $x761)))
 (ite $x765 $x779 $x793)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x521 (left s______)))
 (let ((?x659 (left s_______)))
 (let (($x919 (= ?x659 ?x521)))
 (let ((?x555 (right s______)))
 (let ((?x886 (top ?x555)))
 (let ((?x887 (stack ?x886 ?x521)))
 (let (($x913 (= ?x659 ?x887)))
 (let (($x889 ((_ is stack ) ?x555)))
 (let (($x892 (= c______ right-to-left)))
 (let (($x893 (and $x892 $x889)))
 (let ((?x741 (center s______)))
 (let (($x894 ((_ is stack ) ?x741)))
 (let (($x895 (= c______ center-to-right)))
 (let (($x896 (and $x895 $x894)))
 (let ((?x882 (top ?x741)))
 (let ((?x883 (stack ?x882 ?x521)))
 (let (($x910 (= ?x659 ?x883)))
 (let (($x897 (= c______ center-to-left)))
 (let (($x898 (and $x897 $x894)))
 (let ((?x692 (rest ?x521)))
 (let (($x906 (= ?x659 ?x692)))
 (let (($x899 ((_ is stack ) ?x521)))
 (let (($x900 (= c______ left-to-right)))
 (let (($x901 (and $x900 $x899)))
 (let (($x902 (= c______ left-to-center)))
 (let (($x903 (and $x902 $x899)))
 (ite $x903 $x906 (ite $x901 $x906 (ite $x898 $x910 (ite $x896 $x919 (ite $x893 $x913 $x919))))))))))))))))))))))))))))))))
(assert
 (let ((?x555 (right s______)))
 (let ((?x693 (right s_______)))
 (let (($x915 (= ?x693 ?x555)))
 (let ((?x885 (rest ?x555)))
 (let (($x912 (= ?x693 ?x885)))
 (let (($x889 ((_ is stack ) ?x555)))
 (let (($x890 (= c______ right-to-center)))
 (let (($x891 (and $x890 $x889)))
 (let (($x892 (= c______ right-to-left)))
 (let (($x893 (and $x892 $x889)))
 (let ((?x741 (center s______)))
 (let ((?x882 (top ?x741)))
 (let ((?x884 (stack ?x882 ?x555)))
 (let (($x911 (= ?x693 ?x884)))
 (let (($x894 ((_ is stack ) ?x741)))
 (let (($x895 (= c______ center-to-right)))
 (let (($x896 (and $x895 $x894)))
 (let (($x897 (= c______ center-to-left)))
 (let (($x898 (and $x897 $x894)))
 (let ((?x521 (left s______)))
 (let (($x899 ((_ is stack ) ?x521)))
 (let (($x900 (= c______ left-to-right)))
 (let (($x901 (and $x900 $x899)))
 (let (($x932 (ite $x901 $x915 (ite $x898 $x915 (ite $x896 $x911 (ite $x893 $x912 (ite $x891 $x912 $x915)))))))
 (let ((?x739 (top ?x521)))
 (let ((?x878 (stack ?x739 ?x555)))
 (let (($x907 (= ?x693 ?x878)))
 (let (($x902 (= c______ left-to-center)))
 (let (($x903 (and $x902 $x899)))
 (ite $x903 $x907 $x932)))))))))))))))))))))))))))))))
(assert
 (let ((?x741 (center s______)))
 (let ((?x879 (center s_______)))
 (let (($x917 (= ?x879 ?x741)))
 (let ((?x555 (right s______)))
 (let ((?x886 (top ?x555)))
 (let ((?x888 (stack ?x886 ?x741)))
 (let (($x914 (= ?x879 ?x888)))
 (let (($x889 ((_ is stack ) ?x555)))
 (let (($x890 (= c______ right-to-center)))
 (let (($x891 (and $x890 $x889)))
 (let (($x892 (= c______ right-to-left)))
 (let (($x893 (and $x892 $x889)))
 (let ((?x881 (rest ?x741)))
 (let (($x909 (= ?x879 ?x881)))
 (let (($x894 ((_ is stack ) ?x741)))
 (let (($x895 (= c______ center-to-right)))
 (let (($x896 (and $x895 $x894)))
 (let (($x897 (= c______ center-to-left)))
 (let (($x898 (and $x897 $x894)))
 (let ((?x521 (left s______)))
 (let ((?x739 (top ?x521)))
 (let ((?x880 (stack ?x739 ?x741)))
 (let (($x908 (= ?x879 ?x880)))
 (let (($x899 ((_ is stack ) ?x521)))
 (let (($x900 (= c______ left-to-right)))
 (let (($x901 (and $x900 $x899)))
 (let (($x931 (ite $x901 $x908 (ite $x898 $x909 (ite $x896 $x909 (ite $x893 $x917 (ite $x891 $x914 $x917)))))))
 (let (($x902 (= c______ left-to-center)))
 (let (($x903 (and $x902 $x899)))
 (ite $x903 $x917 $x931)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x659 (left s_______)))
 (let ((?x797 (left s________)))
 (let (($x1057 (= ?x797 ?x659)))
 (let ((?x693 (right s_______)))
 (let ((?x1024 (top ?x693)))
 (let ((?x1025 (stack ?x1024 ?x659)))
 (let (($x1051 (= ?x797 ?x1025)))
 (let (($x1027 ((_ is stack ) ?x693)))
 (let (($x1030 (= c_______ right-to-left)))
 (let (($x1031 (and $x1030 $x1027)))
 (let ((?x879 (center s_______)))
 (let (($x1032 ((_ is stack ) ?x879)))
 (let (($x1033 (= c_______ center-to-right)))
 (let (($x1034 (and $x1033 $x1032)))
 (let ((?x1020 (top ?x879)))
 (let ((?x1021 (stack ?x1020 ?x659)))
 (let (($x1048 (= ?x797 ?x1021)))
 (let (($x1035 (= c_______ center-to-left)))
 (let (($x1036 (and $x1035 $x1032)))
 (let ((?x830 (rest ?x659)))
 (let (($x1044 (= ?x797 ?x830)))
 (let (($x1037 ((_ is stack ) ?x659)))
 (let (($x1038 (= c_______ left-to-right)))
 (let (($x1039 (and $x1038 $x1037)))
 (let (($x1040 (= c_______ left-to-center)))
 (let (($x1041 (and $x1040 $x1037)))
 (ite $x1041 $x1044 (ite $x1039 $x1044 (ite $x1036 $x1048 (ite $x1034 $x1057 (ite $x1031 $x1051 $x1057))))))))))))))))))))))))))))))))
(assert
 (let ((?x693 (right s_______)))
 (let ((?x831 (right s________)))
 (let (($x1053 (= ?x831 ?x693)))
 (let ((?x1023 (rest ?x693)))
 (let (($x1050 (= ?x831 ?x1023)))
 (let (($x1027 ((_ is stack ) ?x693)))
 (let (($x1028 (= c_______ right-to-center)))
 (let (($x1029 (and $x1028 $x1027)))
 (let (($x1030 (= c_______ right-to-left)))
 (let (($x1031 (and $x1030 $x1027)))
 (let ((?x879 (center s_______)))
 (let ((?x1020 (top ?x879)))
 (let ((?x1022 (stack ?x1020 ?x693)))
 (let (($x1049 (= ?x831 ?x1022)))
 (let (($x1032 ((_ is stack ) ?x879)))
 (let (($x1033 (= c_______ center-to-right)))
 (let (($x1034 (and $x1033 $x1032)))
 (let (($x1035 (= c_______ center-to-left)))
 (let (($x1036 (and $x1035 $x1032)))
 (let ((?x659 (left s_______)))
 (let (($x1037 ((_ is stack ) ?x659)))
 (let (($x1038 (= c_______ left-to-right)))
 (let (($x1039 (and $x1038 $x1037)))
 (let (($x1070 (ite $x1039 $x1053 (ite $x1036 $x1053 (ite $x1034 $x1049 (ite $x1031 $x1050 (ite $x1029 $x1050 $x1053)))))))
 (let ((?x877 (top ?x659)))
 (let ((?x1016 (stack ?x877 ?x693)))
 (let (($x1045 (= ?x831 ?x1016)))
 (let (($x1040 (= c_______ left-to-center)))
 (let (($x1041 (and $x1040 $x1037)))
 (ite $x1041 $x1045 $x1070)))))))))))))))))))))))))))))))
(assert
 (let ((?x879 (center s_______)))
 (let ((?x1017 (center s________)))
 (let (($x1055 (= ?x1017 ?x879)))
 (let ((?x693 (right s_______)))
 (let ((?x1024 (top ?x693)))
 (let ((?x1026 (stack ?x1024 ?x879)))
 (let (($x1052 (= ?x1017 ?x1026)))
 (let (($x1027 ((_ is stack ) ?x693)))
 (let (($x1028 (= c_______ right-to-center)))
 (let (($x1029 (and $x1028 $x1027)))
 (let (($x1030 (= c_______ right-to-left)))
 (let (($x1031 (and $x1030 $x1027)))
 (let ((?x1019 (rest ?x879)))
 (let (($x1047 (= ?x1017 ?x1019)))
 (let (($x1032 ((_ is stack ) ?x879)))
 (let (($x1033 (= c_______ center-to-right)))
 (let (($x1034 (and $x1033 $x1032)))
 (let (($x1035 (= c_______ center-to-left)))
 (let (($x1036 (and $x1035 $x1032)))
 (let ((?x659 (left s_______)))
 (let ((?x877 (top ?x659)))
 (let ((?x1018 (stack ?x877 ?x879)))
 (let (($x1046 (= ?x1017 ?x1018)))
 (let (($x1037 ((_ is stack ) ?x659)))
 (let (($x1038 (= c_______ left-to-right)))
 (let (($x1039 (and $x1038 $x1037)))
 (let (($x1069 (ite $x1039 $x1046 (ite $x1036 $x1047 (ite $x1034 $x1047 (ite $x1031 $x1055 (ite $x1029 $x1052 $x1055)))))))
 (let (($x1040 (= c_______ left-to-center)))
 (let (($x1041 (and $x1040 $x1037)))
 (ite $x1041 $x1055 $x1069)))))))))))))))))))))))))))))))
(assert
 (= c_________ c!8))
(assert
 (let ((?x797 (left s________)))
 (let ((?x935 (left s_________)))
 (let (($x1195 (= ?x935 ?x797)))
 (let ((?x831 (right s________)))
 (let ((?x1162 (top ?x831)))
 (let ((?x1163 (stack ?x1162 ?x797)))
 (let (($x1189 (= ?x935 ?x1163)))
 (let (($x1165 ((_ is stack ) ?x831)))
 (let (($x1168 (= c________ right-to-left)))
 (let (($x1169 (and $x1168 $x1165)))
 (let ((?x1017 (center s________)))
 (let (($x1170 ((_ is stack ) ?x1017)))
 (let (($x1171 (= c________ center-to-right)))
 (let (($x1172 (and $x1171 $x1170)))
 (let ((?x1158 (top ?x1017)))
 (let ((?x1159 (stack ?x1158 ?x797)))
 (let (($x1186 (= ?x935 ?x1159)))
 (let (($x1173 (= c________ center-to-left)))
 (let (($x1174 (and $x1173 $x1170)))
 (let ((?x968 (rest ?x797)))
 (let (($x1182 (= ?x935 ?x968)))
 (let (($x1175 ((_ is stack ) ?x797)))
 (let (($x1176 (= c________ left-to-right)))
 (let (($x1177 (and $x1176 $x1175)))
 (let (($x1178 (= c________ left-to-center)))
 (let (($x1179 (and $x1178 $x1175)))
 (ite $x1179 $x1182 (ite $x1177 $x1182 (ite $x1174 $x1186 (ite $x1172 $x1195 (ite $x1169 $x1189 $x1195))))))))))))))))))))))))))))))))
(assert
 (let ((?x831 (right s________)))
 (let ((?x969 (right s_________)))
 (let (($x1191 (= ?x969 ?x831)))
 (let ((?x1161 (rest ?x831)))
 (let (($x1188 (= ?x969 ?x1161)))
 (let (($x1165 ((_ is stack ) ?x831)))
 (let (($x1166 (= c________ right-to-center)))
 (let (($x1167 (and $x1166 $x1165)))
 (let (($x1168 (= c________ right-to-left)))
 (let (($x1169 (and $x1168 $x1165)))
 (let ((?x1017 (center s________)))
 (let ((?x1158 (top ?x1017)))
 (let ((?x1160 (stack ?x1158 ?x831)))
 (let (($x1187 (= ?x969 ?x1160)))
 (let (($x1170 ((_ is stack ) ?x1017)))
 (let (($x1171 (= c________ center-to-right)))
 (let (($x1172 (and $x1171 $x1170)))
 (let (($x1173 (= c________ center-to-left)))
 (let (($x1174 (and $x1173 $x1170)))
 (let ((?x797 (left s________)))
 (let (($x1175 ((_ is stack ) ?x797)))
 (let (($x1176 (= c________ left-to-right)))
 (let (($x1177 (and $x1176 $x1175)))
 (let (($x1208 (ite $x1177 $x1191 (ite $x1174 $x1191 (ite $x1172 $x1187 (ite $x1169 $x1188 (ite $x1167 $x1188 $x1191)))))))
 (let ((?x1015 (top ?x797)))
 (let ((?x1154 (stack ?x1015 ?x831)))
 (let (($x1183 (= ?x969 ?x1154)))
 (let (($x1178 (= c________ left-to-center)))
 (let (($x1179 (and $x1178 $x1175)))
 (ite $x1179 $x1183 $x1208)))))))))))))))))))))))))))))))
(assert
 (let ((?x1017 (center s________)))
 (let ((?x1155 (center s_________)))
 (let (($x1193 (= ?x1155 ?x1017)))
 (let ((?x831 (right s________)))
 (let ((?x1162 (top ?x831)))
 (let ((?x1164 (stack ?x1162 ?x1017)))
 (let (($x1190 (= ?x1155 ?x1164)))
 (let (($x1165 ((_ is stack ) ?x831)))
 (let (($x1166 (= c________ right-to-center)))
 (let (($x1167 (and $x1166 $x1165)))
 (let (($x1168 (= c________ right-to-left)))
 (let (($x1169 (and $x1168 $x1165)))
 (let ((?x1157 (rest ?x1017)))
 (let (($x1185 (= ?x1155 ?x1157)))
 (let (($x1170 ((_ is stack ) ?x1017)))
 (let (($x1171 (= c________ center-to-right)))
 (let (($x1172 (and $x1171 $x1170)))
 (let (($x1173 (= c________ center-to-left)))
 (let (($x1174 (and $x1173 $x1170)))
 (let ((?x797 (left s________)))
 (let ((?x1015 (top ?x797)))
 (let ((?x1156 (stack ?x1015 ?x1017)))
 (let (($x1184 (= ?x1155 ?x1156)))
 (let (($x1175 ((_ is stack ) ?x797)))
 (let (($x1176 (= c________ left-to-right)))
 (let (($x1177 (and $x1176 $x1175)))
 (let (($x1207 (ite $x1177 $x1184 (ite $x1174 $x1185 (ite $x1172 $x1185 (ite $x1169 $x1193 (ite $x1167 $x1190 $x1193)))))))
 (let (($x1178 (= c________ left-to-center)))
 (let (($x1179 (and $x1178 $x1175)))
 (ite $x1179 $x1193 $x1207)))))))))))))))))))))))))))))))
(assert
 (= c__________ c!9))
(assert
 (let ((?x935 (left s_________)))
 (let ((?x1073 (left s__________)))
 (let (($x1333 (= ?x1073 ?x935)))
 (let ((?x969 (right s_________)))
 (let ((?x1300 (top ?x969)))
 (let ((?x1301 (stack ?x1300 ?x935)))
 (let (($x1327 (= ?x1073 ?x1301)))
 (let (($x1303 ((_ is stack ) ?x969)))
 (let (($x1306 (= c_________ right-to-left)))
 (let (($x1307 (and $x1306 $x1303)))
 (let ((?x1155 (center s_________)))
 (let (($x1308 ((_ is stack ) ?x1155)))
 (let (($x1309 (= c_________ center-to-right)))
 (let (($x1310 (and $x1309 $x1308)))
 (let ((?x1296 (top ?x1155)))
 (let ((?x1297 (stack ?x1296 ?x935)))
 (let (($x1324 (= ?x1073 ?x1297)))
 (let (($x1311 (= c_________ center-to-left)))
 (let (($x1312 (and $x1311 $x1308)))
 (let ((?x1106 (rest ?x935)))
 (let (($x1320 (= ?x1073 ?x1106)))
 (let (($x1313 ((_ is stack ) ?x935)))
 (let (($x1314 (= c_________ left-to-right)))
 (let (($x1315 (and $x1314 $x1313)))
 (let (($x1316 (= c_________ left-to-center)))
 (let (($x1317 (and $x1316 $x1313)))
 (ite $x1317 $x1320 (ite $x1315 $x1320 (ite $x1312 $x1324 (ite $x1310 $x1333 (ite $x1307 $x1327 $x1333))))))))))))))))))))))))))))))))
(assert
 (let ((?x969 (right s_________)))
 (let ((?x1107 (right s__________)))
 (let (($x1329 (= ?x1107 ?x969)))
 (let ((?x1299 (rest ?x969)))
 (let (($x1326 (= ?x1107 ?x1299)))
 (let (($x1303 ((_ is stack ) ?x969)))
 (let (($x1304 (= c_________ right-to-center)))
 (let (($x1305 (and $x1304 $x1303)))
 (let (($x1306 (= c_________ right-to-left)))
 (let (($x1307 (and $x1306 $x1303)))
 (let ((?x1155 (center s_________)))
 (let ((?x1296 (top ?x1155)))
 (let ((?x1298 (stack ?x1296 ?x969)))
 (let (($x1325 (= ?x1107 ?x1298)))
 (let (($x1308 ((_ is stack ) ?x1155)))
 (let (($x1309 (= c_________ center-to-right)))
 (let (($x1310 (and $x1309 $x1308)))
 (let (($x1311 (= c_________ center-to-left)))
 (let (($x1312 (and $x1311 $x1308)))
 (let ((?x935 (left s_________)))
 (let (($x1313 ((_ is stack ) ?x935)))
 (let (($x1314 (= c_________ left-to-right)))
 (let (($x1315 (and $x1314 $x1313)))
 (let (($x1346 (ite $x1315 $x1329 (ite $x1312 $x1329 (ite $x1310 $x1325 (ite $x1307 $x1326 (ite $x1305 $x1326 $x1329)))))))
 (let ((?x1153 (top ?x935)))
 (let ((?x1292 (stack ?x1153 ?x969)))
 (let (($x1321 (= ?x1107 ?x1292)))
 (let (($x1316 (= c_________ left-to-center)))
 (let (($x1317 (and $x1316 $x1313)))
 (ite $x1317 $x1321 $x1346)))))))))))))))))))))))))))))))
(assert
 (let ((?x1155 (center s_________)))
 (let ((?x1293 (center s__________)))
 (let (($x1331 (= ?x1293 ?x1155)))
 (let ((?x969 (right s_________)))
 (let ((?x1300 (top ?x969)))
 (let ((?x1302 (stack ?x1300 ?x1155)))
 (let (($x1328 (= ?x1293 ?x1302)))
 (let (($x1303 ((_ is stack ) ?x969)))
 (let (($x1304 (= c_________ right-to-center)))
 (let (($x1305 (and $x1304 $x1303)))
 (let (($x1306 (= c_________ right-to-left)))
 (let (($x1307 (and $x1306 $x1303)))
 (let ((?x1295 (rest ?x1155)))
 (let (($x1323 (= ?x1293 ?x1295)))
 (let (($x1308 ((_ is stack ) ?x1155)))
 (let (($x1309 (= c_________ center-to-right)))
 (let (($x1310 (and $x1309 $x1308)))
 (let (($x1311 (= c_________ center-to-left)))
 (let (($x1312 (and $x1311 $x1308)))
 (let ((?x935 (left s_________)))
 (let ((?x1153 (top ?x935)))
 (let ((?x1294 (stack ?x1153 ?x1155)))
 (let (($x1322 (= ?x1293 ?x1294)))
 (let (($x1313 ((_ is stack ) ?x935)))
 (let (($x1314 (= c_________ left-to-right)))
 (let (($x1315 (and $x1314 $x1313)))
 (let (($x1345 (ite $x1315 $x1322 (ite $x1312 $x1323 (ite $x1310 $x1323 (ite $x1307 $x1331 (ite $x1305 $x1328 $x1331)))))))
 (let (($x1316 (= c_________ left-to-center)))
 (let (($x1317 (and $x1316 $x1313)))
 (ite $x1317 $x1331 $x1345)))))))))))))))))))))))))))))))
(assert
 (let ((?x34 (stack C (stack A empty))))
 (let ((?x1107 (right s__________)))
 (let (($x1349 (= ?x1107 ?x34)))
 (let ((?x32 (stack E (stack G (stack F (stack B (stack H empty)))))))
 (let ((?x1293 (center s__________)))
 (let (($x1380 (= ?x1293 ?x32)))
 (let ((?x28 (stack D empty)))
 (let ((?x1073 (left s__________)))
 (let (($x1381 (= ?x1073 ?x28)))
 (let (($x1383 (not (and $x1381 $x1380 $x1349))))
 (not $x1383))))))))))))
(check-sat)
(exit)
