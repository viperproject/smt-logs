(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(declare-fun c!8 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x28 (stack H empty)))
 (let ((?x29 (stack P ?x28)))
 (let ((?x30 (stack L ?x29)))
 (let ((?x31 (stack K ?x30)))
 (let ((?x32 (stack N ?x31)))
 (let ((?x105 (left s_tmp_)))
 (= ?x105 ?x32))))))))
(assert
 (let ((?x33 (stack C empty)))
 (let ((?x108 (center s_tmp__)))
 (= ?x108 ?x33))))
(assert
 (let ((?x34 (stack A empty)))
 (let ((?x35 (stack B ?x34)))
 (let ((?x36 (stack D ?x35)))
 (let ((?x37 (stack E ?x36)))
 (let ((?x38 (stack F ?x37)))
 (let ((?x39 (stack G ?x38)))
 (let ((?x40 (stack I ?x39)))
 (let ((?x41 (stack J ?x40)))
 (let ((?x42 (stack M ?x41)))
 (let ((?x43 (stack O ?x42)))
 (let ((?x111 (right s_tmp___)))
 (= ?x111 ?x43)))))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x138 (left s_tmp__)))
 (= (left s_tmp___) ?x138)))
(assert
 (let ((?x108 (center s_tmp__)))
 (= (center s_tmp___) ?x108)))
(assert
 (let ((?x142 (center s_tmp_)))
 (= ?x142 (center s_tmp))))
(assert
 (let ((?x145 (right s_tmp_)))
 (= ?x145 (right s_tmp))))
(assert
 (let ((?x105 (left s_tmp_)))
 (let ((?x138 (left s_tmp__)))
 (= ?x138 ?x105))))
(assert
 (let ((?x145 (right s_tmp_)))
 (let ((?x149 (right s_tmp__)))
 (= ?x149 ?x145))))
(assert
 (= c__ c!1))
(assert
 (let ((?x82 (left s_)))
 (let ((?x253 (left s__)))
 (let (($x286 (= ?x253 ?x82)))
 (let ((?x85 (right s_)))
 (let (($x244 ((_ is stack ) ?x85)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x254 (and $x241 $x244)))
 (let ((?x87 (center s_)))
 (let (($x255 ((_ is stack ) ?x87)))
 (let (($x256 (= c_ center-to-right)))
 (let (($x263 (and $x256 $x255)))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x255)))
 (let (($x295 (ite $x265 (= ?x253 (stack (top ?x87) ?x82)) (ite $x263 $x286 (ite $x254 (= ?x253 (stack (top ?x85) ?x82)) $x286)))))
 (let (($x273 (= ?x253 (rest ?x82))))
 (let (($x266 ((_ is stack ) ?x82)))
 (let (($x267 (= c_ left-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let (($x269 (= c_ left-to-center)))
 (let (($x270 (and $x269 $x266)))
 (ite $x270 $x273 (ite $x268 $x273 $x295)))))))))))))))))))))))
(assert
 (let ((?x85 (right s_)))
 (let ((?x258 (right s__)))
 (let (($x282 (= ?x258 ?x85)))
 (let (($x279 (= ?x258 (rest ?x85))))
 (let (($x244 ((_ is stack ) ?x85)))
 (let (($x239 (= c_ right-to-center)))
 (let (($x240 (and $x239 $x244)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x254 (and $x241 $x244)))
 (let ((?x87 (center s_)))
 (let (($x255 ((_ is stack ) ?x87)))
 (let (($x256 (= c_ center-to-right)))
 (let (($x263 (and $x256 $x255)))
 (let (($x292 (ite $x263 (= ?x258 (stack (top ?x87) ?x85)) (ite $x254 $x279 (ite $x240 $x279 $x282)))))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x255)))
 (let ((?x82 (left s_)))
 (let (($x266 ((_ is stack ) ?x82)))
 (let (($x267 (= c_ left-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let (($x269 (= c_ left-to-center)))
 (let (($x270 (and $x269 $x266)))
 (ite $x270 (= ?x258 (stack (top ?x82) ?x85)) (ite $x268 $x282 (ite $x265 $x282 $x292))))))))))))))))))))))))))
(assert
 (let ((?x87 (center s_)))
 (let ((?x246 (center s__)))
 (let (($x284 (= ?x246 ?x87)))
 (let ((?x85 (right s_)))
 (let (($x244 ((_ is stack ) ?x85)))
 (let (($x239 (= c_ right-to-center)))
 (let (($x240 (and $x239 $x244)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x254 (and $x241 $x244)))
 (let (($x276 (= ?x246 (rest ?x87))))
 (let (($x255 ((_ is stack ) ?x87)))
 (let (($x256 (= c_ center-to-right)))
 (let (($x263 (and $x256 $x255)))
 (let (($x291 (ite $x263 $x276 (ite $x254 $x284 (ite $x240 (= ?x246 (stack (top ?x85) ?x87)) $x284)))))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x255)))
 (let ((?x82 (left s_)))
 (let (($x266 ((_ is stack ) ?x82)))
 (let (($x267 (= c_ left-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let (($x269 (= c_ left-to-center)))
 (let (($x270 (and $x269 $x266)))
 (ite $x270 $x284 (ite $x268 (= ?x246 (stack (top ?x82) ?x87)) (ite $x265 $x276 $x291))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x253 (left s__)))
 (let ((?x152 (left s___)))
 (let (($x415 (= ?x152 ?x253)))
 (let ((?x258 (right s__)))
 (let ((?x382 (top ?x258)))
 (let ((?x383 (stack ?x382 ?x253)))
 (let (($x409 (= ?x152 ?x383)))
 (let (($x385 ((_ is stack ) ?x258)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x246 (center s__)))
 (let (($x390 ((_ is stack ) ?x246)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let ((?x378 (top ?x246)))
 (let ((?x379 (stack ?x378 ?x253)))
 (let (($x406 (= ?x152 ?x379)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x154 (rest ?x253)))
 (let (($x402 (= ?x152 ?x154)))
 (let (($x395 ((_ is stack ) ?x253)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x402 (ite $x397 $x402 (ite $x394 $x406 (ite $x392 $x415 (ite $x389 $x409 $x415))))))))))))))))))))))))))))))))
(assert
 (let ((?x258 (right s__)))
 (let ((?x155 (right s___)))
 (let (($x411 (= ?x155 ?x258)))
 (let ((?x381 (rest ?x258)))
 (let (($x408 (= ?x155 ?x381)))
 (let (($x385 ((_ is stack ) ?x258)))
 (let (($x386 (= c__ right-to-center)))
 (let (($x387 (and $x386 $x385)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x246 (center s__)))
 (let ((?x378 (top ?x246)))
 (let ((?x380 (stack ?x378 ?x258)))
 (let (($x407 (= ?x155 ?x380)))
 (let (($x390 ((_ is stack ) ?x246)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x253 (left s__)))
 (let (($x395 ((_ is stack ) ?x253)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x428 (ite $x397 $x411 (ite $x394 $x411 (ite $x392 $x407 (ite $x389 $x408 (ite $x387 $x408 $x411)))))))
 (let ((?x238 (top ?x253)))
 (let ((?x374 (stack ?x238 ?x258)))
 (let (($x403 (= ?x155 ?x374)))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x403 $x428)))))))))))))))))))))))))))))))
(assert
 (let ((?x246 (center s__)))
 (let ((?x375 (center s___)))
 (let (($x413 (= ?x375 ?x246)))
 (let ((?x258 (right s__)))
 (let ((?x382 (top ?x258)))
 (let ((?x384 (stack ?x382 ?x246)))
 (let (($x410 (= ?x375 ?x384)))
 (let (($x385 ((_ is stack ) ?x258)))
 (let (($x386 (= c__ right-to-center)))
 (let (($x387 (and $x386 $x385)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x377 (rest ?x246)))
 (let (($x405 (= ?x375 ?x377)))
 (let (($x390 ((_ is stack ) ?x246)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x253 (left s__)))
 (let ((?x238 (top ?x253)))
 (let ((?x376 (stack ?x238 ?x246)))
 (let (($x404 (= ?x375 ?x376)))
 (let (($x395 ((_ is stack ) ?x253)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x427 (ite $x397 $x404 (ite $x394 $x405 (ite $x392 $x405 (ite $x389 $x413 (ite $x387 $x410 $x413)))))))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x413 $x427)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x152 (left s___)))
 (let ((?x302 (left s____)))
 (let (($x553 (= ?x302 ?x152)))
 (let ((?x155 (right s___)))
 (let ((?x520 (top ?x155)))
 (let ((?x521 (stack ?x520 ?x152)))
 (let (($x547 (= ?x302 ?x521)))
 (let (($x523 ((_ is stack ) ?x155)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x375 (center s___)))
 (let (($x528 ((_ is stack ) ?x375)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let ((?x516 (top ?x375)))
 (let ((?x517 (stack ?x516 ?x152)))
 (let (($x544 (= ?x302 ?x517)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x346 (rest ?x152)))
 (let (($x540 (= ?x302 ?x346)))
 (let (($x533 ((_ is stack ) ?x152)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x540 (ite $x535 $x540 (ite $x532 $x544 (ite $x530 $x553 (ite $x527 $x547 $x553))))))))))))))))))))))))))))))))
(assert
 (let ((?x155 (right s___)))
 (let ((?x347 (right s____)))
 (let (($x549 (= ?x347 ?x155)))
 (let ((?x519 (rest ?x155)))
 (let (($x546 (= ?x347 ?x519)))
 (let (($x523 ((_ is stack ) ?x155)))
 (let (($x524 (= c___ right-to-center)))
 (let (($x525 (and $x524 $x523)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x375 (center s___)))
 (let ((?x516 (top ?x375)))
 (let ((?x518 (stack ?x516 ?x155)))
 (let (($x545 (= ?x347 ?x518)))
 (let (($x528 ((_ is stack ) ?x375)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x152 (left s___)))
 (let (($x533 ((_ is stack ) ?x152)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x566 (ite $x535 $x549 (ite $x532 $x549 (ite $x530 $x545 (ite $x527 $x546 (ite $x525 $x546 $x549)))))))
 (let ((?x373 (top ?x152)))
 (let ((?x512 (stack ?x373 ?x155)))
 (let (($x541 (= ?x347 ?x512)))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x541 $x566)))))))))))))))))))))))))))))))
(assert
 (let ((?x375 (center s___)))
 (let ((?x513 (center s____)))
 (let (($x551 (= ?x513 ?x375)))
 (let ((?x155 (right s___)))
 (let ((?x520 (top ?x155)))
 (let ((?x522 (stack ?x520 ?x375)))
 (let (($x548 (= ?x513 ?x522)))
 (let (($x523 ((_ is stack ) ?x155)))
 (let (($x524 (= c___ right-to-center)))
 (let (($x525 (and $x524 $x523)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x515 (rest ?x375)))
 (let (($x543 (= ?x513 ?x515)))
 (let (($x528 ((_ is stack ) ?x375)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x152 (left s___)))
 (let ((?x373 (top ?x152)))
 (let ((?x514 (stack ?x373 ?x375)))
 (let (($x542 (= ?x513 ?x514)))
 (let (($x533 ((_ is stack ) ?x152)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x565 (ite $x535 $x542 (ite $x532 $x543 (ite $x530 $x543 (ite $x527 $x551 (ite $x525 $x548 $x551)))))))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x551 $x565)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x302 (left s____)))
 (let ((?x431 (left s_____)))
 (let (($x691 (= ?x431 ?x302)))
 (let ((?x347 (right s____)))
 (let ((?x658 (top ?x347)))
 (let ((?x659 (stack ?x658 ?x302)))
 (let (($x685 (= ?x431 ?x659)))
 (let (($x661 ((_ is stack ) ?x347)))
 (let (($x664 (= c____ right-to-left)))
 (let (($x665 (and $x664 $x661)))
 (let ((?x513 (center s____)))
 (let (($x666 ((_ is stack ) ?x513)))
 (let (($x667 (= c____ center-to-right)))
 (let (($x668 (and $x667 $x666)))
 (let ((?x654 (top ?x513)))
 (let ((?x655 (stack ?x654 ?x302)))
 (let (($x682 (= ?x431 ?x655)))
 (let (($x669 (= c____ center-to-left)))
 (let (($x670 (and $x669 $x666)))
 (let ((?x464 (rest ?x302)))
 (let (($x678 (= ?x431 ?x464)))
 (let (($x671 ((_ is stack ) ?x302)))
 (let (($x672 (= c____ left-to-right)))
 (let (($x673 (and $x672 $x671)))
 (let (($x674 (= c____ left-to-center)))
 (let (($x675 (and $x674 $x671)))
 (ite $x675 $x678 (ite $x673 $x678 (ite $x670 $x682 (ite $x668 $x691 (ite $x665 $x685 $x691))))))))))))))))))))))))))))))))
(assert
 (let ((?x347 (right s____)))
 (let ((?x465 (right s_____)))
 (let (($x687 (= ?x465 ?x347)))
 (let ((?x657 (rest ?x347)))
 (let (($x684 (= ?x465 ?x657)))
 (let (($x661 ((_ is stack ) ?x347)))
 (let (($x662 (= c____ right-to-center)))
 (let (($x663 (and $x662 $x661)))
 (let (($x664 (= c____ right-to-left)))
 (let (($x665 (and $x664 $x661)))
 (let ((?x513 (center s____)))
 (let ((?x654 (top ?x513)))
 (let ((?x656 (stack ?x654 ?x347)))
 (let (($x683 (= ?x465 ?x656)))
 (let (($x666 ((_ is stack ) ?x513)))
 (let (($x667 (= c____ center-to-right)))
 (let (($x668 (and $x667 $x666)))
 (let (($x669 (= c____ center-to-left)))
 (let (($x670 (and $x669 $x666)))
 (let ((?x302 (left s____)))
 (let (($x671 ((_ is stack ) ?x302)))
 (let (($x672 (= c____ left-to-right)))
 (let (($x673 (and $x672 $x671)))
 (let (($x704 (ite $x673 $x687 (ite $x670 $x687 (ite $x668 $x683 (ite $x665 $x684 (ite $x663 $x684 $x687)))))))
 (let ((?x511 (top ?x302)))
 (let ((?x650 (stack ?x511 ?x347)))
 (let (($x679 (= ?x465 ?x650)))
 (let (($x674 (= c____ left-to-center)))
 (let (($x675 (and $x674 $x671)))
 (ite $x675 $x679 $x704)))))))))))))))))))))))))))))))
(assert
 (let ((?x513 (center s____)))
 (let ((?x651 (center s_____)))
 (let (($x689 (= ?x651 ?x513)))
 (let ((?x347 (right s____)))
 (let ((?x658 (top ?x347)))
 (let ((?x660 (stack ?x658 ?x513)))
 (let (($x686 (= ?x651 ?x660)))
 (let (($x661 ((_ is stack ) ?x347)))
 (let (($x662 (= c____ right-to-center)))
 (let (($x663 (and $x662 $x661)))
 (let (($x664 (= c____ right-to-left)))
 (let (($x665 (and $x664 $x661)))
 (let ((?x653 (rest ?x513)))
 (let (($x681 (= ?x651 ?x653)))
 (let (($x666 ((_ is stack ) ?x513)))
 (let (($x667 (= c____ center-to-right)))
 (let (($x668 (and $x667 $x666)))
 (let (($x669 (= c____ center-to-left)))
 (let (($x670 (and $x669 $x666)))
 (let ((?x302 (left s____)))
 (let ((?x511 (top ?x302)))
 (let ((?x652 (stack ?x511 ?x513)))
 (let (($x680 (= ?x651 ?x652)))
 (let (($x671 ((_ is stack ) ?x302)))
 (let (($x672 (= c____ left-to-right)))
 (let (($x673 (and $x672 $x671)))
 (let (($x703 (ite $x673 $x680 (ite $x670 $x681 (ite $x668 $x681 (ite $x665 $x689 (ite $x663 $x686 $x689)))))))
 (let (($x674 (= c____ left-to-center)))
 (let (($x675 (and $x674 $x671)))
 (ite $x675 $x689 $x703)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x431 (left s_____)))
 (let ((?x569 (left s______)))
 (let (($x829 (= ?x569 ?x431)))
 (let ((?x465 (right s_____)))
 (let ((?x796 (top ?x465)))
 (let ((?x797 (stack ?x796 ?x431)))
 (let (($x823 (= ?x569 ?x797)))
 (let (($x799 ((_ is stack ) ?x465)))
 (let (($x802 (= c_____ right-to-left)))
 (let (($x803 (and $x802 $x799)))
 (let ((?x651 (center s_____)))
 (let (($x804 ((_ is stack ) ?x651)))
 (let (($x805 (= c_____ center-to-right)))
 (let (($x806 (and $x805 $x804)))
 (let ((?x792 (top ?x651)))
 (let ((?x793 (stack ?x792 ?x431)))
 (let (($x820 (= ?x569 ?x793)))
 (let (($x807 (= c_____ center-to-left)))
 (let (($x808 (and $x807 $x804)))
 (let ((?x602 (rest ?x431)))
 (let (($x816 (= ?x569 ?x602)))
 (let (($x809 ((_ is stack ) ?x431)))
 (let (($x810 (= c_____ left-to-right)))
 (let (($x811 (and $x810 $x809)))
 (let (($x812 (= c_____ left-to-center)))
 (let (($x813 (and $x812 $x809)))
 (ite $x813 $x816 (ite $x811 $x816 (ite $x808 $x820 (ite $x806 $x829 (ite $x803 $x823 $x829))))))))))))))))))))))))))))))))
(assert
 (let ((?x465 (right s_____)))
 (let ((?x603 (right s______)))
 (let (($x825 (= ?x603 ?x465)))
 (let ((?x795 (rest ?x465)))
 (let (($x822 (= ?x603 ?x795)))
 (let (($x799 ((_ is stack ) ?x465)))
 (let (($x800 (= c_____ right-to-center)))
 (let (($x801 (and $x800 $x799)))
 (let (($x802 (= c_____ right-to-left)))
 (let (($x803 (and $x802 $x799)))
 (let ((?x651 (center s_____)))
 (let ((?x792 (top ?x651)))
 (let ((?x794 (stack ?x792 ?x465)))
 (let (($x821 (= ?x603 ?x794)))
 (let (($x804 ((_ is stack ) ?x651)))
 (let (($x805 (= c_____ center-to-right)))
 (let (($x806 (and $x805 $x804)))
 (let (($x807 (= c_____ center-to-left)))
 (let (($x808 (and $x807 $x804)))
 (let ((?x431 (left s_____)))
 (let (($x809 ((_ is stack ) ?x431)))
 (let (($x810 (= c_____ left-to-right)))
 (let (($x811 (and $x810 $x809)))
 (let (($x842 (ite $x811 $x825 (ite $x808 $x825 (ite $x806 $x821 (ite $x803 $x822 (ite $x801 $x822 $x825)))))))
 (let ((?x649 (top ?x431)))
 (let ((?x788 (stack ?x649 ?x465)))
 (let (($x817 (= ?x603 ?x788)))
 (let (($x812 (= c_____ left-to-center)))
 (let (($x813 (and $x812 $x809)))
 (ite $x813 $x817 $x842)))))))))))))))))))))))))))))))
(assert
 (let ((?x651 (center s_____)))
 (let ((?x789 (center s______)))
 (let (($x827 (= ?x789 ?x651)))
 (let ((?x465 (right s_____)))
 (let ((?x796 (top ?x465)))
 (let ((?x798 (stack ?x796 ?x651)))
 (let (($x824 (= ?x789 ?x798)))
 (let (($x799 ((_ is stack ) ?x465)))
 (let (($x800 (= c_____ right-to-center)))
 (let (($x801 (and $x800 $x799)))
 (let (($x802 (= c_____ right-to-left)))
 (let (($x803 (and $x802 $x799)))
 (let ((?x791 (rest ?x651)))
 (let (($x819 (= ?x789 ?x791)))
 (let (($x804 ((_ is stack ) ?x651)))
 (let (($x805 (= c_____ center-to-right)))
 (let (($x806 (and $x805 $x804)))
 (let (($x807 (= c_____ center-to-left)))
 (let (($x808 (and $x807 $x804)))
 (let ((?x431 (left s_____)))
 (let ((?x649 (top ?x431)))
 (let ((?x790 (stack ?x649 ?x651)))
 (let (($x818 (= ?x789 ?x790)))
 (let (($x809 ((_ is stack ) ?x431)))
 (let (($x810 (= c_____ left-to-right)))
 (let (($x811 (and $x810 $x809)))
 (let (($x841 (ite $x811 $x818 (ite $x808 $x819 (ite $x806 $x819 (ite $x803 $x827 (ite $x801 $x824 $x827)))))))
 (let (($x812 (= c_____ left-to-center)))
 (let (($x813 (and $x812 $x809)))
 (ite $x813 $x827 $x841)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x569 (left s______)))
 (let ((?x707 (left s_______)))
 (let (($x967 (= ?x707 ?x569)))
 (let ((?x603 (right s______)))
 (let ((?x934 (top ?x603)))
 (let ((?x935 (stack ?x934 ?x569)))
 (let (($x961 (= ?x707 ?x935)))
 (let (($x937 ((_ is stack ) ?x603)))
 (let (($x940 (= c______ right-to-left)))
 (let (($x941 (and $x940 $x937)))
 (let ((?x789 (center s______)))
 (let (($x942 ((_ is stack ) ?x789)))
 (let (($x943 (= c______ center-to-right)))
 (let (($x944 (and $x943 $x942)))
 (let ((?x930 (top ?x789)))
 (let ((?x931 (stack ?x930 ?x569)))
 (let (($x958 (= ?x707 ?x931)))
 (let (($x945 (= c______ center-to-left)))
 (let (($x946 (and $x945 $x942)))
 (let ((?x740 (rest ?x569)))
 (let (($x954 (= ?x707 ?x740)))
 (let (($x947 ((_ is stack ) ?x569)))
 (let (($x948 (= c______ left-to-right)))
 (let (($x949 (and $x948 $x947)))
 (let (($x950 (= c______ left-to-center)))
 (let (($x951 (and $x950 $x947)))
 (ite $x951 $x954 (ite $x949 $x954 (ite $x946 $x958 (ite $x944 $x967 (ite $x941 $x961 $x967))))))))))))))))))))))))))))))))
(assert
 (let ((?x603 (right s______)))
 (let ((?x741 (right s_______)))
 (let (($x963 (= ?x741 ?x603)))
 (let ((?x933 (rest ?x603)))
 (let (($x960 (= ?x741 ?x933)))
 (let (($x937 ((_ is stack ) ?x603)))
 (let (($x938 (= c______ right-to-center)))
 (let (($x939 (and $x938 $x937)))
 (let (($x940 (= c______ right-to-left)))
 (let (($x941 (and $x940 $x937)))
 (let ((?x789 (center s______)))
 (let ((?x930 (top ?x789)))
 (let ((?x932 (stack ?x930 ?x603)))
 (let (($x959 (= ?x741 ?x932)))
 (let (($x942 ((_ is stack ) ?x789)))
 (let (($x943 (= c______ center-to-right)))
 (let (($x944 (and $x943 $x942)))
 (let (($x945 (= c______ center-to-left)))
 (let (($x946 (and $x945 $x942)))
 (let ((?x569 (left s______)))
 (let (($x947 ((_ is stack ) ?x569)))
 (let (($x948 (= c______ left-to-right)))
 (let (($x949 (and $x948 $x947)))
 (let (($x980 (ite $x949 $x963 (ite $x946 $x963 (ite $x944 $x959 (ite $x941 $x960 (ite $x939 $x960 $x963)))))))
 (let ((?x787 (top ?x569)))
 (let ((?x926 (stack ?x787 ?x603)))
 (let (($x955 (= ?x741 ?x926)))
 (let (($x950 (= c______ left-to-center)))
 (let (($x951 (and $x950 $x947)))
 (ite $x951 $x955 $x980)))))))))))))))))))))))))))))))
(assert
 (let ((?x789 (center s______)))
 (let ((?x927 (center s_______)))
 (let (($x965 (= ?x927 ?x789)))
 (let ((?x603 (right s______)))
 (let ((?x934 (top ?x603)))
 (let ((?x936 (stack ?x934 ?x789)))
 (let (($x962 (= ?x927 ?x936)))
 (let (($x937 ((_ is stack ) ?x603)))
 (let (($x938 (= c______ right-to-center)))
 (let (($x939 (and $x938 $x937)))
 (let (($x940 (= c______ right-to-left)))
 (let (($x941 (and $x940 $x937)))
 (let ((?x929 (rest ?x789)))
 (let (($x957 (= ?x927 ?x929)))
 (let (($x942 ((_ is stack ) ?x789)))
 (let (($x943 (= c______ center-to-right)))
 (let (($x944 (and $x943 $x942)))
 (let (($x945 (= c______ center-to-left)))
 (let (($x946 (and $x945 $x942)))
 (let ((?x569 (left s______)))
 (let ((?x787 (top ?x569)))
 (let ((?x928 (stack ?x787 ?x789)))
 (let (($x956 (= ?x927 ?x928)))
 (let (($x947 ((_ is stack ) ?x569)))
 (let (($x948 (= c______ left-to-right)))
 (let (($x949 (and $x948 $x947)))
 (let (($x979 (ite $x949 $x956 (ite $x946 $x957 (ite $x944 $x957 (ite $x941 $x965 (ite $x939 $x962 $x965)))))))
 (let (($x950 (= c______ left-to-center)))
 (let (($x951 (and $x950 $x947)))
 (ite $x951 $x965 $x979)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x707 (left s_______)))
 (let ((?x845 (left s________)))
 (let (($x1105 (= ?x845 ?x707)))
 (let ((?x741 (right s_______)))
 (let ((?x1072 (top ?x741)))
 (let ((?x1073 (stack ?x1072 ?x707)))
 (let (($x1099 (= ?x845 ?x1073)))
 (let (($x1075 ((_ is stack ) ?x741)))
 (let (($x1078 (= c_______ right-to-left)))
 (let (($x1079 (and $x1078 $x1075)))
 (let ((?x927 (center s_______)))
 (let (($x1080 ((_ is stack ) ?x927)))
 (let (($x1081 (= c_______ center-to-right)))
 (let (($x1082 (and $x1081 $x1080)))
 (let ((?x1068 (top ?x927)))
 (let ((?x1069 (stack ?x1068 ?x707)))
 (let (($x1096 (= ?x845 ?x1069)))
 (let (($x1083 (= c_______ center-to-left)))
 (let (($x1084 (and $x1083 $x1080)))
 (let ((?x878 (rest ?x707)))
 (let (($x1092 (= ?x845 ?x878)))
 (let (($x1085 ((_ is stack ) ?x707)))
 (let (($x1086 (= c_______ left-to-right)))
 (let (($x1087 (and $x1086 $x1085)))
 (let (($x1088 (= c_______ left-to-center)))
 (let (($x1089 (and $x1088 $x1085)))
 (ite $x1089 $x1092 (ite $x1087 $x1092 (ite $x1084 $x1096 (ite $x1082 $x1105 (ite $x1079 $x1099 $x1105))))))))))))))))))))))))))))))))
(assert
 (let ((?x741 (right s_______)))
 (let ((?x879 (right s________)))
 (let (($x1101 (= ?x879 ?x741)))
 (let ((?x1071 (rest ?x741)))
 (let (($x1098 (= ?x879 ?x1071)))
 (let (($x1075 ((_ is stack ) ?x741)))
 (let (($x1076 (= c_______ right-to-center)))
 (let (($x1077 (and $x1076 $x1075)))
 (let (($x1078 (= c_______ right-to-left)))
 (let (($x1079 (and $x1078 $x1075)))
 (let ((?x927 (center s_______)))
 (let ((?x1068 (top ?x927)))
 (let ((?x1070 (stack ?x1068 ?x741)))
 (let (($x1097 (= ?x879 ?x1070)))
 (let (($x1080 ((_ is stack ) ?x927)))
 (let (($x1081 (= c_______ center-to-right)))
 (let (($x1082 (and $x1081 $x1080)))
 (let (($x1083 (= c_______ center-to-left)))
 (let (($x1084 (and $x1083 $x1080)))
 (let ((?x707 (left s_______)))
 (let (($x1085 ((_ is stack ) ?x707)))
 (let (($x1086 (= c_______ left-to-right)))
 (let (($x1087 (and $x1086 $x1085)))
 (let (($x1118 (ite $x1087 $x1101 (ite $x1084 $x1101 (ite $x1082 $x1097 (ite $x1079 $x1098 (ite $x1077 $x1098 $x1101)))))))
 (let ((?x925 (top ?x707)))
 (let ((?x1064 (stack ?x925 ?x741)))
 (let (($x1093 (= ?x879 ?x1064)))
 (let (($x1088 (= c_______ left-to-center)))
 (let (($x1089 (and $x1088 $x1085)))
 (ite $x1089 $x1093 $x1118)))))))))))))))))))))))))))))))
(assert
 (let ((?x927 (center s_______)))
 (let ((?x1065 (center s________)))
 (let (($x1103 (= ?x1065 ?x927)))
 (let ((?x741 (right s_______)))
 (let ((?x1072 (top ?x741)))
 (let ((?x1074 (stack ?x1072 ?x927)))
 (let (($x1100 (= ?x1065 ?x1074)))
 (let (($x1075 ((_ is stack ) ?x741)))
 (let (($x1076 (= c_______ right-to-center)))
 (let (($x1077 (and $x1076 $x1075)))
 (let (($x1078 (= c_______ right-to-left)))
 (let (($x1079 (and $x1078 $x1075)))
 (let ((?x1067 (rest ?x927)))
 (let (($x1095 (= ?x1065 ?x1067)))
 (let (($x1080 ((_ is stack ) ?x927)))
 (let (($x1081 (= c_______ center-to-right)))
 (let (($x1082 (and $x1081 $x1080)))
 (let (($x1083 (= c_______ center-to-left)))
 (let (($x1084 (and $x1083 $x1080)))
 (let ((?x707 (left s_______)))
 (let ((?x925 (top ?x707)))
 (let ((?x1066 (stack ?x925 ?x927)))
 (let (($x1094 (= ?x1065 ?x1066)))
 (let (($x1085 ((_ is stack ) ?x707)))
 (let (($x1086 (= c_______ left-to-right)))
 (let (($x1087 (and $x1086 $x1085)))
 (let (($x1117 (ite $x1087 $x1094 (ite $x1084 $x1095 (ite $x1082 $x1095 (ite $x1079 $x1103 (ite $x1077 $x1100 $x1103)))))))
 (let (($x1088 (= c_______ left-to-center)))
 (let (($x1089 (and $x1088 $x1085)))
 (ite $x1089 $x1103 $x1117)))))))))))))))))))))))))))))))
(assert
 (= c_________ c!8))
(assert
 (let ((?x845 (left s________)))
 (let ((?x983 (left s_________)))
 (let (($x1243 (= ?x983 ?x845)))
 (let ((?x879 (right s________)))
 (let ((?x1210 (top ?x879)))
 (let ((?x1211 (stack ?x1210 ?x845)))
 (let (($x1237 (= ?x983 ?x1211)))
 (let (($x1213 ((_ is stack ) ?x879)))
 (let (($x1216 (= c________ right-to-left)))
 (let (($x1217 (and $x1216 $x1213)))
 (let ((?x1065 (center s________)))
 (let (($x1218 ((_ is stack ) ?x1065)))
 (let (($x1219 (= c________ center-to-right)))
 (let (($x1220 (and $x1219 $x1218)))
 (let ((?x1206 (top ?x1065)))
 (let ((?x1207 (stack ?x1206 ?x845)))
 (let (($x1234 (= ?x983 ?x1207)))
 (let (($x1221 (= c________ center-to-left)))
 (let (($x1222 (and $x1221 $x1218)))
 (let ((?x1016 (rest ?x845)))
 (let (($x1230 (= ?x983 ?x1016)))
 (let (($x1223 ((_ is stack ) ?x845)))
 (let (($x1224 (= c________ left-to-right)))
 (let (($x1225 (and $x1224 $x1223)))
 (let (($x1226 (= c________ left-to-center)))
 (let (($x1227 (and $x1226 $x1223)))
 (ite $x1227 $x1230 (ite $x1225 $x1230 (ite $x1222 $x1234 (ite $x1220 $x1243 (ite $x1217 $x1237 $x1243))))))))))))))))))))))))))))))))
(assert
 (let ((?x879 (right s________)))
 (let ((?x1017 (right s_________)))
 (let (($x1239 (= ?x1017 ?x879)))
 (let ((?x1209 (rest ?x879)))
 (let (($x1236 (= ?x1017 ?x1209)))
 (let (($x1213 ((_ is stack ) ?x879)))
 (let (($x1214 (= c________ right-to-center)))
 (let (($x1215 (and $x1214 $x1213)))
 (let (($x1216 (= c________ right-to-left)))
 (let (($x1217 (and $x1216 $x1213)))
 (let ((?x1065 (center s________)))
 (let ((?x1206 (top ?x1065)))
 (let ((?x1208 (stack ?x1206 ?x879)))
 (let (($x1235 (= ?x1017 ?x1208)))
 (let (($x1218 ((_ is stack ) ?x1065)))
 (let (($x1219 (= c________ center-to-right)))
 (let (($x1220 (and $x1219 $x1218)))
 (let (($x1221 (= c________ center-to-left)))
 (let (($x1222 (and $x1221 $x1218)))
 (let ((?x845 (left s________)))
 (let (($x1223 ((_ is stack ) ?x845)))
 (let (($x1224 (= c________ left-to-right)))
 (let (($x1225 (and $x1224 $x1223)))
 (let (($x1256 (ite $x1225 $x1239 (ite $x1222 $x1239 (ite $x1220 $x1235 (ite $x1217 $x1236 (ite $x1215 $x1236 $x1239)))))))
 (let ((?x1063 (top ?x845)))
 (let ((?x1202 (stack ?x1063 ?x879)))
 (let (($x1231 (= ?x1017 ?x1202)))
 (let (($x1226 (= c________ left-to-center)))
 (let (($x1227 (and $x1226 $x1223)))
 (ite $x1227 $x1231 $x1256)))))))))))))))))))))))))))))))
(assert
 (let ((?x1065 (center s________)))
 (let ((?x1203 (center s_________)))
 (let (($x1241 (= ?x1203 ?x1065)))
 (let ((?x879 (right s________)))
 (let ((?x1210 (top ?x879)))
 (let ((?x1212 (stack ?x1210 ?x1065)))
 (let (($x1238 (= ?x1203 ?x1212)))
 (let (($x1213 ((_ is stack ) ?x879)))
 (let (($x1214 (= c________ right-to-center)))
 (let (($x1215 (and $x1214 $x1213)))
 (let (($x1216 (= c________ right-to-left)))
 (let (($x1217 (and $x1216 $x1213)))
 (let ((?x1205 (rest ?x1065)))
 (let (($x1233 (= ?x1203 ?x1205)))
 (let (($x1218 ((_ is stack ) ?x1065)))
 (let (($x1219 (= c________ center-to-right)))
 (let (($x1220 (and $x1219 $x1218)))
 (let (($x1221 (= c________ center-to-left)))
 (let (($x1222 (and $x1221 $x1218)))
 (let ((?x845 (left s________)))
 (let ((?x1063 (top ?x845)))
 (let ((?x1204 (stack ?x1063 ?x1065)))
 (let (($x1232 (= ?x1203 ?x1204)))
 (let (($x1223 ((_ is stack ) ?x845)))
 (let (($x1224 (= c________ left-to-right)))
 (let (($x1225 (and $x1224 $x1223)))
 (let (($x1255 (ite $x1225 $x1232 (ite $x1222 $x1233 (ite $x1220 $x1233 (ite $x1217 $x1241 (ite $x1215 $x1238 $x1241)))))))
 (let (($x1226 (= c________ left-to-center)))
 (let (($x1227 (and $x1226 $x1223)))
 (ite $x1227 $x1241 $x1255)))))))))))))))))))))))))))))))
(assert
 (let ((?x58 (stack J (stack H (stack E empty)))))
 (let ((?x1017 (right s_________)))
 (let (($x1259 (= ?x1017 ?x58)))
 (let ((?x52 (stack P (stack F (stack B (stack K (stack G (stack A empty))))))))
 (let ((?x55 (stack I (stack C (stack L ?x52)))))
 (let ((?x1203 (center s_________)))
 (let (($x1290 (= ?x1203 ?x55)))
 (let ((?x47 (stack D (stack M (stack O (stack N empty))))))
 (let ((?x983 (left s_________)))
 (let (($x1291 (= ?x983 ?x47)))
 (let (($x1293 (not (and $x1291 $x1290 $x1259))))
 (not $x1293)))))))))))))
(check-sat)
(exit)
