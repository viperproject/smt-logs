(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x25 (stack H empty)))
 (let ((?x26 (stack J ?x25)))
 (let ((?x27 (stack D ?x26)))
 (let ((?x28 (stack M ?x27)))
 (let ((?x29 (stack A ?x28)))
 (let ((?x96 (left s_tmp_)))
 (= ?x96 ?x29))))))))
(assert
 (let ((?x99 (center s_tmp__)))
 (= ?x99 empty)))
(assert
 (let ((?x30 (stack B empty)))
 (let ((?x31 (stack C ?x30)))
 (let ((?x32 (stack E ?x31)))
 (let ((?x33 (stack F ?x32)))
 (let ((?x34 (stack G ?x33)))
 (let ((?x35 (stack I ?x34)))
 (let ((?x36 (stack K ?x35)))
 (let ((?x37 (stack L ?x36)))
 (let ((?x102 (right s_tmp___)))
 (= ?x102 ?x37)))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x129 (left s_tmp__)))
 (= (left s_tmp___) ?x129)))
(assert
 (let ((?x99 (center s_tmp__)))
 (= (center s_tmp___) ?x99)))
(assert
 (let ((?x133 (center s_tmp_)))
 (= ?x133 (center s_tmp))))
(assert
 (let ((?x136 (right s_tmp_)))
 (= ?x136 (right s_tmp))))
(assert
 (let ((?x96 (left s_tmp_)))
 (let ((?x129 (left s_tmp__)))
 (= ?x129 ?x96))))
(assert
 (let ((?x136 (right s_tmp_)))
 (let ((?x140 (right s_tmp__)))
 (= ?x140 ?x136))))
(assert
 (= c__ c!1))
(assert
 (let ((?x73 (left s_)))
 (let ((?x229 (left s__)))
 (let (($x268 (= ?x229 ?x73)))
 (let ((?x76 (right s_)))
 (let (($x232 ((_ is stack ) ?x76)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x242 (and $x241 $x232)))
 (let ((?x78 (center s_)))
 (let (($x243 ((_ is stack ) ?x78)))
 (let (($x245 (and (= c_ center-to-right) $x243)))
 (let (($x247 (and (= c_ center-to-left) $x243)))
 (let (($x277 (ite $x247 (= ?x229 (stack (top ?x78) ?x73)) (ite $x245 $x268 (ite $x242 (= ?x229 (stack (top ?x76) ?x73)) $x268)))))
 (let (($x255 (= ?x229 (rest ?x73))))
 (let (($x248 ((_ is stack ) ?x73)))
 (let (($x249 (= c_ left-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x251 (= c_ left-to-center)))
 (let (($x252 (and $x251 $x248)))
 (ite $x252 $x255 (ite $x250 $x255 $x277)))))))))))))))))))))
(assert
 (let ((?x76 (right s_)))
 (let ((?x234 (right s__)))
 (let (($x264 (= ?x234 ?x76)))
 (let (($x261 (= ?x234 (rest ?x76))))
 (let (($x232 ((_ is stack ) ?x76)))
 (let (($x239 (= c_ right-to-center)))
 (let (($x240 (and $x239 $x232)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x242 (and $x241 $x232)))
 (let ((?x78 (center s_)))
 (let (($x243 ((_ is stack ) ?x78)))
 (let (($x245 (and (= c_ center-to-right) $x243)))
 (let (($x274 (ite $x245 (= ?x234 (stack (top ?x78) ?x76)) (ite $x242 $x261 (ite $x240 $x261 $x264)))))
 (let (($x247 (and (= c_ center-to-left) $x243)))
 (let ((?x73 (left s_)))
 (let (($x248 ((_ is stack ) ?x73)))
 (let (($x249 (= c_ left-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x251 (= c_ left-to-center)))
 (let (($x252 (and $x251 $x248)))
 (ite $x252 (= ?x234 (stack (top ?x73) ?x76)) (ite $x250 $x264 (ite $x247 $x264 $x274))))))))))))))))))))))))
(assert
 (let ((?x78 (center s_)))
 (let ((?x237 (center s__)))
 (let (($x266 (= ?x237 ?x78)))
 (let ((?x76 (right s_)))
 (let (($x232 ((_ is stack ) ?x76)))
 (let (($x239 (= c_ right-to-center)))
 (let (($x240 (and $x239 $x232)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x242 (and $x241 $x232)))
 (let (($x258 (= ?x237 (rest ?x78))))
 (let (($x243 ((_ is stack ) ?x78)))
 (let (($x245 (and (= c_ center-to-right) $x243)))
 (let (($x273 (ite $x245 $x258 (ite $x242 $x266 (ite $x240 (= ?x237 (stack (top ?x76) ?x78)) $x266)))))
 (let (($x247 (and (= c_ center-to-left) $x243)))
 (let ((?x73 (left s_)))
 (let (($x248 ((_ is stack ) ?x73)))
 (let (($x249 (= c_ left-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x251 (= c_ left-to-center)))
 (let (($x252 (and $x251 $x248)))
 (ite $x252 $x266 (ite $x250 (= ?x237 (stack (top ?x73) ?x78)) (ite $x247 $x258 $x273))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x229 (left s__)))
 (let ((?x143 (left s___)))
 (let (($x379 (= ?x143 ?x229)))
 (let ((?x234 (right s__)))
 (let ((?x346 (top ?x234)))
 (let ((?x347 (stack ?x346 ?x229)))
 (let (($x373 (= ?x143 ?x347)))
 (let (($x349 ((_ is stack ) ?x234)))
 (let (($x352 (= c__ right-to-left)))
 (let (($x353 (and $x352 $x349)))
 (let ((?x237 (center s__)))
 (let (($x354 ((_ is stack ) ?x237)))
 (let (($x355 (= c__ center-to-right)))
 (let (($x356 (and $x355 $x354)))
 (let ((?x342 (top ?x237)))
 (let ((?x343 (stack ?x342 ?x229)))
 (let (($x370 (= ?x143 ?x343)))
 (let (($x357 (= c__ center-to-left)))
 (let (($x358 (and $x357 $x354)))
 (let ((?x145 (rest ?x229)))
 (let (($x366 (= ?x143 ?x145)))
 (let (($x359 ((_ is stack ) ?x229)))
 (let (($x360 (= c__ left-to-right)))
 (let (($x361 (and $x360 $x359)))
 (let (($x362 (= c__ left-to-center)))
 (let (($x363 (and $x362 $x359)))
 (ite $x363 $x366 (ite $x361 $x366 (ite $x358 $x370 (ite $x356 $x379 (ite $x353 $x373 $x379))))))))))))))))))))))))))))))))
(assert
 (let ((?x234 (right s__)))
 (let ((?x146 (right s___)))
 (let (($x375 (= ?x146 ?x234)))
 (let ((?x345 (rest ?x234)))
 (let (($x372 (= ?x146 ?x345)))
 (let (($x349 ((_ is stack ) ?x234)))
 (let (($x350 (= c__ right-to-center)))
 (let (($x351 (and $x350 $x349)))
 (let (($x352 (= c__ right-to-left)))
 (let (($x353 (and $x352 $x349)))
 (let ((?x237 (center s__)))
 (let ((?x342 (top ?x237)))
 (let ((?x344 (stack ?x342 ?x234)))
 (let (($x371 (= ?x146 ?x344)))
 (let (($x354 ((_ is stack ) ?x237)))
 (let (($x355 (= c__ center-to-right)))
 (let (($x356 (and $x355 $x354)))
 (let (($x357 (= c__ center-to-left)))
 (let (($x358 (and $x357 $x354)))
 (let ((?x229 (left s__)))
 (let (($x359 ((_ is stack ) ?x229)))
 (let (($x360 (= c__ left-to-right)))
 (let (($x361 (and $x360 $x359)))
 (let (($x392 (ite $x361 $x375 (ite $x358 $x375 (ite $x356 $x371 (ite $x353 $x372 (ite $x351 $x372 $x375)))))))
 (let ((?x220 (top ?x229)))
 (let ((?x338 (stack ?x220 ?x234)))
 (let (($x367 (= ?x146 ?x338)))
 (let (($x362 (= c__ left-to-center)))
 (let (($x363 (and $x362 $x359)))
 (ite $x363 $x367 $x392)))))))))))))))))))))))))))))))
(assert
 (let ((?x237 (center s__)))
 (let ((?x339 (center s___)))
 (let (($x377 (= ?x339 ?x237)))
 (let ((?x234 (right s__)))
 (let ((?x346 (top ?x234)))
 (let ((?x348 (stack ?x346 ?x237)))
 (let (($x374 (= ?x339 ?x348)))
 (let (($x349 ((_ is stack ) ?x234)))
 (let (($x350 (= c__ right-to-center)))
 (let (($x351 (and $x350 $x349)))
 (let (($x352 (= c__ right-to-left)))
 (let (($x353 (and $x352 $x349)))
 (let ((?x341 (rest ?x237)))
 (let (($x369 (= ?x339 ?x341)))
 (let (($x354 ((_ is stack ) ?x237)))
 (let (($x355 (= c__ center-to-right)))
 (let (($x356 (and $x355 $x354)))
 (let (($x357 (= c__ center-to-left)))
 (let (($x358 (and $x357 $x354)))
 (let ((?x229 (left s__)))
 (let ((?x220 (top ?x229)))
 (let ((?x340 (stack ?x220 ?x237)))
 (let (($x368 (= ?x339 ?x340)))
 (let (($x359 ((_ is stack ) ?x229)))
 (let (($x360 (= c__ left-to-right)))
 (let (($x361 (and $x360 $x359)))
 (let (($x391 (ite $x361 $x368 (ite $x358 $x369 (ite $x356 $x369 (ite $x353 $x377 (ite $x351 $x374 $x377)))))))
 (let (($x362 (= c__ left-to-center)))
 (let (($x363 (and $x362 $x359)))
 (ite $x363 $x377 $x391)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x143 (left s___)))
 (let ((?x284 (left s____)))
 (let (($x517 (= ?x284 ?x143)))
 (let ((?x146 (right s___)))
 (let ((?x484 (top ?x146)))
 (let ((?x485 (stack ?x484 ?x143)))
 (let (($x511 (= ?x284 ?x485)))
 (let (($x487 ((_ is stack ) ?x146)))
 (let (($x490 (= c___ right-to-left)))
 (let (($x491 (and $x490 $x487)))
 (let ((?x339 (center s___)))
 (let (($x492 ((_ is stack ) ?x339)))
 (let (($x493 (= c___ center-to-right)))
 (let (($x494 (and $x493 $x492)))
 (let ((?x480 (top ?x339)))
 (let ((?x481 (stack ?x480 ?x143)))
 (let (($x508 (= ?x284 ?x481)))
 (let (($x495 (= c___ center-to-left)))
 (let (($x496 (and $x495 $x492)))
 (let ((?x315 (rest ?x143)))
 (let (($x504 (= ?x284 ?x315)))
 (let (($x497 ((_ is stack ) ?x143)))
 (let (($x498 (= c___ left-to-right)))
 (let (($x499 (and $x498 $x497)))
 (let (($x500 (= c___ left-to-center)))
 (let (($x501 (and $x500 $x497)))
 (ite $x501 $x504 (ite $x499 $x504 (ite $x496 $x508 (ite $x494 $x517 (ite $x491 $x511 $x517))))))))))))))))))))))))))))))))
(assert
 (let ((?x146 (right s___)))
 (let ((?x316 (right s____)))
 (let (($x513 (= ?x316 ?x146)))
 (let ((?x483 (rest ?x146)))
 (let (($x510 (= ?x316 ?x483)))
 (let (($x487 ((_ is stack ) ?x146)))
 (let (($x488 (= c___ right-to-center)))
 (let (($x489 (and $x488 $x487)))
 (let (($x490 (= c___ right-to-left)))
 (let (($x491 (and $x490 $x487)))
 (let ((?x339 (center s___)))
 (let ((?x480 (top ?x339)))
 (let ((?x482 (stack ?x480 ?x146)))
 (let (($x509 (= ?x316 ?x482)))
 (let (($x492 ((_ is stack ) ?x339)))
 (let (($x493 (= c___ center-to-right)))
 (let (($x494 (and $x493 $x492)))
 (let (($x495 (= c___ center-to-left)))
 (let (($x496 (and $x495 $x492)))
 (let ((?x143 (left s___)))
 (let (($x497 ((_ is stack ) ?x143)))
 (let (($x498 (= c___ left-to-right)))
 (let (($x499 (and $x498 $x497)))
 (let (($x530 (ite $x499 $x513 (ite $x496 $x513 (ite $x494 $x509 (ite $x491 $x510 (ite $x489 $x510 $x513)))))))
 (let ((?x337 (top ?x143)))
 (let ((?x476 (stack ?x337 ?x146)))
 (let (($x505 (= ?x316 ?x476)))
 (let (($x500 (= c___ left-to-center)))
 (let (($x501 (and $x500 $x497)))
 (ite $x501 $x505 $x530)))))))))))))))))))))))))))))))
(assert
 (let ((?x339 (center s___)))
 (let ((?x477 (center s____)))
 (let (($x515 (= ?x477 ?x339)))
 (let ((?x146 (right s___)))
 (let ((?x484 (top ?x146)))
 (let ((?x486 (stack ?x484 ?x339)))
 (let (($x512 (= ?x477 ?x486)))
 (let (($x487 ((_ is stack ) ?x146)))
 (let (($x488 (= c___ right-to-center)))
 (let (($x489 (and $x488 $x487)))
 (let (($x490 (= c___ right-to-left)))
 (let (($x491 (and $x490 $x487)))
 (let ((?x479 (rest ?x339)))
 (let (($x507 (= ?x477 ?x479)))
 (let (($x492 ((_ is stack ) ?x339)))
 (let (($x493 (= c___ center-to-right)))
 (let (($x494 (and $x493 $x492)))
 (let (($x495 (= c___ center-to-left)))
 (let (($x496 (and $x495 $x492)))
 (let ((?x143 (left s___)))
 (let ((?x337 (top ?x143)))
 (let ((?x478 (stack ?x337 ?x339)))
 (let (($x506 (= ?x477 ?x478)))
 (let (($x497 ((_ is stack ) ?x143)))
 (let (($x498 (= c___ left-to-right)))
 (let (($x499 (and $x498 $x497)))
 (let (($x529 (ite $x499 $x506 (ite $x496 $x507 (ite $x494 $x507 (ite $x491 $x515 (ite $x489 $x512 $x515)))))))
 (let (($x500 (= c___ left-to-center)))
 (let (($x501 (and $x500 $x497)))
 (ite $x501 $x515 $x529)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x284 (left s____)))
 (let ((?x395 (left s_____)))
 (let (($x655 (= ?x395 ?x284)))
 (let ((?x316 (right s____)))
 (let ((?x622 (top ?x316)))
 (let ((?x623 (stack ?x622 ?x284)))
 (let (($x649 (= ?x395 ?x623)))
 (let (($x625 ((_ is stack ) ?x316)))
 (let (($x628 (= c____ right-to-left)))
 (let (($x629 (and $x628 $x625)))
 (let ((?x477 (center s____)))
 (let (($x630 ((_ is stack ) ?x477)))
 (let (($x631 (= c____ center-to-right)))
 (let (($x632 (and $x631 $x630)))
 (let ((?x618 (top ?x477)))
 (let ((?x619 (stack ?x618 ?x284)))
 (let (($x646 (= ?x395 ?x619)))
 (let (($x633 (= c____ center-to-left)))
 (let (($x634 (and $x633 $x630)))
 (let ((?x428 (rest ?x284)))
 (let (($x642 (= ?x395 ?x428)))
 (let (($x635 ((_ is stack ) ?x284)))
 (let (($x636 (= c____ left-to-right)))
 (let (($x637 (and $x636 $x635)))
 (let (($x638 (= c____ left-to-center)))
 (let (($x639 (and $x638 $x635)))
 (ite $x639 $x642 (ite $x637 $x642 (ite $x634 $x646 (ite $x632 $x655 (ite $x629 $x649 $x655))))))))))))))))))))))))))))))))
(assert
 (let ((?x316 (right s____)))
 (let ((?x429 (right s_____)))
 (let (($x651 (= ?x429 ?x316)))
 (let ((?x621 (rest ?x316)))
 (let (($x648 (= ?x429 ?x621)))
 (let (($x625 ((_ is stack ) ?x316)))
 (let (($x626 (= c____ right-to-center)))
 (let (($x627 (and $x626 $x625)))
 (let (($x628 (= c____ right-to-left)))
 (let (($x629 (and $x628 $x625)))
 (let ((?x477 (center s____)))
 (let ((?x618 (top ?x477)))
 (let ((?x620 (stack ?x618 ?x316)))
 (let (($x647 (= ?x429 ?x620)))
 (let (($x630 ((_ is stack ) ?x477)))
 (let (($x631 (= c____ center-to-right)))
 (let (($x632 (and $x631 $x630)))
 (let (($x633 (= c____ center-to-left)))
 (let (($x634 (and $x633 $x630)))
 (let ((?x284 (left s____)))
 (let (($x635 ((_ is stack ) ?x284)))
 (let (($x636 (= c____ left-to-right)))
 (let (($x637 (and $x636 $x635)))
 (let (($x668 (ite $x637 $x651 (ite $x634 $x651 (ite $x632 $x647 (ite $x629 $x648 (ite $x627 $x648 $x651)))))))
 (let ((?x475 (top ?x284)))
 (let ((?x614 (stack ?x475 ?x316)))
 (let (($x643 (= ?x429 ?x614)))
 (let (($x638 (= c____ left-to-center)))
 (let (($x639 (and $x638 $x635)))
 (ite $x639 $x643 $x668)))))))))))))))))))))))))))))))
(assert
 (let ((?x477 (center s____)))
 (let ((?x615 (center s_____)))
 (let (($x653 (= ?x615 ?x477)))
 (let ((?x316 (right s____)))
 (let ((?x622 (top ?x316)))
 (let ((?x624 (stack ?x622 ?x477)))
 (let (($x650 (= ?x615 ?x624)))
 (let (($x625 ((_ is stack ) ?x316)))
 (let (($x626 (= c____ right-to-center)))
 (let (($x627 (and $x626 $x625)))
 (let (($x628 (= c____ right-to-left)))
 (let (($x629 (and $x628 $x625)))
 (let ((?x617 (rest ?x477)))
 (let (($x645 (= ?x615 ?x617)))
 (let (($x630 ((_ is stack ) ?x477)))
 (let (($x631 (= c____ center-to-right)))
 (let (($x632 (and $x631 $x630)))
 (let (($x633 (= c____ center-to-left)))
 (let (($x634 (and $x633 $x630)))
 (let ((?x284 (left s____)))
 (let ((?x475 (top ?x284)))
 (let ((?x616 (stack ?x475 ?x477)))
 (let (($x644 (= ?x615 ?x616)))
 (let (($x635 ((_ is stack ) ?x284)))
 (let (($x636 (= c____ left-to-right)))
 (let (($x637 (and $x636 $x635)))
 (let (($x667 (ite $x637 $x644 (ite $x634 $x645 (ite $x632 $x645 (ite $x629 $x653 (ite $x627 $x650 $x653)))))))
 (let (($x638 (= c____ left-to-center)))
 (let (($x639 (and $x638 $x635)))
 (ite $x639 $x653 $x667)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x395 (left s_____)))
 (let ((?x533 (left s______)))
 (let (($x793 (= ?x533 ?x395)))
 (let ((?x429 (right s_____)))
 (let ((?x760 (top ?x429)))
 (let ((?x761 (stack ?x760 ?x395)))
 (let (($x787 (= ?x533 ?x761)))
 (let (($x763 ((_ is stack ) ?x429)))
 (let (($x766 (= c_____ right-to-left)))
 (let (($x767 (and $x766 $x763)))
 (let ((?x615 (center s_____)))
 (let (($x768 ((_ is stack ) ?x615)))
 (let (($x769 (= c_____ center-to-right)))
 (let (($x770 (and $x769 $x768)))
 (let ((?x756 (top ?x615)))
 (let ((?x757 (stack ?x756 ?x395)))
 (let (($x784 (= ?x533 ?x757)))
 (let (($x771 (= c_____ center-to-left)))
 (let (($x772 (and $x771 $x768)))
 (let ((?x566 (rest ?x395)))
 (let (($x780 (= ?x533 ?x566)))
 (let (($x773 ((_ is stack ) ?x395)))
 (let (($x774 (= c_____ left-to-right)))
 (let (($x775 (and $x774 $x773)))
 (let (($x776 (= c_____ left-to-center)))
 (let (($x777 (and $x776 $x773)))
 (ite $x777 $x780 (ite $x775 $x780 (ite $x772 $x784 (ite $x770 $x793 (ite $x767 $x787 $x793))))))))))))))))))))))))))))))))
(assert
 (let ((?x429 (right s_____)))
 (let ((?x567 (right s______)))
 (let (($x789 (= ?x567 ?x429)))
 (let ((?x759 (rest ?x429)))
 (let (($x786 (= ?x567 ?x759)))
 (let (($x763 ((_ is stack ) ?x429)))
 (let (($x764 (= c_____ right-to-center)))
 (let (($x765 (and $x764 $x763)))
 (let (($x766 (= c_____ right-to-left)))
 (let (($x767 (and $x766 $x763)))
 (let ((?x615 (center s_____)))
 (let ((?x756 (top ?x615)))
 (let ((?x758 (stack ?x756 ?x429)))
 (let (($x785 (= ?x567 ?x758)))
 (let (($x768 ((_ is stack ) ?x615)))
 (let (($x769 (= c_____ center-to-right)))
 (let (($x770 (and $x769 $x768)))
 (let (($x771 (= c_____ center-to-left)))
 (let (($x772 (and $x771 $x768)))
 (let ((?x395 (left s_____)))
 (let (($x773 ((_ is stack ) ?x395)))
 (let (($x774 (= c_____ left-to-right)))
 (let (($x775 (and $x774 $x773)))
 (let (($x806 (ite $x775 $x789 (ite $x772 $x789 (ite $x770 $x785 (ite $x767 $x786 (ite $x765 $x786 $x789)))))))
 (let ((?x613 (top ?x395)))
 (let ((?x752 (stack ?x613 ?x429)))
 (let (($x781 (= ?x567 ?x752)))
 (let (($x776 (= c_____ left-to-center)))
 (let (($x777 (and $x776 $x773)))
 (ite $x777 $x781 $x806)))))))))))))))))))))))))))))))
(assert
 (let ((?x615 (center s_____)))
 (let ((?x753 (center s______)))
 (let (($x791 (= ?x753 ?x615)))
 (let ((?x429 (right s_____)))
 (let ((?x760 (top ?x429)))
 (let ((?x762 (stack ?x760 ?x615)))
 (let (($x788 (= ?x753 ?x762)))
 (let (($x763 ((_ is stack ) ?x429)))
 (let (($x764 (= c_____ right-to-center)))
 (let (($x765 (and $x764 $x763)))
 (let (($x766 (= c_____ right-to-left)))
 (let (($x767 (and $x766 $x763)))
 (let ((?x755 (rest ?x615)))
 (let (($x783 (= ?x753 ?x755)))
 (let (($x768 ((_ is stack ) ?x615)))
 (let (($x769 (= c_____ center-to-right)))
 (let (($x770 (and $x769 $x768)))
 (let (($x771 (= c_____ center-to-left)))
 (let (($x772 (and $x771 $x768)))
 (let ((?x395 (left s_____)))
 (let ((?x613 (top ?x395)))
 (let ((?x754 (stack ?x613 ?x615)))
 (let (($x782 (= ?x753 ?x754)))
 (let (($x773 ((_ is stack ) ?x395)))
 (let (($x774 (= c_____ left-to-right)))
 (let (($x775 (and $x774 $x773)))
 (let (($x805 (ite $x775 $x782 (ite $x772 $x783 (ite $x770 $x783 (ite $x767 $x791 (ite $x765 $x788 $x791)))))))
 (let (($x776 (= c_____ left-to-center)))
 (let (($x777 (and $x776 $x773)))
 (ite $x777 $x791 $x805)))))))))))))))))))))))))))))))
(assert
 (let ((?x30 (stack B empty)))
 (let ((?x567 (right s______)))
 (let (($x809 (= ?x567 ?x30)))
 (let ((?x49 (stack M (stack K (stack D (stack C (stack J empty)))))))
 (let ((?x753 (center s______)))
 (let (($x840 (= ?x753 ?x49)))
 (let ((?x43 (stack G (stack E (stack F (stack I (stack H (stack A empty))))))))
 (let ((?x44 (stack L ?x43)))
 (let ((?x533 (left s______)))
 (let (($x841 (= ?x533 ?x44)))
 (let (($x843 (not (and $x841 $x840 $x809))))
 (not $x843)))))))))))))
(check-sat)
(exit)
