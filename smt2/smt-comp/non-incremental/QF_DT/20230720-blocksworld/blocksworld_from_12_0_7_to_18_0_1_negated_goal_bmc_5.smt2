(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x32 (stack N empty)))
 (let ((?x31 (stack F ?x32)))
 (let ((?x33 (stack D ?x31)))
 (let ((?x34 (stack O ?x33)))
 (let ((?x35 (stack S ?x34)))
 (let ((?x36 (stack C ?x35)))
 (let ((?x37 (stack Q ?x36)))
 (let ((?x38 (stack L ?x37)))
 (let ((?x39 (stack P ?x38)))
 (let ((?x40 (stack J ?x39)))
 (let ((?x41 (stack M ?x40)))
 (let ((?x42 (stack A ?x41)))
 (let ((?x115 (left s_tmp_)))
 (= ?x115 ?x42)))))))))))))))
(assert
 (let ((?x118 (center s_tmp__)))
 (= ?x118 empty)))
(assert
 (let ((?x43 (stack B empty)))
 (let ((?x44 (stack E ?x43)))
 (let ((?x45 (stack G ?x44)))
 (let ((?x46 (stack H ?x45)))
 (let ((?x47 (stack I ?x46)))
 (let ((?x48 (stack K ?x47)))
 (let ((?x49 (stack R ?x48)))
 (let ((?x121 (right s_tmp___)))
 (= ?x121 ?x49))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x148 (left s_tmp__)))
 (= (left s_tmp___) ?x148)))
(assert
 (let ((?x118 (center s_tmp__)))
 (= (center s_tmp___) ?x118)))
(assert
 (let ((?x152 (center s_tmp_)))
 (= ?x152 (center s_tmp))))
(assert
 (let ((?x155 (right s_tmp_)))
 (= ?x155 (right s_tmp))))
(assert
 (let ((?x115 (left s_tmp_)))
 (let ((?x148 (left s_tmp__)))
 (= ?x148 ?x115))))
(assert
 (let ((?x155 (right s_tmp_)))
 (let ((?x159 (right s_tmp__)))
 (= ?x159 ?x155))))
(assert
 (= c__ c!1))
(assert
 (let ((?x92 (left s_)))
 (let ((?x274 (left s__)))
 (let (($x304 (= ?x274 ?x92)))
 (let ((?x95 (right s_)))
 (let (($x277 ((_ is stack ) ?x95)))
 (let (($x295 (= c_ right-to-left)))
 (let (($x269 (and $x295 $x277)))
 (let ((?x97 (center s_)))
 (let (($x270 ((_ is stack ) ?x97)))
 (let (($x287 (and (= c_ center-to-right) $x270)))
 (let (($x289 (and (= c_ center-to-left) $x270)))
 (let (($x313 (ite $x289 (= ?x274 (stack (top ?x97) ?x92)) (ite $x287 $x304 (ite $x269 (= ?x274 (stack (top ?x95) ?x92)) $x304)))))
 (let (($x291 (= ?x274 (rest ?x92))))
 (let (($x257 ((_ is stack ) ?x92)))
 (let (($x258 (= c_ left-to-right)))
 (let (($x259 (and $x258 $x257)))
 (let (($x278 (= c_ left-to-center)))
 (let (($x279 (and $x278 $x257)))
 (ite $x279 $x291 (ite $x259 $x291 $x313)))))))))))))))))))))
(assert
 (let ((?x95 (right s_)))
 (let ((?x264 (right s__)))
 (let (($x300 (= ?x264 ?x95)))
 (let (($x297 (= ?x264 (rest ?x95))))
 (let (($x277 ((_ is stack ) ?x95)))
 (let (($x293 (= c_ right-to-center)))
 (let (($x294 (and $x293 $x277)))
 (let (($x295 (= c_ right-to-left)))
 (let (($x269 (and $x295 $x277)))
 (let ((?x97 (center s_)))
 (let (($x270 ((_ is stack ) ?x97)))
 (let (($x287 (and (= c_ center-to-right) $x270)))
 (let (($x310 (ite $x287 (= ?x264 (stack (top ?x97) ?x95)) (ite $x269 $x297 (ite $x294 $x297 $x300)))))
 (let (($x289 (and (= c_ center-to-left) $x270)))
 (let ((?x92 (left s_)))
 (let (($x257 ((_ is stack ) ?x92)))
 (let (($x258 (= c_ left-to-right)))
 (let (($x259 (and $x258 $x257)))
 (let (($x278 (= c_ left-to-center)))
 (let (($x279 (and $x278 $x257)))
 (ite $x279 (= ?x264 (stack (top ?x92) ?x95)) (ite $x259 $x300 (ite $x289 $x300 $x310))))))))))))))))))))))))
(assert
 (let ((?x97 (center s_)))
 (let ((?x285 (center s__)))
 (let (($x302 (= ?x285 ?x97)))
 (let ((?x95 (right s_)))
 (let (($x277 ((_ is stack ) ?x95)))
 (let (($x293 (= c_ right-to-center)))
 (let (($x294 (and $x293 $x277)))
 (let (($x295 (= c_ right-to-left)))
 (let (($x269 (and $x295 $x277)))
 (let (($x282 (= ?x285 (rest ?x97))))
 (let (($x270 ((_ is stack ) ?x97)))
 (let (($x287 (and (= c_ center-to-right) $x270)))
 (let (($x309 (ite $x287 $x282 (ite $x269 $x302 (ite $x294 (= ?x285 (stack (top ?x95) ?x97)) $x302)))))
 (let (($x289 (and (= c_ center-to-left) $x270)))
 (let ((?x92 (left s_)))
 (let (($x257 ((_ is stack ) ?x92)))
 (let (($x258 (= c_ left-to-right)))
 (let (($x259 (and $x258 $x257)))
 (let (($x278 (= c_ left-to-center)))
 (let (($x279 (and $x278 $x257)))
 (ite $x279 $x302 (ite $x259 (= ?x285 (stack (top ?x92) ?x97)) (ite $x289 $x282 $x309))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x274 (left s__)))
 (let ((?x164 (left s___)))
 (let (($x415 (= ?x164 ?x274)))
 (let ((?x264 (right s__)))
 (let ((?x382 (top ?x264)))
 (let ((?x383 (stack ?x382 ?x274)))
 (let (($x409 (= ?x164 ?x383)))
 (let (($x385 ((_ is stack ) ?x264)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x285 (center s__)))
 (let (($x390 ((_ is stack ) ?x285)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let ((?x378 (top ?x285)))
 (let ((?x379 (stack ?x378 ?x274)))
 (let (($x406 (= ?x164 ?x379)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x165 (rest ?x274)))
 (let (($x402 (= ?x164 ?x165)))
 (let (($x395 ((_ is stack ) ?x274)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x402 (ite $x397 $x402 (ite $x394 $x406 (ite $x392 $x415 (ite $x389 $x409 $x415))))))))))))))))))))))))))))))))
(assert
 (let ((?x264 (right s__)))
 (let ((?x256 (right s___)))
 (let (($x411 (= ?x256 ?x264)))
 (let ((?x381 (rest ?x264)))
 (let (($x408 (= ?x256 ?x381)))
 (let (($x385 ((_ is stack ) ?x264)))
 (let (($x386 (= c__ right-to-center)))
 (let (($x387 (and $x386 $x385)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x285 (center s__)))
 (let ((?x378 (top ?x285)))
 (let ((?x380 (stack ?x378 ?x264)))
 (let (($x407 (= ?x256 ?x380)))
 (let (($x390 ((_ is stack ) ?x285)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x274 (left s__)))
 (let (($x395 ((_ is stack ) ?x274)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x428 (ite $x397 $x411 (ite $x394 $x411 (ite $x392 $x407 (ite $x389 $x408 (ite $x387 $x408 $x411)))))))
 (let ((?x373 (top ?x274)))
 (let ((?x374 (stack ?x373 ?x264)))
 (let (($x403 (= ?x256 ?x374)))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x403 $x428)))))))))))))))))))))))))))))))
(assert
 (let ((?x285 (center s__)))
 (let ((?x375 (center s___)))
 (let (($x413 (= ?x375 ?x285)))
 (let ((?x264 (right s__)))
 (let ((?x382 (top ?x264)))
 (let ((?x384 (stack ?x382 ?x285)))
 (let (($x410 (= ?x375 ?x384)))
 (let (($x385 ((_ is stack ) ?x264)))
 (let (($x386 (= c__ right-to-center)))
 (let (($x387 (and $x386 $x385)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x377 (rest ?x285)))
 (let (($x405 (= ?x375 ?x377)))
 (let (($x390 ((_ is stack ) ?x285)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x274 (left s__)))
 (let ((?x373 (top ?x274)))
 (let ((?x376 (stack ?x373 ?x285)))
 (let (($x404 (= ?x375 ?x376)))
 (let (($x395 ((_ is stack ) ?x274)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x427 (ite $x397 $x404 (ite $x394 $x405 (ite $x392 $x405 (ite $x389 $x413 (ite $x387 $x410 $x413)))))))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x413 $x427)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x164 (left s___)))
 (let ((?x350 (left s____)))
 (let (($x554 (= ?x350 ?x164)))
 (let ((?x256 (right s___)))
 (let ((?x521 (top ?x256)))
 (let ((?x522 (stack ?x521 ?x164)))
 (let (($x548 (= ?x350 ?x522)))
 (let (($x524 ((_ is stack ) ?x256)))
 (let (($x527 (= c___ right-to-left)))
 (let (($x528 (and $x527 $x524)))
 (let ((?x375 (center s___)))
 (let (($x529 ((_ is stack ) ?x375)))
 (let (($x530 (= c___ center-to-right)))
 (let (($x531 (and $x530 $x529)))
 (let ((?x517 (top ?x375)))
 (let ((?x518 (stack ?x517 ?x164)))
 (let (($x545 (= ?x350 ?x518)))
 (let (($x532 (= c___ center-to-left)))
 (let (($x533 (and $x532 $x529)))
 (let ((?x351 (rest ?x164)))
 (let (($x541 (= ?x350 ?x351)))
 (let (($x534 ((_ is stack ) ?x164)))
 (let (($x535 (= c___ left-to-right)))
 (let (($x536 (and $x535 $x534)))
 (let (($x537 (= c___ left-to-center)))
 (let (($x538 (and $x537 $x534)))
 (ite $x538 $x541 (ite $x536 $x541 (ite $x533 $x545 (ite $x531 $x554 (ite $x528 $x548 $x554))))))))))))))))))))))))))))))))
(assert
 (let ((?x256 (right s___)))
 (let ((?x372 (right s____)))
 (let (($x550 (= ?x372 ?x256)))
 (let ((?x520 (rest ?x256)))
 (let (($x547 (= ?x372 ?x520)))
 (let (($x524 ((_ is stack ) ?x256)))
 (let (($x525 (= c___ right-to-center)))
 (let (($x526 (and $x525 $x524)))
 (let (($x527 (= c___ right-to-left)))
 (let (($x528 (and $x527 $x524)))
 (let ((?x375 (center s___)))
 (let ((?x517 (top ?x375)))
 (let ((?x519 (stack ?x517 ?x256)))
 (let (($x546 (= ?x372 ?x519)))
 (let (($x529 ((_ is stack ) ?x375)))
 (let (($x530 (= c___ center-to-right)))
 (let (($x531 (and $x530 $x529)))
 (let (($x532 (= c___ center-to-left)))
 (let (($x533 (and $x532 $x529)))
 (let ((?x164 (left s___)))
 (let (($x534 ((_ is stack ) ?x164)))
 (let (($x535 (= c___ left-to-right)))
 (let (($x536 (and $x535 $x534)))
 (let (($x567 (ite $x536 $x550 (ite $x533 $x550 (ite $x531 $x546 (ite $x528 $x547 (ite $x526 $x547 $x550)))))))
 (let ((?x512 (top ?x164)))
 (let ((?x513 (stack ?x512 ?x256)))
 (let (($x542 (= ?x372 ?x513)))
 (let (($x537 (= c___ left-to-center)))
 (let (($x538 (and $x537 $x534)))
 (ite $x538 $x542 $x567)))))))))))))))))))))))))))))))
(assert
 (let ((?x375 (center s___)))
 (let ((?x514 (center s____)))
 (let (($x552 (= ?x514 ?x375)))
 (let ((?x256 (right s___)))
 (let ((?x521 (top ?x256)))
 (let ((?x523 (stack ?x521 ?x375)))
 (let (($x549 (= ?x514 ?x523)))
 (let (($x524 ((_ is stack ) ?x256)))
 (let (($x525 (= c___ right-to-center)))
 (let (($x526 (and $x525 $x524)))
 (let (($x527 (= c___ right-to-left)))
 (let (($x528 (and $x527 $x524)))
 (let ((?x516 (rest ?x375)))
 (let (($x544 (= ?x514 ?x516)))
 (let (($x529 ((_ is stack ) ?x375)))
 (let (($x530 (= c___ center-to-right)))
 (let (($x531 (and $x530 $x529)))
 (let (($x532 (= c___ center-to-left)))
 (let (($x533 (and $x532 $x529)))
 (let ((?x164 (left s___)))
 (let ((?x512 (top ?x164)))
 (let ((?x515 (stack ?x512 ?x375)))
 (let (($x543 (= ?x514 ?x515)))
 (let (($x534 ((_ is stack ) ?x164)))
 (let (($x535 (= c___ left-to-right)))
 (let (($x536 (and $x535 $x534)))
 (let (($x566 (ite $x536 $x543 (ite $x533 $x544 (ite $x531 $x544 (ite $x528 $x552 (ite $x526 $x549 $x552)))))))
 (let (($x537 (= c___ left-to-center)))
 (let (($x538 (and $x537 $x534)))
 (ite $x538 $x552 $x566)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x350 (left s____)))
 (let ((?x431 (left s_____)))
 (let (($x692 (= ?x431 ?x350)))
 (let ((?x372 (right s____)))
 (let ((?x659 (top ?x372)))
 (let ((?x660 (stack ?x659 ?x350)))
 (let (($x686 (= ?x431 ?x660)))
 (let (($x662 ((_ is stack ) ?x372)))
 (let (($x665 (= c____ right-to-left)))
 (let (($x666 (and $x665 $x662)))
 (let ((?x514 (center s____)))
 (let (($x667 ((_ is stack ) ?x514)))
 (let (($x668 (= c____ center-to-right)))
 (let (($x669 (and $x668 $x667)))
 (let ((?x655 (top ?x514)))
 (let ((?x656 (stack ?x655 ?x350)))
 (let (($x683 (= ?x431 ?x656)))
 (let (($x670 (= c____ center-to-left)))
 (let (($x671 (and $x670 $x667)))
 (let ((?x464 (rest ?x350)))
 (let (($x679 (= ?x431 ?x464)))
 (let (($x672 ((_ is stack ) ?x350)))
 (let (($x673 (= c____ left-to-right)))
 (let (($x674 (and $x673 $x672)))
 (let (($x675 (= c____ left-to-center)))
 (let (($x676 (and $x675 $x672)))
 (ite $x676 $x679 (ite $x674 $x679 (ite $x671 $x683 (ite $x669 $x692 (ite $x666 $x686 $x692))))))))))))))))))))))))))))))))
(assert
 (let ((?x372 (right s____)))
 (let ((?x465 (right s_____)))
 (let (($x688 (= ?x465 ?x372)))
 (let ((?x658 (rest ?x372)))
 (let (($x685 (= ?x465 ?x658)))
 (let (($x662 ((_ is stack ) ?x372)))
 (let (($x663 (= c____ right-to-center)))
 (let (($x664 (and $x663 $x662)))
 (let (($x665 (= c____ right-to-left)))
 (let (($x666 (and $x665 $x662)))
 (let ((?x514 (center s____)))
 (let ((?x655 (top ?x514)))
 (let ((?x657 (stack ?x655 ?x372)))
 (let (($x684 (= ?x465 ?x657)))
 (let (($x667 ((_ is stack ) ?x514)))
 (let (($x668 (= c____ center-to-right)))
 (let (($x669 (and $x668 $x667)))
 (let (($x670 (= c____ center-to-left)))
 (let (($x671 (and $x670 $x667)))
 (let ((?x350 (left s____)))
 (let (($x672 ((_ is stack ) ?x350)))
 (let (($x673 (= c____ left-to-right)))
 (let (($x674 (and $x673 $x672)))
 (let (($x705 (ite $x674 $x688 (ite $x671 $x688 (ite $x669 $x684 (ite $x666 $x685 (ite $x664 $x685 $x688)))))))
 (let ((?x511 (top ?x350)))
 (let ((?x651 (stack ?x511 ?x372)))
 (let (($x680 (= ?x465 ?x651)))
 (let (($x675 (= c____ left-to-center)))
 (let (($x676 (and $x675 $x672)))
 (ite $x676 $x680 $x705)))))))))))))))))))))))))))))))
(assert
 (let ((?x514 (center s____)))
 (let ((?x652 (center s_____)))
 (let (($x690 (= ?x652 ?x514)))
 (let ((?x372 (right s____)))
 (let ((?x659 (top ?x372)))
 (let ((?x661 (stack ?x659 ?x514)))
 (let (($x687 (= ?x652 ?x661)))
 (let (($x662 ((_ is stack ) ?x372)))
 (let (($x663 (= c____ right-to-center)))
 (let (($x664 (and $x663 $x662)))
 (let (($x665 (= c____ right-to-left)))
 (let (($x666 (and $x665 $x662)))
 (let ((?x654 (rest ?x514)))
 (let (($x682 (= ?x652 ?x654)))
 (let (($x667 ((_ is stack ) ?x514)))
 (let (($x668 (= c____ center-to-right)))
 (let (($x669 (and $x668 $x667)))
 (let (($x670 (= c____ center-to-left)))
 (let (($x671 (and $x670 $x667)))
 (let ((?x350 (left s____)))
 (let ((?x511 (top ?x350)))
 (let ((?x653 (stack ?x511 ?x514)))
 (let (($x681 (= ?x652 ?x653)))
 (let (($x672 ((_ is stack ) ?x350)))
 (let (($x673 (= c____ left-to-right)))
 (let (($x674 (and $x673 $x672)))
 (let (($x704 (ite $x674 $x681 (ite $x671 $x682 (ite $x669 $x682 (ite $x666 $x690 (ite $x664 $x687 $x690)))))))
 (let (($x675 (= c____ left-to-center)))
 (let (($x676 (and $x675 $x672)))
 (ite $x676 $x690 $x704)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x431 (left s_____)))
 (let ((?x570 (left s______)))
 (let (($x830 (= ?x570 ?x431)))
 (let ((?x465 (right s_____)))
 (let ((?x797 (top ?x465)))
 (let ((?x798 (stack ?x797 ?x431)))
 (let (($x824 (= ?x570 ?x798)))
 (let (($x800 ((_ is stack ) ?x465)))
 (let (($x803 (= c_____ right-to-left)))
 (let (($x804 (and $x803 $x800)))
 (let ((?x652 (center s_____)))
 (let (($x805 ((_ is stack ) ?x652)))
 (let (($x806 (= c_____ center-to-right)))
 (let (($x807 (and $x806 $x805)))
 (let ((?x793 (top ?x652)))
 (let ((?x794 (stack ?x793 ?x431)))
 (let (($x821 (= ?x570 ?x794)))
 (let (($x808 (= c_____ center-to-left)))
 (let (($x809 (and $x808 $x805)))
 (let ((?x603 (rest ?x431)))
 (let (($x817 (= ?x570 ?x603)))
 (let (($x810 ((_ is stack ) ?x431)))
 (let (($x811 (= c_____ left-to-right)))
 (let (($x812 (and $x811 $x810)))
 (let (($x813 (= c_____ left-to-center)))
 (let (($x814 (and $x813 $x810)))
 (ite $x814 $x817 (ite $x812 $x817 (ite $x809 $x821 (ite $x807 $x830 (ite $x804 $x824 $x830))))))))))))))))))))))))))))))))
(assert
 (let ((?x465 (right s_____)))
 (let ((?x604 (right s______)))
 (let (($x826 (= ?x604 ?x465)))
 (let ((?x796 (rest ?x465)))
 (let (($x823 (= ?x604 ?x796)))
 (let (($x800 ((_ is stack ) ?x465)))
 (let (($x801 (= c_____ right-to-center)))
 (let (($x802 (and $x801 $x800)))
 (let (($x803 (= c_____ right-to-left)))
 (let (($x804 (and $x803 $x800)))
 (let ((?x652 (center s_____)))
 (let ((?x793 (top ?x652)))
 (let ((?x795 (stack ?x793 ?x465)))
 (let (($x822 (= ?x604 ?x795)))
 (let (($x805 ((_ is stack ) ?x652)))
 (let (($x806 (= c_____ center-to-right)))
 (let (($x807 (and $x806 $x805)))
 (let (($x808 (= c_____ center-to-left)))
 (let (($x809 (and $x808 $x805)))
 (let ((?x431 (left s_____)))
 (let (($x810 ((_ is stack ) ?x431)))
 (let (($x811 (= c_____ left-to-right)))
 (let (($x812 (and $x811 $x810)))
 (let (($x843 (ite $x812 $x826 (ite $x809 $x826 (ite $x807 $x822 (ite $x804 $x823 (ite $x802 $x823 $x826)))))))
 (let ((?x650 (top ?x431)))
 (let ((?x789 (stack ?x650 ?x465)))
 (let (($x818 (= ?x604 ?x789)))
 (let (($x813 (= c_____ left-to-center)))
 (let (($x814 (and $x813 $x810)))
 (ite $x814 $x818 $x843)))))))))))))))))))))))))))))))
(assert
 (let ((?x652 (center s_____)))
 (let ((?x790 (center s______)))
 (let (($x828 (= ?x790 ?x652)))
 (let ((?x465 (right s_____)))
 (let ((?x797 (top ?x465)))
 (let ((?x799 (stack ?x797 ?x652)))
 (let (($x825 (= ?x790 ?x799)))
 (let (($x800 ((_ is stack ) ?x465)))
 (let (($x801 (= c_____ right-to-center)))
 (let (($x802 (and $x801 $x800)))
 (let (($x803 (= c_____ right-to-left)))
 (let (($x804 (and $x803 $x800)))
 (let ((?x792 (rest ?x652)))
 (let (($x820 (= ?x790 ?x792)))
 (let (($x805 ((_ is stack ) ?x652)))
 (let (($x806 (= c_____ center-to-right)))
 (let (($x807 (and $x806 $x805)))
 (let (($x808 (= c_____ center-to-left)))
 (let (($x809 (and $x808 $x805)))
 (let ((?x431 (left s_____)))
 (let ((?x650 (top ?x431)))
 (let ((?x791 (stack ?x650 ?x652)))
 (let (($x819 (= ?x790 ?x791)))
 (let (($x810 ((_ is stack ) ?x431)))
 (let (($x811 (= c_____ left-to-right)))
 (let (($x812 (and $x811 $x810)))
 (let (($x842 (ite $x812 $x819 (ite $x809 $x820 (ite $x807 $x820 (ite $x804 $x828 (ite $x802 $x825 $x828)))))))
 (let (($x813 (= c_____ left-to-center)))
 (let (($x814 (and $x813 $x810)))
 (ite $x814 $x828 $x842)))))))))))))))))))))))))))))))
(assert
 (let ((?x68 (stack A empty)))
 (let ((?x604 (right s______)))
 (let (($x846 (= ?x604 ?x68)))
 (let ((?x790 (center s______)))
 (let (($x877 (= ?x790 empty)))
 (let ((?x55 (stack J (stack R (stack O (stack D (stack S (stack Q empty))))))))
 (let ((?x61 (stack P (stack E (stack C (stack F (stack M (stack B ?x55))))))))
 (let ((?x67 (stack N (stack K (stack G (stack L (stack H (stack I ?x61))))))))
 (let ((?x570 (left s______)))
 (let (($x878 (= ?x570 ?x67)))
 (let (($x880 (not (and $x878 $x877 $x846))))
 (not $x880)))))))))))))
(check-sat)
(exit)
