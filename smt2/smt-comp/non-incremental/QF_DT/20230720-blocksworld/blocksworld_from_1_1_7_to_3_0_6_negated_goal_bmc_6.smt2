(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x21 (stack E empty)))
 (let ((?x84 (left s_tmp_)))
 (= ?x84 ?x21))))
(assert
 (let ((?x22 (stack A empty)))
 (let ((?x87 (center s_tmp__)))
 (= ?x87 ?x22))))
(assert
 (let ((?x23 (stack B empty)))
 (let ((?x24 (stack C ?x23)))
 (let ((?x25 (stack D ?x24)))
 (let ((?x26 (stack F ?x25)))
 (let ((?x27 (stack G ?x26)))
 (let ((?x28 (stack H ?x27)))
 (let ((?x29 (stack I ?x28)))
 (let ((?x90 (right s_tmp___)))
 (= ?x90 ?x29))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x117 (left s_tmp__)))
 (= (left s_tmp___) ?x117)))
(assert
 (let ((?x87 (center s_tmp__)))
 (= (center s_tmp___) ?x87)))
(assert
 (let ((?x121 (center s_tmp_)))
 (= ?x121 (center s_tmp))))
(assert
 (let ((?x124 (right s_tmp_)))
 (= ?x124 (right s_tmp))))
(assert
 (let ((?x84 (left s_tmp_)))
 (let ((?x117 (left s_tmp__)))
 (= ?x117 ?x84))))
(assert
 (let ((?x124 (right s_tmp_)))
 (let ((?x128 (right s_tmp__)))
 (= ?x128 ?x124))))
(assert
 (= c__ c!1))
(assert
 (let ((?x61 (left s_)))
 (let ((?x211 (left s__)))
 (let (($x244 (= ?x211 ?x61)))
 (let ((?x64 (right s_)))
 (let (($x205 ((_ is stack ) ?x64)))
 (let (($x214 (= c_ right-to-left)))
 (let (($x218 (and $x214 $x205)))
 (let ((?x66 (center s_)))
 (let (($x219 ((_ is stack ) ?x66)))
 (let (($x220 (= c_ center-to-right)))
 (let (($x221 (and $x220 $x219)))
 (let (($x222 (= c_ center-to-left)))
 (let (($x223 (and $x222 $x219)))
 (let (($x253 (ite $x223 (= ?x211 (stack (top ?x66) ?x61)) (ite $x221 $x244 (ite $x218 (= ?x211 (stack (top ?x64) ?x61)) $x244)))))
 (let (($x231 (= ?x211 (rest ?x61))))
 (let (($x224 ((_ is stack ) ?x61)))
 (let (($x225 (= c_ left-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x227 (= c_ left-to-center)))
 (let (($x228 (and $x227 $x224)))
 (ite $x228 $x231 (ite $x226 $x231 $x253)))))))))))))))))))))))
(assert
 (let ((?x64 (right s_)))
 (let ((?x201 (right s__)))
 (let (($x240 (= ?x201 ?x64)))
 (let (($x237 (= ?x201 (rest ?x64))))
 (let (($x205 ((_ is stack ) ?x64)))
 (let (($x212 (= c_ right-to-center)))
 (let (($x213 (and $x212 $x205)))
 (let (($x214 (= c_ right-to-left)))
 (let (($x218 (and $x214 $x205)))
 (let ((?x66 (center s_)))
 (let (($x219 ((_ is stack ) ?x66)))
 (let (($x220 (= c_ center-to-right)))
 (let (($x221 (and $x220 $x219)))
 (let (($x250 (ite $x221 (= ?x201 (stack (top ?x66) ?x64)) (ite $x218 $x237 (ite $x213 $x237 $x240)))))
 (let (($x222 (= c_ center-to-left)))
 (let (($x223 (and $x222 $x219)))
 (let ((?x61 (left s_)))
 (let (($x224 ((_ is stack ) ?x61)))
 (let (($x225 (= c_ left-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x227 (= c_ left-to-center)))
 (let (($x228 (and $x227 $x224)))
 (ite $x228 (= ?x201 (stack (top ?x61) ?x64)) (ite $x226 $x240 (ite $x223 $x240 $x250))))))))))))))))))))))))))
(assert
 (let ((?x66 (center s_)))
 (let ((?x198 (center s__)))
 (let (($x242 (= ?x198 ?x66)))
 (let ((?x64 (right s_)))
 (let (($x205 ((_ is stack ) ?x64)))
 (let (($x212 (= c_ right-to-center)))
 (let (($x213 (and $x212 $x205)))
 (let (($x214 (= c_ right-to-left)))
 (let (($x218 (and $x214 $x205)))
 (let (($x234 (= ?x198 (rest ?x66))))
 (let (($x219 ((_ is stack ) ?x66)))
 (let (($x220 (= c_ center-to-right)))
 (let (($x221 (and $x220 $x219)))
 (let (($x249 (ite $x221 $x234 (ite $x218 $x242 (ite $x213 (= ?x198 (stack (top ?x64) ?x66)) $x242)))))
 (let (($x222 (= c_ center-to-left)))
 (let (($x223 (and $x222 $x219)))
 (let ((?x61 (left s_)))
 (let (($x224 ((_ is stack ) ?x61)))
 (let (($x225 (= c_ left-to-right)))
 (let (($x226 (and $x225 $x224)))
 (let (($x227 (= c_ left-to-center)))
 (let (($x228 (and $x227 $x224)))
 (ite $x228 $x242 (ite $x226 (= ?x198 (stack (top ?x61) ?x66)) (ite $x223 $x234 $x249))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x211 (left s__)))
 (let ((?x131 (left s___)))
 (let (($x372 (= ?x131 ?x211)))
 (let ((?x201 (right s__)))
 (let ((?x339 (top ?x201)))
 (let ((?x340 (stack ?x339 ?x211)))
 (let (($x366 (= ?x131 ?x340)))
 (let (($x342 ((_ is stack ) ?x201)))
 (let (($x345 (= c__ right-to-left)))
 (let (($x346 (and $x345 $x342)))
 (let ((?x198 (center s__)))
 (let (($x347 ((_ is stack ) ?x198)))
 (let (($x348 (= c__ center-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let ((?x335 (top ?x198)))
 (let ((?x336 (stack ?x335 ?x211)))
 (let (($x363 (= ?x131 ?x336)))
 (let (($x350 (= c__ center-to-left)))
 (let (($x351 (and $x350 $x347)))
 (let ((?x133 (rest ?x211)))
 (let (($x359 (= ?x131 ?x133)))
 (let (($x352 ((_ is stack ) ?x211)))
 (let (($x353 (= c__ left-to-right)))
 (let (($x354 (and $x353 $x352)))
 (let (($x355 (= c__ left-to-center)))
 (let (($x356 (and $x355 $x352)))
 (ite $x356 $x359 (ite $x354 $x359 (ite $x351 $x363 (ite $x349 $x372 (ite $x346 $x366 $x372))))))))))))))))))))))))))))))))
(assert
 (let ((?x201 (right s__)))
 (let ((?x134 (right s___)))
 (let (($x368 (= ?x134 ?x201)))
 (let ((?x338 (rest ?x201)))
 (let (($x365 (= ?x134 ?x338)))
 (let (($x342 ((_ is stack ) ?x201)))
 (let (($x343 (= c__ right-to-center)))
 (let (($x344 (and $x343 $x342)))
 (let (($x345 (= c__ right-to-left)))
 (let (($x346 (and $x345 $x342)))
 (let ((?x198 (center s__)))
 (let ((?x335 (top ?x198)))
 (let ((?x337 (stack ?x335 ?x201)))
 (let (($x364 (= ?x134 ?x337)))
 (let (($x347 ((_ is stack ) ?x198)))
 (let (($x348 (= c__ center-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let (($x350 (= c__ center-to-left)))
 (let (($x351 (and $x350 $x347)))
 (let ((?x211 (left s__)))
 (let (($x352 ((_ is stack ) ?x211)))
 (let (($x353 (= c__ left-to-right)))
 (let (($x354 (and $x353 $x352)))
 (let (($x385 (ite $x354 $x368 (ite $x351 $x368 (ite $x349 $x364 (ite $x346 $x365 (ite $x344 $x365 $x368)))))))
 (let ((?x196 (top ?x211)))
 (let ((?x331 (stack ?x196 ?x201)))
 (let (($x360 (= ?x134 ?x331)))
 (let (($x355 (= c__ left-to-center)))
 (let (($x356 (and $x355 $x352)))
 (ite $x356 $x360 $x385)))))))))))))))))))))))))))))))
(assert
 (let ((?x198 (center s__)))
 (let ((?x332 (center s___)))
 (let (($x370 (= ?x332 ?x198)))
 (let ((?x201 (right s__)))
 (let ((?x339 (top ?x201)))
 (let ((?x341 (stack ?x339 ?x198)))
 (let (($x367 (= ?x332 ?x341)))
 (let (($x342 ((_ is stack ) ?x201)))
 (let (($x343 (= c__ right-to-center)))
 (let (($x344 (and $x343 $x342)))
 (let (($x345 (= c__ right-to-left)))
 (let (($x346 (and $x345 $x342)))
 (let ((?x334 (rest ?x198)))
 (let (($x362 (= ?x332 ?x334)))
 (let (($x347 ((_ is stack ) ?x198)))
 (let (($x348 (= c__ center-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let (($x350 (= c__ center-to-left)))
 (let (($x351 (and $x350 $x347)))
 (let ((?x211 (left s__)))
 (let ((?x196 (top ?x211)))
 (let ((?x333 (stack ?x196 ?x198)))
 (let (($x361 (= ?x332 ?x333)))
 (let (($x352 ((_ is stack ) ?x211)))
 (let (($x353 (= c__ left-to-right)))
 (let (($x354 (and $x353 $x352)))
 (let (($x384 (ite $x354 $x361 (ite $x351 $x362 (ite $x349 $x362 (ite $x346 $x370 (ite $x344 $x367 $x370)))))))
 (let (($x355 (= c__ left-to-center)))
 (let (($x356 (and $x355 $x352)))
 (ite $x356 $x370 $x384)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x131 (left s___)))
 (let ((?x303 (left s____)))
 (let (($x511 (= ?x303 ?x131)))
 (let ((?x134 (right s___)))
 (let ((?x478 (top ?x134)))
 (let ((?x479 (stack ?x478 ?x131)))
 (let (($x505 (= ?x303 ?x479)))
 (let (($x481 ((_ is stack ) ?x134)))
 (let (($x484 (= c___ right-to-left)))
 (let (($x485 (and $x484 $x481)))
 (let ((?x332 (center s___)))
 (let (($x486 ((_ is stack ) ?x332)))
 (let (($x487 (= c___ center-to-right)))
 (let (($x488 (and $x487 $x486)))
 (let ((?x474 (top ?x332)))
 (let ((?x475 (stack ?x474 ?x131)))
 (let (($x502 (= ?x303 ?x475)))
 (let (($x489 (= c___ center-to-left)))
 (let (($x490 (and $x489 $x486)))
 (let ((?x304 (rest ?x131)))
 (let (($x498 (= ?x303 ?x304)))
 (let (($x491 ((_ is stack ) ?x131)))
 (let (($x492 (= c___ left-to-right)))
 (let (($x493 (and $x492 $x491)))
 (let (($x494 (= c___ left-to-center)))
 (let (($x495 (and $x494 $x491)))
 (ite $x495 $x498 (ite $x493 $x498 (ite $x490 $x502 (ite $x488 $x511 (ite $x485 $x505 $x511))))))))))))))))))))))))))))))))
(assert
 (let ((?x134 (right s___)))
 (let ((?x330 (right s____)))
 (let (($x507 (= ?x330 ?x134)))
 (let ((?x477 (rest ?x134)))
 (let (($x504 (= ?x330 ?x477)))
 (let (($x481 ((_ is stack ) ?x134)))
 (let (($x482 (= c___ right-to-center)))
 (let (($x483 (and $x482 $x481)))
 (let (($x484 (= c___ right-to-left)))
 (let (($x485 (and $x484 $x481)))
 (let ((?x332 (center s___)))
 (let ((?x474 (top ?x332)))
 (let ((?x476 (stack ?x474 ?x134)))
 (let (($x503 (= ?x330 ?x476)))
 (let (($x486 ((_ is stack ) ?x332)))
 (let (($x487 (= c___ center-to-right)))
 (let (($x488 (and $x487 $x486)))
 (let (($x489 (= c___ center-to-left)))
 (let (($x490 (and $x489 $x486)))
 (let ((?x131 (left s___)))
 (let (($x491 ((_ is stack ) ?x131)))
 (let (($x492 (= c___ left-to-right)))
 (let (($x493 (and $x492 $x491)))
 (let (($x524 (ite $x493 $x507 (ite $x490 $x507 (ite $x488 $x503 (ite $x485 $x504 (ite $x483 $x504 $x507)))))))
 (let ((?x469 (top ?x131)))
 (let ((?x470 (stack ?x469 ?x134)))
 (let (($x499 (= ?x330 ?x470)))
 (let (($x494 (= c___ left-to-center)))
 (let (($x495 (and $x494 $x491)))
 (ite $x495 $x499 $x524)))))))))))))))))))))))))))))))
(assert
 (let ((?x332 (center s___)))
 (let ((?x471 (center s____)))
 (let (($x509 (= ?x471 ?x332)))
 (let ((?x134 (right s___)))
 (let ((?x478 (top ?x134)))
 (let ((?x480 (stack ?x478 ?x332)))
 (let (($x506 (= ?x471 ?x480)))
 (let (($x481 ((_ is stack ) ?x134)))
 (let (($x482 (= c___ right-to-center)))
 (let (($x483 (and $x482 $x481)))
 (let (($x484 (= c___ right-to-left)))
 (let (($x485 (and $x484 $x481)))
 (let ((?x473 (rest ?x332)))
 (let (($x501 (= ?x471 ?x473)))
 (let (($x486 ((_ is stack ) ?x332)))
 (let (($x487 (= c___ center-to-right)))
 (let (($x488 (and $x487 $x486)))
 (let (($x489 (= c___ center-to-left)))
 (let (($x490 (and $x489 $x486)))
 (let ((?x131 (left s___)))
 (let ((?x469 (top ?x131)))
 (let ((?x472 (stack ?x469 ?x332)))
 (let (($x500 (= ?x471 ?x472)))
 (let (($x491 ((_ is stack ) ?x131)))
 (let (($x492 (= c___ left-to-right)))
 (let (($x493 (and $x492 $x491)))
 (let (($x523 (ite $x493 $x500 (ite $x490 $x501 (ite $x488 $x501 (ite $x485 $x509 (ite $x483 $x506 $x509)))))))
 (let (($x494 (= c___ left-to-center)))
 (let (($x495 (and $x494 $x491)))
 (ite $x495 $x509 $x523)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x303 (left s____)))
 (let ((?x388 (left s_____)))
 (let (($x649 (= ?x388 ?x303)))
 (let ((?x330 (right s____)))
 (let ((?x616 (top ?x330)))
 (let ((?x617 (stack ?x616 ?x303)))
 (let (($x643 (= ?x388 ?x617)))
 (let (($x619 ((_ is stack ) ?x330)))
 (let (($x622 (= c____ right-to-left)))
 (let (($x623 (and $x622 $x619)))
 (let ((?x471 (center s____)))
 (let (($x624 ((_ is stack ) ?x471)))
 (let (($x625 (= c____ center-to-right)))
 (let (($x626 (and $x625 $x624)))
 (let ((?x612 (top ?x471)))
 (let ((?x613 (stack ?x612 ?x303)))
 (let (($x640 (= ?x388 ?x613)))
 (let (($x627 (= c____ center-to-left)))
 (let (($x628 (and $x627 $x624)))
 (let ((?x421 (rest ?x303)))
 (let (($x636 (= ?x388 ?x421)))
 (let (($x629 ((_ is stack ) ?x303)))
 (let (($x630 (= c____ left-to-right)))
 (let (($x631 (and $x630 $x629)))
 (let (($x632 (= c____ left-to-center)))
 (let (($x633 (and $x632 $x629)))
 (ite $x633 $x636 (ite $x631 $x636 (ite $x628 $x640 (ite $x626 $x649 (ite $x623 $x643 $x649))))))))))))))))))))))))))))))))
(assert
 (let ((?x330 (right s____)))
 (let ((?x422 (right s_____)))
 (let (($x645 (= ?x422 ?x330)))
 (let ((?x615 (rest ?x330)))
 (let (($x642 (= ?x422 ?x615)))
 (let (($x619 ((_ is stack ) ?x330)))
 (let (($x620 (= c____ right-to-center)))
 (let (($x621 (and $x620 $x619)))
 (let (($x622 (= c____ right-to-left)))
 (let (($x623 (and $x622 $x619)))
 (let ((?x471 (center s____)))
 (let ((?x612 (top ?x471)))
 (let ((?x614 (stack ?x612 ?x330)))
 (let (($x641 (= ?x422 ?x614)))
 (let (($x624 ((_ is stack ) ?x471)))
 (let (($x625 (= c____ center-to-right)))
 (let (($x626 (and $x625 $x624)))
 (let (($x627 (= c____ center-to-left)))
 (let (($x628 (and $x627 $x624)))
 (let ((?x303 (left s____)))
 (let (($x629 ((_ is stack ) ?x303)))
 (let (($x630 (= c____ left-to-right)))
 (let (($x631 (and $x630 $x629)))
 (let (($x662 (ite $x631 $x645 (ite $x628 $x645 (ite $x626 $x641 (ite $x623 $x642 (ite $x621 $x642 $x645)))))))
 (let ((?x468 (top ?x303)))
 (let ((?x608 (stack ?x468 ?x330)))
 (let (($x637 (= ?x422 ?x608)))
 (let (($x632 (= c____ left-to-center)))
 (let (($x633 (and $x632 $x629)))
 (ite $x633 $x637 $x662)))))))))))))))))))))))))))))))
(assert
 (let ((?x471 (center s____)))
 (let ((?x609 (center s_____)))
 (let (($x647 (= ?x609 ?x471)))
 (let ((?x330 (right s____)))
 (let ((?x616 (top ?x330)))
 (let ((?x618 (stack ?x616 ?x471)))
 (let (($x644 (= ?x609 ?x618)))
 (let (($x619 ((_ is stack ) ?x330)))
 (let (($x620 (= c____ right-to-center)))
 (let (($x621 (and $x620 $x619)))
 (let (($x622 (= c____ right-to-left)))
 (let (($x623 (and $x622 $x619)))
 (let ((?x611 (rest ?x471)))
 (let (($x639 (= ?x609 ?x611)))
 (let (($x624 ((_ is stack ) ?x471)))
 (let (($x625 (= c____ center-to-right)))
 (let (($x626 (and $x625 $x624)))
 (let (($x627 (= c____ center-to-left)))
 (let (($x628 (and $x627 $x624)))
 (let ((?x303 (left s____)))
 (let ((?x468 (top ?x303)))
 (let ((?x610 (stack ?x468 ?x471)))
 (let (($x638 (= ?x609 ?x610)))
 (let (($x629 ((_ is stack ) ?x303)))
 (let (($x630 (= c____ left-to-right)))
 (let (($x631 (and $x630 $x629)))
 (let (($x661 (ite $x631 $x638 (ite $x628 $x639 (ite $x626 $x639 (ite $x623 $x647 (ite $x621 $x644 $x647)))))))
 (let (($x632 (= c____ left-to-center)))
 (let (($x633 (and $x632 $x629)))
 (ite $x633 $x647 $x661)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x388 (left s_____)))
 (let ((?x527 (left s______)))
 (let (($x787 (= ?x527 ?x388)))
 (let ((?x422 (right s_____)))
 (let ((?x754 (top ?x422)))
 (let ((?x755 (stack ?x754 ?x388)))
 (let (($x781 (= ?x527 ?x755)))
 (let (($x757 ((_ is stack ) ?x422)))
 (let (($x760 (= c_____ right-to-left)))
 (let (($x761 (and $x760 $x757)))
 (let ((?x609 (center s_____)))
 (let (($x762 ((_ is stack ) ?x609)))
 (let (($x763 (= c_____ center-to-right)))
 (let (($x764 (and $x763 $x762)))
 (let ((?x750 (top ?x609)))
 (let ((?x751 (stack ?x750 ?x388)))
 (let (($x778 (= ?x527 ?x751)))
 (let (($x765 (= c_____ center-to-left)))
 (let (($x766 (and $x765 $x762)))
 (let ((?x560 (rest ?x388)))
 (let (($x774 (= ?x527 ?x560)))
 (let (($x767 ((_ is stack ) ?x388)))
 (let (($x768 (= c_____ left-to-right)))
 (let (($x769 (and $x768 $x767)))
 (let (($x770 (= c_____ left-to-center)))
 (let (($x771 (and $x770 $x767)))
 (ite $x771 $x774 (ite $x769 $x774 (ite $x766 $x778 (ite $x764 $x787 (ite $x761 $x781 $x787))))))))))))))))))))))))))))))))
(assert
 (let ((?x422 (right s_____)))
 (let ((?x561 (right s______)))
 (let (($x783 (= ?x561 ?x422)))
 (let ((?x753 (rest ?x422)))
 (let (($x780 (= ?x561 ?x753)))
 (let (($x757 ((_ is stack ) ?x422)))
 (let (($x758 (= c_____ right-to-center)))
 (let (($x759 (and $x758 $x757)))
 (let (($x760 (= c_____ right-to-left)))
 (let (($x761 (and $x760 $x757)))
 (let ((?x609 (center s_____)))
 (let ((?x750 (top ?x609)))
 (let ((?x752 (stack ?x750 ?x422)))
 (let (($x779 (= ?x561 ?x752)))
 (let (($x762 ((_ is stack ) ?x609)))
 (let (($x763 (= c_____ center-to-right)))
 (let (($x764 (and $x763 $x762)))
 (let (($x765 (= c_____ center-to-left)))
 (let (($x766 (and $x765 $x762)))
 (let ((?x388 (left s_____)))
 (let (($x767 ((_ is stack ) ?x388)))
 (let (($x768 (= c_____ left-to-right)))
 (let (($x769 (and $x768 $x767)))
 (let (($x800 (ite $x769 $x783 (ite $x766 $x783 (ite $x764 $x779 (ite $x761 $x780 (ite $x759 $x780 $x783)))))))
 (let ((?x607 (top ?x388)))
 (let ((?x746 (stack ?x607 ?x422)))
 (let (($x775 (= ?x561 ?x746)))
 (let (($x770 (= c_____ left-to-center)))
 (let (($x771 (and $x770 $x767)))
 (ite $x771 $x775 $x800)))))))))))))))))))))))))))))))
(assert
 (let ((?x609 (center s_____)))
 (let ((?x747 (center s______)))
 (let (($x785 (= ?x747 ?x609)))
 (let ((?x422 (right s_____)))
 (let ((?x754 (top ?x422)))
 (let ((?x756 (stack ?x754 ?x609)))
 (let (($x782 (= ?x747 ?x756)))
 (let (($x757 ((_ is stack ) ?x422)))
 (let (($x758 (= c_____ right-to-center)))
 (let (($x759 (and $x758 $x757)))
 (let (($x760 (= c_____ right-to-left)))
 (let (($x761 (and $x760 $x757)))
 (let ((?x749 (rest ?x609)))
 (let (($x777 (= ?x747 ?x749)))
 (let (($x762 ((_ is stack ) ?x609)))
 (let (($x763 (= c_____ center-to-right)))
 (let (($x764 (and $x763 $x762)))
 (let (($x765 (= c_____ center-to-left)))
 (let (($x766 (and $x765 $x762)))
 (let ((?x388 (left s_____)))
 (let ((?x607 (top ?x388)))
 (let ((?x748 (stack ?x607 ?x609)))
 (let (($x776 (= ?x747 ?x748)))
 (let (($x767 ((_ is stack ) ?x388)))
 (let (($x768 (= c_____ left-to-right)))
 (let (($x769 (and $x768 $x767)))
 (let (($x799 (ite $x769 $x776 (ite $x766 $x777 (ite $x764 $x777 (ite $x761 $x785 (ite $x759 $x782 $x785)))))))
 (let (($x770 (= c_____ left-to-center)))
 (let (($x771 (and $x770 $x767)))
 (ite $x771 $x785 $x799)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x527 (left s______)))
 (let ((?x665 (left s_______)))
 (let (($x925 (= ?x665 ?x527)))
 (let ((?x561 (right s______)))
 (let ((?x892 (top ?x561)))
 (let ((?x893 (stack ?x892 ?x527)))
 (let (($x919 (= ?x665 ?x893)))
 (let (($x895 ((_ is stack ) ?x561)))
 (let (($x898 (= c______ right-to-left)))
 (let (($x899 (and $x898 $x895)))
 (let ((?x747 (center s______)))
 (let (($x900 ((_ is stack ) ?x747)))
 (let (($x901 (= c______ center-to-right)))
 (let (($x902 (and $x901 $x900)))
 (let ((?x888 (top ?x747)))
 (let ((?x889 (stack ?x888 ?x527)))
 (let (($x916 (= ?x665 ?x889)))
 (let (($x903 (= c______ center-to-left)))
 (let (($x904 (and $x903 $x900)))
 (let ((?x698 (rest ?x527)))
 (let (($x912 (= ?x665 ?x698)))
 (let (($x905 ((_ is stack ) ?x527)))
 (let (($x906 (= c______ left-to-right)))
 (let (($x907 (and $x906 $x905)))
 (let (($x908 (= c______ left-to-center)))
 (let (($x909 (and $x908 $x905)))
 (ite $x909 $x912 (ite $x907 $x912 (ite $x904 $x916 (ite $x902 $x925 (ite $x899 $x919 $x925))))))))))))))))))))))))))))))))
(assert
 (let ((?x561 (right s______)))
 (let ((?x699 (right s_______)))
 (let (($x921 (= ?x699 ?x561)))
 (let ((?x891 (rest ?x561)))
 (let (($x918 (= ?x699 ?x891)))
 (let (($x895 ((_ is stack ) ?x561)))
 (let (($x896 (= c______ right-to-center)))
 (let (($x897 (and $x896 $x895)))
 (let (($x898 (= c______ right-to-left)))
 (let (($x899 (and $x898 $x895)))
 (let ((?x747 (center s______)))
 (let ((?x888 (top ?x747)))
 (let ((?x890 (stack ?x888 ?x561)))
 (let (($x917 (= ?x699 ?x890)))
 (let (($x900 ((_ is stack ) ?x747)))
 (let (($x901 (= c______ center-to-right)))
 (let (($x902 (and $x901 $x900)))
 (let (($x903 (= c______ center-to-left)))
 (let (($x904 (and $x903 $x900)))
 (let ((?x527 (left s______)))
 (let (($x905 ((_ is stack ) ?x527)))
 (let (($x906 (= c______ left-to-right)))
 (let (($x907 (and $x906 $x905)))
 (let (($x938 (ite $x907 $x921 (ite $x904 $x921 (ite $x902 $x917 (ite $x899 $x918 (ite $x897 $x918 $x921)))))))
 (let ((?x745 (top ?x527)))
 (let ((?x884 (stack ?x745 ?x561)))
 (let (($x913 (= ?x699 ?x884)))
 (let (($x908 (= c______ left-to-center)))
 (let (($x909 (and $x908 $x905)))
 (ite $x909 $x913 $x938)))))))))))))))))))))))))))))))
(assert
 (let ((?x747 (center s______)))
 (let ((?x885 (center s_______)))
 (let (($x923 (= ?x885 ?x747)))
 (let ((?x561 (right s______)))
 (let ((?x892 (top ?x561)))
 (let ((?x894 (stack ?x892 ?x747)))
 (let (($x920 (= ?x885 ?x894)))
 (let (($x895 ((_ is stack ) ?x561)))
 (let (($x896 (= c______ right-to-center)))
 (let (($x897 (and $x896 $x895)))
 (let (($x898 (= c______ right-to-left)))
 (let (($x899 (and $x898 $x895)))
 (let ((?x887 (rest ?x747)))
 (let (($x915 (= ?x885 ?x887)))
 (let (($x900 ((_ is stack ) ?x747)))
 (let (($x901 (= c______ center-to-right)))
 (let (($x902 (and $x901 $x900)))
 (let (($x903 (= c______ center-to-left)))
 (let (($x904 (and $x903 $x900)))
 (let ((?x527 (left s______)))
 (let ((?x745 (top ?x527)))
 (let ((?x886 (stack ?x745 ?x747)))
 (let (($x914 (= ?x885 ?x886)))
 (let (($x905 ((_ is stack ) ?x527)))
 (let (($x906 (= c______ left-to-right)))
 (let (($x907 (and $x906 $x905)))
 (let (($x937 (ite $x907 $x914 (ite $x904 $x915 (ite $x902 $x915 (ite $x899 $x923 (ite $x897 $x920 $x923)))))))
 (let (($x908 (= c______ left-to-center)))
 (let (($x909 (and $x908 $x905)))
 (ite $x909 $x923 $x937)))))))))))))))))))))))))))))))
(assert
 (let ((?x37 (stack H (stack G (stack F (stack E (stack B (stack A empty))))))))
 (let ((?x699 (right s_______)))
 (let (($x941 (= ?x699 ?x37)))
 (let ((?x885 (center s_______)))
 (let (($x972 (= ?x885 empty)))
 (let ((?x32 (stack D (stack C (stack I empty)))))
 (let ((?x665 (left s_______)))
 (let (($x973 (= ?x665 ?x32)))
 (let (($x975 (not (and $x973 $x972 $x941))))
 (not $x975)))))))))))
(check-sat)
(exit)
