(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V) (W))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x36 (stack J empty)))
 (let ((?x35 (stack T ?x36)))
 (let ((?x125 (left s_tmp_)))
 (= ?x125 ?x35)))))
(assert
 (let ((?x37 (stack M empty)))
 (let ((?x38 (stack O ?x37)))
 (let ((?x39 (stack D ?x38)))
 (let ((?x40 (stack Q ?x39)))
 (let ((?x41 (stack U ?x40)))
 (let ((?x42 (stack H ?x41)))
 (let ((?x43 (stack K ?x42)))
 (let ((?x44 (stack G ?x43)))
 (let ((?x45 (stack F ?x44)))
 (let ((?x46 (stack W ?x45)))
 (let ((?x47 (stack B ?x46)))
 (let ((?x48 (stack V ?x47)))
 (let ((?x128 (center s_tmp__)))
 (= ?x128 ?x48)))))))))))))))
(assert
 (let ((?x49 (stack A empty)))
 (let ((?x50 (stack C ?x49)))
 (let ((?x51 (stack E ?x50)))
 (let ((?x52 (stack I ?x51)))
 (let ((?x53 (stack L ?x52)))
 (let ((?x54 (stack N ?x53)))
 (let ((?x55 (stack P ?x54)))
 (let ((?x56 (stack R ?x55)))
 (let ((?x57 (stack S ?x56)))
 (let ((?x131 (right s_tmp___)))
 (= ?x131 ?x57))))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x158 (left s_tmp__)))
 (= (left s_tmp___) ?x158)))
(assert
 (let ((?x128 (center s_tmp__)))
 (= (center s_tmp___) ?x128)))
(assert
 (let ((?x162 (center s_tmp_)))
 (= ?x162 (center s_tmp))))
(assert
 (let ((?x165 (right s_tmp_)))
 (= ?x165 (right s_tmp))))
(assert
 (let ((?x125 (left s_tmp_)))
 (let ((?x158 (left s_tmp__)))
 (= ?x158 ?x125))))
(assert
 (let ((?x165 (right s_tmp_)))
 (let ((?x169 (right s_tmp__)))
 (= ?x169 ?x165))))
(assert
 (= c__ c!1))
(assert
 (let ((?x102 (left s_)))
 (let ((?x327 (left s__)))
 (let (($x303 (= ?x327 ?x102)))
 (let ((?x105 (right s_)))
 (let (($x300 ((_ is stack ) ?x105)))
 (let (($x315 (= c_ right-to-left)))
 (let (($x286 (and $x315 $x300)))
 (let ((?x107 (center s_)))
 (let (($x287 ((_ is stack ) ?x107)))
 (let (($x288 (= c_ center-to-right)))
 (let (($x307 (and $x288 $x287)))
 (let (($x308 (= c_ center-to-left)))
 (let (($x309 (and $x308 $x287)))
 (let (($x330 (ite $x309 (= ?x327 (stack (top ?x107) ?x102)) (ite $x307 $x303 (ite $x286 (= ?x327 (stack (top ?x105) ?x102)) $x303)))))
 (let (($x296 (= ?x327 (rest ?x102))))
 (let (($x283 ((_ is stack ) ?x102)))
 (let (($x284 (= c_ left-to-right)))
 (let (($x285 (and $x284 $x283)))
 (let (($x331 (= c_ left-to-center)))
 (let (($x332 (and $x331 $x283)))
 (ite $x332 $x296 (ite $x285 $x296 $x330)))))))))))))))))))))))
(assert
 (let ((?x105 (right s_)))
 (let ((?x290 (right s__)))
 (let (($x335 (= ?x290 ?x105)))
 (let (($x323 (= ?x290 (rest ?x105))))
 (let (($x300 ((_ is stack ) ?x105)))
 (let (($x313 (= c_ right-to-center)))
 (let (($x314 (and $x313 $x300)))
 (let (($x315 (= c_ right-to-left)))
 (let (($x286 (and $x315 $x300)))
 (let ((?x107 (center s_)))
 (let (($x287 ((_ is stack ) ?x107)))
 (let (($x288 (= c_ center-to-right)))
 (let (($x307 (and $x288 $x287)))
 (let (($x318 (ite $x307 (= ?x290 (stack (top ?x107) ?x105)) (ite $x286 $x323 (ite $x314 $x323 $x335)))))
 (let (($x308 (= c_ center-to-left)))
 (let (($x309 (and $x308 $x287)))
 (let ((?x102 (left s_)))
 (let (($x283 ((_ is stack ) ?x102)))
 (let (($x284 (= c_ left-to-right)))
 (let (($x285 (and $x284 $x283)))
 (let (($x331 (= c_ left-to-center)))
 (let (($x332 (and $x331 $x283)))
 (ite $x332 (= ?x290 (stack (top ?x102) ?x105)) (ite $x285 $x335 (ite $x309 $x335 $x318))))))))))))))))))))))))))
(assert
 (let ((?x107 (center s_)))
 (let ((?x305 (center s__)))
 (let (($x301 (= ?x305 ?x107)))
 (let ((?x105 (right s_)))
 (let (($x300 ((_ is stack ) ?x105)))
 (let (($x313 (= c_ right-to-center)))
 (let (($x314 (and $x313 $x300)))
 (let (($x315 (= c_ right-to-left)))
 (let (($x286 (and $x315 $x300)))
 (let (($x281 (= ?x305 (rest ?x107))))
 (let (($x287 ((_ is stack ) ?x107)))
 (let (($x288 (= c_ center-to-right)))
 (let (($x307 (and $x288 $x287)))
 (let (($x317 (ite $x307 $x281 (ite $x286 $x301 (ite $x314 (= ?x305 (stack (top ?x105) ?x107)) $x301)))))
 (let (($x308 (= c_ center-to-left)))
 (let (($x309 (and $x308 $x287)))
 (let ((?x102 (left s_)))
 (let (($x283 ((_ is stack ) ?x102)))
 (let (($x284 (= c_ left-to-right)))
 (let (($x285 (and $x284 $x283)))
 (let (($x331 (= c_ left-to-center)))
 (let (($x332 (and $x331 $x283)))
 (ite $x332 $x301 (ite $x285 (= ?x305 (stack (top ?x102) ?x107)) (ite $x309 $x281 $x317))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x327 (left s__)))
 (let ((?x172 (left s___)))
 (let (($x456 (= ?x172 ?x327)))
 (let ((?x290 (right s__)))
 (let ((?x423 (top ?x290)))
 (let ((?x424 (stack ?x423 ?x327)))
 (let (($x450 (= ?x172 ?x424)))
 (let (($x426 ((_ is stack ) ?x290)))
 (let (($x429 (= c__ right-to-left)))
 (let (($x430 (and $x429 $x426)))
 (let ((?x305 (center s__)))
 (let (($x431 ((_ is stack ) ?x305)))
 (let (($x432 (= c__ center-to-right)))
 (let (($x433 (and $x432 $x431)))
 (let ((?x419 (top ?x305)))
 (let ((?x420 (stack ?x419 ?x327)))
 (let (($x447 (= ?x172 ?x420)))
 (let (($x434 (= c__ center-to-left)))
 (let (($x435 (and $x434 $x431)))
 (let ((?x174 (rest ?x327)))
 (let (($x443 (= ?x172 ?x174)))
 (let (($x436 ((_ is stack ) ?x327)))
 (let (($x437 (= c__ left-to-right)))
 (let (($x438 (and $x437 $x436)))
 (let (($x439 (= c__ left-to-center)))
 (let (($x440 (and $x439 $x436)))
 (ite $x440 $x443 (ite $x438 $x443 (ite $x435 $x447 (ite $x433 $x456 (ite $x430 $x450 $x456))))))))))))))))))))))))))))))))
(assert
 (let ((?x290 (right s__)))
 (let ((?x175 (right s___)))
 (let (($x452 (= ?x175 ?x290)))
 (let ((?x422 (rest ?x290)))
 (let (($x449 (= ?x175 ?x422)))
 (let (($x426 ((_ is stack ) ?x290)))
 (let (($x427 (= c__ right-to-center)))
 (let (($x428 (and $x427 $x426)))
 (let (($x429 (= c__ right-to-left)))
 (let (($x430 (and $x429 $x426)))
 (let ((?x305 (center s__)))
 (let ((?x419 (top ?x305)))
 (let ((?x421 (stack ?x419 ?x290)))
 (let (($x448 (= ?x175 ?x421)))
 (let (($x431 ((_ is stack ) ?x305)))
 (let (($x432 (= c__ center-to-right)))
 (let (($x433 (and $x432 $x431)))
 (let (($x434 (= c__ center-to-left)))
 (let (($x435 (and $x434 $x431)))
 (let ((?x327 (left s__)))
 (let (($x436 ((_ is stack ) ?x327)))
 (let (($x437 (= c__ left-to-right)))
 (let (($x438 (and $x437 $x436)))
 (let (($x469 (ite $x438 $x452 (ite $x435 $x452 (ite $x433 $x448 (ite $x430 $x449 (ite $x428 $x449 $x452)))))))
 (let ((?x279 (top ?x327)))
 (let ((?x415 (stack ?x279 ?x290)))
 (let (($x444 (= ?x175 ?x415)))
 (let (($x439 (= c__ left-to-center)))
 (let (($x440 (and $x439 $x436)))
 (ite $x440 $x444 $x469)))))))))))))))))))))))))))))))
(assert
 (let ((?x305 (center s__)))
 (let ((?x416 (center s___)))
 (let (($x454 (= ?x416 ?x305)))
 (let ((?x290 (right s__)))
 (let ((?x423 (top ?x290)))
 (let ((?x425 (stack ?x423 ?x305)))
 (let (($x451 (= ?x416 ?x425)))
 (let (($x426 ((_ is stack ) ?x290)))
 (let (($x427 (= c__ right-to-center)))
 (let (($x428 (and $x427 $x426)))
 (let (($x429 (= c__ right-to-left)))
 (let (($x430 (and $x429 $x426)))
 (let ((?x418 (rest ?x305)))
 (let (($x446 (= ?x416 ?x418)))
 (let (($x431 ((_ is stack ) ?x305)))
 (let (($x432 (= c__ center-to-right)))
 (let (($x433 (and $x432 $x431)))
 (let (($x434 (= c__ center-to-left)))
 (let (($x435 (and $x434 $x431)))
 (let ((?x327 (left s__)))
 (let ((?x279 (top ?x327)))
 (let ((?x417 (stack ?x279 ?x305)))
 (let (($x445 (= ?x416 ?x417)))
 (let (($x436 ((_ is stack ) ?x327)))
 (let (($x437 (= c__ left-to-right)))
 (let (($x438 (and $x437 $x436)))
 (let (($x468 (ite $x438 $x445 (ite $x435 $x446 (ite $x433 $x446 (ite $x430 $x454 (ite $x428 $x451 $x454)))))))
 (let (($x439 (= c__ left-to-center)))
 (let (($x440 (and $x439 $x436)))
 (ite $x440 $x454 $x468)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x172 (left s___)))
 (let ((?x343 (left s____)))
 (let (($x594 (= ?x343 ?x172)))
 (let ((?x175 (right s___)))
 (let ((?x561 (top ?x175)))
 (let ((?x562 (stack ?x561 ?x172)))
 (let (($x588 (= ?x343 ?x562)))
 (let (($x564 ((_ is stack ) ?x175)))
 (let (($x567 (= c___ right-to-left)))
 (let (($x568 (and $x567 $x564)))
 (let ((?x416 (center s___)))
 (let (($x569 ((_ is stack ) ?x416)))
 (let (($x570 (= c___ center-to-right)))
 (let (($x571 (and $x570 $x569)))
 (let ((?x557 (top ?x416)))
 (let ((?x558 (stack ?x557 ?x172)))
 (let (($x585 (= ?x343 ?x558)))
 (let (($x572 (= c___ center-to-left)))
 (let (($x573 (and $x572 $x569)))
 (let ((?x385 (rest ?x172)))
 (let (($x581 (= ?x343 ?x385)))
 (let (($x574 ((_ is stack ) ?x172)))
 (let (($x575 (= c___ left-to-right)))
 (let (($x576 (and $x575 $x574)))
 (let (($x577 (= c___ left-to-center)))
 (let (($x578 (and $x577 $x574)))
 (ite $x578 $x581 (ite $x576 $x581 (ite $x573 $x585 (ite $x571 $x594 (ite $x568 $x588 $x594))))))))))))))))))))))))))))))))
(assert
 (let ((?x175 (right s___)))
 (let ((?x386 (right s____)))
 (let (($x590 (= ?x386 ?x175)))
 (let ((?x560 (rest ?x175)))
 (let (($x587 (= ?x386 ?x560)))
 (let (($x564 ((_ is stack ) ?x175)))
 (let (($x565 (= c___ right-to-center)))
 (let (($x566 (and $x565 $x564)))
 (let (($x567 (= c___ right-to-left)))
 (let (($x568 (and $x567 $x564)))
 (let ((?x416 (center s___)))
 (let ((?x557 (top ?x416)))
 (let ((?x559 (stack ?x557 ?x175)))
 (let (($x586 (= ?x386 ?x559)))
 (let (($x569 ((_ is stack ) ?x416)))
 (let (($x570 (= c___ center-to-right)))
 (let (($x571 (and $x570 $x569)))
 (let (($x572 (= c___ center-to-left)))
 (let (($x573 (and $x572 $x569)))
 (let ((?x172 (left s___)))
 (let (($x574 ((_ is stack ) ?x172)))
 (let (($x575 (= c___ left-to-right)))
 (let (($x576 (and $x575 $x574)))
 (let (($x607 (ite $x576 $x590 (ite $x573 $x590 (ite $x571 $x586 (ite $x568 $x587 (ite $x566 $x587 $x590)))))))
 (let ((?x414 (top ?x172)))
 (let ((?x553 (stack ?x414 ?x175)))
 (let (($x582 (= ?x386 ?x553)))
 (let (($x577 (= c___ left-to-center)))
 (let (($x578 (and $x577 $x574)))
 (ite $x578 $x582 $x607)))))))))))))))))))))))))))))))
(assert
 (let ((?x416 (center s___)))
 (let ((?x554 (center s____)))
 (let (($x592 (= ?x554 ?x416)))
 (let ((?x175 (right s___)))
 (let ((?x561 (top ?x175)))
 (let ((?x563 (stack ?x561 ?x416)))
 (let (($x589 (= ?x554 ?x563)))
 (let (($x564 ((_ is stack ) ?x175)))
 (let (($x565 (= c___ right-to-center)))
 (let (($x566 (and $x565 $x564)))
 (let (($x567 (= c___ right-to-left)))
 (let (($x568 (and $x567 $x564)))
 (let ((?x556 (rest ?x416)))
 (let (($x584 (= ?x554 ?x556)))
 (let (($x569 ((_ is stack ) ?x416)))
 (let (($x570 (= c___ center-to-right)))
 (let (($x571 (and $x570 $x569)))
 (let (($x572 (= c___ center-to-left)))
 (let (($x573 (and $x572 $x569)))
 (let ((?x172 (left s___)))
 (let ((?x414 (top ?x172)))
 (let ((?x555 (stack ?x414 ?x416)))
 (let (($x583 (= ?x554 ?x555)))
 (let (($x574 ((_ is stack ) ?x172)))
 (let (($x575 (= c___ left-to-right)))
 (let (($x576 (and $x575 $x574)))
 (let (($x606 (ite $x576 $x583 (ite $x573 $x584 (ite $x571 $x584 (ite $x568 $x592 (ite $x566 $x589 $x592)))))))
 (let (($x577 (= c___ left-to-center)))
 (let (($x578 (and $x577 $x574)))
 (ite $x578 $x592 $x606)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x343 (left s____)))
 (let ((?x472 (left s_____)))
 (let (($x732 (= ?x472 ?x343)))
 (let ((?x386 (right s____)))
 (let ((?x699 (top ?x386)))
 (let ((?x700 (stack ?x699 ?x343)))
 (let (($x726 (= ?x472 ?x700)))
 (let (($x702 ((_ is stack ) ?x386)))
 (let (($x705 (= c____ right-to-left)))
 (let (($x706 (and $x705 $x702)))
 (let ((?x554 (center s____)))
 (let (($x707 ((_ is stack ) ?x554)))
 (let (($x708 (= c____ center-to-right)))
 (let (($x709 (and $x708 $x707)))
 (let ((?x695 (top ?x554)))
 (let ((?x696 (stack ?x695 ?x343)))
 (let (($x723 (= ?x472 ?x696)))
 (let (($x710 (= c____ center-to-left)))
 (let (($x711 (and $x710 $x707)))
 (let ((?x505 (rest ?x343)))
 (let (($x719 (= ?x472 ?x505)))
 (let (($x712 ((_ is stack ) ?x343)))
 (let (($x713 (= c____ left-to-right)))
 (let (($x714 (and $x713 $x712)))
 (let (($x715 (= c____ left-to-center)))
 (let (($x716 (and $x715 $x712)))
 (ite $x716 $x719 (ite $x714 $x719 (ite $x711 $x723 (ite $x709 $x732 (ite $x706 $x726 $x732))))))))))))))))))))))))))))))))
(assert
 (let ((?x386 (right s____)))
 (let ((?x506 (right s_____)))
 (let (($x728 (= ?x506 ?x386)))
 (let ((?x698 (rest ?x386)))
 (let (($x725 (= ?x506 ?x698)))
 (let (($x702 ((_ is stack ) ?x386)))
 (let (($x703 (= c____ right-to-center)))
 (let (($x704 (and $x703 $x702)))
 (let (($x705 (= c____ right-to-left)))
 (let (($x706 (and $x705 $x702)))
 (let ((?x554 (center s____)))
 (let ((?x695 (top ?x554)))
 (let ((?x697 (stack ?x695 ?x386)))
 (let (($x724 (= ?x506 ?x697)))
 (let (($x707 ((_ is stack ) ?x554)))
 (let (($x708 (= c____ center-to-right)))
 (let (($x709 (and $x708 $x707)))
 (let (($x710 (= c____ center-to-left)))
 (let (($x711 (and $x710 $x707)))
 (let ((?x343 (left s____)))
 (let (($x712 ((_ is stack ) ?x343)))
 (let (($x713 (= c____ left-to-right)))
 (let (($x714 (and $x713 $x712)))
 (let (($x745 (ite $x714 $x728 (ite $x711 $x728 (ite $x709 $x724 (ite $x706 $x725 (ite $x704 $x725 $x728)))))))
 (let ((?x552 (top ?x343)))
 (let ((?x691 (stack ?x552 ?x386)))
 (let (($x720 (= ?x506 ?x691)))
 (let (($x715 (= c____ left-to-center)))
 (let (($x716 (and $x715 $x712)))
 (ite $x716 $x720 $x745)))))))))))))))))))))))))))))))
(assert
 (let ((?x554 (center s____)))
 (let ((?x692 (center s_____)))
 (let (($x730 (= ?x692 ?x554)))
 (let ((?x386 (right s____)))
 (let ((?x699 (top ?x386)))
 (let ((?x701 (stack ?x699 ?x554)))
 (let (($x727 (= ?x692 ?x701)))
 (let (($x702 ((_ is stack ) ?x386)))
 (let (($x703 (= c____ right-to-center)))
 (let (($x704 (and $x703 $x702)))
 (let (($x705 (= c____ right-to-left)))
 (let (($x706 (and $x705 $x702)))
 (let ((?x694 (rest ?x554)))
 (let (($x722 (= ?x692 ?x694)))
 (let (($x707 ((_ is stack ) ?x554)))
 (let (($x708 (= c____ center-to-right)))
 (let (($x709 (and $x708 $x707)))
 (let (($x710 (= c____ center-to-left)))
 (let (($x711 (and $x710 $x707)))
 (let ((?x343 (left s____)))
 (let ((?x552 (top ?x343)))
 (let ((?x693 (stack ?x552 ?x554)))
 (let (($x721 (= ?x692 ?x693)))
 (let (($x712 ((_ is stack ) ?x343)))
 (let (($x713 (= c____ left-to-right)))
 (let (($x714 (and $x713 $x712)))
 (let (($x744 (ite $x714 $x721 (ite $x711 $x722 (ite $x709 $x722 (ite $x706 $x730 (ite $x704 $x727 $x730)))))))
 (let (($x715 (= c____ left-to-center)))
 (let (($x716 (and $x715 $x712)))
 (ite $x716 $x730 $x744)))))))))))))))))))))))))))))))
(assert
 (let ((?x71 (stack K (stack J (stack G (stack F (stack C (stack A empty))))))))
 (let ((?x77 (stack V (stack U (stack R (stack O (stack N (stack L ?x71))))))))
 (let ((?x78 (stack W ?x77)))
 (let ((?x506 (right s_____)))
 (let (($x748 (= ?x506 ?x78)))
 (let ((?x63 (stack E (stack I (stack M (stack H (stack S (stack B empty))))))))
 (let ((?x67 (stack Q (stack P (stack D (stack T ?x63))))))
 (let ((?x692 (center s_____)))
 (let (($x779 (= ?x692 ?x67)))
 (let ((?x472 (left s_____)))
 (let (($x780 (= ?x472 empty)))
 (let (($x782 (not (and $x780 $x779 $x748))))
 (not $x782))))))))))))))
(check-sat)
(exit)
