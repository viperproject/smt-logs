(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x31 (stack H empty)))
 (let ((?x32 (stack P ?x31)))
 (let ((?x33 (stack G ?x32)))
 (let ((?x34 (stack B ?x33)))
 (let ((?x35 (stack D ?x34)))
 (let ((?x36 (stack Q ?x35)))
 (let ((?x37 (stack M ?x36)))
 (let ((?x38 (stack N ?x37)))
 (let ((?x39 (stack E ?x38)))
 (let ((?x40 (stack A ?x39)))
 (let ((?x41 (stack K ?x40)))
 (let ((?x42 (stack I ?x41)))
 (let ((?x43 (stack S ?x42)))
 (let ((?x114 (left s_tmp_)))
 (= ?x114 ?x43))))))))))))))))
(assert
 (let ((?x44 (stack R empty)))
 (let ((?x45 (stack F ?x44)))
 (let ((?x117 (center s_tmp__)))
 (= ?x117 ?x45)))))
(assert
 (let ((?x46 (stack C empty)))
 (let ((?x47 (stack J ?x46)))
 (let ((?x48 (stack L ?x47)))
 (let ((?x49 (stack O ?x48)))
 (let ((?x120 (right s_tmp___)))
 (= ?x120 ?x49)))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x147 (left s_tmp__)))
 (= (left s_tmp___) ?x147)))
(assert
 (let ((?x117 (center s_tmp__)))
 (= (center s_tmp___) ?x117)))
(assert
 (let ((?x151 (center s_tmp_)))
 (= ?x151 (center s_tmp))))
(assert
 (let ((?x154 (right s_tmp_)))
 (= ?x154 (right s_tmp))))
(assert
 (let ((?x114 (left s_tmp_)))
 (let ((?x147 (left s_tmp__)))
 (= ?x147 ?x114))))
(assert
 (let ((?x154 (right s_tmp_)))
 (let ((?x158 (right s_tmp__)))
 (= ?x158 ?x154))))
(assert
 (= c__ c!1))
(assert
 (let ((?x91 (left s_)))
 (let ((?x295 (left s__)))
 (let (($x283 (= ?x295 ?x91)))
 (let ((?x94 (right s_)))
 (let (($x307 ((_ is stack ) ?x94)))
 (let (($x301 (= c_ right-to-left)))
 (let (($x266 (and $x301 $x307)))
 (let ((?x96 (center s_)))
 (let (($x267 ((_ is stack ) ?x96)))
 (let (($x268 (= c_ center-to-right)))
 (let (($x260 (and $x268 $x267)))
 (let (($x261 (= c_ center-to-left)))
 (let (($x262 (and $x261 $x267)))
 (let (($x313 (ite $x262 (= ?x295 (stack (top ?x96) ?x91)) (ite $x260 $x283 (ite $x266 (= ?x295 (stack (top ?x94) ?x91)) $x283)))))
 (let (($x285 (= ?x295 (rest ?x91))))
 (let (($x275 ((_ is stack ) ?x91)))
 (let (($x276 (= c_ left-to-right)))
 (let (($x277 (and $x276 $x275)))
 (let (($x278 (= c_ left-to-center)))
 (let (($x279 (and $x278 $x275)))
 (ite $x279 $x285 (ite $x277 $x285 $x313)))))))))))))))))))))))
(assert
 (let ((?x94 (right s_)))
 (let ((?x291 (right s__)))
 (let (($x297 (= ?x291 ?x94)))
 (let (($x288 (= ?x291 (rest ?x94))))
 (let (($x307 ((_ is stack ) ?x94)))
 (let (($x299 (= c_ right-to-center)))
 (let (($x300 (and $x299 $x307)))
 (let (($x301 (= c_ right-to-left)))
 (let (($x266 (and $x301 $x307)))
 (let ((?x96 (center s_)))
 (let (($x267 ((_ is stack ) ?x96)))
 (let (($x268 (= c_ center-to-right)))
 (let (($x260 (and $x268 $x267)))
 (let (($x304 (ite $x260 (= ?x291 (stack (top ?x96) ?x94)) (ite $x266 $x288 (ite $x300 $x288 $x297)))))
 (let (($x261 (= c_ center-to-left)))
 (let (($x262 (and $x261 $x267)))
 (let ((?x91 (left s_)))
 (let (($x275 ((_ is stack ) ?x91)))
 (let (($x276 (= c_ left-to-right)))
 (let (($x277 (and $x276 $x275)))
 (let (($x278 (= c_ left-to-center)))
 (let (($x279 (and $x278 $x275)))
 (ite $x279 (= ?x291 (stack (top ?x91) ?x94)) (ite $x277 $x297 (ite $x262 $x297 $x304))))))))))))))))))))))))))
(assert
 (let ((?x96 (center s_)))
 (let ((?x273 (center s__)))
 (let (($x281 (= ?x273 ?x96)))
 (let ((?x94 (right s_)))
 (let (($x307 ((_ is stack ) ?x94)))
 (let (($x299 (= c_ right-to-center)))
 (let (($x300 (and $x299 $x307)))
 (let (($x301 (= c_ right-to-left)))
 (let (($x266 (and $x301 $x307)))
 (let (($x309 (= ?x273 (rest ?x96))))
 (let (($x267 ((_ is stack ) ?x96)))
 (let (($x268 (= c_ center-to-right)))
 (let (($x260 (and $x268 $x267)))
 (let (($x303 (ite $x260 $x309 (ite $x266 $x281 (ite $x300 (= ?x273 (stack (top ?x94) ?x96)) $x281)))))
 (let (($x261 (= c_ center-to-left)))
 (let (($x262 (and $x261 $x267)))
 (let ((?x91 (left s_)))
 (let (($x275 ((_ is stack ) ?x91)))
 (let (($x276 (= c_ left-to-right)))
 (let (($x277 (and $x276 $x275)))
 (let (($x278 (= c_ left-to-center)))
 (let (($x279 (and $x278 $x275)))
 (ite $x279 $x281 (ite $x277 (= ?x273 (stack (top ?x91) ?x96)) (ite $x262 $x309 $x303))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x295 (left s__)))
 (let ((?x161 (left s___)))
 (let (($x433 (= ?x161 ?x295)))
 (let ((?x291 (right s__)))
 (let ((?x400 (top ?x291)))
 (let ((?x401 (stack ?x400 ?x295)))
 (let (($x427 (= ?x161 ?x401)))
 (let (($x403 ((_ is stack ) ?x291)))
 (let (($x406 (= c__ right-to-left)))
 (let (($x407 (and $x406 $x403)))
 (let ((?x273 (center s__)))
 (let (($x408 ((_ is stack ) ?x273)))
 (let (($x409 (= c__ center-to-right)))
 (let (($x410 (and $x409 $x408)))
 (let ((?x396 (top ?x273)))
 (let ((?x397 (stack ?x396 ?x295)))
 (let (($x424 (= ?x161 ?x397)))
 (let (($x411 (= c__ center-to-left)))
 (let (($x412 (and $x411 $x408)))
 (let ((?x163 (rest ?x295)))
 (let (($x420 (= ?x161 ?x163)))
 (let (($x413 ((_ is stack ) ?x295)))
 (let (($x414 (= c__ left-to-right)))
 (let (($x415 (and $x414 $x413)))
 (let (($x416 (= c__ left-to-center)))
 (let (($x417 (and $x416 $x413)))
 (ite $x417 $x420 (ite $x415 $x420 (ite $x412 $x424 (ite $x410 $x433 (ite $x407 $x427 $x433))))))))))))))))))))))))))))))))
(assert
 (let ((?x291 (right s__)))
 (let ((?x164 (right s___)))
 (let (($x429 (= ?x164 ?x291)))
 (let ((?x399 (rest ?x291)))
 (let (($x426 (= ?x164 ?x399)))
 (let (($x403 ((_ is stack ) ?x291)))
 (let (($x404 (= c__ right-to-center)))
 (let (($x405 (and $x404 $x403)))
 (let (($x406 (= c__ right-to-left)))
 (let (($x407 (and $x406 $x403)))
 (let ((?x273 (center s__)))
 (let ((?x396 (top ?x273)))
 (let ((?x398 (stack ?x396 ?x291)))
 (let (($x425 (= ?x164 ?x398)))
 (let (($x408 ((_ is stack ) ?x273)))
 (let (($x409 (= c__ center-to-right)))
 (let (($x410 (and $x409 $x408)))
 (let (($x411 (= c__ center-to-left)))
 (let (($x412 (and $x411 $x408)))
 (let ((?x295 (left s__)))
 (let (($x413 ((_ is stack ) ?x295)))
 (let (($x414 (= c__ left-to-right)))
 (let (($x415 (and $x414 $x413)))
 (let (($x446 (ite $x415 $x429 (ite $x412 $x429 (ite $x410 $x425 (ite $x407 $x426 (ite $x405 $x426 $x429)))))))
 (let ((?x256 (top ?x295)))
 (let ((?x392 (stack ?x256 ?x291)))
 (let (($x421 (= ?x164 ?x392)))
 (let (($x416 (= c__ left-to-center)))
 (let (($x417 (and $x416 $x413)))
 (ite $x417 $x421 $x446)))))))))))))))))))))))))))))))
(assert
 (let ((?x273 (center s__)))
 (let ((?x393 (center s___)))
 (let (($x431 (= ?x393 ?x273)))
 (let ((?x291 (right s__)))
 (let ((?x400 (top ?x291)))
 (let ((?x402 (stack ?x400 ?x273)))
 (let (($x428 (= ?x393 ?x402)))
 (let (($x403 ((_ is stack ) ?x291)))
 (let (($x404 (= c__ right-to-center)))
 (let (($x405 (and $x404 $x403)))
 (let (($x406 (= c__ right-to-left)))
 (let (($x407 (and $x406 $x403)))
 (let ((?x395 (rest ?x273)))
 (let (($x423 (= ?x393 ?x395)))
 (let (($x408 ((_ is stack ) ?x273)))
 (let (($x409 (= c__ center-to-right)))
 (let (($x410 (and $x409 $x408)))
 (let (($x411 (= c__ center-to-left)))
 (let (($x412 (and $x411 $x408)))
 (let ((?x295 (left s__)))
 (let ((?x256 (top ?x295)))
 (let ((?x394 (stack ?x256 ?x273)))
 (let (($x422 (= ?x393 ?x394)))
 (let (($x413 ((_ is stack ) ?x295)))
 (let (($x414 (= c__ left-to-right)))
 (let (($x415 (and $x414 $x413)))
 (let (($x445 (ite $x415 $x422 (ite $x412 $x423 (ite $x410 $x423 (ite $x407 $x431 (ite $x405 $x428 $x431)))))))
 (let (($x416 (= c__ left-to-center)))
 (let (($x417 (and $x416 $x413)))
 (ite $x417 $x431 $x445)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x161 (left s___)))
 (let ((?x320 (left s____)))
 (let (($x571 (= ?x320 ?x161)))
 (let ((?x164 (right s___)))
 (let ((?x538 (top ?x164)))
 (let ((?x539 (stack ?x538 ?x161)))
 (let (($x565 (= ?x320 ?x539)))
 (let (($x541 ((_ is stack ) ?x164)))
 (let (($x544 (= c___ right-to-left)))
 (let (($x545 (and $x544 $x541)))
 (let ((?x393 (center s___)))
 (let (($x546 ((_ is stack ) ?x393)))
 (let (($x547 (= c___ center-to-right)))
 (let (($x548 (and $x547 $x546)))
 (let ((?x534 (top ?x393)))
 (let ((?x535 (stack ?x534 ?x161)))
 (let (($x562 (= ?x320 ?x535)))
 (let (($x549 (= c___ center-to-left)))
 (let (($x550 (and $x549 $x546)))
 (let ((?x364 (rest ?x161)))
 (let (($x558 (= ?x320 ?x364)))
 (let (($x551 ((_ is stack ) ?x161)))
 (let (($x552 (= c___ left-to-right)))
 (let (($x553 (and $x552 $x551)))
 (let (($x554 (= c___ left-to-center)))
 (let (($x555 (and $x554 $x551)))
 (ite $x555 $x558 (ite $x553 $x558 (ite $x550 $x562 (ite $x548 $x571 (ite $x545 $x565 $x571))))))))))))))))))))))))))))))))
(assert
 (let ((?x164 (right s___)))
 (let ((?x365 (right s____)))
 (let (($x567 (= ?x365 ?x164)))
 (let ((?x537 (rest ?x164)))
 (let (($x564 (= ?x365 ?x537)))
 (let (($x541 ((_ is stack ) ?x164)))
 (let (($x542 (= c___ right-to-center)))
 (let (($x543 (and $x542 $x541)))
 (let (($x544 (= c___ right-to-left)))
 (let (($x545 (and $x544 $x541)))
 (let ((?x393 (center s___)))
 (let ((?x534 (top ?x393)))
 (let ((?x536 (stack ?x534 ?x164)))
 (let (($x563 (= ?x365 ?x536)))
 (let (($x546 ((_ is stack ) ?x393)))
 (let (($x547 (= c___ center-to-right)))
 (let (($x548 (and $x547 $x546)))
 (let (($x549 (= c___ center-to-left)))
 (let (($x550 (and $x549 $x546)))
 (let ((?x161 (left s___)))
 (let (($x551 ((_ is stack ) ?x161)))
 (let (($x552 (= c___ left-to-right)))
 (let (($x553 (and $x552 $x551)))
 (let (($x584 (ite $x553 $x567 (ite $x550 $x567 (ite $x548 $x563 (ite $x545 $x564 (ite $x543 $x564 $x567)))))))
 (let ((?x391 (top ?x161)))
 (let ((?x530 (stack ?x391 ?x164)))
 (let (($x559 (= ?x365 ?x530)))
 (let (($x554 (= c___ left-to-center)))
 (let (($x555 (and $x554 $x551)))
 (ite $x555 $x559 $x584)))))))))))))))))))))))))))))))
(assert
 (let ((?x393 (center s___)))
 (let ((?x531 (center s____)))
 (let (($x569 (= ?x531 ?x393)))
 (let ((?x164 (right s___)))
 (let ((?x538 (top ?x164)))
 (let ((?x540 (stack ?x538 ?x393)))
 (let (($x566 (= ?x531 ?x540)))
 (let (($x541 ((_ is stack ) ?x164)))
 (let (($x542 (= c___ right-to-center)))
 (let (($x543 (and $x542 $x541)))
 (let (($x544 (= c___ right-to-left)))
 (let (($x545 (and $x544 $x541)))
 (let ((?x533 (rest ?x393)))
 (let (($x561 (= ?x531 ?x533)))
 (let (($x546 ((_ is stack ) ?x393)))
 (let (($x547 (= c___ center-to-right)))
 (let (($x548 (and $x547 $x546)))
 (let (($x549 (= c___ center-to-left)))
 (let (($x550 (and $x549 $x546)))
 (let ((?x161 (left s___)))
 (let ((?x391 (top ?x161)))
 (let ((?x532 (stack ?x391 ?x393)))
 (let (($x560 (= ?x531 ?x532)))
 (let (($x551 ((_ is stack ) ?x161)))
 (let (($x552 (= c___ left-to-right)))
 (let (($x553 (and $x552 $x551)))
 (let (($x583 (ite $x553 $x560 (ite $x550 $x561 (ite $x548 $x561 (ite $x545 $x569 (ite $x543 $x566 $x569)))))))
 (let (($x554 (= c___ left-to-center)))
 (let (($x555 (and $x554 $x551)))
 (ite $x555 $x569 $x583)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x320 (left s____)))
 (let ((?x449 (left s_____)))
 (let (($x709 (= ?x449 ?x320)))
 (let ((?x365 (right s____)))
 (let ((?x676 (top ?x365)))
 (let ((?x677 (stack ?x676 ?x320)))
 (let (($x703 (= ?x449 ?x677)))
 (let (($x679 ((_ is stack ) ?x365)))
 (let (($x682 (= c____ right-to-left)))
 (let (($x683 (and $x682 $x679)))
 (let ((?x531 (center s____)))
 (let (($x684 ((_ is stack ) ?x531)))
 (let (($x685 (= c____ center-to-right)))
 (let (($x686 (and $x685 $x684)))
 (let ((?x672 (top ?x531)))
 (let ((?x673 (stack ?x672 ?x320)))
 (let (($x700 (= ?x449 ?x673)))
 (let (($x687 (= c____ center-to-left)))
 (let (($x688 (and $x687 $x684)))
 (let ((?x482 (rest ?x320)))
 (let (($x696 (= ?x449 ?x482)))
 (let (($x689 ((_ is stack ) ?x320)))
 (let (($x690 (= c____ left-to-right)))
 (let (($x691 (and $x690 $x689)))
 (let (($x692 (= c____ left-to-center)))
 (let (($x693 (and $x692 $x689)))
 (ite $x693 $x696 (ite $x691 $x696 (ite $x688 $x700 (ite $x686 $x709 (ite $x683 $x703 $x709))))))))))))))))))))))))))))))))
(assert
 (let ((?x365 (right s____)))
 (let ((?x483 (right s_____)))
 (let (($x705 (= ?x483 ?x365)))
 (let ((?x675 (rest ?x365)))
 (let (($x702 (= ?x483 ?x675)))
 (let (($x679 ((_ is stack ) ?x365)))
 (let (($x680 (= c____ right-to-center)))
 (let (($x681 (and $x680 $x679)))
 (let (($x682 (= c____ right-to-left)))
 (let (($x683 (and $x682 $x679)))
 (let ((?x531 (center s____)))
 (let ((?x672 (top ?x531)))
 (let ((?x674 (stack ?x672 ?x365)))
 (let (($x701 (= ?x483 ?x674)))
 (let (($x684 ((_ is stack ) ?x531)))
 (let (($x685 (= c____ center-to-right)))
 (let (($x686 (and $x685 $x684)))
 (let (($x687 (= c____ center-to-left)))
 (let (($x688 (and $x687 $x684)))
 (let ((?x320 (left s____)))
 (let (($x689 ((_ is stack ) ?x320)))
 (let (($x690 (= c____ left-to-right)))
 (let (($x691 (and $x690 $x689)))
 (let (($x722 (ite $x691 $x705 (ite $x688 $x705 (ite $x686 $x701 (ite $x683 $x702 (ite $x681 $x702 $x705)))))))
 (let ((?x529 (top ?x320)))
 (let ((?x668 (stack ?x529 ?x365)))
 (let (($x697 (= ?x483 ?x668)))
 (let (($x692 (= c____ left-to-center)))
 (let (($x693 (and $x692 $x689)))
 (ite $x693 $x697 $x722)))))))))))))))))))))))))))))))
(assert
 (let ((?x531 (center s____)))
 (let ((?x669 (center s_____)))
 (let (($x707 (= ?x669 ?x531)))
 (let ((?x365 (right s____)))
 (let ((?x676 (top ?x365)))
 (let ((?x678 (stack ?x676 ?x531)))
 (let (($x704 (= ?x669 ?x678)))
 (let (($x679 ((_ is stack ) ?x365)))
 (let (($x680 (= c____ right-to-center)))
 (let (($x681 (and $x680 $x679)))
 (let (($x682 (= c____ right-to-left)))
 (let (($x683 (and $x682 $x679)))
 (let ((?x671 (rest ?x531)))
 (let (($x699 (= ?x669 ?x671)))
 (let (($x684 ((_ is stack ) ?x531)))
 (let (($x685 (= c____ center-to-right)))
 (let (($x686 (and $x685 $x684)))
 (let (($x687 (= c____ center-to-left)))
 (let (($x688 (and $x687 $x684)))
 (let ((?x320 (left s____)))
 (let ((?x529 (top ?x320)))
 (let ((?x670 (stack ?x529 ?x531)))
 (let (($x698 (= ?x669 ?x670)))
 (let (($x689 ((_ is stack ) ?x320)))
 (let (($x690 (= c____ left-to-right)))
 (let (($x691 (and $x690 $x689)))
 (let (($x721 (ite $x691 $x698 (ite $x688 $x699 (ite $x686 $x699 (ite $x683 $x707 (ite $x681 $x704 $x707)))))))
 (let (($x692 (= c____ left-to-center)))
 (let (($x693 (and $x692 $x689)))
 (ite $x693 $x707 $x721)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x449 (left s_____)))
 (let ((?x587 (left s______)))
 (let (($x847 (= ?x587 ?x449)))
 (let ((?x483 (right s_____)))
 (let ((?x814 (top ?x483)))
 (let ((?x815 (stack ?x814 ?x449)))
 (let (($x841 (= ?x587 ?x815)))
 (let (($x817 ((_ is stack ) ?x483)))
 (let (($x820 (= c_____ right-to-left)))
 (let (($x821 (and $x820 $x817)))
 (let ((?x669 (center s_____)))
 (let (($x822 ((_ is stack ) ?x669)))
 (let (($x823 (= c_____ center-to-right)))
 (let (($x824 (and $x823 $x822)))
 (let ((?x810 (top ?x669)))
 (let ((?x811 (stack ?x810 ?x449)))
 (let (($x838 (= ?x587 ?x811)))
 (let (($x825 (= c_____ center-to-left)))
 (let (($x826 (and $x825 $x822)))
 (let ((?x620 (rest ?x449)))
 (let (($x834 (= ?x587 ?x620)))
 (let (($x827 ((_ is stack ) ?x449)))
 (let (($x828 (= c_____ left-to-right)))
 (let (($x829 (and $x828 $x827)))
 (let (($x830 (= c_____ left-to-center)))
 (let (($x831 (and $x830 $x827)))
 (ite $x831 $x834 (ite $x829 $x834 (ite $x826 $x838 (ite $x824 $x847 (ite $x821 $x841 $x847))))))))))))))))))))))))))))))))
(assert
 (let ((?x483 (right s_____)))
 (let ((?x621 (right s______)))
 (let (($x843 (= ?x621 ?x483)))
 (let ((?x813 (rest ?x483)))
 (let (($x840 (= ?x621 ?x813)))
 (let (($x817 ((_ is stack ) ?x483)))
 (let (($x818 (= c_____ right-to-center)))
 (let (($x819 (and $x818 $x817)))
 (let (($x820 (= c_____ right-to-left)))
 (let (($x821 (and $x820 $x817)))
 (let ((?x669 (center s_____)))
 (let ((?x810 (top ?x669)))
 (let ((?x812 (stack ?x810 ?x483)))
 (let (($x839 (= ?x621 ?x812)))
 (let (($x822 ((_ is stack ) ?x669)))
 (let (($x823 (= c_____ center-to-right)))
 (let (($x824 (and $x823 $x822)))
 (let (($x825 (= c_____ center-to-left)))
 (let (($x826 (and $x825 $x822)))
 (let ((?x449 (left s_____)))
 (let (($x827 ((_ is stack ) ?x449)))
 (let (($x828 (= c_____ left-to-right)))
 (let (($x829 (and $x828 $x827)))
 (let (($x860 (ite $x829 $x843 (ite $x826 $x843 (ite $x824 $x839 (ite $x821 $x840 (ite $x819 $x840 $x843)))))))
 (let ((?x667 (top ?x449)))
 (let ((?x806 (stack ?x667 ?x483)))
 (let (($x835 (= ?x621 ?x806)))
 (let (($x830 (= c_____ left-to-center)))
 (let (($x831 (and $x830 $x827)))
 (ite $x831 $x835 $x860)))))))))))))))))))))))))))))))
(assert
 (let ((?x669 (center s_____)))
 (let ((?x807 (center s______)))
 (let (($x845 (= ?x807 ?x669)))
 (let ((?x483 (right s_____)))
 (let ((?x814 (top ?x483)))
 (let ((?x816 (stack ?x814 ?x669)))
 (let (($x842 (= ?x807 ?x816)))
 (let (($x817 ((_ is stack ) ?x483)))
 (let (($x818 (= c_____ right-to-center)))
 (let (($x819 (and $x818 $x817)))
 (let (($x820 (= c_____ right-to-left)))
 (let (($x821 (and $x820 $x817)))
 (let ((?x809 (rest ?x669)))
 (let (($x837 (= ?x807 ?x809)))
 (let (($x822 ((_ is stack ) ?x669)))
 (let (($x823 (= c_____ center-to-right)))
 (let (($x824 (and $x823 $x822)))
 (let (($x825 (= c_____ center-to-left)))
 (let (($x826 (and $x825 $x822)))
 (let ((?x449 (left s_____)))
 (let ((?x667 (top ?x449)))
 (let ((?x808 (stack ?x667 ?x669)))
 (let (($x836 (= ?x807 ?x808)))
 (let (($x827 ((_ is stack ) ?x449)))
 (let (($x828 (= c_____ left-to-right)))
 (let (($x829 (and $x828 $x827)))
 (let (($x859 (ite $x829 $x836 (ite $x826 $x837 (ite $x824 $x837 (ite $x821 $x845 (ite $x819 $x842 $x845)))))))
 (let (($x830 (= c_____ left-to-center)))
 (let (($x831 (and $x830 $x827)))
 (ite $x831 $x845 $x859)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x587 (left s______)))
 (let ((?x725 (left s_______)))
 (let (($x985 (= ?x725 ?x587)))
 (let ((?x621 (right s______)))
 (let ((?x952 (top ?x621)))
 (let ((?x953 (stack ?x952 ?x587)))
 (let (($x979 (= ?x725 ?x953)))
 (let (($x955 ((_ is stack ) ?x621)))
 (let (($x958 (= c______ right-to-left)))
 (let (($x959 (and $x958 $x955)))
 (let ((?x807 (center s______)))
 (let (($x960 ((_ is stack ) ?x807)))
 (let (($x961 (= c______ center-to-right)))
 (let (($x962 (and $x961 $x960)))
 (let ((?x948 (top ?x807)))
 (let ((?x949 (stack ?x948 ?x587)))
 (let (($x976 (= ?x725 ?x949)))
 (let (($x963 (= c______ center-to-left)))
 (let (($x964 (and $x963 $x960)))
 (let ((?x758 (rest ?x587)))
 (let (($x972 (= ?x725 ?x758)))
 (let (($x965 ((_ is stack ) ?x587)))
 (let (($x966 (= c______ left-to-right)))
 (let (($x967 (and $x966 $x965)))
 (let (($x968 (= c______ left-to-center)))
 (let (($x969 (and $x968 $x965)))
 (ite $x969 $x972 (ite $x967 $x972 (ite $x964 $x976 (ite $x962 $x985 (ite $x959 $x979 $x985))))))))))))))))))))))))))))))))
(assert
 (let ((?x621 (right s______)))
 (let ((?x759 (right s_______)))
 (let (($x981 (= ?x759 ?x621)))
 (let ((?x951 (rest ?x621)))
 (let (($x978 (= ?x759 ?x951)))
 (let (($x955 ((_ is stack ) ?x621)))
 (let (($x956 (= c______ right-to-center)))
 (let (($x957 (and $x956 $x955)))
 (let (($x958 (= c______ right-to-left)))
 (let (($x959 (and $x958 $x955)))
 (let ((?x807 (center s______)))
 (let ((?x948 (top ?x807)))
 (let ((?x950 (stack ?x948 ?x621)))
 (let (($x977 (= ?x759 ?x950)))
 (let (($x960 ((_ is stack ) ?x807)))
 (let (($x961 (= c______ center-to-right)))
 (let (($x962 (and $x961 $x960)))
 (let (($x963 (= c______ center-to-left)))
 (let (($x964 (and $x963 $x960)))
 (let ((?x587 (left s______)))
 (let (($x965 ((_ is stack ) ?x587)))
 (let (($x966 (= c______ left-to-right)))
 (let (($x967 (and $x966 $x965)))
 (let (($x998 (ite $x967 $x981 (ite $x964 $x981 (ite $x962 $x977 (ite $x959 $x978 (ite $x957 $x978 $x981)))))))
 (let ((?x805 (top ?x587)))
 (let ((?x944 (stack ?x805 ?x621)))
 (let (($x973 (= ?x759 ?x944)))
 (let (($x968 (= c______ left-to-center)))
 (let (($x969 (and $x968 $x965)))
 (ite $x969 $x973 $x998)))))))))))))))))))))))))))))))
(assert
 (let ((?x807 (center s______)))
 (let ((?x945 (center s_______)))
 (let (($x983 (= ?x945 ?x807)))
 (let ((?x621 (right s______)))
 (let ((?x952 (top ?x621)))
 (let ((?x954 (stack ?x952 ?x807)))
 (let (($x980 (= ?x945 ?x954)))
 (let (($x955 ((_ is stack ) ?x621)))
 (let (($x956 (= c______ right-to-center)))
 (let (($x957 (and $x956 $x955)))
 (let (($x958 (= c______ right-to-left)))
 (let (($x959 (and $x958 $x955)))
 (let ((?x947 (rest ?x807)))
 (let (($x975 (= ?x945 ?x947)))
 (let (($x960 ((_ is stack ) ?x807)))
 (let (($x961 (= c______ center-to-right)))
 (let (($x962 (and $x961 $x960)))
 (let (($x963 (= c______ center-to-left)))
 (let (($x964 (and $x963 $x960)))
 (let ((?x587 (left s______)))
 (let ((?x805 (top ?x587)))
 (let ((?x946 (stack ?x805 ?x807)))
 (let (($x974 (= ?x945 ?x946)))
 (let (($x965 ((_ is stack ) ?x587)))
 (let (($x966 (= c______ left-to-right)))
 (let (($x967 (and $x966 $x965)))
 (let (($x997 (ite $x967 $x974 (ite $x964 $x975 (ite $x962 $x975 (ite $x959 $x983 (ite $x957 $x980 $x983)))))))
 (let (($x968 (= c______ left-to-center)))
 (let (($x969 (and $x968 $x965)))
 (ite $x969 $x983 $x997)))))))))))))))))))))))))))))))
(assert
 (let ((?x67 (stack I (stack D (stack A empty)))))
 (let ((?x759 (right s_______)))
 (let (($x1001 (= ?x759 ?x67)))
 (let ((?x64 (stack H (stack C (stack R empty)))))
 (let ((?x945 (center s_______)))
 (let (($x1032 (= ?x945 ?x64)))
 (let ((?x55 (stack N (stack Q (stack O (stack B (stack K (stack G empty))))))))
 (let ((?x61 (stack P (stack S (stack E (stack L (stack J (stack F ?x55))))))))
 (let ((?x62 (stack M ?x61)))
 (let ((?x725 (left s_______)))
 (let (($x1033 (= ?x725 ?x62)))
 (let (($x1035 (not (and $x1033 $x1032 $x1001))))
 (not $x1035))))))))))))))
(check-sat)
(exit)
