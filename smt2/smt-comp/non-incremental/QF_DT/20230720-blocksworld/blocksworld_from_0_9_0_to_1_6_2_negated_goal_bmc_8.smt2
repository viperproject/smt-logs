(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(declare-fun c!8 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x85 (left s_tmp_)))
 (= ?x85 empty)))
(assert
 (let ((?x21 (stack E empty)))
 (let ((?x22 (stack C ?x21)))
 (let ((?x23 (stack B ?x22)))
 (let ((?x24 (stack A ?x23)))
 (let ((?x25 (stack I ?x24)))
 (let ((?x26 (stack D ?x25)))
 (let ((?x27 (stack F ?x26)))
 (let ((?x28 (stack G ?x27)))
 (let ((?x29 (stack H ?x28)))
 (let ((?x88 (center s_tmp__)))
 (= ?x88 ?x29))))))))))))
(assert
 (let ((?x91 (right s_tmp___)))
 (= ?x91 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x118 (left s_tmp__)))
 (= (left s_tmp___) ?x118)))
(assert
 (let ((?x88 (center s_tmp__)))
 (= (center s_tmp___) ?x88)))
(assert
 (let ((?x122 (center s_tmp_)))
 (= ?x122 (center s_tmp))))
(assert
 (let ((?x125 (right s_tmp_)))
 (= ?x125 (right s_tmp))))
(assert
 (let ((?x85 (left s_tmp_)))
 (let ((?x118 (left s_tmp__)))
 (= ?x118 ?x85))))
(assert
 (let ((?x125 (right s_tmp_)))
 (let ((?x129 (right s_tmp__)))
 (= ?x129 ?x125))))
(assert
 (= c__ c!1))
(assert
 (let ((?x62 (left s_)))
 (let ((?x212 (left s__)))
 (let (($x245 (= ?x212 ?x62)))
 (let ((?x65 (right s_)))
 (let (($x206 ((_ is stack ) ?x65)))
 (let (($x219 (and (= c_ right-to-left) $x206)))
 (let ((?x67 (center s_)))
 (let (($x220 ((_ is stack ) ?x67)))
 (let (($x221 (= c_ center-to-right)))
 (let (($x222 (and $x221 $x220)))
 (let (($x223 (= c_ center-to-left)))
 (let (($x224 (and $x223 $x220)))
 (let (($x254 (ite $x224 (= ?x212 (stack (top ?x67) ?x62)) (ite $x222 $x245 (ite $x219 (= ?x212 (stack (top ?x65) ?x62)) $x245)))))
 (let (($x232 (= ?x212 (rest ?x62))))
 (let (($x225 ((_ is stack ) ?x62)))
 (let (($x227 (and (= c_ left-to-right) $x225)))
 (let (($x229 (and (= c_ left-to-center) $x225)))
 (ite $x229 $x232 (ite $x227 $x232 $x254))))))))))))))))))))
(assert
 (let ((?x65 (right s_)))
 (let ((?x199 (right s__)))
 (let (($x241 (= ?x199 ?x65)))
 (let (($x238 (= ?x199 (rest ?x65))))
 (let (($x206 ((_ is stack ) ?x65)))
 (let (($x217 (and (= c_ right-to-center) $x206)))
 (let (($x219 (and (= c_ right-to-left) $x206)))
 (let ((?x67 (center s_)))
 (let (($x220 ((_ is stack ) ?x67)))
 (let (($x221 (= c_ center-to-right)))
 (let (($x222 (and $x221 $x220)))
 (let (($x251 (ite $x222 (= ?x199 (stack (top ?x67) ?x65)) (ite $x219 $x238 (ite $x217 $x238 $x241)))))
 (let (($x223 (= c_ center-to-left)))
 (let (($x224 (and $x223 $x220)))
 (let ((?x62 (left s_)))
 (let (($x225 ((_ is stack ) ?x62)))
 (let (($x227 (and (= c_ left-to-right) $x225)))
 (let (($x229 (and (= c_ left-to-center) $x225)))
 (ite $x229 (= ?x199 (stack (top ?x62) ?x65)) (ite $x227 $x241 (ite $x224 $x241 $x251))))))))))))))))))))))
(assert
 (let ((?x67 (center s_)))
 (let ((?x214 (center s__)))
 (let (($x243 (= ?x214 ?x67)))
 (let ((?x65 (right s_)))
 (let (($x206 ((_ is stack ) ?x65)))
 (let (($x217 (and (= c_ right-to-center) $x206)))
 (let (($x219 (and (= c_ right-to-left) $x206)))
 (let (($x235 (= ?x214 (rest ?x67))))
 (let (($x220 ((_ is stack ) ?x67)))
 (let (($x221 (= c_ center-to-right)))
 (let (($x222 (and $x221 $x220)))
 (let (($x250 (ite $x222 $x235 (ite $x219 $x243 (ite $x217 (= ?x214 (stack (top ?x65) ?x67)) $x243)))))
 (let (($x223 (= c_ center-to-left)))
 (let (($x224 (and $x223 $x220)))
 (let ((?x62 (left s_)))
 (let (($x225 ((_ is stack ) ?x62)))
 (let (($x227 (and (= c_ left-to-right) $x225)))
 (let (($x229 (and (= c_ left-to-center) $x225)))
 (ite $x229 $x243 (ite $x227 (= ?x214 (stack (top ?x62) ?x67)) (ite $x224 $x235 $x250))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x212 (left s__)))
 (let ((?x132 (left s___)))
 (let (($x336 (= ?x132 ?x212)))
 (let ((?x199 (right s__)))
 (let ((?x303 (top ?x199)))
 (let ((?x304 (stack ?x303 ?x212)))
 (let (($x330 (= ?x132 ?x304)))
 (let (($x306 ((_ is stack ) ?x199)))
 (let (($x309 (= c__ right-to-left)))
 (let (($x310 (and $x309 $x306)))
 (let ((?x214 (center s__)))
 (let (($x311 ((_ is stack ) ?x214)))
 (let (($x312 (= c__ center-to-right)))
 (let (($x313 (and $x312 $x311)))
 (let ((?x299 (top ?x214)))
 (let ((?x300 (stack ?x299 ?x212)))
 (let (($x327 (= ?x132 ?x300)))
 (let (($x314 (= c__ center-to-left)))
 (let (($x315 (and $x314 $x311)))
 (let ((?x134 (rest ?x212)))
 (let (($x323 (= ?x132 ?x134)))
 (let (($x316 ((_ is stack ) ?x212)))
 (let (($x317 (= c__ left-to-right)))
 (let (($x318 (and $x317 $x316)))
 (let (($x319 (= c__ left-to-center)))
 (let (($x320 (and $x319 $x316)))
 (ite $x320 $x323 (ite $x318 $x323 (ite $x315 $x327 (ite $x313 $x336 (ite $x310 $x330 $x336))))))))))))))))))))))))))))))))
(assert
 (let ((?x199 (right s__)))
 (let ((?x135 (right s___)))
 (let (($x332 (= ?x135 ?x199)))
 (let ((?x302 (rest ?x199)))
 (let (($x329 (= ?x135 ?x302)))
 (let (($x306 ((_ is stack ) ?x199)))
 (let (($x307 (= c__ right-to-center)))
 (let (($x308 (and $x307 $x306)))
 (let (($x309 (= c__ right-to-left)))
 (let (($x310 (and $x309 $x306)))
 (let ((?x214 (center s__)))
 (let ((?x299 (top ?x214)))
 (let ((?x301 (stack ?x299 ?x199)))
 (let (($x328 (= ?x135 ?x301)))
 (let (($x311 ((_ is stack ) ?x214)))
 (let (($x312 (= c__ center-to-right)))
 (let (($x313 (and $x312 $x311)))
 (let (($x314 (= c__ center-to-left)))
 (let (($x315 (and $x314 $x311)))
 (let ((?x212 (left s__)))
 (let (($x316 ((_ is stack ) ?x212)))
 (let (($x317 (= c__ left-to-right)))
 (let (($x318 (and $x317 $x316)))
 (let (($x349 (ite $x318 $x332 (ite $x315 $x332 (ite $x313 $x328 (ite $x310 $x329 (ite $x308 $x329 $x332)))))))
 (let ((?x197 (top ?x212)))
 (let ((?x295 (stack ?x197 ?x199)))
 (let (($x324 (= ?x135 ?x295)))
 (let (($x319 (= c__ left-to-center)))
 (let (($x320 (and $x319 $x316)))
 (ite $x320 $x324 $x349)))))))))))))))))))))))))))))))
(assert
 (let ((?x214 (center s__)))
 (let ((?x296 (center s___)))
 (let (($x334 (= ?x296 ?x214)))
 (let ((?x199 (right s__)))
 (let ((?x303 (top ?x199)))
 (let ((?x305 (stack ?x303 ?x214)))
 (let (($x331 (= ?x296 ?x305)))
 (let (($x306 ((_ is stack ) ?x199)))
 (let (($x307 (= c__ right-to-center)))
 (let (($x308 (and $x307 $x306)))
 (let (($x309 (= c__ right-to-left)))
 (let (($x310 (and $x309 $x306)))
 (let ((?x298 (rest ?x214)))
 (let (($x326 (= ?x296 ?x298)))
 (let (($x311 ((_ is stack ) ?x214)))
 (let (($x312 (= c__ center-to-right)))
 (let (($x313 (and $x312 $x311)))
 (let (($x314 (= c__ center-to-left)))
 (let (($x315 (and $x314 $x311)))
 (let ((?x212 (left s__)))
 (let ((?x197 (top ?x212)))
 (let ((?x297 (stack ?x197 ?x214)))
 (let (($x325 (= ?x296 ?x297)))
 (let (($x316 ((_ is stack ) ?x212)))
 (let (($x317 (= c__ left-to-right)))
 (let (($x318 (and $x317 $x316)))
 (let (($x348 (ite $x318 $x325 (ite $x315 $x326 (ite $x313 $x326 (ite $x310 $x334 (ite $x308 $x331 $x334)))))))
 (let (($x319 (= c__ left-to-center)))
 (let (($x320 (and $x319 $x316)))
 (ite $x320 $x334 $x348)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x132 (left s___)))
 (let ((?x261 (left s____)))
 (let (($x474 (= ?x261 ?x132)))
 (let ((?x135 (right s___)))
 (let ((?x441 (top ?x135)))
 (let ((?x442 (stack ?x441 ?x132)))
 (let (($x468 (= ?x261 ?x442)))
 (let (($x444 ((_ is stack ) ?x135)))
 (let (($x447 (= c___ right-to-left)))
 (let (($x448 (and $x447 $x444)))
 (let ((?x296 (center s___)))
 (let (($x449 ((_ is stack ) ?x296)))
 (let (($x450 (= c___ center-to-right)))
 (let (($x451 (and $x450 $x449)))
 (let ((?x437 (top ?x296)))
 (let ((?x438 (stack ?x437 ?x132)))
 (let (($x465 (= ?x261 ?x438)))
 (let (($x452 (= c___ center-to-left)))
 (let (($x453 (and $x452 $x449)))
 (let ((?x277 (rest ?x132)))
 (let (($x461 (= ?x261 ?x277)))
 (let (($x454 ((_ is stack ) ?x132)))
 (let (($x455 (= c___ left-to-right)))
 (let (($x456 (and $x455 $x454)))
 (let (($x457 (= c___ left-to-center)))
 (let (($x458 (and $x457 $x454)))
 (ite $x458 $x461 (ite $x456 $x461 (ite $x453 $x465 (ite $x451 $x474 (ite $x448 $x468 $x474))))))))))))))))))))))))))))))))
(assert
 (let ((?x135 (right s___)))
 (let ((?x278 (right s____)))
 (let (($x470 (= ?x278 ?x135)))
 (let ((?x440 (rest ?x135)))
 (let (($x467 (= ?x278 ?x440)))
 (let (($x444 ((_ is stack ) ?x135)))
 (let (($x445 (= c___ right-to-center)))
 (let (($x446 (and $x445 $x444)))
 (let (($x447 (= c___ right-to-left)))
 (let (($x448 (and $x447 $x444)))
 (let ((?x296 (center s___)))
 (let ((?x437 (top ?x296)))
 (let ((?x439 (stack ?x437 ?x135)))
 (let (($x466 (= ?x278 ?x439)))
 (let (($x449 ((_ is stack ) ?x296)))
 (let (($x450 (= c___ center-to-right)))
 (let (($x451 (and $x450 $x449)))
 (let (($x452 (= c___ center-to-left)))
 (let (($x453 (and $x452 $x449)))
 (let ((?x132 (left s___)))
 (let (($x454 ((_ is stack ) ?x132)))
 (let (($x455 (= c___ left-to-right)))
 (let (($x456 (and $x455 $x454)))
 (let (($x487 (ite $x456 $x470 (ite $x453 $x470 (ite $x451 $x466 (ite $x448 $x467 (ite $x446 $x467 $x470)))))))
 (let ((?x294 (top ?x132)))
 (let ((?x433 (stack ?x294 ?x135)))
 (let (($x462 (= ?x278 ?x433)))
 (let (($x457 (= c___ left-to-center)))
 (let (($x458 (and $x457 $x454)))
 (ite $x458 $x462 $x487)))))))))))))))))))))))))))))))
(assert
 (let ((?x296 (center s___)))
 (let ((?x434 (center s____)))
 (let (($x472 (= ?x434 ?x296)))
 (let ((?x135 (right s___)))
 (let ((?x441 (top ?x135)))
 (let ((?x443 (stack ?x441 ?x296)))
 (let (($x469 (= ?x434 ?x443)))
 (let (($x444 ((_ is stack ) ?x135)))
 (let (($x445 (= c___ right-to-center)))
 (let (($x446 (and $x445 $x444)))
 (let (($x447 (= c___ right-to-left)))
 (let (($x448 (and $x447 $x444)))
 (let ((?x436 (rest ?x296)))
 (let (($x464 (= ?x434 ?x436)))
 (let (($x449 ((_ is stack ) ?x296)))
 (let (($x450 (= c___ center-to-right)))
 (let (($x451 (and $x450 $x449)))
 (let (($x452 (= c___ center-to-left)))
 (let (($x453 (and $x452 $x449)))
 (let ((?x132 (left s___)))
 (let ((?x294 (top ?x132)))
 (let ((?x435 (stack ?x294 ?x296)))
 (let (($x463 (= ?x434 ?x435)))
 (let (($x454 ((_ is stack ) ?x132)))
 (let (($x455 (= c___ left-to-right)))
 (let (($x456 (and $x455 $x454)))
 (let (($x486 (ite $x456 $x463 (ite $x453 $x464 (ite $x451 $x464 (ite $x448 $x472 (ite $x446 $x469 $x472)))))))
 (let (($x457 (= c___ left-to-center)))
 (let (($x458 (and $x457 $x454)))
 (ite $x458 $x472 $x486)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x261 (left s____)))
 (let ((?x352 (left s_____)))
 (let (($x612 (= ?x352 ?x261)))
 (let ((?x278 (right s____)))
 (let ((?x579 (top ?x278)))
 (let ((?x580 (stack ?x579 ?x261)))
 (let (($x606 (= ?x352 ?x580)))
 (let (($x582 ((_ is stack ) ?x278)))
 (let (($x585 (= c____ right-to-left)))
 (let (($x586 (and $x585 $x582)))
 (let ((?x434 (center s____)))
 (let (($x587 ((_ is stack ) ?x434)))
 (let (($x588 (= c____ center-to-right)))
 (let (($x589 (and $x588 $x587)))
 (let ((?x575 (top ?x434)))
 (let ((?x576 (stack ?x575 ?x261)))
 (let (($x603 (= ?x352 ?x576)))
 (let (($x590 (= c____ center-to-left)))
 (let (($x591 (and $x590 $x587)))
 (let ((?x385 (rest ?x261)))
 (let (($x599 (= ?x352 ?x385)))
 (let (($x592 ((_ is stack ) ?x261)))
 (let (($x593 (= c____ left-to-right)))
 (let (($x594 (and $x593 $x592)))
 (let (($x595 (= c____ left-to-center)))
 (let (($x596 (and $x595 $x592)))
 (ite $x596 $x599 (ite $x594 $x599 (ite $x591 $x603 (ite $x589 $x612 (ite $x586 $x606 $x612))))))))))))))))))))))))))))))))
(assert
 (let ((?x278 (right s____)))
 (let ((?x386 (right s_____)))
 (let (($x608 (= ?x386 ?x278)))
 (let ((?x578 (rest ?x278)))
 (let (($x605 (= ?x386 ?x578)))
 (let (($x582 ((_ is stack ) ?x278)))
 (let (($x583 (= c____ right-to-center)))
 (let (($x584 (and $x583 $x582)))
 (let (($x585 (= c____ right-to-left)))
 (let (($x586 (and $x585 $x582)))
 (let ((?x434 (center s____)))
 (let ((?x575 (top ?x434)))
 (let ((?x577 (stack ?x575 ?x278)))
 (let (($x604 (= ?x386 ?x577)))
 (let (($x587 ((_ is stack ) ?x434)))
 (let (($x588 (= c____ center-to-right)))
 (let (($x589 (and $x588 $x587)))
 (let (($x590 (= c____ center-to-left)))
 (let (($x591 (and $x590 $x587)))
 (let ((?x261 (left s____)))
 (let (($x592 ((_ is stack ) ?x261)))
 (let (($x593 (= c____ left-to-right)))
 (let (($x594 (and $x593 $x592)))
 (let (($x625 (ite $x594 $x608 (ite $x591 $x608 (ite $x589 $x604 (ite $x586 $x605 (ite $x584 $x605 $x608)))))))
 (let ((?x432 (top ?x261)))
 (let ((?x571 (stack ?x432 ?x278)))
 (let (($x600 (= ?x386 ?x571)))
 (let (($x595 (= c____ left-to-center)))
 (let (($x596 (and $x595 $x592)))
 (ite $x596 $x600 $x625)))))))))))))))))))))))))))))))
(assert
 (let ((?x434 (center s____)))
 (let ((?x572 (center s_____)))
 (let (($x610 (= ?x572 ?x434)))
 (let ((?x278 (right s____)))
 (let ((?x579 (top ?x278)))
 (let ((?x581 (stack ?x579 ?x434)))
 (let (($x607 (= ?x572 ?x581)))
 (let (($x582 ((_ is stack ) ?x278)))
 (let (($x583 (= c____ right-to-center)))
 (let (($x584 (and $x583 $x582)))
 (let (($x585 (= c____ right-to-left)))
 (let (($x586 (and $x585 $x582)))
 (let ((?x574 (rest ?x434)))
 (let (($x602 (= ?x572 ?x574)))
 (let (($x587 ((_ is stack ) ?x434)))
 (let (($x588 (= c____ center-to-right)))
 (let (($x589 (and $x588 $x587)))
 (let (($x590 (= c____ center-to-left)))
 (let (($x591 (and $x590 $x587)))
 (let ((?x261 (left s____)))
 (let ((?x432 (top ?x261)))
 (let ((?x573 (stack ?x432 ?x434)))
 (let (($x601 (= ?x572 ?x573)))
 (let (($x592 ((_ is stack ) ?x261)))
 (let (($x593 (= c____ left-to-right)))
 (let (($x594 (and $x593 $x592)))
 (let (($x624 (ite $x594 $x601 (ite $x591 $x602 (ite $x589 $x602 (ite $x586 $x610 (ite $x584 $x607 $x610)))))))
 (let (($x595 (= c____ left-to-center)))
 (let (($x596 (and $x595 $x592)))
 (ite $x596 $x610 $x624)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x352 (left s_____)))
 (let ((?x490 (left s______)))
 (let (($x750 (= ?x490 ?x352)))
 (let ((?x386 (right s_____)))
 (let ((?x717 (top ?x386)))
 (let ((?x718 (stack ?x717 ?x352)))
 (let (($x744 (= ?x490 ?x718)))
 (let (($x720 ((_ is stack ) ?x386)))
 (let (($x723 (= c_____ right-to-left)))
 (let (($x724 (and $x723 $x720)))
 (let ((?x572 (center s_____)))
 (let (($x725 ((_ is stack ) ?x572)))
 (let (($x726 (= c_____ center-to-right)))
 (let (($x727 (and $x726 $x725)))
 (let ((?x713 (top ?x572)))
 (let ((?x714 (stack ?x713 ?x352)))
 (let (($x741 (= ?x490 ?x714)))
 (let (($x728 (= c_____ center-to-left)))
 (let (($x729 (and $x728 $x725)))
 (let ((?x523 (rest ?x352)))
 (let (($x737 (= ?x490 ?x523)))
 (let (($x730 ((_ is stack ) ?x352)))
 (let (($x731 (= c_____ left-to-right)))
 (let (($x732 (and $x731 $x730)))
 (let (($x733 (= c_____ left-to-center)))
 (let (($x734 (and $x733 $x730)))
 (ite $x734 $x737 (ite $x732 $x737 (ite $x729 $x741 (ite $x727 $x750 (ite $x724 $x744 $x750))))))))))))))))))))))))))))))))
(assert
 (let ((?x386 (right s_____)))
 (let ((?x524 (right s______)))
 (let (($x746 (= ?x524 ?x386)))
 (let ((?x716 (rest ?x386)))
 (let (($x743 (= ?x524 ?x716)))
 (let (($x720 ((_ is stack ) ?x386)))
 (let (($x721 (= c_____ right-to-center)))
 (let (($x722 (and $x721 $x720)))
 (let (($x723 (= c_____ right-to-left)))
 (let (($x724 (and $x723 $x720)))
 (let ((?x572 (center s_____)))
 (let ((?x713 (top ?x572)))
 (let ((?x715 (stack ?x713 ?x386)))
 (let (($x742 (= ?x524 ?x715)))
 (let (($x725 ((_ is stack ) ?x572)))
 (let (($x726 (= c_____ center-to-right)))
 (let (($x727 (and $x726 $x725)))
 (let (($x728 (= c_____ center-to-left)))
 (let (($x729 (and $x728 $x725)))
 (let ((?x352 (left s_____)))
 (let (($x730 ((_ is stack ) ?x352)))
 (let (($x731 (= c_____ left-to-right)))
 (let (($x732 (and $x731 $x730)))
 (let (($x763 (ite $x732 $x746 (ite $x729 $x746 (ite $x727 $x742 (ite $x724 $x743 (ite $x722 $x743 $x746)))))))
 (let ((?x570 (top ?x352)))
 (let ((?x709 (stack ?x570 ?x386)))
 (let (($x738 (= ?x524 ?x709)))
 (let (($x733 (= c_____ left-to-center)))
 (let (($x734 (and $x733 $x730)))
 (ite $x734 $x738 $x763)))))))))))))))))))))))))))))))
(assert
 (let ((?x572 (center s_____)))
 (let ((?x710 (center s______)))
 (let (($x748 (= ?x710 ?x572)))
 (let ((?x386 (right s_____)))
 (let ((?x717 (top ?x386)))
 (let ((?x719 (stack ?x717 ?x572)))
 (let (($x745 (= ?x710 ?x719)))
 (let (($x720 ((_ is stack ) ?x386)))
 (let (($x721 (= c_____ right-to-center)))
 (let (($x722 (and $x721 $x720)))
 (let (($x723 (= c_____ right-to-left)))
 (let (($x724 (and $x723 $x720)))
 (let ((?x712 (rest ?x572)))
 (let (($x740 (= ?x710 ?x712)))
 (let (($x725 ((_ is stack ) ?x572)))
 (let (($x726 (= c_____ center-to-right)))
 (let (($x727 (and $x726 $x725)))
 (let (($x728 (= c_____ center-to-left)))
 (let (($x729 (and $x728 $x725)))
 (let ((?x352 (left s_____)))
 (let ((?x570 (top ?x352)))
 (let ((?x711 (stack ?x570 ?x572)))
 (let (($x739 (= ?x710 ?x711)))
 (let (($x730 ((_ is stack ) ?x352)))
 (let (($x731 (= c_____ left-to-right)))
 (let (($x732 (and $x731 $x730)))
 (let (($x762 (ite $x732 $x739 (ite $x729 $x740 (ite $x727 $x740 (ite $x724 $x748 (ite $x722 $x745 $x748)))))))
 (let (($x733 (= c_____ left-to-center)))
 (let (($x734 (and $x733 $x730)))
 (ite $x734 $x748 $x762)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x490 (left s______)))
 (let ((?x628 (left s_______)))
 (let (($x888 (= ?x628 ?x490)))
 (let ((?x524 (right s______)))
 (let ((?x855 (top ?x524)))
 (let ((?x856 (stack ?x855 ?x490)))
 (let (($x882 (= ?x628 ?x856)))
 (let (($x858 ((_ is stack ) ?x524)))
 (let (($x861 (= c______ right-to-left)))
 (let (($x862 (and $x861 $x858)))
 (let ((?x710 (center s______)))
 (let (($x863 ((_ is stack ) ?x710)))
 (let (($x864 (= c______ center-to-right)))
 (let (($x865 (and $x864 $x863)))
 (let ((?x851 (top ?x710)))
 (let ((?x852 (stack ?x851 ?x490)))
 (let (($x879 (= ?x628 ?x852)))
 (let (($x866 (= c______ center-to-left)))
 (let (($x867 (and $x866 $x863)))
 (let ((?x661 (rest ?x490)))
 (let (($x875 (= ?x628 ?x661)))
 (let (($x868 ((_ is stack ) ?x490)))
 (let (($x869 (= c______ left-to-right)))
 (let (($x870 (and $x869 $x868)))
 (let (($x871 (= c______ left-to-center)))
 (let (($x872 (and $x871 $x868)))
 (ite $x872 $x875 (ite $x870 $x875 (ite $x867 $x879 (ite $x865 $x888 (ite $x862 $x882 $x888))))))))))))))))))))))))))))))))
(assert
 (let ((?x524 (right s______)))
 (let ((?x662 (right s_______)))
 (let (($x884 (= ?x662 ?x524)))
 (let ((?x854 (rest ?x524)))
 (let (($x881 (= ?x662 ?x854)))
 (let (($x858 ((_ is stack ) ?x524)))
 (let (($x859 (= c______ right-to-center)))
 (let (($x860 (and $x859 $x858)))
 (let (($x861 (= c______ right-to-left)))
 (let (($x862 (and $x861 $x858)))
 (let ((?x710 (center s______)))
 (let ((?x851 (top ?x710)))
 (let ((?x853 (stack ?x851 ?x524)))
 (let (($x880 (= ?x662 ?x853)))
 (let (($x863 ((_ is stack ) ?x710)))
 (let (($x864 (= c______ center-to-right)))
 (let (($x865 (and $x864 $x863)))
 (let (($x866 (= c______ center-to-left)))
 (let (($x867 (and $x866 $x863)))
 (let ((?x490 (left s______)))
 (let (($x868 ((_ is stack ) ?x490)))
 (let (($x869 (= c______ left-to-right)))
 (let (($x870 (and $x869 $x868)))
 (let (($x901 (ite $x870 $x884 (ite $x867 $x884 (ite $x865 $x880 (ite $x862 $x881 (ite $x860 $x881 $x884)))))))
 (let ((?x708 (top ?x490)))
 (let ((?x847 (stack ?x708 ?x524)))
 (let (($x876 (= ?x662 ?x847)))
 (let (($x871 (= c______ left-to-center)))
 (let (($x872 (and $x871 $x868)))
 (ite $x872 $x876 $x901)))))))))))))))))))))))))))))))
(assert
 (let ((?x710 (center s______)))
 (let ((?x848 (center s_______)))
 (let (($x886 (= ?x848 ?x710)))
 (let ((?x524 (right s______)))
 (let ((?x855 (top ?x524)))
 (let ((?x857 (stack ?x855 ?x710)))
 (let (($x883 (= ?x848 ?x857)))
 (let (($x858 ((_ is stack ) ?x524)))
 (let (($x859 (= c______ right-to-center)))
 (let (($x860 (and $x859 $x858)))
 (let (($x861 (= c______ right-to-left)))
 (let (($x862 (and $x861 $x858)))
 (let ((?x850 (rest ?x710)))
 (let (($x878 (= ?x848 ?x850)))
 (let (($x863 ((_ is stack ) ?x710)))
 (let (($x864 (= c______ center-to-right)))
 (let (($x865 (and $x864 $x863)))
 (let (($x866 (= c______ center-to-left)))
 (let (($x867 (and $x866 $x863)))
 (let ((?x490 (left s______)))
 (let ((?x708 (top ?x490)))
 (let ((?x849 (stack ?x708 ?x710)))
 (let (($x877 (= ?x848 ?x849)))
 (let (($x868 ((_ is stack ) ?x490)))
 (let (($x869 (= c______ left-to-right)))
 (let (($x870 (and $x869 $x868)))
 (let (($x900 (ite $x870 $x877 (ite $x867 $x878 (ite $x865 $x878 (ite $x862 $x886 (ite $x860 $x883 $x886)))))))
 (let (($x871 (= c______ left-to-center)))
 (let (($x872 (and $x871 $x868)))
 (ite $x872 $x886 $x900)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x628 (left s_______)))
 (let ((?x766 (left s________)))
 (let (($x1026 (= ?x766 ?x628)))
 (let ((?x662 (right s_______)))
 (let ((?x993 (top ?x662)))
 (let ((?x994 (stack ?x993 ?x628)))
 (let (($x1020 (= ?x766 ?x994)))
 (let (($x996 ((_ is stack ) ?x662)))
 (let (($x999 (= c_______ right-to-left)))
 (let (($x1000 (and $x999 $x996)))
 (let ((?x848 (center s_______)))
 (let (($x1001 ((_ is stack ) ?x848)))
 (let (($x1002 (= c_______ center-to-right)))
 (let (($x1003 (and $x1002 $x1001)))
 (let ((?x989 (top ?x848)))
 (let ((?x990 (stack ?x989 ?x628)))
 (let (($x1017 (= ?x766 ?x990)))
 (let (($x1004 (= c_______ center-to-left)))
 (let (($x1005 (and $x1004 $x1001)))
 (let ((?x799 (rest ?x628)))
 (let (($x1013 (= ?x766 ?x799)))
 (let (($x1006 ((_ is stack ) ?x628)))
 (let (($x1007 (= c_______ left-to-right)))
 (let (($x1008 (and $x1007 $x1006)))
 (let (($x1009 (= c_______ left-to-center)))
 (let (($x1010 (and $x1009 $x1006)))
 (ite $x1010 $x1013 (ite $x1008 $x1013 (ite $x1005 $x1017 (ite $x1003 $x1026 (ite $x1000 $x1020 $x1026))))))))))))))))))))))))))))))))
(assert
 (let ((?x662 (right s_______)))
 (let ((?x800 (right s________)))
 (let (($x1022 (= ?x800 ?x662)))
 (let ((?x992 (rest ?x662)))
 (let (($x1019 (= ?x800 ?x992)))
 (let (($x996 ((_ is stack ) ?x662)))
 (let (($x997 (= c_______ right-to-center)))
 (let (($x998 (and $x997 $x996)))
 (let (($x999 (= c_______ right-to-left)))
 (let (($x1000 (and $x999 $x996)))
 (let ((?x848 (center s_______)))
 (let ((?x989 (top ?x848)))
 (let ((?x991 (stack ?x989 ?x662)))
 (let (($x1018 (= ?x800 ?x991)))
 (let (($x1001 ((_ is stack ) ?x848)))
 (let (($x1002 (= c_______ center-to-right)))
 (let (($x1003 (and $x1002 $x1001)))
 (let (($x1004 (= c_______ center-to-left)))
 (let (($x1005 (and $x1004 $x1001)))
 (let ((?x628 (left s_______)))
 (let (($x1006 ((_ is stack ) ?x628)))
 (let (($x1007 (= c_______ left-to-right)))
 (let (($x1008 (and $x1007 $x1006)))
 (let (($x1039 (ite $x1008 $x1022 (ite $x1005 $x1022 (ite $x1003 $x1018 (ite $x1000 $x1019 (ite $x998 $x1019 $x1022)))))))
 (let ((?x846 (top ?x628)))
 (let ((?x985 (stack ?x846 ?x662)))
 (let (($x1014 (= ?x800 ?x985)))
 (let (($x1009 (= c_______ left-to-center)))
 (let (($x1010 (and $x1009 $x1006)))
 (ite $x1010 $x1014 $x1039)))))))))))))))))))))))))))))))
(assert
 (let ((?x848 (center s_______)))
 (let ((?x986 (center s________)))
 (let (($x1024 (= ?x986 ?x848)))
 (let ((?x662 (right s_______)))
 (let ((?x993 (top ?x662)))
 (let ((?x995 (stack ?x993 ?x848)))
 (let (($x1021 (= ?x986 ?x995)))
 (let (($x996 ((_ is stack ) ?x662)))
 (let (($x997 (= c_______ right-to-center)))
 (let (($x998 (and $x997 $x996)))
 (let (($x999 (= c_______ right-to-left)))
 (let (($x1000 (and $x999 $x996)))
 (let ((?x988 (rest ?x848)))
 (let (($x1016 (= ?x986 ?x988)))
 (let (($x1001 ((_ is stack ) ?x848)))
 (let (($x1002 (= c_______ center-to-right)))
 (let (($x1003 (and $x1002 $x1001)))
 (let (($x1004 (= c_______ center-to-left)))
 (let (($x1005 (and $x1004 $x1001)))
 (let ((?x628 (left s_______)))
 (let ((?x846 (top ?x628)))
 (let ((?x987 (stack ?x846 ?x848)))
 (let (($x1015 (= ?x986 ?x987)))
 (let (($x1006 ((_ is stack ) ?x628)))
 (let (($x1007 (= c_______ left-to-right)))
 (let (($x1008 (and $x1007 $x1006)))
 (let (($x1038 (ite $x1008 $x1015 (ite $x1005 $x1016 (ite $x1003 $x1016 (ite $x1000 $x1024 (ite $x998 $x1021 $x1024)))))))
 (let (($x1009 (= c_______ left-to-center)))
 (let (($x1010 (and $x1009 $x1006)))
 (ite $x1010 $x1024 $x1038)))))))))))))))))))))))))))))))
(assert
 (= c_________ c!8))
(assert
 (let ((?x766 (left s________)))
 (let ((?x904 (left s_________)))
 (let (($x1164 (= ?x904 ?x766)))
 (let ((?x800 (right s________)))
 (let ((?x1131 (top ?x800)))
 (let ((?x1132 (stack ?x1131 ?x766)))
 (let (($x1158 (= ?x904 ?x1132)))
 (let (($x1134 ((_ is stack ) ?x800)))
 (let (($x1137 (= c________ right-to-left)))
 (let (($x1138 (and $x1137 $x1134)))
 (let ((?x986 (center s________)))
 (let (($x1139 ((_ is stack ) ?x986)))
 (let (($x1140 (= c________ center-to-right)))
 (let (($x1141 (and $x1140 $x1139)))
 (let ((?x1127 (top ?x986)))
 (let ((?x1128 (stack ?x1127 ?x766)))
 (let (($x1155 (= ?x904 ?x1128)))
 (let (($x1142 (= c________ center-to-left)))
 (let (($x1143 (and $x1142 $x1139)))
 (let ((?x937 (rest ?x766)))
 (let (($x1151 (= ?x904 ?x937)))
 (let (($x1144 ((_ is stack ) ?x766)))
 (let (($x1145 (= c________ left-to-right)))
 (let (($x1146 (and $x1145 $x1144)))
 (let (($x1147 (= c________ left-to-center)))
 (let (($x1148 (and $x1147 $x1144)))
 (ite $x1148 $x1151 (ite $x1146 $x1151 (ite $x1143 $x1155 (ite $x1141 $x1164 (ite $x1138 $x1158 $x1164))))))))))))))))))))))))))))))))
(assert
 (let ((?x800 (right s________)))
 (let ((?x938 (right s_________)))
 (let (($x1160 (= ?x938 ?x800)))
 (let ((?x1130 (rest ?x800)))
 (let (($x1157 (= ?x938 ?x1130)))
 (let (($x1134 ((_ is stack ) ?x800)))
 (let (($x1135 (= c________ right-to-center)))
 (let (($x1136 (and $x1135 $x1134)))
 (let (($x1137 (= c________ right-to-left)))
 (let (($x1138 (and $x1137 $x1134)))
 (let ((?x986 (center s________)))
 (let ((?x1127 (top ?x986)))
 (let ((?x1129 (stack ?x1127 ?x800)))
 (let (($x1156 (= ?x938 ?x1129)))
 (let (($x1139 ((_ is stack ) ?x986)))
 (let (($x1140 (= c________ center-to-right)))
 (let (($x1141 (and $x1140 $x1139)))
 (let (($x1142 (= c________ center-to-left)))
 (let (($x1143 (and $x1142 $x1139)))
 (let ((?x766 (left s________)))
 (let (($x1144 ((_ is stack ) ?x766)))
 (let (($x1145 (= c________ left-to-right)))
 (let (($x1146 (and $x1145 $x1144)))
 (let (($x1177 (ite $x1146 $x1160 (ite $x1143 $x1160 (ite $x1141 $x1156 (ite $x1138 $x1157 (ite $x1136 $x1157 $x1160)))))))
 (let ((?x984 (top ?x766)))
 (let ((?x1123 (stack ?x984 ?x800)))
 (let (($x1152 (= ?x938 ?x1123)))
 (let (($x1147 (= c________ left-to-center)))
 (let (($x1148 (and $x1147 $x1144)))
 (ite $x1148 $x1152 $x1177)))))))))))))))))))))))))))))))
(assert
 (let ((?x986 (center s________)))
 (let ((?x1124 (center s_________)))
 (let (($x1162 (= ?x1124 ?x986)))
 (let ((?x800 (right s________)))
 (let ((?x1131 (top ?x800)))
 (let ((?x1133 (stack ?x1131 ?x986)))
 (let (($x1159 (= ?x1124 ?x1133)))
 (let (($x1134 ((_ is stack ) ?x800)))
 (let (($x1135 (= c________ right-to-center)))
 (let (($x1136 (and $x1135 $x1134)))
 (let (($x1137 (= c________ right-to-left)))
 (let (($x1138 (and $x1137 $x1134)))
 (let ((?x1126 (rest ?x986)))
 (let (($x1154 (= ?x1124 ?x1126)))
 (let (($x1139 ((_ is stack ) ?x986)))
 (let (($x1140 (= c________ center-to-right)))
 (let (($x1141 (and $x1140 $x1139)))
 (let (($x1142 (= c________ center-to-left)))
 (let (($x1143 (and $x1142 $x1139)))
 (let ((?x766 (left s________)))
 (let ((?x984 (top ?x766)))
 (let ((?x1125 (stack ?x984 ?x986)))
 (let (($x1153 (= ?x1124 ?x1125)))
 (let (($x1144 ((_ is stack ) ?x766)))
 (let (($x1145 (= c________ left-to-right)))
 (let (($x1146 (and $x1145 $x1144)))
 (let (($x1176 (ite $x1146 $x1153 (ite $x1143 $x1154 (ite $x1141 $x1154 (ite $x1138 $x1162 (ite $x1136 $x1159 $x1162)))))))
 (let (($x1147 (= c________ left-to-center)))
 (let (($x1148 (and $x1147 $x1144)))
 (ite $x1148 $x1162 $x1176)))))))))))))))))))))))))))))))
(assert
 (let ((?x38 (stack F (stack B empty))))
 (let ((?x938 (right s_________)))
 (let (($x1180 (= ?x938 ?x38)))
 (let ((?x36 (stack C (stack I (stack E (stack H (stack A (stack D empty))))))))
 (let ((?x1124 (center s_________)))
 (let (($x1211 (= ?x1124 ?x36)))
 (let ((?x30 (stack G empty)))
 (let ((?x904 (left s_________)))
 (let (($x1212 (= ?x904 ?x30)))
 (let (($x1214 (not (and $x1212 $x1211 $x1180))))
 (not $x1214))))))))))))
(check-sat)
(exit)
