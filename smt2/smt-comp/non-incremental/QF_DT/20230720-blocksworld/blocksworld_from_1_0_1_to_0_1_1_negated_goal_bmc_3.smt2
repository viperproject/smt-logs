(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat) 
(declare-datatypes ((Enum_A_B 0)) (((A) (B))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x15 (stack B empty)))
 (let ((?x62 (left s_tmp_)))
 (= ?x62 ?x15))))
(assert
 (let ((?x65 (center s_tmp__)))
 (= ?x65 empty)))
(assert
 (let ((?x14 (stack A empty)))
 (let ((?x68 (right s_tmp___)))
 (= ?x68 ?x14))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x95 (left s_tmp__)))
 (= (left s_tmp___) ?x95)))
(assert
 (let ((?x65 (center s_tmp__)))
 (= (center s_tmp___) ?x65)))
(assert
 (let ((?x99 (center s_tmp_)))
 (= ?x99 (center s_tmp))))
(assert
 (let ((?x102 (right s_tmp_)))
 (= ?x102 (right s_tmp))))
(assert
 (let ((?x62 (left s_tmp_)))
 (let ((?x95 (left s_tmp__)))
 (= ?x95 ?x62))))
(assert
 (let ((?x102 (right s_tmp_)))
 (let ((?x106 (right s_tmp__)))
 (= ?x106 ?x102))))
(assert
 (= c__ c!1))
(assert
 (let ((?x39 (left s_)))
 (let ((?x156 (left s__)))
 (let (($x201 (= ?x156 ?x39)))
 (let ((?x42 (right s_)))
 (let (($x171 ((_ is stack ) ?x42)))
 (let (($x174 (= c_ right-to-left)))
 (let (($x175 (and $x174 $x171)))
 (let ((?x44 (center s_)))
 (let (($x176 ((_ is stack ) ?x44)))
 (let (($x178 (and (= c_ center-to-right) $x176)))
 (let (($x180 (and (= c_ center-to-left) $x176)))
 (let (($x210 (ite $x180 (= ?x156 (stack (top ?x44) ?x39)) (ite $x178 $x201 (ite $x175 (= ?x156 (stack (top ?x42) ?x39)) $x201)))))
 (let (($x188 (= ?x156 (rest ?x39))))
 (let (($x181 ((_ is stack ) ?x39)))
 (let (($x182 (= c_ left-to-right)))
 (let (($x183 (and $x182 $x181)))
 (let (($x184 (= c_ left-to-center)))
 (let (($x185 (and $x184 $x181)))
 (ite $x185 $x188 (ite $x183 $x188 $x210)))))))))))))))))))))
(assert
 (let ((?x42 (right s_)))
 (let ((?x158 (right s__)))
 (let (($x197 (= ?x158 ?x42)))
 (let (($x194 (= ?x158 (rest ?x42))))
 (let (($x171 ((_ is stack ) ?x42)))
 (let (($x172 (= c_ right-to-center)))
 (let (($x173 (and $x172 $x171)))
 (let (($x174 (= c_ right-to-left)))
 (let (($x175 (and $x174 $x171)))
 (let ((?x44 (center s_)))
 (let (($x176 ((_ is stack ) ?x44)))
 (let (($x178 (and (= c_ center-to-right) $x176)))
 (let (($x207 (ite $x178 (= ?x158 (stack (top ?x44) ?x42)) (ite $x175 $x194 (ite $x173 $x194 $x197)))))
 (let (($x180 (and (= c_ center-to-left) $x176)))
 (let ((?x39 (left s_)))
 (let (($x181 ((_ is stack ) ?x39)))
 (let (($x182 (= c_ left-to-right)))
 (let (($x183 (and $x182 $x181)))
 (let (($x184 (= c_ left-to-center)))
 (let (($x185 (and $x184 $x181)))
 (ite $x185 (= ?x158 (stack (top ?x39) ?x42)) (ite $x183 $x197 (ite $x180 $x197 $x207))))))))))))))))))))))))
(assert
 (let ((?x44 (center s_)))
 (let ((?x161 (center s__)))
 (let (($x199 (= ?x161 ?x44)))
 (let ((?x42 (right s_)))
 (let (($x171 ((_ is stack ) ?x42)))
 (let (($x172 (= c_ right-to-center)))
 (let (($x173 (and $x172 $x171)))
 (let (($x174 (= c_ right-to-left)))
 (let (($x175 (and $x174 $x171)))
 (let (($x191 (= ?x161 (rest ?x44))))
 (let (($x176 ((_ is stack ) ?x44)))
 (let (($x178 (and (= c_ center-to-right) $x176)))
 (let (($x206 (ite $x178 $x191 (ite $x175 $x199 (ite $x173 (= ?x161 (stack (top ?x42) ?x44)) $x199)))))
 (let (($x180 (and (= c_ center-to-left) $x176)))
 (let ((?x39 (left s_)))
 (let (($x181 ((_ is stack ) ?x39)))
 (let (($x182 (= c_ left-to-right)))
 (let (($x183 (and $x182 $x181)))
 (let (($x184 (= c_ left-to-center)))
 (let (($x185 (and $x184 $x181)))
 (ite $x185 $x199 (ite $x183 (= ?x161 (stack (top ?x39) ?x44)) (ite $x180 $x191 $x206))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x156 (left s__)))
 (let ((?x109 (left s___)))
 (let (($x303 (= ?x109 ?x156)))
 (let ((?x158 (right s__)))
 (let ((?x270 (top ?x158)))
 (let ((?x271 (stack ?x270 ?x156)))
 (let (($x297 (= ?x109 ?x271)))
 (let (($x273 ((_ is stack ) ?x158)))
 (let (($x276 (= c__ right-to-left)))
 (let (($x277 (and $x276 $x273)))
 (let ((?x161 (center s__)))
 (let (($x278 ((_ is stack ) ?x161)))
 (let (($x279 (= c__ center-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let ((?x266 (top ?x161)))
 (let ((?x267 (stack ?x266 ?x156)))
 (let (($x294 (= ?x109 ?x267)))
 (let (($x281 (= c__ center-to-left)))
 (let (($x282 (and $x281 $x278)))
 (let ((?x111 (rest ?x156)))
 (let (($x290 (= ?x109 ?x111)))
 (let (($x283 ((_ is stack ) ?x156)))
 (let (($x284 (= c__ left-to-right)))
 (let (($x285 (and $x284 $x283)))
 (let (($x286 (= c__ left-to-center)))
 (let (($x287 (and $x286 $x283)))
 (ite $x287 $x290 (ite $x285 $x290 (ite $x282 $x294 (ite $x280 $x303 (ite $x277 $x297 $x303))))))))))))))))))))))))))))))))
(assert
 (let ((?x158 (right s__)))
 (let ((?x112 (right s___)))
 (let (($x299 (= ?x112 ?x158)))
 (let ((?x269 (rest ?x158)))
 (let (($x296 (= ?x112 ?x269)))
 (let (($x273 ((_ is stack ) ?x158)))
 (let (($x274 (= c__ right-to-center)))
 (let (($x275 (and $x274 $x273)))
 (let (($x276 (= c__ right-to-left)))
 (let (($x277 (and $x276 $x273)))
 (let ((?x161 (center s__)))
 (let ((?x266 (top ?x161)))
 (let ((?x268 (stack ?x266 ?x158)))
 (let (($x295 (= ?x112 ?x268)))
 (let (($x278 ((_ is stack ) ?x161)))
 (let (($x279 (= c__ center-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let (($x281 (= c__ center-to-left)))
 (let (($x282 (and $x281 $x278)))
 (let ((?x156 (left s__)))
 (let (($x283 ((_ is stack ) ?x156)))
 (let (($x284 (= c__ left-to-right)))
 (let (($x285 (and $x284 $x283)))
 (let (($x316 (ite $x285 $x299 (ite $x282 $x299 (ite $x280 $x295 (ite $x277 $x296 (ite $x275 $x296 $x299)))))))
 (let ((?x153 (top ?x156)))
 (let ((?x262 (stack ?x153 ?x158)))
 (let (($x291 (= ?x112 ?x262)))
 (let (($x286 (= c__ left-to-center)))
 (let (($x287 (and $x286 $x283)))
 (ite $x287 $x291 $x316)))))))))))))))))))))))))))))))
(assert
 (let ((?x161 (center s__)))
 (let ((?x263 (center s___)))
 (let (($x301 (= ?x263 ?x161)))
 (let ((?x158 (right s__)))
 (let ((?x270 (top ?x158)))
 (let ((?x272 (stack ?x270 ?x161)))
 (let (($x298 (= ?x263 ?x272)))
 (let (($x273 ((_ is stack ) ?x158)))
 (let (($x274 (= c__ right-to-center)))
 (let (($x275 (and $x274 $x273)))
 (let (($x276 (= c__ right-to-left)))
 (let (($x277 (and $x276 $x273)))
 (let ((?x265 (rest ?x161)))
 (let (($x293 (= ?x263 ?x265)))
 (let (($x278 ((_ is stack ) ?x161)))
 (let (($x279 (= c__ center-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let (($x281 (= c__ center-to-left)))
 (let (($x282 (and $x281 $x278)))
 (let ((?x156 (left s__)))
 (let ((?x153 (top ?x156)))
 (let ((?x264 (stack ?x153 ?x161)))
 (let (($x292 (= ?x263 ?x264)))
 (let (($x283 ((_ is stack ) ?x156)))
 (let (($x284 (= c__ left-to-right)))
 (let (($x285 (and $x284 $x283)))
 (let (($x315 (ite $x285 $x292 (ite $x282 $x293 (ite $x280 $x293 (ite $x277 $x301 (ite $x275 $x298 $x301)))))))
 (let (($x286 (= c__ left-to-center)))
 (let (($x287 (and $x286 $x283)))
 (ite $x287 $x301 $x315)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x109 (left s___)))
 (let ((?x246 (left s____)))
 (let (($x443 (= ?x246 ?x109)))
 (let ((?x112 (right s___)))
 (let ((?x410 (top ?x112)))
 (let ((?x411 (stack ?x410 ?x109)))
 (let (($x437 (= ?x246 ?x411)))
 (let (($x413 ((_ is stack ) ?x112)))
 (let (($x416 (= c___ right-to-left)))
 (let (($x417 (and $x416 $x413)))
 (let ((?x263 (center s___)))
 (let (($x418 ((_ is stack ) ?x263)))
 (let (($x419 (= c___ center-to-right)))
 (let (($x420 (and $x419 $x418)))
 (let ((?x406 (top ?x263)))
 (let ((?x407 (stack ?x406 ?x109)))
 (let (($x434 (= ?x246 ?x407)))
 (let (($x421 (= c___ center-to-left)))
 (let (($x422 (and $x421 $x418)))
 (let ((?x261 (rest ?x109)))
 (let (($x430 (= ?x246 ?x261)))
 (let (($x423 ((_ is stack ) ?x109)))
 (let (($x424 (= c___ left-to-right)))
 (let (($x425 (and $x424 $x423)))
 (let (($x426 (= c___ left-to-center)))
 (let (($x427 (and $x426 $x423)))
 (ite $x427 $x430 (ite $x425 $x430 (ite $x422 $x434 (ite $x420 $x443 (ite $x417 $x437 $x443))))))))))))))))))))))))))))))))
(assert
 (let ((?x112 (right s___)))
 (let ((?x400 (right s____)))
 (let (($x439 (= ?x400 ?x112)))
 (let ((?x409 (rest ?x112)))
 (let (($x436 (= ?x400 ?x409)))
 (let (($x413 ((_ is stack ) ?x112)))
 (let (($x414 (= c___ right-to-center)))
 (let (($x415 (and $x414 $x413)))
 (let (($x416 (= c___ right-to-left)))
 (let (($x417 (and $x416 $x413)))
 (let ((?x263 (center s___)))
 (let ((?x406 (top ?x263)))
 (let ((?x408 (stack ?x406 ?x112)))
 (let (($x435 (= ?x400 ?x408)))
 (let (($x418 ((_ is stack ) ?x263)))
 (let (($x419 (= c___ center-to-right)))
 (let (($x420 (and $x419 $x418)))
 (let (($x421 (= c___ center-to-left)))
 (let (($x422 (and $x421 $x418)))
 (let ((?x109 (left s___)))
 (let (($x423 ((_ is stack ) ?x109)))
 (let (($x424 (= c___ left-to-right)))
 (let (($x425 (and $x424 $x423)))
 (let (($x456 (ite $x425 $x439 (ite $x422 $x439 (ite $x420 $x435 (ite $x417 $x436 (ite $x415 $x436 $x439)))))))
 (let ((?x401 (top ?x109)))
 (let ((?x402 (stack ?x401 ?x112)))
 (let (($x431 (= ?x400 ?x402)))
 (let (($x426 (= c___ left-to-center)))
 (let (($x427 (and $x426 $x423)))
 (ite $x427 $x431 $x456)))))))))))))))))))))))))))))))
(assert
 (let ((?x263 (center s___)))
 (let ((?x403 (center s____)))
 (let (($x441 (= ?x403 ?x263)))
 (let ((?x112 (right s___)))
 (let ((?x410 (top ?x112)))
 (let ((?x412 (stack ?x410 ?x263)))
 (let (($x438 (= ?x403 ?x412)))
 (let (($x413 ((_ is stack ) ?x112)))
 (let (($x414 (= c___ right-to-center)))
 (let (($x415 (and $x414 $x413)))
 (let (($x416 (= c___ right-to-left)))
 (let (($x417 (and $x416 $x413)))
 (let ((?x405 (rest ?x263)))
 (let (($x433 (= ?x403 ?x405)))
 (let (($x418 ((_ is stack ) ?x263)))
 (let (($x419 (= c___ center-to-right)))
 (let (($x420 (and $x419 $x418)))
 (let (($x421 (= c___ center-to-left)))
 (let (($x422 (and $x421 $x418)))
 (let ((?x109 (left s___)))
 (let ((?x401 (top ?x109)))
 (let ((?x404 (stack ?x401 ?x263)))
 (let (($x432 (= ?x403 ?x404)))
 (let (($x423 ((_ is stack ) ?x109)))
 (let (($x424 (= c___ left-to-right)))
 (let (($x425 (and $x424 $x423)))
 (let (($x455 (ite $x425 $x432 (ite $x422 $x433 (ite $x420 $x433 (ite $x417 $x441 (ite $x415 $x438 $x441)))))))
 (let (($x426 (= c___ left-to-center)))
 (let (($x427 (and $x426 $x423)))
 (ite $x427 $x441 $x455)))))))))))))))))))))))))))))))
(assert
 (let ((?x15 (stack B empty)))
 (let ((?x400 (right s____)))
 (let (($x459 (= ?x400 ?x15)))
 (let ((?x14 (stack A empty)))
 (let ((?x403 (center s____)))
 (let (($x490 (= ?x403 ?x14)))
 (let ((?x246 (left s____)))
 (let (($x491 (= ?x246 empty)))
 (let (($x493 (not (and $x491 $x490 $x459))))
 (not $x493)))))))))))
(check-sat)
(exit)
