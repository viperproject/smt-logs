(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x23 (stack E empty)))
 (let ((?x24 (stack D ?x23)))
 (let ((?x25 (stack K ?x24)))
 (let ((?x26 (stack G ?x25)))
 (let ((?x27 (stack C ?x26)))
 (let ((?x28 (stack H ?x27)))
 (let ((?x29 (stack A ?x28)))
 (let ((?x30 (stack I ?x29)))
 (let ((?x31 (stack B ?x30)))
 (let ((?x32 (stack F ?x31)))
 (let ((?x33 (stack J ?x32)))
 (let ((?x91 (left s_tmp_)))
 (= ?x91 ?x33))))))))))))))
(assert
 (let ((?x94 (center s_tmp__)))
 (= ?x94 empty)))
(assert
 (let ((?x97 (right s_tmp___)))
 (= ?x97 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x124 (left s_tmp__)))
 (= (left s_tmp___) ?x124)))
(assert
 (let ((?x94 (center s_tmp__)))
 (= (center s_tmp___) ?x94)))
(assert
 (let ((?x128 (center s_tmp_)))
 (= ?x128 (center s_tmp))))
(assert
 (let ((?x131 (right s_tmp_)))
 (= ?x131 (right s_tmp))))
(assert
 (let ((?x91 (left s_tmp_)))
 (let ((?x124 (left s_tmp__)))
 (= ?x124 ?x91))))
(assert
 (let ((?x131 (right s_tmp_)))
 (let ((?x135 (right s_tmp__)))
 (= ?x135 ?x131))))
(assert
 (= c__ c!1))
(assert
 (let ((?x68 (left s_)))
 (let ((?x224 (left s__)))
 (let (($x257 (= ?x224 ?x68)))
 (let ((?x71 (right s_)))
 (let (($x215 ((_ is stack ) ?x71)))
 (let (($x231 (and (= c_ right-to-left) $x215)))
 (let ((?x73 (center s_)))
 (let (($x232 ((_ is stack ) ?x73)))
 (let (($x234 (and (= c_ center-to-right) $x232)))
 (let (($x236 (and (= c_ center-to-left) $x232)))
 (let (($x266 (ite $x236 (= ?x224 (stack (top ?x73) ?x68)) (ite $x234 $x257 (ite $x231 (= ?x224 (stack (top ?x71) ?x68)) $x257)))))
 (let ((?x219 (rest ?x68)))
 (let (($x244 (= ?x224 ?x219)))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 $x244 (ite $x239 $x244 $x266)))))))))))))))))))))
(assert
 (let ((?x71 (right s_)))
 (let ((?x220 (right s__)))
 (let (($x253 (= ?x220 ?x71)))
 (let ((?x217 (rest ?x71)))
 (let (($x250 (= ?x220 ?x217)))
 (let (($x215 ((_ is stack ) ?x71)))
 (let (($x229 (and (= c_ right-to-center) $x215)))
 (let (($x231 (and (= c_ right-to-left) $x215)))
 (let ((?x73 (center s_)))
 (let (($x232 ((_ is stack ) ?x73)))
 (let (($x234 (and (= c_ center-to-right) $x232)))
 (let (($x263 (ite $x234 (= ?x220 (stack (top ?x73) ?x71)) (ite $x231 $x250 (ite $x229 $x250 $x253)))))
 (let (($x236 (and (= c_ center-to-left) $x232)))
 (let ((?x68 (left s_)))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 (= ?x220 (stack (top ?x68) ?x71)) (ite $x239 $x253 (ite $x236 $x253 $x263)))))))))))))))))))))))
(assert
 (let ((?x73 (center s_)))
 (let ((?x211 (center s__)))
 (let (($x255 (= ?x211 ?x73)))
 (let ((?x71 (right s_)))
 (let (($x215 ((_ is stack ) ?x71)))
 (let (($x229 (and (= c_ right-to-center) $x215)))
 (let (($x231 (and (= c_ right-to-left) $x215)))
 (let ((?x225 (rest ?x73)))
 (let (($x247 (= ?x211 ?x225)))
 (let (($x232 ((_ is stack ) ?x73)))
 (let (($x234 (and (= c_ center-to-right) $x232)))
 (let (($x262 (ite $x234 $x247 (ite $x231 $x255 (ite $x229 (= ?x211 (stack (top ?x71) ?x73)) $x255)))))
 (let (($x236 (and (= c_ center-to-left) $x232)))
 (let ((?x68 (left s_)))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 $x255 (ite $x239 (= ?x211 (stack (top ?x68) ?x73)) (ite $x236 $x247 $x262)))))))))))))))))))))))
(assert
 (let ((?x44 (stack G empty)))
 (let ((?x220 (right s__)))
 (let (($x273 (= ?x220 ?x44)))
 (let ((?x43 (stack E (stack F (stack I (stack D empty))))))
 (let ((?x211 (center s__)))
 (let (($x283 (= ?x211 ?x43)))
 (let ((?x39 (stack B (stack K (stack C (stack H (stack A (stack J empty))))))))
 (let ((?x224 (left s__)))
 (let (($x287 (= ?x224 ?x39)))
 (let (($x289 (not (and $x287 $x283 $x273))))
 (not $x289))))))))))))
(check-sat)
(exit)
