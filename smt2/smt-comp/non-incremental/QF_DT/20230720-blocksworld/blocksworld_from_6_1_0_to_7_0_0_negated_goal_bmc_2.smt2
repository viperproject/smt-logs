(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G 0)) (((A) (B) (C) (D) (E) (F) (G))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x19 (stack D empty)))
 (let ((?x20 (stack A ?x19)))
 (let ((?x21 (stack F ?x20)))
 (let ((?x22 (stack B ?x21)))
 (let ((?x23 (stack G ?x22)))
 (let ((?x24 (stack C ?x23)))
 (let ((?x79 (left s_tmp_)))
 (= ?x79 ?x24)))))))))
(assert
 (let ((?x25 (stack E empty)))
 (let ((?x82 (center s_tmp__)))
 (= ?x82 ?x25))))
(assert
 (let ((?x85 (right s_tmp___)))
 (= ?x85 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x112 (left s_tmp__)))
 (= (left s_tmp___) ?x112)))
(assert
 (let ((?x82 (center s_tmp__)))
 (= (center s_tmp___) ?x82)))
(assert
 (let ((?x116 (center s_tmp_)))
 (= ?x116 (center s_tmp))))
(assert
 (let ((?x119 (right s_tmp_)))
 (= ?x119 (right s_tmp))))
(assert
 (let ((?x79 (left s_tmp_)))
 (let ((?x112 (left s_tmp__)))
 (= ?x112 ?x79))))
(assert
 (let ((?x119 (right s_tmp_)))
 (let ((?x123 (right s_tmp__)))
 (= ?x123 ?x119))))
(assert
 (= c__ c!1))
(assert
 (let ((?x56 (left s_)))
 (let ((?x190 (left s__)))
 (let (($x232 (= ?x190 ?x56)))
 (let ((?x59 (right s_)))
 (let (($x187 ((_ is stack ) ?x59)))
 (let (($x206 (and (= c_ right-to-left) $x187)))
 (let ((?x61 (center s_)))
 (let (($x207 ((_ is stack ) ?x61)))
 (let (($x208 (= c_ center-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x210 (= c_ center-to-left)))
 (let (($x211 (and $x210 $x207)))
 (let (($x241 (ite $x211 (= ?x190 (stack (top ?x61) ?x56)) (ite $x209 $x232 (ite $x206 (= ?x190 (stack (top ?x59) ?x56)) $x232)))))
 (let (($x219 (= ?x190 (rest ?x56))))
 (let (($x212 ((_ is stack ) ?x56)))
 (let (($x213 (= c_ left-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x215 (= c_ left-to-center)))
 (let (($x216 (and $x215 $x212)))
 (ite $x216 $x219 (ite $x214 $x219 $x241))))))))))))))))))))))
(assert
 (let ((?x59 (right s_)))
 (let ((?x192 (right s__)))
 (let (($x228 (= ?x192 ?x59)))
 (let (($x225 (= ?x192 (rest ?x59))))
 (let (($x187 ((_ is stack ) ?x59)))
 (let (($x204 (and (= c_ right-to-center) $x187)))
 (let (($x206 (and (= c_ right-to-left) $x187)))
 (let ((?x61 (center s_)))
 (let (($x207 ((_ is stack ) ?x61)))
 (let (($x208 (= c_ center-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x238 (ite $x209 (= ?x192 (stack (top ?x61) ?x59)) (ite $x206 $x225 (ite $x204 $x225 $x228)))))
 (let (($x210 (= c_ center-to-left)))
 (let (($x211 (and $x210 $x207)))
 (let ((?x56 (left s_)))
 (let (($x212 ((_ is stack ) ?x56)))
 (let (($x213 (= c_ left-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x215 (= c_ left-to-center)))
 (let (($x216 (and $x215 $x212)))
 (ite $x216 (= ?x192 (stack (top ?x56) ?x59)) (ite $x214 $x228 (ite $x211 $x228 $x238))))))))))))))))))))))))
(assert
 (let ((?x61 (center s_)))
 (let ((?x201 (center s__)))
 (let (($x230 (= ?x201 ?x61)))
 (let ((?x59 (right s_)))
 (let (($x187 ((_ is stack ) ?x59)))
 (let (($x204 (and (= c_ right-to-center) $x187)))
 (let (($x206 (and (= c_ right-to-left) $x187)))
 (let (($x222 (= ?x201 (rest ?x61))))
 (let (($x207 ((_ is stack ) ?x61)))
 (let (($x208 (= c_ center-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x237 (ite $x209 $x222 (ite $x206 $x230 (ite $x204 (= ?x201 (stack (top ?x59) ?x61)) $x230)))))
 (let (($x210 (= c_ center-to-left)))
 (let (($x211 (and $x210 $x207)))
 (let ((?x56 (left s_)))
 (let (($x212 ((_ is stack ) ?x56)))
 (let (($x213 (= c_ left-to-right)))
 (let (($x214 (and $x213 $x212)))
 (let (($x215 (= c_ left-to-center)))
 (let (($x216 (and $x215 $x212)))
 (ite $x216 $x230 (ite $x214 (= ?x201 (stack (top ?x56) ?x61)) (ite $x211 $x222 $x237))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x190 (left s__)))
 (let ((?x128 (left s___)))
 (let (($x338 (= ?x128 ?x190)))
 (let ((?x192 (right s__)))
 (let ((?x305 (top ?x192)))
 (let ((?x306 (stack ?x305 ?x190)))
 (let (($x332 (= ?x128 ?x306)))
 (let (($x308 ((_ is stack ) ?x192)))
 (let (($x311 (= c__ right-to-left)))
 (let (($x312 (and $x311 $x308)))
 (let ((?x201 (center s__)))
 (let (($x313 ((_ is stack ) ?x201)))
 (let (($x314 (= c__ center-to-right)))
 (let (($x315 (and $x314 $x313)))
 (let ((?x301 (top ?x201)))
 (let ((?x302 (stack ?x301 ?x190)))
 (let (($x329 (= ?x128 ?x302)))
 (let (($x316 (= c__ center-to-left)))
 (let (($x317 (and $x316 $x313)))
 (let ((?x129 (rest ?x190)))
 (let (($x325 (= ?x128 ?x129)))
 (let (($x318 ((_ is stack ) ?x190)))
 (let (($x319 (= c__ left-to-right)))
 (let (($x320 (and $x319 $x318)))
 (let (($x321 (= c__ left-to-center)))
 (let (($x322 (and $x321 $x318)))
 (ite $x322 $x325 (ite $x320 $x325 (ite $x317 $x329 (ite $x315 $x338 (ite $x312 $x332 $x338))))))))))))))))))))))))))))))))
(assert
 (let ((?x192 (right s__)))
 (let ((?x184 (right s___)))
 (let (($x334 (= ?x184 ?x192)))
 (let ((?x304 (rest ?x192)))
 (let (($x331 (= ?x184 ?x304)))
 (let (($x308 ((_ is stack ) ?x192)))
 (let (($x309 (= c__ right-to-center)))
 (let (($x310 (and $x309 $x308)))
 (let (($x311 (= c__ right-to-left)))
 (let (($x312 (and $x311 $x308)))
 (let ((?x201 (center s__)))
 (let ((?x301 (top ?x201)))
 (let ((?x303 (stack ?x301 ?x192)))
 (let (($x330 (= ?x184 ?x303)))
 (let (($x313 ((_ is stack ) ?x201)))
 (let (($x314 (= c__ center-to-right)))
 (let (($x315 (and $x314 $x313)))
 (let (($x316 (= c__ center-to-left)))
 (let (($x317 (and $x316 $x313)))
 (let ((?x190 (left s__)))
 (let (($x318 ((_ is stack ) ?x190)))
 (let (($x319 (= c__ left-to-right)))
 (let (($x320 (and $x319 $x318)))
 (let (($x351 (ite $x320 $x334 (ite $x317 $x334 (ite $x315 $x330 (ite $x312 $x331 (ite $x310 $x331 $x334)))))))
 (let ((?x296 (top ?x190)))
 (let ((?x297 (stack ?x296 ?x192)))
 (let (($x326 (= ?x184 ?x297)))
 (let (($x321 (= c__ left-to-center)))
 (let (($x322 (and $x321 $x318)))
 (ite $x322 $x326 $x351)))))))))))))))))))))))))))))))
(assert
 (let ((?x201 (center s__)))
 (let ((?x298 (center s___)))
 (let (($x336 (= ?x298 ?x201)))
 (let ((?x192 (right s__)))
 (let ((?x305 (top ?x192)))
 (let ((?x307 (stack ?x305 ?x201)))
 (let (($x333 (= ?x298 ?x307)))
 (let (($x308 ((_ is stack ) ?x192)))
 (let (($x309 (= c__ right-to-center)))
 (let (($x310 (and $x309 $x308)))
 (let (($x311 (= c__ right-to-left)))
 (let (($x312 (and $x311 $x308)))
 (let ((?x300 (rest ?x201)))
 (let (($x328 (= ?x298 ?x300)))
 (let (($x313 ((_ is stack ) ?x201)))
 (let (($x314 (= c__ center-to-right)))
 (let (($x315 (and $x314 $x313)))
 (let (($x316 (= c__ center-to-left)))
 (let (($x317 (and $x316 $x313)))
 (let ((?x190 (left s__)))
 (let ((?x296 (top ?x190)))
 (let ((?x299 (stack ?x296 ?x201)))
 (let (($x327 (= ?x298 ?x299)))
 (let (($x318 ((_ is stack ) ?x190)))
 (let (($x319 (= c__ left-to-right)))
 (let (($x320 (and $x319 $x318)))
 (let (($x350 (ite $x320 $x327 (ite $x317 $x328 (ite $x315 $x328 (ite $x312 $x336 (ite $x310 $x333 $x336)))))))
 (let (($x321 (= c__ left-to-center)))
 (let (($x322 (and $x321 $x318)))
 (ite $x322 $x336 $x350)))))))))))))))))))))))))))))))
(assert
 (let ((?x184 (right s___)))
 (let (($x354 (= ?x184 empty)))
 (let ((?x298 (center s___)))
 (let (($x385 (= ?x298 empty)))
 (let ((?x31 (stack C (stack F (stack B (stack D (stack E (stack G empty))))))))
 (let ((?x32 (stack A ?x31)))
 (let ((?x128 (left s___)))
 (let (($x386 (= ?x128 ?x32)))
 (let (($x388 (not (and $x386 $x385 $x354))))
 (not $x388)))))))))))
(check-sat)
(exit)
