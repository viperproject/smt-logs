(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x23 (stack B empty)))
 (let ((?x22 (stack D ?x23)))
 (let ((?x24 (stack J ?x22)))
 (let ((?x25 (stack I ?x24)))
 (let ((?x26 (stack E ?x25)))
 (let ((?x27 (stack F ?x26)))
 (let ((?x28 (stack G ?x27)))
 (let ((?x29 (stack H ?x28)))
 (let ((?x30 (stack C ?x29)))
 (let ((?x31 (stack A ?x30)))
 (let ((?x86 (left s_tmp_)))
 (= ?x86 ?x31)))))))))))))
(assert
 (let ((?x89 (center s_tmp__)))
 (= ?x89 empty)))
(assert
 (let ((?x92 (right s_tmp___)))
 (= ?x92 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x119 (left s_tmp__)))
 (= (left s_tmp___) ?x119)))
(assert
 (let ((?x89 (center s_tmp__)))
 (= (center s_tmp___) ?x89)))
(assert
 (let ((?x123 (center s_tmp_)))
 (= ?x123 (center s_tmp))))
(assert
 (let ((?x126 (right s_tmp_)))
 (= ?x126 (right s_tmp))))
(assert
 (let ((?x86 (left s_tmp_)))
 (let ((?x119 (left s_tmp__)))
 (= ?x119 ?x86))))
(assert
 (let ((?x126 (right s_tmp_)))
 (let ((?x130 (right s_tmp__)))
 (= ?x130 ?x126))))
(assert
 (= c__ c!1))
(assert
 (let ((?x63 (left s_)))
 (let ((?x215 (left s__)))
 (let (($x248 (= ?x215 ?x63)))
 (let ((?x66 (right s_)))
 (let (($x206 ((_ is stack ) ?x66)))
 (let (($x222 (and (= c_ right-to-left) $x206)))
 (let ((?x68 (center s_)))
 (let (($x223 ((_ is stack ) ?x68)))
 (let (($x225 (and (= c_ center-to-right) $x223)))
 (let (($x227 (and (= c_ center-to-left) $x223)))
 (let (($x257 (ite $x227 (= ?x215 (stack (top ?x68) ?x63)) (ite $x225 $x248 (ite $x222 (= ?x215 (stack (top ?x66) ?x63)) $x248)))))
 (let (($x235 (= ?x215 (rest ?x63))))
 (let (($x228 ((_ is stack ) ?x63)))
 (let (($x229 (= c_ left-to-right)))
 (let (($x230 (and $x229 $x228)))
 (let (($x231 (= c_ left-to-center)))
 (let (($x232 (and $x231 $x228)))
 (ite $x232 $x235 (ite $x230 $x235 $x257))))))))))))))))))))
(assert
 (let ((?x66 (right s_)))
 (let ((?x202 (right s__)))
 (let (($x244 (= ?x202 ?x66)))
 (let (($x241 (= ?x202 (rest ?x66))))
 (let (($x206 ((_ is stack ) ?x66)))
 (let (($x220 (and (= c_ right-to-center) $x206)))
 (let (($x222 (and (= c_ right-to-left) $x206)))
 (let ((?x68 (center s_)))
 (let (($x223 ((_ is stack ) ?x68)))
 (let (($x225 (and (= c_ center-to-right) $x223)))
 (let (($x254 (ite $x225 (= ?x202 (stack (top ?x68) ?x66)) (ite $x222 $x241 (ite $x220 $x241 $x244)))))
 (let (($x227 (and (= c_ center-to-left) $x223)))
 (let ((?x63 (left s_)))
 (let (($x228 ((_ is stack ) ?x63)))
 (let (($x229 (= c_ left-to-right)))
 (let (($x230 (and $x229 $x228)))
 (let (($x231 (= c_ left-to-center)))
 (let (($x232 (and $x231 $x228)))
 (ite $x232 (= ?x202 (stack (top ?x63) ?x66)) (ite $x230 $x244 (ite $x227 $x244 $x254))))))))))))))))))))))
(assert
 (let ((?x68 (center s_)))
 (let ((?x208 (center s__)))
 (let (($x246 (= ?x208 ?x68)))
 (let ((?x66 (right s_)))
 (let (($x206 ((_ is stack ) ?x66)))
 (let (($x220 (and (= c_ right-to-center) $x206)))
 (let (($x222 (and (= c_ right-to-left) $x206)))
 (let (($x238 (= ?x208 (rest ?x68))))
 (let (($x223 ((_ is stack ) ?x68)))
 (let (($x225 (and (= c_ center-to-right) $x223)))
 (let (($x253 (ite $x225 $x238 (ite $x222 $x246 (ite $x220 (= ?x208 (stack (top ?x66) ?x68)) $x246)))))
 (let (($x227 (and (= c_ center-to-left) $x223)))
 (let ((?x63 (left s_)))
 (let (($x228 ((_ is stack ) ?x63)))
 (let (($x229 (= c_ left-to-right)))
 (let (($x230 (and $x229 $x228)))
 (let (($x231 (= c_ left-to-center)))
 (let (($x232 (and $x231 $x228)))
 (ite $x232 $x246 (ite $x230 (= ?x208 (stack (top ?x63) ?x68)) (ite $x227 $x238 $x253))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x215 (left s__)))
 (let ((?x135 (left s___)))
 (let (($x339 (= ?x135 ?x215)))
 (let ((?x202 (right s__)))
 (let ((?x306 (top ?x202)))
 (let ((?x307 (stack ?x306 ?x215)))
 (let (($x333 (= ?x135 ?x307)))
 (let (($x309 ((_ is stack ) ?x202)))
 (let (($x312 (= c__ right-to-left)))
 (let (($x313 (and $x312 $x309)))
 (let ((?x208 (center s__)))
 (let (($x314 ((_ is stack ) ?x208)))
 (let (($x315 (= c__ center-to-right)))
 (let (($x316 (and $x315 $x314)))
 (let ((?x302 (top ?x208)))
 (let ((?x303 (stack ?x302 ?x215)))
 (let (($x330 (= ?x135 ?x303)))
 (let (($x317 (= c__ center-to-left)))
 (let (($x318 (and $x317 $x314)))
 (let ((?x136 (rest ?x215)))
 (let (($x326 (= ?x135 ?x136)))
 (let (($x319 ((_ is stack ) ?x215)))
 (let (($x320 (= c__ left-to-right)))
 (let (($x321 (and $x320 $x319)))
 (let (($x322 (= c__ left-to-center)))
 (let (($x323 (and $x322 $x319)))
 (ite $x323 $x326 (ite $x321 $x326 (ite $x318 $x330 (ite $x316 $x339 (ite $x313 $x333 $x339))))))))))))))))))))))))))))))))
(assert
 (let ((?x202 (right s__)))
 (let ((?x200 (right s___)))
 (let (($x335 (= ?x200 ?x202)))
 (let ((?x305 (rest ?x202)))
 (let (($x332 (= ?x200 ?x305)))
 (let (($x309 ((_ is stack ) ?x202)))
 (let (($x310 (= c__ right-to-center)))
 (let (($x311 (and $x310 $x309)))
 (let (($x312 (= c__ right-to-left)))
 (let (($x313 (and $x312 $x309)))
 (let ((?x208 (center s__)))
 (let ((?x302 (top ?x208)))
 (let ((?x304 (stack ?x302 ?x202)))
 (let (($x331 (= ?x200 ?x304)))
 (let (($x314 ((_ is stack ) ?x208)))
 (let (($x315 (= c__ center-to-right)))
 (let (($x316 (and $x315 $x314)))
 (let (($x317 (= c__ center-to-left)))
 (let (($x318 (and $x317 $x314)))
 (let ((?x215 (left s__)))
 (let (($x319 ((_ is stack ) ?x215)))
 (let (($x320 (= c__ left-to-right)))
 (let (($x321 (and $x320 $x319)))
 (let (($x352 (ite $x321 $x335 (ite $x318 $x335 (ite $x316 $x331 (ite $x313 $x332 (ite $x311 $x332 $x335)))))))
 (let ((?x297 (top ?x215)))
 (let ((?x298 (stack ?x297 ?x202)))
 (let (($x327 (= ?x200 ?x298)))
 (let (($x322 (= c__ left-to-center)))
 (let (($x323 (and $x322 $x319)))
 (ite $x323 $x327 $x352)))))))))))))))))))))))))))))))
(assert
 (let ((?x208 (center s__)))
 (let ((?x299 (center s___)))
 (let (($x337 (= ?x299 ?x208)))
 (let ((?x202 (right s__)))
 (let ((?x306 (top ?x202)))
 (let ((?x308 (stack ?x306 ?x208)))
 (let (($x334 (= ?x299 ?x308)))
 (let (($x309 ((_ is stack ) ?x202)))
 (let (($x310 (= c__ right-to-center)))
 (let (($x311 (and $x310 $x309)))
 (let (($x312 (= c__ right-to-left)))
 (let (($x313 (and $x312 $x309)))
 (let ((?x301 (rest ?x208)))
 (let (($x329 (= ?x299 ?x301)))
 (let (($x314 ((_ is stack ) ?x208)))
 (let (($x315 (= c__ center-to-right)))
 (let (($x316 (and $x315 $x314)))
 (let (($x317 (= c__ center-to-left)))
 (let (($x318 (and $x317 $x314)))
 (let ((?x215 (left s__)))
 (let ((?x297 (top ?x215)))
 (let ((?x300 (stack ?x297 ?x208)))
 (let (($x328 (= ?x299 ?x300)))
 (let (($x319 ((_ is stack ) ?x215)))
 (let (($x320 (= c__ left-to-right)))
 (let (($x321 (and $x320 $x319)))
 (let (($x351 (ite $x321 $x328 (ite $x318 $x329 (ite $x316 $x329 (ite $x313 $x337 (ite $x311 $x334 $x337)))))))
 (let (($x322 (= c__ left-to-center)))
 (let (($x323 (and $x322 $x319)))
 (ite $x323 $x337 $x351)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x135 (left s___)))
 (let ((?x279 (left s____)))
 (let (($x478 (= ?x279 ?x135)))
 (let ((?x200 (right s___)))
 (let ((?x445 (top ?x200)))
 (let ((?x446 (stack ?x445 ?x135)))
 (let (($x472 (= ?x279 ?x446)))
 (let (($x448 ((_ is stack ) ?x200)))
 (let (($x451 (= c___ right-to-left)))
 (let (($x452 (and $x451 $x448)))
 (let ((?x299 (center s___)))
 (let (($x453 ((_ is stack ) ?x299)))
 (let (($x454 (= c___ center-to-right)))
 (let (($x455 (and $x454 $x453)))
 (let ((?x441 (top ?x299)))
 (let ((?x442 (stack ?x441 ?x135)))
 (let (($x469 (= ?x279 ?x442)))
 (let (($x456 (= c___ center-to-left)))
 (let (($x457 (and $x456 $x453)))
 (let ((?x280 (rest ?x135)))
 (let (($x465 (= ?x279 ?x280)))
 (let (($x458 ((_ is stack ) ?x135)))
 (let (($x459 (= c___ left-to-right)))
 (let (($x460 (and $x459 $x458)))
 (let (($x461 (= c___ left-to-center)))
 (let (($x462 (and $x461 $x458)))
 (ite $x462 $x465 (ite $x460 $x465 (ite $x457 $x469 (ite $x455 $x478 (ite $x452 $x472 $x478))))))))))))))))))))))))))))))))
(assert
 (let ((?x200 (right s___)))
 (let ((?x296 (right s____)))
 (let (($x474 (= ?x296 ?x200)))
 (let ((?x444 (rest ?x200)))
 (let (($x471 (= ?x296 ?x444)))
 (let (($x448 ((_ is stack ) ?x200)))
 (let (($x449 (= c___ right-to-center)))
 (let (($x450 (and $x449 $x448)))
 (let (($x451 (= c___ right-to-left)))
 (let (($x452 (and $x451 $x448)))
 (let ((?x299 (center s___)))
 (let ((?x441 (top ?x299)))
 (let ((?x443 (stack ?x441 ?x200)))
 (let (($x470 (= ?x296 ?x443)))
 (let (($x453 ((_ is stack ) ?x299)))
 (let (($x454 (= c___ center-to-right)))
 (let (($x455 (and $x454 $x453)))
 (let (($x456 (= c___ center-to-left)))
 (let (($x457 (and $x456 $x453)))
 (let ((?x135 (left s___)))
 (let (($x458 ((_ is stack ) ?x135)))
 (let (($x459 (= c___ left-to-right)))
 (let (($x460 (and $x459 $x458)))
 (let (($x491 (ite $x460 $x474 (ite $x457 $x474 (ite $x455 $x470 (ite $x452 $x471 (ite $x450 $x471 $x474)))))))
 (let ((?x436 (top ?x135)))
 (let ((?x437 (stack ?x436 ?x200)))
 (let (($x466 (= ?x296 ?x437)))
 (let (($x461 (= c___ left-to-center)))
 (let (($x462 (and $x461 $x458)))
 (ite $x462 $x466 $x491)))))))))))))))))))))))))))))))
(assert
 (let ((?x299 (center s___)))
 (let ((?x438 (center s____)))
 (let (($x476 (= ?x438 ?x299)))
 (let ((?x200 (right s___)))
 (let ((?x445 (top ?x200)))
 (let ((?x447 (stack ?x445 ?x299)))
 (let (($x473 (= ?x438 ?x447)))
 (let (($x448 ((_ is stack ) ?x200)))
 (let (($x449 (= c___ right-to-center)))
 (let (($x450 (and $x449 $x448)))
 (let (($x451 (= c___ right-to-left)))
 (let (($x452 (and $x451 $x448)))
 (let ((?x440 (rest ?x299)))
 (let (($x468 (= ?x438 ?x440)))
 (let (($x453 ((_ is stack ) ?x299)))
 (let (($x454 (= c___ center-to-right)))
 (let (($x455 (and $x454 $x453)))
 (let (($x456 (= c___ center-to-left)))
 (let (($x457 (and $x456 $x453)))
 (let ((?x135 (left s___)))
 (let ((?x436 (top ?x135)))
 (let ((?x439 (stack ?x436 ?x299)))
 (let (($x467 (= ?x438 ?x439)))
 (let (($x458 ((_ is stack ) ?x135)))
 (let (($x459 (= c___ left-to-right)))
 (let (($x460 (and $x459 $x458)))
 (let (($x490 (ite $x460 $x467 (ite $x457 $x468 (ite $x455 $x468 (ite $x452 $x476 (ite $x450 $x473 $x476)))))))
 (let (($x461 (= c___ left-to-center)))
 (let (($x462 (and $x461 $x458)))
 (ite $x462 $x476 $x490)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x279 (left s____)))
 (let ((?x355 (left s_____)))
 (let (($x616 (= ?x355 ?x279)))
 (let ((?x296 (right s____)))
 (let ((?x583 (top ?x296)))
 (let ((?x584 (stack ?x583 ?x279)))
 (let (($x610 (= ?x355 ?x584)))
 (let (($x586 ((_ is stack ) ?x296)))
 (let (($x589 (= c____ right-to-left)))
 (let (($x590 (and $x589 $x586)))
 (let ((?x438 (center s____)))
 (let (($x591 ((_ is stack ) ?x438)))
 (let (($x592 (= c____ center-to-right)))
 (let (($x593 (and $x592 $x591)))
 (let ((?x579 (top ?x438)))
 (let ((?x580 (stack ?x579 ?x279)))
 (let (($x607 (= ?x355 ?x580)))
 (let (($x594 (= c____ center-to-left)))
 (let (($x595 (and $x594 $x591)))
 (let ((?x388 (rest ?x279)))
 (let (($x603 (= ?x355 ?x388)))
 (let (($x596 ((_ is stack ) ?x279)))
 (let (($x597 (= c____ left-to-right)))
 (let (($x598 (and $x597 $x596)))
 (let (($x599 (= c____ left-to-center)))
 (let (($x600 (and $x599 $x596)))
 (ite $x600 $x603 (ite $x598 $x603 (ite $x595 $x607 (ite $x593 $x616 (ite $x590 $x610 $x616))))))))))))))))))))))))))))))))
(assert
 (let ((?x296 (right s____)))
 (let ((?x389 (right s_____)))
 (let (($x612 (= ?x389 ?x296)))
 (let ((?x582 (rest ?x296)))
 (let (($x609 (= ?x389 ?x582)))
 (let (($x586 ((_ is stack ) ?x296)))
 (let (($x587 (= c____ right-to-center)))
 (let (($x588 (and $x587 $x586)))
 (let (($x589 (= c____ right-to-left)))
 (let (($x590 (and $x589 $x586)))
 (let ((?x438 (center s____)))
 (let ((?x579 (top ?x438)))
 (let ((?x581 (stack ?x579 ?x296)))
 (let (($x608 (= ?x389 ?x581)))
 (let (($x591 ((_ is stack ) ?x438)))
 (let (($x592 (= c____ center-to-right)))
 (let (($x593 (and $x592 $x591)))
 (let (($x594 (= c____ center-to-left)))
 (let (($x595 (and $x594 $x591)))
 (let ((?x279 (left s____)))
 (let (($x596 ((_ is stack ) ?x279)))
 (let (($x597 (= c____ left-to-right)))
 (let (($x598 (and $x597 $x596)))
 (let (($x629 (ite $x598 $x612 (ite $x595 $x612 (ite $x593 $x608 (ite $x590 $x609 (ite $x588 $x609 $x612)))))))
 (let ((?x435 (top ?x279)))
 (let ((?x575 (stack ?x435 ?x296)))
 (let (($x604 (= ?x389 ?x575)))
 (let (($x599 (= c____ left-to-center)))
 (let (($x600 (and $x599 $x596)))
 (ite $x600 $x604 $x629)))))))))))))))))))))))))))))))
(assert
 (let ((?x438 (center s____)))
 (let ((?x576 (center s_____)))
 (let (($x614 (= ?x576 ?x438)))
 (let ((?x296 (right s____)))
 (let ((?x583 (top ?x296)))
 (let ((?x585 (stack ?x583 ?x438)))
 (let (($x611 (= ?x576 ?x585)))
 (let (($x586 ((_ is stack ) ?x296)))
 (let (($x587 (= c____ right-to-center)))
 (let (($x588 (and $x587 $x586)))
 (let (($x589 (= c____ right-to-left)))
 (let (($x590 (and $x589 $x586)))
 (let ((?x578 (rest ?x438)))
 (let (($x606 (= ?x576 ?x578)))
 (let (($x591 ((_ is stack ) ?x438)))
 (let (($x592 (= c____ center-to-right)))
 (let (($x593 (and $x592 $x591)))
 (let (($x594 (= c____ center-to-left)))
 (let (($x595 (and $x594 $x591)))
 (let ((?x279 (left s____)))
 (let ((?x435 (top ?x279)))
 (let ((?x577 (stack ?x435 ?x438)))
 (let (($x605 (= ?x576 ?x577)))
 (let (($x596 ((_ is stack ) ?x279)))
 (let (($x597 (= c____ left-to-right)))
 (let (($x598 (and $x597 $x596)))
 (let (($x628 (ite $x598 $x605 (ite $x595 $x606 (ite $x593 $x606 (ite $x590 $x614 (ite $x588 $x611 $x614)))))))
 (let (($x599 (= c____ left-to-center)))
 (let (($x600 (and $x599 $x596)))
 (ite $x600 $x614 $x628)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x355 (left s_____)))
 (let ((?x494 (left s______)))
 (let (($x754 (= ?x494 ?x355)))
 (let ((?x389 (right s_____)))
 (let ((?x721 (top ?x389)))
 (let ((?x722 (stack ?x721 ?x355)))
 (let (($x748 (= ?x494 ?x722)))
 (let (($x724 ((_ is stack ) ?x389)))
 (let (($x727 (= c_____ right-to-left)))
 (let (($x728 (and $x727 $x724)))
 (let ((?x576 (center s_____)))
 (let (($x729 ((_ is stack ) ?x576)))
 (let (($x730 (= c_____ center-to-right)))
 (let (($x731 (and $x730 $x729)))
 (let ((?x717 (top ?x576)))
 (let ((?x718 (stack ?x717 ?x355)))
 (let (($x745 (= ?x494 ?x718)))
 (let (($x732 (= c_____ center-to-left)))
 (let (($x733 (and $x732 $x729)))
 (let ((?x527 (rest ?x355)))
 (let (($x741 (= ?x494 ?x527)))
 (let (($x734 ((_ is stack ) ?x355)))
 (let (($x735 (= c_____ left-to-right)))
 (let (($x736 (and $x735 $x734)))
 (let (($x737 (= c_____ left-to-center)))
 (let (($x738 (and $x737 $x734)))
 (ite $x738 $x741 (ite $x736 $x741 (ite $x733 $x745 (ite $x731 $x754 (ite $x728 $x748 $x754))))))))))))))))))))))))))))))))
(assert
 (let ((?x389 (right s_____)))
 (let ((?x528 (right s______)))
 (let (($x750 (= ?x528 ?x389)))
 (let ((?x720 (rest ?x389)))
 (let (($x747 (= ?x528 ?x720)))
 (let (($x724 ((_ is stack ) ?x389)))
 (let (($x725 (= c_____ right-to-center)))
 (let (($x726 (and $x725 $x724)))
 (let (($x727 (= c_____ right-to-left)))
 (let (($x728 (and $x727 $x724)))
 (let ((?x576 (center s_____)))
 (let ((?x717 (top ?x576)))
 (let ((?x719 (stack ?x717 ?x389)))
 (let (($x746 (= ?x528 ?x719)))
 (let (($x729 ((_ is stack ) ?x576)))
 (let (($x730 (= c_____ center-to-right)))
 (let (($x731 (and $x730 $x729)))
 (let (($x732 (= c_____ center-to-left)))
 (let (($x733 (and $x732 $x729)))
 (let ((?x355 (left s_____)))
 (let (($x734 ((_ is stack ) ?x355)))
 (let (($x735 (= c_____ left-to-right)))
 (let (($x736 (and $x735 $x734)))
 (let (($x767 (ite $x736 $x750 (ite $x733 $x750 (ite $x731 $x746 (ite $x728 $x747 (ite $x726 $x747 $x750)))))))
 (let ((?x574 (top ?x355)))
 (let ((?x713 (stack ?x574 ?x389)))
 (let (($x742 (= ?x528 ?x713)))
 (let (($x737 (= c_____ left-to-center)))
 (let (($x738 (and $x737 $x734)))
 (ite $x738 $x742 $x767)))))))))))))))))))))))))))))))
(assert
 (let ((?x576 (center s_____)))
 (let ((?x714 (center s______)))
 (let (($x752 (= ?x714 ?x576)))
 (let ((?x389 (right s_____)))
 (let ((?x721 (top ?x389)))
 (let ((?x723 (stack ?x721 ?x576)))
 (let (($x749 (= ?x714 ?x723)))
 (let (($x724 ((_ is stack ) ?x389)))
 (let (($x725 (= c_____ right-to-center)))
 (let (($x726 (and $x725 $x724)))
 (let (($x727 (= c_____ right-to-left)))
 (let (($x728 (and $x727 $x724)))
 (let ((?x716 (rest ?x576)))
 (let (($x744 (= ?x714 ?x716)))
 (let (($x729 ((_ is stack ) ?x576)))
 (let (($x730 (= c_____ center-to-right)))
 (let (($x731 (and $x730 $x729)))
 (let (($x732 (= c_____ center-to-left)))
 (let (($x733 (and $x732 $x729)))
 (let ((?x355 (left s_____)))
 (let ((?x574 (top ?x355)))
 (let ((?x715 (stack ?x574 ?x576)))
 (let (($x743 (= ?x714 ?x715)))
 (let (($x734 ((_ is stack ) ?x355)))
 (let (($x735 (= c_____ left-to-right)))
 (let (($x736 (and $x735 $x734)))
 (let (($x766 (ite $x736 $x743 (ite $x733 $x744 (ite $x731 $x744 (ite $x728 $x752 (ite $x726 $x749 $x752)))))))
 (let (($x737 (= c_____ left-to-center)))
 (let (($x738 (and $x737 $x734)))
 (ite $x738 $x752 $x766)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x494 (left s______)))
 (let ((?x632 (left s_______)))
 (let (($x892 (= ?x632 ?x494)))
 (let ((?x528 (right s______)))
 (let ((?x859 (top ?x528)))
 (let ((?x860 (stack ?x859 ?x494)))
 (let (($x886 (= ?x632 ?x860)))
 (let (($x862 ((_ is stack ) ?x528)))
 (let (($x865 (= c______ right-to-left)))
 (let (($x866 (and $x865 $x862)))
 (let ((?x714 (center s______)))
 (let (($x867 ((_ is stack ) ?x714)))
 (let (($x868 (= c______ center-to-right)))
 (let (($x869 (and $x868 $x867)))
 (let ((?x855 (top ?x714)))
 (let ((?x856 (stack ?x855 ?x494)))
 (let (($x883 (= ?x632 ?x856)))
 (let (($x870 (= c______ center-to-left)))
 (let (($x871 (and $x870 $x867)))
 (let ((?x665 (rest ?x494)))
 (let (($x879 (= ?x632 ?x665)))
 (let (($x872 ((_ is stack ) ?x494)))
 (let (($x873 (= c______ left-to-right)))
 (let (($x874 (and $x873 $x872)))
 (let (($x875 (= c______ left-to-center)))
 (let (($x876 (and $x875 $x872)))
 (ite $x876 $x879 (ite $x874 $x879 (ite $x871 $x883 (ite $x869 $x892 (ite $x866 $x886 $x892))))))))))))))))))))))))))))))))
(assert
 (let ((?x528 (right s______)))
 (let ((?x666 (right s_______)))
 (let (($x888 (= ?x666 ?x528)))
 (let ((?x858 (rest ?x528)))
 (let (($x885 (= ?x666 ?x858)))
 (let (($x862 ((_ is stack ) ?x528)))
 (let (($x863 (= c______ right-to-center)))
 (let (($x864 (and $x863 $x862)))
 (let (($x865 (= c______ right-to-left)))
 (let (($x866 (and $x865 $x862)))
 (let ((?x714 (center s______)))
 (let ((?x855 (top ?x714)))
 (let ((?x857 (stack ?x855 ?x528)))
 (let (($x884 (= ?x666 ?x857)))
 (let (($x867 ((_ is stack ) ?x714)))
 (let (($x868 (= c______ center-to-right)))
 (let (($x869 (and $x868 $x867)))
 (let (($x870 (= c______ center-to-left)))
 (let (($x871 (and $x870 $x867)))
 (let ((?x494 (left s______)))
 (let (($x872 ((_ is stack ) ?x494)))
 (let (($x873 (= c______ left-to-right)))
 (let (($x874 (and $x873 $x872)))
 (let (($x905 (ite $x874 $x888 (ite $x871 $x888 (ite $x869 $x884 (ite $x866 $x885 (ite $x864 $x885 $x888)))))))
 (let ((?x712 (top ?x494)))
 (let ((?x851 (stack ?x712 ?x528)))
 (let (($x880 (= ?x666 ?x851)))
 (let (($x875 (= c______ left-to-center)))
 (let (($x876 (and $x875 $x872)))
 (ite $x876 $x880 $x905)))))))))))))))))))))))))))))))
(assert
 (let ((?x714 (center s______)))
 (let ((?x852 (center s_______)))
 (let (($x890 (= ?x852 ?x714)))
 (let ((?x528 (right s______)))
 (let ((?x859 (top ?x528)))
 (let ((?x861 (stack ?x859 ?x714)))
 (let (($x887 (= ?x852 ?x861)))
 (let (($x862 ((_ is stack ) ?x528)))
 (let (($x863 (= c______ right-to-center)))
 (let (($x864 (and $x863 $x862)))
 (let (($x865 (= c______ right-to-left)))
 (let (($x866 (and $x865 $x862)))
 (let ((?x854 (rest ?x714)))
 (let (($x882 (= ?x852 ?x854)))
 (let (($x867 ((_ is stack ) ?x714)))
 (let (($x868 (= c______ center-to-right)))
 (let (($x869 (and $x868 $x867)))
 (let (($x870 (= c______ center-to-left)))
 (let (($x871 (and $x870 $x867)))
 (let ((?x494 (left s______)))
 (let ((?x712 (top ?x494)))
 (let ((?x853 (stack ?x712 ?x714)))
 (let (($x881 (= ?x852 ?x853)))
 (let (($x872 ((_ is stack ) ?x494)))
 (let (($x873 (= c______ left-to-right)))
 (let (($x874 (and $x873 $x872)))
 (let (($x904 (ite $x874 $x881 (ite $x871 $x882 (ite $x869 $x882 (ite $x866 $x890 (ite $x864 $x887 $x890)))))))
 (let (($x875 (= c______ left-to-center)))
 (let (($x876 (and $x875 $x872)))
 (ite $x876 $x890 $x904)))))))))))))))))))))))))))))))
(assert
 (let ((?x666 (right s_______)))
 (let (($x908 (= ?x666 empty)))
 (let ((?x39 (stack C (stack A (stack F empty)))))
 (let ((?x852 (center s_______)))
 (let (($x939 (= ?x852 ?x39)))
 (let ((?x35 (stack J (stack I (stack G (stack H (stack D (stack B empty))))))))
 (let ((?x36 (stack E ?x35)))
 (let ((?x632 (left s_______)))
 (let (($x940 (= ?x632 ?x36)))
 (let (($x942 (not (and $x940 $x939 $x908))))
 (not $x942))))))))))))
(check-sat)
(exit)
