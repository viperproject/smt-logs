(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x32 (stack R empty)))
 (let ((?x31 (stack J ?x32)))
 (let ((?x33 (stack C ?x31)))
 (let ((?x34 (stack L ?x33)))
 (let ((?x35 (stack D ?x34)))
 (let ((?x36 (stack S ?x35)))
 (let ((?x37 (stack Q ?x36)))
 (let ((?x38 (stack F ?x37)))
 (let ((?x115 (left s_tmp_)))
 (= ?x115 ?x38)))))))))))
(assert
 (let ((?x39 (stack E empty)))
 (let ((?x40 (stack P ?x39)))
 (let ((?x41 (stack O ?x40)))
 (let ((?x42 (stack I ?x41)))
 (let ((?x43 (stack H ?x42)))
 (let ((?x44 (stack B ?x43)))
 (let ((?x45 (stack A ?x44)))
 (let ((?x46 (stack M ?x45)))
 (let ((?x47 (stack G ?x46)))
 (let ((?x48 (stack N ?x47)))
 (let ((?x118 (center s_tmp__)))
 (= ?x118 ?x48)))))))))))))
(assert
 (let ((?x49 (stack K empty)))
 (let ((?x121 (right s_tmp___)))
 (= ?x121 ?x49))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x148 (left s_tmp__)))
 (= (left s_tmp___) ?x148)))
(assert
 (let ((?x118 (center s_tmp__)))
 (= (center s_tmp___) ?x118)))
(assert
 (let ((?x152 (center s_tmp_)))
 (= ?x152 (center s_tmp))))
(assert
 (let ((?x155 (right s_tmp_)))
 (= ?x155 (right s_tmp))))
(assert
 (let ((?x115 (left s_tmp_)))
 (let ((?x148 (left s_tmp__)))
 (= ?x148 ?x115))))
(assert
 (let ((?x155 (right s_tmp_)))
 (let ((?x159 (right s_tmp__)))
 (= ?x159 ?x155))))
(assert
 (= c__ c!1))
(assert
 (let ((?x92 (left s_)))
 (let ((?x284 (left s__)))
 (let (($x305 (= ?x284 ?x92)))
 (let ((?x95 (right s_)))
 (let (($x278 ((_ is stack ) ?x95)))
 (let (($x296 (= c_ right-to-left)))
 (let (($x285 (and $x296 $x278)))
 (let ((?x97 (center s_)))
 (let (($x286 ((_ is stack ) ?x97)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x273 (and $x287 $x286)))
 (let (($x274 (= c_ center-to-left)))
 (let (($x275 (and $x274 $x286)))
 (let (($x314 (ite $x275 (= ?x284 (stack (top ?x97) ?x92)) (ite $x273 $x305 (ite $x285 (= ?x284 (stack (top ?x95) ?x92)) $x305)))))
 (let (($x262 (= ?x284 (rest ?x92))))
 (let (($x264 ((_ is stack ) ?x92)))
 (let (($x265 (= c_ left-to-right)))
 (let (($x266 (and $x265 $x264)))
 (let (($x297 (= c_ left-to-center)))
 (let (($x298 (and $x297 $x264)))
 (ite $x298 $x262 (ite $x266 $x262 $x314)))))))))))))))))))))))
(assert
 (let ((?x95 (right s_)))
 (let ((?x280 (right s__)))
 (let (($x301 (= ?x280 ?x95)))
 (let (($x268 (= ?x280 (rest ?x95))))
 (let (($x278 ((_ is stack ) ?x95)))
 (let (($x294 (= c_ right-to-center)))
 (let (($x295 (and $x294 $x278)))
 (let (($x296 (= c_ right-to-left)))
 (let (($x285 (and $x296 $x278)))
 (let ((?x97 (center s_)))
 (let (($x286 ((_ is stack ) ?x97)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x273 (and $x287 $x286)))
 (let (($x311 (ite $x273 (= ?x280 (stack (top ?x97) ?x95)) (ite $x285 $x268 (ite $x295 $x268 $x301)))))
 (let (($x274 (= c_ center-to-left)))
 (let (($x275 (and $x274 $x286)))
 (let ((?x92 (left s_)))
 (let (($x264 ((_ is stack ) ?x92)))
 (let (($x265 (= c_ left-to-right)))
 (let (($x266 (and $x265 $x264)))
 (let (($x297 (= c_ left-to-center)))
 (let (($x298 (and $x297 $x264)))
 (ite $x298 (= ?x280 (stack (top ?x92) ?x95)) (ite $x266 $x301 (ite $x275 $x301 $x311))))))))))))))))))))))))))
(assert
 (let ((?x97 (center s_)))
 (let ((?x292 (center s__)))
 (let (($x303 (= ?x292 ?x97)))
 (let ((?x95 (right s_)))
 (let (($x278 ((_ is stack ) ?x95)))
 (let (($x294 (= c_ right-to-center)))
 (let (($x295 (and $x294 $x278)))
 (let (($x296 (= c_ right-to-left)))
 (let (($x285 (and $x296 $x278)))
 (let (($x271 (= ?x292 (rest ?x97))))
 (let (($x286 ((_ is stack ) ?x97)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x273 (and $x287 $x286)))
 (let (($x310 (ite $x273 $x271 (ite $x285 $x303 (ite $x295 (= ?x292 (stack (top ?x95) ?x97)) $x303)))))
 (let (($x274 (= c_ center-to-left)))
 (let (($x275 (and $x274 $x286)))
 (let ((?x92 (left s_)))
 (let (($x264 ((_ is stack ) ?x92)))
 (let (($x265 (= c_ left-to-right)))
 (let (($x266 (and $x265 $x264)))
 (let (($x297 (= c_ left-to-center)))
 (let (($x298 (and $x297 $x264)))
 (ite $x298 $x303 (ite $x266 (= ?x292 (stack (top ?x92) ?x97)) (ite $x275 $x271 $x310))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x284 (left s__)))
 (let ((?x162 (left s___)))
 (let (($x434 (= ?x162 ?x284)))
 (let ((?x280 (right s__)))
 (let ((?x401 (top ?x280)))
 (let ((?x402 (stack ?x401 ?x284)))
 (let (($x428 (= ?x162 ?x402)))
 (let (($x404 ((_ is stack ) ?x280)))
 (let (($x407 (= c__ right-to-left)))
 (let (($x408 (and $x407 $x404)))
 (let ((?x292 (center s__)))
 (let (($x409 ((_ is stack ) ?x292)))
 (let (($x410 (= c__ center-to-right)))
 (let (($x411 (and $x410 $x409)))
 (let ((?x397 (top ?x292)))
 (let ((?x398 (stack ?x397 ?x284)))
 (let (($x425 (= ?x162 ?x398)))
 (let (($x412 (= c__ center-to-left)))
 (let (($x413 (and $x412 $x409)))
 (let ((?x164 (rest ?x284)))
 (let (($x421 (= ?x162 ?x164)))
 (let (($x414 ((_ is stack ) ?x284)))
 (let (($x415 (= c__ left-to-right)))
 (let (($x416 (and $x415 $x414)))
 (let (($x417 (= c__ left-to-center)))
 (let (($x418 (and $x417 $x414)))
 (ite $x418 $x421 (ite $x416 $x421 (ite $x413 $x425 (ite $x411 $x434 (ite $x408 $x428 $x434))))))))))))))))))))))))))))))))
(assert
 (let ((?x280 (right s__)))
 (let ((?x165 (right s___)))
 (let (($x430 (= ?x165 ?x280)))
 (let ((?x400 (rest ?x280)))
 (let (($x427 (= ?x165 ?x400)))
 (let (($x404 ((_ is stack ) ?x280)))
 (let (($x405 (= c__ right-to-center)))
 (let (($x406 (and $x405 $x404)))
 (let (($x407 (= c__ right-to-left)))
 (let (($x408 (and $x407 $x404)))
 (let ((?x292 (center s__)))
 (let ((?x397 (top ?x292)))
 (let ((?x399 (stack ?x397 ?x280)))
 (let (($x426 (= ?x165 ?x399)))
 (let (($x409 ((_ is stack ) ?x292)))
 (let (($x410 (= c__ center-to-right)))
 (let (($x411 (and $x410 $x409)))
 (let (($x412 (= c__ center-to-left)))
 (let (($x413 (and $x412 $x409)))
 (let ((?x284 (left s__)))
 (let (($x414 ((_ is stack ) ?x284)))
 (let (($x415 (= c__ left-to-right)))
 (let (($x416 (and $x415 $x414)))
 (let (($x447 (ite $x416 $x430 (ite $x413 $x430 (ite $x411 $x426 (ite $x408 $x427 (ite $x406 $x427 $x430)))))))
 (let ((?x257 (top ?x284)))
 (let ((?x393 (stack ?x257 ?x280)))
 (let (($x422 (= ?x165 ?x393)))
 (let (($x417 (= c__ left-to-center)))
 (let (($x418 (and $x417 $x414)))
 (ite $x418 $x422 $x447)))))))))))))))))))))))))))))))
(assert
 (let ((?x292 (center s__)))
 (let ((?x394 (center s___)))
 (let (($x432 (= ?x394 ?x292)))
 (let ((?x280 (right s__)))
 (let ((?x401 (top ?x280)))
 (let ((?x403 (stack ?x401 ?x292)))
 (let (($x429 (= ?x394 ?x403)))
 (let (($x404 ((_ is stack ) ?x280)))
 (let (($x405 (= c__ right-to-center)))
 (let (($x406 (and $x405 $x404)))
 (let (($x407 (= c__ right-to-left)))
 (let (($x408 (and $x407 $x404)))
 (let ((?x396 (rest ?x292)))
 (let (($x424 (= ?x394 ?x396)))
 (let (($x409 ((_ is stack ) ?x292)))
 (let (($x410 (= c__ center-to-right)))
 (let (($x411 (and $x410 $x409)))
 (let (($x412 (= c__ center-to-left)))
 (let (($x413 (and $x412 $x409)))
 (let ((?x284 (left s__)))
 (let ((?x257 (top ?x284)))
 (let ((?x395 (stack ?x257 ?x292)))
 (let (($x423 (= ?x394 ?x395)))
 (let (($x414 ((_ is stack ) ?x284)))
 (let (($x415 (= c__ left-to-right)))
 (let (($x416 (and $x415 $x414)))
 (let (($x446 (ite $x416 $x423 (ite $x413 $x424 (ite $x411 $x424 (ite $x408 $x432 (ite $x406 $x429 $x432)))))))
 (let (($x417 (= c__ left-to-center)))
 (let (($x418 (and $x417 $x414)))
 (ite $x418 $x432 $x446)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x162 (left s___)))
 (let ((?x321 (left s____)))
 (let (($x572 (= ?x321 ?x162)))
 (let ((?x165 (right s___)))
 (let ((?x539 (top ?x165)))
 (let ((?x540 (stack ?x539 ?x162)))
 (let (($x566 (= ?x321 ?x540)))
 (let (($x542 ((_ is stack ) ?x165)))
 (let (($x545 (= c___ right-to-left)))
 (let (($x546 (and $x545 $x542)))
 (let ((?x394 (center s___)))
 (let (($x547 ((_ is stack ) ?x394)))
 (let (($x548 (= c___ center-to-right)))
 (let (($x549 (and $x548 $x547)))
 (let ((?x535 (top ?x394)))
 (let ((?x536 (stack ?x535 ?x162)))
 (let (($x563 (= ?x321 ?x536)))
 (let (($x550 (= c___ center-to-left)))
 (let (($x551 (and $x550 $x547)))
 (let ((?x363 (rest ?x162)))
 (let (($x559 (= ?x321 ?x363)))
 (let (($x552 ((_ is stack ) ?x162)))
 (let (($x553 (= c___ left-to-right)))
 (let (($x554 (and $x553 $x552)))
 (let (($x555 (= c___ left-to-center)))
 (let (($x556 (and $x555 $x552)))
 (ite $x556 $x559 (ite $x554 $x559 (ite $x551 $x563 (ite $x549 $x572 (ite $x546 $x566 $x572))))))))))))))))))))))))))))))))
(assert
 (let ((?x165 (right s___)))
 (let ((?x364 (right s____)))
 (let (($x568 (= ?x364 ?x165)))
 (let ((?x538 (rest ?x165)))
 (let (($x565 (= ?x364 ?x538)))
 (let (($x542 ((_ is stack ) ?x165)))
 (let (($x543 (= c___ right-to-center)))
 (let (($x544 (and $x543 $x542)))
 (let (($x545 (= c___ right-to-left)))
 (let (($x546 (and $x545 $x542)))
 (let ((?x394 (center s___)))
 (let ((?x535 (top ?x394)))
 (let ((?x537 (stack ?x535 ?x165)))
 (let (($x564 (= ?x364 ?x537)))
 (let (($x547 ((_ is stack ) ?x394)))
 (let (($x548 (= c___ center-to-right)))
 (let (($x549 (and $x548 $x547)))
 (let (($x550 (= c___ center-to-left)))
 (let (($x551 (and $x550 $x547)))
 (let ((?x162 (left s___)))
 (let (($x552 ((_ is stack ) ?x162)))
 (let (($x553 (= c___ left-to-right)))
 (let (($x554 (and $x553 $x552)))
 (let (($x585 (ite $x554 $x568 (ite $x551 $x568 (ite $x549 $x564 (ite $x546 $x565 (ite $x544 $x565 $x568)))))))
 (let ((?x392 (top ?x162)))
 (let ((?x531 (stack ?x392 ?x165)))
 (let (($x560 (= ?x364 ?x531)))
 (let (($x555 (= c___ left-to-center)))
 (let (($x556 (and $x555 $x552)))
 (ite $x556 $x560 $x585)))))))))))))))))))))))))))))))
(assert
 (let ((?x394 (center s___)))
 (let ((?x532 (center s____)))
 (let (($x570 (= ?x532 ?x394)))
 (let ((?x165 (right s___)))
 (let ((?x539 (top ?x165)))
 (let ((?x541 (stack ?x539 ?x394)))
 (let (($x567 (= ?x532 ?x541)))
 (let (($x542 ((_ is stack ) ?x165)))
 (let (($x543 (= c___ right-to-center)))
 (let (($x544 (and $x543 $x542)))
 (let (($x545 (= c___ right-to-left)))
 (let (($x546 (and $x545 $x542)))
 (let ((?x534 (rest ?x394)))
 (let (($x562 (= ?x532 ?x534)))
 (let (($x547 ((_ is stack ) ?x394)))
 (let (($x548 (= c___ center-to-right)))
 (let (($x549 (and $x548 $x547)))
 (let (($x550 (= c___ center-to-left)))
 (let (($x551 (and $x550 $x547)))
 (let ((?x162 (left s___)))
 (let ((?x392 (top ?x162)))
 (let ((?x533 (stack ?x392 ?x394)))
 (let (($x561 (= ?x532 ?x533)))
 (let (($x552 ((_ is stack ) ?x162)))
 (let (($x553 (= c___ left-to-right)))
 (let (($x554 (and $x553 $x552)))
 (let (($x584 (ite $x554 $x561 (ite $x551 $x562 (ite $x549 $x562 (ite $x546 $x570 (ite $x544 $x567 $x570)))))))
 (let (($x555 (= c___ left-to-center)))
 (let (($x556 (and $x555 $x552)))
 (ite $x556 $x570 $x584)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x321 (left s____)))
 (let ((?x450 (left s_____)))
 (let (($x710 (= ?x450 ?x321)))
 (let ((?x364 (right s____)))
 (let ((?x677 (top ?x364)))
 (let ((?x678 (stack ?x677 ?x321)))
 (let (($x704 (= ?x450 ?x678)))
 (let (($x680 ((_ is stack ) ?x364)))
 (let (($x683 (= c____ right-to-left)))
 (let (($x684 (and $x683 $x680)))
 (let ((?x532 (center s____)))
 (let (($x685 ((_ is stack ) ?x532)))
 (let (($x686 (= c____ center-to-right)))
 (let (($x687 (and $x686 $x685)))
 (let ((?x673 (top ?x532)))
 (let ((?x674 (stack ?x673 ?x321)))
 (let (($x701 (= ?x450 ?x674)))
 (let (($x688 (= c____ center-to-left)))
 (let (($x689 (and $x688 $x685)))
 (let ((?x483 (rest ?x321)))
 (let (($x697 (= ?x450 ?x483)))
 (let (($x690 ((_ is stack ) ?x321)))
 (let (($x691 (= c____ left-to-right)))
 (let (($x692 (and $x691 $x690)))
 (let (($x693 (= c____ left-to-center)))
 (let (($x694 (and $x693 $x690)))
 (ite $x694 $x697 (ite $x692 $x697 (ite $x689 $x701 (ite $x687 $x710 (ite $x684 $x704 $x710))))))))))))))))))))))))))))))))
(assert
 (let ((?x364 (right s____)))
 (let ((?x484 (right s_____)))
 (let (($x706 (= ?x484 ?x364)))
 (let ((?x676 (rest ?x364)))
 (let (($x703 (= ?x484 ?x676)))
 (let (($x680 ((_ is stack ) ?x364)))
 (let (($x681 (= c____ right-to-center)))
 (let (($x682 (and $x681 $x680)))
 (let (($x683 (= c____ right-to-left)))
 (let (($x684 (and $x683 $x680)))
 (let ((?x532 (center s____)))
 (let ((?x673 (top ?x532)))
 (let ((?x675 (stack ?x673 ?x364)))
 (let (($x702 (= ?x484 ?x675)))
 (let (($x685 ((_ is stack ) ?x532)))
 (let (($x686 (= c____ center-to-right)))
 (let (($x687 (and $x686 $x685)))
 (let (($x688 (= c____ center-to-left)))
 (let (($x689 (and $x688 $x685)))
 (let ((?x321 (left s____)))
 (let (($x690 ((_ is stack ) ?x321)))
 (let (($x691 (= c____ left-to-right)))
 (let (($x692 (and $x691 $x690)))
 (let (($x723 (ite $x692 $x706 (ite $x689 $x706 (ite $x687 $x702 (ite $x684 $x703 (ite $x682 $x703 $x706)))))))
 (let ((?x530 (top ?x321)))
 (let ((?x669 (stack ?x530 ?x364)))
 (let (($x698 (= ?x484 ?x669)))
 (let (($x693 (= c____ left-to-center)))
 (let (($x694 (and $x693 $x690)))
 (ite $x694 $x698 $x723)))))))))))))))))))))))))))))))
(assert
 (let ((?x532 (center s____)))
 (let ((?x670 (center s_____)))
 (let (($x708 (= ?x670 ?x532)))
 (let ((?x364 (right s____)))
 (let ((?x677 (top ?x364)))
 (let ((?x679 (stack ?x677 ?x532)))
 (let (($x705 (= ?x670 ?x679)))
 (let (($x680 ((_ is stack ) ?x364)))
 (let (($x681 (= c____ right-to-center)))
 (let (($x682 (and $x681 $x680)))
 (let (($x683 (= c____ right-to-left)))
 (let (($x684 (and $x683 $x680)))
 (let ((?x672 (rest ?x532)))
 (let (($x700 (= ?x670 ?x672)))
 (let (($x685 ((_ is stack ) ?x532)))
 (let (($x686 (= c____ center-to-right)))
 (let (($x687 (and $x686 $x685)))
 (let (($x688 (= c____ center-to-left)))
 (let (($x689 (and $x688 $x685)))
 (let ((?x321 (left s____)))
 (let ((?x530 (top ?x321)))
 (let ((?x671 (stack ?x530 ?x532)))
 (let (($x699 (= ?x670 ?x671)))
 (let (($x690 ((_ is stack ) ?x321)))
 (let (($x691 (= c____ left-to-right)))
 (let (($x692 (and $x691 $x690)))
 (let (($x722 (ite $x692 $x699 (ite $x689 $x700 (ite $x687 $x700 (ite $x684 $x708 (ite $x682 $x705 $x708)))))))
 (let (($x693 (= c____ left-to-center)))
 (let (($x694 (and $x693 $x690)))
 (ite $x694 $x708 $x722)))))))))))))))))))))))))))))))
(assert
 (let ((?x68 (stack Q (stack K (stack I (stack D (stack B empty)))))))
 (let ((?x484 (right s_____)))
 (let (($x726 (= ?x484 ?x68)))
 (let ((?x60 (stack F (stack C (stack E (stack P (stack H (stack J empty))))))))
 (let ((?x63 (stack A (stack O (stack R ?x60)))))
 (let ((?x670 (center s_____)))
 (let (($x757 (= ?x670 ?x63)))
 (let ((?x54 (stack L (stack S (stack N (stack G (stack M empty)))))))
 (let ((?x450 (left s_____)))
 (let (($x758 (= ?x450 ?x54)))
 (let (($x760 (not (and $x758 $x757 $x726))))
 (not $x760)))))))))))))
(check-sat)
(exit)
