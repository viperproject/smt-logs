(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x31 (stack A empty)))
 (let ((?x32 (stack L ?x31)))
 (let ((?x33 (stack F ?x32)))
 (let ((?x34 (stack O ?x33)))
 (let ((?x35 (stack P ?x34)))
 (let ((?x36 (stack G ?x35)))
 (let ((?x37 (stack I ?x36)))
 (let ((?x38 (stack C ?x37)))
 (let ((?x39 (stack D ?x38)))
 (let ((?x40 (stack Q ?x39)))
 (let ((?x41 (stack K ?x40)))
 (let ((?x42 (stack H ?x41)))
 (let ((?x115 (left s_tmp_)))
 (= ?x115 ?x42)))))))))))))))
(assert
 (let ((?x43 (stack N empty)))
 (let ((?x44 (stack J ?x43)))
 (let ((?x45 (stack M ?x44)))
 (let ((?x46 (stack B ?x45)))
 (let ((?x47 (stack R ?x46)))
 (let ((?x48 (stack S ?x47)))
 (let ((?x49 (stack E ?x48)))
 (let ((?x118 (center s_tmp__)))
 (= ?x118 ?x49))))))))))
(assert
 (let ((?x121 (right s_tmp___)))
 (= ?x121 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x148 (left s_tmp__)))
 (= (left s_tmp___) ?x148)))
(assert
 (let ((?x118 (center s_tmp__)))
 (= (center s_tmp___) ?x118)))
(assert
 (let ((?x152 (center s_tmp_)))
 (= ?x152 (center s_tmp))))
(assert
 (let ((?x155 (right s_tmp_)))
 (= ?x155 (right s_tmp))))
(assert
 (let ((?x115 (left s_tmp_)))
 (let ((?x148 (left s_tmp__)))
 (= ?x148 ?x115))))
(assert
 (let ((?x155 (right s_tmp_)))
 (let ((?x159 (right s_tmp__)))
 (= ?x159 ?x155))))
(assert
 (= c__ c!1))
(assert
 (let ((?x92 (left s_)))
 (let ((?x280 (left s__)))
 (let (($x292 (= ?x280 ?x92)))
 (let ((?x95 (right s_)))
 (let (($x286 ((_ is stack ) ?x95)))
 (let (($x287 (and (= c_ right-to-left) $x286)))
 (let ((?x97 (center s_)))
 (let (($x288 ((_ is stack ) ?x97)))
 (let (($x289 (= c_ center-to-right)))
 (let (($x260 (and $x289 $x288)))
 (let (($x261 (= c_ center-to-left)))
 (let (($x262 (and $x261 $x288)))
 (let (($x313 (ite $x262 (= ?x280 (stack (top ?x97) ?x92)) (ite $x260 $x292 (ite $x287 (= ?x280 (stack (top ?x95) ?x92)) $x292)))))
 (let (($x303 (= ?x280 (rest ?x92))))
 (let (($x272 ((_ is stack ) ?x92)))
 (let (($x273 (= c_ left-to-right)))
 (let (($x274 (and $x273 $x272)))
 (let (($x257 (= c_ left-to-center)))
 (let (($x258 (and $x257 $x272)))
 (ite $x258 $x303 (ite $x274 $x303 $x313))))))))))))))))))))))
(assert
 (let ((?x95 (right s_)))
 (let ((?x306 (right s__)))
 (let (($x264 (= ?x306 ?x95)))
 (let (($x276 (= ?x306 (rest ?x95))))
 (let (($x286 ((_ is stack ) ?x95)))
 (let (($x294 (and (= c_ right-to-center) $x286)))
 (let (($x287 (and (= c_ right-to-left) $x286)))
 (let ((?x97 (center s_)))
 (let (($x288 ((_ is stack ) ?x97)))
 (let (($x289 (= c_ center-to-right)))
 (let (($x260 (and $x289 $x288)))
 (let (($x310 (ite $x260 (= ?x306 (stack (top ?x97) ?x95)) (ite $x287 $x276 (ite $x294 $x276 $x264)))))
 (let (($x261 (= c_ center-to-left)))
 (let (($x262 (and $x261 $x288)))
 (let ((?x92 (left s_)))
 (let (($x272 ((_ is stack ) ?x92)))
 (let (($x273 (= c_ left-to-right)))
 (let (($x274 (and $x273 $x272)))
 (let (($x257 (= c_ left-to-center)))
 (let (($x258 (and $x257 $x272)))
 (ite $x258 (= ?x306 (stack (top ?x92) ?x95)) (ite $x274 $x264 (ite $x262 $x264 $x310))))))))))))))))))))))))
(assert
 (let ((?x97 (center s_)))
 (let ((?x282 (center s__)))
 (let (($x290 (= ?x282 ?x97)))
 (let ((?x95 (right s_)))
 (let (($x286 ((_ is stack ) ?x95)))
 (let (($x294 (and (= c_ right-to-center) $x286)))
 (let (($x287 (and (= c_ right-to-left) $x286)))
 (let (($x270 (= ?x282 (rest ?x97))))
 (let (($x288 ((_ is stack ) ?x97)))
 (let (($x289 (= c_ center-to-right)))
 (let (($x260 (and $x289 $x288)))
 (let (($x309 (ite $x260 $x270 (ite $x287 $x290 (ite $x294 (= ?x282 (stack (top ?x95) ?x97)) $x290)))))
 (let (($x261 (= c_ center-to-left)))
 (let (($x262 (and $x261 $x288)))
 (let ((?x92 (left s_)))
 (let (($x272 ((_ is stack ) ?x92)))
 (let (($x273 (= c_ left-to-right)))
 (let (($x274 (and $x273 $x272)))
 (let (($x257 (= c_ left-to-center)))
 (let (($x258 (and $x257 $x272)))
 (ite $x258 $x290 (ite $x274 (= ?x282 (stack (top ?x92) ?x97)) (ite $x262 $x270 $x309))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x280 (left s__)))
 (let ((?x164 (left s___)))
 (let (($x414 (= ?x164 ?x280)))
 (let ((?x306 (right s__)))
 (let ((?x381 (top ?x306)))
 (let ((?x382 (stack ?x381 ?x280)))
 (let (($x408 (= ?x164 ?x382)))
 (let (($x384 ((_ is stack ) ?x306)))
 (let (($x387 (= c__ right-to-left)))
 (let (($x388 (and $x387 $x384)))
 (let ((?x282 (center s__)))
 (let (($x389 ((_ is stack ) ?x282)))
 (let (($x390 (= c__ center-to-right)))
 (let (($x391 (and $x390 $x389)))
 (let ((?x377 (top ?x282)))
 (let ((?x378 (stack ?x377 ?x280)))
 (let (($x405 (= ?x164 ?x378)))
 (let (($x392 (= c__ center-to-left)))
 (let (($x393 (and $x392 $x389)))
 (let ((?x165 (rest ?x280)))
 (let (($x401 (= ?x164 ?x165)))
 (let (($x394 ((_ is stack ) ?x280)))
 (let (($x395 (= c__ left-to-right)))
 (let (($x396 (and $x395 $x394)))
 (let (($x397 (= c__ left-to-center)))
 (let (($x398 (and $x397 $x394)))
 (ite $x398 $x401 (ite $x396 $x401 (ite $x393 $x405 (ite $x391 $x414 (ite $x388 $x408 $x414))))))))))))))))))))))))))))))))
(assert
 (let ((?x306 (right s__)))
 (let ((?x256 (right s___)))
 (let (($x410 (= ?x256 ?x306)))
 (let ((?x380 (rest ?x306)))
 (let (($x407 (= ?x256 ?x380)))
 (let (($x384 ((_ is stack ) ?x306)))
 (let (($x385 (= c__ right-to-center)))
 (let (($x386 (and $x385 $x384)))
 (let (($x387 (= c__ right-to-left)))
 (let (($x388 (and $x387 $x384)))
 (let ((?x282 (center s__)))
 (let ((?x377 (top ?x282)))
 (let ((?x379 (stack ?x377 ?x306)))
 (let (($x406 (= ?x256 ?x379)))
 (let (($x389 ((_ is stack ) ?x282)))
 (let (($x390 (= c__ center-to-right)))
 (let (($x391 (and $x390 $x389)))
 (let (($x392 (= c__ center-to-left)))
 (let (($x393 (and $x392 $x389)))
 (let ((?x280 (left s__)))
 (let (($x394 ((_ is stack ) ?x280)))
 (let (($x395 (= c__ left-to-right)))
 (let (($x396 (and $x395 $x394)))
 (let (($x427 (ite $x396 $x410 (ite $x393 $x410 (ite $x391 $x406 (ite $x388 $x407 (ite $x386 $x407 $x410)))))))
 (let ((?x372 (top ?x280)))
 (let ((?x373 (stack ?x372 ?x306)))
 (let (($x402 (= ?x256 ?x373)))
 (let (($x397 (= c__ left-to-center)))
 (let (($x398 (and $x397 $x394)))
 (ite $x398 $x402 $x427)))))))))))))))))))))))))))))))
(assert
 (let ((?x282 (center s__)))
 (let ((?x374 (center s___)))
 (let (($x412 (= ?x374 ?x282)))
 (let ((?x306 (right s__)))
 (let ((?x381 (top ?x306)))
 (let ((?x383 (stack ?x381 ?x282)))
 (let (($x409 (= ?x374 ?x383)))
 (let (($x384 ((_ is stack ) ?x306)))
 (let (($x385 (= c__ right-to-center)))
 (let (($x386 (and $x385 $x384)))
 (let (($x387 (= c__ right-to-left)))
 (let (($x388 (and $x387 $x384)))
 (let ((?x376 (rest ?x282)))
 (let (($x404 (= ?x374 ?x376)))
 (let (($x389 ((_ is stack ) ?x282)))
 (let (($x390 (= c__ center-to-right)))
 (let (($x391 (and $x390 $x389)))
 (let (($x392 (= c__ center-to-left)))
 (let (($x393 (and $x392 $x389)))
 (let ((?x280 (left s__)))
 (let ((?x372 (top ?x280)))
 (let ((?x375 (stack ?x372 ?x282)))
 (let (($x403 (= ?x374 ?x375)))
 (let (($x394 ((_ is stack ) ?x280)))
 (let (($x395 (= c__ left-to-right)))
 (let (($x396 (and $x395 $x394)))
 (let (($x426 (ite $x396 $x403 (ite $x393 $x404 (ite $x391 $x404 (ite $x388 $x412 (ite $x386 $x409 $x412)))))))
 (let (($x397 (= c__ left-to-center)))
 (let (($x398 (and $x397 $x394)))
 (ite $x398 $x412 $x426)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x164 (left s___)))
 (let ((?x349 (left s____)))
 (let (($x553 (= ?x349 ?x164)))
 (let ((?x256 (right s___)))
 (let ((?x520 (top ?x256)))
 (let ((?x521 (stack ?x520 ?x164)))
 (let (($x547 (= ?x349 ?x521)))
 (let (($x523 ((_ is stack ) ?x256)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x374 (center s___)))
 (let (($x528 ((_ is stack ) ?x374)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let ((?x516 (top ?x374)))
 (let ((?x517 (stack ?x516 ?x164)))
 (let (($x544 (= ?x349 ?x517)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x350 (rest ?x164)))
 (let (($x540 (= ?x349 ?x350)))
 (let (($x533 ((_ is stack ) ?x164)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x540 (ite $x535 $x540 (ite $x532 $x544 (ite $x530 $x553 (ite $x527 $x547 $x553))))))))))))))))))))))))))))))))
(assert
 (let ((?x256 (right s___)))
 (let ((?x371 (right s____)))
 (let (($x549 (= ?x371 ?x256)))
 (let ((?x519 (rest ?x256)))
 (let (($x546 (= ?x371 ?x519)))
 (let (($x523 ((_ is stack ) ?x256)))
 (let (($x524 (= c___ right-to-center)))
 (let (($x525 (and $x524 $x523)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x374 (center s___)))
 (let ((?x516 (top ?x374)))
 (let ((?x518 (stack ?x516 ?x256)))
 (let (($x545 (= ?x371 ?x518)))
 (let (($x528 ((_ is stack ) ?x374)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x164 (left s___)))
 (let (($x533 ((_ is stack ) ?x164)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x566 (ite $x535 $x549 (ite $x532 $x549 (ite $x530 $x545 (ite $x527 $x546 (ite $x525 $x546 $x549)))))))
 (let ((?x511 (top ?x164)))
 (let ((?x512 (stack ?x511 ?x256)))
 (let (($x541 (= ?x371 ?x512)))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x541 $x566)))))))))))))))))))))))))))))))
(assert
 (let ((?x374 (center s___)))
 (let ((?x513 (center s____)))
 (let (($x551 (= ?x513 ?x374)))
 (let ((?x256 (right s___)))
 (let ((?x520 (top ?x256)))
 (let ((?x522 (stack ?x520 ?x374)))
 (let (($x548 (= ?x513 ?x522)))
 (let (($x523 ((_ is stack ) ?x256)))
 (let (($x524 (= c___ right-to-center)))
 (let (($x525 (and $x524 $x523)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x515 (rest ?x374)))
 (let (($x543 (= ?x513 ?x515)))
 (let (($x528 ((_ is stack ) ?x374)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x164 (left s___)))
 (let ((?x511 (top ?x164)))
 (let ((?x514 (stack ?x511 ?x374)))
 (let (($x542 (= ?x513 ?x514)))
 (let (($x533 ((_ is stack ) ?x164)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x565 (ite $x535 $x542 (ite $x532 $x543 (ite $x530 $x543 (ite $x527 $x551 (ite $x525 $x548 $x551)))))))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x551 $x565)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x349 (left s____)))
 (let ((?x430 (left s_____)))
 (let (($x691 (= ?x430 ?x349)))
 (let ((?x371 (right s____)))
 (let ((?x658 (top ?x371)))
 (let ((?x659 (stack ?x658 ?x349)))
 (let (($x685 (= ?x430 ?x659)))
 (let (($x661 ((_ is stack ) ?x371)))
 (let (($x664 (= c____ right-to-left)))
 (let (($x665 (and $x664 $x661)))
 (let ((?x513 (center s____)))
 (let (($x666 ((_ is stack ) ?x513)))
 (let (($x667 (= c____ center-to-right)))
 (let (($x668 (and $x667 $x666)))
 (let ((?x654 (top ?x513)))
 (let ((?x655 (stack ?x654 ?x349)))
 (let (($x682 (= ?x430 ?x655)))
 (let (($x669 (= c____ center-to-left)))
 (let (($x670 (and $x669 $x666)))
 (let ((?x463 (rest ?x349)))
 (let (($x678 (= ?x430 ?x463)))
 (let (($x671 ((_ is stack ) ?x349)))
 (let (($x672 (= c____ left-to-right)))
 (let (($x673 (and $x672 $x671)))
 (let (($x674 (= c____ left-to-center)))
 (let (($x675 (and $x674 $x671)))
 (ite $x675 $x678 (ite $x673 $x678 (ite $x670 $x682 (ite $x668 $x691 (ite $x665 $x685 $x691))))))))))))))))))))))))))))))))
(assert
 (let ((?x371 (right s____)))
 (let ((?x464 (right s_____)))
 (let (($x687 (= ?x464 ?x371)))
 (let ((?x657 (rest ?x371)))
 (let (($x684 (= ?x464 ?x657)))
 (let (($x661 ((_ is stack ) ?x371)))
 (let (($x662 (= c____ right-to-center)))
 (let (($x663 (and $x662 $x661)))
 (let (($x664 (= c____ right-to-left)))
 (let (($x665 (and $x664 $x661)))
 (let ((?x513 (center s____)))
 (let ((?x654 (top ?x513)))
 (let ((?x656 (stack ?x654 ?x371)))
 (let (($x683 (= ?x464 ?x656)))
 (let (($x666 ((_ is stack ) ?x513)))
 (let (($x667 (= c____ center-to-right)))
 (let (($x668 (and $x667 $x666)))
 (let (($x669 (= c____ center-to-left)))
 (let (($x670 (and $x669 $x666)))
 (let ((?x349 (left s____)))
 (let (($x671 ((_ is stack ) ?x349)))
 (let (($x672 (= c____ left-to-right)))
 (let (($x673 (and $x672 $x671)))
 (let (($x704 (ite $x673 $x687 (ite $x670 $x687 (ite $x668 $x683 (ite $x665 $x684 (ite $x663 $x684 $x687)))))))
 (let ((?x510 (top ?x349)))
 (let ((?x650 (stack ?x510 ?x371)))
 (let (($x679 (= ?x464 ?x650)))
 (let (($x674 (= c____ left-to-center)))
 (let (($x675 (and $x674 $x671)))
 (ite $x675 $x679 $x704)))))))))))))))))))))))))))))))
(assert
 (let ((?x513 (center s____)))
 (let ((?x651 (center s_____)))
 (let (($x689 (= ?x651 ?x513)))
 (let ((?x371 (right s____)))
 (let ((?x658 (top ?x371)))
 (let ((?x660 (stack ?x658 ?x513)))
 (let (($x686 (= ?x651 ?x660)))
 (let (($x661 ((_ is stack ) ?x371)))
 (let (($x662 (= c____ right-to-center)))
 (let (($x663 (and $x662 $x661)))
 (let (($x664 (= c____ right-to-left)))
 (let (($x665 (and $x664 $x661)))
 (let ((?x653 (rest ?x513)))
 (let (($x681 (= ?x651 ?x653)))
 (let (($x666 ((_ is stack ) ?x513)))
 (let (($x667 (= c____ center-to-right)))
 (let (($x668 (and $x667 $x666)))
 (let (($x669 (= c____ center-to-left)))
 (let (($x670 (and $x669 $x666)))
 (let ((?x349 (left s____)))
 (let ((?x510 (top ?x349)))
 (let ((?x652 (stack ?x510 ?x513)))
 (let (($x680 (= ?x651 ?x652)))
 (let (($x671 ((_ is stack ) ?x349)))
 (let (($x672 (= c____ left-to-right)))
 (let (($x673 (and $x672 $x671)))
 (let (($x703 (ite $x673 $x680 (ite $x670 $x681 (ite $x668 $x681 (ite $x665 $x689 (ite $x663 $x686 $x689)))))))
 (let (($x674 (= c____ left-to-center)))
 (let (($x675 (and $x674 $x671)))
 (ite $x675 $x689 $x703)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x430 (left s_____)))
 (let ((?x569 (left s______)))
 (let (($x829 (= ?x569 ?x430)))
 (let ((?x464 (right s_____)))
 (let ((?x796 (top ?x464)))
 (let ((?x797 (stack ?x796 ?x430)))
 (let (($x823 (= ?x569 ?x797)))
 (let (($x799 ((_ is stack ) ?x464)))
 (let (($x802 (= c_____ right-to-left)))
 (let (($x803 (and $x802 $x799)))
 (let ((?x651 (center s_____)))
 (let (($x804 ((_ is stack ) ?x651)))
 (let (($x805 (= c_____ center-to-right)))
 (let (($x806 (and $x805 $x804)))
 (let ((?x792 (top ?x651)))
 (let ((?x793 (stack ?x792 ?x430)))
 (let (($x820 (= ?x569 ?x793)))
 (let (($x807 (= c_____ center-to-left)))
 (let (($x808 (and $x807 $x804)))
 (let ((?x602 (rest ?x430)))
 (let (($x816 (= ?x569 ?x602)))
 (let (($x809 ((_ is stack ) ?x430)))
 (let (($x810 (= c_____ left-to-right)))
 (let (($x811 (and $x810 $x809)))
 (let (($x812 (= c_____ left-to-center)))
 (let (($x813 (and $x812 $x809)))
 (ite $x813 $x816 (ite $x811 $x816 (ite $x808 $x820 (ite $x806 $x829 (ite $x803 $x823 $x829))))))))))))))))))))))))))))))))
(assert
 (let ((?x464 (right s_____)))
 (let ((?x603 (right s______)))
 (let (($x825 (= ?x603 ?x464)))
 (let ((?x795 (rest ?x464)))
 (let (($x822 (= ?x603 ?x795)))
 (let (($x799 ((_ is stack ) ?x464)))
 (let (($x800 (= c_____ right-to-center)))
 (let (($x801 (and $x800 $x799)))
 (let (($x802 (= c_____ right-to-left)))
 (let (($x803 (and $x802 $x799)))
 (let ((?x651 (center s_____)))
 (let ((?x792 (top ?x651)))
 (let ((?x794 (stack ?x792 ?x464)))
 (let (($x821 (= ?x603 ?x794)))
 (let (($x804 ((_ is stack ) ?x651)))
 (let (($x805 (= c_____ center-to-right)))
 (let (($x806 (and $x805 $x804)))
 (let (($x807 (= c_____ center-to-left)))
 (let (($x808 (and $x807 $x804)))
 (let ((?x430 (left s_____)))
 (let (($x809 ((_ is stack ) ?x430)))
 (let (($x810 (= c_____ left-to-right)))
 (let (($x811 (and $x810 $x809)))
 (let (($x842 (ite $x811 $x825 (ite $x808 $x825 (ite $x806 $x821 (ite $x803 $x822 (ite $x801 $x822 $x825)))))))
 (let ((?x649 (top ?x430)))
 (let ((?x788 (stack ?x649 ?x464)))
 (let (($x817 (= ?x603 ?x788)))
 (let (($x812 (= c_____ left-to-center)))
 (let (($x813 (and $x812 $x809)))
 (ite $x813 $x817 $x842)))))))))))))))))))))))))))))))
(assert
 (let ((?x651 (center s_____)))
 (let ((?x789 (center s______)))
 (let (($x827 (= ?x789 ?x651)))
 (let ((?x464 (right s_____)))
 (let ((?x796 (top ?x464)))
 (let ((?x798 (stack ?x796 ?x651)))
 (let (($x824 (= ?x789 ?x798)))
 (let (($x799 ((_ is stack ) ?x464)))
 (let (($x800 (= c_____ right-to-center)))
 (let (($x801 (and $x800 $x799)))
 (let (($x802 (= c_____ right-to-left)))
 (let (($x803 (and $x802 $x799)))
 (let ((?x791 (rest ?x651)))
 (let (($x819 (= ?x789 ?x791)))
 (let (($x804 ((_ is stack ) ?x651)))
 (let (($x805 (= c_____ center-to-right)))
 (let (($x806 (and $x805 $x804)))
 (let (($x807 (= c_____ center-to-left)))
 (let (($x808 (and $x807 $x804)))
 (let ((?x430 (left s_____)))
 (let ((?x649 (top ?x430)))
 (let ((?x790 (stack ?x649 ?x651)))
 (let (($x818 (= ?x789 ?x790)))
 (let (($x809 ((_ is stack ) ?x430)))
 (let (($x810 (= c_____ left-to-right)))
 (let (($x811 (and $x810 $x809)))
 (let (($x841 (ite $x811 $x818 (ite $x808 $x819 (ite $x806 $x819 (ite $x803 $x827 (ite $x801 $x824 $x827)))))))
 (let (($x812 (= c_____ left-to-center)))
 (let (($x813 (and $x812 $x809)))
 (ite $x813 $x827 $x841)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x569 (left s______)))
 (let ((?x707 (left s_______)))
 (let (($x967 (= ?x707 ?x569)))
 (let ((?x603 (right s______)))
 (let ((?x934 (top ?x603)))
 (let ((?x935 (stack ?x934 ?x569)))
 (let (($x961 (= ?x707 ?x935)))
 (let (($x937 ((_ is stack ) ?x603)))
 (let (($x940 (= c______ right-to-left)))
 (let (($x941 (and $x940 $x937)))
 (let ((?x789 (center s______)))
 (let (($x942 ((_ is stack ) ?x789)))
 (let (($x943 (= c______ center-to-right)))
 (let (($x944 (and $x943 $x942)))
 (let ((?x930 (top ?x789)))
 (let ((?x931 (stack ?x930 ?x569)))
 (let (($x958 (= ?x707 ?x931)))
 (let (($x945 (= c______ center-to-left)))
 (let (($x946 (and $x945 $x942)))
 (let ((?x740 (rest ?x569)))
 (let (($x954 (= ?x707 ?x740)))
 (let (($x947 ((_ is stack ) ?x569)))
 (let (($x948 (= c______ left-to-right)))
 (let (($x949 (and $x948 $x947)))
 (let (($x950 (= c______ left-to-center)))
 (let (($x951 (and $x950 $x947)))
 (ite $x951 $x954 (ite $x949 $x954 (ite $x946 $x958 (ite $x944 $x967 (ite $x941 $x961 $x967))))))))))))))))))))))))))))))))
(assert
 (let ((?x603 (right s______)))
 (let ((?x741 (right s_______)))
 (let (($x963 (= ?x741 ?x603)))
 (let ((?x933 (rest ?x603)))
 (let (($x960 (= ?x741 ?x933)))
 (let (($x937 ((_ is stack ) ?x603)))
 (let (($x938 (= c______ right-to-center)))
 (let (($x939 (and $x938 $x937)))
 (let (($x940 (= c______ right-to-left)))
 (let (($x941 (and $x940 $x937)))
 (let ((?x789 (center s______)))
 (let ((?x930 (top ?x789)))
 (let ((?x932 (stack ?x930 ?x603)))
 (let (($x959 (= ?x741 ?x932)))
 (let (($x942 ((_ is stack ) ?x789)))
 (let (($x943 (= c______ center-to-right)))
 (let (($x944 (and $x943 $x942)))
 (let (($x945 (= c______ center-to-left)))
 (let (($x946 (and $x945 $x942)))
 (let ((?x569 (left s______)))
 (let (($x947 ((_ is stack ) ?x569)))
 (let (($x948 (= c______ left-to-right)))
 (let (($x949 (and $x948 $x947)))
 (let (($x980 (ite $x949 $x963 (ite $x946 $x963 (ite $x944 $x959 (ite $x941 $x960 (ite $x939 $x960 $x963)))))))
 (let ((?x787 (top ?x569)))
 (let ((?x926 (stack ?x787 ?x603)))
 (let (($x955 (= ?x741 ?x926)))
 (let (($x950 (= c______ left-to-center)))
 (let (($x951 (and $x950 $x947)))
 (ite $x951 $x955 $x980)))))))))))))))))))))))))))))))
(assert
 (let ((?x789 (center s______)))
 (let ((?x927 (center s_______)))
 (let (($x965 (= ?x927 ?x789)))
 (let ((?x603 (right s______)))
 (let ((?x934 (top ?x603)))
 (let ((?x936 (stack ?x934 ?x789)))
 (let (($x962 (= ?x927 ?x936)))
 (let (($x937 ((_ is stack ) ?x603)))
 (let (($x938 (= c______ right-to-center)))
 (let (($x939 (and $x938 $x937)))
 (let (($x940 (= c______ right-to-left)))
 (let (($x941 (and $x940 $x937)))
 (let ((?x929 (rest ?x789)))
 (let (($x957 (= ?x927 ?x929)))
 (let (($x942 ((_ is stack ) ?x789)))
 (let (($x943 (= c______ center-to-right)))
 (let (($x944 (and $x943 $x942)))
 (let (($x945 (= c______ center-to-left)))
 (let (($x946 (and $x945 $x942)))
 (let ((?x569 (left s______)))
 (let ((?x787 (top ?x569)))
 (let ((?x928 (stack ?x787 ?x789)))
 (let (($x956 (= ?x927 ?x928)))
 (let (($x947 ((_ is stack ) ?x569)))
 (let (($x948 (= c______ left-to-right)))
 (let (($x949 (and $x948 $x947)))
 (let (($x979 (ite $x949 $x956 (ite $x946 $x957 (ite $x944 $x957 (ite $x941 $x965 (ite $x939 $x962 $x965)))))))
 (let (($x950 (= c______ left-to-center)))
 (let (($x951 (and $x950 $x947)))
 (ite $x951 $x965 $x979)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x707 (left s_______)))
 (let ((?x845 (left s________)))
 (let (($x1105 (= ?x845 ?x707)))
 (let ((?x741 (right s_______)))
 (let ((?x1072 (top ?x741)))
 (let ((?x1073 (stack ?x1072 ?x707)))
 (let (($x1099 (= ?x845 ?x1073)))
 (let (($x1075 ((_ is stack ) ?x741)))
 (let (($x1078 (= c_______ right-to-left)))
 (let (($x1079 (and $x1078 $x1075)))
 (let ((?x927 (center s_______)))
 (let (($x1080 ((_ is stack ) ?x927)))
 (let (($x1081 (= c_______ center-to-right)))
 (let (($x1082 (and $x1081 $x1080)))
 (let ((?x1068 (top ?x927)))
 (let ((?x1069 (stack ?x1068 ?x707)))
 (let (($x1096 (= ?x845 ?x1069)))
 (let (($x1083 (= c_______ center-to-left)))
 (let (($x1084 (and $x1083 $x1080)))
 (let ((?x878 (rest ?x707)))
 (let (($x1092 (= ?x845 ?x878)))
 (let (($x1085 ((_ is stack ) ?x707)))
 (let (($x1086 (= c_______ left-to-right)))
 (let (($x1087 (and $x1086 $x1085)))
 (let (($x1088 (= c_______ left-to-center)))
 (let (($x1089 (and $x1088 $x1085)))
 (ite $x1089 $x1092 (ite $x1087 $x1092 (ite $x1084 $x1096 (ite $x1082 $x1105 (ite $x1079 $x1099 $x1105))))))))))))))))))))))))))))))))
(assert
 (let ((?x741 (right s_______)))
 (let ((?x879 (right s________)))
 (let (($x1101 (= ?x879 ?x741)))
 (let ((?x1071 (rest ?x741)))
 (let (($x1098 (= ?x879 ?x1071)))
 (let (($x1075 ((_ is stack ) ?x741)))
 (let (($x1076 (= c_______ right-to-center)))
 (let (($x1077 (and $x1076 $x1075)))
 (let (($x1078 (= c_______ right-to-left)))
 (let (($x1079 (and $x1078 $x1075)))
 (let ((?x927 (center s_______)))
 (let ((?x1068 (top ?x927)))
 (let ((?x1070 (stack ?x1068 ?x741)))
 (let (($x1097 (= ?x879 ?x1070)))
 (let (($x1080 ((_ is stack ) ?x927)))
 (let (($x1081 (= c_______ center-to-right)))
 (let (($x1082 (and $x1081 $x1080)))
 (let (($x1083 (= c_______ center-to-left)))
 (let (($x1084 (and $x1083 $x1080)))
 (let ((?x707 (left s_______)))
 (let (($x1085 ((_ is stack ) ?x707)))
 (let (($x1086 (= c_______ left-to-right)))
 (let (($x1087 (and $x1086 $x1085)))
 (let (($x1118 (ite $x1087 $x1101 (ite $x1084 $x1101 (ite $x1082 $x1097 (ite $x1079 $x1098 (ite $x1077 $x1098 $x1101)))))))
 (let ((?x925 (top ?x707)))
 (let ((?x1064 (stack ?x925 ?x741)))
 (let (($x1093 (= ?x879 ?x1064)))
 (let (($x1088 (= c_______ left-to-center)))
 (let (($x1089 (and $x1088 $x1085)))
 (ite $x1089 $x1093 $x1118)))))))))))))))))))))))))))))))
(assert
 (let ((?x927 (center s_______)))
 (let ((?x1065 (center s________)))
 (let (($x1103 (= ?x1065 ?x927)))
 (let ((?x741 (right s_______)))
 (let ((?x1072 (top ?x741)))
 (let ((?x1074 (stack ?x1072 ?x927)))
 (let (($x1100 (= ?x1065 ?x1074)))
 (let (($x1075 ((_ is stack ) ?x741)))
 (let (($x1076 (= c_______ right-to-center)))
 (let (($x1077 (and $x1076 $x1075)))
 (let (($x1078 (= c_______ right-to-left)))
 (let (($x1079 (and $x1078 $x1075)))
 (let ((?x1067 (rest ?x927)))
 (let (($x1095 (= ?x1065 ?x1067)))
 (let (($x1080 ((_ is stack ) ?x927)))
 (let (($x1081 (= c_______ center-to-right)))
 (let (($x1082 (and $x1081 $x1080)))
 (let (($x1083 (= c_______ center-to-left)))
 (let (($x1084 (and $x1083 $x1080)))
 (let ((?x707 (left s_______)))
 (let ((?x925 (top ?x707)))
 (let ((?x1066 (stack ?x925 ?x927)))
 (let (($x1094 (= ?x1065 ?x1066)))
 (let (($x1085 ((_ is stack ) ?x707)))
 (let (($x1086 (= c_______ left-to-right)))
 (let (($x1087 (and $x1086 $x1085)))
 (let (($x1117 (ite $x1087 $x1094 (ite $x1084 $x1095 (ite $x1082 $x1095 (ite $x1079 $x1103 (ite $x1077 $x1100 $x1103)))))))
 (let (($x1088 (= c_______ left-to-center)))
 (let (($x1089 (and $x1088 $x1085)))
 (ite $x1089 $x1103 $x1117)))))))))))))))))))))))))))))))
(assert
 (let ((?x879 (right s________)))
 (let (($x1121 (= ?x879 empty)))
 (let ((?x68 (stack L (stack S (stack R (stack C (stack H empty)))))))
 (let ((?x1065 (center s________)))
 (let (($x1152 (= ?x1065 ?x68)))
 (let ((?x55 (stack D (stack J (stack Q (stack O (stack P (stack M empty))))))))
 (let ((?x61 (stack E (stack F (stack B (stack A (stack G (stack N ?x55))))))))
 (let ((?x63 (stack I (stack K ?x61))))
 (let ((?x845 (left s________)))
 (let (($x1153 (= ?x845 ?x63)))
 (let (($x1155 (not (and $x1153 $x1152 $x1121))))
 (not $x1155)))))))))))))
(check-sat)
(exit)
