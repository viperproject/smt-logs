(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x27 (stack N empty)))
 (let ((?x26 (stack I ?x27)))
 (let ((?x28 (stack A ?x26)))
 (let ((?x29 (stack K ?x28)))
 (let ((?x30 (stack C ?x29)))
 (let ((?x31 (stack D ?x30)))
 (let ((?x32 (stack B ?x31)))
 (let ((?x33 (stack F ?x32)))
 (let ((?x34 (stack M ?x33)))
 (let ((?x100 (left s_tmp_)))
 (= ?x100 ?x34))))))))))))
(assert
 (let ((?x35 (stack E empty)))
 (let ((?x36 (stack L ?x35)))
 (let ((?x37 (stack G ?x36)))
 (let ((?x38 (stack H ?x37)))
 (let ((?x103 (center s_tmp__)))
 (= ?x103 ?x38)))))))
(assert
 (let ((?x39 (stack J empty)))
 (let ((?x106 (right s_tmp___)))
 (= ?x106 ?x39))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x133 (left s_tmp__)))
 (= (left s_tmp___) ?x133)))
(assert
 (let ((?x103 (center s_tmp__)))
 (= (center s_tmp___) ?x103)))
(assert
 (let ((?x137 (center s_tmp_)))
 (= ?x137 (center s_tmp))))
(assert
 (let ((?x140 (right s_tmp_)))
 (= ?x140 (right s_tmp))))
(assert
 (let ((?x100 (left s_tmp_)))
 (let ((?x133 (left s_tmp__)))
 (= ?x133 ?x100))))
(assert
 (let ((?x140 (right s_tmp_)))
 (let ((?x144 (right s_tmp__)))
 (= ?x144 ?x140))))
(assert
 (= c__ c!1))
(assert
 (let ((?x77 (left s_)))
 (let ((?x236 (left s__)))
 (let (($x275 (= ?x236 ?x77)))
 (let ((?x80 (right s_)))
 (let (($x245 ((_ is stack ) ?x80)))
 (let (($x248 (= c_ right-to-left)))
 (let (($x249 (and $x248 $x245)))
 (let ((?x82 (center s_)))
 (let (($x250 ((_ is stack ) ?x82)))
 (let (($x251 (= c_ center-to-right)))
 (let (($x252 (and $x251 $x250)))
 (let (($x253 (= c_ center-to-left)))
 (let (($x254 (and $x253 $x250)))
 (let (($x284 (ite $x254 (= ?x236 (stack (top ?x82) ?x77)) (ite $x252 $x275 (ite $x249 (= ?x236 (stack (top ?x80) ?x77)) $x275)))))
 (let ((?x231 (rest ?x77)))
 (let (($x262 (= ?x236 ?x231)))
 (let (($x255 ((_ is stack ) ?x77)))
 (let (($x256 (= c_ left-to-right)))
 (let (($x257 (and $x256 $x255)))
 (let (($x258 (= c_ left-to-center)))
 (let (($x259 (and $x258 $x255)))
 (ite $x259 $x262 (ite $x257 $x262 $x284))))))))))))))))))))))))
(assert
 (let ((?x80 (right s_)))
 (let ((?x232 (right s__)))
 (let (($x271 (= ?x232 ?x80)))
 (let ((?x241 (rest ?x80)))
 (let (($x268 (= ?x232 ?x241)))
 (let (($x245 ((_ is stack ) ?x80)))
 (let (($x246 (= c_ right-to-center)))
 (let (($x247 (and $x246 $x245)))
 (let (($x248 (= c_ right-to-left)))
 (let (($x249 (and $x248 $x245)))
 (let ((?x82 (center s_)))
 (let (($x250 ((_ is stack ) ?x82)))
 (let (($x251 (= c_ center-to-right)))
 (let (($x252 (and $x251 $x250)))
 (let (($x281 (ite $x252 (= ?x232 (stack (top ?x82) ?x80)) (ite $x249 $x268 (ite $x247 $x268 $x271)))))
 (let (($x253 (= c_ center-to-left)))
 (let (($x254 (and $x253 $x250)))
 (let ((?x77 (left s_)))
 (let (($x255 ((_ is stack ) ?x77)))
 (let (($x256 (= c_ left-to-right)))
 (let (($x257 (and $x256 $x255)))
 (let (($x258 (= c_ left-to-center)))
 (let (($x259 (and $x258 $x255)))
 (ite $x259 (= ?x232 (stack (top ?x77) ?x80)) (ite $x257 $x271 (ite $x254 $x271 $x281)))))))))))))))))))))))))))
(assert
 (let ((?x82 (center s_)))
 (let ((?x238 (center s__)))
 (let (($x273 (= ?x238 ?x82)))
 (let ((?x80 (right s_)))
 (let (($x245 ((_ is stack ) ?x80)))
 (let (($x246 (= c_ right-to-center)))
 (let (($x247 (and $x246 $x245)))
 (let (($x248 (= c_ right-to-left)))
 (let (($x249 (and $x248 $x245)))
 (let ((?x228 (rest ?x82)))
 (let (($x265 (= ?x238 ?x228)))
 (let (($x250 ((_ is stack ) ?x82)))
 (let (($x251 (= c_ center-to-right)))
 (let (($x252 (and $x251 $x250)))
 (let (($x280 (ite $x252 $x265 (ite $x249 $x273 (ite $x247 (= ?x238 (stack (top ?x80) ?x82)) $x273)))))
 (let (($x253 (= c_ center-to-left)))
 (let (($x254 (and $x253 $x250)))
 (let ((?x77 (left s_)))
 (let (($x255 ((_ is stack ) ?x77)))
 (let (($x256 (= c_ left-to-right)))
 (let (($x257 (and $x256 $x255)))
 (let (($x258 (= c_ left-to-center)))
 (let (($x259 (and $x258 $x255)))
 (ite $x259 $x273 (ite $x257 (= ?x238 (stack (top ?x77) ?x82)) (ite $x254 $x265 $x280)))))))))))))))))))))))))))
(assert
 (let ((?x53 (stack K empty)))
 (let ((?x232 (right s__)))
 (let (($x291 (= ?x232 ?x53)))
 (let ((?x45 (stack F (stack M (stack N (stack I (stack G (stack L empty))))))))
 (let ((?x51 (stack B (stack E (stack D (stack H (stack C (stack J ?x45))))))))
 (let ((?x52 (stack A ?x51)))
 (let ((?x238 (center s__)))
 (let (($x333 (= ?x238 ?x52)))
 (let ((?x236 (left s__)))
 (let (($x334 (= ?x236 empty)))
 (let (($x336 (not (and $x334 $x333 $x291))))
 (not $x336)))))))))))))
(check-sat)
(exit)
