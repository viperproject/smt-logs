(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x29 (stack N empty)))
 (let ((?x30 (stack B ?x29)))
 (let ((?x31 (stack C ?x30)))
 (let ((?x32 (stack L ?x31)))
 (let ((?x33 (stack Q ?x32)))
 (let ((?x109 (left s_tmp_)))
 (= ?x109 ?x33))))))))
(assert
 (let ((?x34 (stack H empty)))
 (let ((?x35 (stack O ?x34)))
 (let ((?x36 (stack K ?x35)))
 (let ((?x37 (stack I ?x36)))
 (let ((?x38 (stack F ?x37)))
 (let ((?x39 (stack J ?x38)))
 (let ((?x40 (stack M ?x39)))
 (let ((?x41 (stack E ?x40)))
 (let ((?x42 (stack P ?x41)))
 (let ((?x112 (center s_tmp__)))
 (= ?x112 ?x42))))))))))))
(assert
 (let ((?x43 (stack A empty)))
 (let ((?x44 (stack D ?x43)))
 (let ((?x45 (stack G ?x44)))
 (let ((?x115 (right s_tmp___)))
 (= ?x115 ?x45))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x142 (left s_tmp__)))
 (= (left s_tmp___) ?x142)))
(assert
 (let ((?x112 (center s_tmp__)))
 (= (center s_tmp___) ?x112)))
(assert
 (let ((?x146 (center s_tmp_)))
 (= ?x146 (center s_tmp))))
(assert
 (let ((?x149 (right s_tmp_)))
 (= ?x149 (right s_tmp))))
(assert
 (let ((?x109 (left s_tmp_)))
 (let ((?x142 (left s_tmp__)))
 (= ?x142 ?x109))))
(assert
 (let ((?x149 (right s_tmp_)))
 (let ((?x153 (right s_tmp__)))
 (= ?x153 ?x149))))
(assert
 (= c__ c!1))
(assert
 (let ((?x86 (left s_)))
 (let ((?x269 (left s__)))
 (let (($x293 (= ?x269 ?x86)))
 (let ((?x89 (right s_)))
 (let (($x257 ((_ is stack ) ?x89)))
 (let (($x272 (= c_ right-to-left)))
 (let (($x246 (and $x272 $x257)))
 (let ((?x91 (center s_)))
 (let (($x247 ((_ is stack ) ?x91)))
 (let (($x248 (= c_ center-to-right)))
 (let (($x264 (and $x248 $x247)))
 (let (($x265 (= c_ center-to-left)))
 (let (($x266 (and $x265 $x247)))
 (let (($x302 (ite $x266 (= ?x269 (stack (top ?x91) ?x86)) (ite $x264 $x293 (ite $x246 (= ?x269 (stack (top ?x89) ?x86)) $x293)))))
 (let ((?x261 (rest ?x86)))
 (let (($x280 (= ?x269 ?x261)))
 (let (($x273 ((_ is stack ) ?x86)))
 (let (($x274 (= c_ left-to-right)))
 (let (($x275 (and $x274 $x273)))
 (let (($x276 (= c_ left-to-center)))
 (let (($x277 (and $x276 $x273)))
 (ite $x277 $x280 (ite $x275 $x280 $x302))))))))))))))))))))))))
(assert
 (let ((?x89 (right s_)))
 (let ((?x262 (right s__)))
 (let (($x289 (= ?x262 ?x89)))
 (let ((?x253 (rest ?x89)))
 (let (($x286 (= ?x262 ?x253)))
 (let (($x257 ((_ is stack ) ?x89)))
 (let (($x270 (= c_ right-to-center)))
 (let (($x271 (and $x270 $x257)))
 (let (($x272 (= c_ right-to-left)))
 (let (($x246 (and $x272 $x257)))
 (let ((?x91 (center s_)))
 (let (($x247 ((_ is stack ) ?x91)))
 (let (($x248 (= c_ center-to-right)))
 (let (($x264 (and $x248 $x247)))
 (let (($x299 (ite $x264 (= ?x262 (stack (top ?x91) ?x89)) (ite $x246 $x286 (ite $x271 $x286 $x289)))))
 (let (($x265 (= c_ center-to-left)))
 (let (($x266 (and $x265 $x247)))
 (let ((?x86 (left s_)))
 (let (($x273 ((_ is stack ) ?x86)))
 (let (($x274 (= c_ left-to-right)))
 (let (($x275 (and $x274 $x273)))
 (let (($x276 (= c_ left-to-center)))
 (let (($x277 (and $x276 $x273)))
 (ite $x277 (= ?x262 (stack (top ?x86) ?x89)) (ite $x275 $x289 (ite $x266 $x289 $x299)))))))))))))))))))))))))))
(assert
 (let ((?x91 (center s_)))
 (let ((?x250 (center s__)))
 (let (($x291 (= ?x250 ?x91)))
 (let ((?x89 (right s_)))
 (let (($x257 ((_ is stack ) ?x89)))
 (let (($x270 (= c_ right-to-center)))
 (let (($x271 (and $x270 $x257)))
 (let (($x272 (= c_ right-to-left)))
 (let (($x246 (and $x272 $x257)))
 (let ((?x258 (rest ?x91)))
 (let (($x283 (= ?x250 ?x258)))
 (let (($x247 ((_ is stack ) ?x91)))
 (let (($x248 (= c_ center-to-right)))
 (let (($x264 (and $x248 $x247)))
 (let (($x298 (ite $x264 $x283 (ite $x246 $x291 (ite $x271 (= ?x250 (stack (top ?x89) ?x91)) $x291)))))
 (let (($x265 (= c_ center-to-left)))
 (let (($x266 (and $x265 $x247)))
 (let ((?x86 (left s_)))
 (let (($x273 ((_ is stack ) ?x86)))
 (let (($x274 (= c_ left-to-right)))
 (let (($x275 (and $x274 $x273)))
 (let (($x276 (= c_ left-to-center)))
 (let (($x277 (and $x276 $x273)))
 (ite $x277 $x291 (ite $x275 (= ?x250 (stack (top ?x86) ?x91)) (ite $x266 $x283 $x298)))))))))))))))))))))))))))
(assert
 (let ((?x62 (stack J (stack E (stack C empty)))))
 (let ((?x262 (right s__)))
 (let (($x309 (= ?x262 ?x62)))
 (let ((?x59 (stack K empty)))
 (let ((?x250 (center s__)))
 (let (($x351 (= ?x250 ?x59)))
 (let ((?x51 (stack O (stack I (stack G (stack A (stack P (stack L empty))))))))
 (let ((?x57 (stack N (stack H (stack M (stack Q (stack D (stack F ?x51))))))))
 (let ((?x58 (stack B ?x57)))
 (let ((?x269 (left s__)))
 (let (($x352 (= ?x269 ?x58)))
 (let (($x354 (not (and $x352 $x351 $x309))))
 (not $x354))))))))))))))
(check-sat)
(exit)
