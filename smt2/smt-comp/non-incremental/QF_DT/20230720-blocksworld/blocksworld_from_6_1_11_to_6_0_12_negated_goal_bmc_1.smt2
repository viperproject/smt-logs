(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x31 (stack R empty)))
 (let ((?x30 (stack D ?x31)))
 (let ((?x32 (stack H ?x30)))
 (let ((?x33 (stack N ?x32)))
 (let ((?x34 (stack M ?x33)))
 (let ((?x35 (stack Q ?x34)))
 (let ((?x110 (left s_tmp_)))
 (= ?x110 ?x35)))))))))
(assert
 (let ((?x36 (stack F empty)))
 (let ((?x113 (center s_tmp__)))
 (= ?x113 ?x36))))
(assert
 (let ((?x37 (stack A empty)))
 (let ((?x38 (stack B ?x37)))
 (let ((?x39 (stack C ?x38)))
 (let ((?x40 (stack E ?x39)))
 (let ((?x41 (stack G ?x40)))
 (let ((?x42 (stack I ?x41)))
 (let ((?x43 (stack J ?x42)))
 (let ((?x44 (stack K ?x43)))
 (let ((?x45 (stack L ?x44)))
 (let ((?x46 (stack O ?x45)))
 (let ((?x47 (stack P ?x46)))
 (let ((?x116 (right s_tmp___)))
 (= ?x116 ?x47))))))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x143 (left s_tmp__)))
 (= (left s_tmp___) ?x143)))
(assert
 (let ((?x113 (center s_tmp__)))
 (= (center s_tmp___) ?x113)))
(assert
 (let ((?x147 (center s_tmp_)))
 (= ?x147 (center s_tmp))))
(assert
 (let ((?x150 (right s_tmp_)))
 (= ?x150 (right s_tmp))))
(assert
 (let ((?x110 (left s_tmp_)))
 (let ((?x143 (left s_tmp__)))
 (= ?x143 ?x110))))
(assert
 (let ((?x150 (right s_tmp_)))
 (let ((?x154 (right s_tmp__)))
 (= ?x154 ?x150))))
(assert
 (= c__ c!1))
(assert
 (let ((?x87 (left s_)))
 (let ((?x282 (left s__)))
 (let (($x264 (= ?x282 ?x87)))
 (let ((?x90 (right s_)))
 (let (($x288 ((_ is stack ) ?x90)))
 (let (($x300 (= c_ right-to-left)))
 (let (($x253 (and $x300 $x288)))
 (let ((?x92 (center s_)))
 (let (($x254 ((_ is stack ) ?x92)))
 (let (($x255 (= c_ center-to-right)))
 (let (($x256 (and $x255 $x254)))
 (let (($x257 (= c_ center-to-left)))
 (let (($x258 (and $x257 $x254)))
 (let (($x306 (ite $x258 (= ?x282 (stack (top ?x92) ?x87)) (ite $x256 $x264 (ite $x253 (= ?x282 (stack (top ?x90) ?x87)) $x264)))))
 (let ((?x250 (rest ?x87)))
 (let (($x284 (= ?x282 ?x250)))
 (let (($x277 ((_ is stack ) ?x87)))
 (let (($x278 (= c_ left-to-right)))
 (let (($x279 (and $x278 $x277)))
 (let (($x271 (= c_ left-to-center)))
 (let (($x272 (and $x271 $x277)))
 (ite $x272 $x284 (ite $x279 $x284 $x306))))))))))))))))))))))))
(assert
 (let ((?x90 (right s_)))
 (let ((?x251 (right s__)))
 (let (($x290 (= ?x251 ?x90)))
 (let ((?x260 (rest ?x90)))
 (let (($x296 (= ?x251 ?x260)))
 (let (($x288 ((_ is stack ) ?x90)))
 (let (($x298 (= c_ right-to-center)))
 (let (($x299 (and $x298 $x288)))
 (let (($x300 (= c_ right-to-left)))
 (let (($x253 (and $x300 $x288)))
 (let ((?x92 (center s_)))
 (let (($x254 ((_ is stack ) ?x92)))
 (let (($x255 (= c_ center-to-right)))
 (let (($x256 (and $x255 $x254)))
 (let (($x303 (ite $x256 (= ?x251 (stack (top ?x92) ?x90)) (ite $x253 $x296 (ite $x299 $x296 $x290)))))
 (let (($x257 (= c_ center-to-left)))
 (let (($x258 (and $x257 $x254)))
 (let ((?x87 (left s_)))
 (let (($x277 ((_ is stack ) ?x87)))
 (let (($x278 (= c_ left-to-right)))
 (let (($x279 (and $x278 $x277)))
 (let (($x271 (= c_ left-to-center)))
 (let (($x272 (and $x271 $x277)))
 (ite $x272 (= ?x251 (stack (top ?x87) ?x90)) (ite $x279 $x290 (ite $x258 $x290 $x303)))))))))))))))))))))))))))
(assert
 (let ((?x92 (center s_)))
 (let ((?x293 (center s__)))
 (let (($x262 (= ?x293 ?x92)))
 (let ((?x90 (right s_)))
 (let (($x288 ((_ is stack ) ?x90)))
 (let (($x298 (= c_ right-to-center)))
 (let (($x299 (and $x298 $x288)))
 (let (($x300 (= c_ right-to-left)))
 (let (($x253 (and $x300 $x288)))
 (let ((?x274 (rest ?x92)))
 (let (($x269 (= ?x293 ?x274)))
 (let (($x254 ((_ is stack ) ?x92)))
 (let (($x255 (= c_ center-to-right)))
 (let (($x256 (and $x255 $x254)))
 (let (($x302 (ite $x256 $x269 (ite $x253 $x262 (ite $x299 (= ?x293 (stack (top ?x90) ?x92)) $x262)))))
 (let (($x257 (= c_ center-to-left)))
 (let (($x258 (and $x257 $x254)))
 (let ((?x87 (left s_)))
 (let (($x277 ((_ is stack ) ?x87)))
 (let (($x278 (= c_ left-to-right)))
 (let (($x279 (and $x278 $x277)))
 (let (($x271 (= c_ left-to-center)))
 (let (($x272 (and $x271 $x277)))
 (ite $x272 $x262 (ite $x279 (= ?x293 (stack (top ?x87) ?x92)) (ite $x258 $x269 $x302)))))))))))))))))))))))))))
(assert
 (let ((?x57 (stack I (stack H (stack G (stack E (stack B (stack A empty))))))))
 (let ((?x63 (stack R (stack Q (stack P (stack N (stack L (stack J ?x57))))))))
 (let ((?x251 (right s__)))
 (let (($x313 (= ?x251 ?x63)))
 (let ((?x293 (center s__)))
 (let (($x345 (= ?x293 empty)))
 (let ((?x53 (stack M (stack D (stack F (stack C (stack K (stack O empty))))))))
 (let ((?x282 (left s__)))
 (let (($x355 (= ?x282 ?x53)))
 (let (($x357 (not (and $x355 $x345 $x313))))
 (not $x357))))))))))))
(check-sat)
(exit)
