(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x25 (stack B empty)))
 (let ((?x96 (left s_tmp_)))
 (= ?x96 ?x25))))
(assert
 (let ((?x26 (stack G empty)))
 (let ((?x27 (stack M ?x26)))
 (let ((?x99 (center s_tmp__)))
 (= ?x99 ?x27)))))
(assert
 (let ((?x28 (stack A empty)))
 (let ((?x29 (stack C ?x28)))
 (let ((?x30 (stack D ?x29)))
 (let ((?x31 (stack E ?x30)))
 (let ((?x32 (stack F ?x31)))
 (let ((?x33 (stack H ?x32)))
 (let ((?x34 (stack I ?x33)))
 (let ((?x35 (stack J ?x34)))
 (let ((?x36 (stack K ?x35)))
 (let ((?x37 (stack L ?x36)))
 (let ((?x102 (right s_tmp___)))
 (= ?x102 ?x37)))))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x129 (left s_tmp__)))
 (= (left s_tmp___) ?x129)))
(assert
 (let ((?x99 (center s_tmp__)))
 (= (center s_tmp___) ?x99)))
(assert
 (let ((?x133 (center s_tmp_)))
 (= ?x133 (center s_tmp))))
(assert
 (let ((?x136 (right s_tmp_)))
 (= ?x136 (right s_tmp))))
(assert
 (let ((?x96 (left s_tmp_)))
 (let ((?x129 (left s_tmp__)))
 (= ?x129 ?x96))))
(assert
 (let ((?x136 (right s_tmp_)))
 (let ((?x140 (right s_tmp__)))
 (= ?x140 ?x136))))
(assert
 (= c__ c!1))
(assert
 (let ((?x73 (left s_)))
 (let ((?x223 (left s__)))
 (let (($x268 (= ?x223 ?x73)))
 (let ((?x76 (right s_)))
 (let (($x238 ((_ is stack ) ?x76)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x242 (and $x241 $x238)))
 (let ((?x78 (center s_)))
 (let (($x243 ((_ is stack ) ?x78)))
 (let (($x244 (= c_ center-to-right)))
 (let (($x245 (and $x244 $x243)))
 (let (($x246 (= c_ center-to-left)))
 (let (($x247 (and $x246 $x243)))
 (let (($x277 (ite $x247 (= ?x223 (stack (top ?x78) ?x73)) (ite $x245 $x268 (ite $x242 (= ?x223 (stack (top ?x76) ?x73)) $x268)))))
 (let (($x255 (= ?x223 (rest ?x73))))
 (let (($x248 ((_ is stack ) ?x73)))
 (let (($x249 (= c_ left-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x251 (= c_ left-to-center)))
 (let (($x252 (and $x251 $x248)))
 (ite $x252 $x255 (ite $x250 $x255 $x277)))))))))))))))))))))))
(assert
 (let ((?x76 (right s_)))
 (let ((?x225 (right s__)))
 (let (($x264 (= ?x225 ?x76)))
 (let (($x261 (= ?x225 (rest ?x76))))
 (let (($x238 ((_ is stack ) ?x76)))
 (let (($x239 (= c_ right-to-center)))
 (let (($x240 (and $x239 $x238)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x242 (and $x241 $x238)))
 (let ((?x78 (center s_)))
 (let (($x243 ((_ is stack ) ?x78)))
 (let (($x244 (= c_ center-to-right)))
 (let (($x245 (and $x244 $x243)))
 (let (($x274 (ite $x245 (= ?x225 (stack (top ?x78) ?x76)) (ite $x242 $x261 (ite $x240 $x261 $x264)))))
 (let (($x246 (= c_ center-to-left)))
 (let (($x247 (and $x246 $x243)))
 (let ((?x73 (left s_)))
 (let (($x248 ((_ is stack ) ?x73)))
 (let (($x249 (= c_ left-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x251 (= c_ left-to-center)))
 (let (($x252 (and $x251 $x248)))
 (ite $x252 (= ?x225 (stack (top ?x73) ?x76)) (ite $x250 $x264 (ite $x247 $x264 $x274))))))))))))))))))))))))))
(assert
 (let ((?x78 (center s_)))
 (let ((?x228 (center s__)))
 (let (($x266 (= ?x228 ?x78)))
 (let ((?x76 (right s_)))
 (let (($x238 ((_ is stack ) ?x76)))
 (let (($x239 (= c_ right-to-center)))
 (let (($x240 (and $x239 $x238)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x242 (and $x241 $x238)))
 (let (($x258 (= ?x228 (rest ?x78))))
 (let (($x243 ((_ is stack ) ?x78)))
 (let (($x244 (= c_ center-to-right)))
 (let (($x245 (and $x244 $x243)))
 (let (($x273 (ite $x245 $x258 (ite $x242 $x266 (ite $x240 (= ?x228 (stack (top ?x76) ?x78)) $x266)))))
 (let (($x246 (= c_ center-to-left)))
 (let (($x247 (and $x246 $x243)))
 (let ((?x73 (left s_)))
 (let (($x248 ((_ is stack ) ?x73)))
 (let (($x249 (= c_ left-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x251 (= c_ left-to-center)))
 (let (($x252 (and $x251 $x248)))
 (ite $x252 $x266 (ite $x250 (= ?x228 (stack (top ?x73) ?x78)) (ite $x247 $x258 $x273))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x223 (left s__)))
 (let ((?x143 (left s___)))
 (let (($x397 (= ?x143 ?x223)))
 (let ((?x225 (right s__)))
 (let ((?x364 (top ?x225)))
 (let ((?x365 (stack ?x364 ?x223)))
 (let (($x391 (= ?x143 ?x365)))
 (let (($x367 ((_ is stack ) ?x225)))
 (let (($x370 (= c__ right-to-left)))
 (let (($x371 (and $x370 $x367)))
 (let ((?x228 (center s__)))
 (let (($x372 ((_ is stack ) ?x228)))
 (let (($x373 (= c__ center-to-right)))
 (let (($x374 (and $x373 $x372)))
 (let ((?x360 (top ?x228)))
 (let ((?x361 (stack ?x360 ?x223)))
 (let (($x388 (= ?x143 ?x361)))
 (let (($x375 (= c__ center-to-left)))
 (let (($x376 (and $x375 $x372)))
 (let ((?x145 (rest ?x223)))
 (let (($x384 (= ?x143 ?x145)))
 (let (($x377 ((_ is stack ) ?x223)))
 (let (($x378 (= c__ left-to-right)))
 (let (($x379 (and $x378 $x377)))
 (let (($x380 (= c__ left-to-center)))
 (let (($x381 (and $x380 $x377)))
 (ite $x381 $x384 (ite $x379 $x384 (ite $x376 $x388 (ite $x374 $x397 (ite $x371 $x391 $x397))))))))))))))))))))))))))))))))
(assert
 (let ((?x225 (right s__)))
 (let ((?x146 (right s___)))
 (let (($x393 (= ?x146 ?x225)))
 (let ((?x363 (rest ?x225)))
 (let (($x390 (= ?x146 ?x363)))
 (let (($x367 ((_ is stack ) ?x225)))
 (let (($x368 (= c__ right-to-center)))
 (let (($x369 (and $x368 $x367)))
 (let (($x370 (= c__ right-to-left)))
 (let (($x371 (and $x370 $x367)))
 (let ((?x228 (center s__)))
 (let ((?x360 (top ?x228)))
 (let ((?x362 (stack ?x360 ?x225)))
 (let (($x389 (= ?x146 ?x362)))
 (let (($x372 ((_ is stack ) ?x228)))
 (let (($x373 (= c__ center-to-right)))
 (let (($x374 (and $x373 $x372)))
 (let (($x375 (= c__ center-to-left)))
 (let (($x376 (and $x375 $x372)))
 (let ((?x223 (left s__)))
 (let (($x377 ((_ is stack ) ?x223)))
 (let (($x378 (= c__ left-to-right)))
 (let (($x379 (and $x378 $x377)))
 (let (($x410 (ite $x379 $x393 (ite $x376 $x393 (ite $x374 $x389 (ite $x371 $x390 (ite $x369 $x390 $x393)))))))
 (let ((?x220 (top ?x223)))
 (let ((?x356 (stack ?x220 ?x225)))
 (let (($x385 (= ?x146 ?x356)))
 (let (($x380 (= c__ left-to-center)))
 (let (($x381 (and $x380 $x377)))
 (ite $x381 $x385 $x410)))))))))))))))))))))))))))))))
(assert
 (let ((?x228 (center s__)))
 (let ((?x357 (center s___)))
 (let (($x395 (= ?x357 ?x228)))
 (let ((?x225 (right s__)))
 (let ((?x364 (top ?x225)))
 (let ((?x366 (stack ?x364 ?x228)))
 (let (($x392 (= ?x357 ?x366)))
 (let (($x367 ((_ is stack ) ?x225)))
 (let (($x368 (= c__ right-to-center)))
 (let (($x369 (and $x368 $x367)))
 (let (($x370 (= c__ right-to-left)))
 (let (($x371 (and $x370 $x367)))
 (let ((?x359 (rest ?x228)))
 (let (($x387 (= ?x357 ?x359)))
 (let (($x372 ((_ is stack ) ?x228)))
 (let (($x373 (= c__ center-to-right)))
 (let (($x374 (and $x373 $x372)))
 (let (($x375 (= c__ center-to-left)))
 (let (($x376 (and $x375 $x372)))
 (let ((?x223 (left s__)))
 (let ((?x220 (top ?x223)))
 (let ((?x358 (stack ?x220 ?x228)))
 (let (($x386 (= ?x357 ?x358)))
 (let (($x377 ((_ is stack ) ?x223)))
 (let (($x378 (= c__ left-to-right)))
 (let (($x379 (and $x378 $x377)))
 (let (($x409 (ite $x379 $x386 (ite $x376 $x387 (ite $x374 $x387 (ite $x371 $x395 (ite $x369 $x392 $x395)))))))
 (let (($x380 (= c__ left-to-center)))
 (let (($x381 (and $x380 $x377)))
 (ite $x381 $x395 $x409)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x143 (left s___)))
 (let ((?x284 (left s____)))
 (let (($x535 (= ?x284 ?x143)))
 (let ((?x146 (right s___)))
 (let ((?x502 (top ?x146)))
 (let ((?x503 (stack ?x502 ?x143)))
 (let (($x529 (= ?x284 ?x503)))
 (let (($x505 ((_ is stack ) ?x146)))
 (let (($x508 (= c___ right-to-left)))
 (let (($x509 (and $x508 $x505)))
 (let ((?x357 (center s___)))
 (let (($x510 ((_ is stack ) ?x357)))
 (let (($x511 (= c___ center-to-right)))
 (let (($x512 (and $x511 $x510)))
 (let ((?x498 (top ?x357)))
 (let ((?x499 (stack ?x498 ?x143)))
 (let (($x526 (= ?x284 ?x499)))
 (let (($x513 (= c___ center-to-left)))
 (let (($x514 (and $x513 $x510)))
 (let ((?x328 (rest ?x143)))
 (let (($x522 (= ?x284 ?x328)))
 (let (($x515 ((_ is stack ) ?x143)))
 (let (($x516 (= c___ left-to-right)))
 (let (($x517 (and $x516 $x515)))
 (let (($x518 (= c___ left-to-center)))
 (let (($x519 (and $x518 $x515)))
 (ite $x519 $x522 (ite $x517 $x522 (ite $x514 $x526 (ite $x512 $x535 (ite $x509 $x529 $x535))))))))))))))))))))))))))))))))
(assert
 (let ((?x146 (right s___)))
 (let ((?x329 (right s____)))
 (let (($x531 (= ?x329 ?x146)))
 (let ((?x501 (rest ?x146)))
 (let (($x528 (= ?x329 ?x501)))
 (let (($x505 ((_ is stack ) ?x146)))
 (let (($x506 (= c___ right-to-center)))
 (let (($x507 (and $x506 $x505)))
 (let (($x508 (= c___ right-to-left)))
 (let (($x509 (and $x508 $x505)))
 (let ((?x357 (center s___)))
 (let ((?x498 (top ?x357)))
 (let ((?x500 (stack ?x498 ?x146)))
 (let (($x527 (= ?x329 ?x500)))
 (let (($x510 ((_ is stack ) ?x357)))
 (let (($x511 (= c___ center-to-right)))
 (let (($x512 (and $x511 $x510)))
 (let (($x513 (= c___ center-to-left)))
 (let (($x514 (and $x513 $x510)))
 (let ((?x143 (left s___)))
 (let (($x515 ((_ is stack ) ?x143)))
 (let (($x516 (= c___ left-to-right)))
 (let (($x517 (and $x516 $x515)))
 (let (($x548 (ite $x517 $x531 (ite $x514 $x531 (ite $x512 $x527 (ite $x509 $x528 (ite $x507 $x528 $x531)))))))
 (let ((?x355 (top ?x143)))
 (let ((?x494 (stack ?x355 ?x146)))
 (let (($x523 (= ?x329 ?x494)))
 (let (($x518 (= c___ left-to-center)))
 (let (($x519 (and $x518 $x515)))
 (ite $x519 $x523 $x548)))))))))))))))))))))))))))))))
(assert
 (let ((?x357 (center s___)))
 (let ((?x495 (center s____)))
 (let (($x533 (= ?x495 ?x357)))
 (let ((?x146 (right s___)))
 (let ((?x502 (top ?x146)))
 (let ((?x504 (stack ?x502 ?x357)))
 (let (($x530 (= ?x495 ?x504)))
 (let (($x505 ((_ is stack ) ?x146)))
 (let (($x506 (= c___ right-to-center)))
 (let (($x507 (and $x506 $x505)))
 (let (($x508 (= c___ right-to-left)))
 (let (($x509 (and $x508 $x505)))
 (let ((?x497 (rest ?x357)))
 (let (($x525 (= ?x495 ?x497)))
 (let (($x510 ((_ is stack ) ?x357)))
 (let (($x511 (= c___ center-to-right)))
 (let (($x512 (and $x511 $x510)))
 (let (($x513 (= c___ center-to-left)))
 (let (($x514 (and $x513 $x510)))
 (let ((?x143 (left s___)))
 (let ((?x355 (top ?x143)))
 (let ((?x496 (stack ?x355 ?x357)))
 (let (($x524 (= ?x495 ?x496)))
 (let (($x515 ((_ is stack ) ?x143)))
 (let (($x516 (= c___ left-to-right)))
 (let (($x517 (and $x516 $x515)))
 (let (($x547 (ite $x517 $x524 (ite $x514 $x525 (ite $x512 $x525 (ite $x509 $x533 (ite $x507 $x530 $x533)))))))
 (let (($x518 (= c___ left-to-center)))
 (let (($x519 (and $x518 $x515)))
 (ite $x519 $x533 $x547)))))))))))))))))))))))))))))))
(assert
 (let ((?x329 (right s____)))
 (let (($x551 (= ?x329 empty)))
 (let ((?x495 (center s____)))
 (let (($x582 (= ?x495 empty)))
 (let ((?x42 (stack M (stack E (stack A (stack F (stack J (stack B empty))))))))
 (let ((?x48 (stack I (stack H (stack K (stack G (stack D (stack L ?x42))))))))
 (let ((?x49 (stack C ?x48)))
 (let ((?x284 (left s____)))
 (let (($x583 (= ?x284 ?x49)))
 (let (($x585 (not (and $x583 $x582 $x551))))
 (not $x585))))))))))))
(check-sat)
(exit)
