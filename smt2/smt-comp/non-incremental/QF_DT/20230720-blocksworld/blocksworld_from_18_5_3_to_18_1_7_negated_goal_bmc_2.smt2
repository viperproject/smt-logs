(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y_Z 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V) (W) (X) (Y) (Z))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y_Z) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x39 (stack B empty)))
 (let ((?x38 (stack E ?x39)))
 (let ((?x40 (stack J ?x38)))
 (let ((?x41 (stack V ?x40)))
 (let ((?x42 (stack Z ?x41)))
 (let ((?x43 (stack O ?x42)))
 (let ((?x44 (stack L ?x43)))
 (let ((?x45 (stack F ?x44)))
 (let ((?x46 (stack M ?x45)))
 (let ((?x47 (stack K ?x46)))
 (let ((?x48 (stack W ?x47)))
 (let ((?x49 (stack X ?x48)))
 (let ((?x50 (stack U ?x49)))
 (let ((?x51 (stack Q ?x50)))
 (let ((?x52 (stack H ?x51)))
 (let ((?x53 (stack R ?x52)))
 (let ((?x54 (stack Y ?x53)))
 (let ((?x55 (stack P ?x54)))
 (let ((?x135 (left s_tmp_)))
 (= ?x135 ?x55)))))))))))))))))))))
(assert
 (let ((?x56 (stack C empty)))
 (let ((?x57 (stack A ?x56)))
 (let ((?x58 (stack D ?x57)))
 (let ((?x59 (stack T ?x58)))
 (let ((?x60 (stack I ?x59)))
 (let ((?x138 (center s_tmp__)))
 (= ?x138 ?x60))))))))
(assert
 (let ((?x61 (stack G empty)))
 (let ((?x62 (stack N ?x61)))
 (let ((?x63 (stack S ?x62)))
 (let ((?x141 (right s_tmp___)))
 (= ?x141 ?x63))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x168 (left s_tmp__)))
 (= (left s_tmp___) ?x168)))
(assert
 (let ((?x138 (center s_tmp__)))
 (= (center s_tmp___) ?x138)))
(assert
 (let ((?x172 (center s_tmp_)))
 (= ?x172 (center s_tmp))))
(assert
 (let ((?x175 (right s_tmp_)))
 (= ?x175 (right s_tmp))))
(assert
 (let ((?x135 (left s_tmp_)))
 (let ((?x168 (left s_tmp__)))
 (= ?x168 ?x135))))
(assert
 (let ((?x175 (right s_tmp_)))
 (let ((?x179 (right s_tmp__)))
 (= ?x179 ?x175))))
(assert
 (= c__ c!1))
(assert
 (let ((?x112 (left s_)))
 (let ((?x319 (left s__)))
 (let (($x301 (= ?x319 ?x112)))
 (let ((?x115 (right s_)))
 (let (($x322 ((_ is stack ) ?x115)))
 (let (($x313 (= c_ right-to-left)))
 (let (($x305 (and $x313 $x322)))
 (let ((?x117 (center s_)))
 (let (($x306 ((_ is stack ) ?x117)))
 (let (($x307 (= c_ center-to-right)))
 (let (($x344 (and $x307 $x306)))
 (let (($x345 (= c_ center-to-left)))
 (let (($x346 (and $x345 $x306)))
 (let (($x334 (ite $x346 (= ?x319 (stack (top ?x117) ?x112)) (ite $x344 $x301 (ite $x305 (= ?x319 (stack (top ?x115) ?x112)) $x301)))))
 (let (($x336 (= ?x319 (rest ?x112))))
 (let (($x347 ((_ is stack ) ?x112)))
 (let (($x348 (= c_ left-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let (($x353 (= c_ left-to-center)))
 (let (($x354 (and $x353 $x347)))
 (ite $x354 $x336 (ite $x349 $x336 $x334)))))))))))))))))))))))
(assert
 (let ((?x115 (right s_)))
 (let ((?x303 (right s__)))
 (let (($x330 (= ?x303 ?x115)))
 (let (($x309 (= ?x303 (rest ?x115))))
 (let (($x322 ((_ is stack ) ?x115)))
 (let (($x311 (= c_ right-to-center)))
 (let (($x312 (and $x311 $x322)))
 (let (($x313 (= c_ right-to-left)))
 (let (($x305 (and $x313 $x322)))
 (let ((?x117 (center s_)))
 (let (($x306 ((_ is stack ) ?x117)))
 (let (($x307 (= c_ center-to-right)))
 (let (($x344 (and $x307 $x306)))
 (let (($x340 (ite $x344 (= ?x303 (stack (top ?x117) ?x115)) (ite $x305 $x309 (ite $x312 $x309 $x330)))))
 (let (($x345 (= c_ center-to-left)))
 (let (($x346 (and $x345 $x306)))
 (let ((?x112 (left s_)))
 (let (($x347 ((_ is stack ) ?x112)))
 (let (($x348 (= c_ left-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let (($x353 (= c_ left-to-center)))
 (let (($x354 (and $x353 $x347)))
 (ite $x354 (= ?x303 (stack (top ?x112) ?x115)) (ite $x349 $x330 (ite $x346 $x330 $x340))))))))))))))))))))))))))
(assert
 (let ((?x117 (center s_)))
 (let ((?x363 (center s__)))
 (let (($x299 (= ?x363 ?x117)))
 (let ((?x115 (right s_)))
 (let (($x322 ((_ is stack ) ?x115)))
 (let (($x311 (= c_ right-to-center)))
 (let (($x312 (and $x311 $x322)))
 (let (($x313 (= c_ right-to-left)))
 (let (($x305 (and $x313 $x322)))
 (let (($x315 (= ?x363 (rest ?x117))))
 (let (($x306 ((_ is stack ) ?x117)))
 (let (($x307 (= c_ center-to-right)))
 (let (($x344 (and $x307 $x306)))
 (let (($x339 (ite $x344 $x315 (ite $x305 $x299 (ite $x312 (= ?x363 (stack (top ?x115) ?x117)) $x299)))))
 (let (($x345 (= c_ center-to-left)))
 (let (($x346 (and $x345 $x306)))
 (let ((?x112 (left s_)))
 (let (($x347 ((_ is stack ) ?x112)))
 (let (($x348 (= c_ left-to-right)))
 (let (($x349 (and $x348 $x347)))
 (let (($x353 (= c_ left-to-center)))
 (let (($x354 (and $x353 $x347)))
 (ite $x354 $x299 (ite $x349 (= ?x363 (stack (top ?x112) ?x117)) (ite $x346 $x315 $x339))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x319 (left s__)))
 (let ((?x182 (left s___)))
 (let (($x475 (= ?x182 ?x319)))
 (let ((?x303 (right s__)))
 (let ((?x442 (top ?x303)))
 (let ((?x443 (stack ?x442 ?x319)))
 (let (($x469 (= ?x182 ?x443)))
 (let (($x445 ((_ is stack ) ?x303)))
 (let (($x448 (= c__ right-to-left)))
 (let (($x449 (and $x448 $x445)))
 (let ((?x363 (center s__)))
 (let (($x450 ((_ is stack ) ?x363)))
 (let (($x451 (= c__ center-to-right)))
 (let (($x452 (and $x451 $x450)))
 (let ((?x438 (top ?x363)))
 (let ((?x439 (stack ?x438 ?x319)))
 (let (($x466 (= ?x182 ?x439)))
 (let (($x453 (= c__ center-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x184 (rest ?x319)))
 (let (($x462 (= ?x182 ?x184)))
 (let (($x455 ((_ is stack ) ?x319)))
 (let (($x456 (= c__ left-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let (($x458 (= c__ left-to-center)))
 (let (($x459 (and $x458 $x455)))
 (ite $x459 $x462 (ite $x457 $x462 (ite $x454 $x466 (ite $x452 $x475 (ite $x449 $x469 $x475))))))))))))))))))))))))))))))))
(assert
 (let ((?x303 (right s__)))
 (let ((?x185 (right s___)))
 (let (($x471 (= ?x185 ?x303)))
 (let ((?x441 (rest ?x303)))
 (let (($x468 (= ?x185 ?x441)))
 (let (($x445 ((_ is stack ) ?x303)))
 (let (($x446 (= c__ right-to-center)))
 (let (($x447 (and $x446 $x445)))
 (let (($x448 (= c__ right-to-left)))
 (let (($x449 (and $x448 $x445)))
 (let ((?x363 (center s__)))
 (let ((?x438 (top ?x363)))
 (let ((?x440 (stack ?x438 ?x303)))
 (let (($x467 (= ?x185 ?x440)))
 (let (($x450 ((_ is stack ) ?x363)))
 (let (($x451 (= c__ center-to-right)))
 (let (($x452 (and $x451 $x450)))
 (let (($x453 (= c__ center-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x319 (left s__)))
 (let (($x455 ((_ is stack ) ?x319)))
 (let (($x456 (= c__ left-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let (($x488 (ite $x457 $x471 (ite $x454 $x471 (ite $x452 $x467 (ite $x449 $x468 (ite $x447 $x468 $x471)))))))
 (let ((?x298 (top ?x319)))
 (let ((?x434 (stack ?x298 ?x303)))
 (let (($x463 (= ?x185 ?x434)))
 (let (($x458 (= c__ left-to-center)))
 (let (($x459 (and $x458 $x455)))
 (ite $x459 $x463 $x488)))))))))))))))))))))))))))))))
(assert
 (let ((?x363 (center s__)))
 (let ((?x435 (center s___)))
 (let (($x473 (= ?x435 ?x363)))
 (let ((?x303 (right s__)))
 (let ((?x442 (top ?x303)))
 (let ((?x444 (stack ?x442 ?x363)))
 (let (($x470 (= ?x435 ?x444)))
 (let (($x445 ((_ is stack ) ?x303)))
 (let (($x446 (= c__ right-to-center)))
 (let (($x447 (and $x446 $x445)))
 (let (($x448 (= c__ right-to-left)))
 (let (($x449 (and $x448 $x445)))
 (let ((?x437 (rest ?x363)))
 (let (($x465 (= ?x435 ?x437)))
 (let (($x450 ((_ is stack ) ?x363)))
 (let (($x451 (= c__ center-to-right)))
 (let (($x452 (and $x451 $x450)))
 (let (($x453 (= c__ center-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x319 (left s__)))
 (let ((?x298 (top ?x319)))
 (let ((?x436 (stack ?x298 ?x363)))
 (let (($x464 (= ?x435 ?x436)))
 (let (($x455 ((_ is stack ) ?x319)))
 (let (($x456 (= c__ left-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let (($x487 (ite $x457 $x464 (ite $x454 $x465 (ite $x452 $x465 (ite $x449 $x473 (ite $x447 $x470 $x473)))))))
 (let (($x458 (= c__ left-to-center)))
 (let (($x459 (and $x458 $x455)))
 (ite $x459 $x473 $x487)))))))))))))))))))))))))))))))
(assert
 (let ((?x87 (stack W (stack T (stack R (stack D (stack C (stack A empty))))))))
 (let ((?x88 (stack X ?x87)))
 (let ((?x185 (right s___)))
 (let (($x491 (= ?x185 ?x88)))
 (let ((?x39 (stack B empty)))
 (let ((?x435 (center s___)))
 (let (($x522 (= ?x435 ?x39)))
 (let ((?x69 (stack M (stack Q (stack J (stack N (stack F (stack Y empty))))))))
 (let ((?x75 (stack G (stack I (stack U (stack H (stack E (stack Z ?x69))))))))
 (let ((?x81 (stack O (stack V (stack L (stack S (stack P (stack K ?x75))))))))
 (let ((?x182 (left s___)))
 (let (($x523 (= ?x182 ?x81)))
 (let (($x525 (not (and $x523 $x522 $x491))))
 (not $x525)))))))))))))))
(check-sat)
(exit)
