(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x28 (stack H empty)))
 (let ((?x29 (stack P ?x28)))
 (let ((?x30 (stack L ?x29)))
 (let ((?x31 (stack K ?x30)))
 (let ((?x32 (stack N ?x31)))
 (let ((?x105 (left s_tmp_)))
 (= ?x105 ?x32))))))))
(assert
 (let ((?x33 (stack C empty)))
 (let ((?x108 (center s_tmp__)))
 (= ?x108 ?x33))))
(assert
 (let ((?x34 (stack A empty)))
 (let ((?x35 (stack B ?x34)))
 (let ((?x36 (stack D ?x35)))
 (let ((?x37 (stack E ?x36)))
 (let ((?x38 (stack F ?x37)))
 (let ((?x39 (stack G ?x38)))
 (let ((?x40 (stack I ?x39)))
 (let ((?x41 (stack J ?x40)))
 (let ((?x42 (stack M ?x41)))
 (let ((?x43 (stack O ?x42)))
 (let ((?x111 (right s_tmp___)))
 (= ?x111 ?x43)))))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x138 (left s_tmp__)))
 (= (left s_tmp___) ?x138)))
(assert
 (let ((?x108 (center s_tmp__)))
 (= (center s_tmp___) ?x108)))
(assert
 (let ((?x142 (center s_tmp_)))
 (= ?x142 (center s_tmp))))
(assert
 (let ((?x145 (right s_tmp_)))
 (= ?x145 (right s_tmp))))
(assert
 (let ((?x105 (left s_tmp_)))
 (let ((?x138 (left s_tmp__)))
 (= ?x138 ?x105))))
(assert
 (let ((?x145 (right s_tmp_)))
 (let ((?x149 (right s_tmp__)))
 (= ?x149 ?x145))))
(assert
 (= c__ c!1))
(assert
 (let ((?x82 (left s_)))
 (let ((?x253 (left s__)))
 (let (($x286 (= ?x253 ?x82)))
 (let ((?x85 (right s_)))
 (let (($x244 ((_ is stack ) ?x85)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x254 (and $x241 $x244)))
 (let ((?x87 (center s_)))
 (let (($x255 ((_ is stack ) ?x87)))
 (let (($x256 (= c_ center-to-right)))
 (let (($x263 (and $x256 $x255)))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x255)))
 (let (($x295 (ite $x265 (= ?x253 (stack (top ?x87) ?x82)) (ite $x263 $x286 (ite $x254 (= ?x253 (stack (top ?x85) ?x82)) $x286)))))
 (let (($x273 (= ?x253 (rest ?x82))))
 (let (($x266 ((_ is stack ) ?x82)))
 (let (($x267 (= c_ left-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let (($x269 (= c_ left-to-center)))
 (let (($x270 (and $x269 $x266)))
 (ite $x270 $x273 (ite $x268 $x273 $x295)))))))))))))))))))))))
(assert
 (let ((?x85 (right s_)))
 (let ((?x258 (right s__)))
 (let (($x282 (= ?x258 ?x85)))
 (let (($x279 (= ?x258 (rest ?x85))))
 (let (($x244 ((_ is stack ) ?x85)))
 (let (($x239 (= c_ right-to-center)))
 (let (($x240 (and $x239 $x244)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x254 (and $x241 $x244)))
 (let ((?x87 (center s_)))
 (let (($x255 ((_ is stack ) ?x87)))
 (let (($x256 (= c_ center-to-right)))
 (let (($x263 (and $x256 $x255)))
 (let (($x292 (ite $x263 (= ?x258 (stack (top ?x87) ?x85)) (ite $x254 $x279 (ite $x240 $x279 $x282)))))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x255)))
 (let ((?x82 (left s_)))
 (let (($x266 ((_ is stack ) ?x82)))
 (let (($x267 (= c_ left-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let (($x269 (= c_ left-to-center)))
 (let (($x270 (and $x269 $x266)))
 (ite $x270 (= ?x258 (stack (top ?x82) ?x85)) (ite $x268 $x282 (ite $x265 $x282 $x292))))))))))))))))))))))))))
(assert
 (let ((?x87 (center s_)))
 (let ((?x246 (center s__)))
 (let (($x284 (= ?x246 ?x87)))
 (let ((?x85 (right s_)))
 (let (($x244 ((_ is stack ) ?x85)))
 (let (($x239 (= c_ right-to-center)))
 (let (($x240 (and $x239 $x244)))
 (let (($x241 (= c_ right-to-left)))
 (let (($x254 (and $x241 $x244)))
 (let (($x276 (= ?x246 (rest ?x87))))
 (let (($x255 ((_ is stack ) ?x87)))
 (let (($x256 (= c_ center-to-right)))
 (let (($x263 (and $x256 $x255)))
 (let (($x291 (ite $x263 $x276 (ite $x254 $x284 (ite $x240 (= ?x246 (stack (top ?x85) ?x87)) $x284)))))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x255)))
 (let ((?x82 (left s_)))
 (let (($x266 ((_ is stack ) ?x82)))
 (let (($x267 (= c_ left-to-right)))
 (let (($x268 (and $x267 $x266)))
 (let (($x269 (= c_ left-to-center)))
 (let (($x270 (and $x269 $x266)))
 (ite $x270 $x284 (ite $x268 (= ?x246 (stack (top ?x82) ?x87)) (ite $x265 $x276 $x291))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x253 (left s__)))
 (let ((?x152 (left s___)))
 (let (($x415 (= ?x152 ?x253)))
 (let ((?x258 (right s__)))
 (let ((?x382 (top ?x258)))
 (let ((?x383 (stack ?x382 ?x253)))
 (let (($x409 (= ?x152 ?x383)))
 (let (($x385 ((_ is stack ) ?x258)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x246 (center s__)))
 (let (($x390 ((_ is stack ) ?x246)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let ((?x378 (top ?x246)))
 (let ((?x379 (stack ?x378 ?x253)))
 (let (($x406 (= ?x152 ?x379)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x154 (rest ?x253)))
 (let (($x402 (= ?x152 ?x154)))
 (let (($x395 ((_ is stack ) ?x253)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x402 (ite $x397 $x402 (ite $x394 $x406 (ite $x392 $x415 (ite $x389 $x409 $x415))))))))))))))))))))))))))))))))
(assert
 (let ((?x258 (right s__)))
 (let ((?x155 (right s___)))
 (let (($x411 (= ?x155 ?x258)))
 (let ((?x381 (rest ?x258)))
 (let (($x408 (= ?x155 ?x381)))
 (let (($x385 ((_ is stack ) ?x258)))
 (let (($x386 (= c__ right-to-center)))
 (let (($x387 (and $x386 $x385)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x246 (center s__)))
 (let ((?x378 (top ?x246)))
 (let ((?x380 (stack ?x378 ?x258)))
 (let (($x407 (= ?x155 ?x380)))
 (let (($x390 ((_ is stack ) ?x246)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x253 (left s__)))
 (let (($x395 ((_ is stack ) ?x253)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x428 (ite $x397 $x411 (ite $x394 $x411 (ite $x392 $x407 (ite $x389 $x408 (ite $x387 $x408 $x411)))))))
 (let ((?x238 (top ?x253)))
 (let ((?x374 (stack ?x238 ?x258)))
 (let (($x403 (= ?x155 ?x374)))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x403 $x428)))))))))))))))))))))))))))))))
(assert
 (let ((?x246 (center s__)))
 (let ((?x375 (center s___)))
 (let (($x413 (= ?x375 ?x246)))
 (let ((?x258 (right s__)))
 (let ((?x382 (top ?x258)))
 (let ((?x384 (stack ?x382 ?x246)))
 (let (($x410 (= ?x375 ?x384)))
 (let (($x385 ((_ is stack ) ?x258)))
 (let (($x386 (= c__ right-to-center)))
 (let (($x387 (and $x386 $x385)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x377 (rest ?x246)))
 (let (($x405 (= ?x375 ?x377)))
 (let (($x390 ((_ is stack ) ?x246)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x253 (left s__)))
 (let ((?x238 (top ?x253)))
 (let ((?x376 (stack ?x238 ?x246)))
 (let (($x404 (= ?x375 ?x376)))
 (let (($x395 ((_ is stack ) ?x253)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x427 (ite $x397 $x404 (ite $x394 $x405 (ite $x392 $x405 (ite $x389 $x413 (ite $x387 $x410 $x413)))))))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x413 $x427)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x152 (left s___)))
 (let ((?x302 (left s____)))
 (let (($x553 (= ?x302 ?x152)))
 (let ((?x155 (right s___)))
 (let ((?x520 (top ?x155)))
 (let ((?x521 (stack ?x520 ?x152)))
 (let (($x547 (= ?x302 ?x521)))
 (let (($x523 ((_ is stack ) ?x155)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x375 (center s___)))
 (let (($x528 ((_ is stack ) ?x375)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let ((?x516 (top ?x375)))
 (let ((?x517 (stack ?x516 ?x152)))
 (let (($x544 (= ?x302 ?x517)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x346 (rest ?x152)))
 (let (($x540 (= ?x302 ?x346)))
 (let (($x533 ((_ is stack ) ?x152)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x540 (ite $x535 $x540 (ite $x532 $x544 (ite $x530 $x553 (ite $x527 $x547 $x553))))))))))))))))))))))))))))))))
(assert
 (let ((?x155 (right s___)))
 (let ((?x347 (right s____)))
 (let (($x549 (= ?x347 ?x155)))
 (let ((?x519 (rest ?x155)))
 (let (($x546 (= ?x347 ?x519)))
 (let (($x523 ((_ is stack ) ?x155)))
 (let (($x524 (= c___ right-to-center)))
 (let (($x525 (and $x524 $x523)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x375 (center s___)))
 (let ((?x516 (top ?x375)))
 (let ((?x518 (stack ?x516 ?x155)))
 (let (($x545 (= ?x347 ?x518)))
 (let (($x528 ((_ is stack ) ?x375)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x152 (left s___)))
 (let (($x533 ((_ is stack ) ?x152)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x566 (ite $x535 $x549 (ite $x532 $x549 (ite $x530 $x545 (ite $x527 $x546 (ite $x525 $x546 $x549)))))))
 (let ((?x373 (top ?x152)))
 (let ((?x512 (stack ?x373 ?x155)))
 (let (($x541 (= ?x347 ?x512)))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x541 $x566)))))))))))))))))))))))))))))))
(assert
 (let ((?x375 (center s___)))
 (let ((?x513 (center s____)))
 (let (($x551 (= ?x513 ?x375)))
 (let ((?x155 (right s___)))
 (let ((?x520 (top ?x155)))
 (let ((?x522 (stack ?x520 ?x375)))
 (let (($x548 (= ?x513 ?x522)))
 (let (($x523 ((_ is stack ) ?x155)))
 (let (($x524 (= c___ right-to-center)))
 (let (($x525 (and $x524 $x523)))
 (let (($x526 (= c___ right-to-left)))
 (let (($x527 (and $x526 $x523)))
 (let ((?x515 (rest ?x375)))
 (let (($x543 (= ?x513 ?x515)))
 (let (($x528 ((_ is stack ) ?x375)))
 (let (($x529 (= c___ center-to-right)))
 (let (($x530 (and $x529 $x528)))
 (let (($x531 (= c___ center-to-left)))
 (let (($x532 (and $x531 $x528)))
 (let ((?x152 (left s___)))
 (let ((?x373 (top ?x152)))
 (let ((?x514 (stack ?x373 ?x375)))
 (let (($x542 (= ?x513 ?x514)))
 (let (($x533 ((_ is stack ) ?x152)))
 (let (($x534 (= c___ left-to-right)))
 (let (($x535 (and $x534 $x533)))
 (let (($x565 (ite $x535 $x542 (ite $x532 $x543 (ite $x530 $x543 (ite $x527 $x551 (ite $x525 $x548 $x551)))))))
 (let (($x536 (= c___ left-to-center)))
 (let (($x537 (and $x536 $x533)))
 (ite $x537 $x551 $x565)))))))))))))))))))))))))))))))
(assert
 (let ((?x58 (stack J (stack H (stack E empty)))))
 (let ((?x347 (right s____)))
 (let (($x569 (= ?x347 ?x58)))
 (let ((?x52 (stack P (stack F (stack B (stack K (stack G (stack A empty))))))))
 (let ((?x55 (stack I (stack C (stack L ?x52)))))
 (let ((?x513 (center s____)))
 (let (($x600 (= ?x513 ?x55)))
 (let ((?x47 (stack D (stack M (stack O (stack N empty))))))
 (let ((?x302 (left s____)))
 (let (($x601 (= ?x302 ?x47)))
 (let (($x603 (not (and $x601 $x600 $x569))))
 (not $x603)))))))))))))
(check-sat)
(exit)
