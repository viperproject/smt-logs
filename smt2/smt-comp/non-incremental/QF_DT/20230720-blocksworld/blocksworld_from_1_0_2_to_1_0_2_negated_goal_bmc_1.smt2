(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C 0)) (((A) (B) (C))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x15 (stack A empty)))
 (let ((?x65 (left s_tmp_)))
 (= ?x65 ?x15))))
(assert
 (let ((?x68 (center s_tmp__)))
 (= ?x68 empty)))
(assert
 (let ((?x16 (stack B empty)))
 (let ((?x17 (stack C ?x16)))
 (let ((?x71 (right s_tmp___)))
 (= ?x71 ?x17)))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x98 (left s_tmp__)))
 (= (left s_tmp___) ?x98)))
(assert
 (let ((?x68 (center s_tmp__)))
 (= (center s_tmp___) ?x68)))
(assert
 (let ((?x102 (center s_tmp_)))
 (= ?x102 (center s_tmp))))
(assert
 (let ((?x105 (right s_tmp_)))
 (= ?x105 (right s_tmp))))
(assert
 (let ((?x65 (left s_tmp_)))
 (let ((?x98 (left s_tmp__)))
 (= ?x98 ?x65))))
(assert
 (let ((?x105 (right s_tmp_)))
 (let ((?x109 (right s_tmp__)))
 (= ?x109 ?x105))))
(assert
 (= c__ c!1))
(assert
 (let ((?x42 (left s_)))
 (let ((?x161 (left s__)))
 (let (($x206 (= ?x161 ?x42)))
 (let ((?x45 (right s_)))
 (let (($x176 ((_ is stack ) ?x45)))
 (let (($x179 (= c_ right-to-left)))
 (let (($x180 (and $x179 $x176)))
 (let ((?x47 (center s_)))
 (let (($x181 ((_ is stack ) ?x47)))
 (let (($x183 (and (= c_ center-to-right) $x181)))
 (let (($x185 (and (= c_ center-to-left) $x181)))
 (let (($x215 (ite $x185 (= ?x161 (stack (top ?x47) ?x42)) (ite $x183 $x206 (ite $x180 (= ?x161 (stack (top ?x45) ?x42)) $x206)))))
 (let ((?x165 (rest ?x42)))
 (let (($x193 (= ?x161 ?x165)))
 (let (($x186 ((_ is stack ) ?x42)))
 (let (($x187 (= c_ left-to-right)))
 (let (($x188 (and $x187 $x186)))
 (let (($x189 (= c_ left-to-center)))
 (let (($x190 (and $x189 $x186)))
 (ite $x190 $x193 (ite $x188 $x193 $x215))))))))))))))))))))))
(assert
 (let ((?x45 (right s_)))
 (let ((?x166 (right s__)))
 (let (($x202 (= ?x166 ?x45)))
 (let ((?x172 (rest ?x45)))
 (let (($x199 (= ?x166 ?x172)))
 (let (($x176 ((_ is stack ) ?x45)))
 (let (($x177 (= c_ right-to-center)))
 (let (($x178 (and $x177 $x176)))
 (let (($x179 (= c_ right-to-left)))
 (let (($x180 (and $x179 $x176)))
 (let ((?x47 (center s_)))
 (let (($x181 ((_ is stack ) ?x47)))
 (let (($x183 (and (= c_ center-to-right) $x181)))
 (let (($x212 (ite $x183 (= ?x166 (stack (top ?x47) ?x45)) (ite $x180 $x199 (ite $x178 $x199 $x202)))))
 (let (($x185 (and (= c_ center-to-left) $x181)))
 (let ((?x42 (left s_)))
 (let (($x186 ((_ is stack ) ?x42)))
 (let (($x187 (= c_ left-to-right)))
 (let (($x188 (and $x187 $x186)))
 (let (($x189 (= c_ left-to-center)))
 (let (($x190 (and $x189 $x186)))
 (ite $x190 (= ?x166 (stack (top ?x42) ?x45)) (ite $x188 $x202 (ite $x185 $x202 $x212)))))))))))))))))))))))))
(assert
 (let ((?x47 (center s_)))
 (let ((?x164 (center s__)))
 (let (($x204 (= ?x164 ?x47)))
 (let ((?x45 (right s_)))
 (let (($x176 ((_ is stack ) ?x45)))
 (let (($x177 (= c_ right-to-center)))
 (let (($x178 (and $x177 $x176)))
 (let (($x179 (= c_ right-to-left)))
 (let (($x180 (and $x179 $x176)))
 (let ((?x168 (rest ?x47)))
 (let (($x196 (= ?x164 ?x168)))
 (let (($x181 ((_ is stack ) ?x47)))
 (let (($x183 (and (= c_ center-to-right) $x181)))
 (let (($x211 (ite $x183 $x196 (ite $x180 $x204 (ite $x178 (= ?x164 (stack (top ?x45) ?x47)) $x204)))))
 (let (($x185 (and (= c_ center-to-left) $x181)))
 (let ((?x42 (left s_)))
 (let (($x186 ((_ is stack ) ?x42)))
 (let (($x187 (= c_ left-to-right)))
 (let (($x188 (and $x187 $x186)))
 (let (($x189 (= c_ left-to-center)))
 (let (($x190 (and $x189 $x186)))
 (ite $x190 $x204 (ite $x188 (= ?x164 (stack (top ?x42) ?x47)) (ite $x185 $x196 $x211)))))))))))))))))))))))))
(assert
 (let ((?x15 (stack A empty)))
 (let ((?x18 (stack C ?x15)))
 (let ((?x166 (right s__)))
 (let (($x222 (= ?x166 ?x18)))
 (let ((?x164 (center s__)))
 (let (($x241 (= ?x164 empty)))
 (let ((?x16 (stack B empty)))
 (let ((?x161 (left s__)))
 (let (($x250 (= ?x161 ?x16)))
 (let (($x252 (not (and $x250 $x241 $x222))))
 (not $x252))))))))))))
(check-sat)
(exit)
