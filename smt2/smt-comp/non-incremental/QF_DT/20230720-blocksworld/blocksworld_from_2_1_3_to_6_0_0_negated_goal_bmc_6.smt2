(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F 0)) (((A) (B) (C) (D) (E) (F))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x19 (stack B empty)))
 (let ((?x18 (stack C ?x19)))
 (let ((?x76 (left s_tmp_)))
 (= ?x76 ?x18)))))
(assert
 (let ((?x20 (stack A empty)))
 (let ((?x79 (center s_tmp__)))
 (= ?x79 ?x20))))
(assert
 (let ((?x21 (stack D empty)))
 (let ((?x22 (stack E ?x21)))
 (let ((?x23 (stack F ?x22)))
 (let ((?x82 (right s_tmp___)))
 (= ?x82 ?x23))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x109 (left s_tmp__)))
 (= (left s_tmp___) ?x109)))
(assert
 (let ((?x79 (center s_tmp__)))
 (= (center s_tmp___) ?x79)))
(assert
 (let ((?x113 (center s_tmp_)))
 (= ?x113 (center s_tmp))))
(assert
 (let ((?x116 (right s_tmp_)))
 (= ?x116 (right s_tmp))))
(assert
 (let ((?x76 (left s_tmp_)))
 (let ((?x109 (left s_tmp__)))
 (= ?x109 ?x76))))
(assert
 (let ((?x116 (right s_tmp_)))
 (let ((?x120 (right s_tmp__)))
 (= ?x120 ?x116))))
(assert
 (= c__ c!1))
(assert
 (let ((?x53 (left s_)))
 (let ((?x185 (left s__)))
 (let (($x227 (= ?x185 ?x53)))
 (let ((?x56 (right s_)))
 (let (($x197 ((_ is stack ) ?x56)))
 (let (($x200 (= c_ right-to-left)))
 (let (($x201 (and $x200 $x197)))
 (let ((?x58 (center s_)))
 (let (($x202 ((_ is stack ) ?x58)))
 (let (($x203 (= c_ center-to-right)))
 (let (($x204 (and $x203 $x202)))
 (let (($x205 (= c_ center-to-left)))
 (let (($x206 (and $x205 $x202)))
 (let (($x236 (ite $x206 (= ?x185 (stack (top ?x58) ?x53)) (ite $x204 $x227 (ite $x201 (= ?x185 (stack (top ?x56) ?x53)) $x227)))))
 (let (($x214 (= ?x185 (rest ?x53))))
 (let (($x207 ((_ is stack ) ?x53)))
 (let (($x208 (= c_ left-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x210 (= c_ left-to-center)))
 (let (($x211 (and $x210 $x207)))
 (ite $x211 $x214 (ite $x209 $x214 $x236)))))))))))))))))))))))
(assert
 (let ((?x56 (right s_)))
 (let ((?x181 (right s__)))
 (let (($x223 (= ?x181 ?x56)))
 (let (($x220 (= ?x181 (rest ?x56))))
 (let (($x197 ((_ is stack ) ?x56)))
 (let (($x198 (= c_ right-to-center)))
 (let (($x199 (and $x198 $x197)))
 (let (($x200 (= c_ right-to-left)))
 (let (($x201 (and $x200 $x197)))
 (let ((?x58 (center s_)))
 (let (($x202 ((_ is stack ) ?x58)))
 (let (($x203 (= c_ center-to-right)))
 (let (($x204 (and $x203 $x202)))
 (let (($x233 (ite $x204 (= ?x181 (stack (top ?x58) ?x56)) (ite $x201 $x220 (ite $x199 $x220 $x223)))))
 (let (($x205 (= c_ center-to-left)))
 (let (($x206 (and $x205 $x202)))
 (let ((?x53 (left s_)))
 (let (($x207 ((_ is stack ) ?x53)))
 (let (($x208 (= c_ left-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x210 (= c_ left-to-center)))
 (let (($x211 (and $x210 $x207)))
 (ite $x211 (= ?x181 (stack (top ?x53) ?x56)) (ite $x209 $x223 (ite $x206 $x223 $x233))))))))))))))))))))))))))
(assert
 (let ((?x58 (center s_)))
 (let ((?x187 (center s__)))
 (let (($x225 (= ?x187 ?x58)))
 (let ((?x56 (right s_)))
 (let (($x197 ((_ is stack ) ?x56)))
 (let (($x198 (= c_ right-to-center)))
 (let (($x199 (and $x198 $x197)))
 (let (($x200 (= c_ right-to-left)))
 (let (($x201 (and $x200 $x197)))
 (let (($x217 (= ?x187 (rest ?x58))))
 (let (($x202 ((_ is stack ) ?x58)))
 (let (($x203 (= c_ center-to-right)))
 (let (($x204 (and $x203 $x202)))
 (let (($x232 (ite $x204 $x217 (ite $x201 $x225 (ite $x199 (= ?x187 (stack (top ?x56) ?x58)) $x225)))))
 (let (($x205 (= c_ center-to-left)))
 (let (($x206 (and $x205 $x202)))
 (let ((?x53 (left s_)))
 (let (($x207 ((_ is stack ) ?x53)))
 (let (($x208 (= c_ left-to-right)))
 (let (($x209 (and $x208 $x207)))
 (let (($x210 (= c_ left-to-center)))
 (let (($x211 (and $x210 $x207)))
 (ite $x211 $x225 (ite $x209 (= ?x187 (stack (top ?x53) ?x58)) (ite $x206 $x217 $x232))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x185 (left s__)))
 (let ((?x123 (left s___)))
 (let (($x355 (= ?x123 ?x185)))
 (let ((?x181 (right s__)))
 (let ((?x322 (top ?x181)))
 (let ((?x323 (stack ?x322 ?x185)))
 (let (($x349 (= ?x123 ?x323)))
 (let (($x325 ((_ is stack ) ?x181)))
 (let (($x328 (= c__ right-to-left)))
 (let (($x329 (and $x328 $x325)))
 (let ((?x187 (center s__)))
 (let (($x330 ((_ is stack ) ?x187)))
 (let (($x331 (= c__ center-to-right)))
 (let (($x332 (and $x331 $x330)))
 (let ((?x318 (top ?x187)))
 (let ((?x319 (stack ?x318 ?x185)))
 (let (($x346 (= ?x123 ?x319)))
 (let (($x333 (= c__ center-to-left)))
 (let (($x334 (and $x333 $x330)))
 (let ((?x125 (rest ?x185)))
 (let (($x342 (= ?x123 ?x125)))
 (let (($x335 ((_ is stack ) ?x185)))
 (let (($x336 (= c__ left-to-right)))
 (let (($x337 (and $x336 $x335)))
 (let (($x338 (= c__ left-to-center)))
 (let (($x339 (and $x338 $x335)))
 (ite $x339 $x342 (ite $x337 $x342 (ite $x334 $x346 (ite $x332 $x355 (ite $x329 $x349 $x355))))))))))))))))))))))))))))))))
(assert
 (let ((?x181 (right s__)))
 (let ((?x126 (right s___)))
 (let (($x351 (= ?x126 ?x181)))
 (let ((?x321 (rest ?x181)))
 (let (($x348 (= ?x126 ?x321)))
 (let (($x325 ((_ is stack ) ?x181)))
 (let (($x326 (= c__ right-to-center)))
 (let (($x327 (and $x326 $x325)))
 (let (($x328 (= c__ right-to-left)))
 (let (($x329 (and $x328 $x325)))
 (let ((?x187 (center s__)))
 (let ((?x318 (top ?x187)))
 (let ((?x320 (stack ?x318 ?x181)))
 (let (($x347 (= ?x126 ?x320)))
 (let (($x330 ((_ is stack ) ?x187)))
 (let (($x331 (= c__ center-to-right)))
 (let (($x332 (and $x331 $x330)))
 (let (($x333 (= c__ center-to-left)))
 (let (($x334 (and $x333 $x330)))
 (let ((?x185 (left s__)))
 (let (($x335 ((_ is stack ) ?x185)))
 (let (($x336 (= c__ left-to-right)))
 (let (($x337 (and $x336 $x335)))
 (let (($x368 (ite $x337 $x351 (ite $x334 $x351 (ite $x332 $x347 (ite $x329 $x348 (ite $x327 $x348 $x351)))))))
 (let ((?x179 (top ?x185)))
 (let ((?x314 (stack ?x179 ?x181)))
 (let (($x343 (= ?x126 ?x314)))
 (let (($x338 (= c__ left-to-center)))
 (let (($x339 (and $x338 $x335)))
 (ite $x339 $x343 $x368)))))))))))))))))))))))))))))))
(assert
 (let ((?x187 (center s__)))
 (let ((?x315 (center s___)))
 (let (($x353 (= ?x315 ?x187)))
 (let ((?x181 (right s__)))
 (let ((?x322 (top ?x181)))
 (let ((?x324 (stack ?x322 ?x187)))
 (let (($x350 (= ?x315 ?x324)))
 (let (($x325 ((_ is stack ) ?x181)))
 (let (($x326 (= c__ right-to-center)))
 (let (($x327 (and $x326 $x325)))
 (let (($x328 (= c__ right-to-left)))
 (let (($x329 (and $x328 $x325)))
 (let ((?x317 (rest ?x187)))
 (let (($x345 (= ?x315 ?x317)))
 (let (($x330 ((_ is stack ) ?x187)))
 (let (($x331 (= c__ center-to-right)))
 (let (($x332 (and $x331 $x330)))
 (let (($x333 (= c__ center-to-left)))
 (let (($x334 (and $x333 $x330)))
 (let ((?x185 (left s__)))
 (let ((?x179 (top ?x185)))
 (let ((?x316 (stack ?x179 ?x187)))
 (let (($x344 (= ?x315 ?x316)))
 (let (($x335 ((_ is stack ) ?x185)))
 (let (($x336 (= c__ left-to-right)))
 (let (($x337 (and $x336 $x335)))
 (let (($x367 (ite $x337 $x344 (ite $x334 $x345 (ite $x332 $x345 (ite $x329 $x353 (ite $x327 $x350 $x353)))))))
 (let (($x338 (= c__ left-to-center)))
 (let (($x339 (and $x338 $x335)))
 (ite $x339 $x353 $x367)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x123 (left s___)))
 (let ((?x286 (left s____)))
 (let (($x494 (= ?x286 ?x123)))
 (let ((?x126 (right s___)))
 (let ((?x461 (top ?x126)))
 (let ((?x462 (stack ?x461 ?x123)))
 (let (($x488 (= ?x286 ?x462)))
 (let (($x464 ((_ is stack ) ?x126)))
 (let (($x467 (= c___ right-to-left)))
 (let (($x468 (and $x467 $x464)))
 (let ((?x315 (center s___)))
 (let (($x469 ((_ is stack ) ?x315)))
 (let (($x470 (= c___ center-to-right)))
 (let (($x471 (and $x470 $x469)))
 (let ((?x457 (top ?x315)))
 (let ((?x458 (stack ?x457 ?x123)))
 (let (($x485 (= ?x286 ?x458)))
 (let (($x472 (= c___ center-to-left)))
 (let (($x473 (and $x472 $x469)))
 (let ((?x287 (rest ?x123)))
 (let (($x481 (= ?x286 ?x287)))
 (let (($x474 ((_ is stack ) ?x123)))
 (let (($x475 (= c___ left-to-right)))
 (let (($x476 (and $x475 $x474)))
 (let (($x477 (= c___ left-to-center)))
 (let (($x478 (and $x477 $x474)))
 (ite $x478 $x481 (ite $x476 $x481 (ite $x473 $x485 (ite $x471 $x494 (ite $x468 $x488 $x494))))))))))))))))))))))))))))))))
(assert
 (let ((?x126 (right s___)))
 (let ((?x313 (right s____)))
 (let (($x490 (= ?x313 ?x126)))
 (let ((?x460 (rest ?x126)))
 (let (($x487 (= ?x313 ?x460)))
 (let (($x464 ((_ is stack ) ?x126)))
 (let (($x465 (= c___ right-to-center)))
 (let (($x466 (and $x465 $x464)))
 (let (($x467 (= c___ right-to-left)))
 (let (($x468 (and $x467 $x464)))
 (let ((?x315 (center s___)))
 (let ((?x457 (top ?x315)))
 (let ((?x459 (stack ?x457 ?x126)))
 (let (($x486 (= ?x313 ?x459)))
 (let (($x469 ((_ is stack ) ?x315)))
 (let (($x470 (= c___ center-to-right)))
 (let (($x471 (and $x470 $x469)))
 (let (($x472 (= c___ center-to-left)))
 (let (($x473 (and $x472 $x469)))
 (let ((?x123 (left s___)))
 (let (($x474 ((_ is stack ) ?x123)))
 (let (($x475 (= c___ left-to-right)))
 (let (($x476 (and $x475 $x474)))
 (let (($x507 (ite $x476 $x490 (ite $x473 $x490 (ite $x471 $x486 (ite $x468 $x487 (ite $x466 $x487 $x490)))))))
 (let ((?x452 (top ?x123)))
 (let ((?x453 (stack ?x452 ?x126)))
 (let (($x482 (= ?x313 ?x453)))
 (let (($x477 (= c___ left-to-center)))
 (let (($x478 (and $x477 $x474)))
 (ite $x478 $x482 $x507)))))))))))))))))))))))))))))))
(assert
 (let ((?x315 (center s___)))
 (let ((?x454 (center s____)))
 (let (($x492 (= ?x454 ?x315)))
 (let ((?x126 (right s___)))
 (let ((?x461 (top ?x126)))
 (let ((?x463 (stack ?x461 ?x315)))
 (let (($x489 (= ?x454 ?x463)))
 (let (($x464 ((_ is stack ) ?x126)))
 (let (($x465 (= c___ right-to-center)))
 (let (($x466 (and $x465 $x464)))
 (let (($x467 (= c___ right-to-left)))
 (let (($x468 (and $x467 $x464)))
 (let ((?x456 (rest ?x315)))
 (let (($x484 (= ?x454 ?x456)))
 (let (($x469 ((_ is stack ) ?x315)))
 (let (($x470 (= c___ center-to-right)))
 (let (($x471 (and $x470 $x469)))
 (let (($x472 (= c___ center-to-left)))
 (let (($x473 (and $x472 $x469)))
 (let ((?x123 (left s___)))
 (let ((?x452 (top ?x123)))
 (let ((?x455 (stack ?x452 ?x315)))
 (let (($x483 (= ?x454 ?x455)))
 (let (($x474 ((_ is stack ) ?x123)))
 (let (($x475 (= c___ left-to-right)))
 (let (($x476 (and $x475 $x474)))
 (let (($x506 (ite $x476 $x483 (ite $x473 $x484 (ite $x471 $x484 (ite $x468 $x492 (ite $x466 $x489 $x492)))))))
 (let (($x477 (= c___ left-to-center)))
 (let (($x478 (and $x477 $x474)))
 (ite $x478 $x492 $x506)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x286 (left s____)))
 (let ((?x371 (left s_____)))
 (let (($x632 (= ?x371 ?x286)))
 (let ((?x313 (right s____)))
 (let ((?x599 (top ?x313)))
 (let ((?x600 (stack ?x599 ?x286)))
 (let (($x626 (= ?x371 ?x600)))
 (let (($x602 ((_ is stack ) ?x313)))
 (let (($x605 (= c____ right-to-left)))
 (let (($x606 (and $x605 $x602)))
 (let ((?x454 (center s____)))
 (let (($x607 ((_ is stack ) ?x454)))
 (let (($x608 (= c____ center-to-right)))
 (let (($x609 (and $x608 $x607)))
 (let ((?x595 (top ?x454)))
 (let ((?x596 (stack ?x595 ?x286)))
 (let (($x623 (= ?x371 ?x596)))
 (let (($x610 (= c____ center-to-left)))
 (let (($x611 (and $x610 $x607)))
 (let ((?x404 (rest ?x286)))
 (let (($x619 (= ?x371 ?x404)))
 (let (($x612 ((_ is stack ) ?x286)))
 (let (($x613 (= c____ left-to-right)))
 (let (($x614 (and $x613 $x612)))
 (let (($x615 (= c____ left-to-center)))
 (let (($x616 (and $x615 $x612)))
 (ite $x616 $x619 (ite $x614 $x619 (ite $x611 $x623 (ite $x609 $x632 (ite $x606 $x626 $x632))))))))))))))))))))))))))))))))
(assert
 (let ((?x313 (right s____)))
 (let ((?x405 (right s_____)))
 (let (($x628 (= ?x405 ?x313)))
 (let ((?x598 (rest ?x313)))
 (let (($x625 (= ?x405 ?x598)))
 (let (($x602 ((_ is stack ) ?x313)))
 (let (($x603 (= c____ right-to-center)))
 (let (($x604 (and $x603 $x602)))
 (let (($x605 (= c____ right-to-left)))
 (let (($x606 (and $x605 $x602)))
 (let ((?x454 (center s____)))
 (let ((?x595 (top ?x454)))
 (let ((?x597 (stack ?x595 ?x313)))
 (let (($x624 (= ?x405 ?x597)))
 (let (($x607 ((_ is stack ) ?x454)))
 (let (($x608 (= c____ center-to-right)))
 (let (($x609 (and $x608 $x607)))
 (let (($x610 (= c____ center-to-left)))
 (let (($x611 (and $x610 $x607)))
 (let ((?x286 (left s____)))
 (let (($x612 ((_ is stack ) ?x286)))
 (let (($x613 (= c____ left-to-right)))
 (let (($x614 (and $x613 $x612)))
 (let (($x645 (ite $x614 $x628 (ite $x611 $x628 (ite $x609 $x624 (ite $x606 $x625 (ite $x604 $x625 $x628)))))))
 (let ((?x451 (top ?x286)))
 (let ((?x591 (stack ?x451 ?x313)))
 (let (($x620 (= ?x405 ?x591)))
 (let (($x615 (= c____ left-to-center)))
 (let (($x616 (and $x615 $x612)))
 (ite $x616 $x620 $x645)))))))))))))))))))))))))))))))
(assert
 (let ((?x454 (center s____)))
 (let ((?x592 (center s_____)))
 (let (($x630 (= ?x592 ?x454)))
 (let ((?x313 (right s____)))
 (let ((?x599 (top ?x313)))
 (let ((?x601 (stack ?x599 ?x454)))
 (let (($x627 (= ?x592 ?x601)))
 (let (($x602 ((_ is stack ) ?x313)))
 (let (($x603 (= c____ right-to-center)))
 (let (($x604 (and $x603 $x602)))
 (let (($x605 (= c____ right-to-left)))
 (let (($x606 (and $x605 $x602)))
 (let ((?x594 (rest ?x454)))
 (let (($x622 (= ?x592 ?x594)))
 (let (($x607 ((_ is stack ) ?x454)))
 (let (($x608 (= c____ center-to-right)))
 (let (($x609 (and $x608 $x607)))
 (let (($x610 (= c____ center-to-left)))
 (let (($x611 (and $x610 $x607)))
 (let ((?x286 (left s____)))
 (let ((?x451 (top ?x286)))
 (let ((?x593 (stack ?x451 ?x454)))
 (let (($x621 (= ?x592 ?x593)))
 (let (($x612 ((_ is stack ) ?x286)))
 (let (($x613 (= c____ left-to-right)))
 (let (($x614 (and $x613 $x612)))
 (let (($x644 (ite $x614 $x621 (ite $x611 $x622 (ite $x609 $x622 (ite $x606 $x630 (ite $x604 $x627 $x630)))))))
 (let (($x615 (= c____ left-to-center)))
 (let (($x616 (and $x615 $x612)))
 (ite $x616 $x630 $x644)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x371 (left s_____)))
 (let ((?x510 (left s______)))
 (let (($x770 (= ?x510 ?x371)))
 (let ((?x405 (right s_____)))
 (let ((?x737 (top ?x405)))
 (let ((?x738 (stack ?x737 ?x371)))
 (let (($x764 (= ?x510 ?x738)))
 (let (($x740 ((_ is stack ) ?x405)))
 (let (($x743 (= c_____ right-to-left)))
 (let (($x744 (and $x743 $x740)))
 (let ((?x592 (center s_____)))
 (let (($x745 ((_ is stack ) ?x592)))
 (let (($x746 (= c_____ center-to-right)))
 (let (($x747 (and $x746 $x745)))
 (let ((?x733 (top ?x592)))
 (let ((?x734 (stack ?x733 ?x371)))
 (let (($x761 (= ?x510 ?x734)))
 (let (($x748 (= c_____ center-to-left)))
 (let (($x749 (and $x748 $x745)))
 (let ((?x543 (rest ?x371)))
 (let (($x757 (= ?x510 ?x543)))
 (let (($x750 ((_ is stack ) ?x371)))
 (let (($x751 (= c_____ left-to-right)))
 (let (($x752 (and $x751 $x750)))
 (let (($x753 (= c_____ left-to-center)))
 (let (($x754 (and $x753 $x750)))
 (ite $x754 $x757 (ite $x752 $x757 (ite $x749 $x761 (ite $x747 $x770 (ite $x744 $x764 $x770))))))))))))))))))))))))))))))))
(assert
 (let ((?x405 (right s_____)))
 (let ((?x544 (right s______)))
 (let (($x766 (= ?x544 ?x405)))
 (let ((?x736 (rest ?x405)))
 (let (($x763 (= ?x544 ?x736)))
 (let (($x740 ((_ is stack ) ?x405)))
 (let (($x741 (= c_____ right-to-center)))
 (let (($x742 (and $x741 $x740)))
 (let (($x743 (= c_____ right-to-left)))
 (let (($x744 (and $x743 $x740)))
 (let ((?x592 (center s_____)))
 (let ((?x733 (top ?x592)))
 (let ((?x735 (stack ?x733 ?x405)))
 (let (($x762 (= ?x544 ?x735)))
 (let (($x745 ((_ is stack ) ?x592)))
 (let (($x746 (= c_____ center-to-right)))
 (let (($x747 (and $x746 $x745)))
 (let (($x748 (= c_____ center-to-left)))
 (let (($x749 (and $x748 $x745)))
 (let ((?x371 (left s_____)))
 (let (($x750 ((_ is stack ) ?x371)))
 (let (($x751 (= c_____ left-to-right)))
 (let (($x752 (and $x751 $x750)))
 (let (($x783 (ite $x752 $x766 (ite $x749 $x766 (ite $x747 $x762 (ite $x744 $x763 (ite $x742 $x763 $x766)))))))
 (let ((?x590 (top ?x371)))
 (let ((?x729 (stack ?x590 ?x405)))
 (let (($x758 (= ?x544 ?x729)))
 (let (($x753 (= c_____ left-to-center)))
 (let (($x754 (and $x753 $x750)))
 (ite $x754 $x758 $x783)))))))))))))))))))))))))))))))
(assert
 (let ((?x592 (center s_____)))
 (let ((?x730 (center s______)))
 (let (($x768 (= ?x730 ?x592)))
 (let ((?x405 (right s_____)))
 (let ((?x737 (top ?x405)))
 (let ((?x739 (stack ?x737 ?x592)))
 (let (($x765 (= ?x730 ?x739)))
 (let (($x740 ((_ is stack ) ?x405)))
 (let (($x741 (= c_____ right-to-center)))
 (let (($x742 (and $x741 $x740)))
 (let (($x743 (= c_____ right-to-left)))
 (let (($x744 (and $x743 $x740)))
 (let ((?x732 (rest ?x592)))
 (let (($x760 (= ?x730 ?x732)))
 (let (($x745 ((_ is stack ) ?x592)))
 (let (($x746 (= c_____ center-to-right)))
 (let (($x747 (and $x746 $x745)))
 (let (($x748 (= c_____ center-to-left)))
 (let (($x749 (and $x748 $x745)))
 (let ((?x371 (left s_____)))
 (let ((?x590 (top ?x371)))
 (let ((?x731 (stack ?x590 ?x592)))
 (let (($x759 (= ?x730 ?x731)))
 (let (($x750 ((_ is stack ) ?x371)))
 (let (($x751 (= c_____ left-to-right)))
 (let (($x752 (and $x751 $x750)))
 (let (($x782 (ite $x752 $x759 (ite $x749 $x760 (ite $x747 $x760 (ite $x744 $x768 (ite $x742 $x765 $x768)))))))
 (let (($x753 (= c_____ left-to-center)))
 (let (($x754 (and $x753 $x750)))
 (ite $x754 $x768 $x782)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x510 (left s______)))
 (let ((?x648 (left s_______)))
 (let (($x908 (= ?x648 ?x510)))
 (let ((?x544 (right s______)))
 (let ((?x875 (top ?x544)))
 (let ((?x876 (stack ?x875 ?x510)))
 (let (($x902 (= ?x648 ?x876)))
 (let (($x878 ((_ is stack ) ?x544)))
 (let (($x881 (= c______ right-to-left)))
 (let (($x882 (and $x881 $x878)))
 (let ((?x730 (center s______)))
 (let (($x883 ((_ is stack ) ?x730)))
 (let (($x884 (= c______ center-to-right)))
 (let (($x885 (and $x884 $x883)))
 (let ((?x871 (top ?x730)))
 (let ((?x872 (stack ?x871 ?x510)))
 (let (($x899 (= ?x648 ?x872)))
 (let (($x886 (= c______ center-to-left)))
 (let (($x887 (and $x886 $x883)))
 (let ((?x681 (rest ?x510)))
 (let (($x895 (= ?x648 ?x681)))
 (let (($x888 ((_ is stack ) ?x510)))
 (let (($x889 (= c______ left-to-right)))
 (let (($x890 (and $x889 $x888)))
 (let (($x891 (= c______ left-to-center)))
 (let (($x892 (and $x891 $x888)))
 (ite $x892 $x895 (ite $x890 $x895 (ite $x887 $x899 (ite $x885 $x908 (ite $x882 $x902 $x908))))))))))))))))))))))))))))))))
(assert
 (let ((?x544 (right s______)))
 (let ((?x682 (right s_______)))
 (let (($x904 (= ?x682 ?x544)))
 (let ((?x874 (rest ?x544)))
 (let (($x901 (= ?x682 ?x874)))
 (let (($x878 ((_ is stack ) ?x544)))
 (let (($x879 (= c______ right-to-center)))
 (let (($x880 (and $x879 $x878)))
 (let (($x881 (= c______ right-to-left)))
 (let (($x882 (and $x881 $x878)))
 (let ((?x730 (center s______)))
 (let ((?x871 (top ?x730)))
 (let ((?x873 (stack ?x871 ?x544)))
 (let (($x900 (= ?x682 ?x873)))
 (let (($x883 ((_ is stack ) ?x730)))
 (let (($x884 (= c______ center-to-right)))
 (let (($x885 (and $x884 $x883)))
 (let (($x886 (= c______ center-to-left)))
 (let (($x887 (and $x886 $x883)))
 (let ((?x510 (left s______)))
 (let (($x888 ((_ is stack ) ?x510)))
 (let (($x889 (= c______ left-to-right)))
 (let (($x890 (and $x889 $x888)))
 (let (($x921 (ite $x890 $x904 (ite $x887 $x904 (ite $x885 $x900 (ite $x882 $x901 (ite $x880 $x901 $x904)))))))
 (let ((?x728 (top ?x510)))
 (let ((?x867 (stack ?x728 ?x544)))
 (let (($x896 (= ?x682 ?x867)))
 (let (($x891 (= c______ left-to-center)))
 (let (($x892 (and $x891 $x888)))
 (ite $x892 $x896 $x921)))))))))))))))))))))))))))))))
(assert
 (let ((?x730 (center s______)))
 (let ((?x868 (center s_______)))
 (let (($x906 (= ?x868 ?x730)))
 (let ((?x544 (right s______)))
 (let ((?x875 (top ?x544)))
 (let ((?x877 (stack ?x875 ?x730)))
 (let (($x903 (= ?x868 ?x877)))
 (let (($x878 ((_ is stack ) ?x544)))
 (let (($x879 (= c______ right-to-center)))
 (let (($x880 (and $x879 $x878)))
 (let (($x881 (= c______ right-to-left)))
 (let (($x882 (and $x881 $x878)))
 (let ((?x870 (rest ?x730)))
 (let (($x898 (= ?x868 ?x870)))
 (let (($x883 ((_ is stack ) ?x730)))
 (let (($x884 (= c______ center-to-right)))
 (let (($x885 (and $x884 $x883)))
 (let (($x886 (= c______ center-to-left)))
 (let (($x887 (and $x886 $x883)))
 (let ((?x510 (left s______)))
 (let ((?x728 (top ?x510)))
 (let ((?x869 (stack ?x728 ?x730)))
 (let (($x897 (= ?x868 ?x869)))
 (let (($x888 ((_ is stack ) ?x510)))
 (let (($x889 (= c______ left-to-right)))
 (let (($x890 (and $x889 $x888)))
 (let (($x920 (ite $x890 $x897 (ite $x887 $x898 (ite $x885 $x898 (ite $x882 $x906 (ite $x880 $x903 $x906)))))))
 (let (($x891 (= c______ left-to-center)))
 (let (($x892 (and $x891 $x888)))
 (ite $x892 $x906 $x920)))))))))))))))))))))))))))))))
(assert
 (let ((?x682 (right s_______)))
 (let (($x924 (= ?x682 empty)))
 (let ((?x868 (center s_______)))
 (let (($x955 (= ?x868 empty)))
 (let ((?x29 (stack E (stack B (stack A (stack C (stack D (stack F empty))))))))
 (let ((?x648 (left s_______)))
 (let (($x956 (= ?x648 ?x29)))
 (let (($x958 (not (and $x956 $x955 $x924))))
 (not $x958))))))))))
(check-sat)
(exit)
