(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x35 (stack U empty)))
 (let ((?x34 (stack Q ?x35)))
 (let ((?x36 (stack J ?x34)))
 (let ((?x37 (stack B ?x36)))
 (let ((?x38 (stack C ?x37)))
 (let ((?x39 (stack L ?x38)))
 (let ((?x40 (stack M ?x39)))
 (let ((?x41 (stack T ?x40)))
 (let ((?x42 (stack P ?x41)))
 (let ((?x43 (stack S ?x42)))
 (let ((?x44 (stack I ?x43)))
 (let ((?x45 (stack F ?x44)))
 (let ((?x46 (stack N ?x45)))
 (let ((?x47 (stack D ?x46)))
 (let ((?x48 (stack E ?x47)))
 (let ((?x49 (stack A ?x48)))
 (let ((?x124 (left s_tmp_)))
 (= ?x124 ?x49)))))))))))))))))))
(assert
 (let ((?x50 (stack R empty)))
 (let ((?x51 (stack K ?x50)))
 (let ((?x52 (stack G ?x51)))
 (let ((?x53 (stack V ?x52)))
 (let ((?x127 (center s_tmp__)))
 (= ?x127 ?x53)))))))
(assert
 (let ((?x54 (stack H empty)))
 (let ((?x55 (stack O ?x54)))
 (let ((?x130 (right s_tmp___)))
 (= ?x130 ?x55)))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x157 (left s_tmp__)))
 (= (left s_tmp___) ?x157)))
(assert
 (let ((?x127 (center s_tmp__)))
 (= (center s_tmp___) ?x127)))
(assert
 (let ((?x161 (center s_tmp_)))
 (= ?x161 (center s_tmp))))
(assert
 (let ((?x164 (right s_tmp_)))
 (= ?x164 (right s_tmp))))
(assert
 (let ((?x124 (left s_tmp_)))
 (let ((?x157 (left s_tmp__)))
 (= ?x157 ?x124))))
(assert
 (let ((?x164 (right s_tmp_)))
 (let ((?x168 (right s_tmp__)))
 (= ?x168 ?x164))))
(assert
 (= c__ c!1))
(assert
 (let ((?x101 (left s_)))
 (let ((?x320 (left s__)))
 (let (($x323 (= ?x320 ?x101)))
 (let ((?x104 (right s_)))
 (let (($x305 ((_ is stack ) ?x104)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x285 (and $x326 $x305)))
 (let ((?x106 (center s_)))
 (let (($x286 ((_ is stack ) ?x106)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x336 (and $x287 $x286)))
 (let (($x337 (= c_ center-to-left)))
 (let (($x338 (and $x337 $x286)))
 (let (($x308 (ite $x338 (= ?x320 (stack (top ?x106) ?x101)) (ite $x336 $x323 (ite $x285 (= ?x320 (stack (top ?x104) ?x101)) $x323)))))
 (let (($x277 (= ?x320 (rest ?x101))))
 (let (($x297 ((_ is stack ) ?x101)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x291 (= c_ left-to-center)))
 (let (($x292 (and $x291 $x297)))
 (ite $x292 $x277 (ite $x299 $x277 $x308)))))))))))))))))))))))
(assert
 (let ((?x104 (right s_)))
 (let ((?x313 (right s__)))
 (let (($x310 (= ?x313 ?x104)))
 (let (($x334 (= ?x313 (rest ?x104))))
 (let (($x305 ((_ is stack ) ?x104)))
 (let (($x324 (= c_ right-to-center)))
 (let (($x325 (and $x324 $x305)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x285 (and $x326 $x305)))
 (let ((?x106 (center s_)))
 (let (($x286 ((_ is stack ) ?x106)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x336 (and $x287 $x286)))
 (let (($x332 (ite $x336 (= ?x313 (stack (top ?x106) ?x104)) (ite $x285 $x334 (ite $x325 $x334 $x310)))))
 (let (($x337 (= c_ center-to-left)))
 (let (($x338 (and $x337 $x286)))
 (let ((?x101 (left s_)))
 (let (($x297 ((_ is stack ) ?x101)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x291 (= c_ left-to-center)))
 (let (($x292 (and $x291 $x297)))
 (ite $x292 (= ?x313 (stack (top ?x101) ?x104)) (ite $x299 $x310 (ite $x338 $x310 $x332))))))))))))))))))))))))))
(assert
 (let ((?x106 (center s_)))
 (let ((?x328 (center s__)))
 (let (($x321 (= ?x328 ?x106)))
 (let ((?x104 (right s_)))
 (let (($x305 ((_ is stack ) ?x104)))
 (let (($x324 (= c_ right-to-center)))
 (let (($x325 (and $x324 $x305)))
 (let (($x326 (= c_ right-to-left)))
 (let (($x285 (and $x326 $x305)))
 (let (($x316 (= ?x328 (rest ?x106))))
 (let (($x286 ((_ is stack ) ?x106)))
 (let (($x287 (= c_ center-to-right)))
 (let (($x336 (and $x287 $x286)))
 (let (($x331 (ite $x336 $x316 (ite $x285 $x321 (ite $x325 (= ?x328 (stack (top ?x104) ?x106)) $x321)))))
 (let (($x337 (= c_ center-to-left)))
 (let (($x338 (and $x337 $x286)))
 (let ((?x101 (left s_)))
 (let (($x297 ((_ is stack ) ?x101)))
 (let (($x298 (= c_ left-to-right)))
 (let (($x299 (and $x298 $x297)))
 (let (($x291 (= c_ left-to-center)))
 (let (($x292 (and $x291 $x297)))
 (ite $x292 $x321 (ite $x299 (= ?x328 (stack (top ?x101) ?x106)) (ite $x338 $x316 $x331))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x320 (left s__)))
 (let ((?x171 (left s___)))
 (let (($x452 (= ?x171 ?x320)))
 (let ((?x313 (right s__)))
 (let ((?x419 (top ?x313)))
 (let ((?x420 (stack ?x419 ?x320)))
 (let (($x446 (= ?x171 ?x420)))
 (let (($x422 ((_ is stack ) ?x313)))
 (let (($x425 (= c__ right-to-left)))
 (let (($x426 (and $x425 $x422)))
 (let ((?x328 (center s__)))
 (let (($x427 ((_ is stack ) ?x328)))
 (let (($x428 (= c__ center-to-right)))
 (let (($x429 (and $x428 $x427)))
 (let ((?x415 (top ?x328)))
 (let ((?x416 (stack ?x415 ?x320)))
 (let (($x443 (= ?x171 ?x416)))
 (let (($x430 (= c__ center-to-left)))
 (let (($x431 (and $x430 $x427)))
 (let ((?x173 (rest ?x320)))
 (let (($x439 (= ?x171 ?x173)))
 (let (($x432 ((_ is stack ) ?x320)))
 (let (($x433 (= c__ left-to-right)))
 (let (($x434 (and $x433 $x432)))
 (let (($x435 (= c__ left-to-center)))
 (let (($x436 (and $x435 $x432)))
 (ite $x436 $x439 (ite $x434 $x439 (ite $x431 $x443 (ite $x429 $x452 (ite $x426 $x446 $x452))))))))))))))))))))))))))))))))
(assert
 (let ((?x313 (right s__)))
 (let ((?x174 (right s___)))
 (let (($x448 (= ?x174 ?x313)))
 (let ((?x418 (rest ?x313)))
 (let (($x445 (= ?x174 ?x418)))
 (let (($x422 ((_ is stack ) ?x313)))
 (let (($x423 (= c__ right-to-center)))
 (let (($x424 (and $x423 $x422)))
 (let (($x425 (= c__ right-to-left)))
 (let (($x426 (and $x425 $x422)))
 (let ((?x328 (center s__)))
 (let ((?x415 (top ?x328)))
 (let ((?x417 (stack ?x415 ?x313)))
 (let (($x444 (= ?x174 ?x417)))
 (let (($x427 ((_ is stack ) ?x328)))
 (let (($x428 (= c__ center-to-right)))
 (let (($x429 (and $x428 $x427)))
 (let (($x430 (= c__ center-to-left)))
 (let (($x431 (and $x430 $x427)))
 (let ((?x320 (left s__)))
 (let (($x432 ((_ is stack ) ?x320)))
 (let (($x433 (= c__ left-to-right)))
 (let (($x434 (and $x433 $x432)))
 (let (($x465 (ite $x434 $x448 (ite $x431 $x448 (ite $x429 $x444 (ite $x426 $x445 (ite $x424 $x445 $x448)))))))
 (let ((?x275 (top ?x320)))
 (let ((?x411 (stack ?x275 ?x313)))
 (let (($x440 (= ?x174 ?x411)))
 (let (($x435 (= c__ left-to-center)))
 (let (($x436 (and $x435 $x432)))
 (ite $x436 $x440 $x465)))))))))))))))))))))))))))))))
(assert
 (let ((?x328 (center s__)))
 (let ((?x412 (center s___)))
 (let (($x450 (= ?x412 ?x328)))
 (let ((?x313 (right s__)))
 (let ((?x419 (top ?x313)))
 (let ((?x421 (stack ?x419 ?x328)))
 (let (($x447 (= ?x412 ?x421)))
 (let (($x422 ((_ is stack ) ?x313)))
 (let (($x423 (= c__ right-to-center)))
 (let (($x424 (and $x423 $x422)))
 (let (($x425 (= c__ right-to-left)))
 (let (($x426 (and $x425 $x422)))
 (let ((?x414 (rest ?x328)))
 (let (($x442 (= ?x412 ?x414)))
 (let (($x427 ((_ is stack ) ?x328)))
 (let (($x428 (= c__ center-to-right)))
 (let (($x429 (and $x428 $x427)))
 (let (($x430 (= c__ center-to-left)))
 (let (($x431 (and $x430 $x427)))
 (let ((?x320 (left s__)))
 (let ((?x275 (top ?x320)))
 (let ((?x413 (stack ?x275 ?x328)))
 (let (($x441 (= ?x412 ?x413)))
 (let (($x432 ((_ is stack ) ?x320)))
 (let (($x433 (= c__ left-to-right)))
 (let (($x434 (and $x433 $x432)))
 (let (($x464 (ite $x434 $x441 (ite $x431 $x442 (ite $x429 $x442 (ite $x426 $x450 (ite $x424 $x447 $x450)))))))
 (let (($x435 (= c__ left-to-center)))
 (let (($x436 (and $x435 $x432)))
 (ite $x436 $x450 $x464)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x171 (left s___)))
 (let ((?x339 (left s____)))
 (let (($x590 (= ?x339 ?x171)))
 (let ((?x174 (right s___)))
 (let ((?x557 (top ?x174)))
 (let ((?x558 (stack ?x557 ?x171)))
 (let (($x584 (= ?x339 ?x558)))
 (let (($x560 ((_ is stack ) ?x174)))
 (let (($x563 (= c___ right-to-left)))
 (let (($x564 (and $x563 $x560)))
 (let ((?x412 (center s___)))
 (let (($x565 ((_ is stack ) ?x412)))
 (let (($x566 (= c___ center-to-right)))
 (let (($x567 (and $x566 $x565)))
 (let ((?x553 (top ?x412)))
 (let ((?x554 (stack ?x553 ?x171)))
 (let (($x581 (= ?x339 ?x554)))
 (let (($x568 (= c___ center-to-left)))
 (let (($x569 (and $x568 $x565)))
 (let ((?x381 (rest ?x171)))
 (let (($x577 (= ?x339 ?x381)))
 (let (($x570 ((_ is stack ) ?x171)))
 (let (($x571 (= c___ left-to-right)))
 (let (($x572 (and $x571 $x570)))
 (let (($x573 (= c___ left-to-center)))
 (let (($x574 (and $x573 $x570)))
 (ite $x574 $x577 (ite $x572 $x577 (ite $x569 $x581 (ite $x567 $x590 (ite $x564 $x584 $x590))))))))))))))))))))))))))))))))
(assert
 (let ((?x174 (right s___)))
 (let ((?x382 (right s____)))
 (let (($x586 (= ?x382 ?x174)))
 (let ((?x556 (rest ?x174)))
 (let (($x583 (= ?x382 ?x556)))
 (let (($x560 ((_ is stack ) ?x174)))
 (let (($x561 (= c___ right-to-center)))
 (let (($x562 (and $x561 $x560)))
 (let (($x563 (= c___ right-to-left)))
 (let (($x564 (and $x563 $x560)))
 (let ((?x412 (center s___)))
 (let ((?x553 (top ?x412)))
 (let ((?x555 (stack ?x553 ?x174)))
 (let (($x582 (= ?x382 ?x555)))
 (let (($x565 ((_ is stack ) ?x412)))
 (let (($x566 (= c___ center-to-right)))
 (let (($x567 (and $x566 $x565)))
 (let (($x568 (= c___ center-to-left)))
 (let (($x569 (and $x568 $x565)))
 (let ((?x171 (left s___)))
 (let (($x570 ((_ is stack ) ?x171)))
 (let (($x571 (= c___ left-to-right)))
 (let (($x572 (and $x571 $x570)))
 (let (($x603 (ite $x572 $x586 (ite $x569 $x586 (ite $x567 $x582 (ite $x564 $x583 (ite $x562 $x583 $x586)))))))
 (let ((?x410 (top ?x171)))
 (let ((?x549 (stack ?x410 ?x174)))
 (let (($x578 (= ?x382 ?x549)))
 (let (($x573 (= c___ left-to-center)))
 (let (($x574 (and $x573 $x570)))
 (ite $x574 $x578 $x603)))))))))))))))))))))))))))))))
(assert
 (let ((?x412 (center s___)))
 (let ((?x550 (center s____)))
 (let (($x588 (= ?x550 ?x412)))
 (let ((?x174 (right s___)))
 (let ((?x557 (top ?x174)))
 (let ((?x559 (stack ?x557 ?x412)))
 (let (($x585 (= ?x550 ?x559)))
 (let (($x560 ((_ is stack ) ?x174)))
 (let (($x561 (= c___ right-to-center)))
 (let (($x562 (and $x561 $x560)))
 (let (($x563 (= c___ right-to-left)))
 (let (($x564 (and $x563 $x560)))
 (let ((?x552 (rest ?x412)))
 (let (($x580 (= ?x550 ?x552)))
 (let (($x565 ((_ is stack ) ?x412)))
 (let (($x566 (= c___ center-to-right)))
 (let (($x567 (and $x566 $x565)))
 (let (($x568 (= c___ center-to-left)))
 (let (($x569 (and $x568 $x565)))
 (let ((?x171 (left s___)))
 (let ((?x410 (top ?x171)))
 (let ((?x551 (stack ?x410 ?x412)))
 (let (($x579 (= ?x550 ?x551)))
 (let (($x570 ((_ is stack ) ?x171)))
 (let (($x571 (= c___ left-to-right)))
 (let (($x572 (and $x571 $x570)))
 (let (($x602 (ite $x572 $x579 (ite $x569 $x580 (ite $x567 $x580 (ite $x564 $x588 (ite $x562 $x585 $x588)))))))
 (let (($x573 (= c___ left-to-center)))
 (let (($x574 (and $x573 $x570)))
 (ite $x574 $x588 $x602)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x339 (left s____)))
 (let ((?x468 (left s_____)))
 (let (($x728 (= ?x468 ?x339)))
 (let ((?x382 (right s____)))
 (let ((?x695 (top ?x382)))
 (let ((?x696 (stack ?x695 ?x339)))
 (let (($x722 (= ?x468 ?x696)))
 (let (($x698 ((_ is stack ) ?x382)))
 (let (($x701 (= c____ right-to-left)))
 (let (($x702 (and $x701 $x698)))
 (let ((?x550 (center s____)))
 (let (($x703 ((_ is stack ) ?x550)))
 (let (($x704 (= c____ center-to-right)))
 (let (($x705 (and $x704 $x703)))
 (let ((?x691 (top ?x550)))
 (let ((?x692 (stack ?x691 ?x339)))
 (let (($x719 (= ?x468 ?x692)))
 (let (($x706 (= c____ center-to-left)))
 (let (($x707 (and $x706 $x703)))
 (let ((?x501 (rest ?x339)))
 (let (($x715 (= ?x468 ?x501)))
 (let (($x708 ((_ is stack ) ?x339)))
 (let (($x709 (= c____ left-to-right)))
 (let (($x710 (and $x709 $x708)))
 (let (($x711 (= c____ left-to-center)))
 (let (($x712 (and $x711 $x708)))
 (ite $x712 $x715 (ite $x710 $x715 (ite $x707 $x719 (ite $x705 $x728 (ite $x702 $x722 $x728))))))))))))))))))))))))))))))))
(assert
 (let ((?x382 (right s____)))
 (let ((?x502 (right s_____)))
 (let (($x724 (= ?x502 ?x382)))
 (let ((?x694 (rest ?x382)))
 (let (($x721 (= ?x502 ?x694)))
 (let (($x698 ((_ is stack ) ?x382)))
 (let (($x699 (= c____ right-to-center)))
 (let (($x700 (and $x699 $x698)))
 (let (($x701 (= c____ right-to-left)))
 (let (($x702 (and $x701 $x698)))
 (let ((?x550 (center s____)))
 (let ((?x691 (top ?x550)))
 (let ((?x693 (stack ?x691 ?x382)))
 (let (($x720 (= ?x502 ?x693)))
 (let (($x703 ((_ is stack ) ?x550)))
 (let (($x704 (= c____ center-to-right)))
 (let (($x705 (and $x704 $x703)))
 (let (($x706 (= c____ center-to-left)))
 (let (($x707 (and $x706 $x703)))
 (let ((?x339 (left s____)))
 (let (($x708 ((_ is stack ) ?x339)))
 (let (($x709 (= c____ left-to-right)))
 (let (($x710 (and $x709 $x708)))
 (let (($x741 (ite $x710 $x724 (ite $x707 $x724 (ite $x705 $x720 (ite $x702 $x721 (ite $x700 $x721 $x724)))))))
 (let ((?x548 (top ?x339)))
 (let ((?x687 (stack ?x548 ?x382)))
 (let (($x716 (= ?x502 ?x687)))
 (let (($x711 (= c____ left-to-center)))
 (let (($x712 (and $x711 $x708)))
 (ite $x712 $x716 $x741)))))))))))))))))))))))))))))))
(assert
 (let ((?x550 (center s____)))
 (let ((?x688 (center s_____)))
 (let (($x726 (= ?x688 ?x550)))
 (let ((?x382 (right s____)))
 (let ((?x695 (top ?x382)))
 (let ((?x697 (stack ?x695 ?x550)))
 (let (($x723 (= ?x688 ?x697)))
 (let (($x698 ((_ is stack ) ?x382)))
 (let (($x699 (= c____ right-to-center)))
 (let (($x700 (and $x699 $x698)))
 (let (($x701 (= c____ right-to-left)))
 (let (($x702 (and $x701 $x698)))
 (let ((?x690 (rest ?x550)))
 (let (($x718 (= ?x688 ?x690)))
 (let (($x703 ((_ is stack ) ?x550)))
 (let (($x704 (= c____ center-to-right)))
 (let (($x705 (and $x704 $x703)))
 (let (($x706 (= c____ center-to-left)))
 (let (($x707 (and $x706 $x703)))
 (let ((?x339 (left s____)))
 (let ((?x548 (top ?x339)))
 (let ((?x689 (stack ?x548 ?x550)))
 (let (($x717 (= ?x688 ?x689)))
 (let (($x708 ((_ is stack ) ?x339)))
 (let (($x709 (= c____ left-to-right)))
 (let (($x710 (and $x709 $x708)))
 (let (($x740 (ite $x710 $x717 (ite $x707 $x718 (ite $x705 $x718 (ite $x702 $x726 (ite $x700 $x723 $x726)))))))
 (let (($x711 (= c____ left-to-center)))
 (let (($x712 (and $x711 $x708)))
 (ite $x712 $x726 $x740)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x468 (left s_____)))
 (let ((?x606 (left s______)))
 (let (($x866 (= ?x606 ?x468)))
 (let ((?x502 (right s_____)))
 (let ((?x833 (top ?x502)))
 (let ((?x834 (stack ?x833 ?x468)))
 (let (($x860 (= ?x606 ?x834)))
 (let (($x836 ((_ is stack ) ?x502)))
 (let (($x839 (= c_____ right-to-left)))
 (let (($x840 (and $x839 $x836)))
 (let ((?x688 (center s_____)))
 (let (($x841 ((_ is stack ) ?x688)))
 (let (($x842 (= c_____ center-to-right)))
 (let (($x843 (and $x842 $x841)))
 (let ((?x829 (top ?x688)))
 (let ((?x830 (stack ?x829 ?x468)))
 (let (($x857 (= ?x606 ?x830)))
 (let (($x844 (= c_____ center-to-left)))
 (let (($x845 (and $x844 $x841)))
 (let ((?x639 (rest ?x468)))
 (let (($x853 (= ?x606 ?x639)))
 (let (($x846 ((_ is stack ) ?x468)))
 (let (($x847 (= c_____ left-to-right)))
 (let (($x848 (and $x847 $x846)))
 (let (($x849 (= c_____ left-to-center)))
 (let (($x850 (and $x849 $x846)))
 (ite $x850 $x853 (ite $x848 $x853 (ite $x845 $x857 (ite $x843 $x866 (ite $x840 $x860 $x866))))))))))))))))))))))))))))))))
(assert
 (let ((?x502 (right s_____)))
 (let ((?x640 (right s______)))
 (let (($x862 (= ?x640 ?x502)))
 (let ((?x832 (rest ?x502)))
 (let (($x859 (= ?x640 ?x832)))
 (let (($x836 ((_ is stack ) ?x502)))
 (let (($x837 (= c_____ right-to-center)))
 (let (($x838 (and $x837 $x836)))
 (let (($x839 (= c_____ right-to-left)))
 (let (($x840 (and $x839 $x836)))
 (let ((?x688 (center s_____)))
 (let ((?x829 (top ?x688)))
 (let ((?x831 (stack ?x829 ?x502)))
 (let (($x858 (= ?x640 ?x831)))
 (let (($x841 ((_ is stack ) ?x688)))
 (let (($x842 (= c_____ center-to-right)))
 (let (($x843 (and $x842 $x841)))
 (let (($x844 (= c_____ center-to-left)))
 (let (($x845 (and $x844 $x841)))
 (let ((?x468 (left s_____)))
 (let (($x846 ((_ is stack ) ?x468)))
 (let (($x847 (= c_____ left-to-right)))
 (let (($x848 (and $x847 $x846)))
 (let (($x879 (ite $x848 $x862 (ite $x845 $x862 (ite $x843 $x858 (ite $x840 $x859 (ite $x838 $x859 $x862)))))))
 (let ((?x686 (top ?x468)))
 (let ((?x825 (stack ?x686 ?x502)))
 (let (($x854 (= ?x640 ?x825)))
 (let (($x849 (= c_____ left-to-center)))
 (let (($x850 (and $x849 $x846)))
 (ite $x850 $x854 $x879)))))))))))))))))))))))))))))))
(assert
 (let ((?x688 (center s_____)))
 (let ((?x826 (center s______)))
 (let (($x864 (= ?x826 ?x688)))
 (let ((?x502 (right s_____)))
 (let ((?x833 (top ?x502)))
 (let ((?x835 (stack ?x833 ?x688)))
 (let (($x861 (= ?x826 ?x835)))
 (let (($x836 ((_ is stack ) ?x502)))
 (let (($x837 (= c_____ right-to-center)))
 (let (($x838 (and $x837 $x836)))
 (let (($x839 (= c_____ right-to-left)))
 (let (($x840 (and $x839 $x836)))
 (let ((?x828 (rest ?x688)))
 (let (($x856 (= ?x826 ?x828)))
 (let (($x841 ((_ is stack ) ?x688)))
 (let (($x842 (= c_____ center-to-right)))
 (let (($x843 (and $x842 $x841)))
 (let (($x844 (= c_____ center-to-left)))
 (let (($x845 (and $x844 $x841)))
 (let ((?x468 (left s_____)))
 (let ((?x686 (top ?x468)))
 (let ((?x827 (stack ?x686 ?x688)))
 (let (($x855 (= ?x826 ?x827)))
 (let (($x846 ((_ is stack ) ?x468)))
 (let (($x847 (= c_____ left-to-right)))
 (let (($x848 (and $x847 $x846)))
 (let (($x878 (ite $x848 $x855 (ite $x845 $x856 (ite $x843 $x856 (ite $x840 $x864 (ite $x838 $x861 $x864)))))))
 (let (($x849 (= c_____ left-to-center)))
 (let (($x850 (and $x849 $x846)))
 (ite $x850 $x864 $x878)))))))))))))))))))))))))))))))
(assert
 (let ((?x77 (stack O (stack K (stack A empty)))))
 (let ((?x640 (right s______)))
 (let (($x882 (= ?x640 ?x77)))
 (let ((?x74 (stack R (stack J (stack P empty)))))
 (let ((?x826 (center s______)))
 (let (($x913 (= ?x826 ?x74)))
 (let ((?x61 (stack M (stack H (stack E (stack U (stack C (stack N empty))))))))
 (let ((?x67 (stack L (stack F (stack S (stack B (stack T (stack D ?x61))))))))
 (let ((?x71 (stack I (stack G (stack V (stack Q ?x67))))))
 (let ((?x606 (left s______)))
 (let (($x914 (= ?x606 ?x71)))
 (let (($x916 (not (and $x914 $x913 $x882))))
 (not $x916))))))))))))))
(check-sat)
(exit)
