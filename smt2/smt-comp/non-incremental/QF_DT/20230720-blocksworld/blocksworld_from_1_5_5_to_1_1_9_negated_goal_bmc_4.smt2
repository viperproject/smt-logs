(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x23 (stack K empty)))
 (let ((?x91 (left s_tmp_)))
 (= ?x91 ?x23))))
(assert
 (let ((?x24 (stack G empty)))
 (let ((?x25 (stack C ?x24)))
 (let ((?x26 (stack A ?x25)))
 (let ((?x27 (stack E ?x26)))
 (let ((?x28 (stack J ?x27)))
 (let ((?x94 (center s_tmp__)))
 (= ?x94 ?x28))))))))
(assert
 (let ((?x29 (stack B empty)))
 (let ((?x30 (stack D ?x29)))
 (let ((?x31 (stack F ?x30)))
 (let ((?x32 (stack H ?x31)))
 (let ((?x33 (stack I ?x32)))
 (let ((?x97 (right s_tmp___)))
 (= ?x97 ?x33))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x124 (left s_tmp__)))
 (= (left s_tmp___) ?x124)))
(assert
 (let ((?x94 (center s_tmp__)))
 (= (center s_tmp___) ?x94)))
(assert
 (let ((?x128 (center s_tmp_)))
 (= ?x128 (center s_tmp))))
(assert
 (let ((?x131 (right s_tmp_)))
 (= ?x131 (right s_tmp))))
(assert
 (let ((?x91 (left s_tmp_)))
 (let ((?x124 (left s_tmp__)))
 (= ?x124 ?x91))))
(assert
 (let ((?x131 (right s_tmp_)))
 (let ((?x135 (right s_tmp__)))
 (= ?x135 ?x131))))
(assert
 (= c__ c!1))
(assert
 (let ((?x68 (left s_)))
 (let ((?x230 (left s__)))
 (let (($x257 (= ?x230 ?x68)))
 (let ((?x71 (right s_)))
 (let (($x221 ((_ is stack ) ?x71)))
 (let (($x215 (= c_ right-to-left)))
 (let (($x231 (and $x215 $x221)))
 (let ((?x73 (center s_)))
 (let (($x232 ((_ is stack ) ?x73)))
 (let (($x233 (= c_ center-to-right)))
 (let (($x234 (and $x233 $x232)))
 (let (($x235 (= c_ center-to-left)))
 (let (($x236 (and $x235 $x232)))
 (let (($x266 (ite $x236 (= ?x230 (stack (top ?x73) ?x68)) (ite $x234 $x257 (ite $x231 (= ?x230 (stack (top ?x71) ?x68)) $x257)))))
 (let (($x244 (= ?x230 (rest ?x68))))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 $x244 (ite $x239 $x244 $x266)))))))))))))))))))))))
(assert
 (let ((?x71 (right s_)))
 (let ((?x217 (right s__)))
 (let (($x253 (= ?x217 ?x71)))
 (let (($x250 (= ?x217 (rest ?x71))))
 (let (($x221 ((_ is stack ) ?x71)))
 (let (($x213 (= c_ right-to-center)))
 (let (($x214 (and $x213 $x221)))
 (let (($x215 (= c_ right-to-left)))
 (let (($x231 (and $x215 $x221)))
 (let ((?x73 (center s_)))
 (let (($x232 ((_ is stack ) ?x73)))
 (let (($x233 (= c_ center-to-right)))
 (let (($x234 (and $x233 $x232)))
 (let (($x263 (ite $x234 (= ?x217 (stack (top ?x73) ?x71)) (ite $x231 $x250 (ite $x214 $x250 $x253)))))
 (let (($x235 (= c_ center-to-left)))
 (let (($x236 (and $x235 $x232)))
 (let ((?x68 (left s_)))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 (= ?x217 (stack (top ?x68) ?x71)) (ite $x239 $x253 (ite $x236 $x253 $x263))))))))))))))))))))))))))
(assert
 (let ((?x73 (center s_)))
 (let ((?x223 (center s__)))
 (let (($x255 (= ?x223 ?x73)))
 (let ((?x71 (right s_)))
 (let (($x221 ((_ is stack ) ?x71)))
 (let (($x213 (= c_ right-to-center)))
 (let (($x214 (and $x213 $x221)))
 (let (($x215 (= c_ right-to-left)))
 (let (($x231 (and $x215 $x221)))
 (let (($x247 (= ?x223 (rest ?x73))))
 (let (($x232 ((_ is stack ) ?x73)))
 (let (($x233 (= c_ center-to-right)))
 (let (($x234 (and $x233 $x232)))
 (let (($x262 (ite $x234 $x247 (ite $x231 $x255 (ite $x214 (= ?x223 (stack (top ?x71) ?x73)) $x255)))))
 (let (($x235 (= c_ center-to-left)))
 (let (($x236 (and $x235 $x232)))
 (let ((?x68 (left s_)))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 $x255 (ite $x239 (= ?x223 (stack (top ?x68) ?x73)) (ite $x236 $x247 $x262))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x230 (left s__)))
 (let ((?x138 (left s___)))
 (let (($x386 (= ?x138 ?x230)))
 (let ((?x217 (right s__)))
 (let ((?x353 (top ?x217)))
 (let ((?x354 (stack ?x353 ?x230)))
 (let (($x380 (= ?x138 ?x354)))
 (let (($x356 ((_ is stack ) ?x217)))
 (let (($x359 (= c__ right-to-left)))
 (let (($x360 (and $x359 $x356)))
 (let ((?x223 (center s__)))
 (let (($x361 ((_ is stack ) ?x223)))
 (let (($x362 (= c__ center-to-right)))
 (let (($x363 (and $x362 $x361)))
 (let ((?x349 (top ?x223)))
 (let ((?x350 (stack ?x349 ?x230)))
 (let (($x377 (= ?x138 ?x350)))
 (let (($x364 (= c__ center-to-left)))
 (let (($x365 (and $x364 $x361)))
 (let ((?x140 (rest ?x230)))
 (let (($x373 (= ?x138 ?x140)))
 (let (($x366 ((_ is stack ) ?x230)))
 (let (($x367 (= c__ left-to-right)))
 (let (($x368 (and $x367 $x366)))
 (let (($x369 (= c__ left-to-center)))
 (let (($x370 (and $x369 $x366)))
 (ite $x370 $x373 (ite $x368 $x373 (ite $x365 $x377 (ite $x363 $x386 (ite $x360 $x380 $x386))))))))))))))))))))))))))))))))
(assert
 (let ((?x217 (right s__)))
 (let ((?x141 (right s___)))
 (let (($x382 (= ?x141 ?x217)))
 (let ((?x352 (rest ?x217)))
 (let (($x379 (= ?x141 ?x352)))
 (let (($x356 ((_ is stack ) ?x217)))
 (let (($x357 (= c__ right-to-center)))
 (let (($x358 (and $x357 $x356)))
 (let (($x359 (= c__ right-to-left)))
 (let (($x360 (and $x359 $x356)))
 (let ((?x223 (center s__)))
 (let ((?x349 (top ?x223)))
 (let ((?x351 (stack ?x349 ?x217)))
 (let (($x378 (= ?x141 ?x351)))
 (let (($x361 ((_ is stack ) ?x223)))
 (let (($x362 (= c__ center-to-right)))
 (let (($x363 (and $x362 $x361)))
 (let (($x364 (= c__ center-to-left)))
 (let (($x365 (and $x364 $x361)))
 (let ((?x230 (left s__)))
 (let (($x366 ((_ is stack ) ?x230)))
 (let (($x367 (= c__ left-to-right)))
 (let (($x368 (and $x367 $x366)))
 (let (($x399 (ite $x368 $x382 (ite $x365 $x382 (ite $x363 $x378 (ite $x360 $x379 (ite $x358 $x379 $x382)))))))
 (let ((?x209 (top ?x230)))
 (let ((?x345 (stack ?x209 ?x217)))
 (let (($x374 (= ?x141 ?x345)))
 (let (($x369 (= c__ left-to-center)))
 (let (($x370 (and $x369 $x366)))
 (ite $x370 $x374 $x399)))))))))))))))))))))))))))))))
(assert
 (let ((?x223 (center s__)))
 (let ((?x346 (center s___)))
 (let (($x384 (= ?x346 ?x223)))
 (let ((?x217 (right s__)))
 (let ((?x353 (top ?x217)))
 (let ((?x355 (stack ?x353 ?x223)))
 (let (($x381 (= ?x346 ?x355)))
 (let (($x356 ((_ is stack ) ?x217)))
 (let (($x357 (= c__ right-to-center)))
 (let (($x358 (and $x357 $x356)))
 (let (($x359 (= c__ right-to-left)))
 (let (($x360 (and $x359 $x356)))
 (let ((?x348 (rest ?x223)))
 (let (($x376 (= ?x346 ?x348)))
 (let (($x361 ((_ is stack ) ?x223)))
 (let (($x362 (= c__ center-to-right)))
 (let (($x363 (and $x362 $x361)))
 (let (($x364 (= c__ center-to-left)))
 (let (($x365 (and $x364 $x361)))
 (let ((?x230 (left s__)))
 (let ((?x209 (top ?x230)))
 (let ((?x347 (stack ?x209 ?x223)))
 (let (($x375 (= ?x346 ?x347)))
 (let (($x366 ((_ is stack ) ?x230)))
 (let (($x367 (= c__ left-to-right)))
 (let (($x368 (and $x367 $x366)))
 (let (($x398 (ite $x368 $x375 (ite $x365 $x376 (ite $x363 $x376 (ite $x360 $x384 (ite $x358 $x381 $x384)))))))
 (let (($x369 (= c__ left-to-center)))
 (let (($x370 (and $x369 $x366)))
 (ite $x370 $x384 $x398)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x138 (left s___)))
 (let ((?x273 (left s____)))
 (let (($x524 (= ?x273 ?x138)))
 (let ((?x141 (right s___)))
 (let ((?x491 (top ?x141)))
 (let ((?x492 (stack ?x491 ?x138)))
 (let (($x518 (= ?x273 ?x492)))
 (let (($x494 ((_ is stack ) ?x141)))
 (let (($x497 (= c___ right-to-left)))
 (let (($x498 (and $x497 $x494)))
 (let ((?x346 (center s___)))
 (let (($x499 ((_ is stack ) ?x346)))
 (let (($x500 (= c___ center-to-right)))
 (let (($x501 (and $x500 $x499)))
 (let ((?x487 (top ?x346)))
 (let ((?x488 (stack ?x487 ?x138)))
 (let (($x515 (= ?x273 ?x488)))
 (let (($x502 (= c___ center-to-left)))
 (let (($x503 (and $x502 $x499)))
 (let ((?x317 (rest ?x138)))
 (let (($x511 (= ?x273 ?x317)))
 (let (($x504 ((_ is stack ) ?x138)))
 (let (($x505 (= c___ left-to-right)))
 (let (($x506 (and $x505 $x504)))
 (let (($x507 (= c___ left-to-center)))
 (let (($x508 (and $x507 $x504)))
 (ite $x508 $x511 (ite $x506 $x511 (ite $x503 $x515 (ite $x501 $x524 (ite $x498 $x518 $x524))))))))))))))))))))))))))))))))
(assert
 (let ((?x141 (right s___)))
 (let ((?x318 (right s____)))
 (let (($x520 (= ?x318 ?x141)))
 (let ((?x490 (rest ?x141)))
 (let (($x517 (= ?x318 ?x490)))
 (let (($x494 ((_ is stack ) ?x141)))
 (let (($x495 (= c___ right-to-center)))
 (let (($x496 (and $x495 $x494)))
 (let (($x497 (= c___ right-to-left)))
 (let (($x498 (and $x497 $x494)))
 (let ((?x346 (center s___)))
 (let ((?x487 (top ?x346)))
 (let ((?x489 (stack ?x487 ?x141)))
 (let (($x516 (= ?x318 ?x489)))
 (let (($x499 ((_ is stack ) ?x346)))
 (let (($x500 (= c___ center-to-right)))
 (let (($x501 (and $x500 $x499)))
 (let (($x502 (= c___ center-to-left)))
 (let (($x503 (and $x502 $x499)))
 (let ((?x138 (left s___)))
 (let (($x504 ((_ is stack ) ?x138)))
 (let (($x505 (= c___ left-to-right)))
 (let (($x506 (and $x505 $x504)))
 (let (($x537 (ite $x506 $x520 (ite $x503 $x520 (ite $x501 $x516 (ite $x498 $x517 (ite $x496 $x517 $x520)))))))
 (let ((?x344 (top ?x138)))
 (let ((?x483 (stack ?x344 ?x141)))
 (let (($x512 (= ?x318 ?x483)))
 (let (($x507 (= c___ left-to-center)))
 (let (($x508 (and $x507 $x504)))
 (ite $x508 $x512 $x537)))))))))))))))))))))))))))))))
(assert
 (let ((?x346 (center s___)))
 (let ((?x484 (center s____)))
 (let (($x522 (= ?x484 ?x346)))
 (let ((?x141 (right s___)))
 (let ((?x491 (top ?x141)))
 (let ((?x493 (stack ?x491 ?x346)))
 (let (($x519 (= ?x484 ?x493)))
 (let (($x494 ((_ is stack ) ?x141)))
 (let (($x495 (= c___ right-to-center)))
 (let (($x496 (and $x495 $x494)))
 (let (($x497 (= c___ right-to-left)))
 (let (($x498 (and $x497 $x494)))
 (let ((?x486 (rest ?x346)))
 (let (($x514 (= ?x484 ?x486)))
 (let (($x499 ((_ is stack ) ?x346)))
 (let (($x500 (= c___ center-to-right)))
 (let (($x501 (and $x500 $x499)))
 (let (($x502 (= c___ center-to-left)))
 (let (($x503 (and $x502 $x499)))
 (let ((?x138 (left s___)))
 (let ((?x344 (top ?x138)))
 (let ((?x485 (stack ?x344 ?x346)))
 (let (($x513 (= ?x484 ?x485)))
 (let (($x504 ((_ is stack ) ?x138)))
 (let (($x505 (= c___ left-to-right)))
 (let (($x506 (and $x505 $x504)))
 (let (($x536 (ite $x506 $x513 (ite $x503 $x514 (ite $x501 $x514 (ite $x498 $x522 (ite $x496 $x519 $x522)))))))
 (let (($x507 (= c___ left-to-center)))
 (let (($x508 (and $x507 $x504)))
 (ite $x508 $x522 $x536)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x273 (left s____)))
 (let ((?x402 (left s_____)))
 (let (($x662 (= ?x402 ?x273)))
 (let ((?x318 (right s____)))
 (let ((?x629 (top ?x318)))
 (let ((?x630 (stack ?x629 ?x273)))
 (let (($x656 (= ?x402 ?x630)))
 (let (($x632 ((_ is stack ) ?x318)))
 (let (($x635 (= c____ right-to-left)))
 (let (($x636 (and $x635 $x632)))
 (let ((?x484 (center s____)))
 (let (($x637 ((_ is stack ) ?x484)))
 (let (($x638 (= c____ center-to-right)))
 (let (($x639 (and $x638 $x637)))
 (let ((?x625 (top ?x484)))
 (let ((?x626 (stack ?x625 ?x273)))
 (let (($x653 (= ?x402 ?x626)))
 (let (($x640 (= c____ center-to-left)))
 (let (($x641 (and $x640 $x637)))
 (let ((?x435 (rest ?x273)))
 (let (($x649 (= ?x402 ?x435)))
 (let (($x642 ((_ is stack ) ?x273)))
 (let (($x643 (= c____ left-to-right)))
 (let (($x644 (and $x643 $x642)))
 (let (($x645 (= c____ left-to-center)))
 (let (($x646 (and $x645 $x642)))
 (ite $x646 $x649 (ite $x644 $x649 (ite $x641 $x653 (ite $x639 $x662 (ite $x636 $x656 $x662))))))))))))))))))))))))))))))))
(assert
 (let ((?x318 (right s____)))
 (let ((?x436 (right s_____)))
 (let (($x658 (= ?x436 ?x318)))
 (let ((?x628 (rest ?x318)))
 (let (($x655 (= ?x436 ?x628)))
 (let (($x632 ((_ is stack ) ?x318)))
 (let (($x633 (= c____ right-to-center)))
 (let (($x634 (and $x633 $x632)))
 (let (($x635 (= c____ right-to-left)))
 (let (($x636 (and $x635 $x632)))
 (let ((?x484 (center s____)))
 (let ((?x625 (top ?x484)))
 (let ((?x627 (stack ?x625 ?x318)))
 (let (($x654 (= ?x436 ?x627)))
 (let (($x637 ((_ is stack ) ?x484)))
 (let (($x638 (= c____ center-to-right)))
 (let (($x639 (and $x638 $x637)))
 (let (($x640 (= c____ center-to-left)))
 (let (($x641 (and $x640 $x637)))
 (let ((?x273 (left s____)))
 (let (($x642 ((_ is stack ) ?x273)))
 (let (($x643 (= c____ left-to-right)))
 (let (($x644 (and $x643 $x642)))
 (let (($x675 (ite $x644 $x658 (ite $x641 $x658 (ite $x639 $x654 (ite $x636 $x655 (ite $x634 $x655 $x658)))))))
 (let ((?x482 (top ?x273)))
 (let ((?x621 (stack ?x482 ?x318)))
 (let (($x650 (= ?x436 ?x621)))
 (let (($x645 (= c____ left-to-center)))
 (let (($x646 (and $x645 $x642)))
 (ite $x646 $x650 $x675)))))))))))))))))))))))))))))))
(assert
 (let ((?x484 (center s____)))
 (let ((?x622 (center s_____)))
 (let (($x660 (= ?x622 ?x484)))
 (let ((?x318 (right s____)))
 (let ((?x629 (top ?x318)))
 (let ((?x631 (stack ?x629 ?x484)))
 (let (($x657 (= ?x622 ?x631)))
 (let (($x632 ((_ is stack ) ?x318)))
 (let (($x633 (= c____ right-to-center)))
 (let (($x634 (and $x633 $x632)))
 (let (($x635 (= c____ right-to-left)))
 (let (($x636 (and $x635 $x632)))
 (let ((?x624 (rest ?x484)))
 (let (($x652 (= ?x622 ?x624)))
 (let (($x637 ((_ is stack ) ?x484)))
 (let (($x638 (= c____ center-to-right)))
 (let (($x639 (and $x638 $x637)))
 (let (($x640 (= c____ center-to-left)))
 (let (($x641 (and $x640 $x637)))
 (let ((?x273 (left s____)))
 (let ((?x482 (top ?x273)))
 (let ((?x623 (stack ?x482 ?x484)))
 (let (($x651 (= ?x622 ?x623)))
 (let (($x642 ((_ is stack ) ?x273)))
 (let (($x643 (= c____ left-to-right)))
 (let (($x644 (and $x643 $x642)))
 (let (($x674 (ite $x644 $x651 (ite $x641 $x652 (ite $x639 $x652 (ite $x636 $x660 (ite $x634 $x657 $x660)))))))
 (let (($x645 (= c____ left-to-center)))
 (let (($x646 (and $x645 $x642)))
 (ite $x646 $x660 $x674)))))))))))))))))))))))))))))))
(assert
 (let ((?x41 (stack H (stack G (stack F (stack C (stack B (stack A empty))))))))
 (let ((?x44 (stack K (stack J (stack I ?x41)))))
 (let ((?x436 (right s_____)))
 (let (($x678 (= ?x436 ?x44)))
 (let ((?x35 (stack D empty)))
 (let ((?x622 (center s_____)))
 (let (($x709 (= ?x622 ?x35)))
 (let ((?x34 (stack E empty)))
 (let ((?x402 (left s_____)))
 (let (($x710 (= ?x402 ?x34)))
 (let (($x712 (not (and $x710 $x709 $x678))))
 (not $x712)))))))))))))
(check-sat)
(exit)
