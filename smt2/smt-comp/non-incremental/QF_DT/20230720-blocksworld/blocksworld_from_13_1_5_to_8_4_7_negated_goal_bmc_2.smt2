(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x31 (stack L empty)))
 (let ((?x32 (stack A ?x31)))
 (let ((?x33 (stack J ?x32)))
 (let ((?x34 (stack P ?x33)))
 (let ((?x35 (stack B ?x34)))
 (let ((?x36 (stack I ?x35)))
 (let ((?x37 (stack M ?x36)))
 (let ((?x38 (stack D ?x37)))
 (let ((?x39 (stack R ?x38)))
 (let ((?x40 (stack G ?x39)))
 (let ((?x41 (stack E ?x40)))
 (let ((?x42 (stack S ?x41)))
 (let ((?x43 (stack Q ?x42)))
 (let ((?x114 (left s_tmp_)))
 (= ?x114 ?x43))))))))))))))))
(assert
 (let ((?x44 (stack N empty)))
 (let ((?x117 (center s_tmp__)))
 (= ?x117 ?x44))))
(assert
 (let ((?x45 (stack C empty)))
 (let ((?x46 (stack F ?x45)))
 (let ((?x47 (stack H ?x46)))
 (let ((?x48 (stack K ?x47)))
 (let ((?x49 (stack O ?x48)))
 (let ((?x120 (right s_tmp___)))
 (= ?x120 ?x49))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x147 (left s_tmp__)))
 (= (left s_tmp___) ?x147)))
(assert
 (let ((?x117 (center s_tmp__)))
 (= (center s_tmp___) ?x117)))
(assert
 (let ((?x151 (center s_tmp_)))
 (= ?x151 (center s_tmp))))
(assert
 (let ((?x154 (right s_tmp_)))
 (= ?x154 (right s_tmp))))
(assert
 (let ((?x114 (left s_tmp_)))
 (let ((?x147 (left s_tmp__)))
 (= ?x147 ?x114))))
(assert
 (let ((?x154 (right s_tmp_)))
 (let ((?x158 (right s_tmp__)))
 (= ?x158 ?x154))))
(assert
 (= c__ c!1))
(assert
 (let ((?x91 (left s_)))
 (let ((?x298 (left s__)))
 (let (($x304 (= ?x298 ?x91)))
 (let ((?x94 (right s_)))
 (let (($x274 ((_ is stack ) ?x94)))
 (let (($x262 (= c_ right-to-left)))
 (let (($x263 (and $x262 $x274)))
 (let ((?x96 (center s_)))
 (let (($x264 ((_ is stack ) ?x96)))
 (let (($x265 (= c_ center-to-right)))
 (let (($x287 (and $x265 $x264)))
 (let (($x288 (= c_ center-to-left)))
 (let (($x289 (and $x288 $x264)))
 (let (($x313 (ite $x289 (= ?x298 (stack (top ?x96) ?x91)) (ite $x287 $x304 (ite $x263 (= ?x298 (stack (top ?x94) ?x91)) $x304)))))
 (let (($x270 (= ?x298 (rest ?x91))))
 (let (($x278 ((_ is stack ) ?x91)))
 (let (($x279 (= c_ left-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let (($x266 (= c_ left-to-center)))
 (let (($x267 (and $x266 $x278)))
 (ite $x267 $x270 (ite $x280 $x270 $x313)))))))))))))))))))))))
(assert
 (let ((?x94 (right s_)))
 (let ((?x285 (right s__)))
 (let (($x300 (= ?x285 ?x94)))
 (let (($x258 (= ?x285 (rest ?x94))))
 (let (($x274 ((_ is stack ) ?x94)))
 (let (($x260 (= c_ right-to-center)))
 (let (($x261 (and $x260 $x274)))
 (let (($x262 (= c_ right-to-left)))
 (let (($x263 (and $x262 $x274)))
 (let ((?x96 (center s_)))
 (let (($x264 ((_ is stack ) ?x96)))
 (let (($x265 (= c_ center-to-right)))
 (let (($x287 (and $x265 $x264)))
 (let (($x310 (ite $x287 (= ?x285 (stack (top ?x96) ?x94)) (ite $x263 $x258 (ite $x261 $x258 $x300)))))
 (let (($x288 (= c_ center-to-left)))
 (let (($x289 (and $x288 $x264)))
 (let ((?x91 (left s_)))
 (let (($x278 ((_ is stack ) ?x91)))
 (let (($x279 (= c_ left-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let (($x266 (= c_ left-to-center)))
 (let (($x267 (and $x266 $x278)))
 (ite $x267 (= ?x285 (stack (top ?x91) ?x94)) (ite $x280 $x300 (ite $x289 $x300 $x310))))))))))))))))))))))))))
(assert
 (let ((?x96 (center s_)))
 (let ((?x276 (center s__)))
 (let (($x302 (= ?x276 ?x96)))
 (let ((?x94 (right s_)))
 (let (($x274 ((_ is stack ) ?x94)))
 (let (($x260 (= c_ right-to-center)))
 (let (($x261 (and $x260 $x274)))
 (let (($x262 (= c_ right-to-left)))
 (let (($x263 (and $x262 $x274)))
 (let (($x294 (= ?x276 (rest ?x96))))
 (let (($x264 ((_ is stack ) ?x96)))
 (let (($x265 (= c_ center-to-right)))
 (let (($x287 (and $x265 $x264)))
 (let (($x309 (ite $x287 $x294 (ite $x263 $x302 (ite $x261 (= ?x276 (stack (top ?x94) ?x96)) $x302)))))
 (let (($x288 (= c_ center-to-left)))
 (let (($x289 (and $x288 $x264)))
 (let ((?x91 (left s_)))
 (let (($x278 ((_ is stack ) ?x91)))
 (let (($x279 (= c_ left-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let (($x266 (= c_ left-to-center)))
 (let (($x267 (and $x266 $x278)))
 (ite $x267 $x302 (ite $x280 (= ?x276 (stack (top ?x91) ?x96)) (ite $x289 $x294 $x309))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x298 (left s__)))
 (let ((?x161 (left s___)))
 (let (($x433 (= ?x161 ?x298)))
 (let ((?x285 (right s__)))
 (let ((?x400 (top ?x285)))
 (let ((?x401 (stack ?x400 ?x298)))
 (let (($x427 (= ?x161 ?x401)))
 (let (($x403 ((_ is stack ) ?x285)))
 (let (($x406 (= c__ right-to-left)))
 (let (($x407 (and $x406 $x403)))
 (let ((?x276 (center s__)))
 (let (($x408 ((_ is stack ) ?x276)))
 (let (($x409 (= c__ center-to-right)))
 (let (($x410 (and $x409 $x408)))
 (let ((?x396 (top ?x276)))
 (let ((?x397 (stack ?x396 ?x298)))
 (let (($x424 (= ?x161 ?x397)))
 (let (($x411 (= c__ center-to-left)))
 (let (($x412 (and $x411 $x408)))
 (let ((?x163 (rest ?x298)))
 (let (($x420 (= ?x161 ?x163)))
 (let (($x413 ((_ is stack ) ?x298)))
 (let (($x414 (= c__ left-to-right)))
 (let (($x415 (and $x414 $x413)))
 (let (($x416 (= c__ left-to-center)))
 (let (($x417 (and $x416 $x413)))
 (ite $x417 $x420 (ite $x415 $x420 (ite $x412 $x424 (ite $x410 $x433 (ite $x407 $x427 $x433))))))))))))))))))))))))))))))))
(assert
 (let ((?x285 (right s__)))
 (let ((?x164 (right s___)))
 (let (($x429 (= ?x164 ?x285)))
 (let ((?x399 (rest ?x285)))
 (let (($x426 (= ?x164 ?x399)))
 (let (($x403 ((_ is stack ) ?x285)))
 (let (($x404 (= c__ right-to-center)))
 (let (($x405 (and $x404 $x403)))
 (let (($x406 (= c__ right-to-left)))
 (let (($x407 (and $x406 $x403)))
 (let ((?x276 (center s__)))
 (let ((?x396 (top ?x276)))
 (let ((?x398 (stack ?x396 ?x285)))
 (let (($x425 (= ?x164 ?x398)))
 (let (($x408 ((_ is stack ) ?x276)))
 (let (($x409 (= c__ center-to-right)))
 (let (($x410 (and $x409 $x408)))
 (let (($x411 (= c__ center-to-left)))
 (let (($x412 (and $x411 $x408)))
 (let ((?x298 (left s__)))
 (let (($x413 ((_ is stack ) ?x298)))
 (let (($x414 (= c__ left-to-right)))
 (let (($x415 (and $x414 $x413)))
 (let (($x446 (ite $x415 $x429 (ite $x412 $x429 (ite $x410 $x425 (ite $x407 $x426 (ite $x405 $x426 $x429)))))))
 (let ((?x256 (top ?x298)))
 (let ((?x392 (stack ?x256 ?x285)))
 (let (($x421 (= ?x164 ?x392)))
 (let (($x416 (= c__ left-to-center)))
 (let (($x417 (and $x416 $x413)))
 (ite $x417 $x421 $x446)))))))))))))))))))))))))))))))
(assert
 (let ((?x276 (center s__)))
 (let ((?x393 (center s___)))
 (let (($x431 (= ?x393 ?x276)))
 (let ((?x285 (right s__)))
 (let ((?x400 (top ?x285)))
 (let ((?x402 (stack ?x400 ?x276)))
 (let (($x428 (= ?x393 ?x402)))
 (let (($x403 ((_ is stack ) ?x285)))
 (let (($x404 (= c__ right-to-center)))
 (let (($x405 (and $x404 $x403)))
 (let (($x406 (= c__ right-to-left)))
 (let (($x407 (and $x406 $x403)))
 (let ((?x395 (rest ?x276)))
 (let (($x423 (= ?x393 ?x395)))
 (let (($x408 ((_ is stack ) ?x276)))
 (let (($x409 (= c__ center-to-right)))
 (let (($x410 (and $x409 $x408)))
 (let (($x411 (= c__ center-to-left)))
 (let (($x412 (and $x411 $x408)))
 (let ((?x298 (left s__)))
 (let ((?x256 (top ?x298)))
 (let ((?x394 (stack ?x256 ?x276)))
 (let (($x422 (= ?x393 ?x394)))
 (let (($x413 ((_ is stack ) ?x298)))
 (let (($x414 (= c__ left-to-right)))
 (let (($x415 (and $x414 $x413)))
 (let (($x445 (ite $x415 $x422 (ite $x412 $x423 (ite $x410 $x423 (ite $x407 $x431 (ite $x405 $x428 $x431)))))))
 (let (($x416 (= c__ left-to-center)))
 (let (($x417 (and $x416 $x413)))
 (ite $x417 $x431 $x445)))))))))))))))))))))))))))))))
(assert
 (let ((?x66 (stack Q (stack N (stack M (stack L (stack I (stack C empty))))))))
 (let ((?x67 (stack S ?x66)))
 (let ((?x164 (right s___)))
 (let (($x449 (= ?x164 ?x67)))
 (let ((?x61 (stack G (stack R (stack F (stack P empty))))))
 (let ((?x393 (center s___)))
 (let (($x480 (= ?x393 ?x61)))
 (let ((?x55 (stack J (stack K (stack H (stack D (stack A (stack O empty))))))))
 (let ((?x57 (stack B (stack E ?x55))))
 (let ((?x161 (left s___)))
 (let (($x481 (= ?x161 ?x57)))
 (let (($x483 (not (and $x481 $x480 $x449))))
 (not $x483))))))))))))))
(check-sat)
(exit)
