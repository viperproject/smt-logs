(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F 0)) (((A) (B) (C) (D) (E) (F))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x18 (stack A empty)))
 (let ((?x75 (left s_tmp_)))
 (= ?x75 ?x18))))
(assert
 (let ((?x19 (stack B empty)))
 (let ((?x20 (stack D ?x19)))
 (let ((?x21 (stack E ?x20)))
 (let ((?x22 (stack F ?x21)))
 (let ((?x23 (stack C ?x22)))
 (let ((?x78 (center s_tmp__)))
 (= ?x78 ?x23))))))))
(assert
 (let ((?x81 (right s_tmp___)))
 (= ?x81 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x108 (left s_tmp__)))
 (= (left s_tmp___) ?x108)))
(assert
 (let ((?x78 (center s_tmp__)))
 (= (center s_tmp___) ?x78)))
(assert
 (let ((?x112 (center s_tmp_)))
 (= ?x112 (center s_tmp))))
(assert
 (let ((?x115 (right s_tmp_)))
 (= ?x115 (right s_tmp))))
(assert
 (let ((?x75 (left s_tmp_)))
 (let ((?x108 (left s_tmp__)))
 (= ?x108 ?x75))))
(assert
 (let ((?x115 (right s_tmp_)))
 (let ((?x119 (right s_tmp__)))
 (= ?x119 ?x115))))
(assert
 (= c__ c!1))
(assert
 (let ((?x52 (left s_)))
 (let ((?x180 (left s__)))
 (let (($x225 (= ?x180 ?x52)))
 (let ((?x55 (right s_)))
 (let (($x195 ((_ is stack ) ?x55)))
 (let (($x199 (and (= c_ right-to-left) $x195)))
 (let ((?x57 (center s_)))
 (let (($x200 ((_ is stack ) ?x57)))
 (let (($x201 (= c_ center-to-right)))
 (let (($x202 (and $x201 $x200)))
 (let (($x203 (= c_ center-to-left)))
 (let (($x204 (and $x203 $x200)))
 (let (($x234 (ite $x204 (= ?x180 (stack (top ?x57) ?x52)) (ite $x202 $x225 (ite $x199 (= ?x180 (stack (top ?x55) ?x52)) $x225)))))
 (let (($x212 (= ?x180 (rest ?x52))))
 (let (($x205 ((_ is stack ) ?x52)))
 (let (($x206 (= c_ left-to-right)))
 (let (($x207 (and $x206 $x205)))
 (let (($x208 (= c_ left-to-center)))
 (let (($x209 (and $x208 $x205)))
 (ite $x209 $x212 (ite $x207 $x212 $x234))))))))))))))))))))))
(assert
 (let ((?x55 (right s_)))
 (let ((?x182 (right s__)))
 (let (($x221 (= ?x182 ?x55)))
 (let (($x218 (= ?x182 (rest ?x55))))
 (let (($x195 ((_ is stack ) ?x55)))
 (let (($x197 (and (= c_ right-to-center) $x195)))
 (let (($x199 (and (= c_ right-to-left) $x195)))
 (let ((?x57 (center s_)))
 (let (($x200 ((_ is stack ) ?x57)))
 (let (($x201 (= c_ center-to-right)))
 (let (($x202 (and $x201 $x200)))
 (let (($x231 (ite $x202 (= ?x182 (stack (top ?x57) ?x55)) (ite $x199 $x218 (ite $x197 $x218 $x221)))))
 (let (($x203 (= c_ center-to-left)))
 (let (($x204 (and $x203 $x200)))
 (let ((?x52 (left s_)))
 (let (($x205 ((_ is stack ) ?x52)))
 (let (($x206 (= c_ left-to-right)))
 (let (($x207 (and $x206 $x205)))
 (let (($x208 (= c_ left-to-center)))
 (let (($x209 (and $x208 $x205)))
 (ite $x209 (= ?x182 (stack (top ?x52) ?x55)) (ite $x207 $x221 (ite $x204 $x221 $x231))))))))))))))))))))))))
(assert
 (let ((?x57 (center s_)))
 (let ((?x185 (center s__)))
 (let (($x223 (= ?x185 ?x57)))
 (let ((?x55 (right s_)))
 (let (($x195 ((_ is stack ) ?x55)))
 (let (($x197 (and (= c_ right-to-center) $x195)))
 (let (($x199 (and (= c_ right-to-left) $x195)))
 (let (($x215 (= ?x185 (rest ?x57))))
 (let (($x200 ((_ is stack ) ?x57)))
 (let (($x201 (= c_ center-to-right)))
 (let (($x202 (and $x201 $x200)))
 (let (($x230 (ite $x202 $x215 (ite $x199 $x223 (ite $x197 (= ?x185 (stack (top ?x55) ?x57)) $x223)))))
 (let (($x203 (= c_ center-to-left)))
 (let (($x204 (and $x203 $x200)))
 (let ((?x52 (left s_)))
 (let (($x205 ((_ is stack ) ?x52)))
 (let (($x206 (= c_ left-to-right)))
 (let (($x207 (and $x206 $x205)))
 (let (($x208 (= c_ left-to-center)))
 (let (($x209 (and $x208 $x205)))
 (ite $x209 $x223 (ite $x207 (= ?x185 (stack (top ?x52) ?x57)) (ite $x204 $x215 $x230))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x180 (left s__)))
 (let ((?x124 (left s___)))
 (let (($x332 (= ?x124 ?x180)))
 (let ((?x182 (right s__)))
 (let ((?x299 (top ?x182)))
 (let ((?x300 (stack ?x299 ?x180)))
 (let (($x326 (= ?x124 ?x300)))
 (let (($x302 ((_ is stack ) ?x182)))
 (let (($x305 (= c__ right-to-left)))
 (let (($x306 (and $x305 $x302)))
 (let ((?x185 (center s__)))
 (let (($x307 ((_ is stack ) ?x185)))
 (let (($x308 (= c__ center-to-right)))
 (let (($x309 (and $x308 $x307)))
 (let ((?x295 (top ?x185)))
 (let ((?x296 (stack ?x295 ?x180)))
 (let (($x323 (= ?x124 ?x296)))
 (let (($x310 (= c__ center-to-left)))
 (let (($x311 (and $x310 $x307)))
 (let ((?x125 (rest ?x180)))
 (let (($x319 (= ?x124 ?x125)))
 (let (($x312 ((_ is stack ) ?x180)))
 (let (($x313 (= c__ left-to-right)))
 (let (($x314 (and $x313 $x312)))
 (let (($x315 (= c__ left-to-center)))
 (let (($x316 (and $x315 $x312)))
 (ite $x316 $x319 (ite $x314 $x319 (ite $x311 $x323 (ite $x309 $x332 (ite $x306 $x326 $x332))))))))))))))))))))))))))))))))
(assert
 (let ((?x182 (right s__)))
 (let ((?x177 (right s___)))
 (let (($x328 (= ?x177 ?x182)))
 (let ((?x298 (rest ?x182)))
 (let (($x325 (= ?x177 ?x298)))
 (let (($x302 ((_ is stack ) ?x182)))
 (let (($x303 (= c__ right-to-center)))
 (let (($x304 (and $x303 $x302)))
 (let (($x305 (= c__ right-to-left)))
 (let (($x306 (and $x305 $x302)))
 (let ((?x185 (center s__)))
 (let ((?x295 (top ?x185)))
 (let ((?x297 (stack ?x295 ?x182)))
 (let (($x324 (= ?x177 ?x297)))
 (let (($x307 ((_ is stack ) ?x185)))
 (let (($x308 (= c__ center-to-right)))
 (let (($x309 (and $x308 $x307)))
 (let (($x310 (= c__ center-to-left)))
 (let (($x311 (and $x310 $x307)))
 (let ((?x180 (left s__)))
 (let (($x312 ((_ is stack ) ?x180)))
 (let (($x313 (= c__ left-to-right)))
 (let (($x314 (and $x313 $x312)))
 (let (($x345 (ite $x314 $x328 (ite $x311 $x328 (ite $x309 $x324 (ite $x306 $x325 (ite $x304 $x325 $x328)))))))
 (let ((?x290 (top ?x180)))
 (let ((?x291 (stack ?x290 ?x182)))
 (let (($x320 (= ?x177 ?x291)))
 (let (($x315 (= c__ left-to-center)))
 (let (($x316 (and $x315 $x312)))
 (ite $x316 $x320 $x345)))))))))))))))))))))))))))))))
(assert
 (let ((?x185 (center s__)))
 (let ((?x292 (center s___)))
 (let (($x330 (= ?x292 ?x185)))
 (let ((?x182 (right s__)))
 (let ((?x299 (top ?x182)))
 (let ((?x301 (stack ?x299 ?x185)))
 (let (($x327 (= ?x292 ?x301)))
 (let (($x302 ((_ is stack ) ?x182)))
 (let (($x303 (= c__ right-to-center)))
 (let (($x304 (and $x303 $x302)))
 (let (($x305 (= c__ right-to-left)))
 (let (($x306 (and $x305 $x302)))
 (let ((?x294 (rest ?x185)))
 (let (($x322 (= ?x292 ?x294)))
 (let (($x307 ((_ is stack ) ?x185)))
 (let (($x308 (= c__ center-to-right)))
 (let (($x309 (and $x308 $x307)))
 (let (($x310 (= c__ center-to-left)))
 (let (($x311 (and $x310 $x307)))
 (let ((?x180 (left s__)))
 (let ((?x290 (top ?x180)))
 (let ((?x293 (stack ?x290 ?x185)))
 (let (($x321 (= ?x292 ?x293)))
 (let (($x312 ((_ is stack ) ?x180)))
 (let (($x313 (= c__ left-to-right)))
 (let (($x314 (and $x313 $x312)))
 (let (($x344 (ite $x314 $x321 (ite $x311 $x322 (ite $x309 $x322 (ite $x306 $x330 (ite $x304 $x327 $x330)))))))
 (let (($x315 (= c__ left-to-center)))
 (let (($x316 (and $x315 $x312)))
 (ite $x316 $x330 $x344)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x124 (left s___)))
 (let ((?x270 (left s____)))
 (let (($x471 (= ?x270 ?x124)))
 (let ((?x177 (right s___)))
 (let ((?x438 (top ?x177)))
 (let ((?x439 (stack ?x438 ?x124)))
 (let (($x465 (= ?x270 ?x439)))
 (let (($x441 ((_ is stack ) ?x177)))
 (let (($x444 (= c___ right-to-left)))
 (let (($x445 (and $x444 $x441)))
 (let ((?x292 (center s___)))
 (let (($x446 ((_ is stack ) ?x292)))
 (let (($x447 (= c___ center-to-right)))
 (let (($x448 (and $x447 $x446)))
 (let ((?x434 (top ?x292)))
 (let ((?x435 (stack ?x434 ?x124)))
 (let (($x462 (= ?x270 ?x435)))
 (let (($x449 (= c___ center-to-left)))
 (let (($x450 (and $x449 $x446)))
 (let ((?x271 (rest ?x124)))
 (let (($x458 (= ?x270 ?x271)))
 (let (($x451 ((_ is stack ) ?x124)))
 (let (($x452 (= c___ left-to-right)))
 (let (($x453 (and $x452 $x451)))
 (let (($x454 (= c___ left-to-center)))
 (let (($x455 (and $x454 $x451)))
 (ite $x455 $x458 (ite $x453 $x458 (ite $x450 $x462 (ite $x448 $x471 (ite $x445 $x465 $x471))))))))))))))))))))))))))))))))
(assert
 (let ((?x177 (right s___)))
 (let ((?x289 (right s____)))
 (let (($x467 (= ?x289 ?x177)))
 (let ((?x437 (rest ?x177)))
 (let (($x464 (= ?x289 ?x437)))
 (let (($x441 ((_ is stack ) ?x177)))
 (let (($x442 (= c___ right-to-center)))
 (let (($x443 (and $x442 $x441)))
 (let (($x444 (= c___ right-to-left)))
 (let (($x445 (and $x444 $x441)))
 (let ((?x292 (center s___)))
 (let ((?x434 (top ?x292)))
 (let ((?x436 (stack ?x434 ?x177)))
 (let (($x463 (= ?x289 ?x436)))
 (let (($x446 ((_ is stack ) ?x292)))
 (let (($x447 (= c___ center-to-right)))
 (let (($x448 (and $x447 $x446)))
 (let (($x449 (= c___ center-to-left)))
 (let (($x450 (and $x449 $x446)))
 (let ((?x124 (left s___)))
 (let (($x451 ((_ is stack ) ?x124)))
 (let (($x452 (= c___ left-to-right)))
 (let (($x453 (and $x452 $x451)))
 (let (($x484 (ite $x453 $x467 (ite $x450 $x467 (ite $x448 $x463 (ite $x445 $x464 (ite $x443 $x464 $x467)))))))
 (let ((?x429 (top ?x124)))
 (let ((?x430 (stack ?x429 ?x177)))
 (let (($x459 (= ?x289 ?x430)))
 (let (($x454 (= c___ left-to-center)))
 (let (($x455 (and $x454 $x451)))
 (ite $x455 $x459 $x484)))))))))))))))))))))))))))))))
(assert
 (let ((?x292 (center s___)))
 (let ((?x431 (center s____)))
 (let (($x469 (= ?x431 ?x292)))
 (let ((?x177 (right s___)))
 (let ((?x438 (top ?x177)))
 (let ((?x440 (stack ?x438 ?x292)))
 (let (($x466 (= ?x431 ?x440)))
 (let (($x441 ((_ is stack ) ?x177)))
 (let (($x442 (= c___ right-to-center)))
 (let (($x443 (and $x442 $x441)))
 (let (($x444 (= c___ right-to-left)))
 (let (($x445 (and $x444 $x441)))
 (let ((?x433 (rest ?x292)))
 (let (($x461 (= ?x431 ?x433)))
 (let (($x446 ((_ is stack ) ?x292)))
 (let (($x447 (= c___ center-to-right)))
 (let (($x448 (and $x447 $x446)))
 (let (($x449 (= c___ center-to-left)))
 (let (($x450 (and $x449 $x446)))
 (let ((?x124 (left s___)))
 (let ((?x429 (top ?x124)))
 (let ((?x432 (stack ?x429 ?x292)))
 (let (($x460 (= ?x431 ?x432)))
 (let (($x451 ((_ is stack ) ?x124)))
 (let (($x452 (= c___ left-to-right)))
 (let (($x453 (and $x452 $x451)))
 (let (($x483 (ite $x453 $x460 (ite $x450 $x461 (ite $x448 $x461 (ite $x445 $x469 (ite $x443 $x466 $x469)))))))
 (let (($x454 (= c___ left-to-center)))
 (let (($x455 (and $x454 $x451)))
 (ite $x455 $x469 $x483)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x270 (left s____)))
 (let ((?x348 (left s_____)))
 (let (($x609 (= ?x348 ?x270)))
 (let ((?x289 (right s____)))
 (let ((?x576 (top ?x289)))
 (let ((?x577 (stack ?x576 ?x270)))
 (let (($x603 (= ?x348 ?x577)))
 (let (($x579 ((_ is stack ) ?x289)))
 (let (($x582 (= c____ right-to-left)))
 (let (($x583 (and $x582 $x579)))
 (let ((?x431 (center s____)))
 (let (($x584 ((_ is stack ) ?x431)))
 (let (($x585 (= c____ center-to-right)))
 (let (($x586 (and $x585 $x584)))
 (let ((?x572 (top ?x431)))
 (let ((?x573 (stack ?x572 ?x270)))
 (let (($x600 (= ?x348 ?x573)))
 (let (($x587 (= c____ center-to-left)))
 (let (($x588 (and $x587 $x584)))
 (let ((?x381 (rest ?x270)))
 (let (($x596 (= ?x348 ?x381)))
 (let (($x589 ((_ is stack ) ?x270)))
 (let (($x590 (= c____ left-to-right)))
 (let (($x591 (and $x590 $x589)))
 (let (($x592 (= c____ left-to-center)))
 (let (($x593 (and $x592 $x589)))
 (ite $x593 $x596 (ite $x591 $x596 (ite $x588 $x600 (ite $x586 $x609 (ite $x583 $x603 $x609))))))))))))))))))))))))))))))))
(assert
 (let ((?x289 (right s____)))
 (let ((?x382 (right s_____)))
 (let (($x605 (= ?x382 ?x289)))
 (let ((?x575 (rest ?x289)))
 (let (($x602 (= ?x382 ?x575)))
 (let (($x579 ((_ is stack ) ?x289)))
 (let (($x580 (= c____ right-to-center)))
 (let (($x581 (and $x580 $x579)))
 (let (($x582 (= c____ right-to-left)))
 (let (($x583 (and $x582 $x579)))
 (let ((?x431 (center s____)))
 (let ((?x572 (top ?x431)))
 (let ((?x574 (stack ?x572 ?x289)))
 (let (($x601 (= ?x382 ?x574)))
 (let (($x584 ((_ is stack ) ?x431)))
 (let (($x585 (= c____ center-to-right)))
 (let (($x586 (and $x585 $x584)))
 (let (($x587 (= c____ center-to-left)))
 (let (($x588 (and $x587 $x584)))
 (let ((?x270 (left s____)))
 (let (($x589 ((_ is stack ) ?x270)))
 (let (($x590 (= c____ left-to-right)))
 (let (($x591 (and $x590 $x589)))
 (let (($x622 (ite $x591 $x605 (ite $x588 $x605 (ite $x586 $x601 (ite $x583 $x602 (ite $x581 $x602 $x605)))))))
 (let ((?x428 (top ?x270)))
 (let ((?x568 (stack ?x428 ?x289)))
 (let (($x597 (= ?x382 ?x568)))
 (let (($x592 (= c____ left-to-center)))
 (let (($x593 (and $x592 $x589)))
 (ite $x593 $x597 $x622)))))))))))))))))))))))))))))))
(assert
 (let ((?x431 (center s____)))
 (let ((?x569 (center s_____)))
 (let (($x607 (= ?x569 ?x431)))
 (let ((?x289 (right s____)))
 (let ((?x576 (top ?x289)))
 (let ((?x578 (stack ?x576 ?x431)))
 (let (($x604 (= ?x569 ?x578)))
 (let (($x579 ((_ is stack ) ?x289)))
 (let (($x580 (= c____ right-to-center)))
 (let (($x581 (and $x580 $x579)))
 (let (($x582 (= c____ right-to-left)))
 (let (($x583 (and $x582 $x579)))
 (let ((?x571 (rest ?x431)))
 (let (($x599 (= ?x569 ?x571)))
 (let (($x584 ((_ is stack ) ?x431)))
 (let (($x585 (= c____ center-to-right)))
 (let (($x586 (and $x585 $x584)))
 (let (($x587 (= c____ center-to-left)))
 (let (($x588 (and $x587 $x584)))
 (let ((?x270 (left s____)))
 (let ((?x428 (top ?x270)))
 (let ((?x570 (stack ?x428 ?x431)))
 (let (($x598 (= ?x569 ?x570)))
 (let (($x589 ((_ is stack ) ?x270)))
 (let (($x590 (= c____ left-to-right)))
 (let (($x591 (and $x590 $x589)))
 (let (($x621 (ite $x591 $x598 (ite $x588 $x599 (ite $x586 $x599 (ite $x583 $x607 (ite $x581 $x604 $x607)))))))
 (let (($x592 (= c____ left-to-center)))
 (let (($x593 (and $x592 $x589)))
 (ite $x593 $x607 $x621)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x348 (left s_____)))
 (let ((?x487 (left s______)))
 (let (($x747 (= ?x487 ?x348)))
 (let ((?x382 (right s_____)))
 (let ((?x714 (top ?x382)))
 (let ((?x715 (stack ?x714 ?x348)))
 (let (($x741 (= ?x487 ?x715)))
 (let (($x717 ((_ is stack ) ?x382)))
 (let (($x720 (= c_____ right-to-left)))
 (let (($x721 (and $x720 $x717)))
 (let ((?x569 (center s_____)))
 (let (($x722 ((_ is stack ) ?x569)))
 (let (($x723 (= c_____ center-to-right)))
 (let (($x724 (and $x723 $x722)))
 (let ((?x710 (top ?x569)))
 (let ((?x711 (stack ?x710 ?x348)))
 (let (($x738 (= ?x487 ?x711)))
 (let (($x725 (= c_____ center-to-left)))
 (let (($x726 (and $x725 $x722)))
 (let ((?x520 (rest ?x348)))
 (let (($x734 (= ?x487 ?x520)))
 (let (($x727 ((_ is stack ) ?x348)))
 (let (($x728 (= c_____ left-to-right)))
 (let (($x729 (and $x728 $x727)))
 (let (($x730 (= c_____ left-to-center)))
 (let (($x731 (and $x730 $x727)))
 (ite $x731 $x734 (ite $x729 $x734 (ite $x726 $x738 (ite $x724 $x747 (ite $x721 $x741 $x747))))))))))))))))))))))))))))))))
(assert
 (let ((?x382 (right s_____)))
 (let ((?x521 (right s______)))
 (let (($x743 (= ?x521 ?x382)))
 (let ((?x713 (rest ?x382)))
 (let (($x740 (= ?x521 ?x713)))
 (let (($x717 ((_ is stack ) ?x382)))
 (let (($x718 (= c_____ right-to-center)))
 (let (($x719 (and $x718 $x717)))
 (let (($x720 (= c_____ right-to-left)))
 (let (($x721 (and $x720 $x717)))
 (let ((?x569 (center s_____)))
 (let ((?x710 (top ?x569)))
 (let ((?x712 (stack ?x710 ?x382)))
 (let (($x739 (= ?x521 ?x712)))
 (let (($x722 ((_ is stack ) ?x569)))
 (let (($x723 (= c_____ center-to-right)))
 (let (($x724 (and $x723 $x722)))
 (let (($x725 (= c_____ center-to-left)))
 (let (($x726 (and $x725 $x722)))
 (let ((?x348 (left s_____)))
 (let (($x727 ((_ is stack ) ?x348)))
 (let (($x728 (= c_____ left-to-right)))
 (let (($x729 (and $x728 $x727)))
 (let (($x760 (ite $x729 $x743 (ite $x726 $x743 (ite $x724 $x739 (ite $x721 $x740 (ite $x719 $x740 $x743)))))))
 (let ((?x567 (top ?x348)))
 (let ((?x706 (stack ?x567 ?x382)))
 (let (($x735 (= ?x521 ?x706)))
 (let (($x730 (= c_____ left-to-center)))
 (let (($x731 (and $x730 $x727)))
 (ite $x731 $x735 $x760)))))))))))))))))))))))))))))))
(assert
 (let ((?x569 (center s_____)))
 (let ((?x707 (center s______)))
 (let (($x745 (= ?x707 ?x569)))
 (let ((?x382 (right s_____)))
 (let ((?x714 (top ?x382)))
 (let ((?x716 (stack ?x714 ?x569)))
 (let (($x742 (= ?x707 ?x716)))
 (let (($x717 ((_ is stack ) ?x382)))
 (let (($x718 (= c_____ right-to-center)))
 (let (($x719 (and $x718 $x717)))
 (let (($x720 (= c_____ right-to-left)))
 (let (($x721 (and $x720 $x717)))
 (let ((?x709 (rest ?x569)))
 (let (($x737 (= ?x707 ?x709)))
 (let (($x722 ((_ is stack ) ?x569)))
 (let (($x723 (= c_____ center-to-right)))
 (let (($x724 (and $x723 $x722)))
 (let (($x725 (= c_____ center-to-left)))
 (let (($x726 (and $x725 $x722)))
 (let ((?x348 (left s_____)))
 (let ((?x567 (top ?x348)))
 (let ((?x708 (stack ?x567 ?x569)))
 (let (($x736 (= ?x707 ?x708)))
 (let (($x727 ((_ is stack ) ?x348)))
 (let (($x728 (= c_____ left-to-right)))
 (let (($x729 (and $x728 $x727)))
 (let (($x759 (ite $x729 $x736 (ite $x726 $x737 (ite $x724 $x737 (ite $x721 $x745 (ite $x719 $x742 $x745)))))))
 (let (($x730 (= c_____ left-to-center)))
 (let (($x731 (and $x730 $x727)))
 (ite $x731 $x745 $x759)))))))))))))))))))))))))))))))
(assert
 (let ((?x521 (right s______)))
 (let (($x763 (= ?x521 empty)))
 (let ((?x18 (stack A empty)))
 (let ((?x707 (center s______)))
 (let (($x794 (= ?x707 ?x18)))
 (let ((?x28 (stack C (stack E (stack F (stack B (stack D empty)))))))
 (let ((?x487 (left s______)))
 (let (($x795 (= ?x487 ?x28)))
 (let (($x797 (not (and $x795 $x794 $x763))))
 (not $x797)))))))))))
(check-sat)
(exit)
