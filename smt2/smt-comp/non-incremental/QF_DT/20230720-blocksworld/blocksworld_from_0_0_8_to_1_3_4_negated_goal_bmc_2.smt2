(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H 0)) (((A) (B) (C) (D) (E) (F) (G) (H))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x79 (left s_tmp_)))
 (= ?x79 empty)))
(assert
 (let ((?x82 (center s_tmp__)))
 (= ?x82 empty)))
(assert
 (let ((?x20 (stack A empty)))
 (let ((?x21 (stack B ?x20)))
 (let ((?x22 (stack C ?x21)))
 (let ((?x23 (stack D ?x22)))
 (let ((?x24 (stack E ?x23)))
 (let ((?x25 (stack F ?x24)))
 (let ((?x26 (stack G ?x25)))
 (let ((?x27 (stack H ?x26)))
 (let ((?x85 (right s_tmp___)))
 (= ?x85 ?x27)))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x112 (left s_tmp__)))
 (= (left s_tmp___) ?x112)))
(assert
 (let ((?x82 (center s_tmp__)))
 (= (center s_tmp___) ?x82)))
(assert
 (let ((?x116 (center s_tmp_)))
 (= ?x116 (center s_tmp))))
(assert
 (let ((?x119 (right s_tmp_)))
 (= ?x119 (right s_tmp))))
(assert
 (let ((?x79 (left s_tmp_)))
 (let ((?x112 (left s_tmp__)))
 (= ?x112 ?x79))))
(assert
 (let ((?x119 (right s_tmp_)))
 (let ((?x123 (right s_tmp__)))
 (= ?x123 ?x119))))
(assert
 (= c__ c!1))
(assert
 (let ((?x56 (left s_)))
 (let ((?x191 (left s__)))
 (let (($x236 (= ?x191 ?x56)))
 (let ((?x59 (right s_)))
 (let (($x206 ((_ is stack ) ?x59)))
 (let (($x209 (= c_ right-to-left)))
 (let (($x210 (and $x209 $x206)))
 (let ((?x61 (center s_)))
 (let (($x211 ((_ is stack ) ?x61)))
 (let (($x213 (and (= c_ center-to-right) $x211)))
 (let (($x215 (and (= c_ center-to-left) $x211)))
 (let (($x245 (ite $x215 (= ?x191 (stack (top ?x61) ?x56)) (ite $x213 $x236 (ite $x210 (= ?x191 (stack (top ?x59) ?x56)) $x236)))))
 (let (($x223 (= ?x191 (rest ?x56))))
 (let (($x216 ((_ is stack ) ?x56)))
 (let (($x218 (and (= c_ left-to-right) $x216)))
 (let (($x220 (and (= c_ left-to-center) $x216)))
 (ite $x220 $x223 (ite $x218 $x223 $x245)))))))))))))))))))
(assert
 (let ((?x59 (right s_)))
 (let ((?x199 (right s__)))
 (let (($x232 (= ?x199 ?x59)))
 (let (($x229 (= ?x199 (rest ?x59))))
 (let (($x206 ((_ is stack ) ?x59)))
 (let (($x207 (= c_ right-to-center)))
 (let (($x208 (and $x207 $x206)))
 (let (($x209 (= c_ right-to-left)))
 (let (($x210 (and $x209 $x206)))
 (let ((?x61 (center s_)))
 (let (($x211 ((_ is stack ) ?x61)))
 (let (($x213 (and (= c_ center-to-right) $x211)))
 (let (($x242 (ite $x213 (= ?x199 (stack (top ?x61) ?x59)) (ite $x210 $x229 (ite $x208 $x229 $x232)))))
 (let (($x215 (and (= c_ center-to-left) $x211)))
 (let ((?x56 (left s_)))
 (let (($x216 ((_ is stack ) ?x56)))
 (let (($x218 (and (= c_ left-to-right) $x216)))
 (let (($x220 (and (= c_ left-to-center) $x216)))
 (ite $x220 (= ?x199 (stack (top ?x56) ?x59)) (ite $x218 $x232 (ite $x215 $x232 $x242))))))))))))))))))))))
(assert
 (let ((?x61 (center s_)))
 (let ((?x193 (center s__)))
 (let (($x234 (= ?x193 ?x61)))
 (let ((?x59 (right s_)))
 (let (($x206 ((_ is stack ) ?x59)))
 (let (($x207 (= c_ right-to-center)))
 (let (($x208 (and $x207 $x206)))
 (let (($x209 (= c_ right-to-left)))
 (let (($x210 (and $x209 $x206)))
 (let (($x226 (= ?x193 (rest ?x61))))
 (let (($x211 ((_ is stack ) ?x61)))
 (let (($x213 (and (= c_ center-to-right) $x211)))
 (let (($x241 (ite $x213 $x226 (ite $x210 $x234 (ite $x208 (= ?x193 (stack (top ?x59) ?x61)) $x234)))))
 (let (($x215 (and (= c_ center-to-left) $x211)))
 (let ((?x56 (left s_)))
 (let (($x216 ((_ is stack ) ?x56)))
 (let (($x218 (and (= c_ left-to-right) $x216)))
 (let (($x220 (and (= c_ left-to-center) $x216)))
 (ite $x220 $x234 (ite $x218 (= ?x193 (stack (top ?x56) ?x61)) (ite $x215 $x226 $x241))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x191 (left s__)))
 (let ((?x126 (left s___)))
 (let (($x327 (= ?x126 ?x191)))
 (let ((?x199 (right s__)))
 (let ((?x294 (top ?x199)))
 (let ((?x295 (stack ?x294 ?x191)))
 (let (($x321 (= ?x126 ?x295)))
 (let (($x297 ((_ is stack ) ?x199)))
 (let (($x300 (= c__ right-to-left)))
 (let (($x301 (and $x300 $x297)))
 (let ((?x193 (center s__)))
 (let (($x302 ((_ is stack ) ?x193)))
 (let (($x303 (= c__ center-to-right)))
 (let (($x304 (and $x303 $x302)))
 (let ((?x290 (top ?x193)))
 (let ((?x291 (stack ?x290 ?x191)))
 (let (($x318 (= ?x126 ?x291)))
 (let (($x305 (= c__ center-to-left)))
 (let (($x306 (and $x305 $x302)))
 (let ((?x128 (rest ?x191)))
 (let (($x314 (= ?x126 ?x128)))
 (let (($x307 ((_ is stack ) ?x191)))
 (let (($x308 (= c__ left-to-right)))
 (let (($x309 (and $x308 $x307)))
 (let (($x310 (= c__ left-to-center)))
 (let (($x311 (and $x310 $x307)))
 (ite $x311 $x314 (ite $x309 $x314 (ite $x306 $x318 (ite $x304 $x327 (ite $x301 $x321 $x327))))))))))))))))))))))))))))))))
(assert
 (let ((?x199 (right s__)))
 (let ((?x129 (right s___)))
 (let (($x323 (= ?x129 ?x199)))
 (let ((?x293 (rest ?x199)))
 (let (($x320 (= ?x129 ?x293)))
 (let (($x297 ((_ is stack ) ?x199)))
 (let (($x298 (= c__ right-to-center)))
 (let (($x299 (and $x298 $x297)))
 (let (($x300 (= c__ right-to-left)))
 (let (($x301 (and $x300 $x297)))
 (let ((?x193 (center s__)))
 (let ((?x290 (top ?x193)))
 (let ((?x292 (stack ?x290 ?x199)))
 (let (($x319 (= ?x129 ?x292)))
 (let (($x302 ((_ is stack ) ?x193)))
 (let (($x303 (= c__ center-to-right)))
 (let (($x304 (and $x303 $x302)))
 (let (($x305 (= c__ center-to-left)))
 (let (($x306 (and $x305 $x302)))
 (let ((?x191 (left s__)))
 (let (($x307 ((_ is stack ) ?x191)))
 (let (($x308 (= c__ left-to-right)))
 (let (($x309 (and $x308 $x307)))
 (let (($x340 (ite $x309 $x323 (ite $x306 $x323 (ite $x304 $x319 (ite $x301 $x320 (ite $x299 $x320 $x323)))))))
 (let ((?x188 (top ?x191)))
 (let ((?x286 (stack ?x188 ?x199)))
 (let (($x315 (= ?x129 ?x286)))
 (let (($x310 (= c__ left-to-center)))
 (let (($x311 (and $x310 $x307)))
 (ite $x311 $x315 $x340)))))))))))))))))))))))))))))))
(assert
 (let ((?x193 (center s__)))
 (let ((?x287 (center s___)))
 (let (($x325 (= ?x287 ?x193)))
 (let ((?x199 (right s__)))
 (let ((?x294 (top ?x199)))
 (let ((?x296 (stack ?x294 ?x193)))
 (let (($x322 (= ?x287 ?x296)))
 (let (($x297 ((_ is stack ) ?x199)))
 (let (($x298 (= c__ right-to-center)))
 (let (($x299 (and $x298 $x297)))
 (let (($x300 (= c__ right-to-left)))
 (let (($x301 (and $x300 $x297)))
 (let ((?x289 (rest ?x193)))
 (let (($x317 (= ?x287 ?x289)))
 (let (($x302 ((_ is stack ) ?x193)))
 (let (($x303 (= c__ center-to-right)))
 (let (($x304 (and $x303 $x302)))
 (let (($x305 (= c__ center-to-left)))
 (let (($x306 (and $x305 $x302)))
 (let ((?x191 (left s__)))
 (let ((?x188 (top ?x191)))
 (let ((?x288 (stack ?x188 ?x193)))
 (let (($x316 (= ?x287 ?x288)))
 (let (($x307 ((_ is stack ) ?x191)))
 (let (($x308 (= c__ left-to-right)))
 (let (($x309 (and $x308 $x307)))
 (let (($x339 (ite $x309 $x316 (ite $x306 $x317 (ite $x304 $x317 (ite $x301 $x325 (ite $x299 $x322 $x325)))))))
 (let (($x310 (= c__ left-to-center)))
 (let (($x311 (and $x310 $x307)))
 (ite $x311 $x325 $x339)))))))))))))))))))))))))))))))
(assert
 (let ((?x20 (stack A empty)))
 (let ((?x21 (stack B ?x20)))
 (let ((?x22 (stack C ?x21)))
 (let ((?x32 (stack F ?x22)))
 (let ((?x129 (right s___)))
 (let (($x343 (= ?x129 ?x32)))
 (let ((?x31 (stack H (stack D (stack E empty)))))
 (let ((?x287 (center s___)))
 (let (($x374 (= ?x287 ?x31)))
 (let ((?x28 (stack G empty)))
 (let ((?x126 (left s___)))
 (let (($x375 (= ?x126 ?x28)))
 (let (($x377 (not (and $x375 $x374 $x343))))
 (not $x377)))))))))))))))
(check-sat)
(exit)
