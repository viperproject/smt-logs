(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x115 (left s_tmp_)))
 (= ?x115 empty)))
(assert
 (let ((?x32 (stack O empty)))
 (let ((?x31 (stack S ?x32)))
 (let ((?x33 (stack C ?x31)))
 (let ((?x34 (stack D ?x33)))
 (let ((?x35 (stack F ?x34)))
 (let ((?x36 (stack A ?x35)))
 (let ((?x37 (stack K ?x36)))
 (let ((?x38 (stack J ?x37)))
 (let ((?x39 (stack E ?x38)))
 (let ((?x40 (stack N ?x39)))
 (let ((?x41 (stack R ?x40)))
 (let ((?x42 (stack L ?x41)))
 (let ((?x43 (stack I ?x42)))
 (let ((?x44 (stack Q ?x43)))
 (let ((?x45 (stack H ?x44)))
 (let ((?x46 (stack B ?x45)))
 (let ((?x47 (stack M ?x46)))
 (let ((?x48 (stack P ?x47)))
 (let ((?x118 (center s_tmp__)))
 (= ?x118 ?x48)))))))))))))))))))))
(assert
 (let ((?x49 (stack G empty)))
 (let ((?x121 (right s_tmp___)))
 (= ?x121 ?x49))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x148 (left s_tmp__)))
 (= (left s_tmp___) ?x148)))
(assert
 (let ((?x118 (center s_tmp__)))
 (= (center s_tmp___) ?x118)))
(assert
 (let ((?x152 (center s_tmp_)))
 (= ?x152 (center s_tmp))))
(assert
 (let ((?x155 (right s_tmp_)))
 (= ?x155 (right s_tmp))))
(assert
 (let ((?x115 (left s_tmp_)))
 (let ((?x148 (left s_tmp__)))
 (= ?x148 ?x115))))
(assert
 (let ((?x155 (right s_tmp_)))
 (let ((?x159 (right s_tmp__)))
 (= ?x159 ?x155))))
(assert
 (= c__ c!1))
(assert
 (let ((?x92 (left s_)))
 (let ((?x260 (left s__)))
 (let (($x305 (= ?x260 ?x92)))
 (let ((?x95 (right s_)))
 (let (($x275 ((_ is stack ) ?x95)))
 (let (($x278 (= c_ right-to-left)))
 (let (($x279 (and $x278 $x275)))
 (let ((?x97 (center s_)))
 (let (($x280 ((_ is stack ) ?x97)))
 (let (($x281 (= c_ center-to-right)))
 (let (($x282 (and $x281 $x280)))
 (let (($x283 (= c_ center-to-left)))
 (let (($x284 (and $x283 $x280)))
 (let (($x314 (ite $x284 (= ?x260 (stack (top ?x97) ?x92)) (ite $x282 $x305 (ite $x279 (= ?x260 (stack (top ?x95) ?x92)) $x305)))))
 (let (($x292 (= ?x260 (rest ?x92))))
 (let (($x285 ((_ is stack ) ?x92)))
 (let (($x287 (and (= c_ left-to-right) $x285)))
 (let (($x289 (and (= c_ left-to-center) $x285)))
 (ite $x289 $x292 (ite $x287 $x292 $x314)))))))))))))))))))))
(assert
 (let ((?x95 (right s_)))
 (let ((?x262 (right s__)))
 (let (($x301 (= ?x262 ?x95)))
 (let (($x298 (= ?x262 (rest ?x95))))
 (let (($x275 ((_ is stack ) ?x95)))
 (let (($x276 (= c_ right-to-center)))
 (let (($x277 (and $x276 $x275)))
 (let (($x278 (= c_ right-to-left)))
 (let (($x279 (and $x278 $x275)))
 (let ((?x97 (center s_)))
 (let (($x280 ((_ is stack ) ?x97)))
 (let (($x281 (= c_ center-to-right)))
 (let (($x282 (and $x281 $x280)))
 (let (($x311 (ite $x282 (= ?x262 (stack (top ?x97) ?x95)) (ite $x279 $x298 (ite $x277 $x298 $x301)))))
 (let (($x283 (= c_ center-to-left)))
 (let (($x284 (and $x283 $x280)))
 (let ((?x92 (left s_)))
 (let (($x285 ((_ is stack ) ?x92)))
 (let (($x287 (and (= c_ left-to-right) $x285)))
 (let (($x289 (and (= c_ left-to-center) $x285)))
 (ite $x289 (= ?x262 (stack (top ?x92) ?x95)) (ite $x287 $x301 (ite $x284 $x301 $x311))))))))))))))))))))))))
(assert
 (let ((?x97 (center s_)))
 (let ((?x265 (center s__)))
 (let (($x303 (= ?x265 ?x97)))
 (let ((?x95 (right s_)))
 (let (($x275 ((_ is stack ) ?x95)))
 (let (($x276 (= c_ right-to-center)))
 (let (($x277 (and $x276 $x275)))
 (let (($x278 (= c_ right-to-left)))
 (let (($x279 (and $x278 $x275)))
 (let (($x295 (= ?x265 (rest ?x97))))
 (let (($x280 ((_ is stack ) ?x97)))
 (let (($x281 (= c_ center-to-right)))
 (let (($x282 (and $x281 $x280)))
 (let (($x310 (ite $x282 $x295 (ite $x279 $x303 (ite $x277 (= ?x265 (stack (top ?x95) ?x97)) $x303)))))
 (let (($x283 (= c_ center-to-left)))
 (let (($x284 (and $x283 $x280)))
 (let ((?x92 (left s_)))
 (let (($x285 ((_ is stack ) ?x92)))
 (let (($x287 (and (= c_ left-to-right) $x285)))
 (let (($x289 (and (= c_ left-to-center) $x285)))
 (ite $x289 $x303 (ite $x287 (= ?x265 (stack (top ?x92) ?x97)) (ite $x284 $x295 $x310))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x260 (left s__)))
 (let ((?x162 (left s___)))
 (let (($x412 (= ?x162 ?x260)))
 (let ((?x262 (right s__)))
 (let ((?x379 (top ?x262)))
 (let ((?x380 (stack ?x379 ?x260)))
 (let (($x406 (= ?x162 ?x380)))
 (let (($x382 ((_ is stack ) ?x262)))
 (let (($x385 (= c__ right-to-left)))
 (let (($x386 (and $x385 $x382)))
 (let ((?x265 (center s__)))
 (let (($x387 ((_ is stack ) ?x265)))
 (let (($x388 (= c__ center-to-right)))
 (let (($x389 (and $x388 $x387)))
 (let ((?x375 (top ?x265)))
 (let ((?x376 (stack ?x375 ?x260)))
 (let (($x403 (= ?x162 ?x376)))
 (let (($x390 (= c__ center-to-left)))
 (let (($x391 (and $x390 $x387)))
 (let ((?x164 (rest ?x260)))
 (let (($x399 (= ?x162 ?x164)))
 (let (($x392 ((_ is stack ) ?x260)))
 (let (($x393 (= c__ left-to-right)))
 (let (($x394 (and $x393 $x392)))
 (let (($x395 (= c__ left-to-center)))
 (let (($x396 (and $x395 $x392)))
 (ite $x396 $x399 (ite $x394 $x399 (ite $x391 $x403 (ite $x389 $x412 (ite $x386 $x406 $x412))))))))))))))))))))))))))))))))
(assert
 (let ((?x262 (right s__)))
 (let ((?x165 (right s___)))
 (let (($x408 (= ?x165 ?x262)))
 (let ((?x378 (rest ?x262)))
 (let (($x405 (= ?x165 ?x378)))
 (let (($x382 ((_ is stack ) ?x262)))
 (let (($x383 (= c__ right-to-center)))
 (let (($x384 (and $x383 $x382)))
 (let (($x385 (= c__ right-to-left)))
 (let (($x386 (and $x385 $x382)))
 (let ((?x265 (center s__)))
 (let ((?x375 (top ?x265)))
 (let ((?x377 (stack ?x375 ?x262)))
 (let (($x404 (= ?x165 ?x377)))
 (let (($x387 ((_ is stack ) ?x265)))
 (let (($x388 (= c__ center-to-right)))
 (let (($x389 (and $x388 $x387)))
 (let (($x390 (= c__ center-to-left)))
 (let (($x391 (and $x390 $x387)))
 (let ((?x260 (left s__)))
 (let (($x392 ((_ is stack ) ?x260)))
 (let (($x393 (= c__ left-to-right)))
 (let (($x394 (and $x393 $x392)))
 (let (($x425 (ite $x394 $x408 (ite $x391 $x408 (ite $x389 $x404 (ite $x386 $x405 (ite $x384 $x405 $x408)))))))
 (let ((?x257 (top ?x260)))
 (let ((?x371 (stack ?x257 ?x262)))
 (let (($x400 (= ?x165 ?x371)))
 (let (($x395 (= c__ left-to-center)))
 (let (($x396 (and $x395 $x392)))
 (ite $x396 $x400 $x425)))))))))))))))))))))))))))))))
(assert
 (let ((?x265 (center s__)))
 (let ((?x372 (center s___)))
 (let (($x410 (= ?x372 ?x265)))
 (let ((?x262 (right s__)))
 (let ((?x379 (top ?x262)))
 (let ((?x381 (stack ?x379 ?x265)))
 (let (($x407 (= ?x372 ?x381)))
 (let (($x382 ((_ is stack ) ?x262)))
 (let (($x383 (= c__ right-to-center)))
 (let (($x384 (and $x383 $x382)))
 (let (($x385 (= c__ right-to-left)))
 (let (($x386 (and $x385 $x382)))
 (let ((?x374 (rest ?x265)))
 (let (($x402 (= ?x372 ?x374)))
 (let (($x387 ((_ is stack ) ?x265)))
 (let (($x388 (= c__ center-to-right)))
 (let (($x389 (and $x388 $x387)))
 (let (($x390 (= c__ center-to-left)))
 (let (($x391 (and $x390 $x387)))
 (let ((?x260 (left s__)))
 (let ((?x257 (top ?x260)))
 (let ((?x373 (stack ?x257 ?x265)))
 (let (($x401 (= ?x372 ?x373)))
 (let (($x392 ((_ is stack ) ?x260)))
 (let (($x393 (= c__ left-to-right)))
 (let (($x394 (and $x393 $x392)))
 (let (($x424 (ite $x394 $x401 (ite $x391 $x402 (ite $x389 $x402 (ite $x386 $x410 (ite $x384 $x407 $x410)))))))
 (let (($x395 (= c__ left-to-center)))
 (let (($x396 (and $x395 $x392)))
 (ite $x396 $x410 $x424)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x162 (left s___)))
 (let ((?x350 (left s____)))
 (let (($x551 (= ?x350 ?x162)))
 (let ((?x165 (right s___)))
 (let ((?x518 (top ?x165)))
 (let ((?x519 (stack ?x518 ?x162)))
 (let (($x545 (= ?x350 ?x519)))
 (let (($x521 ((_ is stack ) ?x165)))
 (let (($x524 (= c___ right-to-left)))
 (let (($x525 (and $x524 $x521)))
 (let ((?x372 (center s___)))
 (let (($x526 ((_ is stack ) ?x372)))
 (let (($x527 (= c___ center-to-right)))
 (let (($x528 (and $x527 $x526)))
 (let ((?x514 (top ?x372)))
 (let ((?x515 (stack ?x514 ?x162)))
 (let (($x542 (= ?x350 ?x515)))
 (let (($x529 (= c___ center-to-left)))
 (let (($x530 (and $x529 $x526)))
 (let ((?x351 (rest ?x162)))
 (let (($x538 (= ?x350 ?x351)))
 (let (($x531 ((_ is stack ) ?x162)))
 (let (($x532 (= c___ left-to-right)))
 (let (($x533 (and $x532 $x531)))
 (let (($x534 (= c___ left-to-center)))
 (let (($x535 (and $x534 $x531)))
 (ite $x535 $x538 (ite $x533 $x538 (ite $x530 $x542 (ite $x528 $x551 (ite $x525 $x545 $x551))))))))))))))))))))))))))))))))
(assert
 (let ((?x165 (right s___)))
 (let ((?x370 (right s____)))
 (let (($x547 (= ?x370 ?x165)))
 (let ((?x517 (rest ?x165)))
 (let (($x544 (= ?x370 ?x517)))
 (let (($x521 ((_ is stack ) ?x165)))
 (let (($x522 (= c___ right-to-center)))
 (let (($x523 (and $x522 $x521)))
 (let (($x524 (= c___ right-to-left)))
 (let (($x525 (and $x524 $x521)))
 (let ((?x372 (center s___)))
 (let ((?x514 (top ?x372)))
 (let ((?x516 (stack ?x514 ?x165)))
 (let (($x543 (= ?x370 ?x516)))
 (let (($x526 ((_ is stack ) ?x372)))
 (let (($x527 (= c___ center-to-right)))
 (let (($x528 (and $x527 $x526)))
 (let (($x529 (= c___ center-to-left)))
 (let (($x530 (and $x529 $x526)))
 (let ((?x162 (left s___)))
 (let (($x531 ((_ is stack ) ?x162)))
 (let (($x532 (= c___ left-to-right)))
 (let (($x533 (and $x532 $x531)))
 (let (($x564 (ite $x533 $x547 (ite $x530 $x547 (ite $x528 $x543 (ite $x525 $x544 (ite $x523 $x544 $x547)))))))
 (let ((?x509 (top ?x162)))
 (let ((?x510 (stack ?x509 ?x165)))
 (let (($x539 (= ?x370 ?x510)))
 (let (($x534 (= c___ left-to-center)))
 (let (($x535 (and $x534 $x531)))
 (ite $x535 $x539 $x564)))))))))))))))))))))))))))))))
(assert
 (let ((?x372 (center s___)))
 (let ((?x511 (center s____)))
 (let (($x549 (= ?x511 ?x372)))
 (let ((?x165 (right s___)))
 (let ((?x518 (top ?x165)))
 (let ((?x520 (stack ?x518 ?x372)))
 (let (($x546 (= ?x511 ?x520)))
 (let (($x521 ((_ is stack ) ?x165)))
 (let (($x522 (= c___ right-to-center)))
 (let (($x523 (and $x522 $x521)))
 (let (($x524 (= c___ right-to-left)))
 (let (($x525 (and $x524 $x521)))
 (let ((?x513 (rest ?x372)))
 (let (($x541 (= ?x511 ?x513)))
 (let (($x526 ((_ is stack ) ?x372)))
 (let (($x527 (= c___ center-to-right)))
 (let (($x528 (and $x527 $x526)))
 (let (($x529 (= c___ center-to-left)))
 (let (($x530 (and $x529 $x526)))
 (let ((?x162 (left s___)))
 (let ((?x509 (top ?x162)))
 (let ((?x512 (stack ?x509 ?x372)))
 (let (($x540 (= ?x511 ?x512)))
 (let (($x531 ((_ is stack ) ?x162)))
 (let (($x532 (= c___ left-to-right)))
 (let (($x533 (and $x532 $x531)))
 (let (($x563 (ite $x533 $x540 (ite $x530 $x541 (ite $x528 $x541 (ite $x525 $x549 (ite $x523 $x546 $x549)))))))
 (let (($x534 (= c___ left-to-center)))
 (let (($x535 (and $x534 $x531)))
 (ite $x535 $x549 $x563)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x350 (left s____)))
 (let ((?x428 (left s_____)))
 (let (($x689 (= ?x428 ?x350)))
 (let ((?x370 (right s____)))
 (let ((?x656 (top ?x370)))
 (let ((?x657 (stack ?x656 ?x350)))
 (let (($x683 (= ?x428 ?x657)))
 (let (($x659 ((_ is stack ) ?x370)))
 (let (($x662 (= c____ right-to-left)))
 (let (($x663 (and $x662 $x659)))
 (let ((?x511 (center s____)))
 (let (($x664 ((_ is stack ) ?x511)))
 (let (($x665 (= c____ center-to-right)))
 (let (($x666 (and $x665 $x664)))
 (let ((?x652 (top ?x511)))
 (let ((?x653 (stack ?x652 ?x350)))
 (let (($x680 (= ?x428 ?x653)))
 (let (($x667 (= c____ center-to-left)))
 (let (($x668 (and $x667 $x664)))
 (let ((?x461 (rest ?x350)))
 (let (($x676 (= ?x428 ?x461)))
 (let (($x669 ((_ is stack ) ?x350)))
 (let (($x670 (= c____ left-to-right)))
 (let (($x671 (and $x670 $x669)))
 (let (($x672 (= c____ left-to-center)))
 (let (($x673 (and $x672 $x669)))
 (ite $x673 $x676 (ite $x671 $x676 (ite $x668 $x680 (ite $x666 $x689 (ite $x663 $x683 $x689))))))))))))))))))))))))))))))))
(assert
 (let ((?x370 (right s____)))
 (let ((?x462 (right s_____)))
 (let (($x685 (= ?x462 ?x370)))
 (let ((?x655 (rest ?x370)))
 (let (($x682 (= ?x462 ?x655)))
 (let (($x659 ((_ is stack ) ?x370)))
 (let (($x660 (= c____ right-to-center)))
 (let (($x661 (and $x660 $x659)))
 (let (($x662 (= c____ right-to-left)))
 (let (($x663 (and $x662 $x659)))
 (let ((?x511 (center s____)))
 (let ((?x652 (top ?x511)))
 (let ((?x654 (stack ?x652 ?x370)))
 (let (($x681 (= ?x462 ?x654)))
 (let (($x664 ((_ is stack ) ?x511)))
 (let (($x665 (= c____ center-to-right)))
 (let (($x666 (and $x665 $x664)))
 (let (($x667 (= c____ center-to-left)))
 (let (($x668 (and $x667 $x664)))
 (let ((?x350 (left s____)))
 (let (($x669 ((_ is stack ) ?x350)))
 (let (($x670 (= c____ left-to-right)))
 (let (($x671 (and $x670 $x669)))
 (let (($x702 (ite $x671 $x685 (ite $x668 $x685 (ite $x666 $x681 (ite $x663 $x682 (ite $x661 $x682 $x685)))))))
 (let ((?x508 (top ?x350)))
 (let ((?x648 (stack ?x508 ?x370)))
 (let (($x677 (= ?x462 ?x648)))
 (let (($x672 (= c____ left-to-center)))
 (let (($x673 (and $x672 $x669)))
 (ite $x673 $x677 $x702)))))))))))))))))))))))))))))))
(assert
 (let ((?x511 (center s____)))
 (let ((?x649 (center s_____)))
 (let (($x687 (= ?x649 ?x511)))
 (let ((?x370 (right s____)))
 (let ((?x656 (top ?x370)))
 (let ((?x658 (stack ?x656 ?x511)))
 (let (($x684 (= ?x649 ?x658)))
 (let (($x659 ((_ is stack ) ?x370)))
 (let (($x660 (= c____ right-to-center)))
 (let (($x661 (and $x660 $x659)))
 (let (($x662 (= c____ right-to-left)))
 (let (($x663 (and $x662 $x659)))
 (let ((?x651 (rest ?x511)))
 (let (($x679 (= ?x649 ?x651)))
 (let (($x664 ((_ is stack ) ?x511)))
 (let (($x665 (= c____ center-to-right)))
 (let (($x666 (and $x665 $x664)))
 (let (($x667 (= c____ center-to-left)))
 (let (($x668 (and $x667 $x664)))
 (let ((?x350 (left s____)))
 (let ((?x508 (top ?x350)))
 (let ((?x650 (stack ?x508 ?x511)))
 (let (($x678 (= ?x649 ?x650)))
 (let (($x669 ((_ is stack ) ?x350)))
 (let (($x670 (= c____ left-to-right)))
 (let (($x671 (and $x670 $x669)))
 (let (($x701 (ite $x671 $x678 (ite $x668 $x679 (ite $x666 $x679 (ite $x663 $x687 (ite $x661 $x684 $x687)))))))
 (let (($x672 (= c____ left-to-center)))
 (let (($x673 (and $x672 $x669)))
 (ite $x673 $x687 $x701)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x428 (left s_____)))
 (let ((?x567 (left s______)))
 (let (($x827 (= ?x567 ?x428)))
 (let ((?x462 (right s_____)))
 (let ((?x794 (top ?x462)))
 (let ((?x795 (stack ?x794 ?x428)))
 (let (($x821 (= ?x567 ?x795)))
 (let (($x797 ((_ is stack ) ?x462)))
 (let (($x800 (= c_____ right-to-left)))
 (let (($x801 (and $x800 $x797)))
 (let ((?x649 (center s_____)))
 (let (($x802 ((_ is stack ) ?x649)))
 (let (($x803 (= c_____ center-to-right)))
 (let (($x804 (and $x803 $x802)))
 (let ((?x790 (top ?x649)))
 (let ((?x791 (stack ?x790 ?x428)))
 (let (($x818 (= ?x567 ?x791)))
 (let (($x805 (= c_____ center-to-left)))
 (let (($x806 (and $x805 $x802)))
 (let ((?x600 (rest ?x428)))
 (let (($x814 (= ?x567 ?x600)))
 (let (($x807 ((_ is stack ) ?x428)))
 (let (($x808 (= c_____ left-to-right)))
 (let (($x809 (and $x808 $x807)))
 (let (($x810 (= c_____ left-to-center)))
 (let (($x811 (and $x810 $x807)))
 (ite $x811 $x814 (ite $x809 $x814 (ite $x806 $x818 (ite $x804 $x827 (ite $x801 $x821 $x827))))))))))))))))))))))))))))))))
(assert
 (let ((?x462 (right s_____)))
 (let ((?x601 (right s______)))
 (let (($x823 (= ?x601 ?x462)))
 (let ((?x793 (rest ?x462)))
 (let (($x820 (= ?x601 ?x793)))
 (let (($x797 ((_ is stack ) ?x462)))
 (let (($x798 (= c_____ right-to-center)))
 (let (($x799 (and $x798 $x797)))
 (let (($x800 (= c_____ right-to-left)))
 (let (($x801 (and $x800 $x797)))
 (let ((?x649 (center s_____)))
 (let ((?x790 (top ?x649)))
 (let ((?x792 (stack ?x790 ?x462)))
 (let (($x819 (= ?x601 ?x792)))
 (let (($x802 ((_ is stack ) ?x649)))
 (let (($x803 (= c_____ center-to-right)))
 (let (($x804 (and $x803 $x802)))
 (let (($x805 (= c_____ center-to-left)))
 (let (($x806 (and $x805 $x802)))
 (let ((?x428 (left s_____)))
 (let (($x807 ((_ is stack ) ?x428)))
 (let (($x808 (= c_____ left-to-right)))
 (let (($x809 (and $x808 $x807)))
 (let (($x840 (ite $x809 $x823 (ite $x806 $x823 (ite $x804 $x819 (ite $x801 $x820 (ite $x799 $x820 $x823)))))))
 (let ((?x647 (top ?x428)))
 (let ((?x786 (stack ?x647 ?x462)))
 (let (($x815 (= ?x601 ?x786)))
 (let (($x810 (= c_____ left-to-center)))
 (let (($x811 (and $x810 $x807)))
 (ite $x811 $x815 $x840)))))))))))))))))))))))))))))))
(assert
 (let ((?x649 (center s_____)))
 (let ((?x787 (center s______)))
 (let (($x825 (= ?x787 ?x649)))
 (let ((?x462 (right s_____)))
 (let ((?x794 (top ?x462)))
 (let ((?x796 (stack ?x794 ?x649)))
 (let (($x822 (= ?x787 ?x796)))
 (let (($x797 ((_ is stack ) ?x462)))
 (let (($x798 (= c_____ right-to-center)))
 (let (($x799 (and $x798 $x797)))
 (let (($x800 (= c_____ right-to-left)))
 (let (($x801 (and $x800 $x797)))
 (let ((?x789 (rest ?x649)))
 (let (($x817 (= ?x787 ?x789)))
 (let (($x802 ((_ is stack ) ?x649)))
 (let (($x803 (= c_____ center-to-right)))
 (let (($x804 (and $x803 $x802)))
 (let (($x805 (= c_____ center-to-left)))
 (let (($x806 (and $x805 $x802)))
 (let ((?x428 (left s_____)))
 (let ((?x647 (top ?x428)))
 (let ((?x788 (stack ?x647 ?x649)))
 (let (($x816 (= ?x787 ?x788)))
 (let (($x807 ((_ is stack ) ?x428)))
 (let (($x808 (= c_____ left-to-right)))
 (let (($x809 (and $x808 $x807)))
 (let (($x839 (ite $x809 $x816 (ite $x806 $x817 (ite $x804 $x817 (ite $x801 $x825 (ite $x799 $x822 $x825)))))))
 (let (($x810 (= c_____ left-to-center)))
 (let (($x811 (and $x810 $x807)))
 (ite $x811 $x825 $x839)))))))))))))))))))))))))))))))
(assert
 (let ((?x601 (right s______)))
 (let (($x843 (= ?x601 empty)))
 (let ((?x68 (stack O (stack C empty))))
 (let ((?x787 (center s______)))
 (let (($x874 (= ?x787 ?x68)))
 (let ((?x55 (stack S (stack I (stack A (stack M (stack D (stack B empty))))))))
 (let ((?x61 (stack K (stack F (stack E (stack N (stack L (stack P ?x55))))))))
 (let ((?x66 (stack G (stack Q (stack H (stack R (stack J ?x61)))))))
 (let ((?x567 (left s______)))
 (let (($x875 (= ?x567 ?x66)))
 (let (($x877 (not (and $x875 $x874 $x843))))
 (not $x877)))))))))))))
(check-sat)
(exit)
