(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V) (W) (X) (Y))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x37 (stack G empty)))
 (let ((?x132 (left s_tmp_)))
 (= ?x132 ?x37))))
(assert
 (let ((?x38 (stack O empty)))
 (let ((?x39 (stack H ?x38)))
 (let ((?x40 (stack U ?x39)))
 (let ((?x41 (stack J ?x40)))
 (let ((?x42 (stack V ?x41)))
 (let ((?x43 (stack W ?x42)))
 (let ((?x44 (stack Q ?x43)))
 (let ((?x45 (stack I ?x44)))
 (let ((?x46 (stack T ?x45)))
 (let ((?x47 (stack B ?x46)))
 (let ((?x48 (stack P ?x47)))
 (let ((?x49 (stack D ?x48)))
 (let ((?x50 (stack S ?x49)))
 (let ((?x51 (stack A ?x50)))
 (let ((?x52 (stack M ?x51)))
 (let ((?x53 (stack E ?x52)))
 (let ((?x54 (stack X ?x53)))
 (let ((?x55 (stack N ?x54)))
 (let ((?x56 (stack Y ?x55)))
 (let ((?x57 (stack F ?x56)))
 (let ((?x58 (stack R ?x57)))
 (let ((?x59 (stack K ?x58)))
 (let ((?x60 (stack L ?x59)))
 (let ((?x61 (stack C ?x60)))
 (let ((?x135 (center s_tmp__)))
 (= ?x135 ?x61)))))))))))))))))))))))))))
(assert
 (let ((?x138 (right s_tmp___)))
 (= ?x138 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x165 (left s_tmp__)))
 (= (left s_tmp___) ?x165)))
(assert
 (let ((?x135 (center s_tmp__)))
 (= (center s_tmp___) ?x135)))
(assert
 (let ((?x169 (center s_tmp_)))
 (= ?x169 (center s_tmp))))
(assert
 (let ((?x172 (right s_tmp_)))
 (= ?x172 (right s_tmp))))
(assert
 (let ((?x132 (left s_tmp_)))
 (let ((?x165 (left s_tmp__)))
 (= ?x165 ?x132))))
(assert
 (let ((?x172 (right s_tmp_)))
 (let ((?x176 (right s_tmp__)))
 (= ?x176 ?x172))))
(assert
 (= c__ c!1))
(assert
 (let ((?x109 (left s_)))
 (let ((?x306 (left s__)))
 (let (($x327 (= ?x306 ?x109)))
 (let ((?x112 (right s_)))
 (let (($x312 ((_ is stack ) ?x112)))
 (let (($x298 (and (= c_ right-to-left) $x312)))
 (let ((?x114 (center s_)))
 (let (($x299 ((_ is stack ) ?x114)))
 (let (($x300 (= c_ center-to-right)))
 (let (($x316 (and $x300 $x299)))
 (let (($x317 (= c_ center-to-left)))
 (let (($x318 (and $x317 $x299)))
 (let (($x348 (ite $x318 (= ?x306 (stack (top ?x114) ?x109)) (ite $x316 $x327 (ite $x298 (= ?x306 (stack (top ?x112) ?x109)) $x327)))))
 (let ((?x337 (rest ?x109)))
 (let (($x293 (= ?x306 ?x337)))
 (let (($x322 ((_ is stack ) ?x109)))
 (let (($x323 (= c_ left-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x295 (= c_ left-to-center)))
 (let (($x296 (and $x295 $x322)))
 (ite $x296 $x293 (ite $x324 $x293 $x348)))))))))))))))))))))))
(assert
 (let ((?x112 (right s_)))
 (let ((?x338 (right s__)))
 (let (($x314 (= ?x338 ?x112)))
 (let ((?x308 (rest ?x112)))
 (let (($x332 (= ?x338 ?x308)))
 (let (($x312 ((_ is stack ) ?x112)))
 (let (($x341 (and (= c_ right-to-center) $x312)))
 (let (($x298 (and (= c_ right-to-left) $x312)))
 (let ((?x114 (center s_)))
 (let (($x299 ((_ is stack ) ?x114)))
 (let (($x300 (= c_ center-to-right)))
 (let (($x316 (and $x300 $x299)))
 (let (($x345 (ite $x316 (= ?x338 (stack (top ?x114) ?x112)) (ite $x298 $x332 (ite $x341 $x332 $x314)))))
 (let (($x317 (= c_ center-to-left)))
 (let (($x318 (and $x317 $x299)))
 (let ((?x109 (left s_)))
 (let (($x322 ((_ is stack ) ?x109)))
 (let (($x323 (= c_ left-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x295 (= c_ left-to-center)))
 (let (($x296 (and $x295 $x322)))
 (ite $x296 (= ?x338 (stack (top ?x109) ?x112)) (ite $x324 $x314 (ite $x318 $x314 $x345)))))))))))))))))))))))))
(assert
 (let ((?x114 (center s_)))
 (let ((?x335 (center s__)))
 (let (($x325 (= ?x335 ?x114)))
 (let ((?x112 (right s_)))
 (let (($x312 ((_ is stack ) ?x112)))
 (let (($x341 (and (= c_ right-to-center) $x312)))
 (let (($x298 (and (= c_ right-to-left) $x312)))
 (let ((?x328 (rest ?x114)))
 (let (($x302 (= ?x335 ?x328)))
 (let (($x299 ((_ is stack ) ?x114)))
 (let (($x300 (= c_ center-to-right)))
 (let (($x316 (and $x300 $x299)))
 (let (($x344 (ite $x316 $x302 (ite $x298 $x325 (ite $x341 (= ?x335 (stack (top ?x112) ?x114)) $x325)))))
 (let (($x317 (= c_ center-to-left)))
 (let (($x318 (and $x317 $x299)))
 (let ((?x109 (left s_)))
 (let (($x322 ((_ is stack ) ?x109)))
 (let (($x323 (= c_ left-to-right)))
 (let (($x324 (and $x323 $x322)))
 (let (($x295 (= c_ left-to-center)))
 (let (($x296 (and $x295 $x322)))
 (ite $x296 $x325 (ite $x324 (= ?x335 (stack (top ?x109) ?x114)) (ite $x318 $x302 $x344)))))))))))))))))))))))))
(assert
 (let ((?x338 (right s__)))
 (let (($x364 (= ?x338 empty)))
 (let ((?x75 (stack L (stack D (stack Y (stack Q (stack J (stack C empty))))))))
 (let ((?x81 (stack E (stack S (stack P (stack O (stack R (stack W ?x75))))))))
 (let ((?x85 (stack U (stack M (stack B (stack F ?x81))))))
 (let ((?x335 (center s__)))
 (let (($x355 (= ?x335 ?x85)))
 (let ((?x66 (stack I (stack N (stack A (stack T (stack X (stack G empty))))))))
 (let ((?x69 (stack K (stack H (stack V ?x66)))))
 (let ((?x306 (left s__)))
 (let (($x382 (= ?x306 ?x69)))
 (let (($x384 (not (and $x382 $x355 $x364))))
 (not $x384))))))))))))))
(check-sat)
(exit)
