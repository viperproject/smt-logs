(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat) 
(declare-datatypes ((Enum_A_B_C 0)) (((A) (B) (C))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x15 (stack A empty)))
 (let ((?x16 (stack B ?x15)))
 (let ((?x17 (stack C ?x16)))
 (let ((?x66 (left s_tmp_)))
 (= ?x66 ?x17))))))
(assert
 (let ((?x69 (center s_tmp__)))
 (= ?x69 empty)))
(assert
 (let ((?x72 (right s_tmp___)))
 (= ?x72 empty)))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x99 (left s_tmp__)))
 (= (left s_tmp___) ?x99)))
(assert
 (let ((?x69 (center s_tmp__)))
 (= (center s_tmp___) ?x69)))
(assert
 (let ((?x103 (center s_tmp_)))
 (= ?x103 (center s_tmp))))
(assert
 (let ((?x106 (right s_tmp_)))
 (= ?x106 (right s_tmp))))
(assert
 (let ((?x66 (left s_tmp_)))
 (let ((?x99 (left s_tmp__)))
 (= ?x99 ?x66))))
(assert
 (let ((?x106 (right s_tmp_)))
 (let ((?x110 (right s_tmp__)))
 (= ?x110 ?x106))))
(assert
 (= c__ c!1))
(assert
 (let ((?x43 (left s_)))
 (let ((?x163 (left s__)))
 (let (($x208 (= ?x163 ?x43)))
 (let ((?x46 (right s_)))
 (let (($x178 ((_ is stack ) ?x46)))
 (let (($x182 (and (= c_ right-to-left) $x178)))
 (let ((?x48 (center s_)))
 (let (($x183 ((_ is stack ) ?x48)))
 (let (($x185 (and (= c_ center-to-right) $x183)))
 (let (($x187 (and (= c_ center-to-left) $x183)))
 (let (($x217 (ite $x187 (= ?x163 (stack (top ?x48) ?x43)) (ite $x185 $x208 (ite $x182 (= ?x163 (stack (top ?x46) ?x43)) $x208)))))
 (let (($x195 (= ?x163 (rest ?x43))))
 (let (($x188 ((_ is stack ) ?x43)))
 (let (($x189 (= c_ left-to-right)))
 (let (($x190 (and $x189 $x188)))
 (let (($x191 (= c_ left-to-center)))
 (let (($x192 (and $x191 $x188)))
 (ite $x192 $x195 (ite $x190 $x195 $x217))))))))))))))))))))
(assert
 (let ((?x46 (right s_)))
 (let ((?x165 (right s__)))
 (let (($x204 (= ?x165 ?x46)))
 (let (($x201 (= ?x165 (rest ?x46))))
 (let (($x178 ((_ is stack ) ?x46)))
 (let (($x180 (and (= c_ right-to-center) $x178)))
 (let (($x182 (and (= c_ right-to-left) $x178)))
 (let ((?x48 (center s_)))
 (let (($x183 ((_ is stack ) ?x48)))
 (let (($x185 (and (= c_ center-to-right) $x183)))
 (let (($x214 (ite $x185 (= ?x165 (stack (top ?x48) ?x46)) (ite $x182 $x201 (ite $x180 $x201 $x204)))))
 (let (($x187 (and (= c_ center-to-left) $x183)))
 (let ((?x43 (left s_)))
 (let (($x188 ((_ is stack ) ?x43)))
 (let (($x189 (= c_ left-to-right)))
 (let (($x190 (and $x189 $x188)))
 (let (($x191 (= c_ left-to-center)))
 (let (($x192 (and $x191 $x188)))
 (ite $x192 (= ?x165 (stack (top ?x43) ?x46)) (ite $x190 $x204 (ite $x187 $x204 $x214))))))))))))))))))))))
(assert
 (let ((?x48 (center s_)))
 (let ((?x168 (center s__)))
 (let (($x206 (= ?x168 ?x48)))
 (let ((?x46 (right s_)))
 (let (($x178 ((_ is stack ) ?x46)))
 (let (($x180 (and (= c_ right-to-center) $x178)))
 (let (($x182 (and (= c_ right-to-left) $x178)))
 (let (($x198 (= ?x168 (rest ?x48))))
 (let (($x183 ((_ is stack ) ?x48)))
 (let (($x185 (and (= c_ center-to-right) $x183)))
 (let (($x213 (ite $x185 $x198 (ite $x182 $x206 (ite $x180 (= ?x168 (stack (top ?x46) ?x48)) $x206)))))
 (let (($x187 (and (= c_ center-to-left) $x183)))
 (let ((?x43 (left s_)))
 (let (($x188 ((_ is stack ) ?x43)))
 (let (($x189 (= c_ left-to-right)))
 (let (($x190 (and $x189 $x188)))
 (let (($x191 (= c_ left-to-center)))
 (let (($x192 (and $x191 $x188)))
 (ite $x192 $x206 (ite $x190 (= ?x168 (stack (top ?x43) ?x48)) (ite $x187 $x198 $x213))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x163 (left s__)))
 (let ((?x113 (left s___)))
 (let (($x297 (= ?x113 ?x163)))
 (let ((?x165 (right s__)))
 (let ((?x264 (top ?x165)))
 (let ((?x265 (stack ?x264 ?x163)))
 (let (($x291 (= ?x113 ?x265)))
 (let (($x267 ((_ is stack ) ?x165)))
 (let (($x270 (= c__ right-to-left)))
 (let (($x271 (and $x270 $x267)))
 (let ((?x168 (center s__)))
 (let (($x272 ((_ is stack ) ?x168)))
 (let (($x273 (= c__ center-to-right)))
 (let (($x274 (and $x273 $x272)))
 (let ((?x260 (top ?x168)))
 (let ((?x261 (stack ?x260 ?x163)))
 (let (($x288 (= ?x113 ?x261)))
 (let (($x275 (= c__ center-to-left)))
 (let (($x276 (and $x275 $x272)))
 (let ((?x115 (rest ?x163)))
 (let (($x284 (= ?x113 ?x115)))
 (let (($x277 ((_ is stack ) ?x163)))
 (let (($x278 (= c__ left-to-right)))
 (let (($x279 (and $x278 $x277)))
 (let (($x280 (= c__ left-to-center)))
 (let (($x281 (and $x280 $x277)))
 (ite $x281 $x284 (ite $x279 $x284 (ite $x276 $x288 (ite $x274 $x297 (ite $x271 $x291 $x297))))))))))))))))))))))))))))))))
(assert
 (let ((?x165 (right s__)))
 (let ((?x116 (right s___)))
 (let (($x293 (= ?x116 ?x165)))
 (let ((?x263 (rest ?x165)))
 (let (($x290 (= ?x116 ?x263)))
 (let (($x267 ((_ is stack ) ?x165)))
 (let (($x268 (= c__ right-to-center)))
 (let (($x269 (and $x268 $x267)))
 (let (($x270 (= c__ right-to-left)))
 (let (($x271 (and $x270 $x267)))
 (let ((?x168 (center s__)))
 (let ((?x260 (top ?x168)))
 (let ((?x262 (stack ?x260 ?x165)))
 (let (($x289 (= ?x116 ?x262)))
 (let (($x272 ((_ is stack ) ?x168)))
 (let (($x273 (= c__ center-to-right)))
 (let (($x274 (and $x273 $x272)))
 (let (($x275 (= c__ center-to-left)))
 (let (($x276 (and $x275 $x272)))
 (let ((?x163 (left s__)))
 (let (($x277 ((_ is stack ) ?x163)))
 (let (($x278 (= c__ left-to-right)))
 (let (($x279 (and $x278 $x277)))
 (let (($x310 (ite $x279 $x293 (ite $x276 $x293 (ite $x274 $x289 (ite $x271 $x290 (ite $x269 $x290 $x293)))))))
 (let ((?x160 (top ?x163)))
 (let ((?x256 (stack ?x160 ?x165)))
 (let (($x285 (= ?x116 ?x256)))
 (let (($x280 (= c__ left-to-center)))
 (let (($x281 (and $x280 $x277)))
 (ite $x281 $x285 $x310)))))))))))))))))))))))))))))))
(assert
 (let ((?x168 (center s__)))
 (let ((?x257 (center s___)))
 (let (($x295 (= ?x257 ?x168)))
 (let ((?x165 (right s__)))
 (let ((?x264 (top ?x165)))
 (let ((?x266 (stack ?x264 ?x168)))
 (let (($x292 (= ?x257 ?x266)))
 (let (($x267 ((_ is stack ) ?x165)))
 (let (($x268 (= c__ right-to-center)))
 (let (($x269 (and $x268 $x267)))
 (let (($x270 (= c__ right-to-left)))
 (let (($x271 (and $x270 $x267)))
 (let ((?x259 (rest ?x168)))
 (let (($x287 (= ?x257 ?x259)))
 (let (($x272 ((_ is stack ) ?x168)))
 (let (($x273 (= c__ center-to-right)))
 (let (($x274 (and $x273 $x272)))
 (let (($x275 (= c__ center-to-left)))
 (let (($x276 (and $x275 $x272)))
 (let ((?x163 (left s__)))
 (let ((?x160 (top ?x163)))
 (let ((?x258 (stack ?x160 ?x168)))
 (let (($x286 (= ?x257 ?x258)))
 (let (($x277 ((_ is stack ) ?x163)))
 (let (($x278 (= c__ left-to-right)))
 (let (($x279 (and $x278 $x277)))
 (let (($x309 (ite $x279 $x286 (ite $x276 $x287 (ite $x274 $x287 (ite $x271 $x295 (ite $x269 $x292 $x295)))))))
 (let (($x280 (= c__ left-to-center)))
 (let (($x281 (and $x280 $x277)))
 (ite $x281 $x295 $x309)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x113 (left s___)))
 (let ((?x238 (left s____)))
 (let (($x436 (= ?x238 ?x113)))
 (let ((?x116 (right s___)))
 (let ((?x403 (top ?x116)))
 (let ((?x404 (stack ?x403 ?x113)))
 (let (($x430 (= ?x238 ?x404)))
 (let (($x406 ((_ is stack ) ?x116)))
 (let (($x409 (= c___ right-to-left)))
 (let (($x410 (and $x409 $x406)))
 (let ((?x257 (center s___)))
 (let (($x411 ((_ is stack ) ?x257)))
 (let (($x412 (= c___ center-to-right)))
 (let (($x413 (and $x412 $x411)))
 (let ((?x399 (top ?x257)))
 (let ((?x400 (stack ?x399 ?x113)))
 (let (($x427 (= ?x238 ?x400)))
 (let (($x414 (= c___ center-to-left)))
 (let (($x415 (and $x414 $x411)))
 (let ((?x239 (rest ?x113)))
 (let (($x423 (= ?x238 ?x239)))
 (let (($x416 ((_ is stack ) ?x113)))
 (let (($x417 (= c___ left-to-right)))
 (let (($x418 (and $x417 $x416)))
 (let (($x419 (= c___ left-to-center)))
 (let (($x420 (and $x419 $x416)))
 (ite $x420 $x423 (ite $x418 $x423 (ite $x415 $x427 (ite $x413 $x436 (ite $x410 $x430 $x436))))))))))))))))))))))))))))))))
(assert
 (let ((?x116 (right s___)))
 (let ((?x255 (right s____)))
 (let (($x432 (= ?x255 ?x116)))
 (let ((?x402 (rest ?x116)))
 (let (($x429 (= ?x255 ?x402)))
 (let (($x406 ((_ is stack ) ?x116)))
 (let (($x407 (= c___ right-to-center)))
 (let (($x408 (and $x407 $x406)))
 (let (($x409 (= c___ right-to-left)))
 (let (($x410 (and $x409 $x406)))
 (let ((?x257 (center s___)))
 (let ((?x399 (top ?x257)))
 (let ((?x401 (stack ?x399 ?x116)))
 (let (($x428 (= ?x255 ?x401)))
 (let (($x411 ((_ is stack ) ?x257)))
 (let (($x412 (= c___ center-to-right)))
 (let (($x413 (and $x412 $x411)))
 (let (($x414 (= c___ center-to-left)))
 (let (($x415 (and $x414 $x411)))
 (let ((?x113 (left s___)))
 (let (($x416 ((_ is stack ) ?x113)))
 (let (($x417 (= c___ left-to-right)))
 (let (($x418 (and $x417 $x416)))
 (let (($x449 (ite $x418 $x432 (ite $x415 $x432 (ite $x413 $x428 (ite $x410 $x429 (ite $x408 $x429 $x432)))))))
 (let ((?x394 (top ?x113)))
 (let ((?x395 (stack ?x394 ?x116)))
 (let (($x424 (= ?x255 ?x395)))
 (let (($x419 (= c___ left-to-center)))
 (let (($x420 (and $x419 $x416)))
 (ite $x420 $x424 $x449)))))))))))))))))))))))))))))))
(assert
 (let ((?x257 (center s___)))
 (let ((?x396 (center s____)))
 (let (($x434 (= ?x396 ?x257)))
 (let ((?x116 (right s___)))
 (let ((?x403 (top ?x116)))
 (let ((?x405 (stack ?x403 ?x257)))
 (let (($x431 (= ?x396 ?x405)))
 (let (($x406 ((_ is stack ) ?x116)))
 (let (($x407 (= c___ right-to-center)))
 (let (($x408 (and $x407 $x406)))
 (let (($x409 (= c___ right-to-left)))
 (let (($x410 (and $x409 $x406)))
 (let ((?x398 (rest ?x257)))
 (let (($x426 (= ?x396 ?x398)))
 (let (($x411 ((_ is stack ) ?x257)))
 (let (($x412 (= c___ center-to-right)))
 (let (($x413 (and $x412 $x411)))
 (let (($x414 (= c___ center-to-left)))
 (let (($x415 (and $x414 $x411)))
 (let ((?x113 (left s___)))
 (let ((?x394 (top ?x113)))
 (let ((?x397 (stack ?x394 ?x257)))
 (let (($x425 (= ?x396 ?x397)))
 (let (($x416 ((_ is stack ) ?x113)))
 (let (($x417 (= c___ left-to-right)))
 (let (($x418 (and $x417 $x416)))
 (let (($x448 (ite $x418 $x425 (ite $x415 $x426 (ite $x413 $x426 (ite $x410 $x434 (ite $x408 $x431 $x434)))))))
 (let (($x419 (= c___ left-to-center)))
 (let (($x420 (and $x419 $x416)))
 (ite $x420 $x434 $x448)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x238 (left s____)))
 (let ((?x313 (left s_____)))
 (let (($x574 (= ?x313 ?x238)))
 (let ((?x255 (right s____)))
 (let ((?x541 (top ?x255)))
 (let ((?x542 (stack ?x541 ?x238)))
 (let (($x568 (= ?x313 ?x542)))
 (let (($x544 ((_ is stack ) ?x255)))
 (let (($x547 (= c____ right-to-left)))
 (let (($x548 (and $x547 $x544)))
 (let ((?x396 (center s____)))
 (let (($x549 ((_ is stack ) ?x396)))
 (let (($x550 (= c____ center-to-right)))
 (let (($x551 (and $x550 $x549)))
 (let ((?x537 (top ?x396)))
 (let ((?x538 (stack ?x537 ?x238)))
 (let (($x565 (= ?x313 ?x538)))
 (let (($x552 (= c____ center-to-left)))
 (let (($x553 (and $x552 $x549)))
 (let ((?x346 (rest ?x238)))
 (let (($x561 (= ?x313 ?x346)))
 (let (($x554 ((_ is stack ) ?x238)))
 (let (($x555 (= c____ left-to-right)))
 (let (($x556 (and $x555 $x554)))
 (let (($x557 (= c____ left-to-center)))
 (let (($x558 (and $x557 $x554)))
 (ite $x558 $x561 (ite $x556 $x561 (ite $x553 $x565 (ite $x551 $x574 (ite $x548 $x568 $x574))))))))))))))))))))))))))))))))
(assert
 (let ((?x255 (right s____)))
 (let ((?x347 (right s_____)))
 (let (($x570 (= ?x347 ?x255)))
 (let ((?x540 (rest ?x255)))
 (let (($x567 (= ?x347 ?x540)))
 (let (($x544 ((_ is stack ) ?x255)))
 (let (($x545 (= c____ right-to-center)))
 (let (($x546 (and $x545 $x544)))
 (let (($x547 (= c____ right-to-left)))
 (let (($x548 (and $x547 $x544)))
 (let ((?x396 (center s____)))
 (let ((?x537 (top ?x396)))
 (let ((?x539 (stack ?x537 ?x255)))
 (let (($x566 (= ?x347 ?x539)))
 (let (($x549 ((_ is stack ) ?x396)))
 (let (($x550 (= c____ center-to-right)))
 (let (($x551 (and $x550 $x549)))
 (let (($x552 (= c____ center-to-left)))
 (let (($x553 (and $x552 $x549)))
 (let ((?x238 (left s____)))
 (let (($x554 ((_ is stack ) ?x238)))
 (let (($x555 (= c____ left-to-right)))
 (let (($x556 (and $x555 $x554)))
 (let (($x587 (ite $x556 $x570 (ite $x553 $x570 (ite $x551 $x566 (ite $x548 $x567 (ite $x546 $x567 $x570)))))))
 (let ((?x393 (top ?x238)))
 (let ((?x533 (stack ?x393 ?x255)))
 (let (($x562 (= ?x347 ?x533)))
 (let (($x557 (= c____ left-to-center)))
 (let (($x558 (and $x557 $x554)))
 (ite $x558 $x562 $x587)))))))))))))))))))))))))))))))
(assert
 (let ((?x396 (center s____)))
 (let ((?x534 (center s_____)))
 (let (($x572 (= ?x534 ?x396)))
 (let ((?x255 (right s____)))
 (let ((?x541 (top ?x255)))
 (let ((?x543 (stack ?x541 ?x396)))
 (let (($x569 (= ?x534 ?x543)))
 (let (($x544 ((_ is stack ) ?x255)))
 (let (($x545 (= c____ right-to-center)))
 (let (($x546 (and $x545 $x544)))
 (let (($x547 (= c____ right-to-left)))
 (let (($x548 (and $x547 $x544)))
 (let ((?x536 (rest ?x396)))
 (let (($x564 (= ?x534 ?x536)))
 (let (($x549 ((_ is stack ) ?x396)))
 (let (($x550 (= c____ center-to-right)))
 (let (($x551 (and $x550 $x549)))
 (let (($x552 (= c____ center-to-left)))
 (let (($x553 (and $x552 $x549)))
 (let ((?x238 (left s____)))
 (let ((?x393 (top ?x238)))
 (let ((?x535 (stack ?x393 ?x396)))
 (let (($x563 (= ?x534 ?x535)))
 (let (($x554 ((_ is stack ) ?x238)))
 (let (($x555 (= c____ left-to-right)))
 (let (($x556 (and $x555 $x554)))
 (let (($x586 (ite $x556 $x563 (ite $x553 $x564 (ite $x551 $x564 (ite $x548 $x572 (ite $x546 $x569 $x572)))))))
 (let (($x557 (= c____ left-to-center)))
 (let (($x558 (and $x557 $x554)))
 (ite $x558 $x572 $x586)))))))))))))))))))))))))))))))
(assert
 (let ((?x19 (stack C empty)))
 (let ((?x347 (right s_____)))
 (let (($x590 (= ?x347 ?x19)))
 (let ((?x18 (stack B empty)))
 (let ((?x534 (center s_____)))
 (let (($x621 (= ?x534 ?x18)))
 (let ((?x15 (stack A empty)))
 (let ((?x313 (left s_____)))
 (let (($x622 (= ?x313 ?x15)))
 (let (($x624 (not (and $x622 $x621 $x590))))
 (not $x624))))))))))))
(check-sat)
(exit)
