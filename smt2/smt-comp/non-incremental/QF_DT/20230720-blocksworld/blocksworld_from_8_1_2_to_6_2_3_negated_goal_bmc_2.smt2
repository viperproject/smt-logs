(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x23 (stack H empty)))
 (let ((?x24 (stack E ?x23)))
 (let ((?x25 (stack K ?x24)))
 (let ((?x26 (stack G ?x25)))
 (let ((?x27 (stack I ?x26)))
 (let ((?x28 (stack J ?x27)))
 (let ((?x29 (stack C ?x28)))
 (let ((?x30 (stack A ?x29)))
 (let ((?x91 (left s_tmp_)))
 (= ?x91 ?x30)))))))))))
(assert
 (let ((?x31 (stack D empty)))
 (let ((?x94 (center s_tmp__)))
 (= ?x94 ?x31))))
(assert
 (let ((?x32 (stack B empty)))
 (let ((?x33 (stack F ?x32)))
 (let ((?x97 (right s_tmp___)))
 (= ?x97 ?x33)))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x124 (left s_tmp__)))
 (= (left s_tmp___) ?x124)))
(assert
 (let ((?x94 (center s_tmp__)))
 (= (center s_tmp___) ?x94)))
(assert
 (let ((?x128 (center s_tmp_)))
 (= ?x128 (center s_tmp))))
(assert
 (let ((?x131 (right s_tmp_)))
 (= ?x131 (right s_tmp))))
(assert
 (let ((?x91 (left s_tmp_)))
 (let ((?x124 (left s_tmp__)))
 (= ?x124 ?x91))))
(assert
 (let ((?x131 (right s_tmp_)))
 (let ((?x135 (right s_tmp__)))
 (= ?x135 ?x131))))
(assert
 (= c__ c!1))
(assert
 (let ((?x68 (left s_)))
 (let ((?x212 (left s__)))
 (let (($x257 (= ?x212 ?x68)))
 (let ((?x71 (right s_)))
 (let (($x236 ((_ is stack ) ?x71)))
 (let (($x215 (= c_ right-to-left)))
 (let (($x228 (and $x215 $x236)))
 (let ((?x73 (center s_)))
 (let (($x229 ((_ is stack ) ?x73)))
 (let (($x230 (= c_ center-to-right)))
 (let (($x219 (and $x230 $x229)))
 (let (($x220 (= c_ center-to-left)))
 (let (($x221 (and $x220 $x229)))
 (let (($x266 (ite $x221 (= ?x212 (stack (top ?x73) ?x68)) (ite $x219 $x257 (ite $x228 (= ?x212 (stack (top ?x71) ?x68)) $x257)))))
 (let (($x244 (= ?x212 (rest ?x68))))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 $x244 (ite $x239 $x244 $x266)))))))))))))))))))))))
(assert
 (let ((?x71 (right s_)))
 (let ((?x232 (right s__)))
 (let (($x253 (= ?x232 ?x71)))
 (let (($x250 (= ?x232 (rest ?x71))))
 (let (($x236 ((_ is stack ) ?x71)))
 (let (($x213 (= c_ right-to-center)))
 (let (($x214 (and $x213 $x236)))
 (let (($x215 (= c_ right-to-left)))
 (let (($x228 (and $x215 $x236)))
 (let ((?x73 (center s_)))
 (let (($x229 ((_ is stack ) ?x73)))
 (let (($x230 (= c_ center-to-right)))
 (let (($x219 (and $x230 $x229)))
 (let (($x263 (ite $x219 (= ?x232 (stack (top ?x73) ?x71)) (ite $x228 $x250 (ite $x214 $x250 $x253)))))
 (let (($x220 (= c_ center-to-left)))
 (let (($x221 (and $x220 $x229)))
 (let ((?x68 (left s_)))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 (= ?x232 (stack (top ?x68) ?x71)) (ite $x239 $x253 (ite $x221 $x253 $x263))))))))))))))))))))))))))
(assert
 (let ((?x73 (center s_)))
 (let ((?x226 (center s__)))
 (let (($x255 (= ?x226 ?x73)))
 (let ((?x71 (right s_)))
 (let (($x236 ((_ is stack ) ?x71)))
 (let (($x213 (= c_ right-to-center)))
 (let (($x214 (and $x213 $x236)))
 (let (($x215 (= c_ right-to-left)))
 (let (($x228 (and $x215 $x236)))
 (let (($x247 (= ?x226 (rest ?x73))))
 (let (($x229 ((_ is stack ) ?x73)))
 (let (($x230 (= c_ center-to-right)))
 (let (($x219 (and $x230 $x229)))
 (let (($x262 (ite $x219 $x247 (ite $x228 $x255 (ite $x214 (= ?x226 (stack (top ?x71) ?x73)) $x255)))))
 (let (($x220 (= c_ center-to-left)))
 (let (($x221 (and $x220 $x229)))
 (let ((?x68 (left s_)))
 (let (($x237 ((_ is stack ) ?x68)))
 (let (($x238 (= c_ left-to-right)))
 (let (($x239 (and $x238 $x237)))
 (let (($x240 (= c_ left-to-center)))
 (let (($x241 (and $x240 $x237)))
 (ite $x241 $x255 (ite $x239 (= ?x226 (stack (top ?x68) ?x73)) (ite $x221 $x247 $x262))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x212 (left s__)))
 (let ((?x138 (left s___)))
 (let (($x386 (= ?x138 ?x212)))
 (let ((?x232 (right s__)))
 (let ((?x353 (top ?x232)))
 (let ((?x354 (stack ?x353 ?x212)))
 (let (($x380 (= ?x138 ?x354)))
 (let (($x356 ((_ is stack ) ?x232)))
 (let (($x359 (= c__ right-to-left)))
 (let (($x360 (and $x359 $x356)))
 (let ((?x226 (center s__)))
 (let (($x361 ((_ is stack ) ?x226)))
 (let (($x362 (= c__ center-to-right)))
 (let (($x363 (and $x362 $x361)))
 (let ((?x349 (top ?x226)))
 (let ((?x350 (stack ?x349 ?x212)))
 (let (($x377 (= ?x138 ?x350)))
 (let (($x364 (= c__ center-to-left)))
 (let (($x365 (and $x364 $x361)))
 (let ((?x140 (rest ?x212)))
 (let (($x373 (= ?x138 ?x140)))
 (let (($x366 ((_ is stack ) ?x212)))
 (let (($x367 (= c__ left-to-right)))
 (let (($x368 (and $x367 $x366)))
 (let (($x369 (= c__ left-to-center)))
 (let (($x370 (and $x369 $x366)))
 (ite $x370 $x373 (ite $x368 $x373 (ite $x365 $x377 (ite $x363 $x386 (ite $x360 $x380 $x386))))))))))))))))))))))))))))))))
(assert
 (let ((?x232 (right s__)))
 (let ((?x141 (right s___)))
 (let (($x382 (= ?x141 ?x232)))
 (let ((?x352 (rest ?x232)))
 (let (($x379 (= ?x141 ?x352)))
 (let (($x356 ((_ is stack ) ?x232)))
 (let (($x357 (= c__ right-to-center)))
 (let (($x358 (and $x357 $x356)))
 (let (($x359 (= c__ right-to-left)))
 (let (($x360 (and $x359 $x356)))
 (let ((?x226 (center s__)))
 (let ((?x349 (top ?x226)))
 (let ((?x351 (stack ?x349 ?x232)))
 (let (($x378 (= ?x141 ?x351)))
 (let (($x361 ((_ is stack ) ?x226)))
 (let (($x362 (= c__ center-to-right)))
 (let (($x363 (and $x362 $x361)))
 (let (($x364 (= c__ center-to-left)))
 (let (($x365 (and $x364 $x361)))
 (let ((?x212 (left s__)))
 (let (($x366 ((_ is stack ) ?x212)))
 (let (($x367 (= c__ left-to-right)))
 (let (($x368 (and $x367 $x366)))
 (let (($x399 (ite $x368 $x382 (ite $x365 $x382 (ite $x363 $x378 (ite $x360 $x379 (ite $x358 $x379 $x382)))))))
 (let ((?x209 (top ?x212)))
 (let ((?x345 (stack ?x209 ?x232)))
 (let (($x374 (= ?x141 ?x345)))
 (let (($x369 (= c__ left-to-center)))
 (let (($x370 (and $x369 $x366)))
 (ite $x370 $x374 $x399)))))))))))))))))))))))))))))))
(assert
 (let ((?x226 (center s__)))
 (let ((?x346 (center s___)))
 (let (($x384 (= ?x346 ?x226)))
 (let ((?x232 (right s__)))
 (let ((?x353 (top ?x232)))
 (let ((?x355 (stack ?x353 ?x226)))
 (let (($x381 (= ?x346 ?x355)))
 (let (($x356 ((_ is stack ) ?x232)))
 (let (($x357 (= c__ right-to-center)))
 (let (($x358 (and $x357 $x356)))
 (let (($x359 (= c__ right-to-left)))
 (let (($x360 (and $x359 $x356)))
 (let ((?x348 (rest ?x226)))
 (let (($x376 (= ?x346 ?x348)))
 (let (($x361 ((_ is stack ) ?x226)))
 (let (($x362 (= c__ center-to-right)))
 (let (($x363 (and $x362 $x361)))
 (let (($x364 (= c__ center-to-left)))
 (let (($x365 (and $x364 $x361)))
 (let ((?x212 (left s__)))
 (let ((?x209 (top ?x212)))
 (let ((?x347 (stack ?x209 ?x226)))
 (let (($x375 (= ?x346 ?x347)))
 (let (($x366 ((_ is stack ) ?x212)))
 (let (($x367 (= c__ left-to-right)))
 (let (($x368 (and $x367 $x366)))
 (let (($x398 (ite $x368 $x375 (ite $x365 $x376 (ite $x363 $x376 (ite $x360 $x384 (ite $x358 $x381 $x384)))))))
 (let (($x369 (= c__ left-to-center)))
 (let (($x370 (and $x369 $x366)))
 (ite $x370 $x384 $x398)))))))))))))))))))))))))))))))
(assert
 (let ((?x44 (stack H (stack G (stack C empty)))))
 (let ((?x141 (right s___)))
 (let (($x402 (= ?x141 ?x44)))
 (let ((?x41 (stack K (stack A empty))))
 (let ((?x346 (center s___)))
 (let (($x433 (= ?x346 ?x41)))
 (let ((?x39 (stack D (stack E (stack I (stack F (stack B (stack J empty))))))))
 (let ((?x138 (left s___)))
 (let (($x434 (= ?x138 ?x39)))
 (let (($x436 (not (and $x434 $x433 $x402))))
 (not $x436))))))))))))
(check-sat)
(exit)
